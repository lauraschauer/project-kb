{
    "advisory_record": {
        "cve_id": "CVE-2018-7753",
        "description": "An issue was discovered in Bleach 2.1.x before 2.1.3. Attributes that have URI values weren't properly sanitized if the values contained character entities. Using character entities, it was possible to construct a URI value with a scheme that was not allowed that would slide through unsanitized.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814108,
        "updated_timestamp": 1664814108,
        "repository_url": null,
        "references": {
            "": 254,
            "commit::c5df5789ec3471a31311f42c2d19fc2cf21b35ef": 7,
            "https://bugs.debian.org/892252": 4,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://security-tracker.debian.org/tracker/CVE-2018-7753": 4,
            "https://github.com/mozilla/bleach/releases/tag/v2.1.3": 2,
            "https://github.com/mozilla/bleach/pull/356": 2,
            "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=892252": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "commit::9584f42051c0039cb0f27a617e8ab3e945018cc6": 2,
            "https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "commit::ae078dff09bf9524e08c836b817caf7846a5bc23": 2,
            "https://bugs.debian.org/cgi-bin/bugspam.cgi?bug=892252": 2,
            "https://www.debian.org/Bugs/": 2,
            "https://bugs.debian.org/debbugs-source/": 2,
            "commit::73dfef1d3b96c2e432660d8d2f2e9d0eaa230e36": 2,
            "commit::61bf0e6db3bdce6294633555e08dd061af465c3c": 2,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.co/hiddenchars": 1,
            "https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment": 1,
            "https://github.com/mozilla/bleach/pull/356#event-1505128763": 1
        },
        "affected_products": [
            "URI",
            "Bleach",
            "n/a"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "URI"
        ],
        "keywords": [
            "discover",
            "slide",
            "attribute",
            "issue",
            "contain",
            "have",
            "scheme",
            "entity",
            "allow",
            "sanitize",
            "character",
            "value",
            "construct",
            "bleach"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "c5df5789ec3471a31311f42c2d19fc2cf21b35ef",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520284649,
            "hunks": 0,
            "message": "Merge pull request #356 from willkg/fix-entities Fix url sanitizing",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "356": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 356",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 7 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 356",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73dfef1d3b96c2e432660d8d2f2e9d0eaa230e36",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520089117,
            "hunks": 14,
            "message": "Fix url sanitizing Fixes a security issue where url sanitizing wouldn't work if there were character entities breaking up the scheme. This allowed javascript urls even when they were not explicitly allowed.",
            "diff": [
                "diff --git a/bleach/sanitizer.py b/bleach/sanitizer.py",
                "index 81df765..ac6a55c 100644",
                "--- a/bleach/sanitizer.py",
                "+++ b/bleach/sanitizer.py",
                "@@ -6,2 +6,3 @@ import string",
                " import six",
                "+from six.moves.urllib.parse import urlparse",
                " from xml.sax.saxutils import unescape",
                "@@ -29,4 +30,7 @@ from bleach.utils import alphabetize_attributes, force_unicode",
                "+#: Map of entity name to expanded entity",
                "+ENTITIES = entities",
                "+",
                " #: Trie of html entity string -> character representation",
                "-ENTITIES_TRIE = Trie(entities)",
                "+ENTITIES_TRIE = Trie(ENTITIES)",
                "@@ -81,2 +85,50 @@ INVISIBLE_REPLACEMENT_CHAR = '?'",
                "+def convert_entity(value):",
                "+    \"\"\"Convert an entity (minus the & and ; part) into what it represents",
                "+",
                "+    This handles numeric, hex, and text entities.",
                "+",
                "+    :arg value: the string (minus the ``&`` and ``;`` part) to convert",
                "+",
                "+    :returns: unicode character",
                "+",
                "+    \"\"\"",
                "+    if value[0] == '#':",
                "+        if value[1] in ('x', 'X'):",
                "+            return six.unichr(int(value[2:], 16))",
                "+        return six.unichr(int(value[1:], 10))",
                "+",
                "+    return ENTITIES[value]",
                "+",
                "+",
                "+def convert_entities(text):",
                "+    \"\"\"Converts all found entities in the text",
                "+",
                "+    :arg text: the text to convert entities in",
                "+",
                "+    :returns: unicode text with converted entities",
                "+",
                "+    \"\"\"",
                "+    if '&' not in text:",
                "+        return text",
                "+",
                "+    new_text = []",
                "+    for part in next_possible_entity(text):",
                "+        if not part:",
                "+            continue",
                "+",
                "+        if part.startswith('&'):",
                "+            entity = match_entity(part)",
                "+            if entity is not None:",
                "+                new_text.append(convert_entity(entity))",
                "+                remainder = part[len(entity) + 2:]",
                "+                if part:",
                "+                    new_text.append(remainder)",
                "+                continue",
                "+",
                "+        new_text.append(part)",
                "+",
                "+    return u''.join(new_text)",
                "+",
                "+",
                " class BleachHTMLTokenizer(HTMLTokenizer):",
                "@@ -87,3 +139,3 @@ class BleachHTMLTokenizer(HTMLTokenizer):",
                "         # However, when that gets called, it's consumed an &, so we put that in",
                "-        # the steam.",
                "+        # the stream.",
                "         if fromAttribute:",
                "@@ -481,5 +533,5 @@ class BleachSanitizerFilter(sanitizer.Filter):",
                "                     # and and one for ; at the end",
                "-                    part = part[len(entity) + 2:]",
                "-                    if part:",
                "-                        new_tokens.append({'type': 'Characters', 'data': part})",
                "+                    remainder = part[len(entity) + 2:]",
                "+                    if remainder:",
                "+                        new_tokens.append({'type': 'Characters', 'data': remainder})",
                "                     continue",
                "@@ -490,2 +542,56 @@ class BleachSanitizerFilter(sanitizer.Filter):",
                "+    def sanitize_uri_value(self, value, allowed_protocols):",
                "+        \"\"\"Checks a uri value to see if it's allowed",
                "+",
                "+        :arg value: the uri value to sanitize",
                "+        :arg allowed_protocols: list of allowed protocols",
                "+",
                "+        :returns: allowed value or None",
                "+",
                "+        \"\"\"",
                "+        # NOTE(willkg): This transforms the value into one that's easier to",
                "+        # match and verify, but shouldn't get returned since it's vastly",
                "+        # different than the original value.",
                "+",
                "+        # Convert all character entities in the value",
                "+        new_value = convert_entities(value)",
                "+",
                "+        # Nix single quote, whitespace, and non-printable charcters",
                "+        new_value = re.sub(",
                "+            \"[`\\000-\\040\\177-\\240\\s]+\",",
                "+            '',",
                "+            new_value",
                "+        )",
                "+",
                "+        # Remove REPLACEMENT characters",
                "+        new_value = new_value.replace('\\ufffd', '')",
                "+",
                "+        # Lowercase it--this breaks the value, but makes it easier to match",
                "+        # against",
                "+        new_value = new_value.lower()",
                "+",
                "+        # Drop attributes with uri values that have protocols that aren't",
                "+        # allowed",
                "+        parsed = urlparse(new_value)",
                "+        if parsed.scheme:",
                "+            # If urlparse found a scheme, check that",
                "+            if parsed.scheme in allowed_protocols:",
                "+                return value",
                "+",
                "+        else:",
                "+            # Allow uris that are just an anchor",
                "+            if new_value.startswith('#'):",
                "+                return value",
                "+",
                "+            # Handle protocols that urlparse doesn't recognize like \"myprotocol\"",
                "+            if ':' in new_value and new_value.split(':')[0] in allowed_protocols:",
                "+                return value",
                "+",
                "+            # If there's no protocol/scheme specified, then assume it's \"http\"",
                "+            # and see if that's allowed",
                "+            if 'http' in allowed_protocols:",
                "+                return value",
                "+",
                "+        return None",
                "+",
                "     def allow_token(self, token):",
                "@@ -510,17 +616,9 @@ class BleachSanitizerFilter(sanitizer.Filter):",
                "-                # Look at attributes that have uri values",
                "+                # Drop attributes with uri values that use a disallowed protocol",
                "+                # Sanitize attributes with uri values",
                "                 if namespaced_name in self.attr_val_is_uri:",
                "-                    val_unescaped = re.sub(",
                "-                        \"[`\\000-\\040\\177-\\240\\s]+\",",
                "-                        '',",
                "-                        unescape(val)).lower()",
                "-",
                "-                    # Remove replacement characters from unescaped characters.",
                "-                    val_unescaped = val_unescaped.replace(\"\\ufffd\", \"\")",
                "-",
                "-                    # Drop attributes with uri values that have protocols that",
                "-                    # aren't allowed",
                "-                    if (re.match(r'^[a-z0-9][-+.a-z0-9]*:', val_unescaped) and",
                "-                            (val_unescaped.split(':')[0] not in self.allowed_protocols)):",
                "+                    new_value = self.sanitize_uri_value(val, self.allowed_protocols)",
                "+                    if new_value is None:",
                "                         continue",
                "+                    val = new_value",
                "diff --git a/tests/test_clean.py b/tests/test_clean.py",
                "index 221addb..f680e8e 100644",
                "--- a/tests/test_clean.py",
                "+++ b/tests/test_clean.py",
                "@@ -215,3 +215,3 @@ def test_nested_script_tag():",
                " ])",
                "-def test_bare_entities(text, expected):",
                "+def test_bare_entities_get_escaped_correctly(text, expected):",
                "     assert clean(text) == expected",
                "@@ -279,3 +279,3 @@ def test_bare_entities(text, expected):",
                " ])",
                "-def test_character_entities(text, expected):",
                "+def test_character_entities_handling(text, expected):",
                "     assert clean(text) == expected",
                "@@ -536,6 +536,96 @@ def test_attributes_list():",
                "     (",
                "-        '<a href=\"http://xx.com\">invalid href</a>',",
                "+        '<a href=\"http://example.com\">invalid href</a>',",
                "         {'protocols': ['myprotocol']},",
                "         '<a>invalid href</a>'",
                "-    )",
                "+    ),",
                "+",
                "+    # Anchors are ok",
                "+    (",
                "+        '<a href=\"#example.com\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a href=\"#example.com\">foo</a>'",
                "+    ),",
                "+",
                "+    # Allow implicit http if allowed",
                "+    (",
                "+        '<a href=\"example.com\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"example.com\">valid</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"example.com:8000\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"example.com:8000\">valid</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"localhost\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"localhost\">valid</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"localhost:8000\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"localhost:8000\">valid</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"192.168.100.100\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"192.168.100.100\">valid</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"192.168.100.100:8000\">valid</a>',",
                "+        {'protocols': ['http']},",
                "+        '<a href=\"192.168.100.100:8000\">valid</a>'",
                "+    ),",
                "+",
                "+    # Disallow implicit http if disallowed",
                "+    (",
                "+        '<a href=\"example.com\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"example.com:8000\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"localhost\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"localhost:8000\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"192.168.100.100\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"192.168.100.100:8000\">foo</a>',",
                "+        {'protocols': []},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+",
                "+    # Disallowed protocols with sneaky character entities",
                "+    (",
                "+        '<a href=\"javas&#x09;cript:alert(1)\">alert</a>',",
                "+        {},",
                "+        '<a>alert</a>'",
                "+    ),",
                "+    (",
                "+        '<a href=\"&#14;javascript:alert(1)\">alert</a>',",
                "+        {},",
                "+        '<a>alert</a>'",
                "+    ),",
                "+",
                "+    # Checking the uri should change it at all",
                "+    (",
                "+        '<a href=\"http://example.com/?foo&nbsp;bar\">foo</a>',",
                "+        {},",
                "+        '<a href=\"http://example.com/?foo&nbsp;bar\">foo</a>'",
                "+    ),",
                " ])"
            ],
            "changed_files": [
                "bleach/sanitizer.py",
                "tests/test_clean.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: scheme, issue, character, allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sanitize",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "61bf0e6db3bdce6294633555e08dd061af465c3c",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520284129,
            "hunks": 1,
            "message": "Fix errant comment",
            "diff": [
                "diff --git a/bleach/sanitizer.py b/bleach/sanitizer.py",
                "index ac6a55c..56f6d96 100644",
                "--- a/bleach/sanitizer.py",
                "+++ b/bleach/sanitizer.py",
                "@@ -558,3 +558,3 @@ class BleachSanitizerFilter(sanitizer.Filter):",
                "-        # Nix single quote, whitespace, and non-printable charcters",
                "+        # Nix backtick, space characters, and control characters",
                "         new_value = re.sub("
            ],
            "changed_files": [
                "bleach/sanitizer.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sanitize",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9584f42051c0039cb0f27a617e8ab3e945018cc6",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520285583,
            "hunks": 2,
            "message": "Prep for 2.1.3 release",
            "diff": [
                "diff --git a/bleach/__init__.py b/bleach/__init__.py",
                "index 8ed2c51..b81b0bb 100644",
                "--- a/bleach/__init__.py",
                "+++ b/bleach/__init__.py",
                "@@ -35,5 +35,5 @@ if _html5lib_version < ['1', '0'] or 'b' in _html5lib_version[1]:",
                " # yyyymmdd",
                "-__releasedate__ = ''",
                "+__releasedate__ = '20180305'",
                " # x.y.z or x.y.z.dev0 -- semver",
                "-__version__ = '2.1.3.dev0'",
                "+__version__ = '2.1.3'",
                " VERSION = parse_version(__version__)"
            ],
            "changed_files": [
                "bleach/__init__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                }
            ]
        },
        {
            "commit_id": "3e9b9ec55bbec5906800c3838d0840b4741f74d9",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520346365,
            "hunks": 4,
            "message": "Add tests for sanitizing urls in css properties",
            "diff": [
                "diff --git a/bleach/sanitizer.py b/bleach/sanitizer.py",
                "index 56f6d96..09cae19 100644",
                "--- a/bleach/sanitizer.py",
                "+++ b/bleach/sanitizer.py",
                "@@ -686,6 +686,6 @@ class BleachSanitizerFilter(sanitizer.Filter):",
                "         \"\"\"Sanitizes css in style tags\"\"\"",
                "-        # disallow urls",
                "+        # Drop any url values",
                "         style = re.compile('url\\s*\\(\\s*[^\\s)]+?\\s*\\)\\s*').sub(' ', style)",
                "-        # gauntlet",
                "+        # The gauntlet of sanitization",
                "diff --git a/tests/test_css.py b/tests/test_css.py",
                "index d8880d7..ad81f59 100644",
                "--- a/tests/test_css.py",
                "+++ b/tests/test_css.py",
                "@@ -68,3 +68,2 @@ clean = partial(clean, tags=['p'], attributes=['style'])",
                " def test_allowed_css(data, styles, expected):",
                "-",
                "     p_single = '<p style=\"{0!s}\">bar</p>'",
                "@@ -91,2 +90,53 @@ def test_valid_css():",
                "+@pytest.mark.parametrize('data, expected', [",
                "+    # No url--unchanged",
                "+    (",
                "+        '<p style=\"background: #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+",
                "+    # Verify urls with no quotes, single quotes, and double quotes are all dropped",
                "+    (",
                "+        '<p style=\"background: url(topbanner.png) #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+    (",
                "+        '<p style=\"background: url(\\'topbanner.png\\') #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+    (",
                "+        '<p style=\\'background: url(\"topbanner.png\") #00D;\\'>foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+",
                "+    # Verify urls with spacing",
                "+    (",
                "+        '<p style=\"background: url(  \\'topbanner.png\\') #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+    (",
                "+        '<p style=\"background: url(\\'topbanner.png\\'  ) #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+    (",
                "+        '<p style=\"background: url(  \\'topbanner.png\\'  ) #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+    (",
                "+        '<p style=\"background: url (  \\'topbanner.png\\'  ) #00D;\">foo</p>',",
                "+        '<p style=\"background: #00D;\">foo</p>'",
                "+    ),",
                "+",
                "+    # Verify urls with character entities--this isn't valid, so the entire",
                "+    # property is dropped",
                "+    (",
                "+        '<p style=\"background: url&#x09;(\\'topbanner.png\\') #00D;\">foo</p>',",
                "+        '<p style=\"\">foo</p>'",
                "+    ),",
                "+",
                "+])",
                "+def test_urls(data, expected):",
                "+    assert clean(data, styles=['background']) == expected",
                "+",
                "+",
                " def test_style_hang():"
            ],
            "changed_files": [
                "bleach/sanitizer.py",
                "tests/test_css.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sanitize",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e7f83b82b023e4956f99e9316fc7a621f6f507af",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520185941,
            "hunks": 0,
            "message": "Merge pull request #355 from willkg/fix-test-data Fix MANIFEST and data_to_json.py related to recent changes",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "355": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 355",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c9fa0ed2e688c1b93e74bffd688d3107d2d45fd7",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520102926,
            "hunks": 0,
            "message": "Merge pull request #354 from willkg/more-test-cleanup Merge all the clean tests into one file and clean up",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "354": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 354",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8f79858aededa7a130bfd3e9c856c15c6194d117",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520032913,
            "hunks": 0,
            "message": "Merge pull request #353 from willkg/tests-cleanup Tests cleanup and dev prep",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "353": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e19904ee5b7318dd0c183037199e72c5fa4b0154",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520348142,
            "hunks": 0,
            "message": "Merge pull request #358 from willkg/css-tests Add tests for sanitizing urls in css properties",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "358": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 358",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "138e5d7084c533cc3a2420942df47281c6e4e1e0",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520030209,
            "hunks": 22,
            "message": "Rework tests This switches it so the \"in\" and \"out\" for tests are in the same file. This makes them easier to read through on GitHub and in an editor.",
            "diff": [
                "diff --git a/tests/data/1.test b/tests/data/1.test",
                "index c900ecc..aba4c02 100644",
                "--- a/tests/data/1.test",
                "+++ b/tests/data/1.test",
                "@@ -1 +1,3 @@",
                " >\"><script>alert(\"XSS\")</script>&",
                "+--",
                "+&gt;\"&gt;&lt;script&gt;alert(\"XSS\")&lt;/script&gt;&amp;",
                "diff --git a/tests/data/10.test b/tests/data/10.test",
                "index 268771b..a6db9f9 100644",
                "--- a/tests/data/10.test",
                "+++ b/tests/data/10.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=\"javascript:alert('XSS');\">",
                "+--",
                "+&lt;img src=\"javascript:alert('XSS');\"&gt;",
                "diff --git a/tests/data/11.test b/tests/data/11.test",
                "index 16a49c7..37cbbfa 100644",
                "--- a/tests/data/11.test",
                "+++ b/tests/data/11.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=javascript:alert('XSS')>",
                "+--",
                "+&lt;img src=\"javascript:alert('XSS')\"&gt;",
                "diff --git a/tests/data/12.test b/tests/data/12.test",
                "index d4b96e6..04c7ea8 100644",
                "--- a/tests/data/12.test",
                "+++ b/tests/data/12.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=JaVaScRiPt:alert('XSS')>",
                "+--",
                "+&lt;img src=\"JaVaScRiPt:alert('XSS')\"&gt;",
                "diff --git a/tests/data/13.test b/tests/data/13.test",
                "index 07279a8..36d4aae 100644",
                "--- a/tests/data/13.test",
                "+++ b/tests/data/13.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=JaVaScRiPt:alert(&quot;XSS<WBR>&quot;)>",
                "+--",
                "+&lt;img src=\"JaVaScRiPt:alert(&amp;quot;XSS&lt;WBR\"&gt;&quot;)&gt;",
                "diff --git a/tests/data/14.test b/tests/data/14.test",
                "index b704c0b..f154c73 100644",
                "--- a/tests/data/14.test",
                "+++ b/tests/data/14.test",
                "@@ -1 +1,3 @@",
                " <IMGSRC=&#106;&#97;&#118;&#97;&<WBR>#115;&#99;&#114;&#105;&#112;&<WBR>#116;&#58;&#97;",
                "+--",
                "+&lt;imgsrc=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;wbr&gt;#115;&#99;&#114;&#105;&#112;&amp;&lt;wbr&gt;&lt;/wbr&gt;#116;&#58;&#97;&lt;/imgsrc=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/15.test b/tests/data/15.test",
                "index b6a2de6..c48c3e4 100644",
                "--- a/tests/data/15.test",
                "+++ b/tests/data/15.test",
                "@@ -1 +1,3 @@",
                " &#108;&#101;&<WBR>#114;&#116;&#40;&#39;&#88;&#83<WBR>;&#83;&#39;&#41>",
                "+--",
                "+&#108;&#101;&amp;&lt;wbr&gt;&lt;/wbr&gt;#114;&#116;&#40;&#39;&#88;&amp;#83&lt;wbr&gt;&lt;/wbr&gt;;&#83;&#39;&amp;#41&gt;",
                "diff --git a/tests/data/16.test b/tests/data/16.test",
                "index d66b592..938240b 100644",
                "--- a/tests/data/16.test",
                "+++ b/tests/data/16.test",
                "@@ -1 +1,3 @@",
                " <IMGSRC=&#0000106&#0000097&<WBR>#0000118&#0000097&#0000115&<WBR>#0000099&#0000114&#0000105&<WBR>#0000112&#0000116&#0000058&<WBR>#0000097&#0000108&#0000101&<WBR>#0000114&#0000116&#0000040&<WBR>#0000039&#0000088&#0000083&<WBR>#0000083&#0000039&#0000041>",
                "+--",
                "+&lt;imgsrc=&amp;#0000106&amp;#0000097&amp;&lt;wbr&gt;#0000118&amp;#0000097&amp;#0000115&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000099&amp;#0000114&amp;#0000105&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000112&amp;#0000116&amp;#0000058&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000097&amp;#0000108&amp;#0000101&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000114&amp;#0000116&amp;#0000040&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000039&amp;#0000088&amp;#0000083&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000083&amp;#0000039&amp;#0000041&gt;&lt;/imgsrc=&amp;#0000106&amp;#0000097&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/17.test b/tests/data/17.test",
                "index 6e71b15..166e884 100644",
                "--- a/tests/data/17.test",
                "+++ b/tests/data/17.test",
                "@@ -1 +1,3 @@",
                " <IMGSRC=&#x6A&#x61&#x76&#x61&#x73&<WBR>#x63&#x72&#x69&#x70&#x74&#x3A&<WBR>#x61&#x6C&#x65&#x72&#x74&#x28&<WBR>#x27&#x58&#x53&#x53&#x27&#x29>",
                "+--",
                "+&lt;imgsrc=&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;wbr&gt;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;&lt;wbr&gt;&lt;/wbr&gt;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;&lt;wbr&gt;&lt;/wbr&gt;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;&lt;/imgsrc=&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/18.test b/tests/data/18.test",
                "index 1c17372..635461f 100644",
                "--- a/tests/data/18.test",
                "+++ b/tests/data/18.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=\"jav&#x09;ascript:alert(<WBR>'XSS');\">",
                "+--",
                "+&lt;img src=\"jav&amp;#x09;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "diff --git a/tests/data/19.test b/tests/data/19.test",
                "index e6e7974..1a1ebe4 100644",
                "--- a/tests/data/19.test",
                "+++ b/tests/data/19.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=\"jav&#x0A;ascript:alert(<WBR>'XSS');\">",
                "+--",
                "+&lt;img src=\"jav&amp;#x0A;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "diff --git a/tests/data/2.test b/tests/data/2.test",
                "index 21b93db..aefcbe2 100644",
                "--- a/tests/data/2.test",
                "+++ b/tests/data/2.test",
                "@@ -1 +1,3 @@",
                " \"><STYLE>@import\"javascript:alert('XSS')\";</STYLE>",
                "+--",
                "+\"&gt;&lt;style&gt;@import\"javascript:alert('XSS')\";&lt;/style&gt;",
                "diff --git a/tests/data/20.test b/tests/data/20.test",
                "index 614b544..ceae0bd 100644",
                "--- a/tests/data/20.test",
                "+++ b/tests/data/20.test",
                "@@ -1 +1,3 @@",
                " <IMG SRC=\"jav&#x0D;ascript:alert(<WBR>'XSS');\">",
                "+--",
                "+&lt;img src=\"jav&amp;#x0D;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "diff --git a/tests/data/3.test b/tests/data/3.test",
                "index 8dc3a4e..67f3591 100644",
                "--- a/tests/data/3.test",
                "+++ b/tests/data/3.test",
                "@@ -1 +1,3 @@",
                " >\"'><img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(%26quot;%26%23x20;XSS%26%23x20;Test%26%23x20;Successful%26quot;)>",
                "+--",
                "+&gt;\"'&gt;&lt;img%20src%3d%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(%26quot;%26%23x20;xss%26%23x20;test%26%23x20;successful%26quot;)&gt;&lt;/img%20src%3d%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(%26quot;%26%23x20;xss%26%23x20;test%26%23x20;successful%26quot;)&gt;",
                "diff --git a/tests/data/4.test b/tests/data/4.test",
                "index c4cf51c..10438d8 100644",
                "--- a/tests/data/4.test",
                "+++ b/tests/data/4.test",
                "@@ -1 +1,3 @@",
                " <scr<script></script>ipt type=\"text/javascript\">alert(\"foo\");</<script></script>script<del></del>>",
                "+--",
                "+&lt;scr&lt;script&gt;ipt type=\"text/javascript\"&gt;alert(\"foo\");script&lt;del&gt;&lt;/del&gt;&gt;&lt;/scr&lt;script&gt;",
                "diff --git a/tests/data/5.test b/tests/data/5.test",
                "index 0b03876..dd45837 100644",
                "--- a/tests/data/5.test",
                "+++ b/tests/data/5.test",
                "@@ -1 +1,3 @@",
                " >%22%27><img%20src%3d%22javascript:alert(%27%20XSS%27)%22>",
                "+--",
                "+&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(%27%20xss%27)%22&gt;&lt;/img%20src%3d%22javascript:alert(%27%20xss%27)%22&gt;",
                "diff --git a/tests/data/7.test b/tests/data/7.test",
                "index 827f9b9..73f5cab 100644",
                "--- a/tests/data/7.test",
                "+++ b/tests/data/7.test",
                "@@ -1 +1,3 @@",
                " \">",
                "+--",
                "+\"&gt;",
                "diff --git a/tests/data/8.test b/tests/data/8.test",
                "index ddf33a9..f5be4f2 100644",
                "--- a/tests/data/8.test",
                "+++ b/tests/data/8.test",
                "@@ -1 +1,3 @@",
                " >\"",
                "+--",
                "+&gt;\"",
                "diff --git a/tests/data/9.test b/tests/data/9.test",
                "index 9cf5865..26d27f7 100644",
                "--- a/tests/data/9.test",
                "+++ b/tests/data/9.test",
                "@@ -1 +1,3 @@",
                " '';!--\"<XSS>=&{()}",
                "+--",
                "+'';!--\"&lt;xss&gt;=&amp;{()}&lt;/xss&gt;",
                "diff --git a/tests/test_security.py b/tests/test_security.py",
                "index 4c71077..9dd4933 100644",
                "--- a/tests/test_security.py",
                "+++ b/tests/test_security.py",
                "@@ -199,6 +199,6 @@ def get_tests():",
                "-@pytest.mark.parametrize('fn, text', get_tests())",
                "-def test_regressions(fn, text):",
                "+@pytest.mark.parametrize('fn, test_case', get_tests())",
                "+def test_regressions(fn, test_case):",
                "     \"\"\"Regression tests for clean so we can see if there are issues\"\"\"",
                "-    expected = six.text_type(open(fn + '.out', 'r').read())",
                "+    test_data, expected = test_case.split('\\n--\\n')",
                "@@ -207,2 +207,5 @@ def test_regressions(fn, text):",
                "     # at the beginning or end, then we'll have to figure out something else.",
                "-    assert clean(text.strip()) == expected.strip()",
                "+    test_data = test_data.strip()",
                "+    expected = expected.strip()",
                "+",
                "+    assert clean(test_data) == expected"
            ],
            "changed_files": [
                "tests/data/1.test",
                "tests/data/10.test",
                "tests/data/11.test",
                "tests/data/12.test",
                "tests/data/13.test",
                "tests/data/14.test",
                "tests/data/15.test",
                "tests/data/16.test",
                "tests/data/17.test",
                "tests/data/18.test",
                "tests/data/19.test",
                "tests/data/2.test",
                "tests/data/20.test",
                "tests/data/3.test",
                "tests/data/4.test",
                "tests/data/5.test",
                "tests/data/7.test",
                "tests/data/8.test",
                "tests/data/9.test",
                "tests/test_security.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d580f0abba6ae62da22e59be4355ea1d690eb1f5",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520118922,
            "hunks": 7,
            "message": "Fix MANIFEST and data_to_json.py related to recent changes I squashed test cases into single files--no more .out files. This carries that change through to MANIFEST.in and our tests_website system.",
            "diff": [
                "diff --git a/MANIFEST.in b/MANIFEST.in",
                "index 1ae68e2..14ad79c 100644",
                "--- a/MANIFEST.in",
                "+++ b/MANIFEST.in",
                "@@ -14,3 +14,3 @@ recursive-include docs *.rst",
                "-recursive-include tests *.py *.test *.out",
                "+recursive-include tests *.py *.test",
                "diff --git a/tests_website/data_to_json.py b/tests_website/data_to_json.py",
                "index debe5a9..5870d64 100755",
                "--- a/tests_website/data_to_json.py",
                "+++ b/tests_website/data_to_json.py",
                "@@ -4,8 +4,8 @@",
                " Util to write a directory of test cases with input filenames",
                "-<testcase>.test and output filenames <testcase>.test.out as JSON to",
                "-stdout.",
                "+<testcase>.test as JSON to stdout.",
                "-example:",
                "+example::",
                "+",
                "+    $ python tests/data_to_json.py tests/data > testcases.json",
                "-python tests/data_to_json.py tests/data > testcases.json",
                " \"\"\"",
                "@@ -23,5 +23,8 @@ def main():",
                "     parser = argparse.ArgumentParser(description=__doc__)",
                "-    parser.add_argument('data_dir',",
                "-                        help='directory containing test cases with input files'",
                "-                        ' named <testcase>.test and output <testcase>.test.out')",
                "+    parser.add_argument(",
                "+        'data_dir',",
                "+        help=(",
                "+            'directory containing test cases with names like <testcase>.test'",
                "+        )",
                "+    )",
                "@@ -31,17 +34,18 @@ def main():",
                "     ins = [os.path.join(args.data_dir, f) for f in filenames if fnmatch.fnmatch(f, '*.test')]",
                "-    outs = [os.path.join(args.data_dir, f) for f in filenames if fnmatch.fnmatch(f, '*.test.out')]",
                "     testcases = []",
                "-    for infn, outfn in zip(ins, outs):",
                "+    for infn in ins:",
                "         case_name = infn.rsplit('.test', 1)[0]",
                "-        with open(infn, 'r') as fin, open(outfn, 'r') as fout:",
                "-            payload = fin.read()[:-1]",
                "+        with open(infn, 'r') as fin:",
                "+            data, expected = fin.read().split('\\n--\\n')",
                "+            data = data.strip()",
                "+            expected = expected.strip()",
                "+",
                "             testcases.append({",
                "-                \"title\": case_name,",
                "-                \"input_filename\": infn,",
                "-                \"output_filename\": outfn,",
                "-                \"payload\": payload,",
                "-                \"actual\": bleach.clean(payload),",
                "-                \"expected\": fout.read(),",
                "+                'title': case_name,",
                "+                'input_filename': infn,",
                "+                'payload': data,",
                "+                'actual': bleach.clean(data),",
                "+                'expected': expected,",
                "             })"
            ],
            "changed_files": [
                "MANIFEST.in",
                "tests_website/data_to_json.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "86acc45023c73462d0d75cb5148702ec2e88f242",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520030163,
            "hunks": 21,
            "message": "Update to 2.1.3dev0 for dev work",
            "diff": [
                "diff --git a/bleach/__init__.py b/bleach/__init__.py",
                "index 6ebdc20..8ed2c51 100644",
                "--- a/bleach/__init__.py",
                "+++ b/bleach/__init__.py",
                "@@ -35,5 +35,5 @@ if _html5lib_version < ['1', '0'] or 'b' in _html5lib_version[1]:",
                " # yyyymmdd",
                "-__releasedate__ = '20171207'",
                "+__releasedate__ = ''",
                " # x.y.z or x.y.z.dev0 -- semver",
                "-__version__ = '2.1.2'",
                "+__version__ = '2.1.3.dev0'",
                " VERSION = parse_version(__version__)",
                "diff --git a/tests/data/1.test.out b/tests/data/1.test.out",
                "deleted file mode 100644",
                "index d89228a..0000000",
                "--- a/tests/data/1.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&gt;\"&gt;&lt;script&gt;alert(\"XSS\")&lt;/script&gt;&amp;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/10.test.out b/tests/data/10.test.out",
                "deleted file mode 100644",
                "index 29998a1..0000000",
                "--- a/tests/data/10.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"javascript:alert('XSS');\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/11.test.out b/tests/data/11.test.out",
                "deleted file mode 100644",
                "index 52a02dc..0000000",
                "--- a/tests/data/11.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"javascript:alert('XSS')\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/12.test.out b/tests/data/12.test.out",
                "deleted file mode 100644",
                "index fb0807a..0000000",
                "--- a/tests/data/12.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"JaVaScRiPt:alert('XSS')\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/13.test.out b/tests/data/13.test.out",
                "deleted file mode 100644",
                "index 70be2ba..0000000",
                "--- a/tests/data/13.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"JaVaScRiPt:alert(&amp;quot;XSS&lt;WBR\"&gt;&quot;)&gt;",
                "diff --git a/tests/data/14.test.out b/tests/data/14.test.out",
                "deleted file mode 100644",
                "index 4800a4d..0000000",
                "--- a/tests/data/14.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;imgsrc=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;wbr&gt;#115;&#99;&#114;&#105;&#112;&amp;&lt;wbr&gt;&lt;/wbr&gt;#116;&#58;&#97;&lt;/imgsrc=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/15.test.out b/tests/data/15.test.out",
                "deleted file mode 100644",
                "index 4a57246..0000000",
                "--- a/tests/data/15.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&#108;&#101;&amp;&lt;wbr&gt;&lt;/wbr&gt;#114;&#116;&#40;&#39;&#88;&amp;#83&lt;wbr&gt;&lt;/wbr&gt;;&#83;&#39;&amp;#41&gt;",
                "diff --git a/tests/data/16.test.out b/tests/data/16.test.out",
                "deleted file mode 100644",
                "index c8e31d8..0000000",
                "--- a/tests/data/16.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;imgsrc=&amp;#0000106&amp;#0000097&amp;&lt;wbr&gt;#0000118&amp;#0000097&amp;#0000115&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000099&amp;#0000114&amp;#0000105&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000112&amp;#0000116&amp;#0000058&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000097&amp;#0000108&amp;#0000101&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000114&amp;#0000116&amp;#0000040&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000039&amp;#0000088&amp;#0000083&amp;&lt;wbr&gt;&lt;/wbr&gt;#0000083&amp;#0000039&amp;#0000041&gt;&lt;/imgsrc=&amp;#0000106&amp;#0000097&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/17.test.out b/tests/data/17.test.out",
                "deleted file mode 100644",
                "index 8d47f57..0000000",
                "--- a/tests/data/17.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;imgsrc=&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;wbr&gt;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;&lt;wbr&gt;&lt;/wbr&gt;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;&lt;wbr&gt;&lt;/wbr&gt;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;&lt;/imgsrc=&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;wbr&gt;",
                "diff --git a/tests/data/18.test.out b/tests/data/18.test.out",
                "deleted file mode 100644",
                "index e4fe2cf..0000000",
                "--- a/tests/data/18.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"jav&amp;#x09;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/19.test.out b/tests/data/19.test.out",
                "deleted file mode 100644",
                "index 4daa11a..0000000",
                "--- a/tests/data/19.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"jav&amp;#x0A;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/2.test.out b/tests/data/2.test.out",
                "deleted file mode 100644",
                "index 0b32b6a..0000000",
                "--- a/tests/data/2.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-\"&gt;&lt;style&gt;@import\"javascript:alert('XSS')\";&lt;/style&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/20.test.out b/tests/data/20.test.out",
                "deleted file mode 100644",
                "index de3a6a1..0000000",
                "--- a/tests/data/20.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;img src=\"jav&amp;#x0D;ascript:alert(&lt;WBR&gt;'XSS');\"&gt;",
                "diff --git a/tests/data/3.test.out b/tests/data/3.test.out",
                "deleted file mode 100644",
                "index f0d6962..0000000",
                "--- a/tests/data/3.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&gt;\"'&gt;&lt;img%20src%3d%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(%26quot;%26%23x20;xss%26%23x20;test%26%23x20;successful%26quot;)&gt;&lt;/img%20src%3d%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;alert(%26quot;%26%23x20;xss%26%23x20;test%26%23x20;successful%26quot;)&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/4.test.out b/tests/data/4.test.out",
                "deleted file mode 100644",
                "index 88ea86b..0000000",
                "--- a/tests/data/4.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&lt;scr&lt;script&gt;ipt type=\"text/javascript\"&gt;alert(\"foo\");script&lt;del&gt;&lt;/del&gt;&gt;&lt;/scr&lt;script&gt;",
                "diff --git a/tests/data/5.test.out b/tests/data/5.test.out",
                "deleted file mode 100644",
                "index 0d88a88..0000000",
                "--- a/tests/data/5.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(%27%20xss%27)%22&gt;&lt;/img%20src%3d%22javascript:alert(%27%20xss%27)%22&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/7.test.out b/tests/data/7.test.out",
                "deleted file mode 100644",
                "index 41fd432..0000000",
                "--- a/tests/data/7.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-\"&gt;",
                "\\ No newline at end of file",
                "diff --git a/tests/data/8.test.out b/tests/data/8.test.out",
                "deleted file mode 100644",
                "index bc1ffd4..0000000",
                "--- a/tests/data/8.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-&gt;\"",
                "\\ No newline at end of file",
                "diff --git a/tests/data/9.test.out b/tests/data/9.test.out",
                "deleted file mode 100644",
                "index 5c5eb6b..0000000",
                "--- a/tests/data/9.test.out",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "-'';!--\"&lt;xss&gt;=&amp;{()}&lt;/xss&gt;",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "bleach/__init__.py",
                "tests/data/1.test.out",
                "tests/data/10.test.out",
                "tests/data/11.test.out",
                "tests/data/12.test.out",
                "tests/data/13.test.out",
                "tests/data/14.test.out",
                "tests/data/15.test.out",
                "tests/data/16.test.out",
                "tests/data/17.test.out",
                "tests/data/18.test.out",
                "tests/data/19.test.out",
                "tests/data/2.test.out",
                "tests/data/20.test.out",
                "tests/data/3.test.out",
                "tests/data/4.test.out",
                "tests/data/5.test.out",
                "tests/data/7.test.out",
                "tests/data/8.test.out",
                "tests/data/9.test.out"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "588286152b0c24d2d2c9e68d4761c14f00ce88b6",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520092624,
            "hunks": 46,
            "message": "Merge all the clean tests into one file and clean up * Moves test_security.py tests into test_clean.py * Removes duplicate tests and unhelpful tests * Adds additional helpful test cases * Reworks some tests to be easier and run to read by parametrizing them * Adds comments and adjusts function names to be more helpful",
            "diff": [
                "diff --git a/tests/test_clean.py b/tests/test_clean.py",
                "index c5f78f7..799ae18 100644",
                "--- a/tests/test_clean.py",
                "+++ b/tests/test_clean.py",
                "@@ -1 +1,3 @@",
                "+import os",
                "+",
                " from html5lib.filters.base import Filter",
                "@@ -3,3 +5,3 @@ import pytest",
                "-import bleach",
                "+from bleach import clean",
                " from bleach.sanitizer import Cleaner",
                "@@ -7,48 +9,51 @@ from bleach.sanitizer import Cleaner",
                "-def test_empty():",
                "-    assert bleach.clean('') == ''",
                "+def test_clean_idempotent():",
                "+    \"\"\"Make sure that applying the filter twice doesn't change anything.\"\"\"",
                "+    dirty = '<span>invalid & </span> < extra http://link.com<em>'",
                "+    assert clean(clean(dirty)) == clean(dirty)",
                "-def test_nbsp():",
                "-    assert bleach.clean('&nbsp;test string&nbsp;') == '&nbsp;test string&nbsp;'",
                "+def test_only_text_is_cleaned():",
                "+    some_text = 'text'",
                "+    some_type = int",
                "+    no_type = None",
                "+    assert clean(some_text) == some_text",
                "-def test_comments_only():",
                "-    comment = '<!-- this is a comment -->'",
                "-    assert bleach.clean(comment) == ''",
                "-    assert bleach.clean(comment, strip_comments=False) == comment",
                "+    with pytest.raises(TypeError) as e:",
                "+        clean(some_type)",
                "+    assert \"argument cannot be of 'type' type\" in str(e)",
                "-    open_comment = '<!-- this is an open comment'",
                "-    assert bleach.clean(open_comment) == ''",
                "-    assert (",
                "-        bleach.clean(open_comment, strip_comments=False) ==",
                "-        '{0!s}-->'.format(open_comment)",
                "-    )",
                "+    with pytest.raises(TypeError) as e:",
                "+        clean(no_type)",
                "+    assert \"NoneType\" in str(e)",
                "-def test_with_comments():",
                "-    text = '<!-- comment -->Just text'",
                "-    assert bleach.clean(text) == 'Just text'",
                "-    assert bleach.clean(text, strip_comments=False) == text",
                "+def test_empty():",
                "+    assert clean('') == ''",
                "-def test_no_html():",
                "-    assert bleach.clean('no html string') == 'no html string'",
                "+def test_content_has_no_html():",
                "+    assert clean('no html string') == 'no html string'",
                "-def test_allowed_html():",
                "-    assert (",
                "-        bleach.clean('an <strong>allowed</strong> tag') ==",
                "+@pytest.mark.parametrize('data, expected', [",
                "+    (",
                "+        'an <strong>allowed</strong> tag',",
                "         'an <strong>allowed</strong> tag'",
                "-    )",
                "-    assert (",
                "-        bleach.clean('another <em>good</em> tag') ==",
                "+    ),",
                "+",
                "+    (",
                "+        'another <em>good</em> tag',",
                "         'another <em>good</em> tag'",
                "     )",
                "+])",
                "+def test_content_has_allowed_html(data, expected):",
                "+    assert clean(data) == expected",
                "-def test_bad_html():",
                "+def test_html_is_lowercased():",
                "     assert (",
                "-        bleach.clean('a <em>fixed tag') ==",
                "-        'a <em>fixed tag</em>'",
                "+        clean('<A HREF=\"http://example.com\">foo</A>') ==",
                "+        '<a href=\"http://example.com\">foo</a>'",
                "     )",
                "@@ -56,21 +61,106 @@ def test_bad_html():",
                "-def test_function_arguments():",
                "-    TAGS = ['span', 'br']",
                "-    ATTRS = {'span': ['style']}",
                "+@pytest.mark.parametrize('data, should_strip, expected', [",
                "+    # Regular comment",
                "+    (",
                "+        '<!-- this is a comment -->',",
                "+        True,",
                "+        ''",
                "+    ),",
                "-    text = 'a <br/><span style=\"color:red\">test</span>'",
                "-    assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "-        'a <br><span style=\"\">test</span>'",
                "+    # Open comment with no close comment bit",
                "+    (",
                "+        '<!-- open comment',",
                "+        True,",
                "+        ''",
                "+    ),",
                "+    (",
                "+        '<!--open comment',",
                "+        True,",
                "+        ''",
                "+    ),",
                "+    (",
                "+        '<!-- open comment',",
                "+        False,",
                "+        '<!-- open comment-->'",
                "+    ),",
                "+    (",
                "+        '<!--open comment',",
                "+        False,",
                "+        '<!--open comment-->'",
                "+    ),",
                "+",
                "+    # Comment with text to the right",
                "+    (",
                "+        '<!-- comment -->text',",
                "+        True,",
                "+        'text'",
                "+    ),",
                "+    (",
                "+        '<!--comment-->text',",
                "+        True,",
                "+        'text'",
                "+    ),",
                "+    (",
                "+        '<!-- comment -->text',",
                "+        False,",
                "+        '<!-- comment -->text'",
                "+    ),",
                "+    (",
                "+        '<!--comment-->text',",
                "+        False,",
                "+        '<!--comment-->text'",
                "+    ),",
                "+",
                "+    # Comment with text to the left",
                "+    (",
                "+        'text<!-- comment -->',",
                "+        True,",
                "+        'text'",
                "+    ),",
                "+    (",
                "+        'text<!--comment-->',",
                "+        True,",
                "+        'text'",
                "+    ),",
                "+    (",
                "+        'text<!-- comment -->',",
                "+        False,",
                "+        'text<!-- comment -->'",
                "+    ),",
                "+    (",
                "+        'text<!--comment-->',",
                "+        False,",
                "+        'text<!--comment-->'",
                "     )",
                "+])",
                "+def test_comments(data, should_strip, expected):",
                "+    assert clean(data, strip_comments=should_strip) == expected",
                "-def test_named_arguments():",
                "-    ATTRS = {'a': ['rel', 'href']}",
                "+@pytest.mark.parametrize('data, expected', [",
                "+    # Disallowed tag is escaped",
                "+    ('<img src=\"javascript:alert(\\'XSS\\');\">', '&lt;img src=\"javascript:alert(\\'XSS\\');\"&gt;'),",
                "+",
                "+    # Test with parens",
                "+    ('a <script>safe()</script> test', 'a &lt;script&gt;safe()&lt;/script&gt; test'),",
                "+",
                "+    # Test with braces",
                "+    ('a <style>body{}</style> test', 'a &lt;style&gt;body{}&lt;/style&gt; test'),",
                "+])",
                "+def test_disallowed_tags(data, expected):",
                "+    assert clean(data) == expected",
                "-    text = '<a href=\"http://xx.com\" rel=\"alternate\">xx.com</a>'",
                "-    assert bleach.clean(text) == '<a href=\"http://xx.com\">xx.com</a>'",
                "+",
                "+def test_invalid_char_in_tag():",
                "+    # NOTE(willkg): Two possible outcomes because attrs aren't ordered",
                "+    assert (",
                "+        clean('<script/xss src=\"http://xx.com/xss.js\"></script>') in",
                "+        [",
                "+            '&lt;script src=\"http://xx.com/xss.js\" xss=\"\"&gt;&lt;/script&gt;',",
                "+            '&lt;script xss=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "+        ]",
                "+    )",
                "     assert (",
                "-        bleach.clean(text, attributes=ATTRS) ==",
                "-        '<a href=\"http://xx.com\" rel=\"alternate\">xx.com</a>'",
                "+        clean('<script/src=\"http://xx.com/xss.js\"></script>') ==",
                "+        '&lt;script src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "     )",
                "@@ -78,10 +168,26 @@ def test_named_arguments():",
                "-def test_disallowed_html():",
                "+def test_unclosed_tag():",
                "+    assert (",
                "+        clean('a <em>fixed tag') ==",
                "+        'a <em>fixed tag</em>'",
                "+    )",
                "     assert (",
                "-        bleach.clean('a <script>safe()</script> test') ==",
                "-        'a &lt;script&gt;safe()&lt;/script&gt; test'",
                "+        clean('<script src=http://xx.com/xss.js<b>') ==",
                "+        '&lt;script src=\"http://xx.com/xss.js&lt;b\"&gt;&lt;/script&gt;'",
                "     )",
                "+    # NOTE(willkg): Two possible outcomes because attrs aren't ordered",
                "     assert (",
                "-        bleach.clean('a <style>body{}</style> test') ==",
                "-        'a &lt;style&gt;body{}&lt;/style&gt; test'",
                "+        clean('<script src=\"http://xx.com/xss.js\"<b>') in",
                "+        [",
                "+            '&lt;script src=\"http://xx.com/xss.js\" &lt;b=\"\"&gt;&lt;/script&gt;',",
                "+            '&lt;script &lt;b=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "+        ]",
                "+    )",
                "+    # NOTE(willkg): Two possible outcomes because attrs aren't ordered",
                "+    assert (",
                "+        clean('<script src=\"http://xx.com/xss.js\" <b>') in",
                "+        [",
                "+            '&lt;script src=\"http://xx.com/xss.js\" &lt;b=\"\"&gt;&lt;/script&gt;',",
                "+            '&lt;script &lt;b=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "+        ]",
                "     )",
                "@@ -89,6 +195,14 @@ def test_disallowed_html():",
                "-def test_bad_href():",
                "+def test_nested_script_tag():",
                "     assert (",
                "-        bleach.clean('<em href=\"fail\">no link</em>') ==",
                "-        '<em>no link</em>'",
                "+        clean('<<script>script>evil()<</script>/script>') ==",
                "+        '&lt;&lt;script&gt;script&gt;evil()&lt;&lt;/script&gt;/script&gt;'",
                "+    )",
                "+    assert (",
                "+        clean('<<x>script>evil()<</x>/script>') ==",
                "+        '&lt;&lt;x&gt;script&gt;evil()&lt;&lt;/x&gt;/script&gt;'",
                "+    )",
                "+    assert (",
                "+        clean('<script<script>>evil()</script</script>>') ==",
                "+        '&lt;script&lt;script&gt;&gt;evil()&gt;&lt;/script&lt;script&gt;'",
                "     )",
                "@@ -102,3 +216,3 @@ def test_bad_href():",
                " def test_bare_entities(text, expected):",
                "-    assert bleach.clean(text) == expected",
                "+    assert clean(text) == expected",
                "@@ -109,2 +223,3 @@ def test_bare_entities(text, expected):",
                "     ('&nbsp;', '&nbsp;'),",
                "+    ('&nbsp; test string &nbsp;', '&nbsp; test string &nbsp;'),",
                "     ('&lt;em&gt;strong&lt;/em&gt;', '&lt;em&gt;strong&lt;/em&gt;'),",
                "@@ -156,42 +271,67 @@ def test_bare_entities(text, expected):",
                "     ('&#', '&amp;#'),",
                "-    ('&#<', '&amp;#&lt;')",
                "+    ('&#<', '&amp;#&lt;'),",
                "+",
                "+    # html5lib tokenizer unescapes character entities, so these would become '",
                "+    # and \" which makes it possible to break out of html attributes.",
                "+    #",
                "+    # Verify that clean() doesn't unescape entities.",
                "+    ('&#39;&#34;', '&#39;&#34;'),",
                " ])",
                " def test_character_entities(text, expected):",
                "-    assert bleach.clean(text) == expected",
                "+    assert clean(text) == expected",
                "-def test_weird_strings():",
                "-    s = '</3'",
                "-    assert bleach.clean(s) == ''",
                "-",
                "-",
                "-def test_stripping():",
                "-    text = 'a test <em>with</em> <b>html</b> tags'",
                "-    assert (",
                "-        bleach.clean(text, strip=True) ==",
                "+@pytest.mark.parametrize('data, kwargs, expected', [",
                "+    # All tags are allowed, so it strips nothing",
                "+    (",
                "+        'a test <em>with</em> <b>html</b> tags',",
                "+        {'strip': True},",
                "         'a test <em>with</em> <b>html</b> tags'",
                "-    )",
                "+    ),",
                "-    text = 'a test <em>with</em> <img src=\"http://example.com/\"> <b>html</b> tags'",
                "-    assert (",
                "-        bleach.clean(text, strip=True) ==",
                "+    # img tag is disallowed, so it's stripped",
                "+    (",
                "+        'a test <em>with</em> <img src=\"http://example.com/\"> <b>html</b> tags',",
                "+        {'strip': True},",
                "         'a test <em>with</em>  <b>html</b> tags'",
                "-    )",
                "+    ),",
                "-    text = '<p><a href=\"http://example.com/\">link text</a></p>'",
                "-    assert (",
                "-        bleach.clean(text, tags=['p'], strip=True) ==",
                "+    # a tag is disallowed, so it's stripped",
                "+    (",
                "+        '<p><a href=\"http://example.com/\">link text</a></p>',",
                "+        {'tags': ['p'], 'strip': True},",
                "         '<p>link text</p>'",
                "-    )",
                "-    text = '<p><span>multiply <span>nested <span>text</span></span></span></p>'",
                "-    assert (",
                "-        bleach.clean(text, tags=['p'], strip=True) ==",
                "+    ),",
                "+",
                "+    # handle nested disallowed tag",
                "+    (",
                "+        '<p><span>multiply <span>nested <span>text</span></span></span></p>',",
                "+        {'tags': ['p'], 'strip': True},",
                "         '<p>multiply nested text</p>'",
                "-    )",
                "+    ),",
                "-    text = '<p><a href=\"http://example.com/\"><img src=\"http://example.com/\"></a></p>'",
                "-    assert (",
                "-        bleach.clean(text, tags=['p', 'a'], strip=True) ==",
                "+    # handle disallowed tag that's deep in the tree",
                "+    (",
                "+        '<p><a href=\"http://example.com/\"><img src=\"http://example.com/\"></a></p>',",
                "+        {'tags': ['a', 'p'], 'strip': True},",
                "         '<p><a href=\"http://example.com/\"></a></p>'",
                "-    )",
                "+    ),",
                "+])",
                "+def test_stripping_tags(data, kwargs, expected):",
                "+    assert clean(data, **kwargs) == expected",
                "+",
                "+",
                "+@pytest.mark.parametrize('data, expected', [",
                "+    (",
                "+        '<scri<script>pt>alert(1)</scr</script>ipt>',",
                "+        'pt&gt;alert(1)ipt&gt;'",
                "+    ),",
                "+    (",
                "+        '<scri<scri<script>pt>pt>alert(1)</script>',",
                "+        'pt&gt;pt&gt;alert(1)'",
                "+    ),",
                "+])",
                "+def test_stripping_tags_is_safe(data, expected):",
                "+    \"\"\"Test stripping tags shouldn't result in malicious content\"\"\"",
                "+    assert clean(data, strip=True) == expected",
                "@@ -199,2 +339,3 @@ def test_stripping():",
                " def test_allowed_styles():",
                "+    \"\"\"Test allowed styles\"\"\"",
                "     ATTRS = ['style']",
                "@@ -203,3 +344,3 @@ def test_allowed_styles():",
                "     assert (",
                "-        bleach.clean('<b style=\"top:0\"></b>', attributes=ATTRS) ==",
                "+        clean('<b style=\"top:0\"></b>', attributes=ATTRS) ==",
                "         '<b style=\"\"></b>'",
                "@@ -208,3 +349,3 @@ def test_allowed_styles():",
                "     text = '<b style=\"color: blue;\"></b>'",
                "-    assert bleach.clean(text, attributes=ATTRS, styles=STYLE) == text",
                "+    assert clean(text, attributes=ATTRS, styles=STYLE) == text",
                "@@ -212,3 +353,3 @@ def test_allowed_styles():",
                "     assert (",
                "-        bleach.clean(text, attributes=ATTRS, styles=STYLE) ==",
                "+        clean(text, attributes=ATTRS, styles=STYLE) ==",
                "         '<b style=\"color: blue;\"></b>'",
                "@@ -217,7 +358,6 @@ def test_allowed_styles():",
                "-def test_lowercase_html():",
                "-    \"\"\"We should output lowercase HTML.\"\"\"",
                "+def test_href_with_wrong_tag():",
                "     assert (",
                "-        bleach.clean('<EM CLASS=\"FOO\">BAR</EM>', attributes=['class']) ==",
                "-        '<em class=\"FOO\">BAR</em>'",
                "+        clean('<em href=\"fail\">no link</em>') ==",
                "+        '<em>no link</em>'",
                "     )",
                "@@ -225,2 +365,62 @@ def test_lowercase_html():",
                "+def test_disallowed_attr():",
                "+    IMG = ['img', ]",
                "+    IMG_ATTR = ['src']",
                "+",
                "+    assert (",
                "+        clean('<a onclick=\"evil\" href=\"test\">test</a>') ==",
                "+        '<a href=\"test\">test</a>'",
                "+    )",
                "+    assert (",
                "+        clean('<img onclick=\"evil\" src=\"test\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "+        '<img src=\"test\">'",
                "+    )",
                "+    assert (",
                "+        clean('<img href=\"invalid\" src=\"test\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "+        '<img src=\"test\">'",
                "+    )",
                "+",
                "+",
                "+def test_unquoted_attr_values_are_quoted():",
                "+    assert (",
                "+        clean('<abbr title=mytitle>myabbr</abbr>') ==",
                "+        '<abbr title=\"mytitle\">myabbr</abbr>'",
                "+    )",
                "+",
                "+",
                "+def test_unquoted_event_handler_attr_value():",
                "+    assert (",
                "+        clean('<a href=\"http://xx.com\" onclick=foo()>xx.com</a>') ==",
                "+        '<a href=\"http://xx.com\">xx.com</a>'",
                "+    )",
                "+",
                "+",
                "+def test_invalid_filter_attr():",
                "+    IMG = ['img', ]",
                "+    IMG_ATTR = {",
                "+        'img': lambda tag, name, val: name == 'src' and val == \"http://example.com/\"",
                "+    }",
                "+",
                "+    assert (",
                "+        clean('<img onclick=\"evil\" src=\"http://example.com/\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "+        '<img src=\"http://example.com/\">'",
                "+    )",
                "+    assert (",
                "+        clean('<img onclick=\"evil\" src=\"http://badhost.com/\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "+        '<img>'",
                "+    )",
                "+",
                "+",
                "+def test_poster_attribute():",
                "+    \"\"\"Poster attributes should not allow javascript.\"\"\"",
                "+    tags = ['video']",
                "+    attrs = {'video': ['poster']}",
                "+",
                "+    test = '<video poster=\"javascript:alert(1)\"></video>'",
                "+    assert clean(test, tags=tags, attributes=attrs) == '<video></video>'",
                "+",
                "+    ok = '<video poster=\"/foo.png\"></video>'",
                "+    assert clean(ok, tags=tags, attributes=attrs) == ok",
                "+",
                "+",
                " def test_attributes_callable():",
                "@@ -232,3 +432,3 @@ def test_attributes_callable():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         u'<a title=\"blah\">example</a>'",
                "@@ -247,3 +447,3 @@ def test_attributes_wildcard():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         'both <em id=\"foo\">can</em> have <img id=\"bar\" src=\"foo\">'",
                "@@ -260,3 +460,3 @@ def test_attributes_wildcard_callable():",
                "     assert (",
                "-        bleach.clean(u'<a href=\"/foo\" title=\"blah\">example</a>', tags=TAGS, attributes=ATTRS) ==",
                "+        clean(u'<a href=\"/foo\" title=\"blah\">example</a>', tags=TAGS, attributes=ATTRS) ==",
                "         u'<a title=\"blah\">example</a>'",
                "@@ -277,3 +477,3 @@ def test_attributes_tag_callable():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         u'foo <img> baz'",
                "@@ -282,3 +482,3 @@ def test_attributes_tag_callable():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         u'foo <img src=\"https://example.com\"> baz'",
                "@@ -295,3 +495,3 @@ def test_attributes_tag_list():",
                "     assert (",
                "-        bleach.clean(u'<a href=\"/foo\" title=\"blah\">example</a>', tags=TAGS, attributes=ATTRS) ==",
                "+        clean(u'<a href=\"/foo\" title=\"blah\">example</a>', tags=TAGS, attributes=ATTRS) ==",
                "         u'<a title=\"blah\">example</a>'",
                "@@ -307,3 +507,3 @@ def test_attributes_list():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         u'<a title=\"blah\">example</a>'",
                "@@ -312,2 +512,35 @@ def test_attributes_list():",
                "+@pytest.mark.parametrize('data, kwargs, expected', [",
                "+    # javascript: is not allowed by default",
                "+    (",
                "+        '<a href=\"javascript:alert(\\'XSS\\')\">xss</a>',",
                "+        {},",
                "+        '<a>xss</a>'",
                "+    ),",
                "+",
                "+    # File protocol is not allowed by default",
                "+    (",
                "+        '<a href=\"file:///tmp/foo\">foo</a>',",
                "+        {},",
                "+        '<a>foo</a>'",
                "+    ),",
                "+",
                "+    # Specified protocols are allowed",
                "+    (",
                "+        '<a href=\"myprotocol://more_text\">allowed href</a>',",
                "+        {'protocols': ['myprotocol']},",
                "+        '<a href=\"myprotocol://more_text\">allowed href</a>'",
                "+    ),",
                "+",
                "+    # Unspecified protocols are not allowed",
                "+    (",
                "+        '<a href=\"http://xx.com\">invalid href</a>',",
                "+        {'protocols': ['myprotocol']},",
                "+        '<a>invalid href</a>'",
                "+    )",
                "+])",
                "+def test_uri_value_allowed_protocols(data, kwargs, expected):",
                "+    assert clean(data, **kwargs) == expected",
                "+",
                "+",
                " def test_svg_attr_val_allows_ref():",
                "@@ -322,3 +555,3 @@ def test_svg_attr_val_allows_ref():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         '<svg><rect fill=\"url(#foo)\"></rect></svg>'",
                "@@ -333,3 +566,3 @@ def test_svg_attr_val_allows_ref():",
                "     assert (",
                "-        bleach.clean(text, tags=TAGS, attributes=ATTRS) ==",
                "+        clean(text, tags=TAGS, attributes=ATTRS) ==",
                "         '<svg><rect></rect></svg>'",
                "@@ -355,3 +588,3 @@ def test_svg_allow_local_href(text, expected):",
                "     }",
                "-    assert bleach.clean(text, tags=TAGS, attributes=ATTRS) == expected",
                "+    assert clean(text, tags=TAGS, attributes=ATTRS) == expected",
                "@@ -374,69 +607,73 @@ def test_svg_allow_local_href_nonlocal(text, expected):",
                "     }",
                "-    assert bleach.clean(text, tags=TAGS, attributes=ATTRS) == expected",
                "+    assert clean(text, tags=TAGS, attributes=ATTRS) == expected",
                "+",
                "+",
                "+@pytest.mark.xfail(reason='regression from bleach 1.4')",
                "+def test_weird_strings():",
                "+    s = '</3'",
                "+    assert clean(s) == '</3'",
                "-@pytest.mark.xfail(reason='html5lib >= 0.99999999: changed API')",
                "+@pytest.mark.xfail(reason='regression from bleach 1.4')",
                " def test_sarcasm():",
                "     \"\"\"Jokes should crash.<sarcasm/>\"\"\"",
                "-    dirty = 'Yeah right <sarcasm/>'",
                "-    clean = 'Yeah right &lt;sarcasm/&gt;'",
                "-    assert bleach.clean(dirty) == clean",
                "-",
                "+    assert (",
                "+        clean('Yeah right <sarcasm/>') ==",
                "+        'Yeah right &lt;sarcasm/&gt;'",
                "+    )",
                "-def test_user_defined_protocols_valid():",
                "-    valid_href = '<a href=\"myprotocol://more_text\">allowed href</a>'",
                "-    assert bleach.clean(valid_href, protocols=['myprotocol']) == valid_href",
                "+@pytest.mark.parametrize('data, expected', [",
                "+    # Convert bell",
                "+    ('1\\a23', '1?23'),",
                "-def test_user_defined_protocols_invalid():",
                "-    invalid_href = '<a href=\"http://xx.com\">invalid href</a>'",
                "-    cleaned_href = '<a>invalid href</a>'",
                "-    assert bleach.clean(invalid_href, protocols=['my_protocol']) == cleaned_href",
                "+    # Convert backpsace",
                "+    ('1\\b23', '1?23'),",
                "+    # Convert formfeed",
                "+    ('1\\v23', '1?23'),",
                "-def test_filters():",
                "-    # Create a Filter that changes all the attr values to \"moo\"",
                "-    class MooFilter(Filter):",
                "-        def __iter__(self):",
                "-            for token in Filter.__iter__(self):",
                "-                if token['type'] in ['StartTag', 'EmptyTag'] and token['data']:",
                "-                    for attr, value in token['data'].items():",
                "-                        token['data'][attr] = 'moo'",
                "+    # Convert vertical tab",
                "+    ('1\\f23', '1?23'),",
                "-                yield token",
                "+    # Convert a bunch of characters in a string",
                "+    ('import y\\bose\\bm\\bi\\bt\\be\\b', 'import y?ose?m?i?t?e?'),",
                "+])",
                "+def test_invisible_characters(data, expected):",
                "+    assert clean(data) == expected",
                "-    ATTRS = {",
                "-        'img': ['rel', 'src']",
                "-    }",
                "-    TAGS = ['img']",
                "-    cleaner = Cleaner(tags=TAGS, attributes=ATTRS, filters=[MooFilter])",
                "+def get_tests():",
                "+    \"\"\"Retrieves regression tests from data/ directory",
                "-    dirty = 'this is cute! <img src=\"http://example.com/puppy.jpg\" rel=\"nofollow\">'",
                "-    assert (",
                "-        cleaner.clean(dirty) ==",
                "-        'this is cute! <img rel=\"moo\" src=\"moo\">'",
                "-    )",
                "+    :returns: list of ``(filename, filedata)`` tuples",
                "+    \"\"\"",
                "+    datadir = os.path.join(os.path.dirname(__file__), 'data')",
                "+    tests = [",
                "+        os.path.join(datadir, fn) for fn in os.listdir(datadir)",
                "+        if fn.endswith('.test')",
                "+    ]",
                "+    # Sort numerically which makes it easier to iterate through them",
                "+    tests.sort(key=lambda x: int(os.path.basename(x).split('.', 1)[0]))",
                "-def test_clean_idempotent():",
                "-    \"\"\"Make sure that applying the filter twice doesn't change anything.\"\"\"",
                "-    dirty = '<span>invalid & </span> < extra http://link.com<em>'",
                "-    assert bleach.clean(bleach.clean(dirty)) == bleach.clean(dirty)",
                "+    testcases = [",
                "+        (fn, open(fn, 'r').read()) for fn in tests",
                "+    ]",
                "+    return testcases",
                "-def test_only_text_is_cleaned():",
                "-    some_text = 'text'",
                "-    some_type = int",
                "-    no_type = None",
                "-    assert bleach.clean(some_text) == some_text",
                "+@pytest.mark.parametrize('fn, test_case', get_tests())",
                "+def test_regressions(fn, test_case):",
                "+    \"\"\"Regression tests for clean so we can see if there are issues\"\"\"",
                "+    test_data, expected = test_case.split('\\n--\\n')",
                "-    with pytest.raises(TypeError) as e:",
                "-        bleach.clean(some_type)",
                "-    assert \"argument cannot be of 'type' type\" in str(e)",
                "+    # NOTE(willkg): This strips input and expected which makes it easier to",
                "+    # maintain the files. If there comes a time when the input needs whitespace",
                "+    # at the beginning or end, then we'll have to figure out something else.",
                "+    test_data = test_data.strip()",
                "+    expected = expected.strip()",
                "-    with pytest.raises(TypeError) as e:",
                "-        bleach.clean(no_type)",
                "-    assert \"NoneType\" in str(e)",
                "+    assert clean(test_data) == expected",
                "@@ -454 +691,25 @@ class TestCleaner:",
                "         )",
                "+",
                "+    def test_filters(self):",
                "+        # Create a Filter that changes all the attr values to \"moo\"",
                "+        class MooFilter(Filter):",
                "+            def __iter__(self):",
                "+                for token in Filter.__iter__(self):",
                "+                    if token['type'] in ['StartTag', 'EmptyTag'] and token['data']:",
                "+                        for attr, value in token['data'].items():",
                "+                            token['data'][attr] = 'moo'",
                "+",
                "+                    yield token",
                "+",
                "+        ATTRS = {",
                "+            'img': ['rel', 'src']",
                "+        }",
                "+        TAGS = ['img']",
                "+",
                "+        cleaner = Cleaner(tags=TAGS, attributes=ATTRS, filters=[MooFilter])",
                "+",
                "+        dirty = 'this is cute! <img src=\"http://example.com/puppy.jpg\" rel=\"nofollow\">'",
                "+        assert (",
                "+            cleaner.clean(dirty) ==",
                "+            'this is cute! <img rel=\"moo\" src=\"moo\">'",
                "+        )",
                "diff --git a/tests/test_security.py b/tests/test_security.py",
                "deleted file mode 100644",
                "index 9dd4933..0000000",
                "--- a/tests/test_security.py",
                "+++ /dev/null",
                "@@ -1,211 +0,0 @@",
                "-\"\"\"More advanced security tests\"\"\"",
                "-",
                "-import os",
                "-",
                "-import pytest",
                "-import six",
                "-",
                "-from bleach import clean",
                "-",
                "-",
                "-def test_escaped_entities():",
                "-    # html5lib unescapes character entities, so these would become ' and \"",
                "-    # which makes it possible to break out of html attributes.",
                "-    #",
                "-    # Verify that bleach.clean() doesn't unescape entities.",
                "-    assert (",
                "-        clean('&#39;&#34;') ==",
                "-        '&#39;&#34;'",
                "-    )",
                "-",
                "-",
                "-def test_nested_script_tag():",
                "-    assert (",
                "-        clean('<<script>script>evil()<</script>/script>') ==",
                "-        '&lt;&lt;script&gt;script&gt;evil()&lt;&lt;/script&gt;/script&gt;'",
                "-    )",
                "-    assert (",
                "-        clean('<<x>script>evil()<</x>/script>') ==",
                "-        '&lt;&lt;x&gt;script&gt;evil()&lt;&lt;/x&gt;/script&gt;'",
                "-    )",
                "-",
                "-",
                "-def test_nested_script_tag_r():",
                "-    assert (",
                "-        clean('<script<script>>evil()</script</script>>') ==",
                "-        '&lt;script&lt;script&gt;&gt;evil()&gt;&lt;/script&lt;script&gt;'",
                "-    )",
                "-",
                "-",
                "-def test_invalid_attr():",
                "-    IMG = ['img', ]",
                "-    IMG_ATTR = ['src']",
                "-",
                "-    assert (",
                "-        clean('<a onclick=\"evil\" href=\"test\">test</a>') ==",
                "-        '<a href=\"test\">test</a>'",
                "-    )",
                "-    assert (",
                "-        clean('<img onclick=\"evil\" src=\"test\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "-        '<img src=\"test\">'",
                "-    )",
                "-    assert (",
                "-        clean('<img href=\"invalid\" src=\"test\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "-        '<img src=\"test\">'",
                "-    )",
                "-",
                "-",
                "-def test_unquoted_attr():",
                "-    assert (",
                "-        clean('<abbr title=mytitle>myabbr</abbr>') ==",
                "-        '<abbr title=\"mytitle\">myabbr</abbr>'",
                "-    )",
                "-",
                "-",
                "-def test_unquoted_event_handler():",
                "-    assert (",
                "-        clean('<a href=\"http://xx.com\" onclick=foo()>xx.com</a>') ==",
                "-        '<a href=\"http://xx.com\">xx.com</a>'",
                "-    )",
                "-",
                "-",
                "-def test_invalid_attr_value():",
                "-    assert (",
                "-        clean('<img src=\"javascript:alert(\\'XSS\\');\">') ==",
                "-        '&lt;img src=\"javascript:alert(\\'XSS\\');\"&gt;'",
                "-    )",
                "-",
                "-",
                "-def test_invalid_href_attr():",
                "-    assert (",
                "-        clean('<a href=\"javascript:alert(\\'XSS\\')\">xss</a>') ==",
                "-        '<a>xss</a>'",
                "-    )",
                "-",
                "-",
                "-def test_invalid_filter_attr():",
                "-    IMG = ['img', ]",
                "-    IMG_ATTR = {",
                "-        'img': lambda tag, name, val: name == 'src' and val == \"http://example.com/\"",
                "-    }",
                "-",
                "-    assert (",
                "-        clean('<img onclick=\"evil\" src=\"http://example.com/\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "-        '<img src=\"http://example.com/\">'",
                "-    )",
                "-    assert (",
                "-        clean('<img onclick=\"evil\" src=\"http://badhost.com/\" />', tags=IMG, attributes=IMG_ATTR) ==",
                "-        '<img>'",
                "-    )",
                "-",
                "-",
                "-def test_invalid_tag_char():",
                "-    assert (",
                "-        clean('<script/xss src=\"http://xx.com/xss.js\"></script>') in",
                "-        [",
                "-            '&lt;script src=\"http://xx.com/xss.js\" xss=\"\"&gt;&lt;/script&gt;',",
                "-            '&lt;script xss=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "-        ]",
                "-    )",
                "-    assert (",
                "-        clean('<script/src=\"http://xx.com/xss.js\"></script>') ==",
                "-        '&lt;script src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "-    )",
                "-",
                "-",
                "-def test_unclosed_tag():",
                "-    assert (",
                "-        clean('<script src=http://xx.com/xss.js<b>') ==",
                "-        '&lt;script src=\"http://xx.com/xss.js&lt;b\"&gt;&lt;/script&gt;'",
                "-    )",
                "-    assert (",
                "-        clean('<script src=\"http://xx.com/xss.js\"<b>') in",
                "-        [",
                "-            '&lt;script src=\"http://xx.com/xss.js\" &lt;b=\"\"&gt;&lt;/script&gt;',",
                "-            '&lt;script &lt;b=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "-        ]",
                "-    )",
                "-    assert (",
                "-        clean('<script src=\"http://xx.com/xss.js\" <b>') in",
                "-        [",
                "-            '&lt;script src=\"http://xx.com/xss.js\" &lt;b=\"\"&gt;&lt;/script&gt;',",
                "-            '&lt;script &lt;b=\"\" src=\"http://xx.com/xss.js\"&gt;&lt;/script&gt;'",
                "-        ]",
                "-    )",
                "-",
                "-",
                "-def test_strip():",
                "-    \"\"\"Using strip=True shouldn't result in malicious content.\"\"\"",
                "-    s = '<scri<script>pt>alert(1)</scr</script>ipt>'",
                "-    assert clean(s, strip=True) == 'pt&gt;alert(1)ipt&gt;'",
                "-    s = '<scri<scri<script>pt>pt>alert(1)</script>'",
                "-    assert clean(s, strip=True) == 'pt&gt;pt&gt;alert(1)'",
                "-",
                "-",
                "-def test_poster_attribute():",
                "-    \"\"\"Poster attributes should not allow javascript.\"\"\"",
                "-    tags = ['video']",
                "-    attrs = {'video': ['poster']}",
                "-    test = '<video poster=\"javascript:alert(1)\"></video>'",
                "-    assert clean(test, tags=tags, attributes=attrs) == '<video></video>'",
                "-    ok = '<video poster=\"/foo.png\"></video>'",
                "-    assert clean(ok, tags=tags, attributes=attrs) == ok",
                "-",
                "-",
                "-def test_feed_protocol():",
                "-    assert clean('<a href=\"feed:file:///tmp/foo\">foo</a>') == '<a>foo</a>'",
                "-",
                "-",
                "-@pytest.mark.parametrize('data, expected', [",
                "-    # Convert bell",
                "-    ('1\\a23', '1?23'),",
                "-",
                "-    # Convert backpsace",
                "-    ('1\\b23', '1?23'),",
                "-",
                "-    # Convert formfeed",
                "-    ('1\\v23', '1?23'),",
                "-",
                "-    # Convert vertical tab",
                "-    ('1\\f23', '1?23'),",
                "-",
                "-    # Convert a bunch of characters in a string",
                "-    ('import y\\bose\\bm\\bi\\bt\\be\\b', 'import y?ose?m?i?t?e?'),",
                "-])",
                "-def test_invisible_characters(data, expected):",
                "-    assert clean(data) == expected",
                "-",
                "-",
                "-def get_tests():",
                "-    \"\"\"Retrieves regression tests from data/ directory",
                "-",
                "-    :returns: list of ``(filename, filedata)`` tuples",
                "-",
                "-    \"\"\"",
                "-    datadir = os.path.join(os.path.dirname(__file__), 'data')",
                "-    tests = [",
                "-        os.path.join(datadir, fn) for fn in os.listdir(datadir)",
                "-        if fn.endswith('.test')",
                "-    ]",
                "-    # Sort numerically which makes it easier to iterate through them",
                "-    tests.sort(key=lambda x: int(os.path.basename(x).split('.', 1)[0]))",
                "-",
                "-    testcases = [",
                "-        (fn, open(fn, 'r').read()) for fn in tests",
                "-    ]",
                "-",
                "-    return testcases",
                "-",
                "-",
                "-@pytest.mark.parametrize('fn, test_case', get_tests())",
                "-def test_regressions(fn, test_case):",
                "-    \"\"\"Regression tests for clean so we can see if there are issues\"\"\"",
                "-    test_data, expected = test_case.split('\\n--\\n')",
                "-",
                "-    # NOTE(willkg): This strips input and expected which makes it easier to",
                "-    # maintain the files. If there comes a time when the input needs whitespace",
                "-    # at the beginning or end, then we'll have to figure out something else.",
                "-    test_data = test_data.strip()",
                "-    expected = expected.strip()",
                "-",
                "-    assert clean(test_data) == expected"
            ],
            "changed_files": [
                "tests/test_clean.py",
                "tests/test_security.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "18ecceb5f61896e1a88e8d965b1e61e860ded2a5",
            "repository": "https://github.com/mozilla/bleach",
            "timestamp": 1520093749,
            "hunks": 2,
            "message": "Correct a regression comment and fix a test I misunderstood",
            "diff": [
                "diff --git a/tests/test_clean.py b/tests/test_clean.py",
                "index 799ae18..221addb 100644",
                "--- a/tests/test_clean.py",
                "+++ b/tests/test_clean.py",
                "@@ -610,9 +610,8 @@ def test_svg_allow_local_href_nonlocal(text, expected):",
                "-@pytest.mark.xfail(reason='regression from bleach 1.4')",
                " def test_weird_strings():",
                "     s = '</3'",
                "-    assert clean(s) == '</3'",
                "+    assert clean(s) == ''",
                "-@pytest.mark.xfail(reason='regression from bleach 1.4')",
                "+@pytest.mark.xfail(reason='regression from bleach 1.5')",
                " def test_sarcasm():"
            ],
            "changed_files": [
                "tests/test_clean.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2.1.3",
                "v2.1.4",
                "v3.0.0",
                "v3.0.1",
                "v3.0.2",
                "v3.1.0",
                "v3.1.1",
                "v3.1.2",
                "v3.1.3",
                "v3.1.4",
                "v3.1.5",
                "v3.2.0",
                "v3.2.1",
                "v3.2.2",
                "v3.2.3",
                "v3.3.0",
                "v3.3.1",
                "v4.0.0",
                "v4.1.0",
                "v5.0.0",
                "v5.0.1",
                "v6.0.0",
                "v6.1.0"
            ],
            "matched_rules": []
        }
    ]
}
