{
    "advisory_record": {
        "cve_id": "CVE-2018-17796",
        "description": "An issue was discovered in MRCMS (aka mushroom) through 3.1.2. The WebParam.java file directly accepts the FIELD_T parameter in a request and uses it as a hash of SQL statements without filtering, resulting in a SQL injection vulnerability in getChannel() in the ChannelService.java file.",
        "reserved_timestamp": 1538265600,
        "published_timestamp": 1538337600,
        "updated_timestamp": 1538341021,
        "repository_url": null,
        "references": {
            "": 62,
            "https://github.com/wuweiit/mushroom/issues/16": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://user-images.githubusercontent.com/39950310/45863532-21dc2b80-bda9-11e8-9921-cc127a7dd955.png": 1,
            "https://user-images.githubusercontent.com/39950310/45863709-f279ee80-bda9-11e8-80db-5b8b34f8900d.png": 1,
            "https://user-images.githubusercontent.com/39950310/45863737-189f8e80-bdaa-11e8-97fe-e591c042e051.png": 1,
            "https://user-images.githubusercontent.com/39950310/45863813-6b794600-bdaa-11e8-8f5a-5502dabc4818.png": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "getChannel",
            "n/a",
            "MRCMS",
            "SQL"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "getChannel",
            "WebParam",
            "FIELD_T",
            "SQL",
            "ChannelService",
            "MRCMS"
        ],
        "keywords": [
            "discover",
            "issue",
            "result",
            "file",
            "mrcms",
            "parameter",
            "hash",
            "statement",
            "injection",
            "filtering",
            "accept",
            "mushroom",
            "getchannel",
            "vulnerability",
            "request"
        ],
        "files_extension": [
            "java"
        ],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "e66eb50bcbc5b3e2aa4a8b68dbd1c8ce12953629",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1537854923,
            "hunks": 17,
            "message": "\u00e4\u00bc\u0098\u00e5\u008c\u0096",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/core/WebAPP.java b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "index 478e5ca..439d24e 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "@@ -146,3 +146,3 @@ public final class WebAPP {",
                " \t\t\t// \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e5\u00bd\u0093\u00e5\u0089\u008d\u00e6\u00a0\u008f\u00e7\u009b\u00ae\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "-\t\t\tif(param.contentId != null){",
                "+\t\t\tif(param.existsContentId()){",
                " \t\t\t\tparam.prefix = cmc.getPrefix(param.modelType);",
                "diff --git a/src/main/java/org/marker/mushroom/core/WebParam.java b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "index d738081..cdbdc6c 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebParam.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "@@ -125,3 +125,11 @@ public final class WebParam {",
                " \t}",
                "-\t",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8\u00e5\u0086\u0085\u00e5\u00ae\u00b9Id",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean existsContentId() {",
                "+\t\treturn this.contentId != null && this.contentId != 0;",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/marker/mushroom/ext/model/ContentModelContext.java b/src/main/java/org/marker/mushroom/ext/model/ContentModelContext.java",
                "index 7f57b53..daee605 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/model/ContentModelContext.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/model/ContentModelContext.java",
                "@@ -2,11 +2,2 @@ package org.marker.mushroom.ext.model;",
                "-import java.util.ArrayList;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "-import java.util.concurrent.ConcurrentHashMap;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                " import com.alibaba.druid.util.StringUtils;",
                "@@ -27,2 +18,6 @@ import org.marker.urlrewrite.URLRewriteEngine;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import java.util.*;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+",
                "@@ -139,3 +134,3 @@ public class ContentModelContext implements IContentModelParse {",
                " \t\t// \u00e5\u00a6\u0082\u00e6\u009e\u009c\u00e5\u0086\u0085\u00e5\u00ae\u00b9id\u00e4\u00b8\u008d\u00e7\u00ad\u0089\u00e4\u00ba\u008e0\u00ef\u00bc\u008c\u00e5\u0086\u0085\u00e5\u00ae\u00b9\u00e6\u009f\u00a5\u00e8\u00af\u00a2",
                "-\t\tif(param.contentId != null && !\"0\".equals(param.contentId)){",
                "+\t\tif(param.existsContentId()){",
                "diff --git a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "index ed4336a..b2d032b 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "@@ -9,6 +9,3 @@ import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.marker.mushroom.holder.WebRealPathHolder;",
                "-import org.marker.mushroom.utils.ArrayUtils;",
                "-import org.marker.mushroom.utils.DateUtils;",
                "-import org.marker.mushroom.utils.FileTools;",
                "-import org.marker.mushroom.utils.HttpUtils;",
                "+import org.marker.mushroom.utils.*;",
                " import org.marker.urlrewrite.URLRewriteEngine;",
                "@@ -91,5 +88,4 @@ public class SystemCoreFilter implements Filter {",
                " \t\tHttpServletResponse response = (HttpServletResponse) res;",
                "-\t\t",
                "-\t\tString uri  = request.getRequestURI();",
                "+        String uri = WebUtils.getRequestUri(request);",
                "diff --git a/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java b/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "index 5f1d8dd..682f3e9 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "@@ -3,2 +3,3 @@ package org.marker.mushroom.filter;",
                " import org.marker.mushroom.core.config.impl.SystemConfig;",
                "+import org.marker.mushroom.utils.WebUtils;",
                " import org.slf4j.Logger;",
                "@@ -19,3 +20,2 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.net.URLDecoder;",
                "@@ -46,4 +46,3 @@ public class ThemesResourceFilter implements Filter {",
                "-",
                "-        String uri = URLDecoder.decode(request.getRequestURI(),\"utf-8\");",
                "+        String uri = WebUtils.getRequestUri(request);",
                "diff --git a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "index 3691955..556cd73 100644",
                "--- a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "+++ b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "@@ -133,5 +133,5 @@ public class MyCMSTemplate {",
                " \t\tTemplateFileLoad tplloader = null;",
                "-\t\ttry{",
                "+\t\ttry {",
                " \t\t\ttplloader = new TemplateFileLoad(tplFile);",
                "-\t\t}catch (FileNotFoundException e){",
                "+\t\t} catch (FileNotFoundException e){",
                " \t\t\tthrow new FileNotFoundException(tplFileName);",
                "diff --git a/src/main/java/org/marker/mushroom/utils/WebUtils.java b/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "index 2b3a872..c8ccddf 100644",
                "--- a/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "+++ b/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "@@ -3,2 +3,7 @@ package org.marker.mushroom.utils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                " import java.io.IOException;",
                "@@ -6,2 +11,4 @@ import java.io.OutputStream;",
                " import java.io.PrintWriter;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.URLDecoder;",
                " import java.util.Map;",
                "@@ -9,5 +16,2 @@ import java.util.StringTokenizer;",
                " import java.util.zip.GZIPOutputStream;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "@@ -22,2 +26,4 @@ public class WebUtils {",
                "+    private static Logger logger = LoggerFactory.getLogger(WebUtils.class);",
                "+",
                " \tpublic static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;",
                "@@ -162,2 +168,17 @@ public class WebUtils {",
                " \t}",
                "+",
                "+\t/**",
                "+\t * \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u0090\u008e\u00e7\u009a\u0084\u00e8\u00af\u00b7\u00e6\u00b1\u0082uri",
                "+\t * @param request",
                "+\t * @return",
                "+\t */",
                "+\tpublic static String getRequestUri(HttpServletRequest request) {",
                "+        String uri = null;",
                "+        try {",
                "+            uri = URLDecoder.decode(request.getRequestURI(),\"utf-8\");",
                "+        } catch (UnsupportedEncodingException e) {",
                "+            logger.error(\"\", e);",
                "+        }",
                "+        return uri.replaceFirst(request.getContextPath(), \"\");",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/core/WebAPP.java",
                "src/main/java/org/marker/mushroom/core/WebParam.java",
                "src/main/java/org/marker/mushroom/ext/model/ContentModelContext.java",
                "src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "src/main/java/org/marker/mushroom/utils/WebUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f971af1f6d59d91914e92e5aa1b3e1becde4009e"
                ],
                [
                    "no-tag",
                    "60374859b0afe373679fdd27195a34bb408eb7c3"
                ],
                [
                    "no-tag",
                    "c12c1966b377b16d3640506a6d3b78cef545972e"
                ],
                [
                    "no-tag",
                    "7f23cefd8266b3e83a5a5948fd7c3a9e0e288cee"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: WebParam",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/marker/mushroom/core/WebParam.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8b67e2d88ca8040577248491a5e6e9c806184522",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1537541624,
            "hunks": 12,
            "message": "\u00e4\u00bf\u00ae\u00e5\u00a4\u008dsql\u00e6\u00b3\u00a8\u00e5\u0085\u00a5bug",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/core/WebParam.java b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "index 7310c37..d738081 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebParam.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "@@ -2,4 +2,2 @@ package org.marker.mushroom.core;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -8,3 +6,4 @@ import org.marker.mushroom.context.ActionContext;",
                " import org.marker.mushroom.core.config.impl.SystemConfig;",
                "-import org.marker.mushroom.holder.SpringContextHolder;",
                "+",
                "+import javax.servlet.http.HttpServletRequest;",
                "@@ -41,3 +40,3 @@ public final class WebParam {",
                " \t/** \u00e5\u0086\u0085\u00e5\u00ae\u00b9ID */",
                "-\tpublic String contentId = \"0\";",
                "+\tpublic Integer contentId = 0;",
                "@@ -90,3 +89,5 @@ public final class WebParam {",
                " \t\t}",
                "-\t\tthis.contentId = req.getParameter(FIELD_ID);// \u00e5\u0086\u0085\u00e5\u00ae\u00b9ID",
                "+",
                "+        String contentId = req.getParameter(FIELD_ID);",
                "+\t\tthis.contentId = contentId == null?0: Integer.valueOf(contentId);// \u00e5\u0086\u0085\u00e5\u00ae\u00b9ID",
                "diff --git a/src/main/java/org/marker/mushroom/ext/tag/impl/SqlPageTagImpl.java b/src/main/java/org/marker/mushroom/ext/tag/impl/SqlPageTagImpl.java",
                "index c649134..b923d86 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/tag/impl/SqlPageTagImpl.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/tag/impl/SqlPageTagImpl.java",
                "@@ -84,4 +84,3 @@ public class SqlPageTagImpl extends Taglib {",
                "-            String contentId = WebParam.get().contentId;",
                "-",
                "+            Integer contentId = WebParam.get().contentId;",
                "@@ -90,3 +89,3 @@ public class SqlPageTagImpl extends Taglib {",
                "-                datasource.setSql(sql +\" and b.tid = \"+contentId);",
                "+                datasource.setSql(sql + \" and b.tid = \" + contentId);",
                "@@ -96,4 +95,2 @@ public class SqlPageTagImpl extends Taglib {",
                "-",
                "-",
                "diff --git a/src/main/java/org/marker/mushroom/service/impl/ChannelService.java b/src/main/java/org/marker/mushroom/service/impl/ChannelService.java",
                "index b05c7e7..2f79615 100644",
                "--- a/src/main/java/org/marker/mushroom/service/impl/ChannelService.java",
                "+++ b/src/main/java/org/marker/mushroom/service/impl/ChannelService.java",
                "@@ -2,6 +2,4 @@ package org.marker.mushroom.service.impl;",
                "-import com.alibaba.fastjson.JSONObject;",
                " import org.marker.mushroom.alias.Core;",
                " import org.marker.mushroom.alias.Services;",
                "-import org.marker.mushroom.beans.Category;",
                " import org.marker.mushroom.beans.Channel;",
                "@@ -17,3 +15,2 @@ import org.springframework.stereotype.Service;",
                "-import java.util.Iterator;",
                " import java.util.List;",
                "@@ -66,6 +63,13 @@ public class ChannelService extends BaseService {",
                "-    public Channel getChannel(String tableName, String contentId) {",
                "+",
                "+\t/**",
                "+\t * \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e6\u00a0\u008f\u00e7\u009b\u00ae",
                "+\t * @param tableName \u00e8\u00a1\u00a8\u00e5\u0090\u008d\u00e7\u00a7\u00b0",
                "+\t * @param contentId \u00e5\u0086\u0085\u00e5\u00ae\u00b9Id",
                "+\t * @return",
                "+\t */",
                "+\tpublic Channel getChannel(String tableName, Integer contentId) {",
                "         String prefix = channelDao.getPreFix();",
                "         JdbcTemplate jdbcTemplate = SpringContextHolder.getBean(\"jdbcTemplate\");",
                "-        String sql = \"select a.* from \"+prefix+\"channel a join \" + tableName+\" b on b.cid = a.id WHERE b.id = \"+ contentId+\" limit 1\";",
                "+        String sql = \"select a.* from \"+prefix+\"channel a join \" + tableName + \" b on b.cid = a.id WHERE b.id = \"+ contentId+\" limit 1\";",
                "         return jdbcTemplate.queryForObject(sql, new ObjectRowMapper.RowMapperChannel());"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/core/WebParam.java",
                "src/main/java/org/marker/mushroom/ext/tag/impl/SqlPageTagImpl.java",
                "src/main/java/org/marker/mushroom/service/impl/ChannelService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: getChannel, WebParam, ChannelService",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/marker/mushroom/service/impl/ChannelService.java, src/main/java/org/marker/mushroom/core/WebParam.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e9138a4b04c59d3640c1afe2edd32c4894f06cba",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1543144845,
            "hunks": 61,
            "message": "\u00e5\u009b\u00bd\u00e9\u0099\u0085\u00e5\u008c\u0096\u00e8\u00af\u00ad\u00e8\u00a8\u0080\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0094\u00b9\u00e7\u0089\u0088",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/alias/Core.java b/src/main/java/org/marker/mushroom/alias/Core.java",
                "index 3109ab3..fd66132 100644",
                "--- a/src/main/java/org/marker/mushroom/alias/Core.java",
                "+++ b/src/main/java/org/marker/mushroom/alias/Core.java",
                "@@ -21,3 +21,10 @@ public interface Core {",
                " \tint ADMINI_GROUP_ID = 1;",
                "-\t",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e7\u0089\u0088\u00e6\u009d\u0083\u00e6\u00b3\u00a8\u00e5\u0085\u00a5",
                "+\t */",
                "+\tString COPYRIGHT = \"<div style=\\\"text-align:center;\\\">Powered by <a name=baidusnap0></a><a href=\\\"http://cms.yl-blog.com\\\"><B style='color:black;background-color:#ffff66'>MRCMS</B></a> &copy; 2013-2017 <a href=\\\"http://cms.yl-blog.com\\\"><B style='color:black;background-color:#ffff66'>MRCMS</B></a> Inc.</div>\\n\";",
                "+",
                "+",
                " }",
                "diff --git a/src/main/java/org/marker/mushroom/controller/SystemController.java b/src/main/java/org/marker/mushroom/controller/SystemController.java",
                "index 74611aa..62f299d 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/SystemController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/SystemController.java",
                "@@ -4,11 +4,2 @@ import groovy.lang.Binding;",
                " import groovy.lang.GroovyShell;",
                "-",
                "-import java.io.File;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                " import org.marker.mushroom.alias.CacheO;",
                "@@ -29,5 +20,6 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.cache.ehcache.EhCacheCacheManager;",
                " import org.springframework.stereotype.Controller;",
                "+import org.springframework.web.bind.annotation.GetMapping;",
                "+import org.springframework.web.bind.annotation.PostMapping;",
                " import org.springframework.web.bind.annotation.RequestMapping;",
                "@@ -36,2 +28,9 @@ import org.springframework.web.servlet.ModelAndView;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import java.io.File;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "@@ -65,6 +64,8 @@ public class SystemController extends SupportController {",
                " \t}",
                "-\t ",
                "-\t",
                "-\t// \u00e7\u00bd\u0091\u00e7\u00ab\u0099\u00e5\u009f\u00ba\u00e6\u009c\u00ac\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "-\t@RequestMapping(\"/siteinfo\")",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e7\u00bd\u0091\u00e7\u00ab\u0099\u00e5\u009f\u00ba\u00e6\u009c\u00ac\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "+ \t */",
                "+\t@GetMapping(\"/siteinfo\")",
                " \tpublic String siteinfo(HttpServletRequest request){",
                "@@ -76,7 +77,9 @@ public class SystemController extends SupportController {",
                " \t}",
                "-\t",
                "-\t",
                "-\t//\u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e7\u00bd\u0091\u00e7\u00ab\u0099\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e7\u00bd\u0091\u00e7\u00ab\u0099\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "+\t */",
                " \t@ResponseBody",
                "-\t@RequestMapping(\"/saveinfo\")",
                "+\t@PostMapping(\"/saveinfo\")",
                " \tpublic Object saveinfo(HttpServletRequest request){",
                "@@ -148,2 +151,3 @@ public class SystemController extends SupportController {",
                " \t\t\tsyscfg.set(SystemConfig.SYSTEM_LOGIN_SAFE, request.getParameter(\"config.loginSafe\"));// \u00e7\u0099\u00bb\u00e5\u00bd\u0095\u00e5\u00ae\u0089\u00e5\u0085\u00a8\u00e7\u00a0\u0081",
                "+\t\t\tsyscfg.set(SystemConfig.SYSTEM_TONGJI_SCRIPT, request.getParameter(\"config.tongjiScirpt\"));// \u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e8\u0084\u009a\u00e6\u009c\u00ac",
                "diff --git a/src/main/java/org/marker/mushroom/core/WebAPP.java b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "index 439d24e..a1bdbf9 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "@@ -18,2 +18,3 @@ import org.marker.mushroom.template.MyCMSTemplate;",
                " import org.marker.mushroom.template.SendDataToView;",
                "+import org.marker.mushroom.utils.WebUtils;",
                " import org.slf4j.Logger;",
                "@@ -122,10 +123,5 @@ public final class WebAPP {",
                " \t\t */",
                "-\t\tif ( !install ) { ",
                "-\t\t\ttry {",
                "-\t\t\t\tlogger.warn(\"mrcms not install\");",
                "-\t\t\t\tresponse.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "-\t\t\t\treturn; // \u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u00ae\u008c\u00e6\u00af\u0095\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e3\u0080\u0082",
                "-\t\t\t} catch (IOException e) {",
                "-\t\t\t\tlogger.error(\"\",e);",
                "-\t\t\t}",
                "+\t\tif ( !install ) {",
                "+\t\t\tWebUtils.jumpInstall(response);",
                "+\t\t\treturn;",
                " \t\t}",
                "diff --git a/src/main/java/org/marker/mushroom/core/WebParam.java b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "index cdbdc6c..f36eec6 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebParam.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebParam.java",
                "@@ -18,7 +18,8 @@ public final class WebParam {",
                " \tpublic static final String ATTR_WEB_PARAM    = \".mrcms.Webparam\";",
                "-\t",
                "-\tpublic static final String FIELD_P    = \"p\";",
                "-\tpublic static final String FIELD_T    = \"type\";",
                "-\tpublic static final String FIELD_ID   = \"id\";",
                "-\tpublic static final String FIELD_PAGE = \"page\";",
                "+",
                "+\tpublic static final String FIELD_P    = \"p\"; // \u00e6\u00a0\u008f\u00e7\u009b\u00ae",
                "+\tpublic static final String FIELD_T    = \"type\";// \u00e7\u00b1\u00bb\u00e5\u009e\u008b",
                "+\tpublic static final String FIELD_ID   = \"id\"; // ID",
                "+\tpublic static final String FIELD_PAGE = \"page\";// \u00e9\u00a1\u00b5\u00e7\u00a0\u0081",
                "+\tpublic static final String FIELD_LANG = \"lang\";// \u00e8\u00af\u00ad\u00e8\u00a8\u0080",
                "@@ -30,2 +31,7 @@ public final class WebParam {",
                "+\t/**",
                "+\t * \u00e8\u00af\u00ad\u00e8\u00a8\u0080",
                "+\t */",
                "+\tpublic String language;",
                "+",
                "     /** \u00e5\u00bd\u0093\u00e5\u0089\u008d\u00e8\u00af\u00b7\u00e6\u00b1\u0082\u00e7\u009a\u0084\u00e9\u009d\u0099\u00e6\u0080\u0081URL\u00e5\u0090\u008d\u00e7\u00a7\u00b0  */",
                "@@ -60,2 +66,3 @@ public final class WebParam {",
                " \tpublic String extendSql;",
                "+",
                " \t/** \u00e8\u00a1\u00a8\u00e5\u0089\u008d\u00e7\u00bc\u0080 */",
                "@@ -79,6 +86,10 @@ public final class WebParam {",
                " \tprivate WebParam(HttpServletRequest req){",
                "-",
                " \t\tSystemConfig config = SystemConfig.getInstance();",
                "-\t\tthis.pageName   = req.getParameter(FIELD_P);// \u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00e5\u0090\u008d\u00e7\u00a7\u00b0",
                "-\t\tthis.modelType = req.getParameter(FIELD_T);// \u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00e7\u00b1\u00bb\u00e5\u009e\u008b",
                "+",
                "+\t\tthis.pageName    = req.getParameter(FIELD_P);// \u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00e5\u0090\u008d\u00e7\u00a7\u00b0",
                "+\t\tthis.modelType   = req.getParameter(FIELD_T);// \u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00e7\u00b1\u00bb\u00e5\u009e\u008b",
                "+\t\tthis.language    = req.getParameter(FIELD_LANG);// \u00e8\u00af\u00ad\u00e8\u00a8\u0080",
                "+        this.page        = req.getParameter(FIELD_PAGE);// \u00e9\u00a1\u00b5\u00e7\u00a0\u0081",
                "+        String contentId = req.getParameter(FIELD_ID);",
                "+",
                " \t\tif(this.modelType == null){",
                "@@ -90,9 +101,7 @@ public final class WebParam {",
                "-        String contentId = req.getParameter(FIELD_ID);",
                " \t\tthis.contentId = contentId == null?0: Integer.valueOf(contentId);// \u00e5\u0086\u0085\u00e5\u00ae\u00b9ID",
                "-\t\tthis.page      = req.getParameter(FIELD_PAGE);// \u00e9\u00a1\u00b5\u00e7\u00a0\u0081",
                " \t\ttry{",
                " \t\t\tthis.currentPageNo = Integer.parseInt(this.page);",
                "-\t\t}catch(Exception e){}",
                "+\t\t} catch (Exception e) {}",
                " \t\t// \u00e5\u008a\u00a8\u00e4\u00bd\u009c",
                "@@ -103,4 +112,7 @@ public final class WebParam {",
                " \t\tthis.keywords = req.getParameter(\"keywords\");",
                "-\t\t",
                "-\t\t",
                "+",
                "+\t\tif(StringUtils.isBlank(this.language)){",
                "+            this.language = (String) req.getAttribute(AppStatic.WEB_APP_LANG);",
                "+        }",
                "+",
                " \t\t// \u00e5\u0088\u009d\u00e5\u00a7\u008b\u00e5\u008c\u0096\u00e6\u00a8\u00a1\u00e7\u0089\u0088\u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00ef\u00bc\u0088\u00e6\u008c\u0087\u00e5\u0090\u0091\u00e9\u0094\u0099\u00e8\u00af\u00af\u00e9\u00a1\u00b5\u00e9\u009d\u00a2\u00ef\u00bc\u0089",
                "@@ -118,7 +130,8 @@ public final class WebParam {",
                " \t\tStringBuilder sb = new StringBuilder(\"R:\\n\");",
                "-\t\tsb.append(\"pageName=\"+pageName+\"\\n\");",
                "-\t\tsb.append(\"modelType=\"+modelType+\"\\n\");",
                "-\t\tsb.append(\"contentId=\"+contentId+\"\\n\");",
                "-\t\tsb.append(\"page=\"+page+\"\\n\");",
                "-\t\t",
                "+\t\tsb.append(\"pageName=\" + pageName + \"\\n\");",
                "+\t\tsb.append(\"modelType=\" + modelType + \"\\n\");",
                "+\t\tsb.append(\"contentId=\" + contentId + \"\\n\");",
                "+\t\tsb.append(\"page=\" + page + \"\\n\");",
                "+\t\tsb.append(\"lang=\" + language + \"\\n\");",
                "+",
                " \t\treturn sb.toString();",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "index 76d23aa..bce158d 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "@@ -56,3 +56,6 @@ public final class SystemConfig extends ConfigEngine {",
                " \tpublic static final String SYSTEM_LOGIN_SAFE = \"system.login.safe\";",
                "-\t",
                "+",
                "+    /** \u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e8\u0084\u009a\u00e6\u009c\u00ac */",
                "+\tpublic static final String SYSTEM_TONGJI_SCRIPT = \"system.tongjiScirpt\";",
                "+",
                "@@ -60,2 +63,4 @@ public final class SystemConfig extends ConfigEngine {",
                " \tprivate static SystemConfig systemConfig;",
                "+",
                "+",
                " \tprivate String dangjian;",
                "@@ -89,2 +94,10 @@ public final class SystemConfig extends ConfigEngine {",
                "+    /**",
                "+     * \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e8\u0084\u009a\u00e6\u009c\u00ac",
                "+     * @return",
                "+     */",
                "+    public String getTongjiScript() {",
                "+        return this.properties.getProperty(SYSTEM_TONGJI_SCRIPT, \"\");",
                "+    }",
                "+",
                "diff --git a/src/main/java/org/marker/mushroom/core/proxy/SingletonProxyFrontURLRewrite.java b/src/main/java/org/marker/mushroom/core/proxy/SingletonProxyFrontURLRewrite.java",
                "index 746819a..f38a0d6 100644",
                "--- a/src/main/java/org/marker/mushroom/core/proxy/SingletonProxyFrontURLRewrite.java",
                "+++ b/src/main/java/org/marker/mushroom/core/proxy/SingletonProxyFrontURLRewrite.java",
                "@@ -27,2 +27,3 @@ public class SingletonProxyFrontURLRewrite {",
                " \t\tinstance.put(new Parameter(\"page\",\"{page}\",\"([0-9]+)\"));",
                "+\t\tinstance.put(new Parameter(\"lang\",\"{lang}\",\"([a-zA-Z_-]+)\"));",
                " \t}",
                "diff --git a/src/main/java/org/marker/mushroom/ext/message/MessageDBContext.java b/src/main/java/org/marker/mushroom/ext/message/MessageDBContext.java",
                "index f0497ad..ba99b89 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/message/MessageDBContext.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/message/MessageDBContext.java",
                "@@ -2,2 +2,3 @@ package org.marker.mushroom.ext.message;",
                "+import org.apache.commons.lang.StringUtils;",
                " import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "@@ -7,4 +8,2 @@ import org.marker.mushroom.holder.WebRealPathHolder;",
                " import org.marker.mushroom.utils.FileTools;",
                "-import org.springframework.cglib.core.Local;",
                "-import org.springframework.data.redis.connection.convert.StringToRedisClientInfoConverter;",
                " import org.springframework.jdbc.core.JdbcTemplate;",
                "@@ -12,3 +11,2 @@ import org.springframework.jdbc.core.JdbcTemplate;",
                " import java.io.File;",
                "-import java.io.FileInputStream;",
                " import java.io.IOException;",
                "@@ -171,2 +169,5 @@ public class MessageDBContext {",
                " \tpublic Properties get(String lang){",
                "+\t\tif(StringUtils.isBlank(lang)){ // \u00e5\u00a6\u0082\u00e6\u009e\u009c\u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e8\u00af\u00ad\u00e8\u00a8\u0080\u00e5\u008c\u0085\u00ef\u00bc\u008c\u00e8\u00be\u0093\u00e5\u0087\u00ba\u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e8\u00af\u00ad\u00e8\u00a8\u0080\u00e5\u008c\u0085",
                "+\t\t\treturn defaultData;",
                "+\t\t}",
                " \t\tif(messageData.containsKey(lang)){",
                "diff --git a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "index 1437b0e..b53d925 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "@@ -89,2 +89,4 @@ public class SystemCoreFilter implements Filter {",
                "+",
                "+",
                "         String uri = WebUtils.getRequestUri(request);",
                "@@ -125,9 +127,4 @@ public class SystemCoreFilter implements Filter {",
                "         if ( !WebAPP.install ) {",
                "-            try {",
                "-                logger.warn(\"mrcms not install\");",
                "-                response.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "-                return; // \u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u00ae\u008c\u00e6\u00af\u0095\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e3\u0080\u0082",
                "-            } catch (IOException e) {",
                "-                logger.error(\"\",e);",
                "-            }",
                "+\t\t\tWebUtils.jumpInstall(response);",
                "+            return;",
                "         }",
                "@@ -183,5 +180,3 @@ public class SystemCoreFilter implements Filter {",
                " \t\t}",
                "-\t\t",
                "-\t",
                "-\t\t",
                "+",
                " \t\t/* ",
                "@@ -191,6 +186,7 @@ public class SystemCoreFilter implements Filter {",
                " \t\t */",
                "-\t\tString url = rewrite.decoder(uri); ",
                "+        String url = rewrite.decoder(uri);",
                "+",
                " \t\tlogger.info(\"URL: {} => {}\", uri, url);",
                " \t\tif(\"/\".equals(url)){ // \u00e4\u00bf\u00ae\u00e5\u00a4\u008djetty \u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e9\u00a6\u0096\u00e9\u00a1\u00b5\u00e9\u0097\u00ae\u00e9\u00a2\u0098",
                "-\t\t\turl = \"cms\";",
                "+\t\t\turl = \"/cms?lang=\" + syscfg.getDefaultLanguage() ;",
                " \t\t}",
                "diff --git a/src/main/java/org/marker/mushroom/freemarker/BootStrap3NavDirective.java b/src/main/java/org/marker/mushroom/freemarker/BootStrap3NavDirective.java",
                "index ef0fa67..db55634 100644",
                "--- a/src/main/java/org/marker/mushroom/freemarker/BootStrap3NavDirective.java",
                "+++ b/src/main/java/org/marker/mushroom/freemarker/BootStrap3NavDirective.java",
                "@@ -2,8 +2,7 @@ package org.marker.mushroom.freemarker;",
                "-import java.io.IOException;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import freemarker.template.utility.StringUtil;",
                "+import freemarker.core.Environment;",
                "+import freemarker.template.TemplateDirectiveBody;",
                "+import freemarker.template.TemplateDirectiveModel;",
                "+import freemarker.template.TemplateException;",
                "+import freemarker.template.TemplateModel;",
                " import org.marker.develop.freemarker.MessageWrapperModel;",
                "@@ -13,4 +12,6 @@ import org.marker.mushroom.context.ActionContext;",
                " import org.marker.mushroom.core.AppStatic;",
                "+import org.marker.mushroom.core.WebParam;",
                " import org.marker.mushroom.core.channel.ChannelItem;",
                " import org.marker.mushroom.core.channel.TreeUtils;",
                "+import org.marker.mushroom.core.proxy.SingletonProxyFrontURLRewrite;",
                " import org.marker.mushroom.dao.IChannelDao;",
                "@@ -18,10 +19,10 @@ import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.marker.mushroom.template.SendDataToView;",
                "-",
                "-import freemarker.core.Environment;",
                "-import freemarker.template.TemplateDirectiveBody;",
                "-import freemarker.template.TemplateDirectiveModel;",
                "-import freemarker.template.TemplateException;",
                "-import freemarker.template.TemplateModel;",
                "+import org.marker.urlrewrite.URLRewriteEngine;",
                " import org.springframework.util.StringUtils;",
                "+import java.io.IOException;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "@@ -54,5 +55,11 @@ public class BootStrap3NavDirective implements TemplateDirectiveModel{",
                " \t\tList<Channel> list = channelDao.findValid();",
                "-\t\t",
                "+",
                "+\t\t// \u00e6\u00a0\u0091\u00e5\u00bd\u00a2\u00e7\u00bb\u0093\u00e6\u009e\u0084\u00e8\u00bd\u00ac\u00e6\u008d\u00a2",
                " \t\tChannelItem root = TreeUtils.foreach(new Channel(), list);",
                "-\t\t",
                "+",
                "+",
                "+\t\t// \u00e8\u008e\u00b7\u00e5\u008f\u0096URL\u00e9\u0087\u008d\u00e5\u0086\u0099\u00e5\u00ae\u009e\u00e4\u00be\u008b",
                "+\t\tURLRewriteEngine urlrewrite = SingletonProxyFrontURLRewrite.getInstance();",
                "+",
                "+",
                "@@ -77,5 +84,6 @@ public class BootStrap3NavDirective implements TemplateDirectiveModel{",
                " \t\t\t\t}",
                "+",
                "+\t\t\t\tString url = urlrewrite.encoder(\"/cms?p=\" + c.getUrl()+\"&lang=\" + WebParam.get().language);",
                "-\t\t\t\t",
                "-\t\t\t\tstr.append(\"href=\\\"\").append(web+\"/\"+c.getUrl()+\".html\").append(\"\\\">\");",
                "+\t\t\t\tstr.append(\"href=\\\"\").append(url).append(\"\\\">\");",
                "                 if(!StringUtils.isEmpty(c.getLangkey())){",
                "@@ -92,4 +100,8 @@ public class BootStrap3NavDirective implements TemplateDirectiveModel{",
                " \t\t\t\t\t\tChannelItem citem = cit.next();",
                "-\t\t\t\t\t\tChannel cc = citem.getChannel(); ",
                "-\t\t\t\t\t\tstr.append(\"      <li><a href=\\\"\").append(web+\"/\"+cc.getUrl()+\".html\").append(\"\\\">\");",
                "+\t\t\t\t\t\tChannel cc = citem.getChannel();",
                "+",
                "+",
                "+\t\t\t\t\t\tString url2 = urlrewrite.encoder(\"/cms?p=\" + cc.getUrl()+\"&lang=\" + WebParam.get().language);",
                "+",
                "+\t\t\t\t\t\tstr.append(\"      <li><a href=\\\"\").append(url2).append(\"\\\">\");",
                "diff --git a/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java b/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "index 09260b3..c62c6c9 100644",
                "--- a/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "+++ b/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "@@ -40,9 +40,10 @@ public class DispatcherServlet extends HttpServlet {",
                " \tpublic void progress(HttpServletRequest request,",
                "-\t\t\tHttpServletResponse response) throws IOException { ",
                "-\t\t",
                "+\t\t\tHttpServletResponse response) throws IOException {",
                "+",
                "+",
                "+",
                " \t\t// \u00e7\u00ba\u00bf\u00e7\u00a8\u008b\u00e7\u00bb\u0091\u00e5\u00ae\u009a\u00e8\u00af\u00b7\u00e6\u00b1\u0082\u00e5\u00af\u00b9\u00e8\u00b1\u00a1\u00e5\u0092\u008c\u00e5\u0093\u008d\u00e5\u00ba\u0094\u00e5\u00af\u00b9\u00e8\u00b1\u00a1",
                " \t\tActionContext.currentThreadBindRequestAndResponse(request, response);",
                "- ",
                "-\t\t",
                "-\t",
                "+",
                "+",
                " \t\t// \u00e5\u0088\u009b\u00e5\u00bb\u00ba\u00e5\u00ba\u0094\u00e7\u0094\u00a8\u00e5\u00ae\u009e\u00e4\u00be\u008b(\u00e5\u00a4\u009a\u00e7\u00ba\u00bf\u00e7\u00a8\u008b\u00e6\u00a8\u00a1\u00e5\u00bc\u008f)",
                "diff --git a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "index fffb1ae..f6b882a 100644",
                "--- a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "+++ b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "@@ -162,2 +162,3 @@ public class MyCMSTemplate {",
                " \t\tString sbc = replaceTaglib(templateContent.toString());// \u00e5\u0085\u00a8\u00e9\u0083\u00a8\u00e6\u00a0\u0087\u00e7\u00ad\u00be\u00e8\u00a7\u00a3\u00e6\u009e\u0090",
                "+        StringBuilder templateStringBuilder = new StringBuilder(sbc);",
                "@@ -167,3 +168,3 @@ public class MyCMSTemplate {",
                "             String themesCache = syscfg.getThemesCache();",
                "-            File file = new File(WebRealPathHolder.REAL_PATH + themesCache + File.separator+tplFileName);",
                "+            File file = new File(WebRealPathHolder.REAL_PATH + themesCache + File.separator + tplFileName);",
                "             if(!file.exists()){",
                "@@ -174,16 +175,19 @@ public class MyCMSTemplate {",
                "-\t\tif(syscfg.isStatistics()){",
                "+\t\tif(syscfg.isStatistics()){// \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00bc\u0080\u00e5\u0090\u00af\u00e7\u00ab\u0099\u00e5\u0086\u0085\u00e7\u00bb\u009f\u00e8\u00ae\u00a1",
                " \t\t\tHttpServletRequest request = ActionContext.getReq();",
                " \t\t\tString appurl = (String) request.getAttribute(AppStatic.WEB_APP_URL);",
                "-\t\t\tsbc += \"<script type=\\\"text/javascript\\\" src=\\\"\"+appurl+\"/public/fetch/main.js\\\"></script>\";",
                "+            templateStringBuilder.append(\"<script type=\\\"text/javascript\\\" src=\\\"\")",
                "+                    .append(appurl)",
                "+                    .append(\"/public/fetch/main.js\\\"></script>\");",
                " \t\t}",
                "-",
                "         if(syscfg.isCompress()){ // \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00bc\u0080\u00e5\u0090\u00af\u00e5\u008e\u008b\u00e7\u00bc\u00a9",
                "-            sbc = \"<@compress single_line=true>\"+sbc+\"</@compress>\";",
                "+            templateStringBuilder.insert(0, \"<@compress single_line=true>\")",
                "+                    .append(\"</@compress>\");",
                "         }",
                "+        /** \u00e4\u00b8\u0089\u00e6\u0096\u00b9\u00e7\u00bb\u009f\u00e8\u00ae\u00a1 */",
                "+        templateStringBuilder.append(syscfg.getTongjiScript());",
                "+",
                "-        /** \u00e7\u0089\u0088\u00e6\u009d\u0083\u00e6\u00b3\u00a8\u00e5\u0085\u00a5 */",
                "-        String copyright = \"<div style=\\\"text-align:center;\\\">Powered by <a name=baidusnap0></a><a href=\\\"http://cms.yl-blog.com\\\"><B style='color:black;background-color:#ffff66'>MRCMS</B></a> &copy; 2013-2017 <a href=\\\"http://cms.yl-blog.com\\\"><B style='color:black;background-color:#ffff66'>MRCMS</B></a> Inc.</div>\\n\";",
                "@@ -192,9 +196,8 @@ public class MyCMSTemplate {",
                "         String userAgent = request.getHeader(\"User-Agent\");",
                "+        // \u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e4\u00b8\u00ba\u00e7\u0099\u00be\u00e5\u00ba\u00a6\u00e8\u009c\u0098\u00e8\u009b\u009b",
                "         if(!StringUtils.isEmpty(userAgent) && userAgent.indexOf(\"Baiduspider\") != -1){",
                "-            sbc += copyright;",
                "+            templateStringBuilder.append(Core.COPYRIGHT);",
                "         }",
                "-",
                " \t\ttplloader.setSqls(temp);// \u00e8\u00ae\u00be\u00e7\u00bd\u00aeSQL\u00e9\u009b\u0086\u00e5\u0090\u0088",
                "-",
                "@@ -203,3 +206,3 @@ public class MyCMSTemplate {",
                "-\t\tloader.putTemplate(tplFileName, sbc);",
                "+\t\tloader.putTemplate(tplFileName, templateStringBuilder.toString());",
                " \t\ttplCache.put(tplFileName, tplloader);",
                "diff --git a/src/main/java/org/marker/mushroom/template/SendDataToView.java b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "index da909af..f113395 100644",
                "--- a/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "+++ b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "@@ -229,6 +229,4 @@ public class SendDataToView {",
                "         root.putUnlistedModel(KEY_APPLICATION, servletContextModel);",
                "-\t\t",
                "-\t\t",
                "-        // \u00e5\u009b\u00bd\u00e9\u0099\u0085\u00e5\u008c\u0096\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u008c\u0085\u00e8\u00a3\u0085\u00e6\u00a8\u00a1\u00e5\u009e\u008b",
                "-\t\tString lang = HttpUtils.getLanguage(request);",
                "+",
                "+        String lang = WebParam.get().language;",
                "diff --git a/src/main/java/org/marker/mushroom/utils/WebUtils.java b/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "index c8ccddf..a91d5ab 100644",
                "--- a/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "+++ b/src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "@@ -21,3 +21,3 @@ import java.util.zip.GZIPOutputStream;",
                "  * ",
                "- * @author jayd",
                "+ * @author marker",
                "  * @since 1.0",
                "@@ -183,2 +183,17 @@ public class WebUtils {",
                " \t}",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e8\u00b7\u00b3\u00e8\u00bd\u00ac\u00e5\u0088\u00b0\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e7\u0095\u008c\u00e9\u009d\u00a2",
                "+\t * @param response",
                "+\t */",
                "+\tpublic static void jumpInstall(HttpServletResponse response) {",
                "+\t\ttry {",
                "+\t\t\tlogger.warn(\"mrcms not install\");",
                "+\t\t\tresponse.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "+\t\t\treturn; // \u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u00ae\u008c\u00e6\u00af\u0095\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e3\u0080\u0082",
                "+\t\t} catch (IOException e) {",
                "+\t\t\tlogger.error(\"\",e);",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/marker/urlrewrite/URLRewriteEngine.java b/src/main/java/org/marker/urlrewrite/URLRewriteEngine.java",
                "index 0a3de6d..616acae 100644",
                "--- a/src/main/java/org/marker/urlrewrite/URLRewriteEngine.java",
                "+++ b/src/main/java/org/marker/urlrewrite/URLRewriteEngine.java",
                "@@ -112,3 +112,2 @@ public final class URLRewriteEngine {",
                "         rule.paramNames = paramNames.toArray(new String[]{});",
                "-//\t\tSystem.out.println(rule.toString());",
                " \t\trules.put(key, rule);"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/alias/Core.java",
                "src/main/java/org/marker/mushroom/controller/SystemController.java",
                "src/main/java/org/marker/mushroom/core/WebAPP.java",
                "src/main/java/org/marker/mushroom/core/WebParam.java",
                "src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "src/main/java/org/marker/mushroom/core/proxy/SingletonProxyFrontURLRewrite.java",
                "src/main/java/org/marker/mushroom/ext/message/MessageDBContext.java",
                "src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "src/main/java/org/marker/mushroom/freemarker/BootStrap3NavDirective.java",
                "src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "src/main/java/org/marker/mushroom/utils/WebUtils.java",
                "src/main/java/org/marker/urlrewrite/URLRewriteEngine.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: getChannel, WebParam, FIELD_T, SQL, MRCMS",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/marker/mushroom/core/WebParam.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "7eabc94d47ec42a903386d4afd7aa8eb196b4396",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1533974043,
            "hunks": 113,
            "message": "Web\u00e7\u0095\u008c\u00e9\u009d\u00a2\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e4\u00bc\u0098\u00e5\u008c\u0096\u00ef\u00bc\u008c\u00e5\u00ae\u009e\u00e7\u008e\u00b0\u00e5\u008a\u00a8\u00e6\u0080\u0081\u00e5\u00ae\u0089\u00e8\u00a3",
            "diff": [
                "diff --git a/src/main/java/org/marker/app/business/TaoluBusiness.java b/src/main/java/org/marker/app/business/TaoluBusiness.java",
                "deleted file mode 100644",
                "index ea46601..0000000",
                "--- a/src/main/java/org/marker/app/business/TaoluBusiness.java",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-package org.marker.app.business;",
                "-",
                "-import org.marker.app.domain.MessageResult;",
                "-",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/11/26.",
                "- */",
                "-public interface TaoluBusiness {",
                "-    Map<String,Object> get(int id);",
                "-",
                "-",
                "-    /**",
                "-     * \u00e6\u008b\u0089\u00e5\u008a\u00a8\u00e6\u0095\u00b0\u00e6\u008d\u00ae",
                "-     * @param endId",
                "-     * @param drection",
                "-     * @param keyword",
                "-     * @return",
                "-     */",
                "-    MessageResult pullData(int endId, int drection, String keyword);",
                "-}",
                "diff --git a/src/main/java/org/marker/app/business/UserBusiness.java b/src/main/java/org/marker/app/business/UserBusiness.java",
                "deleted file mode 100644",
                "index bb06cc4..0000000",
                "--- a/src/main/java/org/marker/app/business/UserBusiness.java",
                "+++ /dev/null",
                "@@ -1,31 +0,0 @@",
                "-package org.marker.app.business;",
                "-",
                "-import org.marker.app.domain.MessageResult;",
                "-import org.marker.mushroom.beans.User;",
                "-",
                "-/**",
                "- *",
                "- *",
                "- *",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-public interface UserBusiness {",
                "-",
                "-",
                "-    /**",
                "-     * \u00e6\u00b3\u00a8\u00e5\u0086\u008c\u00e8\u00b4\u00a6\u00e5\u008f\u00b7",
                "-     * @param username",
                "-     * @param password",
                "-     * @return",
                "-     */",
                "-    MessageResult register(String username, String password);",
                "-",
                "-",
                "-    MessageResult updateField(int userId, String field, String value);",
                "-",
                "-    boolean existUserName(String username);",
                "-",
                "-    User findUser(String username);",
                "-",
                "-    void updateToken(int id, String sessionId);",
                "-}",
                "diff --git a/src/main/java/org/marker/app/business/impl/TaoluBusinessImpl.java b/src/main/java/org/marker/app/business/impl/TaoluBusinessImpl.java",
                "deleted file mode 100644",
                "index 46f1f0d..0000000",
                "--- a/src/main/java/org/marker/app/business/impl/TaoluBusinessImpl.java",
                "+++ /dev/null",
                "@@ -1,34 +0,0 @@",
                "-package org.marker.app.business.impl;",
                "-",
                "-import org.marker.app.business.TaoluBusiness;",
                "-import org.marker.app.domain.MessageResult;",
                "-import org.marker.app.service.TaoluService;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Service;",
                "-",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/11/26.",
                "- */",
                "-@Service",
                "-public class TaoluBusinessImpl implements TaoluBusiness{",
                "-",
                "-",
                "-    @Autowired",
                "-    TaoluService taoluService;",
                "-    @Override",
                "-    public Map<String, Object> get(int id) {",
                "-        return taoluService.get(id);",
                "-    }",
                "-",
                "-    @Override",
                "-    public MessageResult pullData(int endId, int drection, String keyword) {",
                "-",
                "-        List<Map<String, Object>>  data = taoluService.pullData(endId, drection, 4, keyword);",
                "-",
                "-        return new MessageResult(data);",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/business/impl/UserBusinessImpl.java b/src/main/java/org/marker/app/business/impl/UserBusinessImpl.java",
                "deleted file mode 100644",
                "index 3bb6fd4..0000000",
                "--- a/src/main/java/org/marker/app/business/impl/UserBusinessImpl.java",
                "+++ /dev/null",
                "@@ -1,89 +0,0 @@",
                "-package org.marker.app.business.impl;",
                "-",
                "-import org.marker.app.business.UserBusiness;",
                "-import org.marker.app.common.ErrorCode;",
                "-import org.marker.app.domain.MessageResult;",
                "-import org.marker.app.service.UserService;",
                "-import org.marker.mushroom.beans.User;",
                "-import org.marker.mushroom.utils.DataUtils;",
                "-import org.marker.mushroom.utils.GeneratePass;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Service;",
                "-",
                "-import java.util.Date;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- *",
                "- *",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-@Service",
                "-public class UserBusinessImpl implements UserBusiness {",
                "-",
                "-    @Autowired",
                "-    private UserService userService;",
                "-",
                "-",
                "-",
                "-    @Override",
                "-    public MessageResult register(String email, String password) {",
                "-",
                "-        // \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e9\u0082\u00ae\u00e7\u00ae\u00b1\u00e6\u00a0\u00bc\u00e5\u00bc\u008f",
                "-        if(!DataUtils.checkEmail(email)){",
                "-            return MessageResult.wrapErrorCode(ErrorCode.EMAIL_IS_ERROR);",
                "-        }",
                "-",
                "-        // \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8",
                "-        if(userService.existEmail(email)){",
                "-            return MessageResult.wrapErrorCode(ErrorCode.USER_IS_EXISTS);",
                "-        }",
                "-",
                "-        String loginPasswordMd5 = GeneratePass.encode(password);",
                "-",
                "-        User user = new User();",
                "-        user.setEmail(email);",
                "-        user.setName(\"\");",
                "-        user.setNickname(\"\u00e5\u008c\u00bf\u00e5\u0090\u008d\");",
                "-        user.setPass(loginPasswordMd5);",
                "-        user.setCreatetime(new Date());",
                "-        user.setGid(3);// \u00e6\u0099\u00ae\u00e9\u0080\u009a\u00e7\u0094\u00a8\u00e6\u0088\u00b7",
                "-        user.setStatus(0);",
                "-        user.setDescription(\"app \u00e6\u00b3\u00a8\u00e5\u0086\u008c\");",
                "-",
                "-        userService.save(user);",
                "-",
                "-",
                "-",
                "-        return MessageResult.success(user);",
                "-    }",
                "-",
                "-    @Override",
                "-    public MessageResult updateField(int userId, String field, String value) {",
                "-",
                "-        String allowfields=\",\";",
                "-",
                "-",
                "-",
                "-",
                "-        userService.updateField(userId, field,value);",
                "-",
                "-        return MessageResult.success();",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean existUserName(String username) {",
                "-        return userService.existUserName(username);",
                "-    }",
                "-",
                "-    @Override",
                "-    public User findUser(String username) {",
                "-        return userService.findUser(username);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void updateToken(int userId, String sessionId) {",
                "-        userService.updateUserToken(userId, sessionId);",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/common/ErrorCode.java b/src/main/java/org/marker/app/common/ErrorCode.java",
                "deleted file mode 100644",
                "index 1e8932c..0000000",
                "--- a/src/main/java/org/marker/app/common/ErrorCode.java",
                "+++ /dev/null",
                "@@ -1,52 +0,0 @@",
                "-package org.marker.app.common;",
                "-",
                "-/**",
                "- *",
                "- *",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-public enum  ErrorCode {",
                "-",
                "-",
                "-    USER_NOT_EXISTS(1001, \"\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e4\u00b8\u008d\u00e5\u00ad\u0098\u00e5\u009c\u00a8\u00ef\u00bc\u0081\"),",
                "-    USER_IS_EXISTS(1002, \"\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e5\u00b7\u00b2\u00e7\u00bb\u008f\u00e6\u00b3\u00a8\u00e5\u0086\u008c\u00ef\u00bc\u0081\"),",
                "-",
                "-    USER_PASSWORD_ERROR(1003, \"\u00e8\u00b4\u00a6\u00e5\u008f\u00b7\u00e6\u0088\u0096\u00e8\u0080\u0085\u00e5\u00af\u0086\u00e7\u00a0\u0081\u00e9\u0094\u0099\u00e8\u00af\u00af\u00ef\u00bc\u0081\"),",
                "-    EMAIL_IS_ERROR(1004, \"\u00e9\u0082\u00ae\u00e7\u00ae\u00b1\u00e6\u00a0\u00bc\u00e5\u00bc\u008f\u00e9\u0094\u0099\u00e8\u00af\u00af\u00ef\u00bc\u0081\"),",
                "-",
                "-",
                "-",
                "-",
                "-",
                "-",
                "-    ;",
                "-",
                "-",
                "-    /** \u00e7\u008a\u00b6\u00e6\u0080\u0081\u00e7\u00a0\u0081 */",
                "-    private Integer code;",
                "-    /** \u00e8\u00af\u00b4\u00e6\u0098\u008e\u00e5\u0086\u0085\u00e5\u00ae\u00b9 */",
                "-    private String msg;",
                "-",
                "-",
                "-",
                "-    ErrorCode(Integer code, String msg) {",
                "-        this.code = code;",
                "-        this.msg = msg;",
                "-    }",
                "-",
                "-    public Integer getCode() {",
                "-        return code;",
                "-    }",
                "-",
                "-    public void setCode(Integer code) {",
                "-        this.code = code;",
                "-    }",
                "-",
                "-    public String getMsg() {",
                "-        return msg;",
                "-    }",
                "-",
                "-    public void setMsg(String msg) {",
                "-        this.msg = msg;",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/common/SessionAttr.java b/src/main/java/org/marker/app/common/SessionAttr.java",
                "deleted file mode 100644",
                "index e091fd1..0000000",
                "--- a/src/main/java/org/marker/app/common/SessionAttr.java",
                "+++ /dev/null",
                "@@ -1,14 +0,0 @@",
                "-package org.marker.app.common;",
                "-",
                "-",
                "-/**",
                "- *",
                "- * @author marker",
                "- * Created by Administrator on 2016/12/24.",
                "- */",
                "-public interface SessionAttr {",
                "-",
                "-    String USER_ID = \"userId\";",
                "-",
                "-    String USER_GROUP_ID = \"userGroupId\";",
                "-}",
                "diff --git a/src/main/java/org/marker/app/controller/DataController.java b/src/main/java/org/marker/app/controller/DataController.java",
                "deleted file mode 100644",
                "index 7fbd7dd..0000000",
                "--- a/src/main/java/org/marker/app/controller/DataController.java",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-package org.marker.app.controller;",
                "-",
                "-import org.marker.app.business.TaoluBusiness;",
                "-import org.marker.mushroom.dao.IArticleDao;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                "-import org.marker.mushroom.service.impl.CategoryService;",
                "-import org.marker.mushroom.support.SupportController;",
                "-import org.marker.mushroom.utils.HttpUtils;",
                "-import org.marker.urlrewrite.URLRewriteEngine;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Controller;",
                "-import org.springframework.ui.ModelMap;",
                "-import org.springframework.web.bind.annotation.*;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import java.io.IOException;",
                "-import java.io.UnsupportedEncodingException;",
                "-/**",
                "- *  Faceinner \u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "- * @author marker",
                "- * */",
                "-@Controller",
                "-@RequestMapping(\"/api/taolu\")",
                "-public class DataController extends SupportController {",
                "-",
                "-\t// \u00e6\u0096\u0087\u00e7\u00ab\u00a0Dao",
                "-\t@Autowired IArticleDao articleDao;",
                "-",
                "-\t@Autowired ArticleService articleService;",
                "-",
                "-\t@Autowired CategoryService categoryService;",
                "-",
                "-\t@Autowired",
                "-\tprivate TaoluBusiness taoluBusiness;",
                "-",
                "-",
                "-\tpublic DataController() {",
                "-\t\t\tthis.viewPath = \"/app/taolu/\";",
                "-",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * \u00e6\u0096\u0087\u00e7\u00ab\u00a0\u00e5\u0088\u0097\u00e8\u00a1\u00a8\u00e6\u008e\u00a5\u00e5\u008f\u00a3(REST)",
                "-\t * @return",
                "-\t */",
                "-\t@RequestMapping(value = \"/list\", method = RequestMethod.GET)",
                "-\t@ResponseBody ",
                "-\tpublic Object list(HttpServletRequest request, ModelMap model,",
                "-\t\t\t@RequestParam(\"endId\") int endId,",
                "-\t\t\t@RequestParam(\"drection\") int drection,// 1 \u00e5\u0092\u008c -1",
                "-\t\t\t@RequestParam(\"keyword\") String keyword  ){",
                "-\t\tString keywordVal = \"\";",
                "-\t\ttry {",
                "-\t\t\tkeywordVal = new String(keyword.getBytes(\"ISO-8859-1\"),\"utf-8\");",
                "-\t\t} catch (UnsupportedEncodingException e) { e.printStackTrace(); }",
                "-\t\treturn taoluBusiness.pullData(endId, drection, keywordVal);",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * \u00e6\u0096\u0087\u00e7\u00ab\u00a0\u00e5\u0088\u0097\u00e8\u00a1\u00a8\u00e6\u008e\u00a5\u00e5\u008f\u00a3(REST)",
                "-\t * @return",
                "-\t */",
                "-\t@RequestMapping(value = \"/content\", method = RequestMethod.GET)",
                "-\t@ResponseBody",
                "-\tpublic Object list(HttpServletRequest request, ModelMap model,",
                "-\t\t\t\t\t   @RequestParam(\"id\") int id ){",
                "-\t\treturn taoluBusiness.get(id);",
                "-\t}",
                "-\t",
                "-}",
                "diff --git a/src/main/java/org/marker/app/controller/FeedBackController.java b/src/main/java/org/marker/app/controller/FeedBackController.java",
                "deleted file mode 100644",
                "index f23052c..0000000",
                "--- a/src/main/java/org/marker/app/controller/FeedBackController.java",
                "+++ /dev/null",
                "@@ -1,64 +0,0 @@",
                "-package org.marker.app.controller;",
                "-",
                "-import org.marker.app.business.UserBusiness;",
                "-import org.marker.app.dao.FeedBackDao;",
                "-import org.marker.app.domain.FeedBack;",
                "-import org.marker.app.domain.MessageResult;",
                "-import org.marker.mushroom.support.SupportController;",
                "-import org.marker.mushroom.utils.HttpUtils;",
                "-import org.marker.mushroom.utils.WebUtils;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Controller;",
                "-import org.springframework.web.bind.annotation.RequestMapping;",
                "-import org.springframework.web.bind.annotation.RequestMethod;",
                "-import org.springframework.web.bind.annotation.RequestParam;",
                "-import org.springframework.web.bind.annotation.ResponseBody;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import java.util.Date;",
                "-",
                "-/**",
                "- *  \u00e6\u0084\u008f\u00e8\u00a7\u0081\u00e5\u008f\u008d\u00e9\u00a6\u0088 \u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "- * @author marker",
                "- * */",
                "-@Controller",
                "-@RequestMapping(\"/api/feedback\")",
                "-public class FeedBackController extends SupportController {",
                "-",
                "-",
                "-    @Autowired",
                "-    private FeedBackDao feedBackDao;",
                "-",
                "-",
                "-",
                "-\tpublic FeedBackController() {",
                "-\t\t\tthis.viewPath = \"/app/feedback/\";",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * \u00e5\u008f\u008d\u00e9\u00a6\u0088",
                "-\t */",
                "-\t@RequestMapping(value = \"/commit\", method = RequestMethod.POST)",
                "-\t@ResponseBody ",
                "-\tpublic Object login(HttpServletRequest request,",
                "-\t\t\t@RequestParam(\"content\") String content,",
                "-\t\t\t@RequestParam(\"userId\") Integer userId,",
                "-\t\t\t@RequestParam(\"nickname\") String nickname ){",
                "-\t\tFeedBack feedBack = new FeedBack();",
                "-\t\tfeedBack.setContent(content);",
                "-\t\tfeedBack.setTime(new Date());",
                "-\t\tfeedBack.setUserId(userId);",
                "-\t\tfeedBack.setNickname(nickname);",
                "-        String ip = HttpUtils.getRemoteHost(request);",
                "-        feedBack.setIp(ip);",
                "-\t\tfeedBackDao.save(feedBack);",
                "-",
                "-",
                "-",
                "-        return MessageResult.success();",
                "-\t}",
                "-",
                "-",
                "-\t",
                "-}",
                "diff --git a/src/main/java/org/marker/app/controller/LoginController.java b/src/main/java/org/marker/app/controller/LoginController.java",
                "deleted file mode 100644",
                "index e532ce6..0000000",
                "--- a/src/main/java/org/marker/app/controller/LoginController.java",
                "+++ /dev/null",
                "@@ -1,132 +0,0 @@",
                "-package org.marker.app.controller;",
                "-",
                "-import org.marker.app.business.TaoluBusiness;",
                "-import org.marker.app.business.UserBusiness;",
                "-import org.marker.app.common.ErrorCode;",
                "-import org.marker.app.common.SessionAttr;",
                "-import org.marker.app.domain.MessageResult;",
                "-import org.marker.mushroom.beans.User;",
                "-import org.marker.mushroom.dao.IArticleDao;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                "-import org.marker.mushroom.service.impl.CategoryService;",
                "-import org.marker.mushroom.support.SupportController;",
                "-import org.marker.mushroom.utils.GeneratePass;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Controller;",
                "-import org.springframework.ui.ModelMap;",
                "-import org.springframework.web.bind.annotation.RequestMapping;",
                "-import org.springframework.web.bind.annotation.RequestMethod;",
                "-import org.springframework.web.bind.annotation.RequestParam;",
                "-import org.springframework.web.bind.annotation.ResponseBody;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpSession;",
                "-import java.io.UnsupportedEncodingException;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- *  \u00e7\u0099\u00bb\u00e5\u00bd\u0095 \u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "- * @author marker",
                "- * */",
                "-@Controller",
                "-@RequestMapping(\"/api/user\")",
                "-public class LoginController extends SupportController {",
                "-",
                "-",
                "-    @Autowired",
                "-    private UserBusiness userBusiness;",
                "-",
                "-",
                "-",
                "-\tpublic LoginController() {",
                "-\t\t\tthis.viewPath = \"/app/user/\";",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * Login",
                "-\t */",
                "-\t@RequestMapping(value = \"/login\", method = RequestMethod.POST)",
                "-\t@ResponseBody ",
                "-\tpublic MessageResult login(HttpServletRequest request,",
                "-\t\t\t\t\t\t\t   @RequestParam(\"user\") String username,",
                "-\t\t\t\t\t\t\t   @RequestParam(\"pass\") String password,",
                "-\t\t\t\t\t\t\t   HttpSession session) throws Exception {",
                "-",
                "-\t\tString sessionId = session.getId();",
                "-",
                "-\t\t// \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8(\u00e5\u008c\u0085\u00e5\u0090\u00abemail\u00e5\u0092\u008cusername)",
                "-\t\tif(!userBusiness.existUserName(username)){",
                "-\t\t\treturn MessageResult.wrapErrorCode(ErrorCode.USER_NOT_EXISTS);",
                "-\t\t}",
                "-",
                "-\t\t// \u00e7\u0099\u00bb\u00e5\u00bd\u0095\u00e9\u00aa\u008c\u00e8\u00af\u0081(\u00e6\u00a0\u00b9\u00e6\u008d\u00ae\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e5\u0090\u008d\u00e5\u0092\u008c\u00e5\u00af\u0086\u00e7\u00a0\u0081\u00e6\u009f\u00a5\u00e8\u00af\u00a2)",
                "-\t\tUser user = userBusiness.findUser(username);",
                "-\t\tif(user == null ){",
                "-\t\t\treturn MessageResult.wrapErrorCode(ErrorCode.USER_PASSWORD_ERROR);",
                "-\t\t}",
                "-\t\tString loginPasswordMd5 = GeneratePass.encode(password);",
                "-\t\tif(!loginPasswordMd5.equals(user.getPass())){",
                "-\t\t\treturn MessageResult.wrapErrorCode(ErrorCode.USER_PASSWORD_ERROR);",
                "-\t\t}",
                "-",
                "-      \tuserBusiness.updateToken(user.getId(), sessionId);",
                "-",
                "-",
                "-\t\tsession.setAttribute(SessionAttr.USER_ID, user.getId());",
                "-\t\tsession.setAttribute(SessionAttr.USER_GROUP_ID, user.getGid());// \u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e7\u00bb\u0084",
                "-",
                "-",
                "-",
                "-",
                "-",
                "-\t\tMap<String,Object> result = new HashMap<>(6);",
                "-\t\tresult.put(\"id\",user.getId());",
                "-\t\tif(user.getSex() == 0){",
                "-\t\t\tresult.put(\"sexual\",\"\u00e5\u00a5\u00b3\");",
                "-\t\t}else{",
                "-\t\t\tresult.put(\"sexual\",\"\u00e7\u0094\u00b7\");",
                "-\t\t}",
                "-\t\tresult.put(\"nickname\",user.getNickname());",
                "-\t\tresult.put(\"points\",user.getPoints());",
                "-\t\tresult.put(\"underwrite\",user.getUnderwrite());",
                "-\t\tresult.put(\"token\", sessionId);",
                "-",
                "-\t\treturn MessageResult.success(result);",
                "-",
                "-\t}",
                "-",
                "-    /**",
                "-     * register",
                "-     */",
                "-    @RequestMapping(value = \"/register\", method = RequestMethod.POST)",
                "-    @ResponseBody",
                "-    public Object register(HttpServletRequest request,",
                "-                        @RequestParam(\"user\") String username,",
                "-                        @RequestParam(\"pass\") String password,",
                "-                   \t\tString code  ){",
                "-",
                "-        // \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u00a0\u0081",
                "-",
                "-",
                "-        return userBusiness.register(username,password);",
                "-",
                "-    }",
                "-",
                "-\t/**",
                "-\t * update",
                "-\t */",
                "-\t@RequestMapping(value = \"/update\", method = RequestMethod.POST)",
                "-\t@ResponseBody",
                "-\tpublic MessageResult update(HttpServletRequest request,",
                "-\t\t\t\t\t\t   @RequestParam(\"field\") String field,",
                "-\t\t\t\t\t\t   @RequestParam(\"value\") String value,",
                "-\t\t\t\t\t\t\t\tHttpSession session){",
                "-",
                "-\t\tint userId = (Integer) session.getAttribute(SessionAttr.USER_ID);",
                "-",
                "-\t\treturn userBusiness.updateField(userId, field,value);",
                "-",
                "-\t}",
                "-}",
                "diff --git a/src/main/java/org/marker/app/controller/TaoluViewController.java b/src/main/java/org/marker/app/controller/TaoluViewController.java",
                "deleted file mode 100644",
                "index 939bf76..0000000",
                "--- a/src/main/java/org/marker/app/controller/TaoluViewController.java",
                "+++ /dev/null",
                "@@ -1,58 +0,0 @@",
                "-package org.marker.app.controller;",
                "-",
                "-import org.marker.app.business.TaoluBusiness;",
                "-import org.marker.mushroom.dao.IArticleDao;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                "-import org.marker.mushroom.service.impl.CategoryService;",
                "-import org.marker.mushroom.support.SupportController;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Controller;",
                "-import org.springframework.ui.ModelMap;",
                "-import org.springframework.web.bind.annotation.RequestMapping;",
                "-import org.springframework.web.bind.annotation.RequestMethod;",
                "-import org.springframework.web.bind.annotation.RequestParam;",
                "-import org.springframework.web.bind.annotation.ResponseBody;",
                "-import org.springframework.web.servlet.ModelAndView;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import java.io.UnsupportedEncodingException;",
                "-",
                "-/**",
                "- *  Faceinner \u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "- * @author marker",
                "- * */",
                "-@Controller",
                "-@RequestMapping(\"/app/taolu\")",
                "-public class TaoluViewController extends SupportController {",
                "-",
                "-\t// \u00e6\u0096\u0087\u00e7\u00ab\u00a0Dao",
                "-\t@Autowired IArticleDao articleDao;",
                "-",
                "-\t@Autowired ArticleService articleService;",
                "-",
                "-\t@Autowired CategoryService categoryService;",
                "-",
                "-\t@Autowired",
                "-\tprivate TaoluBusiness taoluBusiness;",
                "-",
                "-",
                "-\tpublic TaoluViewController() {",
                "-\t\t\tthis.viewPath = \"/app/taolu/\";",
                "-",
                "-\t}",
                "-\t",
                "-",
                "-\t/**",
                "-\t * \u00e6\u0096\u0087\u00e7\u00ab\u00a0\u00e5\u0088\u0097\u00e8\u00a1\u00a8\u00e6\u008e\u00a5\u00e5\u008f\u00a3(REST)",
                "-\t * @return",
                "-\t */",
                "-\t@RequestMapping(value = \"/get\", method = RequestMethod.GET)",
                "-\t@ResponseBody",
                "-\tpublic Object list(HttpServletRequest request, ModelMap model,",
                "-\t\t\t\t\t   @RequestParam(\"id\") int id ){",
                "-\t\tModelAndView view = new ModelAndView(this.viewPath+\"content\");",
                "-\t\tview.addObject(\"c\", taoluBusiness.get(id));",
                "-\t\treturn view;",
                "-\t}",
                "-\t",
                "-}",
                "diff --git a/src/main/java/org/marker/app/dao/FeedBackDao.java b/src/main/java/org/marker/app/dao/FeedBackDao.java",
                "deleted file mode 100644",
                "index 5c0c9e6..0000000",
                "--- a/src/main/java/org/marker/app/dao/FeedBackDao.java",
                "+++ /dev/null",
                "@@ -1,15 +0,0 @@",
                "-package org.marker.app.dao;",
                "-",
                "-import org.marker.app.domain.FeedBack;",
                "-import org.marker.mushroom.dao.DaoEngine;",
                "-import org.springframework.stereotype.Repository;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-@Repository",
                "-public class FeedBackDao extends DaoEngine {",
                "-",
                "-",
                "-",
                "-}",
                "diff --git a/src/main/java/org/marker/app/domain/FeedBack.java b/src/main/java/org/marker/app/domain/FeedBack.java",
                "deleted file mode 100644",
                "index d9d5854..0000000",
                "--- a/src/main/java/org/marker/app/domain/FeedBack.java",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-package org.marker.app.domain;",
                "-",
                "-",
                "-import org.marker.mushroom.dao.annotation.Entity;",
                "-",
                "-import java.io.Serializable;",
                "-import java.util.Date;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-@Entity(\"feedback\")",
                "-public class FeedBack implements Serializable {",
                "-",
                "-    private Integer id;",
                "-    private String nickname;",
                "-    private int userId;",
                "-    private String content;",
                "-    private String ip;",
                "-    private Date time;",
                "-",
                "-    public Integer getId() {",
                "-        return id;",
                "-    }",
                "-",
                "-    public void setId(Integer id) {",
                "-        this.id = id;",
                "-    }",
                "-",
                "-    public String getNickname() {",
                "-        return nickname;",
                "-    }",
                "-",
                "-    public void setNickname(String nickname) {",
                "-        this.nickname = nickname;",
                "-    }",
                "-",
                "-    public String getContent() {",
                "-        return content;",
                "-    }",
                "-",
                "-    public void setContent(String content) {",
                "-        this.content = content;",
                "-    }",
                "-",
                "-    public String getIp() {",
                "-        return ip;",
                "-    }",
                "-",
                "-    public void setIp(String ip) {",
                "-        this.ip = ip;",
                "-    }",
                "-",
                "-    public Date getTime() {",
                "-        return time;",
                "-    }",
                "-",
                "-    public void setTime(Date time) {",
                "-        this.time = time;",
                "-    }",
                "-",
                "-    public int getUserId() {",
                "-        return userId;",
                "-    }",
                "-",
                "-    public void setUserId(int userId) {",
                "-        this.userId = userId;",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/interceptor/LoginInterceptor.java b/src/main/java/org/marker/app/interceptor/LoginInterceptor.java",
                "deleted file mode 100644",
                "index f2eccaf..0000000",
                "--- a/src/main/java/org/marker/app/interceptor/LoginInterceptor.java",
                "+++ /dev/null",
                "@@ -1,54 +0,0 @@",
                "-package org.marker.app.interceptor;",
                "-",
                "-import org.marker.security.Base64;",
                "-import org.marker.security.MD5;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-import org.springframework.util.StringUtils;",
                "-import org.springframework.web.servlet.HandlerInterceptor;",
                "-import org.springframework.web.servlet.ModelAndView;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "-",
                "-",
                "-/**",
                "- * \u00e7\u0099\u00bb\u00e5\u00bd\u0095\u00e6\u008b\u00a6\u00e6\u0088\u00aa\u00e5\u0099\u00a8",
                "- *",
                "- *",
                "- * @author marker",
                "- * ",
                "- * */",
                "-public class LoginInterceptor implements HandlerInterceptor  {",
                "-    private Logger logger = LoggerFactory.getLogger(LoginInterceptor.class);",
                "-",
                "-",
                "-\t@Override",
                "-\tpublic boolean preHandle(HttpServletRequest request,",
                "-\t\t\tHttpServletResponse response, Object handler) throws Exception {",
                "-",
                "-        String token = request.getParameter(\"token\");",
                "-",
                "-",
                "-",
                "-",
                "-",
                "-",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic void postHandle(HttpServletRequest request,",
                "-\t\t\tHttpServletResponse response, Object handler,",
                "-\t\t\tModelAndView modelAndView) throws Exception {",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic void afterCompletion(HttpServletRequest request,",
                "-\t\t\tHttpServletResponse response, Object handler, Exception ex)",
                "-\t\t\tthrows Exception {",
                "-\t}",
                "-",
                "-}",
                "diff --git a/src/main/java/org/marker/app/service/TaoluService.java b/src/main/java/org/marker/app/service/TaoluService.java",
                "deleted file mode 100644",
                "index 2d58f1e..0000000",
                "--- a/src/main/java/org/marker/app/service/TaoluService.java",
                "+++ /dev/null",
                "@@ -1,16 +0,0 @@",
                "-package org.marker.app.service;",
                "-",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/11/26.",
                "- */",
                "-public interface TaoluService {",
                "-",
                "-",
                "-    Map<String,Object> get(int id);",
                "-",
                "-    List<Map<String, Object>> pullData(int endId, int drection, int size, String keyword);",
                "-",
                "-}",
                "diff --git a/src/main/java/org/marker/app/service/UserService.java b/src/main/java/org/marker/app/service/UserService.java",
                "deleted file mode 100644",
                "index c66062d..0000000",
                "--- a/src/main/java/org/marker/app/service/UserService.java",
                "+++ /dev/null",
                "@@ -1,49 +0,0 @@",
                "-package org.marker.app.service;",
                "-",
                "-import org.marker.mushroom.beans.User;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-public interface UserService {",
                "-",
                "-    /**",
                "-     * \u00e5\u0088\u00a4\u00e6\u0096\u00ad\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e5\u0090\u008d\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8",
                "-     * @param username \u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e5\u0090\u008d",
                "-     * @return",
                "-     */",
                "-    boolean existUserName(String username);",
                "-",
                "-",
                "-    /**",
                "-     * \u00e6\u009f\u00a5\u00e8\u00af\u00a2\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e4\u00bf\u00a1\u00e6\u0081\u00af",
                "-     * @param username",
                "-     * @return",
                "-     */",
                "-    User findUser(String username);",
                "-",
                "-",
                "-    /**",
                "-     * \u00e6\u009b\u00b4\u00e6\u0096\u00b0\u00e7\u0094\u00a8\u00e6\u0088\u00b7Token",
                "-     * @param userId",
                "-     * @param sessionId",
                "-     */",
                "-    String updateUserToken(int userId, String sessionId);",
                "-",
                "-",
                "-    /**",
                "-     * \u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e7\u0094\u00a8\u00e6\u0088\u00b7",
                "-     * @param user",
                "-     */",
                "-    void save(User user);",
                "-",
                "-",
                "-    /**",
                "-     * \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e9\u0082\u00ae\u00e7\u00ae\u00b1\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8",
                "-     * @param email",
                "-     * @return",
                "-     */",
                "-    boolean existEmail(String email);",
                "-",
                "-    void updateField(int userId, String field, String value);",
                "-}",
                "diff --git a/src/main/java/org/marker/app/service/impl/TaoluServiceImpl.java b/src/main/java/org/marker/app/service/impl/TaoluServiceImpl.java",
                "deleted file mode 100644",
                "index 6043d81..0000000",
                "--- a/src/main/java/org/marker/app/service/impl/TaoluServiceImpl.java",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-package org.marker.app.service.impl;",
                "-",
                "-import org.marker.app.service.TaoluService;",
                "-import org.marker.mushroom.beans.Article;",
                "-import org.marker.mushroom.beans.ArticleTaolu;",
                "-import org.marker.mushroom.beans.Page;",
                "-import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "-import org.marker.mushroom.dao.ISupportDao;",
                "-import org.marker.mushroom.dao.annotation.Entity;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Service;",
                "-",
                "-import java.io.UnsupportedEncodingException;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/11/26.",
                "- */",
                "-@Service",
                "-public class TaoluServiceImpl implements TaoluService {",
                "-",
                "-",
                "-    @Autowired",
                "-    private ISupportDao commonDao;",
                "-",
                "-",
                "-    /** \u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e9\u0085\u008d\u00e7\u00bd\u00ae */",
                "-    protected static final DataBaseConfig dbConfig = DataBaseConfig.getInstance();",
                "-",
                "-",
                "-    public Map<String, Object> get(int id) {",
                "-        Map articleTaolu = commonDao.findById(ArticleTaolu.class, id);",
                "-        String prefix = dbConfig.getPrefix();// \u00e8\u00a1\u00a8\u00e5\u0089\u008d\u00e7\u00bc\u0080",
                "-        String tableName  = ArticleTaolu.class.getAnnotation(Entity.class).value();",
                "-        // \u00e6\u00b7\u00bb\u00e5\u008a\u00a0\u00e6\u00b5\u008f\u00e8\u00a7\u0088\u00e9\u0087\u008f",
                "-        commonDao.update(\"update \"+prefix+tableName+\" set views = views +1 where id = ?\",id);",
                "-",
                "-        return articleTaolu;",
                "-    }",
                "-",
                "-    @Override",
                "-    public List<Map<String, Object>> pullData(int endId, int drection,int size, String keyword) {",
                "-",
                "-",
                "-",
                "-        String sql = \"select a.id,a.icon,a.keywords,a.description,a.author,a.title,a.time, a.views,a.category from mr_taolu a where 1=1 and \";",
                "-        List list = new ArrayList<>(4);",
                "-        if(endId == 0){",
                "-            sql +=\" 1=1 order by a.time asc limit ?\";",
                "-            list.add(size);",
                "-        }else{",
                "-            if(drection > 0){// \u00e4\u00b8\u008a\u00e5\u0095\u00a6",
                "-                sql += \"a.id < ?\";",
                "-            }else{// \u00e4\u00b8\u008b\u00e6\u008b\u0089",
                "-                sql += \"a.id > ?\";",
                "-            }",
                "-            list.add(endId);",
                "-            sql +=\" order by a.time asc limit ?\";",
                "-            list.add(size);",
                "-        }",
                "-",
                "-",
                "-",
                "-",
                "-        return commonDao.queryForList(sql,list.toArray());",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/service/impl/UserServiceImpl.java b/src/main/java/org/marker/app/service/impl/UserServiceImpl.java",
                "deleted file mode 100644",
                "index 35581dd..0000000",
                "--- a/src/main/java/org/marker/app/service/impl/UserServiceImpl.java",
                "+++ /dev/null",
                "@@ -1,51 +0,0 @@",
                "-package org.marker.app.service.impl;",
                "-",
                "-import org.marker.app.service.UserService;",
                "-import org.marker.mushroom.beans.User;",
                "-import org.marker.mushroom.dao.IUserDao;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Service;",
                "-",
                "-import java.util.UUID;",
                "-",
                "-/**",
                "- * Created by ROOT on 2016/12/7.",
                "- */",
                "-@Service",
                "-public class UserServiceImpl implements UserService {",
                "-",
                "-    @Autowired",
                "-    private IUserDao userDao;",
                "-",
                "-    @Override",
                "-    public boolean existUserName(String username) {",
                "-        return userDao.existsUserName(username);",
                "-    }",
                "-",
                "-",
                "-    public User findUser(String username) {",
                "-        return userDao.findUserByName(username);",
                "-    }",
                "-",
                "-    @Override",
                "-    public String updateUserToken(int userId, String token) {",
                "-//        String token = UUID.randomUUID().toString().replaceAll(\"-\",\"\");",
                "-        userDao.updateToken(userId, token);",
                "-        return token;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void save(User user) {",
                "-        userDao.save(user);",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean existEmail(String email) {",
                "-        return userDao.existEmail(email);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void updateField(int userId, String field, String value) {",
                "-        userDao.updateField(  userId, field,value);",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/app/session/SessionConfig.java b/src/main/java/org/marker/app/session/SessionConfig.java",
                "deleted file mode 100644",
                "index 6b6938e..0000000",
                "--- a/src/main/java/org/marker/app/session/SessionConfig.java",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-package org.marker.app.session;",
                "-",
                "-/**",
                "- *",
                "- *",
                "- * @author marker",
                "- * Created by Administrator on 2016/12/21.",
                "- */",
                "-",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.beans.factory.annotation.Qualifier;",
                "-import org.springframework.context.annotation.Bean;",
                "-import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;",
                "-import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;",
                "-import org.springframework.session.web.http.CookieHttpSessionStrategy;",
                "-import org.springframework.session.web.http.HeaderHttpSessionStrategy;",
                "-import org.springframework.session.web.http.HttpSessionStrategy;",
                "-",
                "-/**",
                "- * Session \u00e9\u0085\u008d\u00e7\u00bd\u00ae",
                "- *",
                "- */",
                "-//@EnableRedisHttpSession",
                "-public class SessionConfig {",
                "-",
                "-",
                "-    /**",
                "-     * \u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e6\u009e\u0084\u00e9\u0080\u00a0",
                "-     */",
                "-    public SessionConfig(){",
                "-        System.out.println(\"---------------------------------------\");",
                "-        System.out.println(\"- Spring Session Redis Is init.....\");",
                "-        System.out.println(\"---------------------------------------\");",
                "-    }",
                "-",
                "-    // \u00e8\u0087\u00aa\u00e5\u008a\u00a8\u00e6\u00b3\u00a8\u00e5\u0085\u00a5\u00e6\u008c\u0087\u00e5\u00ae\u009a\u00e7\u009a\u0084jedisConnectionFactory\u00e5\u00af\u00b9\u00e8\u00b1\u00a1",
                "-    @Autowired",
                "-    @Qualifier(\"jedisConnectionFactory\")",
                "-    private JedisConnectionFactory jedisConnectionFactory;",
                "-",
                "-",
                "-",
                "-    @Bean",
                "-    public JedisConnectionFactory connectionFactory() {",
                "-        return jedisConnectionFactory;",
                "-    }",
                "-",
                "-",
                "-    /**",
                "-     * \u00e9\u0098\u00b2\u00e5\u0088\u00b7token",
                "-     * @return",
                "-     */",
                "-//    @Bean",
                "-//    public HttpSessionStrategy httpSessionStrategy() {",
                "-//        HeaderHttpSessionStrategy headerHttpSessionStrategy = new HeaderHttpSessionStrategy();",
                "-//        headerHttpSessionStrategy.setHeaderName(\"token\");",
                "-//        return headerHttpSessionStrategy;",
                "-//    }",
                "-",
                "-",
                "-    @Bean",
                "-    public CookieHttpSessionStrategy cookieHttpSessionStrategy() {",
                "-//        org.springframework.session.web.http",
                "-        CookieHttpSessionStrategy cookieHttpSessionStrategy = new CookieHttpSessionStrategy();",
                "-        cookieHttpSessionStrategy.setCookieName(\"S_ID\");",
                "-        cookieHttpSessionStrategy.setSessionAliasParamName(\"token\");",
                "-        return cookieHttpSessionStrategy;",
                "-    }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/org/marker/app/utils/ConfigurationHelper.java b/src/main/java/org/marker/app/utils/ConfigurationHelper.java",
                "deleted file mode 100644",
                "index 51a8981..0000000",
                "--- a/src/main/java/org/marker/app/utils/ConfigurationHelper.java",
                "+++ /dev/null",
                "@@ -1,100 +0,0 @@",
                "-package org.marker.app.utils;",
                "-",
                "-/**",
                "- * \u00e8\u00af\u00bb\u00e5\u008f\u0096\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e5\u00b7\u00a5\u00e5\u0085\u00b7\u00e7\u00b1\u00bb",
                "- *",
                "- * @author marker",
                "- * Created by marker on 2015/6/24.",
                "- */",
                "-",
                "-import com.mysql.jdbc.StringUtils;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import java.io.FileInputStream;",
                "-import java.util.Iterator;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-import java.util.Set;",
                "-",
                "-public final class ConfigurationHelper {",
                "-    private static final Logger log = LoggerFactory.getLogger(ConfigurationHelper.class);",
                "-",
                "-    private ConfigurationHelper() {",
                "-    }",
                "-",
                "-    private static final String filePath = \"/etc/hsxycms/config.properties\";",
                "-",
                "-    private static volatile Properties property = getPropertyInstance();",
                "-",
                "-    private static Properties getPropertyInstance() {",
                "-        if (property == null) {",
                "-            synchronized (ConfigurationHelper.class) {",
                "-                if (property == null) {",
                "-                    property = new Properties();",
                "-                    try (FileInputStream loadSettingStream = new FileInputStream(filePath)) {",
                "-                        property.load(loadSettingStream);",
                "-                        log.info(\"load properties completed ...\");",
                "-                    } catch (Exception e) {",
                "-                        e.printStackTrace();",
                "-//                        Thread.currentThread().interrupt();",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-        return property;",
                "-    }",
                "-",
                "-    public static String getProperty(String key) {",
                "-        return property.getProperty(key);",
                "-    }",
                "-",
                "-    public static String getReverseProperty(String value, boolean fuzzy) {",
                "-        String result = \"\";",
                "-        Set<Map.Entry<Object, Object>> propertiesEntry = property.entrySet();",
                "-        for (Iterator<Map.Entry<Object, Object>> iterator = propertiesEntry.iterator(); iterator.hasNext(); ) {",
                "-            Map.Entry<Object, Object> entry = iterator.next();",
                "-            String keyInEntry = (String) entry.getKey();",
                "-            String valueInEntry = (String) entry.getValue();",
                "-",
                "-            if (StringUtils.isNullOrEmpty(valueInEntry) || StringUtils.isNullOrEmpty(keyInEntry)) {",
                "-                continue;",
                "-            }",
                "-",
                "-            if (fuzzy) {",
                "-                if (valueInEntry.equals(value) || valueInEntry.contains(value) || value.contains(valueInEntry)) {",
                "-                    result = keyInEntry;",
                "-                    break;",
                "-                }",
                "-            } else {",
                "-                if (valueInEntry.equals(value)) {",
                "-                    result = keyInEntry;",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-        return result;",
                "-    }",
                "-",
                "-    public static String getReverseProperty(String value) {",
                "-        return getReverseProperty(value, false);",
                "-    }",
                "-",
                "-",
                "-    /**",
                "-     * \u00e5\u008d\u00b3\u00e6\u0097\u00b6\u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0096\u0087\u00e4\u00bb\u00b6",
                "-     * @param key",
                "-     * @return",
                "-     */",
                "-    public static String getDynamicProperty(String key) {",
                "-        Properties property = new Properties();",
                "-        try (FileInputStream loadSettingStream = new FileInputStream(filePath)) {",
                "-            property.load(loadSettingStream);",
                "-            log.info(\"load properties completed ...\");",
                "-        } catch (Exception e) {",
                "-            e.printStackTrace();",
                "-        }",
                "-        return property.getProperty(key);",
                "-    }",
                "-",
                "-}",
                "diff --git a/src/main/java/org/marker/app/utils/EnvUtils.java b/src/main/java/org/marker/app/utils/EnvUtils.java",
                "deleted file mode 100644",
                "index f918347..0000000",
                "--- a/src/main/java/org/marker/app/utils/EnvUtils.java",
                "+++ /dev/null",
                "@@ -1,53 +0,0 @@",
                "-package org.marker.app.utils;",
                "-",
                "-/**",
                "- * \u00e7\u008e\u00af\u00e5\u00a2\u0083\u00e5\u00b7\u00a5\u00e5\u0085\u00b7",
                "- *",
                "- * @author marker",
                "- * Created by Administrator on 2016/12/14.",
                "- */",
                "-public class EnvUtils {",
                "-",
                "-",
                "-    private static boolean dev;",
                "-",
                "-    /**",
                "-     * \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e7\u0094\u009f\u00e4\u00ba\u00a7\u00e7\u008e\u00af\u00e5\u00a2\u0083",
                "-     * @return",
                "-     */",
                "-    public static boolean isProduction(){",
                "-        String env_name = ConfigurationHelper.getProperty(\"env_name\");",
                "-        if(\"2\".equals(env_name)) return true;",
                "-        return false;",
                "-    }",
                "-",
                "-",
                "-    /**",
                "-     * \u00e8\u008e\u00b7\u00e5\u008f\u0096Msite\u00e7\u00ba\u00bf\u00e4\u00b8\u008a\u00e5\u009c\u00b0\u00e5\u009d\u0080",
                "-     * @return",
                "-     */",
                "-    public static String getMsiteAddress(){",
                "-        return ConfigurationHelper.getProperty(\"MSITE_WEB_ADDRESS\");",
                "-    }",
                "-",
                "-",
                "-    /**",
                "-     * \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00bc\u0080\u00e5\u008f\u0091\u00e7\u008e\u00af\u00e5\u00a2\u0083",
                "-     * @return",
                "-     */",
                "-    public static boolean isDev() {",
                "-        String env_name = ConfigurationHelper.getProperty(\"env_name\");",
                "-        if(\"0\".equals(env_name)) return true;",
                "-        return false;",
                "-    }",
                "-",
                "-    /**",
                "-     * \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e9\u00a2\u0084\u00e5\u008f\u0091\u00e7\u008e\u00af\u00e5\u00a2\u0083",
                "-     * @return",
                "-     */",
                "-    public static boolean isPreProduction(){",
                "-        String env_name = ConfigurationHelper.getProperty(\"env_name\");",
                "-        if(\"1\".equals(env_name)) return true;",
                "-        return false;",
                "-    }",
                "-}",
                "diff --git a/src/main/java/org/marker/mushroom/controller/AdminController.java b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "index 52cc0d7..e4b8ef2 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "@@ -2,11 +2,2 @@ package org.marker.mushroom.controller;",
                "-import java.io.IOException;",
                "-import java.util.Date;",
                "-",
                "-import javax.servlet.ServletContext;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import javax.servlet.http.HttpSession;",
                "-",
                "-import org.marker.app.common.SessionAttr;",
                " import org.marker.mushroom.beans.ResultMessage;",
                "@@ -28,7 +19,16 @@ import org.slf4j.LoggerFactory;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.beans.factory.annotation.Qualifier;",
                " import org.springframework.stereotype.Controller;",
                "-import org.springframework.web.bind.annotation.*;",
                "+import org.springframework.web.bind.annotation.RequestMapping;",
                "+import org.springframework.web.bind.annotation.RequestMethod;",
                "+import org.springframework.web.bind.annotation.RequestParam;",
                "+import org.springframework.web.bind.annotation.ResponseBody;",
                " import org.springframework.web.servlet.ModelAndView;",
                "+import javax.servlet.ServletContext;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import javax.servlet.http.HttpSession;",
                "+import java.io.IOException;",
                "+import java.util.Date;",
                "+",
                "@@ -66,3 +66,3 @@ public class AdminController extends SupportController {",
                " \t\tif(!WebAPP.install)",
                "-\t\t\treturn \"redirect:../install/index.jsp\";",
                "+\t\t\treturn \"redirect:../install/index.do\";",
                "@@ -119,3 +119,3 @@ public class AdminController extends SupportController {",
                " \t\tif(!WebAPP.install)",
                "-\t\t\treturn \"redirect:../install/index.jsp\";",
                "+\t\t\treturn \"redirect:../install/index.do\";",
                "@@ -184,3 +184,3 @@ public class AdminController extends SupportController {",
                " \t\t\t\t\t\tsession.setAttribute(AppStatic.WEB_APP_SESSSION_USER_GROUP_ID, user.getGid());// \u00e8\u00ae\u00be\u00e7\u00bd\u00ae\u00e5\u0088\u0086\u00e7\u00bb\u0084",
                "-\t\t\t\t\t\tsession.setAttribute(SessionAttr.USER_GROUP_ID, user.getGid());// \u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e7\u00bb\u0084",
                "+\t\t\t\t\t\tsession.setAttribute(AppStatic.USER_GROUP_ID, user.getGid());// \u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e7\u00bb\u0084",
                " \t\t\t\t\t\tsession.removeAttribute(AppStatic.WEB_APP_AUTH_CODE); //\u00e7\u00a7\u00bb\u00e9\u0099\u00a4\u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u00a0\u0081",
                "diff --git a/src/main/java/org/marker/mushroom/controller/ArticleController.java b/src/main/java/org/marker/mushroom/controller/ArticleController.java",
                "index a632eff..b2d76da 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/ArticleController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/ArticleController.java",
                "@@ -2,13 +2,3 @@ package org.marker.mushroom.controller;",
                "-import java.io.IOException;",
                "-import java.util.Date;",
                "-import java.util.HashMap;",
                "-import java.util.Iterator;",
                "-import java.util.Map;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpSession;",
                "-",
                " import io.github.gitbucket.markedj.Marked;",
                "-import org.marker.app.common.SessionAttr;",
                " import org.marker.mushroom.beans.Article;",
                "@@ -16,2 +6,3 @@ import org.marker.mushroom.beans.Page;",
                " import org.marker.mushroom.beans.ResultMessage;",
                "+import org.marker.mushroom.core.AppStatic;",
                " import org.marker.mushroom.core.proxy.SingletonProxyFrontURLRewrite;",
                "@@ -28,10 +19,12 @@ import org.springframework.stereotype.Controller;",
                " import org.springframework.ui.ModelMap;",
                "-import org.springframework.web.bind.annotation.ModelAttribute;",
                "-import org.springframework.web.bind.annotation.RequestMapping;",
                "-import org.springframework.web.bind.annotation.RequestMethod;",
                "-import org.springframework.web.bind.annotation.RequestParam;",
                "-import org.springframework.web.bind.annotation.ResponseBody;",
                "-import org.springframework.web.multipart.MultipartFile;",
                "+import org.springframework.web.bind.annotation.*;",
                " import org.springframework.web.servlet.ModelAndView;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpSession;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.Iterator;",
                "+import java.util.Map;",
                "+",
                " /**",
                "@@ -66,3 +59,3 @@ public class ArticleController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"add\");",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -78,3 +71,3 @@ public class ArticleController extends SupportController {",
                " \t\tview.addObject(\"article\", commonDao.findById(Article.class, id));",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -177,3 +170,3 @@ public class ArticleController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"list\");",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         view.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -209,3 +202,3 @@ public class ArticleController extends SupportController {",
                " \t\tparams.put(\"status\", status);",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         params.put(\"userGroupId\", userGroupId);",
                "diff --git a/src/main/java/org/marker/mushroom/controller/InstallController.java b/src/main/java/org/marker/mushroom/controller/InstallController.java",
                "new file mode 100644",
                "index 0000000..4d45693",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/controller/InstallController.java",
                "@@ -0,0 +1,266 @@",
                "+package org.marker.mushroom.controller;",
                "+",
                "+import com.alibaba.druid.pool.DruidDataSource;",
                "+import org.marker.mushroom.core.AppStatic;",
                "+import org.marker.mushroom.core.DataSourceProxy;",
                "+import org.marker.mushroom.core.WebAPP;",
                "+import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "+import org.marker.mushroom.core.config.impl.SystemConfig;",
                "+import org.marker.mushroom.core.domain.MessageResult;",
                "+import org.marker.mushroom.holder.SpringContextHolder;",
                "+import org.marker.mushroom.support.SupportController;",
                "+import org.marker.mushroom.utils.FileTools;",
                "+import org.marker.mushroom.utils.GeneratePass;",
                "+import org.marker.mushroom.utils.HttpUtils;",
                "+import org.marker.security.DES;",
                "+import org.springframework.stereotype.Controller;",
                "+import org.springframework.web.bind.annotation.RequestMapping;",
                "+import org.springframework.web.bind.annotation.RequestMethod;",
                "+import org.springframework.web.bind.annotation.ResponseBody;",
                "+import org.springframework.web.servlet.ModelAndView;",
                "+",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.OutputStream;",
                "+import java.security.NoSuchAlgorithmException;",
                "+import java.sql.*;",
                "+",
                "+",
                "+/**",
                "+ * \u00e5\u00ae\u0089\u00e8\u00a3\u0085MRCMS\u00e5\u00bc\u0095\u00e5\u00af\u00bc",
                "+ *",
                "+ * @author marker",
                "+ */",
                "+@Controller",
                "+@RequestMapping(\"/install\")",
                "+public class InstallController extends SupportController {",
                "+",
                "+",
                "+    public InstallController() {",
                "+        this.viewPath = \"/install/\";",
                "+    }",
                "+",
                "+    /**",
                "+     * \u00e6\u00b7\u00bb\u00e5\u008a\u00a0\u00e7\u0094\u00a8\u00e6\u0088\u00b7",
                "+     */",
                "+    @RequestMapping(\"/index\")",
                "+    public ModelAndView add() {",
                "+        ModelAndView view = new ModelAndView(this.viewPath + \"index\");",
                "+        return view;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * \u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e7\u0095\u008c\u00e9\u009d\u00a2\u00ef\u00bc\u0088\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e4\u00bf\u00a1\u00e6\u0081\u00af\u00ef\u00bc\u0089",
                "+     */",
                "+    @RequestMapping(\"/install\")",
                "+    public ModelAndView install() throws NoSuchAlgorithmException {",
                "+        ModelAndView view = new ModelAndView(this.viewPath + \"install\");",
                "+",
                "+        String secretKey = DES.getSecretKey(null);",
                "+        view.addObject(\"secretKey\", secretKey);",
                "+",
                "+        return view;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * \u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e6\u00a3\u0080\u00e6\u009f\u00a5",
                "+     */",
                "+    @RequestMapping(value = \"/check\", method = RequestMethod.POST)",
                "+    @ResponseBody",
                "+    public MessageResult check(HttpServletRequest request) throws NoSuchAlgorithmException {",
                "+        Connection conn = null;",
                "+        try {",
                "+            String host = request.getParameter(\"DB_HOST\");",
                "+            String port = request.getParameter(\"DB_PORT\");",
                "+            String user = request.getParameter(\"DB_USER\");",
                "+            String password = request.getParameter(\"DB_PWD\");",
                "+",
                "+",
                "+            String url = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + \"?useUnicode=true&characterEncoding=UTF-8\";",
                "+            Class.forName(\"org.gjt.mm.mysql.Driver\");",
                "+",
                "+            conn = DriverManager.getConnection(url, user, password);",
                "+            return MessageResult.success();",
                "+        } catch (Exception e) {",
                "+            log.error(\"\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e8\u00bf\u009e\u00e6\u008e\u00a5\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\u00ef\u00bc\u0081{}\", e.getMessage());",
                "+            return MessageResult.error(\"\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e8\u00bf\u009e\u00e6\u008e\u00a5\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5! <br/>\" + e.getMessage());",
                "+        } finally {",
                "+            try {",
                "+                if (conn != null) {",
                "+                    conn.close();",
                "+                }",
                "+            } catch (SQLException e) {",
                "+                log.error(\"\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e8\u00bf\u009e\u00e6\u008e\u00a5\u00e5\u0085\u00b3\u00e9\u0097\u00ad\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\u00ef\u00bc\u0081\");",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * \u00e6\u0089\u00a7\u00e8\u00a1\u008c\u00e5\u00ae\u0089\u00e8\u00a3\u0085",
                "+     */",
                "+    @RequestMapping(\"/progress\")",
                "+    public ModelAndView progress(HttpServletRequest",
                "+                                          request) throws NoSuchAlgorithmException {",
                "+",
                "+        String exceptionStr = \"\";",
                "+        ModelAndView view = new ModelAndView(this.viewPath + \"complete\");",
                "+        // \u00e9\u00a1\u00b9\u00e7\u009b\u00ae\u00e7\u009c\u009f\u00e5\u00ae\u009e\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+        String WebRootRealPath = application.getRealPath(File.separator);",
                "+",
                "+        // \u00e8\u0099\u009a\u00e6\u008b\u009f\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+        String WebRootPath = HttpUtils.getRequestURL(request);",
                "+",
                "+        String host = request.getParameter(\"DB_HOST\");",
                "+        String name = request.getParameter(\"DB_NAME\");",
                "+        String port = request.getParameter(\"DB_PORT\");",
                "+        String user = request.getParameter(\"DB_USER\");",
                "+        String pass = request.getParameter(\"DB_PWD\");",
                "+        String spot = request.getParameter(\"spot\");//\u00e5\u008a\u00a0\u00e5\u00af\u0086Key",
                "+        String prefix = request.getParameter(\"DB_PREFIX\");//\u00e8\u00a1\u00a8\u00e5\u0089\u008d\u00e7\u00bc\u0080",
                "+",
                "+        boolean status = (host != null) && name != null &&",
                "+                port != null && user != null && pass != null && spot != null && prefix != null;",
                "+",
                "+        if (status) {",
                "+            String jdbcurl = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + \"?useUnicode=true&characterEncoding=UTF-8\";",
                "+            String jdbcDBurl = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + name + \"?useUnicode=true&characterEncoding=UTF-8\";",
                "+",
                "+",
                "+            try {",
                "+",
                "+                /* ==============================================",
                "+                 *              1. \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e9\u0093\u00be\u00e6\u008e\u00a5",
                "+                 * ==============================================",
                "+                 */",
                "+                String driverClassName = \"org.gjt.mm.mysql.Driver\";",
                "+                Class.forName(driverClassName);",
                "+",
                "+                Connection conn = DriverManager.getConnection(jdbcurl, user, pass);",
                "+",
                "+",
                "+",
                "+                /* ==============================================",
                "+                 *              2. \u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e8\u00ae\u00be\u00e7\u00bd\u00ae\u00e6\u008c\u0081\u00e4\u00b9\u0085\u00e5\u008c\u0096",
                "+                 * ==============================================",
                "+                 */",
                "+",
                "+                File file = new File( WebRootRealPath + \"WEB-INF/classes/config.properties\");",
                "+",
                "+                DataBaseConfig dbc = DataBaseConfig.getInstance();",
                "+                dbc.read(file);",
                "+                dbc.set(\"mushroom.db.host\", host);",
                "+                dbc.set(\"mushroom.db.port\", port);",
                "+                dbc.set(\"mushroom.db.demo\", name);",
                "+                dbc.set(\"mushroom.db.user\", user);",
                "+                dbc.set(\"mushroom.db.pass\", pass);",
                "+                dbc.set(\"mushroom.db.prefix\", prefix);",
                "+                dbc.store();//\u00e4\u00bf\u009d\u00e5\u00ad\u0098",
                "+",
                "+",
                "+",
                "+                /* ==============================================",
                "+                 *              3. \u00e7\u00b3\u00bb\u00e7\u00bb\u009f\u00e5\u008a\u00a0\u00e5\u00af\u0086Key\u00e6\u008c\u0081\u00e4\u00b9\u0085\u00e5\u008c\u0096",
                "+                 * ==============================================",
                "+                 */",
                "+                SystemConfig sysconfig = SystemConfig.getInstance();",
                "+                sysconfig.set(\"secret_key\", spot);//\u00e6\u009b\u00b4\u00e6\u0096\u00b0Key",
                "+                sysconfig.store();//\u00e4\u00bf\u009d\u00e5\u00ad\u0098",
                "+",
                "+",
                "+",
                "+",
                "+                /* =======================================================",
                "+                 *   4. \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e9\u0093\u00be\u00e6\u008e\u00a5\u00ef\u00bc\u008c\u00e5\u00b9\u00b6\u00e5\u0088\u00a4\u00e6\u0096\u00ad\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ad\u0098\u00e5\u009c\u00a8\u00ef\u00bc\u008c\u00e4\u00b8\u008d\u00e5\u00ad\u0098\u00e5\u009c\u00a8\u00e5\u00b0\u00b1\u00e5\u0088\u009b\u00e5\u00bb\u00ba",
                "+                 * =======================================================",
                "+                 */",
                "+                String checkAndCreateSql = \"CREATE database IF NOT EXISTS \" + name;",
                "+                PreparedStatement ps = conn.prepareStatement(checkAndCreateSql);",
                "+                ps.executeUpdate();",
                "+                ps.close();",
                "+",
                "+",
                "+",
                "+                /* =======================================================",
                "+                 *   5. \u00e8\u00af\u00bb\u00e5\u008f\u0096\u00e5\u00bb\u00ba\u00e8\u00a1\u00a8SQL\u00e4\u00bf\u00a1\u00e6\u0081\u00af\u00ef\u00bc\u008c\u00e5\u00b9\u00b6\u00e5\u0088\u009b\u00e5\u00bb\u00ba\u00e8\u00a1\u00a8",
                "+                 * =======================================================",
                "+                 */",
                "+                File sqlFile = new File(WebRootRealPath + \"/data/sql/db_app.sql\");",
                "+                String sql = FileTools.getFileContet(sqlFile, FileTools.FILE_CHARACTER_UTF8);",
                "+                sql = sql.replaceAll(\"\\\\{prefix\\\\}\", prefix);//\u00e6\u009b\u00bf\u00e6\u008d\u00a2\u00e5\u0089\u008d\u00e7\u00bc\u0080",
                "+//                System.out.println(sql);",
                "+",
                "+                String[] sqla = sql.split(\";\");",
                "+                conn.setCatalog(name);",
                "+                Statement statement = conn.createStatement();",
                "+                System.out.println(\"===========\");",
                "+                for (int i = 0; i < sqla.length; i++) {",
                "+                    String a = sqla[i];",
                "+                    if (a != null && !\"\".equals(a.trim())) {",
                "+                        log.info(\"{}\", a);",
                "+//                        statement.addBatch(a);",
                "+                        statement.execute(a);",
                "+                    }",
                "+                }",
                "+                System.out.println(\"===========\");",
                "+//                statement.executeBatch();",
                "+                statement.close();",
                "+",
                "+",
                "+                // \u00e6\u009b\u00b4\u00e6\u0096\u00b0\u00e5\u00af\u0086\u00e7\u00a0\u0081\u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e7\u0094\u00a8\u00e6\u0088\u00b7admin",
                "+                String pass2 = GeneratePass.encode(\"mrcms\");",
                "+                ps = conn.prepareStatement(\"update \" + prefix + \"user set pass='\" + pass2 + \"' where id=1\");",
                "+                ps.executeUpdate();",
                "+                ps.close();",
                "+                conn.close();",
                "+",
                "+                //\u00e8\u00ae\u00be\u00e7\u00bd\u00ae\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e7\u008a\u00b6\u00e6\u0080\u0081",
                "+                application.setAttribute(AppStatic.WEB_APP_INSTALL, true);",
                "+                String BasePath = application.getRealPath(\"/data/\");",
                "+                OutputStream os = new FileOutputStream(new File(BasePath + \"/install.lock\"));",
                "+                os.write(0);",
                "+                os.flush();",
                "+                os.close();",
                "+",
                "+",
                "+",
                "+                /* =======================================================",
                "+                 *   6. \u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e5\u00ba\u0093\u00e9\u0093\u00be\u00e6\u008e\u00a5",
                "+                 * =======================================================",
                "+                 */",
                "+",
                "+                DruidDataSource dataSource =new DruidDataSource();",
                "+",
                "+                dataSource.setDriverClassName(driverClassName);",
                "+                dataSource.setUrl(jdbcDBurl);",
                "+                dataSource.setUsername(user);",
                "+                dataSource.setPassword(pass);",
                "+",
                "+",
                "+                DataSourceProxy proxy = SpringContextHolder.getBean(\"dataSource\");",
                "+                proxy.setDataSource(dataSource);",
                "+",
                "+",
                "+",
                "+",
                "+",
                "+",
                "+                WebAPP.install = true;// \u00e8\u00ae\u00be\u00e7\u00bd\u00ae\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e7\u008a\u00b6\u00e6\u0080\u0081(\u00e5\u00bf\u0085\u00e9\u00a1\u00bb)",
                "+            } catch (Exception e) {",
                "+                exceptionStr = e.getMessage();",
                "+                log.error(\"mrcms install exception\", e);",
                "+            }",
                "+        }",
                "+",
                "+        view.addObject(\"install\", WebAPP.install);",
                "+        view.addObject(\"exceptionStr\", exceptionStr);",
                "+        view.addObject(\"WebRootPath\", WebRootPath);",
                "+",
                "+        return view;",
                "+    }",
                "+",
                "+",
                "+}",
                "diff --git a/src/main/java/org/marker/mushroom/controller/ProjectController.java b/src/main/java/org/marker/mushroom/controller/ProjectController.java",
                "index b95e8e5..0f27aaf 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/ProjectController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/ProjectController.java",
                "@@ -2,5 +2,2 @@ package org.marker.mushroom.controller;",
                "-import io.github.gitbucket.markedj.Marked;",
                "-import org.marker.app.common.SessionAttr;",
                "-import org.marker.mushroom.beans.Article;",
                " import org.marker.mushroom.beans.Page;",
                "@@ -8,7 +5,6 @@ import org.marker.mushroom.beans.Project;",
                " import org.marker.mushroom.beans.ResultMessage;",
                "+import org.marker.mushroom.core.AppStatic;",
                " import org.marker.mushroom.core.proxy.SingletonProxyFrontURLRewrite;",
                "-import org.marker.mushroom.dao.IArticleDao;",
                " import org.marker.mushroom.dao.IChannelDao;",
                " import org.marker.mushroom.dao.ProjectDao;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                " import org.marker.mushroom.service.impl.CategoryService;",
                "@@ -64,3 +60,3 @@ public class ProjectController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"add\");",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -76,3 +72,3 @@ public class ProjectController extends SupportController {",
                " \t\tview.addObject(\"article\", commonDao.findById(Project.class, id));",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -151,3 +147,3 @@ public class ProjectController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"list\");",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         view.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -183,3 +179,3 @@ public class ProjectController extends SupportController {",
                " \t\tparams.put(\"status\", status);",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         params.put(\"userGroupId\", userGroupId);",
                "diff --git a/src/main/java/org/marker/mushroom/controller/ThematicController.java b/src/main/java/org/marker/mushroom/controller/ThematicController.java",
                "index 0504f12..ecf4157 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/ThematicController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/ThematicController.java",
                "@@ -4,4 +4,2 @@ import io.github.gitbucket.markedj.Marked;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.marker.app.common.SessionAttr;",
                "-import org.marker.mushroom.beans.Article;",
                " import org.marker.mushroom.beans.Page;",
                "@@ -9,7 +7,6 @@ import org.marker.mushroom.beans.ResultMessage;",
                " import org.marker.mushroom.beans.Thematic;",
                "+import org.marker.mushroom.core.AppStatic;",
                " import org.marker.mushroom.core.proxy.SingletonProxyFrontURLRewrite;",
                "-import org.marker.mushroom.dao.IArticleDao;",
                " import org.marker.mushroom.dao.IChannelDao;",
                " import org.marker.mushroom.dao.ThematicDao;",
                "-import org.marker.mushroom.service.impl.ArticleService;",
                " import org.marker.mushroom.service.impl.CategoryService;",
                "@@ -62,3 +59,3 @@ public class ThematicController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"add\");",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -74,3 +71,3 @@ public class ThematicController extends SupportController {",
                " \t\tview.addObject(\"article\", commonDao.findById(Thematic.class, id));",
                "-\t\tint userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+\t\tint userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                " \t\tview.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -220,3 +217,3 @@ public class ThematicController extends SupportController {",
                " \t\tModelAndView view = new ModelAndView(this.viewPath+\"list\");",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         view.addObject(\"channels\", channelService.getUserGroupChannel(userGroupId));",
                "@@ -252,3 +249,3 @@ public class ThematicController extends SupportController {",
                " \t\tparams.put(\"status\", status);",
                "-        int userGroupId = (int)session.getAttribute(SessionAttr.USER_GROUP_ID);",
                "+        int userGroupId = (int)session.getAttribute(AppStatic.USER_GROUP_ID);",
                "         params.put(\"userGroupId\", userGroupId);",
                "diff --git a/src/main/java/org/marker/mushroom/core/AppStatic.java b/src/main/java/org/marker/mushroom/core/AppStatic.java",
                "index 0e38b1a..66917ea 100644",
                "--- a/src/main/java/org/marker/mushroom/core/AppStatic.java",
                "+++ b/src/main/java/org/marker/mushroom/core/AppStatic.java",
                "@@ -58,3 +58,5 @@ public interface AppStatic {",
                "-\tpublic static final String WEB_APP_PAGE = \"page\"; ",
                "+\tpublic static final String WEB_APP_PAGE = \"page\";",
                "+",
                "+    public static final String  USER_GROUP_ID = \"userGroupId\";",
                " }",
                "diff --git a/src/main/java/org/marker/mushroom/core/DataSourceProxy.java b/src/main/java/org/marker/mushroom/core/DataSourceProxy.java",
                "new file mode 100644",
                "index 0000000..e836685",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/core/DataSourceProxy.java",
                "@@ -0,0 +1,82 @@",
                "+package org.marker.mushroom.core;",
                "+/**",
                "+ * Created by marker on 2018/8/11.",
                "+ */",
                "+",
                "+import javax.sql.DataSource;",
                "+import java.io.PrintWriter;",
                "+import java.sql.Connection;",
                "+import java.sql.SQLException;",
                "+import java.sql.SQLFeatureNotSupportedException;",
                "+import java.util.logging.Logger;",
                "+",
                "+/**",
                "+ * @author marker",
                "+ * @create 2018-08-11 11:46",
                "+ **/",
                "+public class DataSourceProxy implements DataSource {",
                "+",
                "+",
                "+    private DataSource dataSource;",
                "+",
                "+",
                "+    @Override",
                "+    public Connection getConnection()   {",
                "+",
                "+        try {",
                "+            return dataSource.getConnection();",
                "+        } catch (SQLException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Connection getConnection(String username, String password) throws SQLException {",
                "+        return dataSource.getConnection(username, password);",
                "+    }",
                "+",
                "+    @Override",
                "+    public <T> T unwrap(Class<T> iface) throws SQLException {",
                "+        return dataSource.unwrap(iface);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isWrapperFor(Class<?> iface) throws SQLException {",
                "+        return dataSource.isWrapperFor(iface);",
                "+    }",
                "+",
                "+    @Override",
                "+    public PrintWriter getLogWriter() throws SQLException {",
                "+        return dataSource.getLogWriter();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setLogWriter(PrintWriter out) throws SQLException {",
                "+        dataSource.setLogWriter(out);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setLoginTimeout(int seconds) throws SQLException {",
                "+        dataSource.setLoginTimeout(seconds);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getLoginTimeout() throws SQLException {",
                "+        return dataSource.getLoginTimeout();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {",
                "+        return dataSource.getParentLogger();",
                "+    }",
                "+",
                "+    public DataSource getDataSource() {",
                "+        return dataSource;",
                "+    }",
                "+",
                "+    public void setDataSource(DataSource dataSource) {",
                "+        this.dataSource = dataSource;",
                "+    }",
                "+}",
                "diff --git a/src/main/java/org/marker/mushroom/core/WebAPP.java b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "index 427fd8b..ffc0461 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "@@ -2,15 +2,3 @@ package org.marker.mushroom.core;",
                "-import java.io.File;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.IOException;",
                "-import java.io.Writer;",
                "-import java.util.ArrayList;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                " import org.marker.mushroom.alias.Core;",
                "-import org.marker.mushroom.alias.DAO;",
                " import org.marker.mushroom.alias.LOG;",
                "@@ -23,5 +11,2 @@ import org.marker.mushroom.core.config.impl.SystemConfig;",
                " import org.marker.mushroom.core.exception.SystemException;",
                "-import org.marker.mushroom.dao.IChannelDao;",
                "-import org.marker.mushroom.dao.mapper.ObjectRowMapper;",
                "-import org.marker.mushroom.ext.model.ContentModel;",
                " import org.marker.mushroom.ext.model.ContentModelContext;",
                "@@ -36,3 +21,12 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.springframework.jdbc.core.JdbcTemplate;",
                "+",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import java.io.File;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.io.Writer;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "@@ -131,3 +125,3 @@ public final class WebAPP {",
                " \t\t\t\tlogger.error(\"mrcms not install\");",
                "-\t\t\t\tresponse.sendRedirect(\"install/index.jsp\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "+\t\t\t\tresponse.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                " \t\t\t\treturn; // \u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u00ae\u008c\u00e6\u00af\u0095\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e3\u0080\u0082",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/ConfigDBEngine.java b/src/main/java/org/marker/mushroom/core/config/ConfigDBEngine.java",
                "index f0b4174..f20e840 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/ConfigDBEngine.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/ConfigDBEngine.java",
                "@@ -3,3 +3,2 @@ package org.marker.mushroom.core.config;",
                " import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "-import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.slf4j.Logger;",
                "@@ -9,3 +8,6 @@ import org.springframework.jdbc.core.JdbcTemplate;",
                " import java.io.*;",
                "-import java.util.*;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "@@ -89,2 +91,4 @@ public abstract class ConfigDBEngine {",
                " \tpublic synchronized void read(){",
                "+\t    if(jdbcTemplate == null)",
                "+\t        return;",
                " \t\tString name = this.getClass().getSimpleName();",
                "@@ -164,2 +168,36 @@ public abstract class ConfigDBEngine {",
                "     }",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u008c\u0081\u00e4\u00b9\u0085\u00e5\u008c\u0096",
                "+\t */",
                "+\tpublic void storeFile(File cfgFile){",
                "+\t\tOutputStream out = null;",
                "+\t\tOutputStreamWriter osw = null;",
                "+\t\ttry{",
                "+\t\t\tout = new FileOutputStream(cfgFile);",
                "+\t\t\tosw = new OutputStreamWriter(out, FILE_ENCODEING);",
                "+\t\t\tthis.properties.store(osw, \"\");",
                "+",
                "+\t\t}catch (FileNotFoundException e) {",
                "+\t\t\tlogger.error(\"config file not found \" + cfgFile.getAbsolutePath(), e);",
                "+\t\t} catch (UnsupportedEncodingException e) {",
                "+\t\t\tlogger.error(\"not supported encoding \" + FILE_ENCODEING,e);",
                "+\t\t} catch (IOException e) {",
                "+\t\t\tlogger.error(\"IOException \" + cfgFile.getAbsolutePath(), e);",
                "+\t\t}finally{",
                "+\t\t\ttry {",
                "+\t\t\t\tif(osw != null){",
                "+\t\t\t\t\tosw.close();",
                "+\t\t\t\t}",
                "+\t\t\t\tif(out != null){",
                "+\t\t\t\t\tout.close();",
                "+\t\t\t\t}",
                "+\t\t\t} catch (IOException e) {",
                "+\t\t\t\tlogger.error(",
                "+\t\t\t\t\t\t\"close stream IOException \"",
                "+\t\t\t\t\t\t\t\t+ cfgFile.getAbsolutePath(), e);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java b/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "index ad6924e..37eb6a9 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "@@ -2,14 +2,3 @@ package org.marker.mushroom.core.config;",
                "-import java.io.File;",
                "-import java.io.FileInputStream;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.FileOutputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStreamReader;",
                "-import java.io.OutputStream;",
                "-import java.io.OutputStreamWriter;",
                "-import java.io.UnsupportedEncodingException;",
                "-import java.net.URISyntaxException;",
                "-import java.util.Properties;",
                "-",
                "+import org.marker.mushroom.holder.WebRealPathHolder;",
                " import org.slf4j.Logger;",
                "@@ -17,2 +6,5 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.*;",
                "+import java.util.Properties;",
                "+",
                "@@ -55,18 +47,5 @@ public abstract class ConfigEngine implements IConfig {",
                " \t */",
                "-\tpublic ConfigEngine(String cfgFilePath) { ",
                "-\t\tString file = null;",
                "-\t\tString osName = System.getProperty(\"os.name\");",
                "-        if(cfgFilePath.lastIndexOf(\".config\") != -1){//\u00e8\u00bd\u00af\u00e4\u00bb\u00b6\u00e9\u0085\u008d\u00e7\u00bd\u00ae",
                "-            file = ConfigEngine.class.getResource(cfgFilePath).getFile();",
                "-        }else{",
                "-            if(osName.toLowerCase().indexOf(\"win\") != -1){ // win",
                "-",
                "-                String path = ConfigEngine.class.getResource(\"/\").getPath();",
                "-                String prefix = path.substring(1,3);",
                "-                file = prefix+\"\"+cfgFilePath;",
                "-            }else{",
                "-                file = cfgFilePath;",
                "-            }",
                "-        }",
                "-\t\tthis.read(new File(file));",
                "+\tpublic ConfigEngine(String cfgFilePath) {",
                "+\t\tString filepath = WebRealPathHolder.REAL_PATH + cfgFilePath;",
                "+\t\tthis.read(new File(filepath));",
                " \t}",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/impl/DataBaseConfig.java b/src/main/java/org/marker/mushroom/core/config/impl/DataBaseConfig.java",
                "index 247f6ad..0f8b772 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/impl/DataBaseConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/impl/DataBaseConfig.java",
                "@@ -2,7 +2,2 @@ package org.marker.mushroom.core.config.impl;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.util.Properties;",
                "-",
                "-",
                " import org.marker.mushroom.core.config.ConfigEngine;",
                "@@ -10,2 +5,5 @@ import org.marker.mushroom.holder.SpringContextHolder;",
                "+import java.io.IOException;",
                "+import java.util.Properties;",
                "+",
                " /**",
                "@@ -36,3 +34,3 @@ public class DataBaseConfig extends ConfigEngine {",
                " \t * */",
                "-\tprivate static  DataBaseConfig instance;",
                "+\tprivate static DataBaseConfig instance;",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "index 6964536..f081257 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "@@ -4,6 +4,5 @@ package org.marker.mushroom.core.config.impl;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.marker.mushroom.core.config.ConfigDBEngine;",
                "+import org.marker.mushroom.core.config.ConfigEngine;",
                " import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.marker.mushroom.holder.WebRealPathHolder;",
                "-import org.springframework.jdbc.core.JdbcTemplate;",
                "@@ -16,3 +15,3 @@ import org.springframework.jdbc.core.JdbcTemplate;",
                "  * */",
                "-public final class SystemConfig extends ConfigDBEngine {",
                "+public final class SystemConfig extends ConfigEngine {",
                "@@ -65,6 +64,5 @@ public final class SystemConfig extends ConfigDBEngine {",
                " \t *",
                "-\t * @param jdbcTemplate",
                " \t */",
                "-\tprivate SystemConfig(JdbcTemplate jdbcTemplate) {",
                "-\t\tsuper(jdbcTemplate);",
                "+\tpublic SystemConfig() {",
                "+\t\tsuper(\"WEB-INF/conf/site.properties\");",
                " \t}",
                "@@ -81,4 +79,3 @@ public final class SystemConfig extends ConfigDBEngine {",
                " \t\t\t\tif(systemConfig == null){",
                "-\t\t\t\t\tJdbcTemplate jdbcTemplate = SpringContextHolder.getBean(\"jdbcTemplate\");",
                "-\t\t\t\t\tsystemConfig = new SystemConfig(jdbcTemplate);",
                "+\t\t\t\t\tsystemConfig = SpringContextHolder.getBean(\"SystemConfig\");",
                " \t\t\t\t}",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/impl/URLRewriteConfig.java b/src/main/java/org/marker/mushroom/core/config/impl/URLRewriteConfig.java",
                "index a26f9fe..b397680 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/impl/URLRewriteConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/impl/URLRewriteConfig.java",
                "@@ -2,5 +2,2 @@ package org.marker.mushroom.core.config.impl;",
                "-import java.io.IOException;",
                "-",
                "-import org.marker.mushroom.core.config.ConfigDBEngine;",
                " import org.marker.mushroom.core.config.ConfigEngine;",
                "@@ -9,3 +6,2 @@ import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.marker.urlrewrite.URLRewriteEngine;",
                "-import org.springframework.jdbc.core.JdbcTemplate;",
                "@@ -19,3 +15,3 @@ import org.springframework.jdbc.core.JdbcTemplate;",
                "  */",
                "-public class URLRewriteConfig extends ConfigDBEngine {",
                "+public class URLRewriteConfig extends ConfigEngine {",
                "@@ -40,6 +36,5 @@ public class URLRewriteConfig extends ConfigDBEngine {",
                " \t *",
                "-\t * @param jdbcTemplate",
                " \t */",
                "-\tpublic URLRewriteConfig(JdbcTemplate jdbcTemplate) {",
                "-\t\tsuper(jdbcTemplate);",
                "+\tpublic URLRewriteConfig() {",
                "+        super(\"WEB-INF/conf/urlrewrite.properties\");",
                " \t\tinit();// \u00e5\u0088\u009d\u00e5\u00a7\u008b\u00e5\u008c\u0096",
                "diff --git a/src/main/java/org/marker/mushroom/core/domain/MessageResult.java b/src/main/java/org/marker/mushroom/core/domain/MessageResult.java",
                "new file mode 100644",
                "index 0000000..3d04a18",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/core/domain/MessageResult.java",
                "@@ -0,0 +1,219 @@",
                "+package org.marker.mushroom.core.domain;",
                "+",
                "+import com.alibaba.fastjson.JSON;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+",
                "+/**",
                "+ * \u00e6\u00b6\u0088\u00e6\u0081\u00af\u00e5\u00af\u00b9\u00e8\u00b1\u00a1",
                "+ * @author marker",
                "+ * @version 1.0",
                "+ * ",
                "+ * @update 2015-02-11 \u00e6\u00b7\u00bb\u00e5\u008a\u00a0\u00e4\u00ba\u0086code\u00e5\u00b1\u009e\u00e6\u0080\u00a7\u00ef\u00bc\u008c\u00e6\u008f\u008f\u00e8\u00bf\u00b0\u00e9\u0094\u0099\u00e8\u00af\u00af\u00e7\u00a0\u0081\u00ef\u00bc\u008c\u00e7\u00bb\u0091\u00e5\u00ae\u009a\u00e5\u009b\u00bd\u00e9\u0099\u0085\u00e5\u008c\u0096\u00e8\u00b5\u0084\u00e6\u00ba\u0090",
                "+ */",
                "+public class MessageResult implements Serializable {",
                "+\t",
                "+\t/** \u00e8\u00a1\u00a8\u00e5\u008d\u0095\u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e9\u0094\u0099\u00e8\u00af\u00af */",
                "+\tpublic static final int TYPE_FORM      = -4;",
                "+\t/** \u00e7\u00a8\u008b\u00e5\u00ba\u008f\u00e5\u00bc\u0082\u00e5\u00b8\u00b8 */",
                "+\tpublic static final int TYPE_EXCEPTION = -2;",
                "+\t/** \u00e8\u00ad\u00a6\u00e5\u0091\u008a\u00e4\u00bf\u00a1\u00e6\u0081\u00af  */",
                "+\tpublic static final int TYPE_WRANING   = -3;",
                "+\t",
                "+\tpublic static  final  int OperationSuccess = 0;",
                "+\tpublic static  final  int OperationError = -1;",
                "+\t",
                "+\t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "+\tprivate Logger logger = LoggerFactory.getLogger(getClass()); ",
                "+\t",
                "+",
                "+\t/** \u00e6\u00b6\u0088\u00e6\u0081\u00af\u00e5\u0086\u0085\u00e5\u00ae\u00b9\u00e7\u00bc\u0093\u00e5\u00ad\u0098\u00e5\u008c\u00ba */",
                "+\tprivate static final Map<Integer, String> messages = new HashMap<Integer, String>();",
                "+\t",
                "+\t",
                "+\t/** \u00e7\u008a\u00b6\u00e6\u0080\u0081 */",
                "+\tprotected int status;",
                "+\t",
                "+\t/** \u00e6\u00b6\u0088\u00e6\u0081\u00af\u00e5\u0086\u0085\u00e5\u00ae\u00b9 */",
                "+\tprotected String msg;",
                "+\t",
                "+\t/** \u00e6\u00b6\u0088\u00e6\u0081\u00af */",
                "+\tprotected Object data;",
                "+\t",
                "+\t",
                "+\t/**",
                "+\t * \u00e6\u00b6\u0088\u00e6\u0081\u00af",
                "+\t * */",
                "+\tpublic MessageResult(Object data){",
                "+\t\tthis.status = OperationSuccess;",
                "+\t\tthis.data = data;",
                "+\t}",
                "+\t",
                "+\t",
                "+\t",
                "+\t/**",
                "+\t * \u00e9\u0092\u0088\u00e5\u00af\u00b9\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e5\u00a4\u009a\u00e4\u00b8\u00aa\u00e9\u0094\u0099\u00e8\u00af\u00af\u00e7\u00a0\u0081\u00e7\u009a\u0084\u00e6\u008e\u00a5\u00e5\u008f\u00a3\u00e8\u00ae\u00be\u00e8\u00ae\u00a1",
                "+\t * @param errorcode",
                "+\t */",
                "+\tpublic MessageResult(String[] errorcode){",
                "+\t\tthis.status = OperationError;",
                "+\t\tthis.data = errorcode;",
                "+\t}",
                "+\t",
                "+\t",
                "+\t/**",
                "+\t * \u00e9\u0092\u0088\u00e5\u00af\u00b9\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e5\u00a4\u009a\u00e4\u00b8\u00aa\u00e9\u0094\u0099\u00e8\u00af\u00af\u00e7\u00a0\u0081\u00e7\u009a\u0084\u00e6\u008e\u00a5\u00e5\u008f\u00a3\u00e8\u00ae\u00be\u00e8\u00ae\u00a1",
                "+\t * @param status",
                "+\t */",
                "+\tpublic MessageResult(int status){",
                "+\t\tthis.status = status;",
                "+\t}",
                "+",
                "+",
                "+ ",
                "+",
                "+",
                "+ ",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e6\u0088\u0090\u00e5\u008a\u009f\u00e6\u00b6\u0088\u00e6\u0081\u00af",
                "+\t */",
                "+\tpublic MessageResult() {",
                "+\t\tthis.status = OperationSuccess;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e9\u0080\u009a\u00e7\u0094\u00a8\u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e6\u0088\u0090\u00e5\u008a\u009f\u00e4\u00b8\u008e\u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e6\u0096\u00b9\u00e6\u00b3\u0095",
                "+\t * \u00ef\u00bc\u0088\u00e5\u00bd\u0093status=true\u00e6\u0097\u00b6\u00ef\u00bc\u008c \u00e7\u008a\u00b6\u00e6\u0080\u0081\u00e7\u00a0\u0081\u00e4\u00b8\u00ba\u00ef\u00bc\u009a0\u00ef\u00bc\u0089",
                "+\t * \u00ef\u00bc\u0088\u00e5\u00bd\u0093status=false\u00e6\u0097\u00b6\u00ef\u00bc\u008c\u00e7\u008a\u00b6\u00e6\u0080\u0081\u00e7\u00a0\u0081\u00e4\u00b8\u00ba\u00ef\u00bc\u009a100500 \u00ef\u00bc\u0089",
                "+\t * ",
                "+\t * @param status \u00e7\u008a\u00b6\u00e6\u0080\u0081",
                "+\t */",
                "+\tpublic MessageResult(boolean status, String data) {",
                "+\t\tif(status){",
                "+\t\t\tthis.status =  OperationSuccess;",
                "+\t\t}else{",
                "+\t\t\tthis.status =OperationError;",
                "+\t\t}",
                "+\t\tthis.data = data;",
                "+\t\t",
                "+\t}",
                "+",
                "+\tpublic MessageResult(boolean status, String msg, Object data) {",
                "+\t\tif(status){",
                "+\t\t\tthis.status =OperationSuccess;",
                "+\t\t}else{",
                "+\t\t\tthis.status =OperationError;",
                "+\t\t}",
                "+\t\tthis.msg = msg;",
                "+\t\tthis.data = data; ",
                "+\t}",
                "+",
                "+\tpublic MessageResult(boolean status, Object data) {",
                "+\t\tif(status){",
                "+\t\t\tthis.status =OperationSuccess;",
                "+\t\t}else{",
                "+\t\t\tthis.status =OperationError;",
                "+\t\t}",
                "+\t\tthis.data = data;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * \u00e6\u009e\u0084\u00e9\u0080\u00a0",
                "+\t * @param status \u00e7\u008a\u00b6\u00e6\u0080\u0081\u00e7\u00a0\u0081",
                "+\t * @param msg \u00e6\u00b6\u0088\u00e6\u0081\u00af\u00e5\u0086\u0085\u00e5\u00ae\u00b9",
                "+\t * @param data \u00e6\u0095\u00b0\u00e6\u008d\u00ae",
                "+\t */",
                "+\tpublic MessageResult(int status, String msg, Object data) {",
                "+\t\tthis.status = status;",
                "+\t\tthis.msg = msg;",
                "+\t\tthis.data = data;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * \u00e6\u009e\u0084\u00e9\u0080\u00a0\u00e6\u00b6\u0088\u00e6\u0081\u00af",
                "+\t * ",
                "+\t * @param status \u00e7\u008a\u00b6\u00e6\u0080\u0081\u00e4\u00bb\u00a3\u00e7\u00a0\u0081",
                "+\t * @param obj \u00e5\u00af\u00b9\u00e8\u00b1\u00a1",
                "+\t */",
                "+\tpublic MessageResult(int status, Object obj) {",
                "+\t\tthis.status = status;",
                "+\t\tthis.data = obj;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\tpublic int getStatus() {",
                "+\t\treturn status;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\tpublic void setStatus(int status) {",
                "+\t\tthis.status = status;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\tpublic String getMsg() {",
                "+\t\treturn msg;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\tpublic void setMsg(String msg) {",
                "+\t\tthis.msg = msg;",
                "+\t}",
                "+",
                "+",
                "+",
                "+\tpublic Object getData() {",
                "+\t\treturn data;",
                "+\t}",
                "+",
                "+\tpublic void setData(Object data) {",
                "+\t\tthis.data = data;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\treturn JSON.toJSONString(this);",
                "+\t}",
                "+",
                "+",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e6\u0088\u0090\u00e5\u008a\u009f",
                "+\t * @param user",
                "+\t * @return",
                "+\t */",
                "+\tpublic static MessageResult success(Object user) {",
                "+\t\treturn new MessageResult(true, \"\u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e6\u0088\u0090\u00e5\u008a\u009f\", user);",
                "+\t}",
                "+\t/**",
                "+\t * \u00e6\u0093\u008d\u00e4\u00bd\u009c\u00e6\u0088\u0090\u00e5\u008a\u009f",
                "+\t * @return",
                "+\t */",
                "+\tpublic static MessageResult success() {",
                "+\t\treturn new MessageResult(true, null);",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * \u00e9\u0094\u0099\u00e8\u00af\u00af\u00e6\u00b6\u0088\u00e6\u0081\u00af",
                "+\t * @param msg \u00e6\u00b6\u0088\u00e6\u0081\u00af\u00e5\u0086\u0085\u00e5\u00ae\u00b9",
                "+\t * @return",
                "+\t */",
                "+\tpublic static MessageResult error(String msg) {",
                "+\t\treturn new MessageResult(false, msg, null);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/marker/mushroom/ext/plugin/impl/GuestBookPluginletImpl.java b/src/main/java/org/marker/mushroom/ext/plugin/impl/GuestBookPluginletImpl.java",
                "index e3f8eb4..e08624b 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/plugin/impl/GuestBookPluginletImpl.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/plugin/impl/GuestBookPluginletImpl.java",
                "@@ -10,20 +10,15 @@ import com.alibaba.fastjson.JSON;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.marker.app.domain.MessageResult;",
                "+import org.marker.mushroom.alias.DAO;",
                " import org.marker.mushroom.beans.GuestBook;",
                " import org.marker.mushroom.beans.ResultMessage;",
                "-import org.marker.mushroom.core.SystemStatic;",
                " import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "-import org.marker.mushroom.core.config.impl.SystemConfig;",
                " import org.marker.mushroom.dao.ISupportDao;",
                "-import javax.servlet.http.HttpServletRequest;",
                "+import org.marker.mushroom.ext.plugin.Pluginlet;",
                " import org.marker.mushroom.holder.SpringContextHolder;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                " import java.io.IOException;",
                " import java.io.Writer;",
                "-import java.lang.Integer;",
                " import java.util.HashMap;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import org.marker.mushroom.ext.plugin.Pluginlet;",
                "-import org.marker.mushroom.alias.DAO;",
                "diff --git a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "index 2ee68b7..e694c90 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "@@ -2,18 +2,2 @@ package org.marker.mushroom.filter;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.io.PrintWriter;",
                "-import java.util.UUID;",
                "-import java.util.regex.Pattern;",
                "-",
                "-import javax.servlet.Filter;",
                "-import javax.servlet.FilterChain;",
                "-import javax.servlet.FilterConfig;",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.ServletRequest;",
                "-import javax.servlet.ServletResponse;",
                "-import javax.servlet.http.Cookie;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                " import org.marker.mushroom.alias.CacheO;",
                "@@ -21,2 +5,3 @@ import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.core.AppStatic;",
                "+import org.marker.mushroom.core.WebAPP;",
                " import org.marker.mushroom.core.config.impl.SystemConfig;",
                "@@ -25,2 +10,3 @@ import org.marker.mushroom.holder.SpringContextHolder;",
                " import org.marker.mushroom.holder.WebRealPathHolder;",
                "+import org.marker.mushroom.utils.ArrayUtils;",
                " import org.marker.mushroom.utils.DateUtils;",
                "@@ -33,2 +19,12 @@ import org.springframework.cache.ehcache.EhCacheCacheManager;",
                "+import javax.servlet.*;",
                "+import javax.servlet.http.Cookie;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.util.UUID;",
                "+import java.util.regex.Pattern;",
                "+",
                "@@ -63,2 +59,18 @@ public class SystemCoreFilter implements Filter {",
                "+\t/**",
                "+\t * \u00e4\u00b8\u008d\u00e9\u009c\u0080\u00e8\u00a6\u0081\u00e8\u00b5\u00b0MVC\u00e7\u009a\u0084\u00e5\u009c\u00b0\u00e5\u009d\u0080",
                "+\t */",
                "+\tprivate String[] jumpUrlPaths = new String[]{",
                "+        \"/public\", // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00af\u00e5\u0085\u00ac\u00e5\u0085\u00b1\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "+        \"/themes\", // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00af\u00e5\u0085\u00ac\u00e5\u0085\u00b1\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "+        \"/modules\",  // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00afmodel\u00e6\u00a0\u00b8\u00e5\u00bf\u0083\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "+        \"/plugin/\",  // \u00e6\u008f\u0092\u00e4\u00bb\u00b6\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+        \"/install/\",  // \u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+        \"/SecurityCode\",// \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u00a0\u0081\u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "+        \"/fetch\", // \u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "+        \"/druid\" // \u00e7\u009b\u0091\u00e6\u008e\u00a7",
                "+\t};",
                "+",
                "+",
                "+",
                "@@ -90,3 +102,3 @@ public class SystemCoreFilter implements Filter {",
                " \t\t */",
                "-\t\tif(uri.startsWith(\"/public\")){",
                "+\t\tif(ArrayUtils.containsStartWith(jumpUrlPaths, uri)){",
                " \t\t\tchain.doFilter(req, response);",
                "@@ -94,29 +106,3 @@ public class SystemCoreFilter implements Filter {",
                " \t\t}",
                "-\t\tif(uri.startsWith(\"/themes\")){",
                "-\t\t\tchain.doFilter(req, response);",
                "-\t\t\treturn; // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00af\u00e5\u0085\u00ac\u00e5\u0085\u00b1\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "-\t\t}",
                "-\t\tif(uri.startsWith(\"/modules\")){",
                "-\t\t\tchain.doFilter(req, response);",
                "-\t\t\treturn; // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00afmodel\u00e6\u00a0\u00b8\u00e5\u00bf\u0083\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "-\t\t}",
                "-\t\t// \u00e6\u008f\u0092\u00e4\u00bb\u00b6\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00ef\u00bc\u008c\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e6\u008f\u0092\u00e4\u00bb\u00b6\u00e8\u00bf\u0087\u00e6\u00bb\u00a4\u00e5\u0099\u00a8  // uri: /plugin/dsdsd.html",
                "-\t\turi = uri.replace(request.getContextPath(), \"\");// \u00e7\u00a7\u00bb\u00e9\u0099\u00a4\u00e9\u00a1\u00b9\u00e7\u009b\u00ae\u00e5\u0090\u008d\u00e7\u00a7\u00b0 ",
                "-\t\tif(uri.startsWith(\"/plugin/\")){",
                "-\t\t\tchain.doFilter(request, response);",
                "-\t\t\treturn;",
                "-\t\t}",
                "-\t\tif(uri.startsWith(\"/SecurityCode\")){ // \u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u00a0\u0081\u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "-\t\t\tchain.doFilter(req, response);",
                "-\t\t\treturn;",
                "-\t\t}",
                "-\t\tif(uri.startsWith(\"/fetch\")){ // \u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e6\u008e\u00a5\u00e5\u008f\u00a3",
                "-\t\t\tchain.doFilter(req, response);",
                "-\t\t\treturn;",
                "-\t\t}",
                "-\t\tif(uri.startsWith(\"/druid\")){",
                "-\t\t\tchain.doFilter(req, response);",
                "-\t\t\treturn; // \u00e7\u009b\u0091\u00e6\u008e\u00a7",
                "-\t\t}",
                "-\t\t",
                "+",
                "@@ -135,2 +121,16 @@ public class SystemCoreFilter implements Filter {",
                "+        /* ====================================================",
                "+\t\t *                 \u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e7\u00b3\u00bb\u00e7\u00bb\u009f\u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u00ae\u0089\u00e8\u00a3\u0085",
                "+\t\t * ====================================================",
                "+\t\t */",
                "+        if ( !WebAPP.install ) {",
                "+            try {",
                "+                logger.error(\"mrcms not install\");",
                "+                response.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "+                return; // \u00e5\u00a4\u0084\u00e7\u0090\u0086\u00e5\u00ae\u008c\u00e6\u00af\u0095\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e3\u0080\u0082",
                "+            } catch (IOException e) {",
                "+                logger.error(\"\",e);",
                "+            }",
                "+        }",
                "+",
                "@@ -194,2 +194,5 @@ public class SystemCoreFilter implements Filter {",
                " \t\tlogger.info(\"URL: {} => {}\", uri, url);",
                "+\t\tif(\"/\".equals(url)){ // \u00e4\u00bf\u00ae\u00e5\u00a4\u008djetty \u00e9\u00bb\u0098\u00e8\u00ae\u00a4\u00e9\u00a6\u0096\u00e9\u00a1\u00b5\u00e9\u0097\u00ae\u00e9\u00a2\u0098",
                "+\t\t\turl = \"cms\";",
                "+\t\t}",
                "diff --git a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "index 1cb06f7..cf24765 100644",
                "--- a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "+++ b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "@@ -2,8 +2,2 @@ package org.marker.mushroom.holder;",
                "-import java.io.File;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-",
                "-import javax.servlet.ServletContext;",
                "-",
                " import com.wuweibi.module4j.ModuleFramework;",
                "@@ -28,2 +22,7 @@ import org.springframework.web.context.ServletContextAware;",
                "+import javax.servlet.ServletContext;",
                "+import java.io.File;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "@@ -167,12 +166,14 @@ public class InitBuilderHolder implements ServletContextAware{",
                "     \tlogger.info(\"mrcms MessageContext init ...\");",
                "-        MessageDBContext messageDBContext = MessageDBContext.getInstance();",
                "-",
                "-\t\tif(!messageDBContext.isInit()){",
                "-\t\t\ttry {",
                "-\t\t\t\tmessageDBContext.init();",
                "-\t\t\t} catch (Exception e) {",
                "-\t\t\t\tlogger.error(\"\", e);",
                "+    \tif(WebAPP.install){",
                "+\t\t\tMessageDBContext messageDBContext = MessageDBContext.getInstance();",
                "+",
                "+\t\t\tif(!messageDBContext.isInit()){",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\tmessageDBContext.init();",
                "+\t\t\t\t} catch (Exception e) {",
                "+\t\t\t\t\tlogger.error(\"\", e);",
                "+\t\t\t\t}",
                " \t\t\t}",
                "-\t\t}",
                "+\t\t}",
                "@@ -181,2 +182,3 @@ public class InitBuilderHolder implements ServletContextAware{",
                "+        if(WebAPP.install){",
                "@@ -184,41 +186,42 @@ public class InitBuilderHolder implements ServletContextAware{",
                "+\t\t\tString moduleDir =  webRootPath + \"modules\";// \u00e6\u00a8\u00a1\u00e5\u009d\u0097\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "-\t\tString moduleDir =  webRootPath + \"modules\";// \u00e6\u00a8\u00a1\u00e5\u009d\u0097\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "+\t\t\t// \u00e7\u00bc\u0093\u00e5\u00ad\u0098\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "+\t\t\tString cacheDir = moduleDir + File.separator + \"cache\";// \u00e6\u00a8\u00a1\u00e5\u009d\u0097\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "-\t\t// \u00e7\u00bc\u0093\u00e5\u00ad\u0098\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "-\t\tString cacheDir = moduleDir + File.separator + \"cache\";// \u00e6\u00a8\u00a1\u00e5\u009d\u0097\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "+\t\t\tMap<String,String> configMap = new HashMap<String,String>();",
                "+\t\t\t// \u00e8\u0087\u00aa\u00e5\u008a\u00a8\u00e9\u0083\u00a8\u00e7\u00bd\u00b2\u00e7\u009b\u00ae\u00e5\u00bd\u0095\u00e9\u0085\u008d\u00e7\u00bd\u00ae",
                "+\t\t\tconfigMap.put(Configuration.AUTO_DEPLOY_DIR, moduleDir);",
                "+\t\t\t// \u00e7\u00bc\u0093\u00e5\u00ad\u0098\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "+\t\t\tconfigMap.put(Configuration.DIR_CACHE, cacheDir);",
                "+\t\t\t// \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e7\u00ba\u00a7\u00e5\u0088\u00ab",
                "+\t\t\tconfigMap.put(Configuration.LOG_LEVEL, \"1\");",
                "-\t\tMap<String,String> configMap = new HashMap<String,String>();",
                "-\t\t// \u00e8\u0087\u00aa\u00e5\u008a\u00a8\u00e9\u0083\u00a8\u00e7\u00bd\u00b2\u00e7\u009b\u00ae\u00e5\u00bd\u0095\u00e9\u0085\u008d\u00e7\u00bd\u00ae",
                "-\t\tconfigMap.put(Configuration.AUTO_DEPLOY_DIR, moduleDir);",
                "-\t\t// \u00e7\u00bc\u0093\u00e5\u00ad\u0098\u00e7\u009b\u00ae\u00e5\u00bd\u0095",
                "-\t\tconfigMap.put(Configuration.DIR_CACHE, cacheDir);",
                "-\t\t// \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e7\u00ba\u00a7\u00e5\u0088\u00ab",
                "-\t\tconfigMap.put(Configuration.LOG_LEVEL, \"1\");",
                "+\t\t\ttry {",
                "+\t\t\t\tModuleFramework moduleFramework = new ModuleFramework(configMap);",
                "+\t\t\t\tModuleContext context = moduleFramework.getModuleContext();",
                "+\t\t\t\tmoduleFramework.start();",
                "-\t\ttry {",
                "-\t\t\tModuleFramework moduleFramework = new ModuleFramework(configMap);",
                "-\t\t\tModuleContext context = moduleFramework.getModuleContext();",
                "-\t\t\tmoduleFramework.start();",
                "+\t\t\t\tcontext.addInstallListener(new InstallListenter(){",
                "-            context.addInstallListener(new InstallListenter(){",
                "+\t\t\t\t\t@Override",
                "+\t\t\t\t\tpublic void uninstall(Module module) {",
                "-                @Override",
                "-                public void uninstall(Module module) {",
                "+\t\t\t\t\t}",
                "-                }",
                "+\t\t\t\t\t@Override",
                "+\t\t\t\t\tpublic void install(Module module) {",
                "-                @Override",
                "-                public void install(Module module) {",
                "+\t\t\t\t\t}",
                "+\t\t\t\t});",
                "-                }",
                "-            });",
                "+\t\t\t\t// \u00e5\u0081\u009c\u00e6\u00ad\u00a2\u00e6\u009c\u008d\u00e5\u008a\u00a1",
                "+\t//\t\t\tmoduleFramework.stop();",
                "-\t\t\t// \u00e5\u0081\u009c\u00e6\u00ad\u00a2\u00e6\u009c\u008d\u00e5\u008a\u00a1",
                "-//\t\t\tmoduleFramework.stop();",
                "+\t\t\t} catch (Exception e) {",
                "+\t\t\t\tlogger.error(\"{}\", e.getMessage());",
                "+\t\t\t}",
                "-\t\t} catch (Exception e) {",
                "-\t\t    logger.error(\"{}\", e.getMessage());",
                "-\t\t}",
                "+        }",
                "diff --git a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "index 988f160..da8242e 100644",
                "--- a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "+++ b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "@@ -2,20 +2,6 @@ package org.marker.mushroom.template;",
                "-import java.io.File;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.IOException;",
                "-import java.util.ArrayList;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Locale;",
                "-import java.util.Map;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.swing.*;",
                "-",
                "-import freemarker.cache.TemplateLoader;",
                "+import freemarker.cache.StringTemplateLoader;",
                "+import freemarker.template.Configuration;",
                " import freemarker.template.TemplateModelException;",
                "-import love.cq.util.IOUtil;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.marker.app.utils.ConfigurationHelper;",
                " import org.marker.mushroom.alias.Core;",
                "@@ -26,6 +12,3 @@ import org.marker.mushroom.core.config.impl.SystemConfig;",
                " import org.marker.mushroom.core.exception.SystemException;",
                "-import org.marker.mushroom.ext.message.MessageContext;",
                "-import org.marker.mushroom.ext.plugin.freemarker.EmbedDirectiveInvokeTag;",
                " import org.marker.mushroom.ext.tag.TaglibContext;",
                "-import org.marker.mushroom.freemarker.*;",
                " import org.marker.mushroom.freemarker.config.WebFreeMarkerConfigurer;",
                "@@ -35,13 +18,11 @@ import org.marker.mushroom.template.tags.res.WebDataSource;",
                " import org.marker.mushroom.utils.FileTools;",
                "-import org.marker.mushroom.utils.FileUtils;",
                "-import org.marker.urlrewrite.freemarker.FrontURLRewriteMethodModel;",
                " import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Service;",
                "-import freemarker.cache.StringTemplateLoader;",
                "-import freemarker.template.Configuration;",
                "-import freemarker.template.TemplateExceptionHandler;",
                "-import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import java.io.File;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.util.*;",
                "diff --git a/src/main/java/org/marker/mushroom/utils/ArrayUtils.java b/src/main/java/org/marker/mushroom/utils/ArrayUtils.java",
                "new file mode 100644",
                "index 0000000..7a2e9f6",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/utils/ArrayUtils.java",
                "@@ -0,0 +1,35 @@",
                "+package org.marker.mushroom.utils;",
                "+",
                "+/**",
                "+ * Created by marker on 2018/8/11.",
                "+ */",
                "+",
                "+/**",
                "+ *",
                "+ * \u00e6\u0095\u00b0\u00e7\u00bb\u0084\u00e5\u00b7\u00a5\u00e5\u0085\u00b7\u00e7\u00b1\u00bb",
                "+ *",
                "+ *",
                "+ * @author marker",
                "+ * @create 2018-08-11 09:04",
                "+ **/",
                "+public class ArrayUtils {",
                "+",
                "+",
                "+    /**",
                "+     * \u00e5\u008c\u0085\u00e5\u0090\u00ab\u00e6\u0095\u00b0\u00e7\u00bb\u0084\u00e9\u0087\u008c\u00e7\u009a\u0084\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2\u00e5\u00bc\u0080\u00e5\u00a4\u00b4",
                "+     * @param jumpUrlPaths",
                "+     * @param uri",
                "+     * @return",
                "+     */",
                "+    public static boolean containsStartWith(String[] jumpUrlPaths, String uri) {",
                "+",
                "+        for (String tmp : jumpUrlPaths) {",
                "+            if (uri.startsWith(tmp)) {",
                "+                return true; // \u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e8\u00bf\u0099\u00e9\u0087\u008c\u00e6\u0098\u00af\u00e5\u0085\u00ac\u00e5\u0085\u00b1\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00ef\u00bc\u008c\u00e6\u0089\u0080\u00e4\u00bb\u00a5\u00e7\u009b\u00b4\u00e6\u008e\u00a5\u00e8\u00bf\u0094\u00e5\u009b\u009e\u00e4\u00ba\u0086",
                "+            }",
                "+        }",
                "+",
                "+",
                "+        return false;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "src/main/java/org/marker/app/business/TaoluBusiness.java",
                "src/main/java/org/marker/app/business/UserBusiness.java",
                "src/main/java/org/marker/app/business/impl/TaoluBusinessImpl.java",
                "src/main/java/org/marker/app/business/impl/UserBusinessImpl.java",
                "src/main/java/org/marker/app/common/ErrorCode.java",
                "src/main/java/org/marker/app/common/SessionAttr.java",
                "src/main/java/org/marker/app/controller/DataController.java",
                "src/main/java/org/marker/app/controller/FeedBackController.java",
                "src/main/java/org/marker/app/controller/LoginController.java",
                "src/main/java/org/marker/app/controller/TaoluViewController.java",
                "src/main/java/org/marker/app/dao/FeedBackDao.java",
                "src/main/java/org/marker/app/domain/FeedBack.java",
                "src/main/java/org/marker/app/interceptor/LoginInterceptor.java",
                "src/main/java/org/marker/app/service/TaoluService.java",
                "src/main/java/org/marker/app/service/UserService.java",
                "src/main/java/org/marker/app/service/impl/TaoluServiceImpl.java",
                "src/main/java/org/marker/app/service/impl/UserServiceImpl.java",
                "src/main/java/org/marker/app/session/SessionConfig.java",
                "src/main/java/org/marker/app/utils/ConfigurationHelper.java",
                "src/main/java/org/marker/app/utils/EnvUtils.java",
                "src/main/java/org/marker/mushroom/controller/AdminController.java",
                "src/main/java/org/marker/mushroom/controller/ArticleController.java",
                "src/main/java/org/marker/mushroom/controller/InstallController.java",
                "src/main/java/org/marker/mushroom/controller/ProjectController.java",
                "src/main/java/org/marker/mushroom/controller/ThematicController.java",
                "src/main/java/org/marker/mushroom/core/AppStatic.java",
                "src/main/java/org/marker/mushroom/core/DataSourceProxy.java",
                "src/main/java/org/marker/mushroom/core/WebAPP.java",
                "src/main/java/org/marker/mushroom/core/config/ConfigDBEngine.java",
                "src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "src/main/java/org/marker/mushroom/core/config/impl/DataBaseConfig.java",
                "src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "src/main/java/org/marker/mushroom/core/config/impl/URLRewriteConfig.java",
                "src/main/java/org/marker/mushroom/core/domain/MessageResult.java",
                "src/main/java/org/marker/mushroom/ext/plugin/impl/GuestBookPluginletImpl.java",
                "src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "src/main/java/org/marker/mushroom/utils/ArrayUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SQL, MRCMS",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: result",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b0cafe2ec8ab0df7cd56da1fe63c6fa47e806513",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1534342346,
            "hunks": 72,
            "message": "\u00e4\u00bc\u0098\u00e5\u008c\u0096\u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e4\u00bb\u00a3\u00e7\u00a0\u0081\u00e3\u0080\u0081\u00e4\u00bc\u0098\u00e5\u008c\u0096\u00e7\u00bb\u0093\u00e6\u009e\u0084",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/alias/LOG.java b/src/main/java/org/marker/mushroom/alias/LOG.java",
                "deleted file mode 100644",
                "index c12e7ea..0000000",
                "--- a/src/main/java/org/marker/mushroom/alias/LOG.java",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-package org.marker.mushroom.alias;",
                "-",
                "-",
                "-/**",
                "- * SLF4J \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e5\u0088\u00ab\u00e5\u0090\u008d",
                "- * ",
                "- * @author marker",
                "- * @version 1.0",
                "- */",
                "-public interface LOG {",
                "-",
                "-\t/** \u00e5\u0090\u008d\u00e7\u00a7\u00b0\u00e4\u00b8\u008e\u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e5\u00af\u00b9\u00e5\u00ba\u0094\u00ef\u00bc\u008c\u00e5\u009b\u00a0\u00e6\u00ad\u00a4\u00e4\u00b8\u008d\u00e8\u0083\u00bd\u00e4\u00bf\u00ae\u00e6\u0094\u00b9\u00e5\u0085\u00b6\u00e5\u0080\u00bc */",
                "-\tString DAOENGINE = \"daoEngine\";",
                "-\t",
                "-\t/** \u00e4\u00b8\u009a\u00e5\u008a\u00a1\u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e5\u0088\u00ab\u00e5\u0090\u008d */",
                "-\tString SERVICE_LAYER = \"serviceLayer\";",
                "-",
                "-\t/** Web\u00e5\u0089\u008d\u00e5\u008f\u00b0\u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e6\u008e\u00a5\u00e5\u008f\u00a3 */",
                "-\tString WEBFOREGROUND = \"foreground\";",
                "-\t",
                "-\t/** \u00e6\u00a8\u00a1\u00e6\u009d\u00bf\u00e5\u00bc\u0095\u00e6\u0093\u008e\u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e6\u008e\u00a5\u00e5\u008f\u00a3 */",
                "-\tString TEMPLATE_ENGINE = \"templatengine\";",
                "-}",
                "diff --git a/src/main/java/org/marker/mushroom/controller/AdminController.java b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "index e4b8ef2..2f31053 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "@@ -94,3 +94,3 @@ public class AdminController extends SupportController {",
                " \t\tview.addObject(\"menu\",menuDao.findMenuById(id));",
                "-\t\tHttpSession session = request.getSession();",
                "+\t\tHttpSession session = request.getSession(false);",
                " \t\tif(session != null){",
                "@@ -134,3 +134,3 @@ public class AdminController extends SupportController {",
                "-\t\tHttpSession session = request.getSession(false);",
                "+\t\tHttpSession session = request.getSession(true);",
                " \t\tif(session != null){",
                "diff --git a/src/main/java/org/marker/mushroom/controller/AuthController.java b/src/main/java/org/marker/mushroom/controller/AuthController.java",
                "index ad5fe1d..85bdb72 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/AuthController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/AuthController.java",
                "@@ -2,6 +2,4 @@ package org.marker.mushroom.controller;",
                "-import java.util.Date;",
                "-",
                "-import org.apache.commons.logging.Log;",
                "-import org.apache.commons.logging.LogFactory;",
                "+import com.alibaba.druid.support.logging.Log;",
                "+import com.alibaba.druid.support.logging.LogFactory;",
                " import org.marker.mushroom.dao.IUserDao;",
                "@@ -13,2 +11,4 @@ import org.springframework.web.servlet.ModelAndView;",
                "+import java.util.Date;",
                "+",
                "diff --git a/src/main/java/org/marker/mushroom/core/WebAPP.java b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "index 772ac65..478e5ca 100644",
                "--- a/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "+++ b/src/main/java/org/marker/mushroom/core/WebAPP.java",
                "@@ -3,3 +3,2 @@ package org.marker.mushroom.core;",
                " import org.marker.mushroom.alias.Core;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.alias.Services;",
                "@@ -42,3 +41,3 @@ public final class WebAPP {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.TEMPLATE_ENGINE); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(WebAPP.class);",
                "@@ -125,3 +124,3 @@ public final class WebAPP {",
                " \t\t\ttry {",
                "-\t\t\t\tlogger.error(\"mrcms not install\");",
                "+\t\t\t\tlogger.warn(\"mrcms not install\");",
                " \t\t\t\tresponse.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "@@ -203,5 +202,7 @@ public final class WebAPP {",
                "-\t\t}catch(SystemException syse){ logger.error(\"\", syse);",
                "+\t\t}catch(SystemException syse){",
                "+\t\t\tlogger.error(\"\", syse);",
                " \t\t\thandleErrorMessage(syse); ",
                "-\t\t}catch (FileNotFoundException e) { logger.error(\"\", e);",
                "+\t\t}catch (FileNotFoundException e) {",
                "+\t\t\tlogger.error(\"\", e);",
                " \t\t\thandleErrorMessage(new SystemException(e.getMessage() + \" \u00e6\u00a8\u00a1\u00e6\u009d\u00bf\u00e6\u009c\u00aa\u00e6\u0089\u00be\u00e5\u0088\u00b0\"));",
                "diff --git a/src/main/java/org/marker/mushroom/core/component/ChipContext.java b/src/main/java/org/marker/mushroom/core/component/ChipContext.java",
                "index 9e636cb..3724c44 100644",
                "--- a/src/main/java/org/marker/mushroom/core/component/ChipContext.java",
                "+++ b/src/main/java/org/marker/mushroom/core/component/ChipContext.java",
                "@@ -2,8 +2,4 @@ package org.marker.mushroom.core.component;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import org.apache.commons.logging.Log;",
                "-import org.apache.commons.logging.LogFactory;",
                "+import com.alibaba.druid.support.logging.Log;",
                "+import com.alibaba.druid.support.logging.LogFactory;",
                " import org.marker.mushroom.core.IChip;",
                "@@ -15,2 +11,6 @@ import org.springframework.stereotype.Service;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                " /**",
                "diff --git a/src/main/java/org/marker/mushroom/dao/DaoEngine.java b/src/main/java/org/marker/mushroom/dao/DaoEngine.java",
                "index d01bf68..ba63420 100644",
                "--- a/src/main/java/org/marker/mushroom/dao/DaoEngine.java",
                "+++ b/src/main/java/org/marker/mushroom/dao/DaoEngine.java",
                "@@ -2,24 +2,5 @@ package org.marker.mushroom.dao;",
                "-import java.io.Serializable;",
                "-import java.lang.reflect.Field;",
                "-import java.lang.reflect.InvocationTargetException;",
                "-import java.lang.reflect.Method;",
                "-import java.sql.Connection;",
                "-import java.sql.PreparedStatement;",
                "-import java.sql.SQLException;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import com.alibaba.fastjson.JSON;",
                "-import org.apache.commons.lang.StringUtils;",
                "-import org.marker.mushroom.alias.LOG;",
                "-import org.marker.mushroom.beans.Channel;",
                " import org.marker.mushroom.beans.Page;",
                "-import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                " import org.marker.mushroom.dao.annotation.Entity;",
                " import org.marker.mushroom.dao.annotation.EntityFieldIgnore;",
                "-import org.marker.mushroom.dao.mapper.ObjectRowMapper;",
                "-import org.marker.mushroom.utils.SQLUtil;",
                " import org.slf4j.Logger;",
                "@@ -35,2 +16,14 @@ import org.springframework.jdbc.support.KeyHolder;",
                "+import java.io.Serializable;",
                "+import java.lang.reflect.Field;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.sql.Connection;",
                "+import java.sql.PreparedStatement;",
                "+import java.sql.SQLException;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "@@ -51,3 +44,3 @@ public abstract class DaoEngine implements ISupportDao {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.DAOENGINE);",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(DaoEngine.class);",
                "diff --git a/src/main/java/org/marker/mushroom/ext/plugin/Pluginlet.java b/src/main/java/org/marker/mushroom/ext/plugin/Pluginlet.java",
                "index 7efd12a..a82f9f7 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/plugin/Pluginlet.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/plugin/Pluginlet.java",
                "@@ -2,3 +2,6 @@ package org.marker.mushroom.ext.plugin;",
                "-import java.util.Map;",
                "+import org.marker.mushroom.alias.DAO;",
                "+import org.marker.mushroom.context.ActionContext;",
                "+import org.marker.mushroom.dao.ISupportDao;",
                "+import org.marker.mushroom.holder.SpringContextHolder;",
                "@@ -8,7 +11,3 @@ import javax.servlet.http.HttpServletResponse;",
                " import javax.servlet.http.HttpSession;",
                "-",
                "-import org.marker.mushroom.alias.DAO;",
                "-import org.marker.mushroom.context.ActionContext;",
                "-import org.marker.mushroom.dao.ISupportDao;",
                "-import org.marker.mushroom.holder.SpringContextHolder;",
                "+import java.util.Map;",
                "@@ -69,3 +68,3 @@ public abstract class Pluginlet {",
                " \tpublic HttpSession getSession(){",
                "-\t\treturn ActionContext.getReq().getSession();",
                "+\t\treturn ActionContext.getReq().getSession(false);",
                " \t}",
                "@@ -75,7 +74,7 @@ public abstract class Pluginlet {",
                " \t * \u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e5\u00bd\u0093\u00e5\u0089\u008d\u00e4\u00bc\u009a\u00e8\u00af\u009d(Session)\u00e5\u00af\u00b9\u00e8\u00b1\u00a1",
                "-\t * @param boolean \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u0088\u009b\u00e5\u00bb\u00ba\u00e6\u0096\u00b0\u00e7\u009a\u0084Session",
                "+\t * @param created \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u0088\u009b\u00e5\u00bb\u00ba\u00e6\u0096\u00b0\u00e7\u009a\u0084Session",
                " \t * @return",
                " \t */",
                "-\tpublic HttpSession getSession(boolean is){",
                "-\t\treturn ActionContext.getReq().getSession(is);",
                "+\tpublic HttpSession getSession(boolean created){",
                "+\t\treturn ActionContext.getReq().getSession(created);",
                " \t}",
                "diff --git a/src/main/java/org/marker/mushroom/filter/MarkDownFilter.java b/src/main/java/org/marker/mushroom/filter/MarkDownFilter.java",
                "index 880470f..1d4555c 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/MarkDownFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/MarkDownFilter.java",
                "@@ -2,17 +2,3 @@ package org.marker.mushroom.filter;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-",
                "-import javax.servlet.Filter;",
                "-import javax.servlet.FilterChain;",
                "-import javax.servlet.FilterConfig;",
                "-import javax.servlet.ServletContext;",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.ServletRequest;",
                "-import javax.servlet.ServletResponse;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                " import io.github.gitbucket.markedj.Marked;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.context.ActionContext;",
                "@@ -23,2 +9,8 @@ import org.slf4j.LoggerFactory;",
                "+import javax.servlet.*;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+",
                " /**",
                "@@ -30,3 +22,3 @@ public class MarkDownFilter implements Filter {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(MarkDownFilter.class);",
                "diff --git a/src/main/java/org/marker/mushroom/filter/PluginFilter.java b/src/main/java/org/marker/mushroom/filter/PluginFilter.java",
                "index 8c63a05..5ec1e20 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/PluginFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/PluginFilter.java",
                "@@ -2,14 +2,2 @@ package org.marker.mushroom.filter;",
                "-import java.io.IOException;",
                "-",
                "-import javax.servlet.Filter;",
                "-import javax.servlet.FilterChain;",
                "-import javax.servlet.FilterConfig;",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.ServletRequest;",
                "-import javax.servlet.ServletResponse;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.context.ActionContext;",
                "@@ -19,2 +7,7 @@ import org.slf4j.LoggerFactory;",
                "+import javax.servlet.*;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import java.io.IOException;",
                "+",
                " /**",
                "@@ -29,3 +22,3 @@ public class PluginFilter implements Filter {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(PluginFilter.class);",
                "diff --git a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "index e694c90..ed4336a 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "@@ -3,3 +3,2 @@ package org.marker.mushroom.filter;",
                " import org.marker.mushroom.alias.CacheO;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.core.AppStatic;",
                "@@ -44,3 +43,3 @@ public class SystemCoreFilter implements Filter {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(SystemCoreFilter.class);",
                "@@ -127,3 +126,3 @@ public class SystemCoreFilter implements Filter {",
                "             try {",
                "-                logger.error(\"mrcms not install\");",
                "+                logger.warn(\"mrcms not install\");",
                "                 response.sendRedirect(\"install/index.do\");// \u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e5\u0088\u0099\u00e8\u00bf\u009b\u00e5\u0085\u00a5\u00e5\u00ae\u0089\u00e8\u00a3\u0085\u00e9\u00a1\u00b5\u00e9\u009d\u00a2",
                "@@ -212,12 +211,4 @@ public class SystemCoreFilter implements Filter {",
                " \t\t */",
                "-",
                "-\t\t// SpringContextHolder.getBean(\"systemConfig\");",
                "-\t\tlogger.info(\"build systemConfig instance = {}\", syscfg);",
                " \t\treq.setAttribute(AppStatic.WEB_APP_CONFIG, syscfg.getProperties());",
                "-",
                "-",
                "-",
                "-",
                "-",
                " \t\treq.getRequestDispatcher(url).forward(request, response);// \u00e8\u00af\u00b7\u00e6\u00b1\u0082\u00e8\u00bd\u00ac\u00e5\u008f\u0091",
                "diff --git a/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java b/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "index 9f7bace..5f1d8dd 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "@@ -2,3 +2,2 @@ package org.marker.mushroom.filter;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.core.config.impl.SystemConfig;",
                "@@ -34,3 +33,3 @@ public class ThemesResourceFilter implements Filter {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(ThemesResourceFilter.class);",
                "@@ -45,3 +44,3 @@ public class ThemesResourceFilter implements Filter {",
                " \t    HttpServletRequest request = (HttpServletRequest)req;",
                "-        ServletContext servletContext = request.getSession().getServletContext();",
                "+        ServletContext servletContext = request.getServletContext();",
                "diff --git a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "index cf24765..8df8c04 100644",
                "--- a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "+++ b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "@@ -7,3 +7,2 @@ import com.wuweibi.module4j.module.Module;",
                " import com.wuweibi.module4j.module.ModuleContext;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.context.ActionContext;",
                "@@ -38,3 +37,3 @@ public class InitBuilderHolder implements ServletContextAware{",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(InitBuilderHolder.class);",
                "diff --git a/src/main/java/org/marker/mushroom/interceptor/LoginInterceptor.java b/src/main/java/org/marker/mushroom/interceptor/LoginInterceptor.java",
                "index 89577ef..64beb14 100644",
                "--- a/src/main/java/org/marker/mushroom/interceptor/LoginInterceptor.java",
                "+++ b/src/main/java/org/marker/mushroom/interceptor/LoginInterceptor.java",
                "@@ -28,3 +28,3 @@ public class LoginInterceptor implements HandlerInterceptor  {",
                " \t\t\tHttpServletResponse response, Object handler) throws Exception {",
                "-\t\tHttpSession session = request.getSession();",
                "+\t\tHttpSession session = request.getSession(false);",
                " \t\tString username = (String)session.getAttribute(AppStatic.WEB_APP_SESSSION_LOGINNAME);",
                "diff --git a/src/main/java/org/marker/mushroom/interceptor/RequestParamsInterceptor.java b/src/main/java/org/marker/mushroom/interceptor/RequestParamsInterceptor.java",
                "index acce1a3..05c5fca 100644",
                "--- a/src/main/java/org/marker/mushroom/interceptor/RequestParamsInterceptor.java",
                "+++ b/src/main/java/org/marker/mushroom/interceptor/RequestParamsInterceptor.java",
                "@@ -22,3 +22,4 @@ import java.io.IOException;",
                "  * */",
                "-public class RequestParamsInterceptor implements HandlerInterceptor {",
                "+public class",
                "+RequestParamsInterceptor implements HandlerInterceptor {",
                "     private Logger logger = LoggerFactory.getLogger(RequestParamsInterceptor.class);",
                "diff --git a/src/main/java/org/marker/mushroom/listener/SessionCounter.java b/src/main/java/org/marker/mushroom/listener/SessionCounter.java",
                "index 97f180e..58f605c 100644",
                "--- a/src/main/java/org/marker/mushroom/listener/SessionCounter.java",
                "+++ b/src/main/java/org/marker/mushroom/listener/SessionCounter.java",
                "@@ -2,2 +2,5 @@ package org.marker.mushroom.listener;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                " import javax.servlet.ServletContext;",
                "@@ -6,4 +9,2 @@ import javax.servlet.http.HttpSessionListener;",
                "-import org.apache.commons.logging.Log;",
                "-import org.apache.commons.logging.LogFactory;",
                "@@ -11,8 +12,14 @@ import org.apache.commons.logging.LogFactory;",
                " /**",
                "+ *",
                "+ *",
                "  * \u00e7\u00bb\u009f\u00e8\u00ae\u00a1\u00e5\u009c\u00a8\u00e7\u00ba\u00bf\u00e4\u00ba\u00ba\u00e6\u0095\u00b0",
                "+ *",
                "+ *",
                "  * @author marker",
                "  * */",
                "-public class SessionCounter implements HttpSessionListener { ",
                "-    ",
                "-\tprivate final Log log = LogFactory.getLog(SessionCounter.class);",
                "+public class SessionCounter implements HttpSessionListener {",
                "+    /**",
                "+     * \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095",
                "+     */",
                "+\tprivate final Logger log = LoggerFactory.getLogger(SessionCounter.class);",
                "@@ -25,3 +32,3 @@ public class SessionCounter implements HttpSessionListener {",
                " \tpublic void sessionCreated(HttpSessionEvent event) { ",
                "-        ServletContext ctx = event.getSession().getServletContext( ); ",
                "+        ServletContext ctx = event.getSession().getServletContext();",
                "         Integer numSessions = (Integer) ctx.getAttribute(SESSION_COUNT); ",
                "@@ -42,3 +49,3 @@ public class SessionCounter implements HttpSessionListener {",
                " \tpublic void sessionDestroyed(HttpSessionEvent event) { ",
                "-        ServletContext ctx = event.getSession( ).getServletContext( ); ",
                "+        ServletContext ctx = event.getSession().getServletContext( );",
                "         Integer numSessions = (Integer) ctx.getAttribute(SESSION_COUNT); ",
                "@@ -57,3 +64,2 @@ public class SessionCounter implements HttpSessionListener {",
                "-    ",
                " } ",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/org/marker/mushroom/service/BaseService.java b/src/main/java/org/marker/mushroom/service/BaseService.java",
                "index ab51095..6cb90e5 100644",
                "--- a/src/main/java/org/marker/mushroom/service/BaseService.java",
                "+++ b/src/main/java/org/marker/mushroom/service/BaseService.java",
                "@@ -2,3 +2,2 @@ package org.marker.mushroom.service;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "@@ -21,3 +20,3 @@ public class BaseService {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.SERVICE_LAYER);",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(BaseService.class);",
                "diff --git a/src/main/java/org/marker/mushroom/service/impl/CategoryService.java b/src/main/java/org/marker/mushroom/service/impl/CategoryService.java",
                "index ef95a34..018007f 100644",
                "--- a/src/main/java/org/marker/mushroom/service/impl/CategoryService.java",
                "+++ b/src/main/java/org/marker/mushroom/service/impl/CategoryService.java",
                "@@ -2,7 +2,2 @@ package org.marker.mushroom.service.impl;",
                "-import java.io.Serializable;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree;",
                " import org.marker.mushroom.alias.Core;",
                "@@ -10,5 +5,3 @@ import org.marker.mushroom.alias.Services;",
                " import org.marker.mushroom.beans.Category;",
                "-import org.marker.mushroom.beans.Channel;",
                " import org.marker.mushroom.core.channel.CategoryItem;",
                "-import org.marker.mushroom.core.channel.ChannelItem;",
                " import org.marker.mushroom.core.channel.TreeUtils;",
                "@@ -20,2 +13,6 @@ import org.springframework.stereotype.Service;",
                "+import java.io.Serializable;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "diff --git a/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java b/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "index 199a9c5..09260b3 100644",
                "--- a/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "+++ b/src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "@@ -2,3 +2,6 @@ package org.marker.mushroom.servlet;",
                "-import java.io.IOException;",
                "+import org.marker.mushroom.context.ActionContext;",
                "+import org.marker.mushroom.core.WebAPP;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -8,8 +11,3 @@ import javax.servlet.http.HttpServletRequest;",
                " import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.marker.mushroom.alias.LOG;",
                "-import org.marker.mushroom.context.ActionContext;",
                "-import org.marker.mushroom.core.WebAPP;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "+import java.io.IOException;",
                "@@ -34,3 +32,3 @@ public class DispatcherServlet extends HttpServlet {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u0099\u00a8 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.WEBFOREGROUND); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(DispatcherServlet.class);",
                "diff --git a/src/main/java/org/marker/mushroom/servlet/FetchServlet.java b/src/main/java/org/marker/mushroom/servlet/FetchServlet.java",
                "index b1c9af1..1c52fda 100644",
                "--- a/src/main/java/org/marker/mushroom/servlet/FetchServlet.java",
                "+++ b/src/main/java/org/marker/mushroom/servlet/FetchServlet.java",
                "@@ -6,13 +6,2 @@ package org.marker.mushroom.servlet;",
                "-import java.io.IOException;",
                "-import java.util.ArrayList;",
                "-import java.util.Collections;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.http.HttpServlet;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                " import org.marker.mushroom.alias.DAO;",
                "@@ -25,2 +14,12 @@ import org.slf4j.LoggerFactory;",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServlet;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+",
                " /**",
                "@@ -102,3 +101,3 @@ public class FetchServlet  extends HttpServlet{",
                " \t\t\t}",
                "-\t\t}else{// \u00e7\u00a6\u00bb\u00e5\u00bc\u0080",
                "+\t\t} else {// \u00e7\u00a6\u00bb\u00e5\u00bc\u0080",
                " \t\t\tlogger.debug(\"\u00e7\u0094\u00a8\u00e6\u0088\u00b7\u00e5\u00b7\u00b2\u00e7\u00bb\u008f\u00e7\u00a6\u00bb\u00e5\u00bc\u0080!\");",
                "diff --git a/src/main/java/org/marker/mushroom/servlet/SecurityCodeServlet.java b/src/main/java/org/marker/mushroom/servlet/SecurityCodeServlet.java",
                "index 0fcf654..ed33708 100644",
                "--- a/src/main/java/org/marker/mushroom/servlet/SecurityCodeServlet.java",
                "+++ b/src/main/java/org/marker/mushroom/servlet/SecurityCodeServlet.java",
                "@@ -2,8 +2,3 @@ package org.marker.mushroom.servlet;",
                "-import java.awt.Color;",
                "-import java.awt.Font;",
                "-import java.awt.Graphics2D;",
                "-import java.awt.image.BufferedImage;",
                "-import java.io.IOException;",
                "-import java.util.Random;",
                "+import org.marker.mushroom.core.AppStatic;",
                "@@ -16,4 +11,6 @@ import javax.servlet.http.HttpServletResponse;",
                " import javax.servlet.http.HttpSession;",
                "-",
                "-import org.marker.mushroom.core.AppStatic;",
                "+import java.awt.*;",
                "+import java.awt.image.BufferedImage;",
                "+import java.io.IOException;",
                "+import java.util.Random;",
                "@@ -105,3 +102,3 @@ public class SecurityCodeServlet extends HttpServlet {",
                "         // \u00e5\u00b0\u0086\u00e5\u009b\u009b\u00e4\u00bd\u008d\u00e6\u0095\u00b0\u00e5\u00ad\u0097\u00e7\u009a\u0084\u00e9\u00aa\u008c\u00e8\u00af\u0081\u00e7\u00a0\u0081\u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e5\u0088\u00b0Session\u00e4\u00b8\u00ad\u00e3\u0080\u0082   ",
                "-        HttpSession session = request.getSession();   ",
                "+        HttpSession session = request.getSession(false);",
                "         session.setAttribute(AppStatic.WEB_APP_AUTH_CODE, randomCode.toString().toLowerCase());   ",
                "diff --git a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "index da8242e..3691955 100644",
                "--- a/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "+++ b/src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "@@ -7,3 +7,2 @@ import org.apache.commons.lang.StringUtils;",
                " import org.marker.mushroom.alias.Core;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.context.ActionContext;",
                "@@ -39,3 +38,3 @@ public class MyCMSTemplate {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u00af\u00b9\u00e8\u00b1\u00a1 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.TEMPLATE_ENGINE); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(MyCMSTemplate.class);",
                "diff --git a/src/main/java/org/marker/mushroom/template/SendDataToView.java b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "index b2ec413..da909af 100644",
                "--- a/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "+++ b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "@@ -6,2 +6,3 @@ import freemarker.template.Template;",
                " import freemarker.template.TemplateExceptionHandler;",
                "+import org.apache.commons.io.IOUtils;",
                " import org.marker.develop.freemarker.MessageWrapperModel;",
                "@@ -11,3 +12,2 @@ import org.marker.mushroom.alias.CacheO;",
                " import org.marker.mushroom.alias.DAO;",
                "-import org.marker.mushroom.alias.LOG;",
                " import org.marker.mushroom.beans.Page;",
                "@@ -44,3 +44,3 @@ public class SendDataToView {",
                " \t/** \u00e6\u0097\u00a5\u00e5\u00bf\u0097\u00e8\u00ae\u00b0\u00e5\u00bd\u0095\u00e5\u00af\u00b9\u00e8\u00b1\u00a1 */ ",
                "-\tprotected Logger logger =  LoggerFactory.getLogger(LOG.TEMPLATE_ENGINE); ",
                "+\tprotected Logger logger =  LoggerFactory.getLogger(SendDataToView.class);",
                "@@ -137,6 +137,6 @@ public class SendDataToView {",
                " \t\t\t\t\twriter = new OutputStreamWriter(os,\"utf-8\"); ",
                "-\t\t\t\t}else{",
                "+\t\t\t\t} else {",
                " \t\t\t\t\twriter = response.getWriter();",
                " \t\t\t\t}",
                "-\t\t\t}else{",
                "+\t\t\t} else {",
                " \t\t\t\twriter = response.getWriter();",
                "@@ -144,61 +144,51 @@ public class SendDataToView {",
                " \t\t\ttemplate.process(root, writer);",
                "-\t\t\t",
                "-\t\t\t",
                "-\t\t\t",
                "-\t\t\t// \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u0090\u00af\u00e7\u0094\u00a8\u00e7\u00bc\u0093\u00e5\u00ad\u0098",
                "-\t\t\tif(syscfg.isStaticPage()){",
                "-\t\t\t\tEhCacheCacheManager cm =  SpringContextHolder.getBean(CacheO.CacheManager);",
                "-\t\t\t\t ",
                "-\t\t\t\torg.springframework.cache.Cache cache = cm.getCache(CacheO.STATIC_HTML);",
                "-\t\t\t\t",
                "-\t\t\t\tString path =  \"data\" + File.separator+\"cache\" + File.separator +",
                "-\t\t\t\t\t\tlang +File.separator + request.getAttribute(\"rewriterUrl\");",
                "-\t\t\t\t ",
                "-\t\t\t\t",
                "-\t\t\t\t",
                "-\t\t\t\tFile file = new File(WebRealPathHolder.REAL_PATH + path);",
                "-\t\t\t\tif(!file.getParentFile().exists()){",
                "-\t\t\t\t\tfile.getParentFile().mkdirs();",
                "-\t\t\t\t}",
                "-\t\t\t\tOutputStream fw = new FileOutputStream(file);",
                "-\t\t\t\t",
                "-\t\t\t\tOutputStreamWriter osw = new OutputStreamWriter(fw, \"utf-8\");",
                "-\t\t\t\t",
                "-\t\t\t\ttemplate.process(root, osw); ",
                "-\t\t\t\tosw.flush();",
                "-\t\t\t\tosw.close();fw.close();",
                "-\t\t\t\t",
                "-\t\t\t\t// lang+\"_\"+uri",
                "-\t\t\t\t",
                "-\t\t\t\tString key = lang + \"_\" + request.getAttribute(\"rewriterUrl\");",
                "-\t\t\t\t",
                "-\t\t\t\t ",
                "-\t\t\t\tcache.put(key, path);",
                "+            writer.flush();",
                "+        } catch (Exception e) {",
                "+            logger.error(\"\", e);",
                "+            new SystemException(\"\u00e5\u008f\u0091\u00e9\u0080\u0081\u00e5\u00af\u00b9\u00e8\u00b1\u00a1\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\");",
                "+        } finally {",
                "+            IOUtils.closeQuietly(writer);",
                "+        }",
                "-\t\t\t}",
                "-\t\t\t\t\t\t",
                "-\t\t\t",
                "-\t\t} catch (Exception e) {",
                "-\t\t\tlogger.error(\"\", e);",
                "-\t\t\tnew SystemException(\"\u00e5\u008f\u0091\u00e9\u0080\u0081\u00e5\u00af\u00b9\u00e8\u00b1\u00a1\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\");",
                "-\t\t}finally{",
                "-\t\t\tif(null != writer){",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\twriter.close();",
                "-\t\t\t\t} catch (IOException e) {",
                "-\t\t\t\t\tlogger.error(\"response error writer content!\", e);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t} ",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "-\t\t",
                "+        // \u00e6\u0098\u00af\u00e5\u0090\u00a6\u00e5\u0090\u00af\u00e7\u0094\u00a8\u00e7\u00bc\u0093\u00e5\u00ad\u0098",
                "+        if(syscfg.isStaticPage()){",
                "+            EhCacheCacheManager cm =  SpringContextHolder.getBean(CacheO.CacheManager);",
                "+",
                "+            org.springframework.cache.Cache cache = cm.getCache(CacheO.STATIC_HTML);",
                "+",
                "+            String path =  \"data\" + File.separator+\"cache\" + File.separator +",
                "+                    lang + File.separator + request.getAttribute(\"rewriterUrl\");",
                "+",
                "+",
                "+",
                "+            File file = new File(WebRealPathHolder.REAL_PATH + path);",
                "+            if(!file.getParentFile().exists()){",
                "+                file.getParentFile().mkdirs();",
                "+            }",
                "+            OutputStreamWriter osw = null;",
                "+            OutputStream fw = null;",
                "+            try {",
                "+                fw = new FileOutputStream(file);",
                "+",
                "+                osw = new OutputStreamWriter(fw, \"utf-8\");",
                "+",
                "+                template.process(root, osw);",
                "+                osw.flush();",
                "+",
                "+            } catch (Exception e){",
                "+                logger.error(\"\", e);",
                "+",
                "+            } finally {",
                "+                IOUtils.closeQuietly(osw);",
                "+                IOUtils.closeQuietly(fw);",
                "+            }",
                "+",
                "+            // lang+\"_\"+uri",
                "+",
                "+            String key = lang + \"_\" + request.getAttribute(\"rewriterUrl\");",
                "+",
                "+",
                "+            cache.put(key, path);",
                "+",
                "+        }",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/alias/LOG.java",
                "src/main/java/org/marker/mushroom/controller/AdminController.java",
                "src/main/java/org/marker/mushroom/controller/AuthController.java",
                "src/main/java/org/marker/mushroom/core/WebAPP.java",
                "src/main/java/org/marker/mushroom/core/component/ChipContext.java",
                "src/main/java/org/marker/mushroom/dao/DaoEngine.java",
                "src/main/java/org/marker/mushroom/ext/plugin/Pluginlet.java",
                "src/main/java/org/marker/mushroom/filter/MarkDownFilter.java",
                "src/main/java/org/marker/mushroom/filter/PluginFilter.java",
                "src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "src/main/java/org/marker/mushroom/filter/ThemesResourceFilter.java",
                "src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "src/main/java/org/marker/mushroom/interceptor/LoginInterceptor.java",
                "src/main/java/org/marker/mushroom/interceptor/RequestParamsInterceptor.java",
                "src/main/java/org/marker/mushroom/listener/SessionCounter.java",
                "src/main/java/org/marker/mushroom/service/BaseService.java",
                "src/main/java/org/marker/mushroom/service/impl/CategoryService.java",
                "src/main/java/org/marker/mushroom/servlet/DispatcherServlet.java",
                "src/main/java/org/marker/mushroom/servlet/FetchServlet.java",
                "src/main/java/org/marker/mushroom/servlet/SecurityCodeServlet.java",
                "src/main/java/org/marker/mushroom/template/MyCMSTemplate.java",
                "src/main/java/org/marker/mushroom/template/SendDataToView.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SQL",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9c2427efa72c0090693de1f1c988bea85d70a71e",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1543120145,
            "hunks": 6,
            "message": "jenkinsfile\u00e4\u00bc\u0098\u00e5\u008c\u0096",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java b/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "index b15d2fa..66acbb1 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "@@ -41,2 +41,8 @@ public abstract class ConfigEngine implements IConfig {",
                " \tprotected File cfgFile;",
                "+",
                "+",
                "+\t/**",
                "+\t * Spring Profile \u00e7\u008e\u00af\u00e5\u00a2\u0083\u00e6\u008e\u00a7\u00e5\u0088\u00b6",
                "+\t */",
                "+\tprotected String profile;",
                "@@ -158,3 +164,10 @@ public abstract class ConfigEngine implements IConfig {",
                " \t}",
                "- ",
                "+",
                "+    public String getProfile() {",
                "+        return profile;",
                "+    }",
                "+",
                "+    public void setProfile(String profile) {",
                "+        this.profile = profile;",
                "+    }",
                " }",
                "diff --git a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "index f081257..76d23aa 100644",
                "--- a/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "@@ -18,2 +18,4 @@ public final class SystemConfig extends ConfigEngine {",
                "+",
                "+",
                "@@ -65,4 +67,4 @@ public final class SystemConfig extends ConfigEngine {",
                " \t */",
                "-\tpublic SystemConfig() {",
                "-\t\tsuper(\"WEB-INF/conf/site.properties\");",
                "+\tpublic SystemConfig(String profile) {",
                "+\t\tsuper(\"WEB-INF/conf/\" + profile + \"/site.properties\");",
                " \t}",
                "diff --git a/src/main/java/org/marker/mushroom/spring/ProfileConfig.java b/src/main/java/org/marker/mushroom/spring/ProfileConfig.java",
                "index 5832fe5..179a278 100644",
                "--- a/src/main/java/org/marker/mushroom/spring/ProfileConfig.java",
                "+++ b/src/main/java/org/marker/mushroom/spring/ProfileConfig.java",
                "@@ -18,2 +18,7 @@ public class ProfileConfig implements Serializable{",
                "+    /**",
                "+     * Spring Profile \u00e9\u00bb\u0098\u00e8\u00ae\u00a4dev",
                "+     */",
                "+    private String profile = \"dev\";",
                "+",
                "     /**",
                "@@ -31,2 +36,10 @@ public class ProfileConfig implements Serializable{",
                "     }",
                "+",
                "+    public String getProfile() {",
                "+        return profile;",
                "+    }",
                "+",
                "+    public void setProfile(String profile) {",
                "+        this.profile = profile;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/core/config/ConfigEngine.java",
                "src/main/java/org/marker/mushroom/core/config/impl/SystemConfig.java",
                "src/main/java/org/marker/mushroom/spring/ProfileConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a75962ce0c8e090b4e2f82be8e5a4e5910728cb7"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "86e484acbe29336eded6d6481c06cd9f2147e748",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1537852774,
            "hunks": 15,
            "message": "\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e7\u00ae\u00a1\u00e7\u0090\u0086\u00e6\u0096\u00b0\u00e5\u00a2\u009e\u00e5\u00ad\u0098\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00e6\u00a3\u0080\u00e6\u009f\u00a5",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/controller/FileController.java b/src/main/java/org/marker/mushroom/controller/FileController.java",
                "index 8e947b6..244ade1 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/FileController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/FileController.java",
                "@@ -2,9 +2,2 @@ package org.marker.mushroom.controller;",
                "-import java.io.File;",
                "-import java.io.FileOutputStream;",
                "-import java.io.IOException;",
                "-import java.io.UnsupportedEncodingException;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-",
                " import org.marker.mushroom.beans.FileObject;",
                "@@ -12,4 +5,6 @@ import org.marker.mushroom.beans.ResultMessage;",
                " import org.marker.mushroom.holder.WebRealPathHolder;",
                "+import org.marker.mushroom.manager.FileManager;",
                " import org.marker.mushroom.support.SupportController;",
                " import org.marker.mushroom.utils.FileTools;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Controller;",
                "@@ -21,2 +16,10 @@ import org.springframework.web.servlet.ModelAndView;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+",
                "@@ -31,3 +34,6 @@ public class FileController extends SupportController {",
                "-\t",
                "+",
                "+\t@Autowired",
                "+\tprivate FileManager fileManager;",
                "+",
                " \tpublic FileController() {",
                "@@ -49,2 +55,6 @@ public class FileController extends SupportController {",
                " \tpublic Object savefolder(@RequestParam(\"path\") String path, @RequestParam(\"name\") String name){",
                "+",
                "+        if(fileManager.checkPath(path)){",
                "+            return new ResultMessage(false, \"\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e5\u00bc\u0082\u00e5\u00b8\u00b8\u00ef\u00bc\u008c\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "+        }",
                " \t\tFile file = new File(WebRealPathHolder.REAL_PATH + encoding(path + File.separator + name));",
                "@@ -68,2 +78,3 @@ public class FileController extends SupportController {",
                " \tpublic ModelAndView upload(@RequestParam(\"path\") String path){",
                "+",
                " \t\tModelAndView view = new ModelAndView(this.viewPath + \"upload\");",
                "@@ -131,3 +142,4 @@ public class FileController extends SupportController {",
                " \tpublic ModelAndView rename(@RequestParam(\"path\") String path, @RequestParam(\"name\") String name){",
                "-\t\tModelAndView view = new ModelAndView(this.viewPath + \"rename\");",
                "+",
                "+\t    ModelAndView view = new ModelAndView(this.viewPath + \"rename\");",
                " \t\tview.addObject(\"path\", encoding(path));",
                "@@ -141,3 +153,7 @@ public class FileController extends SupportController {",
                " \tpublic Object savename(@RequestParam(\"path\") String path, @RequestParam(\"name\") String name, @RequestParam(\"rename\")String rename){",
                "-\t\tFile oldFile = new File(WebRealPathHolder.REAL_PATH + path + File.separator + name);",
                "+",
                "+        if(fileManager.checkPath(path)){",
                "+            return new ResultMessage(false, \"\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e5\u00bc\u0082\u00e5\u00b8\u00b8\u00ef\u00bc\u008c\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "+        }",
                "+\t    File oldFile = new File(WebRealPathHolder.REAL_PATH + path + File.separator + name);",
                "@@ -169,4 +185,11 @@ public class FileController extends SupportController {",
                " \tpublic Object save(@RequestParam(\"path\") String path, @RequestParam(\"name\") String name, @RequestParam(\"data\") String data){",
                "-\t\tFile file = new File(WebRealPathHolder.REAL_PATH + path + File.separator + name);",
                "-\t\t",
                "+",
                "+        if(fileManager.checkPath(path)){",
                "+            return new ResultMessage(false, \"\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e5\u00bc\u0082\u00e5\u00b8\u00b8\u00ef\u00bc\u008c\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "+        }",
                "+",
                "+\t    File file = new File(WebRealPathHolder.REAL_PATH + path + File.separator + name);",
                "+",
                "+",
                "+",
                " \t\tString fname = FileTools.getSuffix(name);",
                "@@ -190,8 +213,10 @@ public class FileController extends SupportController {",
                " \tpublic Object delete(@RequestParam(\"path\") String path, @RequestParam(\"name\") String name){",
                "+",
                "+        if(fileManager.checkPath(path)){",
                "+            return new ResultMessage(false, \"\u00e8\u00b7\u00af\u00e5\u00be\u0084\u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e5\u00bc\u0082\u00e5\u00b8\u00b8\u00ef\u00bc\u008c\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "+        }",
                "+",
                " \t\tFile file = new File(WebRealPathHolder.REAL_PATH + encoding(path + File.separator + name));",
                "-\t\tif(file.delete()){",
                "-\t\t\treturn new ResultMessage(true, \"\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e6\u0088\u0090\u00e5\u008a\u009f!\");",
                "-\t\t}else{",
                "-\t\t\treturn new ResultMessage(false, \"\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "-\t\t}",
                "+        return fileManager.delete(file);",
                "+",
                " \t}",
                "@@ -204,16 +229,24 @@ public class FileController extends SupportController {",
                " \tpublic ModelAndView list(@RequestParam(\"path\") String path){",
                "-\t\tModelAndView view = new ModelAndView(this.viewPath+\"list\");",
                "-\t\tString root = WebRealPathHolder.REAL_PATH;",
                "-\t\tList<FileObject> list = new ArrayList<FileObject>(); ",
                "-\t\tFile file = new File(root + encoding(path));",
                "-\t\tif(file.isDirectory()){//\u00e5\u00a6\u0082\u00e6\u009e\u009c\u00e6\u0098\u00af\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e5\u00a4\u00b9",
                "-\t\t\tFile[] files = file.listFiles();",
                "-\t\t\tfor(File tmp : files){",
                "-\t\t\t\tlist.add(new FileObject(tmp));",
                "-\t\t\t}",
                "-\t\t} ",
                "-\t\tview.addObject(\"data\", list);",
                "-\t\tview.addObject(\"pathURL\", encoding(path));",
                "-\t\treturn view;",
                "-\t}",
                "+        ModelAndView view = new ModelAndView(this.viewPath + \"list\");",
                "+",
                "+        if (fileManager.checkPath(path)) { // \u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+            view.addObject(\"data\", Collections.emptyList());",
                "+            view.addObject(\"pathURL\", encoding(path));",
                "+            return view;",
                "+        }",
                "+",
                "+        String root = WebRealPathHolder.REAL_PATH;",
                "+        List<FileObject> list = new ArrayList<FileObject>();",
                "+        File file = new File(root + encoding(path));",
                "+        if (file.isDirectory()) {//\u00e5\u00a6\u0082\u00e6\u009e\u009c\u00e6\u0098\u00af\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e5\u00a4\u00b9",
                "+            File[] files = file.listFiles();",
                "+            for (File tmp : files) {",
                "+                list.add(new FileObject(tmp));",
                "+            }",
                "+        }",
                "+",
                "+        view.addObject(\"data\", list);",
                "+        view.addObject(\"pathURL\", encoding(path));",
                "+        return view;",
                "+    }",
                "diff --git a/src/main/java/org/marker/mushroom/manager/FileManager.java b/src/main/java/org/marker/mushroom/manager/FileManager.java",
                "new file mode 100644",
                "index 0000000..a658747",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/manager/FileManager.java",
                "@@ -0,0 +1,31 @@",
                "+package org.marker.mushroom.manager;/**",
                "+ * Created by marker on 2018/9/25.",
                "+ */",
                "+",
                "+",
                "+import org.marker.mushroom.beans.ResultMessage;",
                "+",
                "+import java.io.File;",
                "+",
                "+/**",
                "+ * @author marker",
                "+ * @create 2018-09-25 13:09",
                "+ **/",
                "+public interface FileManager {",
                "+",
                "+",
                "+    /**",
                "+     * \u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e6\u0096\u0087\u00e4\u00bb\u00b6",
                "+     * @param file",
                "+     * @return",
                "+     */",
                "+    ResultMessage delete(File file);",
                "+",
                "+",
                "+    /**",
                "+     * \u00e6\u00a3\u0080\u00e6\u009f\u00a5\u00e6\u008f\u0090\u00e4\u00ba\u00a4\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+     * @param path",
                "+     * @return",
                "+     */",
                "+    boolean checkPath(String path);",
                "+}",
                "diff --git a/src/main/java/org/marker/mushroom/manager/FileManagerImpl.java b/src/main/java/org/marker/mushroom/manager/FileManagerImpl.java",
                "new file mode 100644",
                "index 0000000..65aa5ed",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/manager/FileManagerImpl.java",
                "@@ -0,0 +1,43 @@",
                "+package org.marker.mushroom.manager;/**",
                "+ * Created by marker on 2018/9/25.",
                "+ */",
                "+",
                "+import org.marker.mushroom.beans.ResultMessage;",
                "+import org.springframework.stereotype.Service;",
                "+",
                "+import java.io.File;",
                "+",
                "+/**",
                "+ * \u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e7\u00ae\u00a1\u00e7\u0090\u0086\u00e5\u0099\u00a8\u00e5\u00ae\u009e\u00e7\u008e\u00b0",
                "+ *",
                "+ * @author marker",
                "+ * @create 2018-09-25 13:09",
                "+ **/",
                "+@Service",
                "+public class FileManagerImpl implements FileManager {",
                "+",
                "+",
                "+",
                "+",
                "+    @Override",
                "+    public ResultMessage delete(File file) {",
                "+",
                "+        if(!file.exists()){",
                "+            return new ResultMessage(true, \"\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e4\u00b8\u008d\u00e5\u00ad\u0098\u00e5\u009c\u00a8!\");",
                "+        }",
                "+",
                "+        if(file.delete()){",
                "+            return new ResultMessage(true, \"\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e6\u0088\u0090\u00e5\u008a\u009f!\");",
                "+        }else{",
                "+            return new ResultMessage(false, \"\u00e5\u0088\u00a0\u00e9\u0099\u00a4\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5!\");",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean checkPath(String path) {",
                "+        if(path.indexOf(\"..\") != -1){",
                "+            return false;",
                "+        }",
                "+        return true;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/controller/FileController.java",
                "src/main/java/org/marker/mushroom/manager/FileManager.java",
                "src/main/java/org/marker/mushroom/manager/FileManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1dbd6795b22f31fba4e02170a00d4d86d5d1e65a",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1543075047,
            "hunks": 9,
            "message": "\u00e4\u00bb\u00a3\u00e7\u00a0\u0081\u00e4\u00bc\u0098\u00e5\u008c\u0096",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/ext/menu/MenuUtils.java b/src/main/java/org/marker/mushroom/ext/menu/MenuUtils.java",
                "index 09a57df..b37297e 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/menu/MenuUtils.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/menu/MenuUtils.java",
                "@@ -118,5 +118,5 @@ public class MenuUtils {",
                " \t\t\t\t// \u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e6\u0093\u008d\u00e4\u00bd\u009c",
                "-\t\t\t\tmenuDao.save(menu); ",
                "-\t\t\t\t// \u00e5\u00b0\u0086\u00e8\u008f\u009c\u00e5\u008d\u0095\u00e6\u00b7\u00bb\u00e5\u008a\u00a0\u00e7\u00bb\u0099\u00e5\u0086\u0085\u00e7\u00bd\u00ae\u00e7\u00ae\u00a1\u00e7\u0090\u0086\u00e5\u0091\u0098\u00e7\u00bb\u0084",
                "-\t\t\t\tmenuDao.saveMenuToAdminGroup(menu.getId()); ",
                "+//\t\t\t\tmenuDao.save(menu);",
                "+//\t\t\t\t// \u00e5\u00b0\u0086\u00e8\u008f\u009c\u00e5\u008d\u0095\u00e6\u00b7\u00bb\u00e5\u008a\u00a0\u00e7\u00bb\u0099\u00e5\u0086\u0085\u00e7\u00bd\u00ae\u00e7\u00ae\u00a1\u00e7\u0090\u0086\u00e5\u0091\u0098\u00e7\u00bb\u0084",
                "+//\t\t\t\tmenuDao.saveMenuToAdminGroup(menu.getId());",
                " \t\t\t}else{",
                "diff --git a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "index b2d032b..1437b0e 100644",
                "--- a/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "+++ b/src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "@@ -110,2 +110,6 @@ public class SystemCoreFilter implements Filter {",
                " \t\t\tString suffix = uri.substring(dotIndex, uri.length());",
                "+\t\t\tif(\"do\".equals(suffix)){// \u00e5\u0090\u008e\u00e5\u008f\u00b0\u00e5\u008a\u009f\u00e8\u0083\u00bd",
                "+\t\t\t\tchain.doFilter(req, response);",
                "+\t\t\t\treturn;",
                "+\t\t\t}",
                " \t\t\tif (suffixPattern.matcher(suffix).matches()) {",
                "diff --git a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "index 8df8c04..d9eee7a 100644",
                "--- a/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "+++ b/src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "@@ -2,4 +2,6 @@ package org.marker.mushroom.holder;",
                "+",
                " import com.wuweibi.module4j.ModuleFramework;",
                " import com.wuweibi.module4j.config.Configuration;",
                "+import com.wuweibi.module4j.exception.PackageJsonNotFoundException;",
                " import com.wuweibi.module4j.listener.InstallListenter;",
                "@@ -10,2 +12,3 @@ import org.marker.mushroom.core.WebAPP;",
                " import org.marker.mushroom.core.config.impl.DataBaseConfig;",
                "+import org.marker.mushroom.core.config.impl.URLRewriteConfig;",
                " import org.marker.mushroom.core.proxy.SingletonProxyKeyWordComputer;",
                "@@ -27,3 +30,2 @@ import java.util.Map;",
                "-",
                " /**",
                "@@ -75,4 +77,4 @@ public class InitBuilderHolder implements ServletContextAware{",
                " \t\t */",
                "-//    \tURLRewriteConfig urlConfig = URLRewriteConfig.getInstance();",
                "-//    \tlogger.info(\"build URL-rewriteConfig instance = {}\", urlConfig);",
                "+    \tURLRewriteConfig urlConfig = URLRewriteConfig.getInstance();",
                "+    \tlogger.info(\"build URL-rewriteConfig instance = {}\", urlConfig);",
                "@@ -219,2 +221,4 @@ public class InitBuilderHolder implements ServletContextAware{",
                "+\t\t\t} catch (PackageJsonNotFoundException e) {",
                "+\t\t\t\tlogger.error(\"{}\", \"PackageJsonNotFoundException\");",
                " \t\t\t} catch (Exception e) {",
                "diff --git a/src/main/java/org/marker/mushroom/spring/ProfileConfig.java b/src/main/java/org/marker/mushroom/spring/ProfileConfig.java",
                "new file mode 100644",
                "index 0000000..5832fe5",
                "--- /dev/null",
                "+++ b/src/main/java/org/marker/mushroom/spring/ProfileConfig.java",
                "@@ -0,0 +1,32 @@",
                "+package org.marker.mushroom.spring;",
                "+/**",
                "+ * Created by marker on 2018/11/24.",
                "+ */",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+/**",
                "+ *",
                "+ * Spring Profile \u00e9\u0085\u008d\u00e7\u00bd\u00ae",
                "+ * (\u00e8\u00a7\u00a3\u00e5\u0086\u00b3\u00e5\u0090\u0084\u00e7\u008e\u00af\u00e5\u00a2\u0083\u00e7\u009a\u0084\u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e5\u008a\u00a0\u00e8\u00bd\u00bd)",
                "+ *",
                "+ * @author marker",
                "+ * @create 2018-11-24 22:26",
                "+ **/",
                "+public class ProfileConfig implements Serializable{",
                "+",
                "+",
                "+    /**",
                "+     * \u00e9\u0085\u008d\u00e7\u00bd\u00ae\u00e6\u0096\u0087\u00e4\u00bb\u00b6\u00e8\u00b7\u00af\u00e5\u00be\u0084",
                "+     */",
                "+    private String config;",
                "+",
                "+",
                "+    public String getConfig() {",
                "+        return config;",
                "+    }",
                "+",
                "+    public void setConfig(String config) {",
                "+        this.config = config;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/ext/menu/MenuUtils.java",
                "src/main/java/org/marker/mushroom/filter/SystemCoreFilter.java",
                "src/main/java/org/marker/mushroom/holder/InitBuilderHolder.java",
                "src/main/java/org/marker/mushroom/spring/ProfileConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ce3b4802dcf8996670da3c17bd8bbfc493ce9593",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1534254730,
            "hunks": 4,
            "message": "1\u00e3\u0080\u0081 \u00e4\u00bc\u0098\u00e5\u008c\u0096\u00e4\u00ba\u0086\u00e5\u009b\u00bd\u00e9\u0099\u0085\u00e5\u008c\u0096\u00e8\u00af\u00ad\u00e8\u00a8\u0080\u00e8\u00be\u0093\u00e5\u0087\u00ba",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/utils/HttpUtils.java b/src/main/java/org/marker/mushroom/utils/HttpUtils.java",
                "index 1e3411f..b6dc688 100644",
                "--- a/src/main/java/org/marker/mushroom/utils/HttpUtils.java",
                "+++ b/src/main/java/org/marker/mushroom/utils/HttpUtils.java",
                "@@ -2,9 +2,7 @@ package org.marker.mushroom.utils;",
                "-import org.marker.mushroom.context.ActionContext;",
                " import org.springframework.util.StringUtils;",
                "-import java.util.Locale;",
                "-",
                " import javax.servlet.http.Cookie;",
                " import javax.servlet.http.HttpServletRequest;",
                "+import java.util.Locale;",
                "@@ -115,3 +113,6 @@ public class HttpUtils {",
                " \t\tLocale locale = request.getLocale();",
                "-\t\treturn locale.getLanguage()+\"-\"+locale.getCountry();",
                "+\t\tif(org.apache.commons.lang.StringUtils.isBlank(locale.getCountry())){",
                "+\t\t\treturn locale.getLanguage();",
                "+\t\t}",
                "+\t\treturn locale.getLanguage() + \"-\" + locale.getCountry();",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/utils/HttpUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a60ec9a8627fc14b3dff9c8c77ab80672714d220",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1534172969,
            "hunks": 8,
            "message": "1\u00e3\u0080\u0081 \u00e5\u00b0\u0086\u00e6\u00a8\u00a1\u00e6\u009d\u00bf\u00e7\u009a\u0084\u00e5\u00bc\u0082\u00e5\u00b8\u00b8\u00e6\u0095\u00b0\u00e6\u008d\u00ae\u00e8\u00be\u0093\u00e5\u0087\u00ba\u00e5\u0088\u00b0\u00e5\u0089\u008d\u00e7\u00ab\u00af\u00ef\u00bc\u008c\u00e6\u009c\u0089\u00e5\u008a\u00a9\u00e4\u00ba\u008e\u00e8\u00b0\u0083\u00e8\u00af\u0095 2\u00e3\u0080\u0081\u00e5\u00af\u00b9\u00e5\u00ad\u0097\u00e7\u00ac\u00a6\u00e4\u00b8\u00b2\u00e6\u0088\u00aa\u00e5\u008f\u0096\u00e6\u00a0\u0087\u00e7\u00ad\u00be\u00e8\u00bf\u009b\u00e8\u00a1\u008c\u00e4\u00ba\u0086\u00e4\u00bc\u0098\u00e5\u008c\u0096\u00e3\u0080\u0082",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/core/exception/SystemException.java b/src/main/java/org/marker/mushroom/core/exception/SystemException.java",
                "index bfebfe0..a4af48d 100644",
                "--- a/src/main/java/org/marker/mushroom/core/exception/SystemException.java",
                "+++ b/src/main/java/org/marker/mushroom/core/exception/SystemException.java",
                "@@ -26,2 +26,3 @@ public class SystemException extends Exception {",
                " \tpublic SystemException(String message) {",
                "+\t\tsuper(message);",
                " \t\tthis.errMessage = message;",
                "diff --git a/src/main/java/org/marker/mushroom/ext/tag/impl/StringSubTagImpl.java b/src/main/java/org/marker/mushroom/ext/tag/impl/StringSubTagImpl.java",
                "index 14adff9..cafe86f 100644",
                "--- a/src/main/java/org/marker/mushroom/ext/tag/impl/StringSubTagImpl.java",
                "+++ b/src/main/java/org/marker/mushroom/ext/tag/impl/StringSubTagImpl.java",
                "@@ -2,2 +2,4 @@ package org.marker.mushroom.ext.tag.impl;",
                "+import org.marker.mushroom.ext.tag.Taglib;",
                "+",
                " import java.util.HashMap;",
                "@@ -5,4 +7,2 @@ import java.util.Map;",
                "-import org.marker.mushroom.ext.tag.Taglib;",
                "-",
                " /**",
                "@@ -23,4 +23,4 @@ public class StringSubTagImpl extends Taglib {",
                "-\t\tthis.put(\"\\\\$\\\\{\\\\s*(\\\\w+\\\\.?\\\\w+)\\\\s+length\\\\=\\\\((\\\\d+)\\\\)\\\\s*\\\\}\",",
                "-\t\t\t\t\"<#if ($1?length>$2)>\" + \"\\\\${$1[0..$2]}...\" + \"<#else>\"",
                "+\t\tthis.put(\"\\\\$\\\\{\\\\s*([\\\\w+\\\\.?]+)\\\\s+length\\\\=\\\\((\\\\d+)\\\\)\\\\s*\\\\}\",",
                "+\t\t\t\t\"<#if ($1?length>$2)>\" + \"\\\\${$1[0..$2-1]}...\" + \"<#else>\"",
                " \t\t\t\t\t\t+ \"\\\\${$1!}\" + \"</#if>\", 0);",
                "diff --git a/src/main/java/org/marker/mushroom/template/SendDataToView.java b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "index 4e9b44a..b2ec413 100644",
                "--- a/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "+++ b/src/main/java/org/marker/mushroom/template/SendDataToView.java",
                "@@ -2,16 +2,6 @@ package org.marker.mushroom.template;",
                "-import java.io.File;",
                "-import java.io.FileOutputStream;",
                "-import java.io.IOException;",
                "-import java.io.OutputStream;",
                "-import java.io.OutputStreamWriter;",
                "-import java.io.Writer;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import javax.servlet.ServletContext;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import javax.servlet.http.HttpSession;",
                "-",
                "+import freemarker.ext.servlet.AllHttpScopesHashModel;",
                "+import freemarker.template.Configuration;",
                "+import freemarker.template.Template;",
                "+import freemarker.template.TemplateExceptionHandler;",
                " import org.marker.develop.freemarker.MessageWrapperModel;",
                "@@ -28,3 +18,2 @@ import org.marker.mushroom.core.exception.SystemException;",
                " import org.marker.mushroom.dao.ISupportDao;",
                "-import org.marker.mushroom.ext.message.MessageContext;",
                " import org.marker.mushroom.ext.message.MessageDBContext;",
                "@@ -39,6 +28,9 @@ import org.springframework.cache.ehcache.EhCacheCacheManager;",
                "-import freemarker.ext.servlet.AllHttpScopesHashModel;",
                "-import freemarker.template.Configuration;",
                "-import freemarker.template.Template;",
                "-import freemarker.template.TemplateExceptionHandler;",
                "+import javax.servlet.ServletContext;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import javax.servlet.http.HttpSession;",
                "+import java.io.*;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "@@ -136,4 +128,4 @@ public class SendDataToView {",
                " \t\t} catch (IOException e) {",
                "-\t\t\te.printStackTrace();",
                "-\t\t\tthrow new SystemException(\"\u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e6\u00a8\u00a1\u00e6\u009d\u00bf\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\u00ef\u00bc\u009a\" + tpl);",
                "+\t\t\tlogger.error(e.getMessage());",
                "+\t\t\tthrow new SystemException(\"\u00e8\u008e\u00b7\u00e5\u008f\u0096\u00e6\u00a8\u00a1\u00e6\u009d\u00bf\u00e5\u00a4\u00b1\u00e8\u00b4\u00a5\u00ef\u00bc\u009a\" + tpl+\" <br/> \"+ e.getMessage());",
                " \t\t}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/core/exception/SystemException.java",
                "src/main/java/org/marker/mushroom/ext/tag/impl/StringSubTagImpl.java",
                "src/main/java/org/marker/mushroom/template/SendDataToView.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9f976f47350b0b0f03cca0c0ef05ff8a53a57eae",
            "repository": "https://github.com/wuweiit/mushroom",
            "timestamp": 1543132036,
            "hunks": 2,
            "message": "springmvc bug\u00e5\u00a4\u0084\u00e7\u0090\u0086",
            "diff": [
                "diff --git a/src/main/java/org/marker/mushroom/controller/AdminController.java b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "index 2f31053..91892ac 100644",
                "--- a/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "+++ b/src/main/java/org/marker/mushroom/controller/AdminController.java",
                "@@ -78,5 +78,9 @@ public class AdminController extends SupportController {",
                " \t\t\t}",
                "+\t\t} else {",
                "+",
                "+\t\t\tlog.error(\"\u00e5\u009b\u00a0\u00e4\u00b8\u00ba\u00e6\u00b2\u00a1\u00e6\u009c\u0089\u00e7\u0099\u00bb\u00e5\u00bd\u0095\u00ef\u00bc\u008c\u00e5\u009c\u00a8\u00e4\u00b8\u00bb\u00e9\u00a1\u00b5\u00e5\u00b0\u00b1\u00e4\u00b8\u008d\u00e8\u0083\u00bd\u00e6\u009f\u00a5\u00e8\u00af\u00a2\u00e5\u0088\u00b0\u00e5\u0088\u0086\u00e7\u00bb\u0084ID\");",
                "+\t\t\treturn \"redirect:login.do\";",
                " \t\t}",
                "-\t\treturn this.viewPath+\"index\";",
                "+\t\treturn this.viewPath + \"index\";",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/marker/mushroom/controller/AdminController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        }
    ]
}
