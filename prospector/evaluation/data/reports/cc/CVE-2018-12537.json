{
    "advisory_record": {
        "cve_id": "CVE-2018-12537",
        "description": "In Eclipse Vert.x version 3.0 to 3.5.1, the HttpServer response headers and HttpClient request headers do not filter carriage return and line feed characters from the header value. This allow unfiltered values to inject a new header in the client request or server response.",
        "reserved_timestamp": 1529280000,
        "published_timestamp": 1534273200,
        "updated_timestamp": 1544007421,
        "repository_url": null,
        "references": {
            "": 170,
            "https://wiki.eclipse.org/ECA": 15,
            "https://access.redhat.com/support/": 10,
            "https://access.redhat.com/downloads/": 8,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1591072": 7,
            "commit::1bb6445226c39a95e7d07ce3caaf56828e8aab72": 6,
            "https://github.com/eclipse/vert.x/issues/2470": 6,
            "https://access.redhat.com/errata/": 6,
            "https://access.redhat.com/labs/": 6,
            "https://www.compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2018-021_vertx.txt": 5,
            "https://access.redhat.com/errata/RHSA-2018:2371": 4,
            "https://bugs.eclipse.org/bugs/show_bug.cgi?id=536038": 4,
            "https://access.redhat.com/errata/RHSA-2018:3768": 4,
            "https://access.redhat.com/management/": 4,
            "https://access.redhat.com/": 4,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 4,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 4,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 4,
            "https://access.redhat.com/products/": 4,
            "https://access.redhat.com/documentation": 4,
            "https://access.redhat.com/product-life-cycles/": 4,
            "https://access.redhat.com/security": 4,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 4,
            "https://access.redhat.com/security/security-updates/#/cve": 4,
            "https://access.redhat.com/support/contact/": 4,
            "https://status.redhat.com": 4,
            "commit::2f28612197b31e93a22dcf645e9dcc22ad9c0a00": 3,
            "https://github.com/eclipse-vertx/vert.x/issues/2470": 3,
            "commit::3a6512695a9d610687081eb13d2a1681151fd7fb": 3,
            "https://access.redhat.com/downloads/content/package-browser": 2,
            "https://catalog.redhat.com/software/containers/explore/": 2,
            "https://access.redhat.com/articles/1202803": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 2,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 2,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 2,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 2,
            "https://access.redhat.com/documentation/": 2,
            "https://access.redhat.com/security/": 2,
            "https://access.redhat.com/security/vulnerabilities": 2,
            "https://access.redhat.com/security/data": 2,
            "https://access.redhat.com/security/security-updates/#/security-labs": 2,
            "https://access.redhat.com/security/updates/backporting/": 2,
            "https://access.redhat.com/support/cases/": 2,
            "https://access.redhat.com/support/cases/#/troubleshoot": 2,
            "https://access.redhat.com/community": 2,
            "https://access.redhat.com/community/": 2,
            "https://access.redhat.com/discussions/": 2,
            "https://access.redhat.com/announcements/": 2,
            "https://access.redhat.com/accelerators/": 2,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 2,
            "https://cloud.redhat.com/insights": 2,
            "https://access.redhat.com/changeLanguage?language=en": 2,
            "https://access.redhat.com/changeLanguage?language=fr": 2,
            "https://access.redhat.com/changeLanguage?language=ko": 2,
            "https://access.redhat.com/changeLanguage?language=ja": 2,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 2,
            "https://access.redhat.com/products/red-hat-satellite/": 2,
            "https://access.redhat.com/products/red-hat-subscription-management/": 2,
            "https://access.redhat.com/products/red-hat-insights/": 2,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 2,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-quay/": 2,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 2,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 2,
            "https://access.redhat.com/products/red-hat-storage/": 2,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 2,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 2,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 2,
            "https://access.redhat.com/products/red-hat-runtimes/": 2,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 2,
            "https://access.redhat.com/products/red-hat-data-grid/": 2,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 2,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 2,
            "https://access.redhat.com/products/spring-boot/": 2,
            "https://access.redhat.com/products/nodejs/": 2,
            "https://access.redhat.com/products/quarkus/": 2,
            "https://access.redhat.com/products/red-hat-application-foundations/": 2,
            "https://access.redhat.com/products/red-hat-fuse/": 2,
            "https://access.redhat.com/products/red-hat-amq/": 2,
            "https://access.redhat.com/products/red-hat-3scale/": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-12537.html": 2,
            "https://access.redhat.com/security/team/contact/": 2,
            "https://redhat.com/en": 2,
            "https://twitter.com/RedHat": 2,
            "https://access.redhat.com/management": 2,
            "https://access.redhat.com/support": 2,
            "https://access.redhat.com/support/customer-service": 2,
            "https://access.redhat.com/articles/33844": 2,
            "https://access.redhat.com/help/login_assistance": 2,
            "https://www.redhat.com/en/trust": 2,
            "https://www.redhat.com/en/about/browser-support": 2,
            "https://www.redhat.com/en/about/digital-accessibility": 2,
            "https://access.redhat.com/recognition/": 2,
            "https://access.redhat.com/help/colophon/": 2,
            "https://www.redhat.com/": 2,
            "http://developers.redhat.com/": 2,
            "https://connect.redhat.com/": 2,
            "https://cloud.redhat.com/": 2,
            "https://access.redhat.com/subscription-value": 2,
            "https://www.redhat.com/about/": 2,
            "http://jobs.redhat.com": 2,
            "https://redhat.com/en/about/company": 2,
            "https://redhat.com/en/jobs": 2,
            "https://redhat.com/en/events": 2,
            "https://redhat.com/en/about/office-locations": 2,
            "https://redhat.com/en/contact": 2,
            "https://redhat.com/en/blog": 2,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 2,
            "https://coolstuff.redhat.com/": 2,
            "https://www.redhat.com/en/summit": 2,
            "https://redhat.com/en/about/privacy-policy": 2,
            "https://redhat.com/en/about/terms-use": 2,
            "https://redhat.com/en/about/all-policies-guidelines": 2,
            "https://redhat.com/en/about/digital-accessibility": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "commit::aac6fe4543a256230b6e19a97b3e066cae9eb2ab": 2,
            "https://www.eclipse.org/": 2,
            "http://marketplace.eclipse.org": 2,
            "http://events.eclipse.org": 2,
            "http://www.planeteclipse.org/": 2,
            "https://www.eclipse.org/community/eclipse_newsletter/": 2,
            "https://www.youtube.com/user/EclipseFdn": 2,
            "https://bugs.eclipse.org/bugs/": 2,
            "https://www.eclipse.org/forums/": 2,
            "https://www.eclipse.org/mail/": 2,
            "https://wiki.eclipse.org/": 2,
            "https://wiki.eclipse.org/IRC": 2,
            "https://www.eclipse.org/contribute/": 2,
            "http://wiki.eclipse.org/Auto_IWG": 2,
            "http://iot.eclipse.org": 2,
            "http://locationtech.org": 2,
            "http://lts.eclipse.org": 2,
            "http://polarsys.org": 2,
            "http://science.eclipse.org": 2,
            "http://www.openmdm.org": 2,
            "https://bugzilla.readthedocs.org/en/5.0/using/understanding.html": 2,
            "http://www.eclipse.org/legal/termsofuse.php": 2,
            "http://www.eclipse.org/legal/copyright.php": 2,
            "https://dev.eclipse.org/committers/bugs/bugz_manager.php": 2,
            "https://cwe.mitre.org/data/definitions/93.html": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1600666": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12540.html": 1,
            "https://access.redhat.com/security/updates/classification/#moderate": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.eclipse.vertx&version=3.5.3": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/red_hat_openshift_application_runtimes_release_notes/": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://www.eclipse.org/downloads/": 1,
            "https://www.eclipse.org/users/": 1,
            "https://www.eclipse.org/membership/": 1,
            "https://www.eclipse.org/projects/": 1,
            "https://cwe.mitre.org/": 1,
            "https://github.com/CVEProject/cvelist/pull/932": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1503055": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1508110": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1508123": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1578578": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1578902": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1579611": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1595332": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607591": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607731": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1611059": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612644": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-5002.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-5003.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12196.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1257.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1259.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1288.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1336.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8014.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8018.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8039.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8041.html": 1,
            "https://access.redhat.com/security/updates/classification/#important": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=jboss.fuse&downloadType=distributions&version=7.2.0": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_fuse/7.2/": 1,
            "https://access.redhat.com/articles/2939351": 1
        },
        "affected_products": [
            "HttpClient",
            "Eclipse Vert.x",
            "HttpServer",
            "Eclipse"
        ],
        "versions": {
            "lessThan": "unspecified",
            "status": "affected",
            "version": "3.0",
            "versionType": "custom"
        },
        "files": [
            "HttpClient",
            "x",
            "HttpServer",
            "Vert"
        ],
        "keywords": [
            "line",
            "feed",
            "inject",
            "response",
            "character",
            "value",
            "header",
            "request",
            "filter",
            "httpserver",
            "httpclient",
            "client",
            "carriage",
            "eclipse",
            "allow",
            "server",
            "version",
            "return"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "1bb6445226c39a95e7d07ce3caaf56828e8aab72",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527071519,
            "hunks": 21,
            "message": "Http header CR / LF validation - fixes #2470",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpHeaders.java b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "index 5b1aaf1d9..6e6d1ac03 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "@@ -13,2 +13,5 @@ package io.vertx.core.http;",
                "+import io.netty.util.AsciiString;",
                "+import io.vertx.core.http.impl.HttpUtils;",
                "+",
                " /**",
                "@@ -326,3 +329,4 @@ public final class HttpHeaders {",
                "   public static CharSequence createOptimized(String value) {",
                "-    return io.netty.handler.codec.http.HttpHeaders.newEntity(value);",
                "+    HttpUtils.validateHeader(value);",
                "+    return new AsciiString(value);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "index 6c2a6d1b1..f78fc01df 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "@@ -141,2 +141,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(String name, String value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.add(toLowerCase(name), value);",
                "@@ -147,2 +148,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(String name, Iterable<String> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.add(toLowerCase(name), values);",
                "@@ -169,2 +171,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(String name, String value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.set(toLowerCase(name), value);",
                "@@ -175,2 +178,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(String name, Iterable<String> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.set(toLowerCase(name), values);",
                "@@ -242,2 +246,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(CharSequence name, CharSequence value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.add(toLowerCase(name), value);",
                "@@ -248,2 +253,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(CharSequence name, Iterable<CharSequence> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.add(toLowerCase(name), values);",
                "@@ -254,2 +260,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(CharSequence name, CharSequence value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.set(toLowerCase(name), value);",
                "@@ -260,2 +267,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(CharSequence name, Iterable<CharSequence> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.set(toLowerCase(name), values);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "index c2c0a58a6..a66c5aff2 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "@@ -15,3 +15,2 @@ import io.netty.buffer.ByteBuf;",
                " import io.netty.buffer.Unpooled;",
                "-import io.netty.channel.ChannelFuture;",
                " import io.netty.channel.ChannelFutureListener;",
                "@@ -28,3 +27,2 @@ import io.vertx.core.Handler;",
                " import io.vertx.core.MultiMap;",
                "-import io.vertx.core.VertxException;",
                " import io.vertx.core.buffer.Buffer;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "index 705108c11..56d4d4e93 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "@@ -19,3 +19,2 @@ import io.vertx.core.*;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.CaseInsensitiveHeaders;",
                " import io.vertx.core.http.HttpClientRequest;",
                "@@ -26,2 +25,3 @@ import io.vertx.core.http.HttpMethod;",
                " import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.impl.headers.VertxHttpHeaders;",
                " import io.vertx.core.impl.ContextInternal;",
                "@@ -70,3 +70,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private long written;",
                "-  private CaseInsensitiveHeaders headers;",
                "+  private VertxHttpHeaders headers;",
                "@@ -185,3 +185,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "     if (headers == null) {",
                "-      headers = new CaseInsensitiveHeaders();",
                "+      headers = new VertxHttpHeaders();",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpUtils.java b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "index bb88135a8..9dafaa74c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "@@ -523,2 +523,21 @@ public final class HttpUtils {",
                "   }",
                "+",
                "+  public static void validateHeader(CharSequence name, CharSequence value) {",
                "+    validateHeader(name);",
                "+    validateHeader(value);",
                "+  }",
                "+",
                "+  public static void validateHeader(CharSequence name, Iterable<? extends CharSequence> values) {",
                "+    validateHeader(name);",
                "+    values.forEach(HttpUtils::validateHeader);",
                "+  }",
                "+",
                "+  public static void validateHeader(CharSequence value) {",
                "+    for (int i = 0;i < value.length();i++) {",
                "+      char c = value.charAt(i);",
                "+      if (c == '\\r' || c == '\\n') {",
                "+        throw new IllegalArgumentException(\"Illegal header character: \" + ((int)c));",
                "+      }",
                "+    }",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index f202918c0..bd77e84bb 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -17,2 +17,3 @@ import io.netty.util.HashingStrategy;",
                " import io.vertx.core.MultiMap;",
                "+import io.vertx.core.http.impl.HttpUtils;",
                "@@ -56,3 +57,3 @@ public final class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   private final VertxHttpHeaders.MapEntry[] entries = new VertxHttpHeaders.MapEntry[16];",
                "-  private final VertxHttpHeaders.MapEntry head = new VertxHttpHeaders.MapEntry(-1, null, null);",
                "+  private final VertxHttpHeaders.MapEntry head = new VertxHttpHeaders.MapEntry();",
                "@@ -399,2 +400,8 @@ public final class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "+    MapEntry() {",
                "+      this.hash = -1;",
                "+      this.key = null;",
                "+      this.value = null;",
                "+    }",
                "+",
                "     MapEntry(int hash, CharSequence key, CharSequence value) {",
                "@@ -478,2 +485,8 @@ public final class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "+    if (!(name instanceof AsciiString)) {",
                "+      HttpUtils.validateHeader(name);",
                "+    }",
                "+    if (!(value instanceof AsciiString)) {",
                "+      HttpUtils.validateHeader(value);",
                "+    }",
                "     // Update the hash table."
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpHeaders.java",
                "src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2470": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3a6512695a9d610687081eb13d2a1681151fd7fb"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 2470",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HttpClient, x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java, src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java, src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java, src/main/java/io/vertx/core/http/impl/HttpUtils.java, src/main/java/io/vertx/core/http/HttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: httpclient, client, server, header, response, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2470",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ca2e6a192231a432d62d7ee1c095889dab64917",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526400545,
            "hunks": 2,
            "message": "Use Http2Headers.contains instead of default MultiMap implementation In netty/netty#7633, a method was added to check if a HTTP/2 header is present and has a given value. Now that Vert.x core requires Netty 4.1.22, we can use it instead of the slower default implementation. Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "index d923d7564..6c2a6d1b1 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "@@ -102,2 +102,7 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "+  @Override",
                "+  public boolean contains(String name, String value, boolean caseInsensitive) {",
                "+    return headers.contains(toLowerCase(name), value, caseInsensitive);",
                "+  }",
                "+",
                "   @Override",
                "@@ -230,2 +235,7 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "+  @Override",
                "+  public boolean contains(CharSequence name, CharSequence value, boolean caseInsensitive) {",
                "+    return headers.contains(toLowerCase(name), value, caseInsensitive);",
                "+  }",
                "+",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "7633": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: value, header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 7633",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c30be905504ca53a704f7491cebbc3d251dc04e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526559602,
            "hunks": 2,
            "message": "DnsClient throws an exception when calling a Dns server over IpV6 (#2458) * DnsClient throws an exception when calling a Dns server over IpV6 - fixes #2456 Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * incorporated comments after review - fixes #2456 Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index 720e1b488..2096bed9b 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -84,2 +84,5 @@ public final class DnsClientImpl implements DnsClient {",
                "     this.dnsServer = new InetSocketAddress(options.getHost(), options.getPort());",
                "+    if (this.dnsServer.isUnresolved()) {",
                "+    \tthrow new IllegalArgumentException(\"Cannot resolve the host to a valid ip address\");",
                "+    }",
                "     this.vertx = vertx;",
                "@@ -88,3 +91,3 @@ public final class DnsClientImpl implements DnsClient {",
                "     actualCtx = vertx.getOrCreateContext();",
                "-    channel = transport.datagramChannel(InternetProtocolFamily.IPv4);",
                "+    channel = transport.datagramChannel(this.dnsServer.getAddress() instanceof Inet4Address ? InternetProtocolFamily.IPv4 : InternetProtocolFamily.IPv6);",
                "     channel.config().setOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2458": "",
                "2456": "DnsClient throws an exception when calling a Dns server over IpV6 #2458"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, server",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2458, 2456",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a7f115b6cad5a1bf5203b406f31cfb06cfe17ec5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526635481,
            "hunks": 7,
            "message": "Dns client recursion desired - fixes #2441 (#2455) * implements #2445 - DnsClient: no option to enable the netty logger Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - incorporated feedback from vietj Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2441 - DNS requests are always sent with the flag 'RecursionDesired' set to true Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com>",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 7205835fd..1ef0c4b7e 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -34,2 +34,7 @@ public class DnsClientOptionsConverter {",
                "           break;",
                "+        case \"recursionDesired\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRecursionDesired((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -49,2 +54,3 @@ public class DnsClientOptionsConverter {",
                "     json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"recursionDesired\", obj.isRecursionDesired());",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/dns/DnsClientOptions.java b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "index 824641d50..3fce222d7 100644",
                "--- a/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "@@ -45,2 +45,7 @@ public class DnsClientOptions {",
                "+  /**",
                "+  * The default value for the recursion desired flag (RD) = {@code true}",
                "+  */",
                "+  public static final boolean DEFAULT_RECURSION_DESIRED = true;",
                "+  ",
                "   private int port = DEFAULT_PORT;",
                "@@ -49,3 +54,4 @@ public class DnsClientOptions {",
                "   private boolean logActivity = DEFAULT_LOG_ENABLED;",
                "-",
                "+  private boolean recursionDesired = DEFAULT_RECURSION_DESIRED;",
                "+  ",
                "   public DnsClientOptions() {",
                "@@ -62,2 +68,3 @@ public class DnsClientOptions {",
                "     logActivity = other.logActivity;",
                "+    recursionDesired = other.recursionDesired;",
                "   }",
                "@@ -144,2 +151,22 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * Return whether or not recursion is desired",
                "+   *",
                "+   * @return {@code true} when recursion is desired",
                "+   */",
                "+  public boolean isRecursionDesired() {",
                "+    return recursionDesired;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Set whether or not recursion is desired",
                "+   *",
                "+   * @param recursionDesired the new value",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DnsClientOptions setRecursionDesired(boolean recursionDesired) {",
                "+    this.recursionDesired = recursionDesired;",
                "+    return this;",
                "+  }",
                "+  ",
                "   public JsonObject toJson() {",
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index 2096bed9b..b5a7736e5 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -265,3 +265,3 @@ public final class DnsClientImpl implements DnsClient {",
                "     public Query(String name, DnsRecordType[] types, Handler<AsyncResult<List<T>>> handler) {",
                "-      this.msg = new DatagramDnsQuery(null, dnsServer, ThreadLocalRandom.current().nextInt()).setRecursionDesired(true);",
                "+      this.msg = new DatagramDnsQuery(null, dnsServer, ThreadLocalRandom.current().nextInt()).setRecursionDesired(options.isRecursionDesired());",
                "       for (DnsRecordType type: types) {"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2441": "the class DnsClientOptions now supports the property recursionDesired #2442 implements #2441 - the class DnsClientOptions now supports the property recursionDesired #2443 implements #2441 - DnsClientOptions now supports the property recursionDesired #2444 Dns client recursion desired - fixes #2441 #2455",
                "2455": "",
                "2445": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java, src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, request, feed",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2441, 2455, 2445",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e392def68709e7be9327112032a4ad071ec86b2",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526281706,
            "hunks": 4,
            "message": "VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value - fixes #2446",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index 9d2620dde..084f3c336 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -79,6 +79,6 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(CharSequence name, Object value) {",
                "+  public VertxHttpHeaders add(CharSequence name, CharSequence value) {",
                "     int h = AsciiString.hashCode(name);",
                "     int i = index(h);",
                "-    add0(h, i, name, (CharSequence) value);",
                "+    add0(h, i, name, value);",
                "     return this;",
                "@@ -86,2 +86,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "+  @Override",
                "+  public VertxHttpHeaders add(CharSequence name, Object value) {",
                "+    return add(name, (CharSequence)value);",
                "+  }",
                "+",
                "   @Override",
                "@@ -367,7 +372,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public VertxHttpHeaders add(CharSequence name, CharSequence value) {",
                "-    return add(name.toString(), value.toString());",
                "-  }",
                "-",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2446": "Vert.x 3.5.4 umbrella issue vert-x3/issues#401"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: value, header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2446",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "47d15d66dcd56381ee07754545258d3c48537784",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526472096,
            "hunks": 17,
            "message": "DnsClient: no option to enable the netty logger - fixes #2445 (#2451) * implements #2445 - DnsClient: no option to enable the netty logger Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - incorporated feedback from vietj Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - the new method TestUtils.testLogging() is now used in DatagramTest, HttpTest and NetTest",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 8a1ff5914..7205835fd 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -19,2 +19,7 @@ public class DnsClientOptionsConverter {",
                "           break;",
                "+        case \"logActivity\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setLogActivity((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "         case \"port\":",
                "@@ -41,2 +46,3 @@ public class DnsClientOptionsConverter {",
                "     }",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "     json.put(\"port\", obj.getPort());",
                "diff --git a/src/main/java/io/vertx/core/dns/DnsClientOptions.java b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "index f03ec07ed..824641d50 100644",
                "--- a/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "@@ -40,2 +40,7 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * The default log enabled = false",
                "+   */",
                "+  public static final boolean DEFAULT_LOG_ENABLED = false;",
                "+",
                "   private int port = DEFAULT_PORT;",
                "@@ -43,2 +48,3 @@ public class DnsClientOptions {",
                "   private long queryTimeout = DEFAULT_QUERY_TIMEOUT;",
                "+  private boolean logActivity = DEFAULT_LOG_ENABLED;",
                "@@ -55,2 +61,3 @@ public class DnsClientOptions {",
                "     queryTimeout = other.queryTimeout;",
                "+    logActivity = other.logActivity;",
                "   }",
                "@@ -72,2 +79,5 @@ public class DnsClientOptions {",
                "   public DnsClientOptions setPort(int port) {",
                "+    if (port<1 && port!=DEFAULT_PORT) {",
                "+      throw new IllegalArgumentException(\"DNS client port \" + port + \" must be > 0 or equal to DEFAULT_PORT\");",
                "+    }",
                "     this.port = port;",
                "@@ -116,2 +126,20 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * @return {@code true} when network activity logging is enabled",
                "+   */",
                "+  public boolean getLogActivity() {",
                "+    return logActivity;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "+   *",
                "+   * @param logActivity true for logging the network activity",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DnsClientOptions setLogActivity(boolean logActivity) {",
                "+    this.logActivity = logActivity;",
                "+    return this;",
                "+  }",
                "+",
                "   public JsonObject toJson() {",
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index a124c7e97..720e1b488 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -28,2 +28,3 @@ import io.netty.handler.codec.dns.DnsResponse;",
                " import io.netty.handler.codec.dns.DnsSection;",
                "+import io.netty.handler.logging.LoggingHandler;",
                " import io.netty.util.collection.IntObjectHashMap;",
                "@@ -36,2 +37,3 @@ import io.vertx.core.VertxException;",
                " import io.vertx.core.dns.DnsClient;",
                "+import io.vertx.core.dns.DnsClientOptions;",
                " import io.vertx.core.dns.DnsException;",
                "@@ -68,9 +70,10 @@ public final class DnsClientImpl implements DnsClient {",
                "   private final DatagramChannel channel;",
                "-  private final long timeoutMillis;",
                "+  private final DnsClientOptions options;",
                "-  public DnsClientImpl(VertxInternal vertx, int port, String host, long timeoutMillis) {",
                "-    if (timeoutMillis < 0) {",
                "-      throw new IllegalArgumentException(\"DNS client timeout \" + timeoutMillis + \" must be > 0\");",
                "-    }",
                "+  public DnsClientImpl(VertxInternal vertx, DnsClientOptions options) {",
                "+    Objects.requireNonNull(options, \"no null options accepted\");",
                "+    Objects.requireNonNull(options.getHost(), \"no null host accepted\");",
                "+    this.options = new DnsClientOptions(options);",
                "+    ",
                "     ContextInternal creatingContext = vertx.getContext();",
                "@@ -80,5 +83,4 @@ public final class DnsClientImpl implements DnsClient {",
                "-    this.dnsServer = new InetSocketAddress(host, port);",
                "+    this.dnsServer = new InetSocketAddress(options.getHost(), options.getPort());",
                "     this.vertx = vertx;",
                "-    this.timeoutMillis = timeoutMillis;",
                "@@ -91,2 +93,5 @@ public final class DnsClientImpl implements DnsClient {",
                "     actualCtx.nettyEventLoop().register(channel);",
                "+    if (options.getLogActivity()) {",
                "+      channel.pipeline().addLast(\"logging\", new LoggingHandler());",
                "+    }",
                "     channel.pipeline().addLast(new DatagramDnsQueryEncoder());",
                "@@ -303,3 +308,3 @@ public final class DnsClientImpl implements DnsClient {",
                "       inProgressMap.put(msg.id(), this);",
                "-      timerID = vertx.setTimer(timeoutMillis, id -> {",
                "+      timerID = vertx.setTimer(options.getQueryTimeout(), id -> {",
                "         timerID = -1;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index 685031ad3..91f01eed3 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -398,3 +398,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public DnsClient createDnsClient(int port, String host) {",
                "-    return new DnsClientImpl(this, port, host, DnsClientOptions.DEFAULT_QUERY_TIMEOUT);",
                "+    return createDnsClient(new DnsClientOptions().setHost(host).setPort(port));",
                "   }",
                "@@ -413,6 +413,8 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       InetSocketAddress address = provider.nameServerAddresses().get(0);",
                "-      host = address.getAddress().getHostAddress();",
                "-      port = address.getPort();",
                "+      // provide the host and port",
                "+      options = new DnsClientOptions(options)",
                "+      .setHost(address.getAddress().getHostAddress())",
                "+      .setPort(address.getPort());",
                "     }",
                "-    return new DnsClientImpl(this, port, host, options.getQueryTimeout());",
                "+    return new DnsClientImpl(this, options);",
                "   }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2445": "",
                "2451": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java, src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, feed",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2445, 2451",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49dda6e685cc91fb7c0899a01d8544395aa141b9",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526307443,
            "hunks": 27,
            "message": "Vertx http headers refactor (#2448) * Move all private instance methods at the bottom of VertxHttpHeaders * Group overloaded methods in VertxHttpHeaders so it's easier to reason about their behavior * Refactor VertxHttpHeaders to remove duplicate code and delegate to CharSequence based methods - fixes #2447 * Make VertxHttpHeaders final",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index 084f3c336..f202918c0 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -34,11 +34,3 @@ import static io.netty.util.AsciiString.*;",
                "  */",
                "-public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-",
                "-  private MultiMap set0(Iterable<Map.Entry<String, String>> map) {",
                "-    clear();",
                "-    for (Map.Entry<String, String> entry: map) {",
                "-      add(entry.getKey(), entry.getValue());",
                "-    }",
                "-    return this;",
                "-  }",
                "+public final class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "@@ -92,7 +84,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(final String name, final String strVal) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    add0(h, i, name, strVal);",
                "-    return this;",
                "+  public HttpHeaders add(String name, Object value) {",
                "+    return add((CharSequence) name, (CharSequence) value);",
                "   }",
                "@@ -100,3 +89,8 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(String name, Iterable values) {",
                "+  public VertxHttpHeaders add(String name, String strVal) {",
                "+    return add((CharSequence) name, strVal);",
                "+  }",
                "+",
                "+  @Override",
                "+  public VertxHttpHeaders add(CharSequence name, Iterable values) {",
                "     int h = AsciiString.hashCode(name);",
                "@@ -109,8 +103,10 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "+  @Override",
                "+  public VertxHttpHeaders add(String name, Iterable values) {",
                "+    return add((CharSequence) name, values);",
                "+  }",
                "+",
                "   @Override",
                "   public MultiMap addAll(MultiMap headers) {",
                "-    for (Map.Entry<String, String> entry: headers.entries()) {",
                "-      add(entry.getKey(), entry.getValue());",
                "-    }",
                "-    return this;",
                "+    return addAll(headers.entries());",
                "   }",
                "@@ -119,3 +115,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   public MultiMap addAll(Map<String, String> map) {",
                "-    for (Map.Entry<String, String> entry: map.entrySet()) {",
                "+    return addAll(map.entrySet());",
                "+  }",
                "+",
                "+  private MultiMap addAll(Iterable<Map.Entry<String, String>> headers) {",
                "+    for (Map.Entry<String, String> entry: headers) {",
                "       add(entry.getKey(), entry.getValue());",
                "@@ -125,15 +125,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "-    // Update the hash table.",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    VertxHttpHeaders.MapEntry newEntry;",
                "-    entries[i] = newEntry = new VertxHttpHeaders.MapEntry(h, name, value);",
                "-    newEntry.next = e;",
                "-",
                "-    // Update the linked list.",
                "-    newEntry.addBefore(head);",
                "-  }",
                "-",
                "   @Override",
                "-  public VertxHttpHeaders remove(final String name) {",
                "+  public VertxHttpHeaders remove(CharSequence name) {",
                "     Objects.requireNonNull(name, \"name\");",
                "@@ -145,36 +134,15 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private void remove0(int h, int i, CharSequence name) {",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    if (e == null) {",
                "-      return;",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders remove(final String name) {",
                "+    return remove((CharSequence) name);",
                "+  }",
                "-    for (;;) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        e.remove();",
                "-        VertxHttpHeaders.MapEntry next = e.next;",
                "-        if (next != null) {",
                "-          entries[i] = next;",
                "-          e = next;",
                "-        } else {",
                "-          entries[i] = null;",
                "-          return;",
                "-        }",
                "-      } else {",
                "-        break;",
                "-      }",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders set(CharSequence name, CharSequence value) {",
                "+    return set0(name, value);",
                "+  }",
                "-    for (;;) {",
                "-      VertxHttpHeaders.MapEntry next = e.next;",
                "-      if (next == null) {",
                "-        break;",
                "-      }",
                "-      if (next.hash == h && AsciiString.contentEqualsIgnoreCase(name, next.key)) {",
                "-        e.next = next.next;",
                "-        next.remove();",
                "-      } else {",
                "-        e = next;",
                "-      }",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders set(String name, String value) {",
                "+    return set((CharSequence)name, value);",
                "   }",
                "@@ -182,12 +150,9 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders set(final String name, final String strVal) {",
                "-    return set0(name, strVal);",
                "+  public VertxHttpHeaders set(String name, Object value) {",
                "+    return set((CharSequence)name, (CharSequence) value);",
                "   }",
                "-  private VertxHttpHeaders set0(final CharSequence name, final CharSequence strVal) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    remove0(h, i, name);",
                "-    add0(h, i, name, strVal);",
                "-    return this;",
                "+  @Override",
                "+  public VertxHttpHeaders set(CharSequence name, Object value) {",
                "+    return set(name, (CharSequence)value);",
                "   }",
                "@@ -195,3 +160,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders set(final String name, final Iterable values) {",
                "+  public VertxHttpHeaders set(CharSequence name, Iterable values) {",
                "     Objects.requireNonNull(values, \"values\");",
                "@@ -213,8 +178,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders clear() {",
                "-    for (int i = 0; i < entries.length; i ++) {",
                "-      entries[i] = null;",
                "-    }",
                "-    head.before = head.after = head;",
                "-    return this;",
                "+  public VertxHttpHeaders set(String name, Iterable values) {",
                "+    return set((CharSequence) name, values);",
                "   }",
                "@@ -222,3 +183,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public boolean contains(String name, String value, boolean ignoreCase) {",
                "+  public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) {",
                "     int h = AsciiString.hashCode(name);",
                "@@ -239,16 +200,21 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    HashingStrategy<CharSequence> strategy = ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER;",
                "-    while (e != null) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        if (strategy.equals(value, e.getValue())) {",
                "-          return true;",
                "-        }",
                "-      }",
                "-      e = e.next;",
                "-    }",
                "-    return false;",
                "+  public boolean contains(String name, String value, boolean ignoreCase) {",
                "+    return contains((CharSequence) name, value, ignoreCase);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean contains(CharSequence name) {",
                "+    return get0(name) != null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean contains(String name) {",
                "+    return contains((CharSequence) name);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String get(CharSequence name) {",
                "+    Objects.requireNonNull(name, \"name\");",
                "+    CharSequence ret = get0(name);",
                "+    return ret != null ? ret.toString() : null;",
                "   }",
                "@@ -256,3 +222,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public String get(final String name) {",
                "+  public String get(String name) {",
                "     return get((CharSequence) name);",
                "@@ -260,3 +226,8 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private CharSequence get0(CharSequence name) {",
                "+  @Override",
                "+  public List<String> getAll(CharSequence name) {",
                "+    Objects.requireNonNull(name, \"name\");",
                "+",
                "+    LinkedList<String> values = new LinkedList<>();",
                "+",
                "     int h = AsciiString.hashCode(name);",
                "@@ -266,3 +237,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "       if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        return e.getValue();",
                "+        values.addFirst(e.getValue().toString());",
                "       }",
                "@@ -270,3 +241,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "     }",
                "-    return null;",
                "+    return values;",
                "   }",
                "@@ -274,3 +245,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public List<String> getAll(final String name) {",
                "+  public List<String> getAll(String name) {",
                "     return getAll((CharSequence) name);",
                "@@ -321,7 +292,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public boolean contains(String name) {",
                "-    return contains((CharSequence) name);",
                "-  }",
                "-",
                "   @Override",
                "@@ -343,52 +309,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public String get(CharSequence name) {",
                "-    Objects.requireNonNull(name, \"name\");",
                "-    CharSequence ret = get0(name);",
                "-    return ret != null ? ret.toString() : null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<String> getAll(CharSequence name) {",
                "-    Objects.requireNonNull(name, \"name\");",
                "-",
                "-    LinkedList<String> values = new LinkedList<>();",
                "-",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    while (e != null) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        values.addFirst(e.getValue().toString());",
                "-      }",
                "-      e = e.next;",
                "-    }",
                "-    return values;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean contains(CharSequence name) {",
                "-    return get0(name) != null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public VertxHttpHeaders add(CharSequence name, Iterable values) {",
                "-    String n = name.toString();",
                "-    for (Object seq: values) {",
                "-      add(n, seq.toString());",
                "-    }",
                "-    return this;",
                "-  }",
                "-",
                "-  @Override",
                "-  public MultiMap set(CharSequence name, CharSequence value) {",
                "-    return set(name.toString(), value.toString());",
                "-  }",
                "-",
                "-  @Override",
                "-  public VertxHttpHeaders set(CharSequence name, Iterable values) {",
                "-    remove(name);",
                "-    String n = name.toString();",
                "-    for (Object seq: values) {",
                "-      add(n, seq.toString());",
                "+  public VertxHttpHeaders clear() {",
                "+    for (int i = 0; i < entries.length; i ++) {",
                "+      entries[i] = null;",
                "     }",
                "+    head.before = head.after = head;",
                "     return this;",
                "@@ -396,7 +317,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public VertxHttpHeaders remove(CharSequence name) {",
                "-    return remove(name.toString());",
                "-  }",
                "-",
                "   public String toString() {",
                "@@ -456,7 +372,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public HttpHeaders add(String name, Object value) {",
                "-    return add((CharSequence) name, (CharSequence) value);",
                "-  }",
                "-",
                "   @Override",
                "@@ -471,7 +382,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public HttpHeaders set(String name, Object value) {",
                "-    return set0(name, (CharSequence) value);",
                "-  }",
                "-",
                "   @Override",
                "@@ -534,2 +440,78 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   }",
                "+",
                "+  private void remove0(int h, int i, CharSequence name) {",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    if (e == null) {",
                "+      return;",
                "+    }",
                "+",
                "+    for (;;) {",
                "+      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "+        e.remove();",
                "+        VertxHttpHeaders.MapEntry next = e.next;",
                "+        if (next != null) {",
                "+          entries[i] = next;",
                "+          e = next;",
                "+        } else {",
                "+          entries[i] = null;",
                "+          return;",
                "+        }",
                "+      } else {",
                "+        break;",
                "+      }",
                "+    }",
                "+",
                "+    for (;;) {",
                "+      VertxHttpHeaders.MapEntry next = e.next;",
                "+      if (next == null) {",
                "+        break;",
                "+      }",
                "+      if (next.hash == h && AsciiString.contentEqualsIgnoreCase(name, next.key)) {",
                "+        e.next = next.next;",
                "+        next.remove();",
                "+      } else {",
                "+        e = next;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "+    // Update the hash table.",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    VertxHttpHeaders.MapEntry newEntry;",
                "+    entries[i] = newEntry = new VertxHttpHeaders.MapEntry(h, name, value);",
                "+    newEntry.next = e;",
                "+",
                "+    // Update the linked list.",
                "+    newEntry.addBefore(head);",
                "+  }",
                "+",
                "+  private VertxHttpHeaders set0(final CharSequence name, final CharSequence strVal) {",
                "+    int h = AsciiString.hashCode(name);",
                "+    int i = index(h);",
                "+    remove0(h, i, name);",
                "+    add0(h, i, name, strVal);",
                "+    return this;",
                "+  }",
                "+",
                "+  private CharSequence get0(CharSequence name) {",
                "+    int h = AsciiString.hashCode(name);",
                "+    int i = index(h);",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    while (e != null) {",
                "+      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "+        return e.getValue();",
                "+      }",
                "+      e = e.next;",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private MultiMap set0(Iterable<Map.Entry<String, String>> map) {",
                "+    clear();",
                "+    for (Map.Entry<String, String> entry: map) {",
                "+      add(entry.getKey(), entry.getValue());",
                "+    }",
                "+    return this;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2448": "",
                "2447": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2448, 2447",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "948632d3d6924bb9ef862b03c8c2dc8cdbe2fa65",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527606237,
            "hunks": 3,
            "message": "Windows redeploy does not provide valid inline verticle configuration - fixes #2480",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java b/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "index 6cb3adb37..a1919142c 100644",
                "--- a/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "+++ b/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.impl.launcher.commands;",
                "+import io.vertx.core.impl.Utils;",
                "+",
                " import java.util.List;",
                "@@ -89,4 +91,8 @@ public class ExecUtils {",
                "       }",
                "-      return buf.append(SINGLE_QUOTE).append(cleanedArgument).append(",
                "+      if (Utils.isWindows()) {",
                "+        return buf.append(DOUBLE_QUOTE).append(cleanedArgument.replace(\"\\\"\", \"\\\\\\\"\")).append(DOUBLE_QUOTE).toString();",
                "+      } else {",
                "+        return buf.append(SINGLE_QUOTE).append(cleanedArgument).append(",
                "           SINGLE_QUOTE).toString();",
                "+      }",
                "     } else if (cleanedArgument.contains(SINGLE_QUOTE)"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2480": "Windows test fixes #2481 Vert.x 3.5.2 umbrella issue vert-x3/issues#352 Launcher system properties are not propagated when the verticle runs as background process (start) #2476"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "453d14e9988a8d672bb6b18cd09ca2bfdf3b46ea"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: line",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2480",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4e93a87708626d6a61eece967e8a88c9dc5f15b8",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526392566,
            "hunks": 2,
            "message": "Return null for JsonObject.mapFrom(null) - fixes #2450",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java",
                "index c5509ec02..804bf8013 100644",
                "--- a/src/main/java/io/vertx/core/json/JsonObject.java",
                "+++ b/src/main/java/io/vertx/core/json/JsonObject.java",
                "@@ -78,2 +78,4 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS",
                "    * Faster than calling `new JsonObject(Json.encode(obj))`.",
                "+   * <p/",
                "+   * Returns {@ode null} when {@code obj} is {@code null}.",
                "    *",
                "@@ -86,3 +88,7 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS",
                "   public static JsonObject mapFrom(Object obj) {",
                "-    return new JsonObject((Map<String, Object>) Json.mapper.convertValue(obj, Map.class));",
                "+    if (obj == null) {",
                "+      return null;",
                "+    } else {",
                "+      return new JsonObject((Map<String, Object>) Json.mapper.convertValue(obj, Map.class));",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/json/JsonObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2450": "Return null for JsonObject.mapFrom(null) vert-x3/issues#370"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/json/JsonObject.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: return",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2450",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f61422f1d664e9c5d7f9778badacac36329005f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523877778,
            "hunks": 91,
            "message": "Time values can be specified with a time unit - fixes #2391 Signed-off-by: okou19900722<ilayan19900722@gmail.com>",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index e1b578b40..e7cd2854f 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -441,2 +441,3 @@ Sets the value of max worker execute time, in ns.",
                " +++",
                "+|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|-",
                " |[[multiThreaded]]`multiThreaded`|`Boolean`|",
                "@@ -2291,2 +2292,6 @@ Sets the value of max event loop execute time, in ns.",
                " +++",
                "+|[[maxEventLoopExecuteTimeUnit]]`maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>maxEventLoopExecuteTime</code>",
                "++++",
                " |[[maxWorkerExecuteTime]]`maxWorkerExecuteTime`|`Number (long)`|",
                "@@ -2295,2 +2300,6 @@ Sets the value of max worker execute time, in ns.",
                " +++",
                "+|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>",
                "++++",
                " |[[metricsOptions]]`metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|",
                "@@ -2311,2 +2320,6 @@ Set the threshold value above this, the blocked warning contains a stack trace.",
                " +++",
                "+|[[warningExceptionTimeUnit]]`warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>warningExceptionTime</code>",
                "++++",
                " |[[workerPoolSize]]`workerPoolSize`|`Number (int)`|",
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 80677da99..e2a9c9e08 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -59,2 +59,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxWorkerExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"multiThreaded\":",
                "@@ -107,2 +112,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    if (obj.getMaxWorkerExecuteTimeUnit() != null) {",
                "+      json.put(\"maxWorkerExecuteTimeUnit\", obj.getMaxWorkerExecuteTimeUnit().name());",
                "+    }",
                "     json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 9df7be9af..fb0ba8bcd 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -24,2 +24,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"blockedThreadCheckIntervalUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setBlockedThreadCheckIntervalUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"clusterHost\":",
                "@@ -94,2 +99,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxEventLoopExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxEventLoopExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"maxWorkerExecuteTime\":",
                "@@ -99,2 +109,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxWorkerExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"metricsOptions\":",
                "@@ -119,2 +134,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"warningExceptionTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setWarningExceptionTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"workerPoolSize\":",
                "@@ -137,2 +157,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "+    if (obj.getBlockedThreadCheckIntervalUnit() != null) {",
                "+      json.put(\"blockedThreadCheckIntervalUnit\", obj.getBlockedThreadCheckIntervalUnit().name());",
                "+    }",
                "     if (obj.getClusterHost() != null) {",
                "@@ -159,3 +182,9 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "+    if (obj.getMaxEventLoopExecuteTimeUnit() != null) {",
                "+      json.put(\"maxEventLoopExecuteTimeUnit\", obj.getMaxEventLoopExecuteTimeUnit().name());",
                "+    }",
                "     json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    if (obj.getMaxWorkerExecuteTimeUnit() != null) {",
                "+      json.put(\"maxWorkerExecuteTimeUnit\", obj.getMaxWorkerExecuteTimeUnit().name());",
                "+    }",
                "     if (obj.getMetricsOptions() != null) {",
                "@@ -166,2 +195,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "+    if (obj.getWarningExceptionTimeUnit() != null) {",
                "+      json.put(\"warningExceptionTimeUnit\", obj.getWarningExceptionTimeUnit().name());",
                "+    }",
                "     json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "diff --git a/src/main/java/examples/CoreExamples.java b/src/main/java/examples/CoreExamples.java",
                "index 198f9e526..780c7e48b 100644",
                "--- a/src/main/java/examples/CoreExamples.java",
                "+++ b/src/main/java/examples/CoreExamples.java",
                "@@ -29,2 +29,3 @@ import io.vertx.core.net.SocketAddress;",
                " import java.util.Arrays;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -100,5 +101,6 @@ public class CoreExamples {",
                "     // 2 minutes",
                "-    long maxExecuteTime = 120000;",
                "+    long maxExecuteTime = 2;",
                "+    TimeUnit maxExecuteTimeUnit = TimeUnit.SECONDS;",
                "-    WorkerExecutor executor = vertx.createSharedWorkerExecutor(\"my-worker-pool\", poolSize, maxExecuteTime);",
                "+    WorkerExecutor executor = vertx.createSharedWorkerExecutor(\"my-worker-pool\", poolSize, maxExecuteTime, maxExecuteTimeUnit);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/DeploymentOptions.java b/src/main/java/io/vertx/core/DeploymentOptions.java",
                "index 91c4e8d3c..632d67607 100644",
                "--- a/src/main/java/io/vertx/core/DeploymentOptions.java",
                "+++ b/src/main/java/io/vertx/core/DeploymentOptions.java",
                "@@ -19,2 +19,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -47,2 +48,3 @@ public class DeploymentOptions {",
                "   private List<String> isolatedClasses;",
                "+  private TimeUnit maxWorkerExecuteTimeUnit;",
                "@@ -61,2 +63,3 @@ public class DeploymentOptions {",
                "     this.maxWorkerExecuteTime = VertxOptions.DEFAULT_MAX_WORKER_EXECUTE_TIME;",
                "+    this.maxWorkerExecuteTimeUnit = VertxOptions.DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT;",
                "   }",
                "@@ -80,2 +83,3 @@ public class DeploymentOptions {",
                "     setMaxWorkerExecuteTime(other.maxWorkerExecuteTime);",
                "+    this.maxWorkerExecuteTimeUnit = other.maxWorkerExecuteTimeUnit;",
                "   }",
                "@@ -327,3 +331,3 @@ public class DeploymentOptions {",
                "   /**",
                "-   * Get the value of max worker execute time, in ns.",
                "+   * Get the value of max worker execute time, in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * <p>",
                "@@ -334,3 +338,3 @@ public class DeploymentOptions {",
                "    *",
                "-   * @return The value of max worker execute time, in ns.",
                "+   * @return The value of max worker execute time, the default value of {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit} {@code maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    */",
                "@@ -341,5 +345,7 @@ public class DeploymentOptions {",
                "   /**",
                "-   * Sets the value of max worker execute time, in ns.",
                "+   * Sets the value of max worker execute time, in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxWorkerExecuteTime the value of max worker execute time, in ns.",
                "+   * @param maxWorkerExecuteTime the value of max worker execute time, in in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -354,2 +360,19 @@ public class DeploymentOptions {",
                "+  /**",
                "+   * @return the time unit of {@code maxWorkerExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxWorkerExecuteTimeUnit() {",
                "+    return maxWorkerExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxWorkerExecuteTime}",
                "+   * @param maxWorkerExecuteTimeUnit the time unit of {@code maxWorkerExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DeploymentOptions setMaxWorkerExecuteTimeUnit(TimeUnit maxWorkerExecuteTimeUnit) {",
                "+    this.maxWorkerExecuteTimeUnit = maxWorkerExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/Starter.java b/src/main/java/io/vertx/core/Starter.java",
                "index 0559be61a..2e71c931c 100644",
                "--- a/src/main/java/io/vertx/core/Starter.java",
                "+++ b/src/main/java/io/vertx/core/Starter.java",
                "@@ -382,2 +382,4 @@ public class Starter {",
                "             arg = Boolean.valueOf(propVal);",
                "+          } else if (argType.isEnum()){",
                "+            arg = Enum.valueOf((Class<? extends Enum>)argType, propVal);",
                "           } else {",
                "diff --git a/src/main/java/io/vertx/core/Vertx.java b/src/main/java/io/vertx/core/Vertx.java",
                "index fc504b728..f90a9207f 100644",
                "--- a/src/main/java/io/vertx/core/Vertx.java",
                "+++ b/src/main/java/io/vertx/core/Vertx.java",
                "@@ -41,2 +41,3 @@ import io.vertx.core.streams.ReadStream;",
                " import java.util.Set;",
                "+import java.util.concurrent.TimeUnit;",
                " import java.util.function.Supplier;",
                "@@ -546,2 +547,7 @@ public interface Vertx extends Measured {",
                "+  /**",
                "+   * Like {@link #createSharedWorkerExecutor(String, int, long, TimeUnit)} but with the {@link TimeUnit#NANOSECONDS ns unit}.",
                "+   */",
                "+  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime);",
                "+",
                "   /**",
                "@@ -551,3 +557,3 @@ public interface Vertx extends Measured {",
                "    * This method can be called mutiple times with the same {@code name}. Executors with the same name will share",
                "-   * the same worker pool. The worker pool size and max execute time are set when the worker pool is created and",
                "+   * the same worker pool. The worker pool size , max execute time and unit of max execute time are set when the worker pool is created and",
                "    * won't change after.<p>",
                "@@ -558,6 +564,7 @@ public interface Vertx extends Measured {",
                "    * @param poolSize the size of the pool",
                "-   * @param maxExecuteTime the value of max worker execute time, in ns",
                "+   * @param maxExecuteTime the value of max worker execute time",
                "+   * @param maxExecuteTimeUnit the value of unit of max worker execute time",
                "    * @return the named worker executor",
                "    */",
                "-  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime);",
                "+  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit);",
                "diff --git a/src/main/java/io/vertx/core/VertxOptions.java b/src/main/java/io/vertx/core/VertxOptions.java",
                "index 1a45b4f28..062726e67 100644",
                "--- a/src/main/java/io/vertx/core/VertxOptions.java",
                "+++ b/src/main/java/io/vertx/core/VertxOptions.java",
                "@@ -22,2 +22,3 @@ import io.vertx.core.spi.cluster.ClusterManager;",
                " import java.util.Objects;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -88,2 +89,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of blocked thread check interval unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT = TimeUnit.MILLISECONDS;",
                "+",
                "   /**",
                "@@ -93,2 +99,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of max event loop execute time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "+",
                "   /**",
                "@@ -98,2 +109,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of max worker execute time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "+",
                "   /**",
                "@@ -128,3 +144,8 @@ public class VertxOptions {",
                "    */",
                "-  private static final long DEFAULT_WARNING_EXCEPTION_TIME = 5L * 1000 * 1000000;",
                "+  private static final long DEFAULT_WARNING_EXCEPTION_TIME = TimeUnit.SECONDS.toNanos(5);",
                "+",
                "+  /**",
                "+   * The default value of warning exception time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "@@ -146,2 +167,6 @@ public class VertxOptions {",
                "   private boolean preferNativeTransport = DEFAULT_PREFER_NATIVE_TRANSPORT;",
                "+  private TimeUnit maxEventLoopExecuteTimeUnit = DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT;",
                "+  private TimeUnit maxWorkerExecuteTimeUnit = DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT;",
                "+  private TimeUnit warningExceptionTimeUnit = DEFAULT_WARNING_EXCEPTION_TIME_UNIT;",
                "+  private TimeUnit blockedThreadCheckIntervalUnit = DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT;",
                "@@ -174,2 +199,6 @@ public class VertxOptions {",
                "     this.fileResolverCachingEnabled = other.fileResolverCachingEnabled;",
                "+    this.maxEventLoopExecuteTimeUnit = other.maxEventLoopExecuteTimeUnit;",
                "+    this.maxWorkerExecuteTimeUnit = other.maxWorkerExecuteTimeUnit;",
                "+    this.warningExceptionTimeUnit = other.warningExceptionTimeUnit;",
                "+    this.blockedThreadCheckIntervalUnit = other.blockedThreadCheckIntervalUnit;",
                "   }",
                "@@ -383,7 +412,9 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of blocked thread check period, in ms.",
                "+   * Get the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    * <p>",
                "    * This setting determines how often Vert.x will check whether event loop threads are executing for too long.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit} is {@link TimeUnit#MILLISECONDS}.",
                "    *",
                "-   * @return the value of blocked thread check period, in ms.",
                "+   * @return the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    */",
                "@@ -394,5 +425,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of blocked thread check period, in ms.",
                "+   * Sets the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit} is {@link TimeUnit#MILLISECONDS}",
                "    *",
                "-   * @param blockedThreadCheckInterval the value of blocked thread check period, in ms.",
                "+   * @param blockedThreadCheckInterval the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -408,3 +441,3 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of max event loop execute time, in ns.",
                "+   * Get the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    * <p>",
                "@@ -414,4 +447,6 @@ public class VertxOptions {",
                "    * holy Event Loop.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @return the value of max event loop execute time, in ns.",
                "+   * @return the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    */",
                "@@ -422,5 +457,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of max event loop execute time, in ns.",
                "+   * Sets the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxEventLoopExecuteTime the value of max event loop execute time, in ns.",
                "+   * @param maxEventLoopExecuteTime the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -436,3 +473,3 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of max worker execute time, in ns.",
                "+   * Get the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * <p>",
                "@@ -442,4 +479,6 @@ public class VertxOptions {",
                "    * can be blocked longer than event loop threads, they shouldn't be blocked for long periods of time.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @return The value of max worker execute time, in ns.",
                "+   * @return The value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    */",
                "@@ -450,5 +489,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of max worker execute time, in ns.",
                "+   * Sets the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxWorkerExecuteTime the value of max worker execute time, in ns.",
                "+   * @param maxWorkerExecuteTime the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -600,3 +641,5 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the threshold value above this, the blocked warning contains a stack trace.",
                "+   * Get the threshold value above this, the blocked warning contains a stack trace. in {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "@@ -609,3 +652,4 @@ public class VertxOptions {",
                "   /**",
                "-   * Set the threshold value above this, the blocked warning contains a stack trace.",
                "+   * Set the threshold value above this, the blocked warning contains a stack trace. in {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit}.",
                "+   * The default value of {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "@@ -695,2 +739,74 @@ public class VertxOptions {",
                "+  /**",
                "+   * @return the time unit of {@code maxEventLoopExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxEventLoopExecuteTimeUnit() {",
                "+    return maxEventLoopExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxEventLoopExecuteTime}.",
                "+   *",
                "+   * @param maxEventLoopExecuteTimeUnit the time unit of {@code maxEventLoopExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setMaxEventLoopExecuteTimeUnit(TimeUnit maxEventLoopExecuteTimeUnit) {",
                "+    this.maxEventLoopExecuteTimeUnit = maxEventLoopExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code maxWorkerExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxWorkerExecuteTimeUnit() {",
                "+    return maxWorkerExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxWorkerExecuteTime}.",
                "+   *",
                "+   * @param maxWorkerExecuteTimeUnit the time unit of {@code maxWorkerExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setMaxWorkerExecuteTimeUnit(TimeUnit maxWorkerExecuteTimeUnit) {",
                "+    this.maxWorkerExecuteTimeUnit = maxWorkerExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code warningExceptionTime}",
                "+   */",
                "+  public TimeUnit getWarningExceptionTimeUnit() {",
                "+    return warningExceptionTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code warningExceptionTime}.",
                "+   *",
                "+   * @param warningExceptionTimeUnit the time unit of {@code warningExceptionTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setWarningExceptionTimeUnit(TimeUnit warningExceptionTimeUnit) {",
                "+    this.warningExceptionTimeUnit = warningExceptionTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code blockedThreadCheckInterval}",
                "+   */",
                "+  public TimeUnit getBlockedThreadCheckIntervalUnit() {",
                "+    return blockedThreadCheckIntervalUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code blockedThreadCheckInterval}.",
                "+   *",
                "+   * @param blockedThreadCheckIntervalUnit the time unit of {@code warningExceptionTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setBlockedThreadCheckIntervalUnit(TimeUnit blockedThreadCheckIntervalUnit) {",
                "+    this.blockedThreadCheckIntervalUnit = blockedThreadCheckIntervalUnit;",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "@@ -706,4 +822,7 @@ public class VertxOptions {",
                "     if (blockedThreadCheckInterval != that.blockedThreadCheckInterval) return false;",
                "+    if (blockedThreadCheckIntervalUnit != that.blockedThreadCheckIntervalUnit) return false;",
                "     if (maxEventLoopExecuteTime != that.maxEventLoopExecuteTime) return false;",
                "+    if (maxEventLoopExecuteTimeUnit != that.maxEventLoopExecuteTimeUnit) return false;",
                "     if (maxWorkerExecuteTime != that.maxWorkerExecuteTime) return false;",
                "+    if (maxWorkerExecuteTimeUnit != that.maxWorkerExecuteTimeUnit) return false;",
                "     if (haEnabled != that.haEnabled) return false;",
                "@@ -711,2 +830,3 @@ public class VertxOptions {",
                "     if (warningExceptionTime != that.warningExceptionTime) return false;",
                "+    if (warningExceptionTimeUnit != that.warningExceptionTimeUnit) return false;",
                "     if (clusterManager != null ? !clusterManager.equals(that.clusterManager) : that.clusterManager != null)",
                "@@ -741,2 +861,6 @@ public class VertxOptions {",
                "     result = 31 * result + (int) (warningExceptionTime ^ (warningExceptionTime >>> 32));",
                "+    result = 31 * result + (maxEventLoopExecuteTimeUnit != null ? maxEventLoopExecuteTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (maxWorkerExecuteTimeUnit != null ? maxWorkerExecuteTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (warningExceptionTimeUnit != null ? warningExceptionTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (blockedThreadCheckIntervalUnit != null ? blockedThreadCheckIntervalUnit.hashCode() : 0);",
                "     return result;",
                "@@ -750,4 +874,7 @@ public class VertxOptions {",
                "         \", internalBlockingPoolSize=\" + internalBlockingPoolSize +",
                "+        \", blockedThreadCheckIntervalUnit=\" + blockedThreadCheckIntervalUnit +",
                "         \", blockedThreadCheckInterval=\" + blockedThreadCheckInterval +",
                "+        \", maxEventLoopExecuteTimeUnit=\" + maxEventLoopExecuteTimeUnit +",
                "         \", maxEventLoopExecuteTime=\" + maxEventLoopExecuteTime +",
                "+        \", maxWorkerExecuteTimeUnit=\" + maxWorkerExecuteTimeUnit +",
                "         \", maxWorkerExecuteTime=\" + maxWorkerExecuteTime +",
                "@@ -763,2 +890,3 @@ public class VertxOptions {",
                "         \", eventbus=\" + eventBusOptions.toJson() +",
                "+        \", warningExceptionTimeUnit=\" + warningExceptionTimeUnit +",
                "         \", warningExceptionTime=\" + warningExceptionTime +",
                "diff --git a/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java b/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "index 781a7d84d..fc545fa49 100644",
                "--- a/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "+++ b/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "@@ -21,2 +21,3 @@ import java.util.TimerTask;",
                " import java.util.WeakHashMap;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -33,3 +34,3 @@ public class BlockedThreadChecker {",
                "-  BlockedThreadChecker(long interval, long warningExceptionTime) {",
                "+  BlockedThreadChecker(long interval, TimeUnit intervalUnit, long warningExceptionTime, TimeUnit warningExceptionTimeUnit) {",
                "     timer = new Timer(\"vertx-blocked-thread-checker\", true);",
                "@@ -44,5 +45,7 @@ public class BlockedThreadChecker {",
                "             final long timeLimit = thread.getMaxExecTime();",
                "-            if (execStart != 0 && dur > timeLimit) {",
                "-              final String message = \"Thread \" + thread + \" has been blocked for \" + (dur / 1000000) + \" ms, time limit is \" + (timeLimit / 1000000);",
                "-              if (dur <= warningExceptionTime) {",
                "+            TimeUnit maxExecTimeUnit = thread.getMaxExecTimeUnit();",
                "+            long val = maxExecTimeUnit.convert(dur, TimeUnit.NANOSECONDS);",
                "+            if (execStart != 0 && val >= timeLimit) {",
                "+              final String message = \"Thread \" + thread + \" has been blocked for \" + (dur / 1_000_000) + \" ms, time limit is \" + TimeUnit.MILLISECONDS.convert(timeLimit, maxExecTimeUnit) + \" ms\";",
                "+              if (warningExceptionTimeUnit.convert(dur, TimeUnit.NANOSECONDS) <= warningExceptionTime) {",
                "                 log.warn(message);",
                "@@ -57,3 +60,3 @@ public class BlockedThreadChecker {",
                "       }",
                "-    }, interval, interval);",
                "+    }, intervalUnit.toMillis(interval), intervalUnit.toMillis(interval));",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/impl/DeploymentManager.java b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "index 48d676a13..14d7efb09 100644",
                "--- a/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "+++ b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "@@ -469,3 +469,3 @@ public class DeploymentManager {",
                "     for (Verticle verticle: verticles) {",
                "-      WorkerExecutorInternal workerExec = poolName != null ? vertx.createSharedWorkerExecutor(poolName, options.getWorkerPoolSize(), options.getMaxWorkerExecuteTime()) : null;",
                "+      WorkerExecutorInternal workerExec = poolName != null ? vertx.createSharedWorkerExecutor(poolName, options.getWorkerPoolSize(), options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()) : null;",
                "       WorkerPool pool = workerExec != null ? workerExec.getPool() : null;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index 91f01eed3..c07a2afa9 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -145,2 +145,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   private final long defaultWorkerMaxExecTime;",
                "+  private final TimeUnit defaultWorkerMaxExecTimeUnit;",
                "   private final CloseHooks closeHooks;",
                "@@ -164,6 +165,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     closeHooks = new CloseHooks(log);",
                "-    checker = new BlockedThreadChecker(options.getBlockedThreadCheckInterval(), options.getWarningExceptionTime());",
                "-    eventLoopThreadFactory = new VertxThreadFactory(\"vert.x-eventloop-thread-\", checker, false, options.getMaxEventLoopExecuteTime());",
                "+    checker = new BlockedThreadChecker(options.getBlockedThreadCheckInterval(), options.getBlockedThreadCheckIntervalUnit(), options.getWarningExceptionTime(), options.getWarningExceptionTimeUnit());",
                "+    eventLoopThreadFactory = new VertxThreadFactory(\"vert.x-eventloop-thread-\", checker, false, options.getMaxEventLoopExecuteTime(), options.getMaxEventLoopExecuteTimeUnit());",
                "     eventLoopGroup = transport.eventLoopGroup(options.getEventLoopPoolSize(), eventLoopThreadFactory, NETTY_IO_RATIO);",
                "-    ThreadFactory acceptorEventLoopThreadFactory = new VertxThreadFactory(\"vert.x-acceptor-thread-\", checker, false, options.getMaxEventLoopExecuteTime());",
                "+    ThreadFactory acceptorEventLoopThreadFactory = new VertxThreadFactory(\"vert.x-acceptor-thread-\", checker, false, options.getMaxEventLoopExecuteTime(), options.getMaxEventLoopExecuteTimeUnit());",
                "     // The acceptor event loop thread needs to be from a different pool otherwise can get lags in accepted connections",
                "@@ -175,6 +176,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     ExecutorService workerExec = Executors.newFixedThreadPool(options.getWorkerPoolSize(),",
                "-        new VertxThreadFactory(\"vert.x-worker-thread-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "+        new VertxThreadFactory(\"vert.x-worker-thread-\", checker, true, options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()));",
                "     PoolMetrics workerPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-worker-thread\", options.getWorkerPoolSize()) : null;",
                "     ExecutorService internalBlockingExec = Executors.newFixedThreadPool(options.getInternalBlockingPoolSize(),",
                "-        new VertxThreadFactory(\"vert.x-internal-blocking-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "+        new VertxThreadFactory(\"vert.x-internal-blocking-\", checker, true, options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()));",
                "     PoolMetrics internalBlockingPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-internal-blocking\", options.getInternalBlockingPoolSize()) : null;",
                "@@ -185,2 +186,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     defaultWorkerMaxExecTime = options.getMaxWorkerExecuteTime();",
                "+    defaultWorkerMaxExecTimeUnit = options.getMaxWorkerExecuteTimeUnit();",
                "@@ -1024,2 +1026,7 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public synchronized WorkerExecutorImpl createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime) {",
                "+    return createSharedWorkerExecutor(name, poolSize, maxExecuteTime, TimeUnit.NANOSECONDS);",
                "+  }",
                "+",
                "+  @Override",
                "+  public synchronized WorkerExecutorImpl createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit) {",
                "     if (poolSize < 1) {",
                "@@ -1032,3 +1039,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     if (sharedWorkerPool == null) {",
                "-      ExecutorService workerExec = Executors.newFixedThreadPool(poolSize, new VertxThreadFactory(name + \"-\", checker, true, maxExecuteTime));",
                "+      ExecutorService workerExec = Executors.newFixedThreadPool(poolSize, new VertxThreadFactory(name + \"-\", checker, true, maxExecuteTime, maxExecuteTimeUnit));",
                "       PoolMetrics workerMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", name, poolSize) : null;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxInternal.java b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "index 170af7588..c44ef08f9 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "@@ -31,2 +31,3 @@ import java.util.Map;",
                " import java.util.concurrent.ExecutorService;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -83,2 +84,5 @@ public interface VertxInternal extends Vertx {",
                "+  @Override",
                "+  WorkerExecutorInternal createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit);",
                "+",
                "   void simulateKill();",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxThread.java b/src/main/java/io/vertx/core/impl/VertxThread.java",
                "index f472b2d4e..5d22b4891 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxThread.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxThread.java",
                "@@ -15,2 +15,4 @@ import io.netty.util.concurrent.FastThreadLocalThread;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                " /**",
                "@@ -22,2 +24,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "   private final long maxExecTime;",
                "+  private final TimeUnit maxExecTimeUnit;",
                "   private long execStart;",
                "@@ -25,3 +28,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "-  public VertxThread(Runnable target, String name, boolean worker, long maxExecTime) {",
                "+  public VertxThread(Runnable target, String name, boolean worker, long maxExecTime, TimeUnit maxExecTimeUnit) {",
                "     super(target, name);",
                "@@ -29,2 +32,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "     this.maxExecTime = maxExecTime;",
                "+    this.maxExecTimeUnit = maxExecTimeUnit;",
                "   }",
                "@@ -58,2 +62,6 @@ public final class VertxThread extends FastThreadLocalThread {",
                "   }",
                "+",
                "+  public TimeUnit getMaxExecTimeUnit() {",
                "+    return maxExecTimeUnit;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxThreadFactory.java b/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "index 3450d5eac..dc4d0c781 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.impl;",
                "+import io.vertx.core.VertxOptions;",
                "+",
                " import java.util.Map;",
                "@@ -16,2 +18,3 @@ import java.util.WeakHashMap;",
                " import java.util.concurrent.ThreadFactory;",
                "+import java.util.concurrent.TimeUnit;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -37,4 +40,5 @@ public class VertxThreadFactory implements ThreadFactory {",
                "   private final long maxExecTime;",
                "+  private final TimeUnit maxExecTimeUnit;",
                "-  VertxThreadFactory(String prefix, BlockedThreadChecker checker, boolean worker, long maxExecTime) {",
                "+  VertxThreadFactory(String prefix, BlockedThreadChecker checker, boolean worker, long maxExecTime, TimeUnit maxExecTimeUnit) {",
                "     this.prefix = prefix;",
                "@@ -43,2 +47,3 @@ public class VertxThreadFactory implements ThreadFactory {",
                "     this.maxExecTime = maxExecTime;",
                "+    this.maxExecTimeUnit = maxExecTimeUnit;",
                "   }",
                "@@ -54,3 +59,3 @@ public class VertxThreadFactory implements ThreadFactory {",
                "   public Thread newThread(Runnable runnable) {",
                "-    VertxThread t = new VertxThread(runnable, prefix + threadCount.getAndIncrement(), worker, maxExecTime);",
                "+    VertxThread t = new VertxThread(runnable, prefix + threadCount.getAndIncrement(), worker, maxExecTime, maxExecTimeUnit);",
                "     // Vert.x threads are NOT daemons - we want them to prevent JVM exit so embededd user doesn't",
                "diff --git a/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java b/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "index cb59f53a6..79deb1372 100644",
                "--- a/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "+++ b/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "@@ -278,2 +278,4 @@ public class BareCommand extends ClasspathHandler {",
                "             arg = Boolean.valueOf(propVal);",
                "+          } else if (argType.isEnum()){",
                "+            arg = Enum.valueOf((Class<? extends Enum>)argType, propVal);",
                "           } else {"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/java/examples/CoreExamples.java",
                "src/main/java/io/vertx/core/DeploymentOptions.java",
                "src/main/java/io/vertx/core/Starter.java",
                "src/main/java/io/vertx/core/Vertx.java",
                "src/main/java/io/vertx/core/VertxOptions.java",
                "src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/impl/VertxInternal.java",
                "src/main/java/io/vertx/core/impl/VertxThread.java",
                "src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2391": "closed #2393 fix typo of comment and support custom time unit of max execute time #2394"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/Starter.java, src/main/java/io/vertx/core/impl/BlockedThreadChecker.java, src/main/java/io/vertx/core/DeploymentOptions.java, src/main/java/io/vertx/core/Vertx.java, src/main/java/io/vertx/core/impl/VertxInternal.java, src/main/java/io/vertx/core/impl/VertxThread.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/impl/VertxThreadFactory.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/java/io/vertx/core/impl/DeploymentManager.java, src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/java/io/vertx/core/VertxOptions.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: value",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2391",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "37f281bee87f212e80dd5b5520cef0ff7bad56fb",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526826448,
            "hunks": 10,
            "message": "Simplify the worker executor close, the actual code before change was looking like it might be a leak and it's actually not, and also make sure we remove the close hooks when the worker executor is closed - fixes #2464",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index c07a2afa9..e23fb8415 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -1007,3 +1007,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "         if (--refCount == 0) {",
                "-          releaseWorkerExecutor(name);",
                "+          namedWorkerPools.remove(name);",
                "           super.close();",
                "@@ -1046,3 +1046,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     ContextImpl context = getOrCreateContext();",
                "-    WorkerExecutorImpl namedExec = new WorkerExecutorImpl(this, sharedWorkerPool, true);",
                "+    WorkerExecutorImpl namedExec = new WorkerExecutorImpl(context, sharedWorkerPool);",
                "     context.addCloseHook(namedExec);",
                "@@ -1051,6 +1051,2 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  synchronized void releaseWorkerExecutor(String name) {",
                "-    namedWorkerPools.remove(name);",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java b/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "index bfe2b71b9..0d041e966 100644",
                "--- a/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "@@ -13,6 +13,3 @@ package io.vertx.core.impl;",
                "-import io.vertx.core.AsyncResult;",
                "-import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.Vertx;",
                "+import io.vertx.core.*;",
                " import io.vertx.core.spi.metrics.Metrics;",
                "@@ -26,11 +23,9 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "-  private final Vertx vertx;",
                "-  private final WorkerPool pool;",
                "+  private final Context ctx;",
                "+  private final VertxImpl.SharedWorkerPool pool;",
                "   private boolean closed;",
                "-  private final boolean releaseOnClose;",
                "-  public WorkerExecutorImpl(Vertx vertx, WorkerPool pool, boolean releaseOnClose) {",
                "-    this.vertx = vertx;",
                "+  public WorkerExecutorImpl(Context ctx, VertxImpl.SharedWorkerPool pool) {",
                "+    this.ctx = ctx;",
                "     this.pool = pool;",
                "-    this.releaseOnClose = releaseOnClose;",
                "   }",
                "@@ -50,3 +45,3 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "   public Vertx vertx() {",
                "-    return vertx;",
                "+    return ctx.owner();",
                "   }",
                "@@ -62,3 +57,3 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "     }",
                "-    ContextImpl context = (ContextImpl) vertx.getOrCreateContext();",
                "+    ContextImpl context = (ContextImpl) ctx.owner().getOrCreateContext();",
                "     context.executeBlocking(blockingCodeHandler, asyncResultHandler, pool.executor(), ordered ? context.orderedTasks : null, pool.metrics());",
                "@@ -75,5 +70,4 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "     }",
                "-    if (releaseOnClose && pool instanceof VertxImpl.SharedWorkerPool) {",
                "-      ((VertxImpl.SharedWorkerPool)pool).release();",
                "-    }",
                "+    ctx.removeCloseHook(this);",
                "+    pool.release();",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2464": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec08c0719784ace6909866e31b817e15ac71d00c"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java, src/main/java/io/vertx/core/impl/VertxImpl.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2464",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a4facc3af9a68602a4e35c42ec3b1cc22d05673d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526724517,
            "hunks": 5,
            "message": "Incorrect VertxHttp2Stream checkNextTick implementation - fixes #2457",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "index b01bd4b09..e0ecbee62 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "@@ -38,2 +38,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "   private boolean ended;",
                "+  private boolean sentCheck;",
                "   private MultiMap trailers;",
                "@@ -66,3 +67,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "           pending.add(data);",
                "-          checkNextTick(null);",
                "+          checkNextTick();",
                "         }",
                "@@ -99,14 +100,22 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "    */",
                "-  private void checkNextTick(Void v) {",
                "-    synchronized (conn) {",
                "-      if (!paused) {",
                "-        Buffer buf = pending.poll();",
                "-        conn.handler.consume(stream, buf.length());",
                "-        handleData(buf);",
                "-        if (pending.size() > 0) {",
                "-          vertx.runOnContext(this::checkNextTick);",
                "-        } else if (ended) {",
                "-          handleEnd(trailers);",
                "+  private void checkNextTick() {",
                "+    if (!paused && pending.size() > 0 && !sentCheck) {",
                "+      sentCheck = true;",
                "+      context.runOnContext(v1 -> {",
                "+        synchronized (conn) {",
                "+          sentCheck = false;",
                "+          if (!paused) {",
                "+            Buffer buf = pending.poll();",
                "+            conn.handler.consume(stream, buf.length());",
                "+            handleData(buf);",
                "+            if (pending.isEmpty()) {",
                "+              if (ended) {",
                "+                handleEnd(trailers);",
                "+              }",
                "+            } else {",
                "+              checkNextTick();",
                "+            }",
                "+          }",
                "         }",
                "-      }",
                "+      });",
                "     }",
                "@@ -124,3 +133,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "     paused = false;",
                "-    context.runOnContext(this::checkNextTick);",
                "+    checkNextTick();",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2457": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "940f187773fdac4c7771bac8226bffe530a5d9cf"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2457",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "513b18b909a144b75ff755414cd0625150149a3d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527141754,
            "hunks": 5,
            "message": "Osgi support for issue 2126 (#2471) OSGi support for issue 2126",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "index 22b73f1c3..05b66d5a3 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -124,17 +124,18 @@ public class FileResolver {",
                "         }",
                "+",
                "+        //https://github.com/eclipse/vert.x/issues/2126",
                "+        //Cache all elements in the parent directory if it exists",
                "+        //this is so that listing the directory after an individual file has",
                "+        //been read works.",
                "+        String parentFileName = file.getParent();",
                "+        if (parentFileName != null) {",
                "+          URL directoryContents = cl.getResource(parentFileName);",
                "+          if (directoryContents != null) {",
                "+            unpackUrlResource(directoryContents, parentFileName, cl, true);",
                "+          }",
                "+        }",
                "+",
                "         URL url = cl.getResource(fileName);",
                "         if (url != null) {",
                "-          String prot = url.getProtocol();",
                "-          switch (prot) {",
                "-            case \"file\":",
                "-              return unpackFromFileURL(url, fileName, cl);",
                "-            case \"jar\":",
                "-              return unpackFromJarURL(url, fileName, cl);",
                "-            case \"bundle\": // Apache Felix, Knopflerfish",
                "-            case \"bundleentry\": // Equinox",
                "-            case \"bundleresource\": // Equinox",
                "-              return unpackFromBundleURL(url);",
                "-            default:",
                "-              throw new IllegalStateException(\"Invalid url protocol: \" + prot);",
                "-          }",
                "+          return unpackUrlResource(url, fileName, cl, false);",
                "         }",
                "@@ -145,2 +146,19 @@ public class FileResolver {",
                "+  private File unpackUrlResource(URL url, String fileName, ClassLoader cl, boolean isDir) {",
                "+    String prot = url.getProtocol();",
                "+    switch (prot) {",
                "+      case \"file\":",
                "+        return unpackFromFileURL(url, fileName, cl);",
                "+      case \"jar\":",
                "+        return unpackFromJarURL(url, fileName, cl);",
                "+      case \"bundle\": // Apache Felix, Knopflerfish",
                "+      case \"bundleentry\": // Equinox",
                "+      case \"bundleresource\": // Equinox",
                "+        return unpackFromBundleURL(url, isDir);",
                "+      default:",
                "+        throw new IllegalStateException(\"Invalid url protocol: \" + prot);",
                "+    }",
                "+  }",
                "+",
                "+",
                "   private synchronized File unpackFromFileURL(URL url, String fileName, ClassLoader cl) {",
                "@@ -256,3 +274,3 @@ public class FileResolver {",
                "    */",
                "-  private synchronized File unpackFromBundleURL(URL url) {",
                "+  private synchronized File unpackFromBundleURL(URL url, boolean isDir) {",
                "     try {",
                "@@ -260,3 +278,3 @@ public class FileResolver {",
                "       file.getParentFile().mkdirs();",
                "-      if (url.toExternalForm().endsWith(\"/\")) {",
                "+      if (url.toExternalForm().endsWith(\"/\")  || isDir) {",
                "         // Directory"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/file/impl/FileResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2471": "Hydrate vert.x cache for directory on first access #2395"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "633f1a01ee9c01f7f90134d75b82228e0309a30b"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2471",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fdb42095237e2f601083ea7cff49298ea73c4e0c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526282502,
            "hunks": 72,
            "message": "Regen properly indented converters",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 2650781c8..80677da99 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setExtraClasspath(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -47,3 +47,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setIsolatedClasses(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -96,4 +96,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"ha\", obj.isHa());",
                "-      json.put(\"instances\", obj.getInstances());",
                "+    json.put(\"ha\", obj.isHa());",
                "+    json.put(\"instances\", obj.getInstances());",
                "     if (obj.getIsolatedClasses() != null) {",
                "@@ -106,5 +106,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "-      json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "-      json.put(\"worker\", obj.isWorker());",
                "+    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "+    json.put(\"worker\", obj.isWorker());",
                "     if (obj.getWorkerPoolName() != null) {",
                "@@ -112,3 +112,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 7d9101de4..9df7be9af 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -136,3 +136,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "+    json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "     if (obj.getClusterHost() != null) {",
                "@@ -140,5 +140,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "-      json.put(\"clusterPort\", obj.getClusterPort());",
                "+    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+    json.put(\"clusterPort\", obj.getClusterPort());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -146,4 +146,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-      json.put(\"clustered\", obj.isClustered());",
                "+    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+    json.put(\"clustered\", obj.isClustered());",
                "     if (obj.getEventBusOptions() != null) {",
                "@@ -151,5 +151,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "-      json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "-      json.put(\"haEnabled\", obj.isHAEnabled());",
                "+    json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "+    json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "+    json.put(\"haEnabled\", obj.isHAEnabled());",
                "     if (obj.getHAGroup() != null) {",
                "@@ -157,5 +157,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "-      json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "-      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "+    json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "+    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "     if (obj.getMetricsOptions() != null) {",
                "@@ -163,6 +163,6 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "-      json.put(\"quorumSize\", obj.getQuorumSize());",
                "-      json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "-      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+    json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "+    json.put(\"quorumSize\", obj.getQuorumSize());",
                "+    json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "+    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index 5518d3439..e447ef56e 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -67,6 +67,6 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"hidden\", obj.isHidden());",
                "-      json.put(\"index\", obj.getIndex());",
                "-      json.put(\"multiValued\", obj.isMultiValued());",
                "-      json.put(\"required\", obj.isRequired());",
                "+    json.put(\"hidden\", obj.isHidden());",
                "+    json.put(\"index\", obj.getIndex());",
                "+    json.put(\"multiValued\", obj.isMultiValued());",
                "+    json.put(\"required\", obj.isRequired());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 95710c44d..573c377d7 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setChoices(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -104,5 +104,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"flag\", obj.isFlag());",
                "-      json.put(\"help\", obj.isHelp());",
                "-      json.put(\"hidden\", obj.isHidden());",
                "+    json.put(\"flag\", obj.isFlag());",
                "+    json.put(\"help\", obj.isHelp());",
                "+    json.put(\"hidden\", obj.isHidden());",
                "     if (obj.getLongName() != null) {",
                "@@ -110,3 +110,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"multiValued\", obj.isMultiValued());",
                "+    json.put(\"multiValued\", obj.isMultiValued());",
                "     if (obj.getName() != null) {",
                "@@ -114,3 +114,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"required\", obj.isRequired());",
                "+    json.put(\"required\", obj.isRequired());",
                "     if (obj.getShortName() != null) {",
                "@@ -118,3 +118,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"singleValued\", obj.isSingleValued());",
                "+    json.put(\"singleValued\", obj.isSingleValued());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index d24c59d29..0655bd233 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -48,5 +48,5 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(DatagramSocketOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"broadcast\", obj.isBroadcast());",
                "-      json.put(\"ipV6\", obj.isIpV6());",
                "-      json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "+    json.put(\"broadcast\", obj.isBroadcast());",
                "+    json.put(\"ipV6\", obj.isIpV6());",
                "+    json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "     if (obj.getMulticastNetworkInterface() != null) {",
                "@@ -54,3 +54,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "+    json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 5397419a5..65b0b3322 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -77,3 +77,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setSearchDomains(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -87,3 +87,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setServers(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -98,5 +98,5 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(AddressResolverOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "-      json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "-      json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "+    json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "+    json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "+    json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "     if (obj.getHostsPath() != null) {",
                "@@ -107,8 +107,8 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxQueries\", obj.getMaxQueries());",
                "-      json.put(\"ndots\", obj.getNdots());",
                "-      json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "-      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "-      json.put(\"rdFlag\", obj.getRdFlag());",
                "-      json.put(\"rotateServers\", obj.isRotateServers());",
                "+    json.put(\"maxQueries\", obj.getMaxQueries());",
                "+    json.put(\"ndots\", obj.getNdots());",
                "+    json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "+    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"rdFlag\", obj.getRdFlag());",
                "+    json.put(\"rotateServers\", obj.isRotateServers());",
                "     if (obj.getSearchDomains() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index e2131f73c..8a1ff5914 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -41,4 +41,4 @@ public class DnsClientOptionsConverter {",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 391f9dc0a..5ff4427fa 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -60,3 +60,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -68,3 +68,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -76,3 +76,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -86,3 +86,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setEnabledSecureTransportProtocols(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -242,3 +242,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(EventBusOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -246,4 +246,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -251,5 +251,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-      json.put(\"clustered\", obj.isClustered());",
                "-      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+    json.put(\"clustered\", obj.isClustered());",
                "+    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getCrlPaths() != null) {",
                "@@ -277,3 +277,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -284,3 +284,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"logActivity\", obj.getLogActivity());",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "     if (obj.getOpenSslEngineOptions() != null) {",
                "@@ -300,18 +300,18 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "-      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-      json.put(\"reusePort\", obj.isReusePort());",
                "-      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-      json.put(\"soLinger\", obj.getSoLinger());",
                "-      json.put(\"ssl\", obj.isSsl());",
                "-      json.put(\"tcpCork\", obj.isTcpCork());",
                "-      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "-      json.put(\"trafficClass\", obj.getTrafficClass());",
                "-      json.put(\"trustAll\", obj.isTrustAll());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+    json.put(\"reusePort\", obj.isReusePort());",
                "+    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+    json.put(\"soLinger\", obj.getSoLinger());",
                "+    json.put(\"ssl\", obj.isSsl());",
                "+    json.put(\"tcpCork\", obj.isTcpCork());",
                "+    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+    json.put(\"trafficClass\", obj.getTrafficClass());",
                "+    json.put(\"trustAll\", obj.isTrustAll());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -319,4 +319,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"useAlpn\", obj.isUseAlpn());",
                "-      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+    json.put(\"useAlpn\", obj.isUseAlpn());",
                "+    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 0ff20edbc..fd2e58d1e 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -43,6 +43,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(CopyOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"atomicMove\", obj.isAtomicMove());",
                "-      json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "-      json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "-      json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "+    json.put(\"atomicMove\", obj.isAtomicMove());",
                "+    json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "+    json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "+    json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index e787fbd55..a4d130c45 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -78,7 +78,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"append\", obj.isAppend());",
                "-      json.put(\"create\", obj.isCreate());",
                "-      json.put(\"createNew\", obj.isCreateNew());",
                "-      json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "-      json.put(\"dsync\", obj.isDsync());",
                "+    json.put(\"append\", obj.isAppend());",
                "+    json.put(\"create\", obj.isCreate());",
                "+    json.put(\"createNew\", obj.isCreateNew());",
                "+    json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "+    json.put(\"dsync\", obj.isDsync());",
                "     if (obj.getPerms() != null) {",
                "@@ -86,7 +86,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"read\", obj.isRead());",
                "-      json.put(\"sparse\", obj.isSparse());",
                "-      json.put(\"sync\", obj.isSync());",
                "-      json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "-      json.put(\"write\", obj.isWrite());",
                "+    json.put(\"read\", obj.isRead());",
                "+    json.put(\"sparse\", obj.isSparse());",
                "+    json.put(\"sync\", obj.isSync());",
                "+    json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "+    json.put(\"write\", obj.isWrite());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index d3943631c..8759fe0ef 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -41,4 +41,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"errorCode\", obj.getErrorCode());",
                "-      json.put(\"lastStreamId\", obj.getLastStreamId());",
                "+    json.put(\"errorCode\", obj.getErrorCode());",
                "+    json.put(\"lastStreamId\", obj.getLastStreamId());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 3b5040d6a..1b969013b 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -53,8 +53,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(Http2Settings obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "-      json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "-      json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "-      json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "-      json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "-      json.put(\"pushEnabled\", obj.isPushEnabled());",
                "+    json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "+    json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "+    json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "+    json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "+    json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "+    json.put(\"pushEnabled\", obj.isPushEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 1c3cc7e2f..74bf05c01 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -22,3 +22,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setAlpnVersions(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -173,3 +173,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "     if (obj.getDefaultHost() != null) {",
                "@@ -177,9 +177,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"defaultPort\", obj.getDefaultPort());",
                "-      json.put(\"forceSni\", obj.isForceSni());",
                "-      json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "-      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "-      json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "-      json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "-      json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "+    json.put(\"defaultPort\", obj.getDefaultPort());",
                "+    json.put(\"forceSni\", obj.isForceSni());",
                "+    json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "+    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+    json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "+    json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "+    json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -187,15 +187,15 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"keepAlive\", obj.isKeepAlive());",
                "-      json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "-      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-      json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "-      json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "-      json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "-      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "-      json.put(\"pipelining\", obj.isPipelining());",
                "-      json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "-      json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "+    json.put(\"keepAlive\", obj.isKeepAlive());",
                "+    json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "+    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+    json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "+    json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "+    json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "+    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+    json.put(\"pipelining\", obj.isPipelining());",
                "+    json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "+    json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "     if (obj.getProtocolVersion() != null) {",
                "@@ -203,5 +203,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "-      json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "-      json.put(\"verifyHost\", obj.isVerifyHost());",
                "+    json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "+    json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "+    json.put(\"verifyHost\", obj.isVerifyHost());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index 9ef8c2dd0..b4bb830bb 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setAlpnVersions(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -103,3 +103,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(HttpServerOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "+    json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "     if (obj.getAlpnVersions() != null) {",
                "@@ -109,8 +109,8 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "-      json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "-      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "-      json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "-      json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "-      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+    json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "+    json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "+    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+    json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "+    json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "+    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -118,7 +118,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "     if (obj.getWebsocketSubProtocols() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index 7c4b08bda..4e8e3ecb1 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(MetricsOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"enabled\", obj.isEnabled());",
                "+    json.put(\"enabled\", obj.isEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index 669e12761..143ac4f2e 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -48,3 +48,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(ClientOptionsBase obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getLocalAddress() != null) {",
                "@@ -58,3 +58,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"trustAll\", obj.isTrustAll());",
                "+    json.put(\"trustAll\", obj.isTrustAll());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index e5fc5981e..a199d4d73 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -41,4 +41,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index 15a23f16b..57b495235 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -53,3 +53,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetServerOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -57,3 +57,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "+    json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "     if (obj.getHost() != null) {",
                "@@ -61,4 +61,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"sni\", obj.isSni());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"sni\", obj.isSni());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 4a7df8034..5ae451029 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -53,8 +53,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetworkOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"logActivity\", obj.getLogActivity());",
                "-      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-      json.put(\"reusePort\", obj.isReusePort());",
                "-      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-      json.put(\"trafficClass\", obj.getTrafficClass());",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "+    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+    json.put(\"reusePort\", obj.isReusePort());",
                "+    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+    json.put(\"trafficClass\", obj.getTrafficClass());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index daaf23d12..564a56f8f 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenSSLEngineOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "+    json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index e64da5513..0731fb547 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setCertPaths(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -42,3 +42,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setCertValues(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -57,3 +57,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setKeyPaths(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -72,3 +72,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setKeyValues(list);",
                "-         }",
                "+          }",
                "           break;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index 5186be9b3..d588e65ec 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -20,3 +20,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index b79ad843d..07f4d5c06 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -54,3 +54,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "+    json.put(\"port\", obj.getPort());",
                "     if (obj.getType() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index 151f90562..4b5021c49 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -20,3 +20,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -36,3 +36,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -46,3 +46,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setEnabledSecureTransportProtocols(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -167,3 +167,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -189,9 +189,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"soLinger\", obj.getSoLinger());",
                "-      json.put(\"ssl\", obj.isSsl());",
                "-      json.put(\"tcpCork\", obj.isTcpCork());",
                "-      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+    json.put(\"soLinger\", obj.getSoLinger());",
                "+    json.put(\"ssl\", obj.isSsl());",
                "+    json.put(\"tcpCork\", obj.isTcpCork());",
                "+    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -199,4 +199,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"useAlpn\", obj.isUseAlpn());",
                "-      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+    json.put(\"useAlpn\", obj.isUseAlpn());",
                "+    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, HttpServer",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: httpclient, httpserver, client, server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "82f81465c4f171bf0de1ee9f7d603088f7ed35fe",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526724766,
            "hunks": 3,
            "message": "Invoke endHandler immediately when a webSocket connection is closed. Signed-off-by: JinGan <jg_513@163.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "index 320748127..b9374a65b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "@@ -422,7 +422,7 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS",
                "   void handleClosed() {",
                "+    Handler<Void> endHandler;",
                "     synchronized (conn) {",
                "       cleanupHandlers();",
                "-      if (endHandler != null) {",
                "-        conn.getContext().runOnContext(endHandler);",
                "-      }",
                "+      endHandler = this.endHandler;",
                "+      Handler<Void> closeHandler = this.closeHandler;",
                "       if (closeHandler != null) {",
                "@@ -431,2 +431,5 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS",
                "     }",
                "+    if (endHandler != null) {",
                "+      endHandler.handle(null);",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea14e2deffbb0a863bb2d11a74e2c4d13e188239"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e2dda5e54009a2cd89bfe0f0620d49eae72a0db7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523188859,
            "hunks": 37,
            "message": "Don't keep a reference in the HTTP pool connection listener to the connection waiter - fixes #2477",
            "diff": [
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 1482091bb..45272f8f7 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR2</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2.CR2'",
                "+  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 7d2864f9f..1e52efeaf 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -21,2 +21,3 @@ import io.netty.handler.timeout.IdleStateHandler;",
                " import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Future;",
                " import io.vertx.core.Handler;",
                "@@ -24,2 +25,3 @@ import io.vertx.core.http.HttpClientOptions;",
                " import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.impl.pool.ConnectResult;",
                " import io.vertx.core.http.impl.pool.ConnectionListener;",
                "@@ -91,7 +93,8 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   @Override",
                "-  public void connect(ConnectionListener<HttpClientConnection> listener, ContextImpl context) {",
                "+  public void connect(ConnectionListener<HttpClientConnection> listener, ContextImpl context, Handler<AsyncResult<ConnectResult<HttpClientConnection>>> handler) {",
                "+    Future<ConnectResult<HttpClientConnection>> future = Future.<ConnectResult<HttpClientConnection>>future().setHandler(handler);",
                "     try {",
                "-      doConnect(listener, context);",
                "+      doConnect(listener, context, future);",
                "     } catch(Exception e) {",
                "-      listener.onConnectFailure(context, e);",
                "+      future.tryFail(e);",
                "     }",
                "@@ -101,3 +104,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     ConnectionListener<HttpClientConnection> listener,",
                "-    ContextImpl context) {",
                "+    ContextImpl context,",
                "+    Future<ConnectResult<HttpClientConnection>> future) {",
                "@@ -132,3 +136,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                 applyHttp2ConnectionOptions(ch.pipeline());",
                "-                http2Connected(listener, context, ch);",
                "+                http2Connected(listener, context, ch, future);",
                "               } else {",
                "@@ -137,3 +141,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                   HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "-                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch, http1Weight);",
                "+                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch, http1Weight, future);",
                "               }",
                "@@ -141,6 +145,6 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "               applyHttp1xConnectionOptions(ch.pipeline());",
                "-              http1xConnected(listener, version, host, port, true, context, ch, http1Weight);",
                "+              http1xConnected(listener, version, host, port, true, context, ch, http1Weight, future);",
                "             }",
                "           } else {",
                "-            handshakeFailure(context, ch, fut.cause(), listener);",
                "+            handshakeFailure(ch, fut.cause(), listener, future);",
                "           }",
                "@@ -167,8 +171,8 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "             if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "-              http1xConnected(listener, version, host, port, false, context, ch, http2Weight);",
                "+              http1xConnected(listener, version, host, port, false, context, ch, http2Weight, future);",
                "             } else {",
                "-              http2Connected(listener, context, ch);",
                "+              http2Connected(listener, context, ch, future);",
                "             }",
                "           } else {",
                "-            http1xConnected(listener, version, host, port, false, context, ch, http1Weight);",
                "+            http1xConnected(listener, version, host, port, false, context, ch, http1Weight, future);",
                "           }",
                "@@ -176,3 +180,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       } else {",
                "-        connectFailed(context, null, listener, res.cause());",
                "+        connectFailed(null, listener, res.cause(), future);",
                "       }",
                "@@ -212,3 +216,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  private void handshakeFailure(ContextImpl context, Channel ch, Throwable cause, ConnectionListener<HttpClientConnection> listener) {",
                "+  private void handshakeFailure(Channel ch, Throwable cause, ConnectionListener<HttpClientConnection> listener, Future<ConnectResult<HttpClientConnection>> future) {",
                "     SSLHandshakeException sslException = new SSLHandshakeException(\"Failed to create SSL connection\");",
                "@@ -217,3 +221,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    connectFailed(context, ch, listener, sslException);",
                "+    connectFailed(ch, listener, sslException, future);",
                "   }",
                "@@ -226,3 +230,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                                ContextImpl context,",
                "-                               Channel ch, long weight) {",
                "+                               Channel ch, long weight,",
                "+                               Future<ConnectResult<HttpClientConnection>> future) {",
                "     boolean upgrade = version == HttpVersion.HTTP_2 && options.isHttp2ClearTextUpgrade();",
                "@@ -241,5 +246,5 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       if (upgrade) {",
                "-        listener.onConnectSuccess(new Http2UpgradedClientConnection(client, conn), 1, ch, context, http2Weight);",
                "+        future.complete(new ConnectResult<>(new Http2UpgradedClientConnection(client, conn), 1, ch, context, http2Weight));",
                "       } else {",
                "-        listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, http1Weight);",
                "+        future.complete(new ConnectResult<>(conn, http1MaxConcurrency, ch, context, http1Weight));",
                "       }",
                "@@ -254,6 +259,7 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                               ContextImpl context,",
                "-                              Channel ch) {",
                "+                              Channel ch,",
                "+                              Future<ConnectResult<HttpClientConnection>> future) {",
                "     try {",
                "       VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, metric, listener, context, (conn, concurrency) -> {",
                "-        listener.onConnectSuccess(conn, concurrency, ch, context, http2Weight);",
                "+        future.complete(new ConnectResult<>(conn, concurrency, ch, context, http2Weight));",
                "       });",
                "@@ -262,3 +268,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     } catch (Exception e) {",
                "-      connectFailed(context, ch, listener, e);",
                "+      connectFailed(ch, listener, e, future);",
                "     }",
                "@@ -266,3 +272,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  private void connectFailed(ContextImpl context, Channel ch, ConnectionListener<HttpClientConnection> listener, Throwable t) {",
                "+  private void connectFailed(Channel ch, ConnectionListener<HttpClientConnection> listener, Throwable t, Future<ConnectResult<HttpClientConnection>> future) {",
                "     if (ch != null) {",
                "@@ -273,3 +279,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    listener.onConnectFailure(context, t);",
                "+    future.tryFail(t);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "new file mode 100644",
                "index 000000000..9acc3b20c",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+package io.vertx.core.http.impl.pool;",
                "+",
                "+import io.netty.channel.Channel;",
                "+import io.vertx.core.impl.ContextImpl;",
                "+",
                "+public class ConnectResult<C> {",
                "+",
                "+  private final C conn;",
                "+  private final long concurrency;",
                "+  private final Channel channel;",
                "+  private final ContextImpl context;",
                "+  private final long weight;",
                "+",
                "+  public ConnectResult(C connection, long concurrency, Channel channel, ContextImpl context, long weight) {",
                "+    this.conn = connection;",
                "+    this.concurrency = concurrency;",
                "+    this.channel = channel;",
                "+    this.context = context;",
                "+    this.weight = weight;",
                "+  }",
                "+",
                "+  public C connection() {",
                "+    return conn;",
                "+  }",
                "+",
                "+  public long concurrency() {",
                "+    return concurrency;",
                "+  }",
                "+",
                "+  public Channel channel() {",
                "+    return channel;",
                "+  }",
                "+",
                "+  public ContextImpl context() {",
                "+    return context;",
                "+  }",
                "+",
                "+  public long weight() {",
                "+    return weight;",
                "+  }",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "index 831e628ec..3770a3e97 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "@@ -13,5 +13,2 @@ package io.vertx.core.http.impl.pool;",
                "-import io.netty.channel.Channel;",
                "-import io.vertx.core.impl.ContextImpl;",
                "-",
                " /**",
                "@@ -22,25 +19,2 @@ public interface ConnectionListener<C> {",
                "-  /**",
                "-   * Signals the connection succeeded, provide all the info required to manage the connection",
                "-   *",
                "-   * @param conn the connection",
                "-   * @param concurrency the connection concurrency",
                "-   * @param channel the channel",
                "-   * @param context the context",
                "-   * @param actualWeight the actual weight",
                "-   */",
                "-  void onConnectSuccess(C conn,",
                "-                        long concurrency,",
                "-                        Channel channel,",
                "-                        ContextImpl context,",
                "-                        long actualWeight);",
                "-",
                "-  /**",
                "-   * Signals the connection failed.",
                "-   *",
                "-   * @param context the context",
                "-   * @param err the error",
                "-   */",
                "-  void onConnectFailure(ContextImpl context, Throwable err);",
                "-",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "index 92173ffc8..e83278574 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.http.impl.pool;",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Handler;",
                " import io.vertx.core.impl.ContextImpl;",
                "@@ -23,4 +25,3 @@ public interface ConnectionProvider<C> {",
                "   /**",
                "-   * Connect to the server and signals the {@code listener} the success with {@link ConnectionListener#onConnectSuccess}",
                "-   * or the failure with {@link ConnectionListener#onConnectFailure}.",
                "+   * Connect to the server.",
                "    *",
                "@@ -28,4 +29,5 @@ public interface ConnectionProvider<C> {",
                "    * @param context the context to use for the connection",
                "+   * @param resultHandler the handler notified with the connection success or failure",
                "    */",
                "-  void connect(ConnectionListener<C> listener, ContextImpl context);",
                "+  void connect(ConnectionListener<C> listener, ContextImpl context, Handler<AsyncResult<ConnectResult<C>>> resultHandler);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index 840780650..b189f916b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -239,39 +239,4 @@ public class Pool<C> {",
                "-  private void createConnection(Waiter<C> waiter) {",
                "-    Holder<C> holder  = new Holder<>();",
                "-    ConnectionListener<C> listener = new ConnectionListener<C>() {",
                "-      public void onConnectSuccess(C conn, long concurrency, Channel channel, ContextImpl context, long actualWeight) {",
                "-        // Update state",
                "-        synchronized (Pool.this) {",
                "-          initConnection(holder, context, concurrency, conn, channel, actualWeight);",
                "-        }",
                "-        // Init connection - state might change (i.e init could close the connection)",
                "-        synchronized (Pool.this) {",
                "-          if (holder.capacity == 0) {",
                "-            waitersQueue.add(waiter);",
                "-            checkPending();",
                "-            return;",
                "-          }",
                "-          waitersCount--;",
                "-          holder.capacity--;",
                "-          if (holder.capacity > 0) {",
                "-            available.add(holder);",
                "-          }",
                "-        }",
                "-        waiter.handler.handle(Future.succeededFuture(holder.connection));",
                "-        synchronized (Pool.this) {",
                "-          checkPending();",
                "-        }",
                "-      }",
                "-      @Override",
                "-      public void onConnectFailure(ContextImpl context, Throwable err) {",
                "-        waiter.handler.handle(Future.failedFuture(err));",
                "-        synchronized (Pool.this) {",
                "-          waitersCount--;",
                "-          Pool.this.weight -= initialWeight;",
                "-          holder.removed = true;",
                "-          checkPending();",
                "-          checkClose();",
                "-        }",
                "-      }",
                "+  private ConnectionListener<C> createListener(Holder<C> holder) {",
                "+    return new ConnectionListener<C>() {",
                "       @Override",
                "@@ -295,2 +260,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -307,2 +273,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -317,3 +284,42 @@ public class Pool<C> {",
                "     };",
                "-    connector.connect(listener, waiter.context);",
                "+  }",
                "+",
                "+  private void createConnection(Waiter<C> waiter) {",
                "+    Holder<C> holder  = new Holder<>();",
                "+    ConnectionListener<C> listener = createListener(holder);",
                "+    connector.connect(listener, waiter.context, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        ConnectResult<C> result = ar.result();",
                "+        // Update state",
                "+        synchronized (Pool.this) {",
                "+          initConnection(holder, result.context(), result.concurrency(), result.connection(), result.channel(), result.weight());",
                "+        }",
                "+        // Init connection - state might change (i.e init could close the connection)",
                "+        synchronized (Pool.this) {",
                "+          if (holder.capacity == 0) {",
                "+            waitersQueue.add(waiter);",
                "+            checkPending();",
                "+            return;",
                "+          }",
                "+          waitersCount--;",
                "+          holder.capacity--;",
                "+          if (holder.capacity > 0) {",
                "+            available.add(holder);",
                "+          }",
                "+        }",
                "+        waiter.handler.handle(Future.succeededFuture(holder.connection));",
                "+        synchronized (Pool.this) {",
                "+          checkPending();",
                "+        }",
                "+      } else {",
                "+        waiter.handler.handle(Future.failedFuture(ar.cause()));",
                "+        synchronized (Pool.this) {",
                "+          waitersCount--;",
                "+          Pool.this.weight -= initialWeight;",
                "+          holder.removed = true;",
                "+          checkPending();",
                "+          checkClose();",
                "+        }",
                "+      }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "src/main/asciidoc/java/override/dependencies.adoc",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2477": "Http1xClientConnection holds unnecessary references to ended client request/response objects vert-x3/issues#375 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HttpClient, x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2477",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "10b50161541775ce2ded24e49550ee5f476eaaaf",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527243010,
            "hunks": 3,
            "message": "Remove useless InetSocketAddress resolution bypass for IP (that did not work) since the address resolver does the same but that works",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "index a8c967137..adc41a5fa 100644",
                "--- a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "+++ b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "@@ -20,2 +20,3 @@ import io.netty.channel.socket.InternetProtocolFamily;",
                " import io.netty.handler.logging.LoggingHandler;",
                "+import io.netty.util.NetUtil;",
                " import io.vertx.core.AsyncResult;",
                "@@ -233,15 +234,12 @@ public class DatagramSocketImpl implements DatagramSocket, MetricsProvider {",
                "     Objects.requireNonNull(host, \"no null host accepted\");",
                "-    InetSocketAddress addr = InetSocketAddress.createUnresolved(host, port);",
                "-    if (addr.isUnresolved()) {",
                "-      context.owner().resolveAddress(host, res -> {",
                "-        if (res.succeeded()) {",
                "-          doSend(packet, new InetSocketAddress(res.result(), port), handler);",
                "-        } else {",
                "-          handler.handle(Future.failedFuture(res.cause()));",
                "-        }",
                "-      });",
                "-    } else {",
                "-      // If it's immediately resolved it means it was just an IP address so no need to async resolve",
                "-      doSend(packet, addr, handler);",
                "+    if (port < 0 || port > 65535) {",
                "+      throw new IllegalArgumentException(\"port out of range:\" + port);",
                "     }",
                "+    context.owner().resolveAddress(host, res -> {",
                "+      if (res.succeeded()) {",
                "+        doSend(packet, new InetSocketAddress(res.result(), port), handler);",
                "+      } else {",
                "+        handler.handle(Future.failedFuture(res.cause()));",
                "+      }",
                "+    });",
                "     if (metrics != null) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a4d13b6e25d51de3b73df9cee6bf47f6ac66fdf9",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527232913,
            "hunks": 4,
            "message": "Extract the ConnectionListener creation in a separate method in Pool",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index 068f9791c..d7af13fe9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -239,5 +239,4 @@ public class Pool<C> {",
                "-  private void createConnection(Waiter<C> waiter) {",
                "-    Holder<C> holder  = new Holder<>();",
                "-    ConnectionListener<C> listener = new ConnectionListener<C>() {",
                "+  private ConnectionListener<C> createListener(Holder<C> holder) {",
                "+    return new ConnectionListener<C>() {",
                "       @Override",
                "@@ -261,2 +260,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -273,2 +273,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -283,2 +284,7 @@ public class Pool<C> {",
                "     };",
                "+  }",
                "+",
                "+  private void createConnection(Waiter<C> waiter) {",
                "+    Holder<C> holder  = new Holder<>();",
                "+    ConnectionListener<C> listener = createListener(holder);",
                "     connector.connect(listener, waiter.context, ar -> {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "9b5feb3d90b78b50f22dc40c658f87c974f3555d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527521452,
            "hunks": 2,
            "message": "Releasing 3.5.2-SNAPSHOT",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0f12cf14e..cc1c2e51a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR3</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2.CR3</stack.version>",
                "+    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "     <jetty.alpnAgent.argLine/>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "852cdeb44f87caf547d9f490dc75700222d74233"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "77fe9d034cd2b997663c82e1039fd3c870f24260",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526889496,
            "hunks": 4,
            "message": "Releasing 3.5.2.CR2",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..46d6f9ac5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR2</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2.CR2</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index d63189d03..1482091bb 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR1</version>",
                "+  <version>3.5.2.CR2</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2.CR1'",
                "+  compile 'io.vertx:vertx-core:3.5.2.CR2'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "711491cefbe584a247733f609d61425a82c15a3e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527521395,
            "hunks": 4,
            "message": "Releasing 3.5.2.CR3",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..0f12cf14e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR3</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2.CR3</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 45272f8f7..dc253bf7f 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR3</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                "+  compile 'io.vertx:vertx-core:3.5.2.CR3'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "b9ef5efd0bdbe53279bd2e172171f74d5152b6e7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527663508,
            "hunks": 0,
            "message": "Merge pull request #2481 from eclipse/windows-test-fixes Windows test fixes",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2481": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4df0dbb81408a31ebd4c7e7fa62b6d91cb6a1003",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526459848,
            "hunks": 0,
            "message": "Merge pull request #2440 from eclipse/racy-clustered-eventbus-construction ClusteredEventBus racy initialization - fixes #2438 - fixes #2439",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2440": "ClusteredEventBus racy initialization #2438",
                "2438": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440",
                "2439": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2440, 2438, 2439",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f4c504f586195886e2e3cea880c1325f4e4ac237",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526412797,
            "hunks": 0,
            "message": "Merge pull request #2454 from tsegismont/http2-headers-contains Use Http2Headers.contains instead of default MultiMap implementation",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2454": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header, request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2454",
                    "relevance": 2
                }
            ]
        }
    ]
}
