{
    "advisory_record": {
        "cve_id": "CVE-2018-1273",
        "description": "Spring Data Commons, versions prior to 1.13 to 1.13.10, 2.0 to 2.0.5, and older unsupported versions, contain a property binder vulnerability caused by improper neutralization of special elements. An unauthenticated remote malicious user (or attacker) can supply specially crafted request parameters against Spring Data REST backed HTTP resources or using Spring Data's projection-based request payload binding hat can lead to a remote code execution attack.",
        "reserved_timestamp": 1512518400,
        "published_timestamp": 1523318400,
        "updated_timestamp": 1658512684,
        "repository_url": null,
        "references": {
            "https://pivotal.io/security/cve-2018-1273": 4,
            "": 3,
            "http://mail-archives.apache.org/mod_mbox/ignite-dev/201807.mbox/%3CCAK0qHnqzfzmCDFFi6c5Jok19zNkVCz5Xb4sU%3D0f2J_1i4p46zQ%40mail.gmail.com%3E": 2,
            "https://www.oracle.com/security-alerts/cpujul2022.html": 2,
            "https://jira.spring.io/browse/DATACMNS-1282": 2,
            "commit::b1a20ae1e82a63f99b3afc6f2aaedb3bf4dc432a": 2,
            "commit::ae1dd2741ce06d44a0966ecbd6f47beabde2b653": 2
        },
        "affected_products": [
            "HTTP",
            "Data",
            "Commons",
            "Spring Framework",
            "Spring"
        ],
        "versions": {
            "status": "affected",
            "version": "Versions prior to 1.13 to 1.13.10, 2.0 to 2.0.5, and older unsupported versions"
        },
        "files": [
            "REST",
            "HTTP",
            "projection-based"
        ],
        "keywords": [
            "base",
            "supply",
            "cause",
            "code",
            "user",
            "attacker",
            "execution",
            "data",
            "binder",
            "parameter",
            "bind",
            "commons",
            "resource",
            "request",
            "version",
            "projection",
            "property",
            "payload",
            "contain",
            "element",
            "neutralization",
            "vulnerability",
            "rest",
            "http",
            "spring",
            "back",
            "craft",
            "attack",
            "lead"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "b1a20ae1e82a63f99b3afc6f2aaedb3bf4dc432a",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522160518,
            "hunks": 7,
            "message": "DATACMNS-1282 - Switched to SimpleEvaluationContext in MapDataBinder.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/MapDataBinder.java b/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "index fc9d165f2..cf7db6a2b 100644",
                "--- a/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "+++ b/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "@@ -41,12 +41,8 @@ import org.springframework.expression.AccessException;",
                " import org.springframework.expression.EvaluationContext;",
                "-import org.springframework.expression.EvaluationException;",
                " import org.springframework.expression.Expression;",
                "-import org.springframework.expression.TypeLocator;",
                " import org.springframework.expression.TypedValue;",
                " import org.springframework.expression.spel.SpelEvaluationException;",
                "-import org.springframework.expression.spel.SpelMessage;",
                " import org.springframework.expression.spel.SpelParserConfiguration;",
                " import org.springframework.expression.spel.standard.SpelExpressionParser;",
                "-import org.springframework.expression.spel.support.StandardEvaluationContext;",
                "-import org.springframework.expression.spel.support.StandardTypeConverter;",
                "+import org.springframework.expression.spel.support.SimpleEvaluationContext;",
                " import org.springframework.util.Assert;",
                "@@ -110,9 +106,2 @@ class MapDataBinder extends WebDataBinder {",
                " \t\t\t\tnew SpelParserConfiguration(false, true));",
                "-\t\tprivate static final TypeLocator REJECTING_LOCATOR = new TypeLocator() {",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tpublic Class<?> findType(String typeName) throws EvaluationException {",
                "-\t\t\t\tthrow new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);",
                "-\t\t\t}",
                "-\t\t};",
                "@@ -174,10 +163,2 @@ class MapDataBinder extends WebDataBinder {",
                "-\t\t\tStandardEvaluationContext context = new StandardEvaluationContext();",
                "-\t\t\tcontext.addPropertyAccessor(new PropertyTraversingMapAccessor(type, conversionService));",
                "-\t\t\tcontext.setTypeConverter(new StandardTypeConverter(conversionService));",
                "-\t\t\tcontext.setTypeLocator(REJECTING_LOCATOR);",
                "-\t\t\tcontext.setRootObject(map);",
                "-",
                "-\t\t\tExpression expression = PARSER.parseExpression(propertyName);",
                "-",
                " \t\t\tPropertyPath leafProperty = getPropertyPath(propertyName).getLeafProperty();",
                "@@ -198,2 +179,11 @@ class MapDataBinder extends WebDataBinder {",
                "+\t\t\tEvaluationContext context = SimpleEvaluationContext //",
                "+",
                "+\t\t\t\t\t.forPropertyAccessors(new PropertyTraversingMapAccessor(type, conversionService)) //",
                "+\t\t\t\t\t.withConversionService(conversionService) //",
                "+\t\t\t\t\t.withRootObject(map) //",
                "+\t\t\t\t\t.build();",
                "+",
                "+\t\t\tExpression expression = PARSER.parseExpression(propertyName);",
                "+",
                " \t\t\ttry {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/MapDataBinder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae1dd2741ce06d44a0966ecbd6f47beabde2b653"
                ],
                [
                    "no-tag",
                    "08d748a6fd0173a8ba0aa1f240c38afbdaf4ad9f"
                ]
            ],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: bind, binder",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: binder, bind",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55f9f04c8fd03fbb3db8d2251cc1a0196a8ae8e1",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515749504,
            "hunks": 29,
            "message": "DATACMNS-1206 - Polishing. Moved PropertyDescriptor lookup into dedicated subclass to group functionality around the type and MethodsMetadata instances. Extracted individual stream handling steps into dedicated methods for better understandability. Moved MethodsMetadataReader into classreading package for symmetry with Spring Framework's metadata arrangement. Removed manually declared getters in DefaultMethodsMetadataReader in favor of Lombok getters. Inlined MethodsMetadataReadingVisitor into DefaultMethodsMetadataReader as it's only used there. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 7f24d23ef..926bc1fa8 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.projection;",
                "+import lombok.extern.slf4j.Slf4j;",
                "+",
                " import java.beans.PropertyDescriptor;",
                "@@ -20,3 +22,2 @@ import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "-import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -31,7 +32,7 @@ import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "-import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                " import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.util.Assert;",
                "@@ -63,3 +64,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tthis.projectionType = type;",
                "-\t\tthis.properties = collectDescriptors(type);",
                "+\t\tthis.properties = new PropertyDescriptorSource(type).getDescriptors();",
                " \t}",
                "@@ -109,100 +110,168 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t/**",
                "-\t * Collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                " \t *",
                "-\t * @param type must not be {@literal null}.",
                "+\t * @param descriptor must not be {@literal null}.",
                " \t * @return",
                " \t */",
                "-\tprivate static List<PropertyDescriptor> collectDescriptors(Class<?> type) {",
                "+\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "-\t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "+\t\tMethod method = descriptor.getReadMethod();",
                "-\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "-\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+\t\treturn method == null ? false : method.isDefault();",
                "+\t}",
                "-\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "-\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "-\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "-\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "-\t\t\t\t.orElse(stream);",
                "+\t/**",
                "+\t * Internal helper to detect {@link PropertyDescriptor} instances for a given type.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @author Oliver Gierke",
                "+\t * @since 2.1",
                "+\t * @soundtrack The Meters - Cissy Strut (Here Comes The Meter Man)",
                "+\t */",
                "+\t@Slf4j",
                "+\tprivate static class PropertyDescriptorSource {",
                "-\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+\t\tprivate final Class<?> type;",
                "+\t\tprivate final Optional<MethodsMetadata> metadata;",
                "-\t\tif (metadata.isPresent()) {",
                "+\t\t/**",
                "+\t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "+\t\t * ",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t */",
                "+\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "-\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "-\t\t\t\t\t.map(Arrays::stream) //",
                "-\t\t\t\t\t.orElse(Stream.empty());",
                "+\t\t\tAssert.notNull(type, \"Type must not be null!\");",
                "-\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "-\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "-\t\t\t\t\t.flatMap(List::stream) //",
                "-\t\t\t\t\t.collect(Collectors.toList()));",
                "-\t\t} else {",
                "+\t\t\tthis.type = type;",
                "+\t\t\tthis.metadata = getMetadata(type);",
                "+\t\t}",
                "-\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "-\t\t\t}",
                "+\t\t/**",
                "+\t\t * Returns {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                " \t\t}",
                "-\t\treturn result.stream().distinct().collect(Collectors.toList());",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Recursively collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super",
                "+\t\t * interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<PropertyDescriptor> collectDescriptors() {",
                "+",
                "+\t\t\tStream<PropertyDescriptor> allButDefaultGetters = Arrays.stream(BeanUtils.getPropertyDescriptors(type)) //",
                "+\t\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\t\tStream<PropertyDescriptor> ownDescriptors = metadata.map(it -> filterAndOrder(allButDefaultGetters, it))",
                "+\t\t\t\t\t.orElse(allButDefaultGetters);",
                "-\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+\t\t\tStream<PropertyDescriptor> superTypeDescriptors = metadata.map(this::fromMetadata) //",
                "+\t\t\t\t\t.orElseGet(this::fromType) //",
                "+\t\t\t\t\t.flatMap(it -> new PropertyDescriptorSource(it).collectDescriptors());",
                "-\t\ttry {",
                "-\t\t\treturn ClassUtils.forName(className, classLoader);",
                "-\t\t} catch (ClassNotFoundException e) {",
                "-\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t\treturn Stream.concat(ownDescriptors, superTypeDescriptors);",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "-\t *",
                "-\t * @param metadata",
                "-\t * @return",
                "-\t */",
                "-\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "+\t\t * methods seen by the given {@link MethodsMetadata}.",
                "+\t\t * ",
                "+\t\t * @param source must not be {@literal null}.",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Stream<PropertyDescriptor> filterAndOrder(Stream<PropertyDescriptor> source,",
                "+\t\t\t\tMethodsMetadata metadata) {",
                "+",
                "+\t\t\tMap<String, Integer> orderedMethods = getMethodOrder(metadata);",
                "+",
                "+\t\t\tif (orderedMethods.isEmpty()) {",
                "+\t\t\t\treturn source;",
                "+\t\t\t}",
                "-\t\tList<String> methods = metadata.getMethods() //",
                "-\t\t\t\t.stream() //",
                "-\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "-\t\t\t\t.distinct() //",
                "-\t\t\t\t.collect(Collectors.toList());",
                "+\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "+\t\t}",
                "-\t\treturn IntStream.range(0, methods.size()) //",
                "-\t\t\t\t.boxed() //",
                "-\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromMetadata(MethodsMetadata metadata) {",
                "+\t\t\treturn Arrays.stream(metadata.getInterfaceNames()).map(it -> findType(it, type.getInterfaces()));",
                "+\t\t}",
                "-\t/**",
                "-\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "-\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "-\t *",
                "-\t * @param type must not be {@literal null}.",
                "-\t * @return the optional {@link MethodsMetadata}.",
                "-\t */",
                "-\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromType() {",
                "+\t\t\treturn Arrays.stream(type.getInterfaces());",
                "+\t\t}",
                "-\t\ttry {",
                "+\t\t/**",
                "+\t\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t\t *",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t * @return the optional {@link MethodsMetadata}.",
                "+\t\t */",
                "+\t\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "-\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "-\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "-\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "-\t\t} catch (IOException e) {",
                "-\t\t\treturn Optional.empty();",
                "+\t\t\ttry {",
                "+",
                "+\t\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+",
                "+\t\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+",
                "+\t\t\t} catch (IOException e) {",
                "+",
                "+\t\t\t\tLOG.info(\"Couldn't read class metadata for {}. Input property calculation might fail!\", type);",
                "+",
                "+\t\t\t\treturn Optional.empty();",
                "+\t\t\t}",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                "-\t *",
                "-\t * @param descriptor must not be {@literal null}.",
                "-\t * @return",
                "-\t */",
                "-\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "+\t\t/**",
                "+\t\t * Find the type with the given name in the given array of {@link Class}.",
                "+\t\t * ",
                "+\t\t * @param name must not be {@literal null} or empty.",
                "+\t\t * @param types must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Class<?> findType(String name, Class<?>[] types) {",
                "+",
                "+\t\t\treturn Arrays.stream(types) //",
                "+\t\t\t\t\t.filter(it -> name.equals(it.getName())) //",
                "+\t\t\t\t\t.findFirst()",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t}",
                "-\t\tMethod method = descriptor.getReadMethod();",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\t/**",
                "+\t\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t\t *",
                "+\t\t * @param metadata",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t\t.stream() //",
                "+\t\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t\t.distinct() //",
                "+\t\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t\t.boxed() //",
                "+\t\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "index 74fc84988..d9bc3d601 100644",
                "--- a/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -21,2 +21,3 @@ import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index d201637a8..39e249693 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.type.classreading;",
                "+import lombok.Getter;",
                "+",
                " import java.io.BufferedInputStream;",
                "@@ -20,4 +22,9 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                " import org.springframework.asm.ClassReader;",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                " import org.springframework.core.NestedIOException;",
                "@@ -26,5 +33,9 @@ import org.springframework.core.type.AnnotationMetadata;",
                " import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "@@ -36,2 +47,3 @@ import org.springframework.lang.Nullable;",
                "  */",
                "+@Getter",
                " class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "@@ -45,54 +57,93 @@ class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tcreateClassReader(resource).accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                " \t\tthis.resource = resource;",
                "+\t\tthis.classMetadata = visitor;",
                "+\t\tthis.annotationMetadata = visitor;",
                "+\t\tthis.methodsMetadata = visitor;",
                "+\t}",
                "-\t\tClassReader classReader;",
                "+\tprivate static ClassReader createClassReader(Resource resource) throws IOException {",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(resource.getInputStream())) {",
                "+",
                "+\t\t\treturn new ClassReader(is);",
                "-\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "-\t\t\tclassReader = new ClassReader(is);",
                " \t\t} catch (IllegalArgumentException ex) {",
                " \t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "-\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + resource, ex);",
                " \t\t}",
                "-",
                "-\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "-\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "-",
                "-\t\tclassMetadata = visitor;",
                "-\t\tannotationMetadata = visitor;",
                "-\t\tmethodsMetadata = visitor;",
                " \t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t/**",
                "+\t * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+\t * class, exposing them through the {@link MethodsMetadata} interface.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @since 2.1",
                "+\t * @see ClassMetadata",
                "+\t * @see MethodMetadata",
                "+\t * @see MethodMetadataReadingVisitor",
                " \t */",
                "-\t@Override",
                "-\tpublic Resource getResource() {",
                "-\t\treturn resource;",
                "-\t}",
                "+\tprivate static class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor",
                "+\t\t\timplements MethodsMetadata {",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic ClassMetadata getClassMetadata() {",
                "-\t\treturn classMetadata;",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t\t *",
                "+\t\t * @param classLoader may be {@literal null}.",
                "+\t\t */",
                "+\t\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\t\tsuper(classLoader);",
                "+\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "-\t\treturn annotationMetadata;",
                "-\t}",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\t@SuppressWarnings(\"null\")",
                "+\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-\t/* (non-Javadoc)",
                "-\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodsMetadata getMethodsMetadata() {",
                "-\t\treturn methodsMetadata;",
                "+\t\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\t// Skip constructors",
                "+\t\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\t\treturn visitor;",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\t\treturn methodMetadataSet.stream() //",
                "+\t\t\t\t\t.filter(it -> it.getMethodName().equals(name)) //",
                "+\t\t\t\t\t.collect(StreamUtils.toUnmodifiableSet());",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f5797e473",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the {@link MethodsMetadata} for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "index 6f4d249e0..d8a4f7921 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -23,3 +23,2 @@ import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                " import org.springframework.lang.Nullable;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "deleted file mode 100644",
                "index db3826c7c..000000000",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "+++ /dev/null",
                "@@ -1,107 +0,0 @@",
                "-/*",
                "- * Copyright 2018 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.type.classreading;",
                "-",
                "-import java.util.Collections;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Set;",
                "-",
                "-import org.springframework.asm.MethodVisitor;",
                "-import org.springframework.asm.Opcodes;",
                "-import org.springframework.asm.Type;",
                "-import org.springframework.core.type.ClassMetadata;",
                "-import org.springframework.core.type.MethodMetadata;",
                "-import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "-import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "-import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "- * class, exposing them through the {@link MethodsMetadata} interface.",
                "- *",
                "- * @author Mark Paluch",
                "- * @since 2.1",
                "- * @see ClassMetadata",
                "- * @see MethodMetadata",
                "- * @see MethodMetadataReadingVisitor",
                "- */",
                "-class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "-",
                "-\t/**",
                "-\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "-\t *",
                "-\t * @param classLoader may be {@literal null}.",
                "-\t */",
                "-\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "-\t\tsuper(classLoader);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-",
                "-\t\t// Skip bridge methods - we're only interested in original user methods.",
                "-\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "-\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\t// Skip constructors",
                "-\t\tif (name.equals(\"<init>\")) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "-\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "-",
                "-\t\tthis.methodMetadataSet.add(visitor);",
                "-\t\treturn visitor;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods() {",
                "-\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods(String name) {",
                "-",
                "-\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "-",
                "-\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "-",
                "-\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "-\t\t\tif (metadata.getMethodName().equals(name)) {",
                "-\t\t\t\tresult.add(metadata);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn Collections.unmodifiableSet(result);",
                "-\t}",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d8576fe4e4e71c23b9e6796b32fd56e51182ee0",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522774875,
            "hunks": 2,
            "message": "DATACMNS-1285 - PropertyPath now limits the depth of its parsing to 1000 segments.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/PropertyPath.java b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "index 920488699..2f12529cc 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "@@ -48,2 +48,4 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\tprivate static final String PARSE_DEPTH_EXCEEDED = \"Trying to parse a path with depth greater than 1000! This has been disabled for security reasons to prevent parsing overflows.\";",
                "+",
                " \tprivate static final String DELIMITERS = \"_\\\\.\";",
                "@@ -344,2 +346,6 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\t\tif (base.size() > 1000) {",
                "+\t\t\tthrow new IllegalArgumentException(PARSE_DEPTH_EXCEEDED);",
                "+\t\t}",
                "+",
                " \t\tPropertyReferenceException exception = null;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/PropertyPath.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "06b0dab536963da78dadf2ba407e5937d81c348a"
                ],
                [
                    "no-tag",
                    "371f6590c509c72f8e600f3d05e110941607fbad"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eed005427dc5327374462dd9b5e69d4ff2883b65",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511972706,
            "hunks": 16,
            "message": "DATACMNS-1281 - Backport of addition of API to read methods in declaration order. We now provide MethodsMetadataReader to read method metadata from a class file. MethodMetadata is read for all user-declared methods except for constructors (which are technically methods, too). MethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(); MethodsMetadataReader metadataReader = factory.getMetadataReader(\"com.acme.Foo\"); MethodsMetadata metadata = metadataReader.getMethodsMetadata(); This new API is now used by DefaultProjectionInformation to make sure the order of input properties is based on the declaration order in the projection interfaces. Previously that order could not be guaranteed to be stable. Original pull request: #263. Related tickets: DATACMNS-1206. Original commit: 9e013d3.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 80c345301..3492aa421 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -18,9 +18,21 @@ package org.springframework.data.projection;",
                " import java.beans.PropertyDescriptor;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                " import org.springframework.beans.BeanUtils;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                " import org.springframework.data.util.ReflectionUtils;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                "@@ -31,2 +43,3 @@ import org.springframework.util.Assert;",
                "  * @author Oliver Gierke",
                "+ * @author Mark Paluch",
                "  * @since 1.12",
                "@@ -43,3 +56,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t */",
                "-\tpublic DefaultProjectionInformation(Class<?> type) {",
                "+\tDefaultProjectionInformation(Class<?> type) {",
                "@@ -107,6 +120,66 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tList<PropertyDescriptor> result = new ArrayList<PropertyDescriptor>();",
                "-\t\tresult.addAll(filterDefaultMethods(BeanUtils.getPropertyDescriptors(type)));",
                "+\t\tMethodsMetadata metadata = getMetadata(type);",
                "+\t\tfinal Map<String, Integer> orders = getMethodOrder(metadata);",
                "-\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\tfor (PropertyDescriptor descriptor : filterDefaultMethods(BeanUtils.getPropertyDescriptors(type))) {",
                "+\t\t\tif (metadata == null || orders.containsKey(descriptor.getReadMethod().getName())) {",
                "+\t\t\t\tresult.add(descriptor);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif (metadata == null) {",
                "+\t\t\treturn result;",
                "+\t\t}",
                "+",
                "+\t\tCollections.sort(result, new Comparator<PropertyDescriptor>() {",
                "+",
                "+\t\t\t/* ",
                "+\t\t\t * (non-Javadoc)",
                "+\t\t\t * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)",
                "+\t\t\t */",
                "+\t\t\t@Override",
                "+\t\t\tpublic int compare(PropertyDescriptor left, PropertyDescriptor right) {",
                "+\t\t\t\treturn orders.get(left.getReadMethod().getName()) - orders.get(right.getReadMethod().getName());",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tfor (String name : metadata.getInterfaceNames()) {",
                "+\t\t\tresult.addAll(collectDescriptors(loadClass(name, type.getClassLoader())));",
                "+\t\t}",
                "+",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+",
                "+\t\ttry {",
                "+\t\t\treturn ClassUtils.forName(className, classLoader);",
                "+\t\t} catch (ClassNotFoundException e) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t *",
                "+\t * @param metadata",
                "+\t * @return",
                "+\t */",
                "+\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\tif (metadata == null) {",
                "+\t\t\treturn Collections.emptyMap();",
                "+\t\t}",
                "+",
                "+\t\tSet<MethodMetadata> methods = metadata.getMethods();",
                "+\t\tMap<String, Integer> result = new HashMap<String, Integer>(methods.size());",
                "+\t\tint i = 0;",
                "+",
                "+\t\tfor (MethodMetadata methodMetadata : methods) {",
                "+",
                "+\t\t\tString name = methodMetadata.getMethodName();",
                "+",
                "+\t\t\tif (!result.containsKey(name)) {",
                "+\t\t\t\tresult.put(name, i++);",
                "+\t\t\t}",
                " \t\t}",
                "@@ -116,2 +189,23 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "+\t/**",
                "+\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t *",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return the optional {@link MethodsMetadata}.",
                "+\t */",
                "+\tprivate static MethodsMetadata getMetadata(Class<?> type) {",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+",
                "+\t\t\treturn metadataReader.getMethodsMetadata();",
                "+",
                "+\t\t} catch (IOException e) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "new file mode 100644",
                "index 000000000..49f73e993",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+",
                "+/**",
                "+ * Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded",
                "+ * yet.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ * @see MethodMetadata",
                "+ * @see ClassMetadata",
                "+ * @see MethodsMetadataReader#getMethodsMetadata()",
                "+ */",
                "+public interface MethodsMetadata extends ClassMetadata {",
                "+",
                "+\t/**",
                "+\t * Return all methods.",
                "+\t *",
                "+\t * @return the methods declared in the class ordered as found in the class file. Order does not necessarily reflect",
                "+\t *         the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods();",
                "+",
                "+\t/**",
                "+\t * Return all methods matching method {@code name}.",
                "+\t *",
                "+\t * @param name name of the method, must not be {@literal null} or empty.",
                "+\t * @return the methods matching method {@code name } declared in the class ordered as found in the class file. Order",
                "+\t *         does not necessarily reflect the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods(String name);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..7e9ce7644",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the metadata for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..509a6c8c5",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.core.NestedIOException;",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.type.AnnotationMetadata;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+",
                "+/**",
                "+ * {@link MethodsMetadataReader} implementation based on an ASM {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @auhtor Oliver Gierke",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+",
                "+\tprivate final Resource resource;",
                "+\tprivate final ClassMetadata classMetadata;",
                "+\tprivate final AnnotationMetadata annotationMetadata;",
                "+\tprivate final MethodsMetadata methodsMetadata;",
                "+",
                "+\tDefaultMethodsMetadataReader(Resource resource, ClassLoader classLoader) throws IOException {",
                "+",
                "+\t\tthis.resource = resource;",
                "+",
                "+\t\tClassReader classReader = null;",
                "+\t\tInputStream is = null;",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tis = new BufferedInputStream(getResource().getInputStream());",
                "+\t\t\tclassReader = new ClassReader(is);",
                "+",
                "+\t\t} catch (IllegalArgumentException ex) {",
                "+",
                "+\t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+",
                "+\t\t} finally {",
                "+",
                "+\t\t\tif (is != null) {",
                "+\t\t\t\tis.close();",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                "+\t\tclassMetadata = visitor;",
                "+\t\tannotationMetadata = visitor;",
                "+\t\tmethodsMetadata = visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Resource getResource() {",
                "+\t\treturn resource;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic ClassMetadata getClassMetadata() {",
                "+\t\treturn classMetadata;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "+\t\treturn annotationMetadata;",
                "+\t}",
                "+",
                "+\t/* (non-Javadoc)",
                "+\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadata getMethodsMetadata() {",
                "+\t\treturn methodsMetadata;",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "new file mode 100644",
                "index 000000000..963dbf490",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.io.ResourceLoader;",
                "+import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+",
                "+/**",
                "+ * Extension of {@link SimpleMetadataReaderFactory} that reads {@link MethodsMetadata}, creating a new ASM",
                "+ * {@link MethodsMetadataReader} for every request.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory {",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the default class loader.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory() {}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ResourceLoader}.",
                "+\t *",
                "+\t * @param resourceLoader the Spring {@link ResourceLoader} to use (also determines the {@link ClassLoader} to use).",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(ResourceLoader resourceLoader) {",
                "+\t\tsuper(resourceLoader);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader the class loader to use.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(String className) throws IOException {",
                "+\t\treturn (MethodsMetadataReader) super.getMetadataReader(className);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(Resource resource) throws IOException {",
                "+\t\treturn new DefaultMethodsMetadataReader(resource, getResourceLoader().getClassLoader());",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "new file mode 100644",
                "index 000000000..ea8f0a8db",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+ * class, exposing them through the {@link MethodsMetadata} interface.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ * @see ClassMetadata",
                "+ * @see MethodMetadata",
                "+ * @see MethodMetadataReadingVisitor",
                "+ */",
                "+class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t/**",
                "+\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader may be {@literal null}.",
                "+\t */",
                "+\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\t// Skip constructors",
                "+\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\treturn visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "+",
                "+\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\tresult.add(metadata);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn Collections.unmodifiableSet(result);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/package-info.java b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "new file mode 100644",
                "index 000000000..0b6b2dd86",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "@@ -0,0 +1,4 @@",
                "+/**",
                "+ * Support classes for reading annotation and class-level metadata.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "diff --git a/src/main/java/org/springframework/data/type/package-info.java b/src/main/java/org/springframework/data/type/package-info.java",
                "new file mode 100644",
                "index 000000000..ec4147ac8",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/package-info.java",
                "@@ -0,0 +1,4 @@",
                "+/**",
                "+ * Core support package for type introspection.",
                "+ */",
                "+package org.springframework.data.type;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "src/main/java/org/springframework/data/type/classreading/package-info.java",
                "src/main/java/org/springframework/data/type/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: base, back, request, projection, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ddd0ecac533bfceb3db5b30719d7f96a9b51628",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515657582,
            "hunks": 11,
            "message": "DATACMNS-1206 - Polishing. Convert type array to string to construct the exception message. Slight Javadoc tweaks. Reduce method visibility. Simplify hasDefaultGetter check. Remove superfluous throws declaration. Strip trailing whitespaces. Ignore property descriptors without getter (e.g. indexed properties). Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 926bc1fa8..ddb57f85c 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -119,3 +119,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\treturn method != null && method.isDefault();",
                " \t}",
                "@@ -138,6 +138,6 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param type must not be {@literal null}.",
                " \t\t */",
                "-\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "+\t\tPropertyDescriptorSource(Class<?> type) {",
                "@@ -154,3 +154,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t */",
                "-\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\tList<PropertyDescriptor> getDescriptors() {",
                " \t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                "@@ -180,5 +180,5 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "-\t\t * methods seen by the given {@link MethodsMetadata}.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only",
                "+\t\t * returning methods seen by the given {@link MethodsMetadata}.",
                "+\t\t *",
                " \t\t * @param source must not be {@literal null}.",
                "@@ -196,3 +196,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\treturn source.filter(descriptor -> descriptor.getReadMethod() != null)",
                "+\t\t\t\t\t.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                " \t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "@@ -202,3 +203,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param metadata must not be {@literal null}.",
                "@@ -211,4 +212,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of interfaces using the given type as primary source for ordering.",
                "+\t\t *",
                " \t\t * @return",
                "@@ -245,3 +246,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Find the type with the given name in the given array of {@link Class}.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param name must not be {@literal null} or empty.",
                "@@ -255,3 +256,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t\t\t\t.findFirst()",
                "-\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(",
                "+\t\t\t\t\t\t\tString.format(\"Did not find type %s in %s!\", name, Arrays.toString(types))));",
                " \t\t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index 39e249693..17404360d 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -45,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Mark Paluch",
                "+ * @author Oliver Gierke",
                "  * @since 2.1"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0883eb9b9c1355716e9c352ba510e6473b603907",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511972706,
            "hunks": 17,
            "message": "DATACMNS-1206 - Add API to read methods in declaration order. We now provide MethodsMetadataReader to read method metadata from a class file. MethodMetadata is read for all user-declared methods except for constructors (which are technically methods, too). MethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(); MethodsMetadataReader metadataReader = factory.getMetadataReader(\"com.acme.Foo\"); MethodsMetadata metadata = metadataReader.getMethodsMetadata(); This new API is now used by DefaultProjectionInformation to make sure the order of input properties is based on the declaration order in the projection interfaces. Previously that order could not be guaranteed to be stable. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 901ba2b7a..7f24d23ef 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -18,2 +18,3 @@ package org.springframework.data.projection;",
                " import java.beans.PropertyDescriptor;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "@@ -21,7 +22,18 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Comparator;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.IntStream;",
                "+import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                "@@ -33,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Christoph Strobl",
                "+ * @author Mark Paluch",
                "  * @since 1.12",
                "@@ -45,3 +58,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t */",
                "-\tpublic DefaultProjectionInformation(Class<?> type) {",
                "+\tDefaultProjectionInformation(Class<?> type) {",
                "@@ -104,8 +117,30 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "-\t\tresult.addAll(Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it))//",
                "-\t\t\t\t.collect(Collectors.toList()));",
                "-\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "+\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "+\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "+\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "+\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "+\t\t\t\t.orElse(stream);",
                "+",
                "+\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+",
                "+\t\tif (metadata.isPresent()) {",
                "+",
                "+\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "+\t\t\t\t\t.map(Arrays::stream) //",
                "+\t\t\t\t\t.orElse(Stream.empty());",
                "+",
                "+\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "+\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "+\t\t\t\t\t.flatMap(List::stream) //",
                "+\t\t\t\t\t.collect(Collectors.toList()));",
                "+\t\t} else {",
                "+",
                "+\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "+\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\t\t}",
                " \t\t}",
                "@@ -115,2 +150,49 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "+\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+",
                "+\t\ttry {",
                "+\t\t\treturn ClassUtils.forName(className, classLoader);",
                "+\t\t} catch (ClassNotFoundException e) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t *",
                "+\t * @param metadata",
                "+\t * @return",
                "+\t */",
                "+\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t.stream() //",
                "+\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t.distinct() //",
                "+\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t.boxed() //",
                "+\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t *",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return the optional {@link MethodsMetadata}.",
                "+\t */",
                "+\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+\t\t} catch (IOException e) {",
                "+\t\t\treturn Optional.empty();",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "new file mode 100644",
                "index 000000000..74fc84988",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+",
                "+/**",
                "+ * Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded",
                "+ * yet.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see MethodMetadata",
                "+ * @see ClassMetadata",
                "+ * @see MethodsMetadataReader#getMethodsMetadata()",
                "+ */",
                "+public interface MethodsMetadata extends ClassMetadata {",
                "+",
                "+\t/**",
                "+\t * Return all methods.",
                "+\t *",
                "+\t * @return the methods declared in the class ordered as found in the class file. Order does not necessarily reflect",
                "+\t *         the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods();",
                "+",
                "+\t/**",
                "+\t * Return all methods matching method {@code name}.",
                "+\t *",
                "+\t * @param name name of the method, must not be {@literal null} or empty.",
                "+\t * @return the methods matching method {@code name } declared in the class ordered as found in the class file. Order",
                "+\t *         does not necessarily reflect the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods(String name);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f21d64a99",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the metadata for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..d201637a8",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.core.NestedIOException;",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.type.AnnotationMetadata;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * {@link MethodsMetadataReader} implementation based on an ASM {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+",
                "+\tprivate final Resource resource;",
                "+\tprivate final ClassMetadata classMetadata;",
                "+\tprivate final AnnotationMetadata annotationMetadata;",
                "+\tprivate final MethodsMetadata methodsMetadata;",
                "+",
                "+\tDefaultMethodsMetadataReader(Resource resource, @Nullable ClassLoader classLoader) throws IOException {",
                "+",
                "+\t\tthis.resource = resource;",
                "+",
                "+\t\tClassReader classReader;",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "+\t\t\tclassReader = new ClassReader(is);",
                "+\t\t} catch (IllegalArgumentException ex) {",
                "+\t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t}",
                "+",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                "+\t\tclassMetadata = visitor;",
                "+\t\tannotationMetadata = visitor;",
                "+\t\tmethodsMetadata = visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Resource getResource() {",
                "+\t\treturn resource;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic ClassMetadata getClassMetadata() {",
                "+\t\treturn classMetadata;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "+\t\treturn annotationMetadata;",
                "+\t}",
                "+",
                "+\t/* (non-Javadoc)",
                "+\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadata getMethodsMetadata() {",
                "+\t\treturn methodsMetadata;",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "new file mode 100644",
                "index 000000000..6f4d249e0",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.io.ResourceLoader;",
                "+import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * Extension of {@link SimpleMetadataReaderFactory} that reads {@link MethodsMetadata}, creating a new ASM",
                "+ * {@link MethodsMetadataReader} for every request.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory {",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the default class loader.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory() {}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ResourceLoader}.",
                "+\t *",
                "+\t * @param resourceLoader the Spring {@link ResourceLoader} to use (also determines the {@link ClassLoader} to use).",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ResourceLoader resourceLoader) {",
                "+\t\tsuper(resourceLoader);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader the class loader to use.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(String className) throws IOException {",
                "+\t\treturn (MethodsMetadataReader) super.getMetadataReader(className);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(Resource resource) throws IOException {",
                "+\t\treturn new DefaultMethodsMetadataReader(resource, getResourceLoader().getClassLoader());",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "new file mode 100644",
                "index 000000000..db3826c7c",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+ * class, exposing them through the {@link MethodsMetadata} interface.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see ClassMetadata",
                "+ * @see MethodMetadata",
                "+ * @see MethodMetadataReadingVisitor",
                "+ */",
                "+class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t/**",
                "+\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader may be {@literal null}.",
                "+\t */",
                "+\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\t// Skip constructors",
                "+\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\treturn visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "+",
                "+\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\tresult.add(metadata);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn Collections.unmodifiableSet(result);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/package-info.java b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "new file mode 100644",
                "index 000000000..fe6d22de4",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "@@ -0,0 +1,6 @@",
                "+/**",
                "+ * Support classes for reading annotation and class-level metadata.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+@org.springframework.lang.NonNullFields",
                "+package org.springframework.data.type.classreading;",
                "diff --git a/src/main/java/org/springframework/data/type/package-info.java b/src/main/java/org/springframework/data/type/package-info.java",
                "new file mode 100644",
                "index 000000000..b887b66b2",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/package-info.java",
                "@@ -0,0 +1,5 @@",
                "+/**",
                "+ * Core support package for type introspection.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+package org.springframework.data.type;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "src/main/java/org/springframework/data/type/classreading/package-info.java",
                "src/main/java/org/springframework/data/type/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: base, request, projection, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "500a1c627d5a95b2ccbd02beff26e02aeefe78bc",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523020489,
            "hunks": 1,
            "message": "DATACMNS-1289 - Polishing. Original pull request: #280.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "index ff45a536f..4e9648f8d 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "@@ -163,2 +163,8 @@ public interface RepositoryFragment<T> {",
                "+\t\t/**",
                "+\t\t * Creates a new {@link ImplementedRepositoryFragment} for the given interface class and implementation.",
                "+\t\t * ",
                "+\t\t * @param interfaceClass must not be {@literal null}.",
                "+\t\t * @param implementation must not be {@literal null}.",
                "+\t\t */",
                " \t\tpublic ImplementedRepositoryFragment(Optional<Class<T>> interfaceClass, T implementation) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "280": "Call to save(\u2026) on customized intermediate repository fails with \"Object is not an instance of declaring class.\" [DATACMNS-1289] #1731"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e2e51b7a0e1956c3319ae169d9440cfc6df5978"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "999d26436b8327143a7ba620ec6e3834634d7b0c",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522744777,
            "hunks": 2,
            "message": "DATACMNS-1284 - Polishing. Backport of 06116b7. Related ticket: DATACMNS-1206. Original commit: 06116b7.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 73cdb1106..4f83e7cbe 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -124,3 +124,10 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tfor (PropertyDescriptor descriptor : filterDefaultMethods(BeanUtils.getPropertyDescriptors(type))) {",
                "-\t\t\tif (metadata == null || orders.containsKey(descriptor.getReadMethod().getName())) {",
                "+",
                "+\t\t\tMethod readMethod = descriptor.getReadMethod();",
                "+",
                "+\t\t\tif (readMethod == null) {",
                "+\t\t\t\tcontinue;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (metadata == null || orders.containsKey(readMethod.getName())) {",
                " \t\t\t\tresult.add(descriptor);",
                "@@ -239,3 +246,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\treturn method == null ? false : ReflectionUtils.isDefaultMethod(method);",
                "+\t\treturn method != null && ReflectionUtils.isDefaultMethod(method);",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: back",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "142c9ddb5c866a7f7a652cc1da7caa0c895861d3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522934870,
            "hunks": 2,
            "message": "DATACMNS-1289 - Allow fragment creation only from implementations that implement their declared class. We now check that fragment implementations created via RepositoryFragment.implemented(Class<T>, T) are a subtype of the given class. This assertion raises an exception that prevents errors during runtime. This change addresses an issue with customized intermediate base repositories in combination with ambiguous naming of implementations. Method invocations fail if a repository derives from a customized base repository interface that implements e.g. CrudRepository and there's an implementation matching the base repository name followed by the implementation suffix. We assume in that case, the implementation contains implementations of the methods declared in the customized base interface. Original pull request: #280.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "index 66fd51e98..51a664e61 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "@@ -157,3 +157,2 @@ public interface RepositoryFragment<T> {",
                "-\t@RequiredArgsConstructor",
                " \t@EqualsAndHashCode(callSuper = false)",
                "@@ -161,4 +160,20 @@ public interface RepositoryFragment<T> {",
                "-\t\tprivate final @NonNull Optional<Class<T>> interfaceClass;",
                "-\t\tprivate final @NonNull T implementation;",
                "+\t\tprivate final Optional<Class<T>> interfaceClass;",
                "+\t\tprivate final T implementation;",
                "+",
                "+\t\tpublic ImplementedRepositoryFragment(Optional<Class<T>> interfaceClass, T implementation) {",
                "+",
                "+\t\t\tAssert.notNull(interfaceClass, \"Interface class must not be null!\");",
                "+\t\t\tAssert.notNull(implementation, \"Implementation object must not be null!\");",
                "+",
                "+\t\t\tinterfaceClass.ifPresent(it -> {",
                "+",
                "+\t\t\t\tAssert.isTrue(ClassUtils.isAssignableValue(it, implementation),",
                "+\t\t\t\t\t\t() -> String.format(\"Fragment implementation %s does not implement %s!\", ClassUtils.getQualifiedName(it),",
                "+\t\t\t\t\t\t\t\tClassUtils.getQualifiedName(implementation.getClass())));",
                "+\t\t\t});",
                "+",
                "+\t\t\tthis.interfaceClass = interfaceClass;",
                "+\t\t\tthis.implementation = implementation;",
                "+\t\t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "280": "Call to save(\u2026) on customized intermediate repository fails with \"Object is not an instance of declaring class.\" [DATACMNS-1289] #1731"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "532af1a6b9d090495a79cd154751ce2b73986655"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: base, request, contain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "428b0decd5c2fab598aae82c4060a76a557a0379",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522744234,
            "hunks": 13,
            "message": "DATACMNS-1284 - Polishing. Backport of 5eb10a0 but leaving out the Stream execution optimizations. Related ticket: DATACMNS-1206. Original commit: 5eb10a0.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 3492aa421..73cdb1106 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -32,3 +32,3 @@ import org.springframework.core.type.MethodMetadata;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                " import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "index 49f73e993..261d55bb3 100644",
                "--- a/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -21,2 +21,3 @@ import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index 509a6c8c5..809edf5dd 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.type.classreading;",
                "+import lombok.Getter;",
                "+",
                " import java.io.BufferedInputStream;",
                "@@ -20,4 +22,10 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                " import org.springframework.asm.ClassReader;",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                " import org.springframework.core.NestedIOException;",
                "@@ -26,4 +34,7 @@ import org.springframework.core.type.AnnotationMetadata;",
                " import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.util.Assert;",
                "@@ -37,2 +48,3 @@ import org.springframework.data.type.MethodsMetadataReader;",
                "  */",
                "+@Getter",
                " class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "@@ -76,35 +88,77 @@ class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t/**",
                "+\t * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+\t * class, exposing them through the {@link MethodsMetadata} interface.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @since 2.1",
                "+\t * @since 1.11.11",
                "+\t * @see ClassMetadata",
                "+\t * @see MethodMetadata",
                "+\t * @see MethodMetadataReadingVisitor",
                " \t */",
                "-\t@Override",
                "-\tpublic Resource getResource() {",
                "-\t\treturn resource;",
                "-\t}",
                "+\tstatic class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t\t/**",
                "+\t\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t\t *",
                "+\t\t * @param classLoader may be {@literal null}.",
                "+\t\t */",
                "+\t\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "+\t\t\tsuper(classLoader);",
                "+\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic ClassMetadata getClassMetadata() {",
                "-\t\treturn classMetadata;",
                "-\t}",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "-\t\treturn annotationMetadata;",
                "-\t}",
                "+\t\t\t// Skip constructors",
                "+\t\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "-\t/* (non-Javadoc)",
                "-\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodsMetadata getMethodsMetadata() {",
                "-\t\treturn methodsMetadata;",
                "+\t\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\t\treturn visitor;",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "+",
                "+\t\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\t\tresult.add(metadata);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn Collections.unmodifiableSet(result);",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..9825a8995",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the {@link MethodsMetadata} for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "index 963dbf490..d3311450f 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -23,3 +23,2 @@ import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "deleted file mode 100644",
                "index ea8f0a8db..000000000",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "+++ /dev/null",
                "@@ -1,107 +0,0 @@",
                "-/*",
                "- * Copyright 2018 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.type.classreading;",
                "-",
                "-import java.util.Collections;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Set;",
                "-",
                "-import org.springframework.asm.MethodVisitor;",
                "-import org.springframework.asm.Opcodes;",
                "-import org.springframework.asm.Type;",
                "-import org.springframework.core.type.ClassMetadata;",
                "-import org.springframework.core.type.MethodMetadata;",
                "-import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "-import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "-import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "- * class, exposing them through the {@link MethodsMetadata} interface.",
                "- *",
                "- * @author Mark Paluch",
                "- * @since 2.1",
                "- * @since 1.11.11",
                "- * @see ClassMetadata",
                "- * @see MethodMetadata",
                "- * @see MethodMetadataReadingVisitor",
                "- */",
                "-class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "-",
                "-\t/**",
                "-\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "-\t *",
                "-\t * @param classLoader may be {@literal null}.",
                "-\t */",
                "-\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "-\t\tsuper(classLoader);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-",
                "-\t\t// Skip bridge methods - we're only interested in original user methods.",
                "-\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "-\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\t// Skip constructors",
                "-\t\tif (name.equals(\"<init>\")) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "-\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "-",
                "-\t\tthis.methodMetadataSet.add(visitor);",
                "-\t\treturn visitor;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods() {",
                "-\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods(String name) {",
                "-",
                "-\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "-",
                "-\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "-",
                "-\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "-\t\t\tif (metadata.getMethodName().equals(name)) {",
                "-\t\t\t\tresult.add(metadata);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn Collections.unmodifiableSet(result);",
                "-\t}",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: back, execution",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ac63f0861481604a0aa5dc1ad7697780d1954601",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1521455961,
            "hunks": 7,
            "message": "DATACMNS-1280 - Fixed letter-casing in documentation of Querydsl Extension. Original pull request: #279.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 413e50510..f4d3497ae 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -970,5 +970,5 @@ http://www.querydsl.com/[Querydsl] is a framework which enables the construction",
                "-Several Spring Data modules offer integration with Querydsl via `QueryDslPredicateExecutor`.",
                "+Several Spring Data modules offer integration with Querydsl via `QuerydslPredicateExecutor`.",
                "-.QueryDslPredicateExecutor interface",
                "+.QuerydslPredicateExecutor interface",
                " ====",
                "@@ -976,3 +976,3 @@ Several Spring Data modules offer integration with Querydsl via `QueryDslPredica",
                " ----",
                "-public interface QueryDslPredicateExecutor<T> {",
                "+public interface QuerydslPredicateExecutor<T> {",
                "@@ -995,3 +995,3 @@ public interface QueryDslPredicateExecutor<T> {",
                "-To make use of Querydsl support simply extend `QueryDslPredicateExecutor` on your repository interface.",
                "+To make use of Querydsl support simply extend `QuerydslPredicateExecutor` on your repository interface.",
                "@@ -1001,3 +1001,3 @@ To make use of Querydsl support simply extend `QueryDslPredicateExecutor` on you",
                " ----",
                "-interface UserRepository extends CrudRepository<User, Long>, QueryDslPredicateExecutor<User> {",
                "+interface UserRepository extends CrudRepository<User, Long>, QuerydslPredicateExecutor<User> {",
                "@@ -1256,3 +1256,3 @@ NOTE: The feature will be automatically enabled along `@EnableSpringDataWebSuppo",
                "-Adding a `@QuerydslPredicate` to the method signature will provide a ready to use `Predicate` which can be executed via the `QueryDslPredicateExecutor`.",
                "+Adding a `@QuerydslPredicate` to the method signature will provide a ready to use `Predicate` which can be executed via the `QuerydslPredicateExecutor`.",
                "@@ -1293,3 +1293,3 @@ Those bindings can be customized via the `bindings` attribute of `@QuerydslPredi",
                " interface UserRepository extends CrudRepository<User, String>,",
                "-                                 QueryDslPredicateExecutor<User>,                <1>",
                "+                                 QuerydslPredicateExecutor<User>,                <1>",
                "                                  QuerydslBinderCustomizer<QUser> {               <2>",
                "@@ -1306,3 +1306,3 @@ interface UserRepository extends CrudRepository<User, String>,",
                " ----",
                "-<1> `QueryDslPredicateExecutor` provides access to specific finder methods for `Predicate`.",
                "+<1> `QuerydslPredicateExecutor` provides access to specific finder methods for `Predicate`.",
                " <2> `QuerydslBinderCustomizer` defined on the repository interface will be automatically picked up and shortcuts `@QuerydslPredicate(bindings=...)`."
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "279": "Fix letter-casing in documentation of Querydsl Extension [DATACMNS-1280] #1719"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2e28afb4c76cce8408057683138b59d0b7d21750"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 279",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8507a1265e337881aa90591f5adaa561c5448e0c",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519637510,
            "hunks": 6,
            "message": "DATACMNS-1263 - Allow configuration inspection-classloader customization. We now allow customizing the configuration inspection-classloader with RepositoryConfigurationExtensionSupport.getConfigurationInspectionClassLoader(\u00e2\u0080\u00a6). Subclasses may override this method if a customized/isolated classloader is required. Original pull request: #276.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "index a71a52a74..591a6516a 100644",
                "--- a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "@@ -89,3 +89,4 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t\t\tRepositoryConfiguration<T> configuration = getRepositoryConfiguration(candidate, configSource);",
                "-\t\t\tClass<?> repositoryInterface = loadRepositoryInterface(configuration, loader);",
                "+\t\t\tClass<?> repositoryInterface = loadRepositoryInterface(configuration,",
                "+\t\t\t\t\tgetConfigurationInspectionClassLoader(loader));",
                "@@ -115,2 +116,15 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "+\t/**",
                "+\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "+\t * this method to provide a customized class loader.",
                "+\t *",
                "+\t * @param loader must not be {@literal null}.",
                "+\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "+\t * @since 2.1",
                "+\t */",
                "+\t@Nullable",
                "+\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "+\t\treturn loader.getClassLoader();",
                "+\t}",
                "+",
                " \t/*",
                "@@ -299,6 +313,6 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t * Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given",
                "-\t * {@link ResourceLoader}.",
                "-\t * ",
                "+\t * {@link ClassLoader}.",
                "+\t *",
                " \t * @param configuration must not be {@literal null}.",
                "-\t * @param loader must not be {@literal null}.",
                "+\t * @param classLoader must not be {@literal null}.",
                " \t * @return the repository interface or {@literal null} if it can't be loaded.",
                "@@ -306,6 +320,5 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t@Nullable",
                "-\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ResourceLoader loader) {",
                "+\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ClassLoader classLoader) {",
                " \t\tString repositoryInterface = configuration.getRepositoryInterface();",
                "-\t\tClassLoader classLoader = loader.getClassLoader();"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "276": "DATAJPA-1250 - Inspect repository interfaces in isolated classloader. spring-projects/spring-data-jpa#253 Allow configuration inspection-classloader customization [DATACMNS-1263] #1701"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 276",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc181995722880424572eaf15581e0ce22a749d9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522171032,
            "hunks": 1,
            "message": "DATACMNS-1283 - Removed explicit Jackson version declaration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e6e0790ad..e0b5390ac 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -58,3 +58,2 @@",
                " \t\t\t<artifactId>jackson-databind</artifactId>",
                "-\t\t\t<version>${jackson}</version>",
                " \t\t\t<optional>true</optional>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6293ff325bcdca2d371909b498bbc1ada820da91"
                ],
                [
                    "no-tag",
                    "4715675a3895c339f524207d4ea7838266dbf1ad"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7efaa1b18aedaa23ee896f7e895e81dd03b0a1ab",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519654918,
            "hunks": 5,
            "message": "DATACMNS-1263 - Polishing. Fixed nullability constraints on method RepositoryConfigurationExtensionSupport.loadRepositoryInterface(\u00e2\u0080\u00a6). Tweaked method declaration order to have public methods first, protected methods after that. Fixed a tiny typo. Original pull request: #276.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "index 591a6516a..6fb0007c0 100644",
                "--- a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "@@ -116,15 +116,2 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "-\t/**",
                "-\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "-\t * this method to provide a customized class loader.",
                "-\t *",
                "-\t * @param loader must not be {@literal null}.",
                "-\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "-\t * @since 2.1",
                "-\t */",
                "-\t@Nullable",
                "-\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "-\t\treturn loader.getClassLoader();",
                "-\t}",
                "-",
                " \t/*",
                "@@ -190,5 +177,18 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "+\t/**",
                "+\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "+\t * this method to provide a customized class loader.",
                "+\t *",
                "+\t * @param loader must not be {@literal null}.",
                "+\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "+\t * @since 2.1",
                "+\t */",
                "+\t@Nullable",
                "+\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "+\t\treturn loader.getClassLoader();",
                "+\t}",
                "+",
                " \t/**",
                " \t * Sets the given source on the given {@link AbstractBeanDefinition} and registers it inside the given",
                "-\t * {@link BeanDefinitionRegistry}. For {@link BeanDefinition}s to be registerd once-and-only-once for all",
                "+\t * {@link BeanDefinitionRegistry}. For {@link BeanDefinition}s to be registered once-and-only-once for all",
                " \t * configuration elements (annotation or XML), prefer calling",
                "@@ -316,3 +316,3 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t * @param configuration must not be {@literal null}.",
                "-\t * @param classLoader must not be {@literal null}.",
                "+\t * @param classLoader can be {@literal null}.",
                " \t * @return the repository interface or {@literal null} if it can't be loaded.",
                "@@ -320,3 +320,4 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t@Nullable",
                "-\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ClassLoader classLoader) {",
                "+\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration,",
                "+\t\t\t@Nullable ClassLoader classLoader) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "276": "DATAJPA-1250 - Inspect repository interfaces in isolated classloader. spring-projects/spring-data-jpa#253 Allow configuration inspection-classloader customization [DATACMNS-1263] #1701"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 276",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6716d156812b7fbde8635aa10a3717ca35dd0d2b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522850002,
            "hunks": 1,
            "message": "DATACMNS-1267 - Release version 2.0.6 (Kay SR6).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index df1d3a2b7..0e570c712 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.6.BUILD-SNAPSHOT</version>",
                "+\t<version>2.0.6.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "776cc0f4e6f455c02436c6f968bfe31354107306",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522844488,
            "hunks": 1,
            "message": "DATACMNS-1248 - Release version 1.13.11 (Ingalls SR11).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 00cd75f24..4302dcd1d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.11.BUILD-SNAPSHOT</version>",
                "+\t<version>1.13.11.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5602c9b246c45e9e423fab38f2368e0e54fc30a4",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519873525,
            "hunks": 15,
            "message": "DATACMNS-1268 - Add a QueryPostProcessor interface allowing users to receive a callback with the query generated from a Repository query method. We now support the creation and registration of QueryPostProcessors, which can be registered as regular beans in the Spring ApplicationContext in order to be supplied with dependencies and other configuration meta-data necessary for prpproper initialization. QueryPostProcessors are used by developers in their applications to process queries 'generated' from, or declared 'manually' from Repository query methods post parsing but prior to execution.  The postProcess(:QueryMethod, :QUERY, :Object[]) method is called each and everytime the query is executed.  QueryPostProcessors may be typed to specific application Repository interfaces using the generic interface signature or applied to all application Repository queries.  Additionally, the QueryPostProcessors can be ordered according to a pre-defined precedence that suits the user's application needs.  This is useful in situations where the user wishes to break up the processing by concern into a pipeline of different processors. An example QueryPostProcessImplementation might look like... class CustomerQueryPostProcessor implements QueryPostProcessor<CustomerRepository, String> {   @Override   public int getOrder() {     return 1;   }   public String postProcess(QueryMethod queryMethod, String query, Object... arguments) {     ...   } } The CustomerQueryPostProcessor can then be registered in the Spring application context like so... @Configuration class ApplicationConfiguration {   @Bean   CustomerQueryPostProcessor customerQueryProcessor() {     return new CustomerQueryPostProcessor();   }   ... } The Spring Data Repository infrastructure and supporting classes will approrpiately identify and register all custom application QueryPostProcessor implementations (e.g. CustomerQueryPostProcessor) with the corresponding application Repository interface (i.e. CustomerRepository) or interfaces if the QueryPostProcessor applies to more than a single application Repository interface. A user may further qualify the Repository query method queries s/he wishes to post process by using the provided QueryMethod argument to qualify the query based on name.  E.g. findByCustomerLastNameLike.equals(queryMethod.getName()).",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactoryBeanSupport.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactoryBeanSupport.java",
                "index 358a3cd9b..39ddd0fa0 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactoryBeanSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactoryBeanSupport.java",
                "@@ -17,4 +17,9 @@ package org.springframework.data.repository.core.support;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Optional;",
                "+import java.util.WeakHashMap;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.StreamSupport;",
                "@@ -28,4 +33,6 @@ import org.springframework.beans.factory.FactoryBean;",
                " import org.springframework.beans.factory.InitializingBean;",
                "+import org.springframework.beans.factory.ListableBeanFactory;",
                " import org.springframework.context.ApplicationEventPublisher;",
                " import org.springframework.context.ApplicationEventPublisherAware;",
                "+import org.springframework.core.OrderComparator;",
                " import org.springframework.data.mapping.PersistentEntity;",
                "@@ -33,2 +40,3 @@ import org.springframework.data.mapping.context.MappingContext;",
                " import org.springframework.data.repository.Repository;",
                "+import org.springframework.data.repository.RepositoryDefinition;",
                " import org.springframework.data.repository.core.EntityInformation;",
                "@@ -38,2 +46,3 @@ import org.springframework.data.repository.core.RepositoryMetadata;",
                " import org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments;",
                "+import org.springframework.data.repository.query.AbstractRepositoryQuery;",
                " import org.springframework.data.repository.query.DefaultEvaluationContextProvider;",
                "@@ -43,5 +52,16 @@ import org.springframework.data.repository.query.QueryLookupStrategy.Key;",
                " import org.springframework.data.repository.query.QueryMethod;",
                "+import org.springframework.data.repository.query.QueryPostProcessor;",
                "+import org.springframework.data.repository.query.RepositoryQuery;",
                "+import org.springframework.data.util.ClassTypeInformation;",
                " import org.springframework.data.util.Lazy;",
                "+import org.springframework.data.util.TypeInformation;",
                "+import org.springframework.lang.NonNull;",
                "+import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "+import lombok.EqualsAndHashCode;",
                "+import lombok.Getter;",
                "+import lombok.RequiredArgsConstructor;",
                "+import lombok.Value;",
                "+",
                " /**",
                "@@ -54,2 +74,3 @@ import org.springframework.util.Assert;",
                "  * @author Mark Paluch",
                "+ * @author John Blum",
                "  */",
                "@@ -265,11 +286,16 @@ public abstract class RepositoryFactoryBeanSupport<T extends Repository<S, ID>,",
                " \t\tthis.factory = createRepositoryFactory();",
                "-\t\tthis.factory.setQueryLookupStrategyKey(queryLookupStrategyKey);",
                "-\t\tthis.factory.setNamedQueries(namedQueries);",
                "-\t\tthis.factory.setEvaluationContextProvider(evaluationContextProvider);",
                "-\t\tthis.factory.setBeanClassLoader(classLoader);",
                "-\t\tthis.factory.setBeanFactory(beanFactory);",
                "-",
                "-\t\tif (publisher != null) {",
                "-\t\t\tthis.factory.addRepositoryProxyPostProcessor(new EventPublishingRepositoryProxyPostProcessor(publisher));",
                "-\t\t}",
                "+\t\tthis.factory.setQueryLookupStrategyKey(this.queryLookupStrategyKey);",
                "+\t\tthis.factory.setNamedQueries(this.namedQueries);",
                "+\t\tthis.factory.setEvaluationContextProvider(this.evaluationContextProvider);",
                "+\t\tthis.factory.setBeanClassLoader(this.classLoader);",
                "+\t\tthis.factory.setBeanFactory(this.beanFactory);",
                "+",
                "+\t\tOptional.ofNullable(this.beanFactory)",
                "+\t\t\t.filter(it -> it instanceof ListableBeanFactory)",
                "+\t\t\t.map(it -> (ListableBeanFactory) it)",
                "+\t\t\t.ifPresent(it -> this.factory.addQueryCreationListener(",
                "+\t\t\t\tnew QueryPostProcessorRegistrationOnQueryCreationListener(it)));",
                "+",
                "+\t\tOptional.ofNullable(this.publisher).ifPresent(it ->",
                "+\t\t\tthis.factory.addRepositoryProxyPostProcessor(new EventPublishingRepositoryProxyPostProcessor(it)));",
                "@@ -299,2 +325,111 @@ public abstract class RepositoryFactoryBeanSupport<T extends Repository<S, ID>,",
                " \tprotected abstract RepositoryFactorySupport createRepositoryFactory();",
                "+",
                "+\tprotected class QueryPostProcessorRegistrationOnQueryCreationListener",
                "+\t\t\timplements QueryCreationListener<RepositoryQuery> {",
                "+",
                "+\t\tprivate Iterable<QueryPostProcessorMetadata> queryPostProcessorsMetadata;",
                "+",
                "+\t\tprotected QueryPostProcessorRegistrationOnQueryCreationListener(@NonNull ListableBeanFactory beanFactory) {",
                "+",
                "+\t\t\tAssert.notNull(beanFactory, \"BeanFactory must not be null\");",
                "+",
                "+\t\t\tList<QueryPostProcessor> queryPostProcessors =",
                "+\t\t\t\tnew ArrayList<>(beanFactory.getBeansOfType(QueryPostProcessor.class).values());",
                "+",
                "+\t\t\tqueryPostProcessors.sort(OrderComparator.INSTANCE);",
                "+",
                "+\t\t\tthis.queryPostProcessorsMetadata = queryPostProcessors.stream()",
                "+\t\t\t\t.map(QueryPostProcessorMetadata::from)",
                "+\t\t\t\t.collect(Collectors.toList());",
                "+\t\t}",
                "+",
                "+\t\t@NonNull",
                "+\t\tprotected Iterable<QueryPostProcessorMetadata> getQueryPostProcessorsMetadata() {",
                "+\t\t\treturn this.queryPostProcessorsMetadata;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void onCreation(@Nullable RepositoryQuery repositoryQuery) {",
                "+",
                "+\t\t\tOptional.ofNullable(repositoryQuery)",
                "+\t\t\t\t.filter(AbstractRepositoryQuery.class::isInstance)",
                "+\t\t\t\t.map(it -> (AbstractRepositoryQuery) it)",
                "+\t\t\t\t.ifPresent(it -> {",
                "+",
                "+\t\t\t\t\tClass<?> repositoryInterface = getRepositoryInformation().getRepositoryInterface();",
                "+",
                "+\t\t\t\t\tStreamSupport.stream(getQueryPostProcessorsMetadata().spliterator(), false)",
                "+\t\t\t\t\t\t.filter(queryPostProcessorMetadata -> queryPostProcessorMetadata.isMatch(repositoryInterface))",
                "+\t\t\t\t\t\t.forEach(queryPostProcessorMetadata -> queryPostProcessorMetadata.register(it));",
                "+\t\t\t\t});",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected static class QueryPostProcessorMetadata {",
                "+",
                "+\t\tprivate static final Map<QueryPostProcessorKey, QueryPostProcessorMetadata> cache = new WeakHashMap<>();",
                "+",
                "+\t\tprivate final Class<?> declaredRepositoryType;",
                "+",
                "+\t\tprivate final QueryPostProcessor<?, ?> queryPostProcessor;",
                "+",
                "+\t\tstatic QueryPostProcessorMetadata from(@NonNull QueryPostProcessor<?, ?> queryPostProcessor) {",
                "+",
                "+\t\t\treturn cache.computeIfAbsent(QueryPostProcessorKey.of(queryPostProcessor),",
                "+\t\t\t\tkey -> new QueryPostProcessorMetadata(key.getQueryPostProcessor()));",
                "+\t\t}",
                "+",
                "+\t\t@SuppressWarnings(\"unchecked\")",
                "+\t\tQueryPostProcessorMetadata(@NonNull QueryPostProcessor<?, ?> queryPostProcessor) {",
                "+",
                "+\t\t\tAssert.notNull(queryPostProcessor, \"QueryPostProcessor must not be null\");",
                "+",
                "+\t\t\tthis.queryPostProcessor = queryPostProcessor;",
                "+",
                "+\t\t\tList<TypeInformation<?>> typeArguments = ClassTypeInformation.from(queryPostProcessor.getClass())",
                "+\t\t\t\t.getRequiredSuperTypeInformation(QueryPostProcessor.class)",
                "+\t\t\t\t.getTypeArguments();",
                "+",
                "+\t\t\tthis.declaredRepositoryType = Optional.of(typeArguments)",
                "+\t\t\t\t.filter(list -> !list.isEmpty())",
                "+\t\t\t\t.map(list -> list.get(0))",
                "+\t\t\t\t.map(TypeInformation::getType)",
                "+\t\t\t\t.orElse((Class) Repository.class);",
                "+\t\t}",
                "+",
                "+\t\t@NonNull",
                "+\t\tprotected Class<?> getDeclaredRepositoryType() {",
                "+\t\t\treturn this.declaredRepositoryType;",
                "+\t\t}",
                "+",
                "+\t\t@NonNull",
                "+\t\tprotected QueryPostProcessor<?, ?> getQueryPostProcessor() {",
                "+\t\t\treturn this.queryPostProcessor;",
                "+\t\t}",
                "+",
                "+\t\tboolean isMatch(@Nullable Class<?> repositoryInterface) {",
                "+",
                "+\t\t\treturn repositoryInterface != null",
                "+\t\t\t\t&& (getDeclaredRepositoryType().isAssignableFrom(repositoryInterface)",
                "+\t\t\t\t\t|| repositoryInterface.isAnnotationPresent(RepositoryDefinition.class));",
                "+\t\t}",
                "+",
                "+\t\t@SuppressWarnings(\"unchecked\")",
                "+\t\tAbstractRepositoryQuery register(@NonNull AbstractRepositoryQuery repositoryQuery) {",
                "+",
                "+\t\t\trepositoryQuery.register(getQueryPostProcessor());",
                "+",
                "+\t\t\treturn repositoryQuery;",
                "+\t\t}",
                "+",
                "+\t\t@Value",
                "+\t\t@EqualsAndHashCode",
                "+\t\t@RequiredArgsConstructor(staticName = \"of\")",
                "+\t\tprivate static class QueryPostProcessorKey {",
                "+",
                "+\t\t\t@lombok.NonNull @Getter",
                "+\t\t\tprivate final QueryPostProcessor<?, ?> queryPostProcessor;",
                "+",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/repository/query/AbstractRepositoryQuery.java b/src/main/java/org/springframework/data/repository/query/AbstractRepositoryQuery.java",
                "new file mode 100644",
                "index 000000000..e4bc9d5ca",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/repository/query/AbstractRepositoryQuery.java",
                "@@ -0,0 +1,102 @@",
                "+/*",
                "+ * Copyright 2012-2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.data.repository.query;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.core.Ordered;",
                "+import org.springframework.data.repository.Repository;",
                "+",
                "+/**",
                "+ * Abstract base class encapsulating functionality common to all {@link RepositoryQuery} implementations,",
                "+ * such as providing support for query post processing.",
                "+ *",
                "+ * @author John Blum",
                "+ * @see org.springframework.data.repository.Repository",
                "+ * @see org.springframework.data.repository.query.RepositoryQuery",
                "+ * @since 1.0.0",
                "+ */",
                "+@SuppressWarnings({ \"unused\", \"unchecked\" })",
                "+public abstract class AbstractRepositoryQuery<QUERY> implements RepositoryQuery {",
                "+",
                "+\tprivate QueryPostProcessor<?, QUERY> queryPostProcessor = ProvidedQueryPostProcessors.IDENTITY;",
                "+",
                "+\t/**",
                "+\t * Returns a reference to the composed {@link QueryPostProcessor QueryPostProcessors}, which are applied",
                "+\t * to {@link QUERY queries} before execution.",
                "+\t *",
                "+\t * @return a reference to the composed {@link QueryPostProcessor QueryPostProcessors}.",
                "+\t * @see org.springframework.data.repository.query.QueryPostProcessor",
                "+\t */",
                "+\tprotected QueryPostProcessor<?, QUERY> getQueryPostProcessor() {",
                "+\t\treturn this.queryPostProcessor;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Registers the given {@link QueryPostProcessor} to use for processing {@link QUERY queries}",
                "+\t * generated from {@link Repository} {@link QueryMethod query methods}.",
                "+\t *",
                "+\t * Registration always links the given {@link QueryPostProcessor} to the end of the processing chain",
                "+\t * of previously registered {@link QueryPostProcessor QueryPostProcessors}.  In other words, the given",
                "+\t * {@link QueryPostProcessor} argument will process {@link QUERY queries} only after all",
                "+\t * {@link QueryPostProcessor QueryPostProcess} registered before it.",
                "+\t *",
                "+\t * @param <T> {@link Class sub-type} of {@link Repository}.",
                "+\t * @param queryPostProcessor {@link QueryPostProcessor} to register.",
                "+\t * @return this {@link RepositoryQuery}.",
                "+\t * @see org.springframework.data.repository.query.QueryPostProcessor#processBefore(QueryPostProcessor)",
                "+\t */",
                "+\tpublic <T extends RepositoryQuery> T register(QueryPostProcessor<?, QUERY> queryPostProcessor) {",
                "+\t\tthis.queryPostProcessor = this.queryPostProcessor.processBefore(queryPostProcessor);",
                "+\t\treturn (T) this;",
                "+\t}",
                "+",
                "+\tpublic enum ProvidedQueryPostProcessors implements QueryPostProcessor {",
                "+",
                "+\t\tIDENTITY {",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic int getOrder() {",
                "+\t\t\t\treturn Ordered.HIGHEST_PRECEDENCE;",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic Object postProcess(QueryMethod queryMethod, Object query, Object... arguments) {",
                "+\t\t\t\treturn query;",
                "+\t\t\t}",
                "+\t\t},",
                "+",
                "+\t\tLOGGING {",
                "+",
                "+\t\t\tprivate final Logger logger =",
                "+\t\t\t\tLoggerFactory.getLogger(ProvidedQueryPostProcessors.class.getName().concat(\".LOGGER\"));",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic Object postProcess(QueryMethod queryMethod, Object query, Object... arguments) {",
                "+",
                "+\t\t\t\tif (this.logger.isTraceEnabled()) {",
                "+\t\t\t\t\tthis.logger.trace(\"Executing query [{}] with arguments [{}] for query method [{}]\",",
                "+\t\t\t\t\t\tquery, Arrays.toString(arguments), queryMethod.getName());",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\treturn query;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/repository/query/QueryPostProcessor.java b/src/main/java/org/springframework/data/repository/query/QueryPostProcessor.java",
                "new file mode 100644",
                "index 000000000..3b0d3ead0",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/repository/query/QueryPostProcessor.java",
                "@@ -0,0 +1,126 @@",
                "+/*",
                "+ * Copyright 2012-2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.data.repository.query;",
                "+",
                "+import org.springframework.core.Ordered;",
                "+import org.springframework.data.repository.Repository;",
                "+import org.springframework.data.repository.core.NamedQueries;",
                "+import org.springframework.lang.NonNull;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * {@link QueryPostProcessor} defines a contract for implementations to post process a given {@literal query}",
                "+ * and possibly return a new or modified version of the same {@literal query}.",
                "+ *",
                "+ * {@link QueryPostProcessor QueryPostProcessors} are particularly useful for {@link Repository}",
                "+ * {@link QueryMethod query method} generated {@literal queries}, giving the user a chance",
                "+ * via the callback to further process the generated {@literal query}.",
                "+ *",
                "+ * @author John Blum",
                "+ * @param <T> {@link Class type} identifying the {@link Repository Repositories} to match on for registration.",
                "+ * @param <QUERY> {@link Class type} of the query to process.",
                "+ * @see org.springframework.data.repository.Repository",
                "+ * @see org.springframework.data.repository.query.QueryMethod",
                "+ * @since 2.1.0",
                "+ */",
                "+@FunctionalInterface",
                "+@SuppressWarnings(\"unused\")",
                "+public interface QueryPostProcessor<T extends Repository, QUERY> extends Ordered {",
                "+",
                "+\tObject[] EMPTY_ARGUMENTS = new Object[0];",
                "+",
                "+\t/**",
                "+\t * Defines the {@link Integer order} of this {@link QueryPostProcessor} relative to",
                "+\t * other {@link QueryPostProcessor QueryPostProcessors} in a sort.",
                "+\t *",
                "+\t * Defaults to the {@link Ordered#LOWEST_PRECEDENCE}.",
                "+\t *",
                "+\t * @return an {@link Integer} value specifying the {@link Integer order} of this {@link QueryPostProcessor}",
                "+\t * relative to other {@link QueryPostProcessor QueryPostProcessors} in a sort.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                "+\t */",
                "+\t@Override",
                "+\tdefault int getOrder() {",
                "+\t\treturn Ordered.LOWEST_PRECEDENCE;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Callback method invoked by the Spring Data (SD) {@link Repository} framework to allow the user to process",
                "+\t * the given {@link QUERY query} and (possibly) return a new or modified version of the {@link QUERY query}.",
                "+\t *",
                "+\t * This callback is invoked for {@literal queries} generated from the SD {@link Repository} {@link QueryMethod}",
                "+\t * signature as well as {@literal queries} specified and defined in {@link NamedQueries}.",
                "+\t *",
                "+\t * @param query {@link QUERY query} to process.",
                "+\t * @return a new or modified version of the same {@link QUERY query}.",
                "+\t * @see org.springframework.data.repository.query.QueryMethod",
                "+\t * @see #postProcess(QueryMethod, Object, Object...)",
                "+\t */",
                "+\tdefault QUERY postProcess(@NonNull QueryMethod queryMethod, QUERY query) {",
                "+\t\treturn postProcess(queryMethod, query, EMPTY_ARGUMENTS);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Callback used to post process the given {@link QUERY query} and return possibly a new or modified version",
                "+\t * of the {@link QUERY query}.",
                "+\t *",
                "+\t * This callback is invoked for {@literal queries} generated from the SD {@link Repository} {@link QueryMethod}",
                "+\t * signature as well as {@literal queries} specified and defined in {@link NamedQueries}.",
                "+\t *",
                "+\t * @param query {@link QUERY query} to process.",
                "+\t * @param arguments array of {@link Object Objects} containing the arguments to the {@link QUERY query} parameters.",
                "+\t * @return a new or modified version of the same {@link QUERY query}.",
                "+\t * @see org.springframework.data.repository.query.QueryMethod",
                "+\t */",
                "+\tQUERY postProcess(@NonNull QueryMethod queryMethod, QUERY query, Object... arguments);",
                "+",
                "+\t/**",
                "+\t * Builder method used to compose, or combine this {@link QueryPostProcessor QueryPostProcessors}",
                "+\t * with the given {@link QueryPostProcessor}.",
                "+\t *",
                "+\t * This {@link QueryPostProcessor} will come before this {@link QueryPostProcessor} in the processing chain.",
                "+\t *",
                "+\t * @param queryPostProcessor {@link QueryPostProcessor} to compose with this {@link QueryPostProcessor}.",
                "+\t * @return a composed {@link QueryPostProcessor} consisting of this {@link QueryPostProcessor}",
                "+\t * followed by the given {@link QueryPostProcessor}.  Returns this {@link QueryPostProcessor}",
                "+\t * if the given {@link QueryPostProcessor} is {@literal null}.",
                "+\t * @see #processAfter(QueryPostProcessor)",
                "+\t */",
                "+\t@NonNull",
                "+\tdefault QueryPostProcessor<?, QUERY> processBefore(@Nullable QueryPostProcessor<?, QUERY> queryPostProcessor) {",
                "+\t\treturn queryPostProcessor == null ? this : (queryMethod, query, arguments) ->",
                "+\t\t\tqueryPostProcessor.postProcess(queryMethod, this.postProcess(queryMethod, query, arguments), arguments);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Builder method used to compose, or combine this {@link QueryPostProcessor QueryPostProcessors}",
                "+\t * with the given {@link QueryPostProcessor}.",
                "+\t *",
                "+\t * This {@link QueryPostProcessor} will come after this {@link QueryPostProcessor} in the processing chain.",
                "+\t *",
                "+\t * @param queryPostProcessor {@link QueryPostProcessor} to compose with this {@link QueryPostProcessor}.",
                "+\t * @return a composed {@link QueryPostProcessor} consisting of the given {@link QueryPostProcessor}",
                "+\t * followed by this {@link QueryPostProcessor}.  Returns this {@link QueryPostProcessor}",
                "+\t * if the given {@link QueryPostProcessor} is {@literal null}.",
                "+\t * @see #processBefore(QueryPostProcessor)",
                "+\t */",
                "+\t@NonNull",
                "+\tdefault QueryPostProcessor<?, QUERY> processAfter(@Nullable QueryPostProcessor<?, QUERY> queryPostProcessor) {",
                "+\t\treturn queryPostProcessor == null ? this : (queryMethod, query, arguments) ->",
                "+\t\t\tthis.postProcess(queryMethod, queryPostProcessor.postProcess(queryMethod, query, arguments), arguments);",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFactoryBeanSupport.java",
                "src/main/java/org/springframework/data/repository/query/AbstractRepositoryQuery.java",
                "src/main/java/org/springframework/data/repository/query/QueryPostProcessor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: base, back, user, execution",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "73103f35510a5388ed90a243a0a22a68e53f55f3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522158867,
            "hunks": 3,
            "message": "DATACMNS-1281 - Fixed potential concurrency issue in MappingAuditableBeanWrapperFactory. We now use a ConcurrentReferenceHashMap to cache the metadata calculated to prevent ConcurrentModificationExceptions getBeanWrapperFor(\u00e2\u0080\u00a6).",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "index 28f201eb5..08afabda5 100644",
                "--- a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "+++ b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "@@ -18,3 +18,2 @@ package org.springframework.data.auditing;",
                " import java.time.temporal.TemporalAccessor;",
                "-import java.util.HashMap;",
                " import java.util.Map;",
                "@@ -34,2 +33,3 @@ import org.springframework.data.util.Optionals;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ConcurrentReferenceHashMap;",
                "@@ -59,3 +59,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tthis.entities = entities;",
                "-\t\tthis.metadataCache = new HashMap<>();",
                "+\t\tthis.metadataCache = new ConcurrentReferenceHashMap<>();",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8bbcca2ef2b922108da9462e797278e7bd27a15b"
                ],
                [
                    "no-tag",
                    "b0dc8be7f04f32158ef5ca9a4a8aebe0fa40f423"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "797c74650928639c5acb4edc735ddf9f0c86bcea",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522846682,
            "hunks": 1,
            "message": "DATACMNS-1248 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4302dcd1d..962c448f4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.11.RELEASE</version>",
                "+\t<version>1.13.12.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d0d2b8658fdcb21b88418a9ac0f508bb5f6db59e",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522844447,
            "hunks": 2,
            "message": "DATACMNS-1248 - Prepare 1.13.11 (Ingalls SR11).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d5406a68c..00cd75f24 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.11.BUILD-SNAPSHOT</version>",
                "+\t\t<version>1.9.11.RELEASE</version>",
                " \t</parent>",
                "@@ -314,4 +314,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c3196b0d63ee054e87a4aa65263eb5f5b2c3668",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519872588,
            "hunks": 1,
            "message": "DATACMNS-1268 - Prepare issue branch.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6ca40eba5..2d96602e4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.1.0.BUILD-SNAPSHOT</version>",
                "+\t<version>2.1.0.DATACMNS-1268-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "f01607353b907cd4f167a97aee9390f1a7ecee6b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522846683,
            "hunks": 2,
            "message": "DATACMNS-1248 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 962c448f4..c67e886e7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.11.RELEASE</version>",
                "+\t\t<version>1.9.12.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -314,4 +314,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0e772a560b032acec0352d6dcfe6d8bdc47b01ed",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522852953,
            "hunks": 2,
            "message": "DATACMNS-1267 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 79e40782e..c582ae0c3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.6.RELEASE</version>",
                "+\t\t<version>2.0.7.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e058845610c0e01fe6baddfa2f7348bed1db59e5",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522849951,
            "hunks": 2,
            "message": "DATACMNS-1267 - Prepare 2.0.6 (Kay SR6).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e0b5390ac..df1d3a2b7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.6.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.0.6.RELEASE</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c9db62c5c0da37357405420c7aaa085637bc6fe3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522852950,
            "hunks": 1,
            "message": "DATACMNS-1267 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0e570c712..79e40782e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.6.RELEASE</version>",
                "+\t<version>2.0.7.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        }
    ]
}
