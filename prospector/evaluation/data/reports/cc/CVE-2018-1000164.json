{
    "advisory_record": {
        "cve_id": "CVE-2018-1000164",
        "description": "gunicorn version 19.4.5 contains a CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers vulnerability in \"process_headers\" function in \"gunicorn/http/wsgi.py\" that can result in an attacker causing the server to return arbitrary HTTP headers. This vulnerability appears to have been fixed in 19.5.0.",
        "reserved_timestamp": 1522627200,
        "published_timestamp": 1524078000,
        "updated_timestamp": 1560978364,
        "repository_url": null,
        "references": {
            "": 152,
            "https://github.com/benoitc/gunicorn/issues/1227": 10,
            "https://epadillas.github.io/2018/04/02/http-header-splitting-in-gunicorn-19.4.5": 7,
            "commit::5263a4ef2a63c62216680876f3813959839608ff": 6,
            "https://lists.debian.org/debian-lts-announce/2018/04/msg00022.html": 2,
            "https://www.debian.org/security/2018/dsa-4186": 2,
            "https://usn.ubuntu.com/4022-1/": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "commit::d38804c654c4f2cc719baf88d32e7740b460a7b7": 2,
            "commit::1e10a02e73c87dfadc394b361af33864d0e59e24": 2,
            "https://github.com/benoitc": 2,
            "commit::6c3d8f9c205f541a6ae0a1d5eba32b1cfca252ee": 2,
            "commit::76fdbfd8e62830ec9aa1cf26927ecb1032372daa": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5267.php": 1,
            "https://github.com/Pylons/waitress/issues/117": 1,
            "https://github.com/Pylons/webob/pull/229": 1,
            "https://github.com/Pylons/waitress/issues/122": 1,
            "https://github.com/gevent/gevent/issues/775": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5285": 1,
            "https://github.com/benoitc/gunicorn/blob/master/gunicorn/http/wsgi.py#L263": 1,
            "https://www.python.org/dev/peps/pep-0475/": 1,
            "https://github.com/jamadden": 1,
            "https://github.com/berkerpeksag": 1,
            "https://github.com/tilgovi": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "Neutralization",
            "CRLF",
            "HTTP",
            "Improper",
            "n/a",
            "Sequences"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "HTTP",
            "CWE-113",
            "process_headers",
            "CRLF",
            "wsgi"
        ],
        "keywords": [
            "gunicorn",
            "function",
            "result",
            "attacker",
            "http",
            "vulnerability",
            "header",
            "appear",
            "contain",
            "crlf",
            "neutralization",
            "server",
            "improper",
            "cause",
            "version",
            "sequences",
            "return"
        ],
        "files_extension": [
            "py"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "1e10a02e73c87dfadc394b361af33864d0e59e24",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458339326,
            "hunks": 6,
            "message": "check if the header contains control characters fix #1227",
            "diff": [
                "diff --git a/gunicorn/http/wsgi.py b/gunicorn/http/wsgi.py",
                "index 1e373bbc..a0e21872 100644",
                "--- a/gunicorn/http/wsgi.py",
                "+++ b/gunicorn/http/wsgi.py",
                "@@ -12,2 +12,4 @@ import sys",
                " from gunicorn._compat import unquote_to_wsgi_str",
                "+from gunicorn.http.message import HEADER_RE",
                "+from gunicorn.http.errors import InvalidHeader, InvalidHeaderName",
                " from gunicorn.six import string_types, binary_type, reraise",
                "@@ -30,2 +32,3 @@ BLKSIZE = 0x3FFFFFFF",
                " NORMALIZE_SPACE = re.compile(r'(?:\\r\\n)?[ \\t]+')",
                "+HEADER_VALUE_RE = re.compile(r'[\\x00-\\x1F\\x7F]')",
                "@@ -266,2 +269,9 @@ class Response(object):",
                "                 raise TypeError('%r is not a string' % name)",
                "+",
                "+            if HEADER_RE.search(name):",
                "+                raise InvalidHeaderName('%r' % name)",
                "+",
                "+            if HEADER_VALUE_RE.search(value):",
                "+                raise InvalidHeader('%r' % value)",
                "+",
                "             value = str(value).strip()",
                "diff --git a/tests/test_http.py b/tests/test_http.py",
                "index 973bc7d7..7b4761c8 100644",
                "--- a/tests/test_http.py",
                "+++ b/tests/test_http.py",
                "@@ -3,2 +3,3 @@",
                " import t",
                "+import pytest",
                " from gunicorn import util",
                "@@ -7,2 +8,3 @@ from gunicorn.http.wsgi import Response",
                " from gunicorn.six import BytesIO",
                "+from gunicorn.http.errors import InvalidHeader, InvalidHeaderName",
                "@@ -96 +98,18 @@ def test_http_header_encoding():",
                "         assert isinstance(e, UnicodeEncodeError)",
                "+",
                "+",
                "+def test_http_inalid_response_header():",
                "+    \"\"\" tests whether http response headers are contains control chars \"\"\"",
                "+",
                "+    mocked_socket = mock.MagicMock()",
                "+    mocked_socket.sendall = mock.MagicMock()",
                "+",
                "+    mocked_request = mock.MagicMock()",
                "+    response = Response(mocked_request, mocked_socket, None)",
                "+",
                "+    with pytest.raises(InvalidHeader):",
                "+        response.start_response(\"200 OK\", [('foo', 'essai\\r\\n')])",
                "+",
                "+    response = Response(mocked_request, mocked_socket, None)",
                "+    with pytest.raises(InvalidHeaderName):",
                "+        response.start_response(\"200 OK\", [('foo\\r\\n', 'essai')])"
            ],
            "changed_files": [
                "gunicorn/http/wsgi.py",
                "tests/test_http.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1227": "check if the header contains control characters #1229"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1227",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: wsgi",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tests/test_http.py, gunicorn/http/wsgi.py",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: contain, header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1227",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f2418a95e0df21ae53fc8dba96995e18b2efa961",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458520495,
            "hunks": 14,
            "message": "[thread] close sockets at graceful shutdown The run loop has to change slightly to support graceful shutdown. There is no way to interrupt a call to `futures.wait` so instead the pattern, used by the async workers, is to sleep for only one second at the most. The poll is extended to a one second timeout to match. Since threads are preemptively scheduled, it's possible that the listener is closed when the request is actually handled. For this reason it is necessary to slightly refactor the TConn class to store the listening socket name. The name is checked once at the start of the worker run loop. Ref #922",
            "diff": [
                "diff --git a/gunicorn/workers/gthread.py b/gunicorn/workers/gthread.py",
                "index d66fe482..7327a318 100644",
                "--- a/gunicorn/workers/gthread.py",
                "+++ b/gunicorn/workers/gthread.py",
                "@@ -46,7 +46,7 @@ class TConn(object):",
                "-    def __init__(self, cfg, listener, sock, addr):",
                "+    def __init__(self, cfg, sock, client, server):",
                "         self.cfg = cfg",
                "-        self.listener = listener",
                "         self.sock = sock",
                "-        self.addr = addr",
                "+        self.client = client",
                "+        self.server = server",
                "@@ -129,7 +129,7 @@ class ThreadWorker(base.Worker):",
                "-    def accept(self, listener):",
                "+    def accept(self, server, listener):",
                "         try:",
                "-            client, addr = listener.accept()",
                "+            sock, client = listener.accept()",
                "             # initialize the connection object",
                "-            conn = TConn(self.cfg, listener, client, addr)",
                "+            conn = TConn(self.cfg, sock, client, server)",
                "             self.nr_conns += 1",
                "@@ -194,7 +194,9 @@ class ThreadWorker(base.Worker):",
                "         # init listeners, add them to the event loop",
                "-        for s in self.sockets:",
                "-            s.setblocking(False)",
                "-            self.poller.register(s, selectors.EVENT_READ, self.accept)",
                "-",
                "-        timeout = self.cfg.timeout or 0.5",
                "+        for sock in self.sockets:",
                "+            sock.setblocking(False)",
                "+            # a race condition during graceful shutdown may make the listener",
                "+            # name unavailable in the request handler so capture it once here",
                "+            server = sock.getsockname()",
                "+            acceptor = partial(self.accept, server)",
                "+            self.poller.register(sock, selectors.EVENT_READ, acceptor)",
                "@@ -207,3 +209,3 @@ class ThreadWorker(base.Worker):",
                "                 # wait for an event",
                "-                events = self.poller.select(0.02)",
                "+                events = self.poller.select(1.0)",
                "                 for key, mask in events:",
                "@@ -212,2 +214,14 @@ class ThreadWorker(base.Worker):",
                "+                # check (but do not wait) for finished requests",
                "+                result = futures.wait(self.futures, timeout=0,",
                "+                        return_when=futures.FIRST_COMPLETED)",
                "+            else:",
                "+                # wait for a request to finish",
                "+                result = futures.wait(self.futures, timeout=1.0,",
                "+                        return_when=futures.FIRST_COMPLETED)",
                "+",
                "+            # clean up finished requests",
                "+            for fut in result.done:",
                "+                self.futures.remove(fut)",
                "+",
                "             if not self.is_parent_alive():",
                "@@ -218,15 +232,2 @@ class ThreadWorker(base.Worker):",
                "-            # if the number of connections is < to the max we can handle at",
                "-            # the same time there is no need to wait for one",
                "-            if len(self.futures) < self.cfg.threads:",
                "-                continue",
                "-",
                "-            result = futures.wait(self.futures, timeout=timeout,",
                "-                    return_when=futures.FIRST_COMPLETED)",
                "-",
                "-            if not result.done:",
                "-                break",
                "-            else:",
                "-                [self.futures.remove(f) for f in result.done]",
                "-",
                "         self.tpool.shutdown(False)",
                "@@ -234,2 +235,7 @@ class ThreadWorker(base.Worker):",
                "+        for s in self.sockets:",
                "+            s.close()",
                "+",
                "+        futures.wait(self.futures, timeout=self.cfg.graceful_timeout)",
                "+",
                "     def finish_request(self, fs):",
                "@@ -287,3 +293,3 @@ class ThreadWorker(base.Worker):",
                "                 self.log.debug(\"Error processing SSL request.\")",
                "-                self.handle_error(req, conn.sock, conn.addr, e)",
                "+                self.handle_error(req, conn.sock, conn.client, e)",
                "@@ -298,3 +304,3 @@ class ThreadWorker(base.Worker):",
                "         except Exception as e:",
                "-            self.handle_error(req, conn.sock, conn.addr, e)",
                "+            self.handle_error(req, conn.sock, conn.client, e)",
                "@@ -308,4 +314,4 @@ class ThreadWorker(base.Worker):",
                "             request_start = datetime.now()",
                "-            resp, environ = wsgi.create(req, conn.sock, conn.addr,",
                "-                    conn.listener.getsockname(), self.cfg)",
                "+            resp, environ = wsgi.create(req, conn.sock, conn.client,",
                "+                    conn.server, self.cfg)",
                "             environ[\"wsgi.multithread\"] = True"
            ],
            "changed_files": [
                "gunicorn/workers/gthread.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "922": "Threaded workers accept connections even when no ready thread exist #908 Shutdown takes 30 second to complete #901 [arbiter] close sockets on shutdown #1221 [thread] close sockets at graceful shutdown #1230 Make graceful shut-down keep-alive behavior consistent #1236 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: wsgi",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 922",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "33924a86493c70f9cfcfa4ff0f057fdaa1d77084",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458453133,
            "hunks": 4,
            "message": "Use more pytest.raises() in test_http.py Signed-off-by: Berker Peksag <berker.peksag@gmail.com>",
            "diff": [
                "diff --git a/tests/test_http.py b/tests/test_http.py",
                "index 7b4761c8..49d42f3e 100644",
                "--- a/tests/test_http.py",
                "+++ b/tests/test_http.py",
                "@@ -83,7 +83,4 @@ def test_http_header_encoding():",
                "     response.headers.append(('foo', 'h\u00c3\u00a4der'))",
                "-    try:",
                "+    with pytest.raises(UnicodeEncodeError):",
                "         response.send_headers()",
                "-    except Exception as e:",
                "-        assert isinstance(e, UnicodeEncodeError)",
                "-",
                "@@ -94,6 +91,4 @@ def test_http_header_encoding():",
                "-    try:",
                "+    with pytest.raises(UnicodeEncodeError):",
                "         mocked_socket.sendall(util.to_bytestring(header_str,\"ascii\"))",
                "-    except Exception as e:",
                "-        assert isinstance(e, UnicodeEncodeError)"
            ],
            "changed_files": [
                "tests/test_http.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tests/test_http.py",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "31fd844333fe33fbe50c98429af105cdeb806650",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458454565,
            "hunks": 1,
            "message": "Fix test_http on Python 2",
            "diff": [
                "diff --git a/tests/test_http.py b/tests/test_http.py",
                "index dd996593..1a559acf 100644",
                "--- a/tests/test_http.py",
                "+++ b/tests/test_http.py",
                "@@ -82,3 +82,3 @@ def test_http_header_encoding():",
                "     # set umlaut header",
                "-    response.headers.append(('foo', 'h\u00c3\u00a4der'))",
                "+    response.headers.append(('foo', u'h\u00c3\u00a4der'))",
                "     with pytest.raises(UnicodeEncodeError):"
            ],
            "changed_files": [
                "tests/test_http.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tests/test_http.py",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "b17f1bc305a3a3e7cccc3e36feb0e83858ad7cf1",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458453179,
            "hunks": 1,
            "message": "Fix typo in test name",
            "diff": [
                "diff --git a/tests/test_http.py b/tests/test_http.py",
                "index 49d42f3e..dd996593 100644",
                "--- a/tests/test_http.py",
                "+++ b/tests/test_http.py",
                "@@ -95,3 +95,3 @@ def test_http_header_encoding():",
                "-def test_http_inalid_response_header():",
                "+def test_http_invalid_response_header():",
                "     \"\"\" tests whether http response headers are contains control chars \"\"\""
            ],
            "changed_files": [
                "tests/test_http.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tests/test_http.py",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "20d3a2d0c972dfcdf68b4bb2893202d49d4be954",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458255656,
            "hunks": 10,
            "message": "clean up sys.exc_info calls to drop circular refs",
            "diff": [
                "diff --git a/gunicorn/_compat.py b/gunicorn/_compat.py",
                "index 38fefe44..e4e6b215 100644",
                "--- a/gunicorn/_compat.py",
                "+++ b/gunicorn/_compat.py",
                "@@ -109,7 +109,4 @@ def _wrap_error(exc, mapping, key):",
                "     # raise a new exception with the original traceback",
                "-    if hasattr(exc, '__traceback__'):",
                "-        traceback = exc.__traceback__",
                "-    else:",
                "-        traceback = sys.exc_info()[2]",
                "-    six.reraise(new_err_cls, new_err, traceback)",
                "+    six.reraise(new_err_cls, new_err,",
                "+                exc.__traceback__ if hasattr(exc, '__traceback__') else sys.exc_info()[2])",
                "diff --git a/gunicorn/workers/async.py b/gunicorn/workers/async.py",
                "index 4acbf3f9..53da7cac 100644",
                "--- a/gunicorn/workers/async.py",
                "+++ b/gunicorn/workers/async.py",
                "@@ -57,9 +57,7 @@ class AsyncWorker(base.Worker):",
                "             except ssl.SSLError:",
                "-                exc_info = sys.exc_info()",
                "                 # pass to next try-except level",
                "-                six.reraise(exc_info[0], exc_info[1], exc_info[2])",
                "+                six.reraise(*sys.exc_info())",
                "             except EnvironmentError:",
                "-                exc_info = sys.exc_info()",
                "                 # pass to next try-except level",
                "-                six.reraise(exc_info[0], exc_info[1], exc_info[2])",
                "+                six.reraise(*sys.exc_info())",
                "             except Exception as e:",
                "diff --git a/gunicorn/workers/base.py b/gunicorn/workers/base.py",
                "index 9ba8e756..9cbe6693 100644",
                "--- a/gunicorn/workers/base.py",
                "+++ b/gunicorn/workers/base.py",
                "@@ -136,7 +136,14 @@ class Worker(object):",
                "-            exc_type, exc_val, exc_tb = sys.exc_info()",
                "-            self.reloader.add_extra_file(exc_val.filename)",
                "-",
                "-            tb_string = traceback.format_exc(exc_tb)",
                "-            self.wsgi = util.make_fail_app(tb_string)",
                "+            # fix from PR #1228",
                "+            # storing the traceback into exc_tb will create a circular reference.",
                "+            # per https://docs.python.org/2/library/sys.html#sys.exc_info warning,",
                "+            # delete the traceback after use.",
                "+            try:",
                "+                exc_type, exc_val, exc_tb = sys.exc_info()",
                "+                self.reloader.add_extra_file(exc_val.filename)",
                "+",
                "+                tb_string = traceback.format_exc(exc_tb)",
                "+                self.wsgi = util.make_fail_app(tb_string)",
                "+            finally:",
                "+                del exc_tb",
                "diff --git a/gunicorn/workers/gthread.py b/gunicorn/workers/gthread.py",
                "index 25a7e57b..d66fe482 100644",
                "--- a/gunicorn/workers/gthread.py",
                "+++ b/gunicorn/workers/gthread.py",
                "@@ -341,5 +341,4 @@ class ThreadWorker(base.Worker):",
                "         except EnvironmentError:",
                "-            exc_info = sys.exc_info()",
                "             # pass to next try-except level",
                "-            six.reraise(exc_info[0], exc_info[1], exc_info[2])",
                "+            six.reraise(*sys.exc_info())",
                "         except Exception:",
                "diff --git a/gunicorn/workers/sync.py b/gunicorn/workers/sync.py",
                "index c59c2e96..15ac0843 100644",
                "--- a/gunicorn/workers/sync.py",
                "+++ b/gunicorn/workers/sync.py",
                "@@ -184,5 +184,4 @@ class SyncWorker(base.Worker):",
                "         except EnvironmentError:",
                "-            exc_info = sys.exc_info()",
                "             # pass to next try-except level",
                "-            six.reraise(exc_info[0], exc_info[1], exc_info[2])",
                "+            six.reraise(*sys.exc_info())",
                "         except Exception:"
            ],
            "changed_files": [
                "gunicorn/_compat.py",
                "gunicorn/workers/async.py",
                "gunicorn/workers/base.py",
                "gunicorn/workers/gthread.py",
                "gunicorn/workers/sync.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: wsgi",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "17b5b9e29052f9de830c0844c994bc7c323ba033",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457655506,
            "hunks": 1,
            "message": "Typo",
            "diff": [
                "diff --git a/docs/site/index.html b/docs/site/index.html",
                "index 37745bab..afb6b38f 100644",
                "--- a/docs/site/index.html",
                "+++ b/docs/site/index.html",
                "@@ -92,3 +92,3 @@",
                "         <p>",
                "-          Gunicorn is an WSGI HTTP server. It is best to use Gunicorn behind an HTTP proxy server. We strongly advise you to use <a href=\"http://www.nginx.org/\">nginx</a>.",
                "+          Gunicorn is a WSGI HTTP server. It is best to use Gunicorn behind an HTTP proxy server. We strongly advise you to use <a href=\"http://www.nginx.org/\">nginx</a>.",
                "         </p>"
            ],
            "changed_files": [
                "docs/site/index.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTTP",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "3dd75058893b51bb97accf4207dfba4f3e8eb105",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457655309,
            "hunks": 9,
            "message": "Wording touch-ups Typos and grammer fixes",
            "diff": [
                "diff --git a/docs/site/index.html b/docs/site/index.html",
                "index 387cc2a4..37745bab 100644",
                "--- a/docs/site/index.html",
                "+++ b/docs/site/index.html",
                "@@ -41,3 +41,3 @@",
                "             <h2>Quickstart</h2>",
                "-            <p>Quickstart guide to getting started with using Gunicorn.</p>",
                "+            <p>Read the quickstart guide to get started using Gunicorn.</p>",
                "           </a>",
                "@@ -59,3 +59,3 @@",
                "             <h2>Documentation</h2>",
                "-            <p>Read documentation to learn more about the Gunicorn.</p>",
                "+            <p>Read the documentation to learn more about Gunicorn.</p>",
                "           </a>",
                "@@ -92,5 +92,5 @@",
                "         <p>",
                "-          Gunicorn is wsgi http server. It is best to use Gunicorn behind HTTP proxy server. We strongly advise you to use <a href=\"http://www.nginx.org/\">nginx</a>.",
                "+          Gunicorn is an WSGI HTTP server. It is best to use Gunicorn behind an HTTP proxy server. We strongly advise you to use <a href=\"http://www.nginx.org/\">nginx</a>.",
                "         </p>",
                "-        <p>Here's an example to help you get started with using nginx.</p>",
                "+        <p>Here's an example to help you get started with using nginx:</p>",
                " <pre>",
                "@@ -108,3 +108,3 @@",
                " </pre>",
                "-        <p>Nginx is set up as reverse proxy server to Gunicorn server which is running at localhost port 8000.</p>",
                "+        <p>Nginx is set up as reverse proxy server to a Gunicorn server running on localhost port 8000.</p>",
                "         <p>Read the full documentation at <a",
                "@@ -114,3 +114,3 @@",
                "         <h1>Mailing list</h1>",
                "-        <p>The user mailing list is general discussion and support list for",
                "+        <p>The user mailing list is a general discussion and support list for",
                "           Gunicorn users and developers.</p>",
                "@@ -124,3 +124,3 @@",
                "             <li>",
                "-              Finally, to post a message to the list use the address to",
                "+              Finally, to post a message to the list use the address",
                "               <a href=\"mailto:user&#64;gunicorn.org\">user&#64;gunicorn.org</a>",
                "@@ -131,3 +131,3 @@",
                "         <p>The Gunicorn channel is on the <a href=\"http://freenode.net/\">Freenode</a> IRC",
                "-          network. You can chat with other on <a href=\"http://webchat.freenode.net/?channels=gunicorn\">#gunicorn channel</a>.</p>",
                "+          network. You can chat with the community on the <a href=\"http://webchat.freenode.net/?channels=gunicorn\">#gunicorn channel</a>.</p>",
                "@@ -140,3 +140,3 @@",
                "         developers are subscribed to it. To post a message to the list use the",
                "-        address to  <a  href=\"mailto:security&#64;gunicorn.org\">security&#64;gunicorn.org</a></p>",
                "+        address <a  href=\"mailto:security&#64;gunicorn.org\">security&#64;gunicorn.org</a></p>"
            ],
            "changed_files": [
                "docs/site/index.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTTP, wsgi",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "03a944d66854e8c3a873973c2732a99f205b13fd",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458769032,
            "hunks": 1,
            "message": "Fixed traceback formatting",
            "diff": [
                "diff --git a/gunicorn/workers/base.py b/gunicorn/workers/base.py",
                "index 213feaae..5f18e9eb 100644",
                "--- a/gunicorn/workers/base.py",
                "+++ b/gunicorn/workers/base.py",
                "@@ -144,3 +144,3 @@ class Worker(object):",
                "-                tb_string = traceback.format_exc(exc_tb)",
                "+                tb_string = traceback.format_tb(exc_tb)",
                "                 self.wsgi = util.make_fail_app(tb_string)"
            ],
            "changed_files": [
                "gunicorn/workers/base.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: wsgi",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "5b32dde3ef354365b561648e2ea6948abcbf1605",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458436708,
            "hunks": 0,
            "message": "Merge pull request #1228 from lyft/circular-ref-async-fd-leak-fix Fix delayed socket close caused by circular ref from assigning traceback to local var",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1228": "Fixed traceback formatting for syntax errors #1235 feat(import_app): print original exception on AppImportError #1334 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cause",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1228",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b0529d5a97246ac3cc7c3d6d291a462ad17df29",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458854118,
            "hunks": 0,
            "message": "Merge pull request #1235 from MarSoft/fix-traceback Fixed traceback formatting for syntax errors",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1235": "Fix #1397 by calling load_wsgi after starting the reloader #1399 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "706eb98f33262b9b84204691bce633370b36cad5",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458937161,
            "hunks": 0,
            "message": "Merge pull request #1222 from benoitc/fix/922-eventlet-graceful-close [eventlet] close sockets at graceful shutdown",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1222": "Close listening socket immediately after stop signal received #922 [thread] close sockets at graceful shutdown #1230"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48d1e74d0113b5df4ea03df66da9e14e8e0ff11c",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457912124,
            "hunks": 1,
            "message": "[eventlet] close sockets at graceful shutdown Ref #922",
            "diff": [
                "diff --git a/gunicorn/workers/geventlet.py b/gunicorn/workers/geventlet.py",
                "index dcb2f3d6..6440252f 100644",
                "--- a/gunicorn/workers/geventlet.py",
                "+++ b/gunicorn/workers/geventlet.py",
                "@@ -56,2 +56,3 @@ def _eventlet_serve(sock, handle, concurrency):",
                "         except eventlet.StopServe:",
                "+            sock.close()",
                "             pool.waitall()"
            ],
            "changed_files": [
                "gunicorn/workers/geventlet.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "922": "Threaded workers accept connections even when no ready thread exist #908 Shutdown takes 30 second to complete #901 [arbiter] close sockets on shutdown #1221 [thread] close sockets at graceful shutdown #1230 Make graceful shut-down keep-alive behavior consistent #1236 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 922",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d2c4365844024be1ede09847dfb642c206606bcf",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457906055,
            "hunks": 0,
            "message": "Merge pull request #1216 from ihatehandles/wording-corrections Wording corrections",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1216": "Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1216",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1388232e38a4ef0f438eef2ea3bae32daeda6dba",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457905002,
            "hunks": 1,
            "message": "[gevent] remove obsolete exception clauses in run Since the changes from #1126, errors are not raised into the main loop during a non-graceful shutdown. Therefore, these exception clauses shouldn't be needed anymore.",
            "diff": [
                "diff --git a/gunicorn/workers/ggevent.py b/gunicorn/workers/ggevent.py",
                "index 8cde2746..9e51944f 100644",
                "--- a/gunicorn/workers/ggevent.py",
                "+++ b/gunicorn/workers/ggevent.py",
                "@@ -116,16 +116,5 @@ class GeventWorker(AsyncWorker):",
                "-        try:",
                "-            while self.alive:",
                "-                self.notify()",
                "-                gevent.sleep(1.0)",
                "-",
                "-        except KeyboardInterrupt:",
                "-            pass",
                "-        except:",
                "-            for server in servers:",
                "-                try:",
                "-                    server.stop()",
                "-                except:",
                "-                    pass",
                "-            raise",
                "+        while self.alive:",
                "+            self.notify()",
                "+            gevent.sleep(1.0)"
            ],
            "changed_files": [
                "gunicorn/workers/ggevent.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1126": "Make the gevent workers handle the quit signal by deferring to a new greenlet #1128 [gevent] remove obsolete exception clauses in run #1218"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1126",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bab8ce016d6e57253a6e6feb04258f98d64f78d5",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458937353,
            "hunks": 0,
            "message": "Merge pull request #1218 from benoitc/gevent-remove-inner-exception-loop [gevent] remove obsolete exception clauses in run",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1218": "Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1218",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52088be726b19cd0295cec7ea5032b9d1cdf46f9",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458117421,
            "hunks": 0,
            "message": "Merge pull request #1226 from zx-zheng/add_psf_license Add PSF License Agreement to selectors.py",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1226": "Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1226",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "527dd7a1e6fc665d1eab7b2096d8e900c7b5b59d",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457912044,
            "hunks": 0,
            "message": "Merge pull request #1219 from benoitc/fix/socket-destroy-recursion fix infinite recursion when destroying sockets",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1219": "Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1219",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39cecbc8e932e4977ab952d573ba7aba8a663375",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457911125,
            "hunks": 5,
            "message": "[arbiter] close sockets on shutdown Close all the listeners when the arbiter shuts down. By doing so, workers can close the socket at the beginning of a graceful shut down thereby informing the operating system that the socket can be cleaned up. With this change, graceful exits with such workers will refuse new connections while draining, allowing load balancers to respond more quickly and avoiding leaving connections dangling in the listen backlog, unaccepted. Ref #922",
            "diff": [
                "diff --git a/gunicorn/arbiter.py b/gunicorn/arbiter.py",
                "index 1b55672d..fe96ac00 100644",
                "--- a/gunicorn/arbiter.py",
                "+++ b/gunicorn/arbiter.py",
                "@@ -336,2 +336,4 @@ class Arbiter(object):",
                "         \"\"\"",
                "+        for l in self.LISTENERS:",
                "+            l.close()",
                "         self.LISTENERS = []",
                "diff --git a/tests/test_arbiter.py b/tests/test_arbiter.py",
                "index ffcf33a5..d6e06dfd 100644",
                "--- a/tests/test_arbiter.py",
                "+++ b/tests/test_arbiter.py",
                "@@ -7,2 +7,7 @@ import os",
                "+try:",
                "+    import unittest.mock as mock",
                "+except ImportError:",
                "+    import mock",
                "+",
                " import gunicorn.app.base",
                "@@ -11,7 +16,5 @@ import gunicorn.arbiter",
                "-class PreloadedAppWithEnvSettings(gunicorn.app.base.BaseApplication):",
                "+class DummyApplication(gunicorn.app.base.BaseApplication):",
                "     \"\"\"",
                "-    Simple application that makes use of the 'preload' feature to",
                "-    start the application before spawning worker processes and sets",
                "-    environmental variable configuration settings.",
                "+    Dummy application that has an default configuration.",
                "     \"\"\"",
                "@@ -24,2 +27,23 @@ class PreloadedAppWithEnvSettings(gunicorn.app.base.BaseApplication):",
                "+    def load_config(self):",
                "+        \"\"\"No-op\"\"\"",
                "+",
                "+",
                "+def test_arbiter_shutdown_closes_listeners():",
                "+    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())",
                "+    listener1 = mock.Mock()",
                "+    listener2 = mock.Mock()",
                "+    arbiter.LISTENERS = [listener1, listener2]",
                "+    arbiter.stop()",
                "+    listener1.close.assert_called_with()",
                "+    listener2.close.assert_called_with()",
                "+",
                "+",
                "+class PreloadedAppWithEnvSettings(DummyApplication):",
                "+    \"\"\"",
                "+    Simple application that makes use of the 'preload' feature to",
                "+    start the application before spawning worker processes and sets",
                "+    environmental variable configuration settings.",
                "+    \"\"\"",
                "+",
                "     def load_config(self):"
            ],
            "changed_files": [
                "gunicorn/arbiter.py",
                "tests/test_arbiter.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "922": "Threaded workers accept connections even when no ready thread exist #908 Shutdown takes 30 second to complete #901 [arbiter] close sockets on shutdown #1221 [thread] close sockets at graceful shutdown #1230 Make graceful shut-down keep-alive behavior consistent #1236 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 922",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd8b8e49c65be3a8057c51908e2349d3801fba5c",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458937127,
            "hunks": 0,
            "message": "Merge pull request #1230 from benoitc/fix/922-thread-graceful-close [thread] close sockets at graceful shutdown",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1230": "Close listening socket immediately after stop signal received #922"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1230",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f104a0ef203eb9773be437c00bc974478160267b",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458668233,
            "hunks": 0,
            "message": "Merge pull request #1217 from benoitc/eventlet-async-quit [eventlet] handle QUIT in a new coroutine",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1217": "[gevent] remove obsolete exception clauses in run #1218 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1217",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d4e1abd84b39e60e265961a8be456725e571f7bf",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457911732,
            "hunks": 0,
            "message": "Merge pull request #1220 from benoitc/fix/host-restart-uds Fix/host restart uds",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1220": "lock domain socket and remove on last arbiter exit #1185 Race condition during hot restart causes unix domain sockets to sometimes be removed when the original arbiter is TERM'd. #1523 Bump gunicorn from 19.1.1 to 19.5.0 dhamaniasad/crestify#44 Bump gunicorn from 18.0 to 19.5.0 AmitBerg/python-chat#12 Bump gunicorn from 19.3.0 to 19.5.0 mingliii/BBTeam#1 Bump gunicorn from 0.17.2 to 19.5.0 DobryninIlya/botkai#48 Bump gunicorn from 18.0 to 19.5.0 dholdaway/docker-registry#3 Bump gunicorn from 19.4.5 to 19.5.0 in /v1.0/webapi ssharpjr/tpi-iq-webapi#17 Bump gunicorn from 19.1.1 to 19.5.0 LemonSpike/thinkster-django-angular-boilerplate#1"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1220",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1ccebab763e2fa3a6b580f02d848a9dc314ed181",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458642721,
            "hunks": 6,
            "message": "prevent crash when reporting an error Try to not crash when reporting an error. This changes makes sure we can log the uri and also handle SSL errors. fix #1177",
            "diff": [
                "diff --git a/gunicorn/workers/base.py b/gunicorn/workers/base.py",
                "index 9ba8e756..3bf01b72 100644",
                "--- a/gunicorn/workers/base.py",
                "+++ b/gunicorn/workers/base.py",
                "@@ -7,3 +7,5 @@ from datetime import datetime",
                " import os",
                "+from random import randint",
                " import signal",
                "+from ssl import SSLError",
                " import sys",
                "@@ -11,4 +13,2 @@ import time",
                " import traceback",
                "-from random import randint",
                "-",
                "@@ -183,3 +183,4 @@ class Worker(object):",
                "                 LimitRequestLine, LimitRequestHeaders,",
                "-                InvalidProxyLine, ForbiddenProxyRequest)):",
                "+                InvalidProxyLine, ForbiddenProxyRequest,",
                "+                SSLError)):",
                "@@ -208,2 +209,6 @@ class Worker(object):",
                "                 status_int = 403",
                "+            elif isinstance(exc, SSLError):",
                "+                reason = \"Forbidden\"",
                "+                mesg = \"'%s'\" % str(exc)",
                "+                status_int = 403",
                "@@ -212,4 +217,4 @@ class Worker(object):",
                "         else:",
                "-            self.log.exception(\"Error handling request %s\", req.uri)",
                "-",
                "+            if hasattr(req, \"uri\"):",
                "+                self.log.exception(\"Error handling request %s\", req.uri)",
                "             status_int = 500"
            ],
            "changed_files": [
                "gunicorn/workers/base.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1177": "prevent crash when reporting an error #1231 ugly errors with tracebacks when tls/ssl handshake fails #1574"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1177",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6afc285282f42070bd5e14c373990400f64b2f3",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457913542,
            "hunks": 0,
            "message": "Merge pull request #1221 from benoitc/fix/922-arbiter-close-on-shutdown [arbiter] close sockets on shutdown",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1221": "[eventlet] close sockets at graceful shutdown #1222 Close listening socket immediately after stop signal received #922 Close existing sockets in master process when stopping. #961"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1221",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7be2b8d2ba98fe098ed51c0cb4b8f9cd96b38e5e",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458648450,
            "hunks": 0,
            "message": "Merge pull request #1231 from benoitc/fix/gh1177 prevent crash when reporting an error",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1231": "workers.base: Log 500 error message #1637"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1231",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e46dda7e760fac25f5cb2c2af016e373b827ceae",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457905268,
            "hunks": 2,
            "message": "fix infinite recursion when destroying sockets By having a `getattr` implementation that proxies to the `sock` attribute, there is a risk of infinite recursion when the socket attribute is absent. After closing the socket and destroying it, the recursion can be prevented by setting the attribute to `None`.",
            "diff": [
                "diff --git a/gunicorn/sock.py b/gunicorn/sock.py",
                "index 4de97285..c367d108 100644",
                "--- a/gunicorn/sock.py",
                "+++ b/gunicorn/sock.py",
                "@@ -55,2 +55,5 @@ class BaseSocket(object):",
                "     def close(self):",
                "+        if self.sock is None:",
                "+            return",
                "+",
                "         try:",
                "@@ -59,3 +62,4 @@ class BaseSocket(object):",
                "             self.log.info(\"Error while closing socket %s\", str(e))",
                "-        del self.sock",
                "+",
                "+        self.sock = None"
            ],
            "changed_files": [
                "gunicorn/sock.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6a3bd70d2b6a8961f8bb1c16df58b4d7a3e83836",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458656442,
            "hunks": 1,
            "message": "Add gthread and gaiohttp to settings docs",
            "diff": [
                "diff --git a/gunicorn/config.py b/gunicorn/config.py",
                "index 47bc09fc..0f9a2822 100644",
                "--- a/gunicorn/config.py",
                "+++ b/gunicorn/config.py",
                "@@ -576,2 +576,4 @@ class WorkerClass(Setting):",
                "         * ``tornado``  - Requires tornado >= 0.2",
                "+        * ``gthread``  - Python 2 requires the futures package to be installed",
                "+        * ``gaiohttp`` - Requires Python 3.4 and aiohttp >= 0.21.5"
            ],
            "changed_files": [
                "gunicorn/config.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c6387b3031db9b2cbcde60c46f2a9e676e14e1dc",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457904648,
            "hunks": 2,
            "message": "[eventlet] handle QUIT in a new coroutine Just like in the gevent worker, a blocking call should only be executed from within a coroutine. The AssertionError around the main loop of the eventlet worker can be removed, since it was there to catch the exception raised by the sleep.",
            "diff": [
                "diff --git a/gunicorn/workers/geventlet.py b/gunicorn/workers/geventlet.py",
                "index dcb2f3d6..859c1eaf 100644",
                "--- a/gunicorn/workers/geventlet.py",
                "+++ b/gunicorn/workers/geventlet.py",
                "@@ -96,2 +96,5 @@ class EventletWorker(AsyncWorker):",
                "+    def handle_quit(self, sig, frame):",
                "+        eventlet.spawn(super(EventletWorker, self).handle_quit, sig, frame)",
                "+",
                "     def timeout_ctx(self):",
                "@@ -120,7 +123,3 @@ class EventletWorker(AsyncWorker):",
                "             self.notify()",
                "-            try:",
                "-                eventlet.sleep(1.0)",
                "-            except AssertionError:",
                "-                self.alive = False",
                "-                break",
                "+            eventlet.sleep(1.0)"
            ],
            "changed_files": [
                "gunicorn/workers/geventlet.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b34cdba71dabd47c9bcd96e336d51ba3a9cdd1c",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1458411814,
            "hunks": 1,
            "message": "bump to 19.5.0",
            "diff": [
                "diff --git a/gunicorn/__init__.py b/gunicorn/__init__.py",
                "index 22d5e25c..4571e340 100644",
                "--- a/gunicorn/__init__.py",
                "+++ b/gunicorn/__init__.py",
                "@@ -5,3 +5,3 @@",
                "-version_info = (19, 4, 5)",
                "+version_info = (19, 5, 0)",
                " __version__ = \".\".join([str(v) for v in version_info])"
            ],
            "changed_files": [
                "gunicorn/__init__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "452cd550d2bfeaaa5362ced3a1c0931176612945",
            "repository": "https://github.com/benoitc/gunicorn",
            "timestamp": 1457909782,
            "hunks": 1,
            "message": "add tests for arbiter unix socket locking",
            "diff": [
                "diff --git a/tests/test_sock.py b/tests/test_sock.py",
                "new file mode 100644",
                "index 00000000..aa094b9f",
                "--- /dev/null",
                "+++ b/tests/test_sock.py",
                "@@ -0,0 +1,56 @@",
                "+import fcntl",
                "+",
                "+try:",
                "+    import unittest.mock as mock",
                "+except ImportError:",
                "+    import mock",
                "+",
                "+from gunicorn import sock",
                "+",
                "+",
                "+@mock.patch('fcntl.lockf')",
                "+@mock.patch('socket.fromfd')",
                "+def test_unix_socket_init_lock(fromfd, lockf):",
                "+    s = fromfd.return_value",
                "+    sock.UnixSocket('test.sock', mock.Mock(), mock.Mock(), mock.Mock())",
                "+    lockf.assert_called_with(s, fcntl.LOCK_SH | fcntl.LOCK_NB)",
                "+",
                "+",
                "+@mock.patch('fcntl.lockf')",
                "+@mock.patch('os.getpid')",
                "+@mock.patch('os.unlink')",
                "+@mock.patch('socket.fromfd')",
                "+def test_unix_socket_close_delete_if_exlock(fromfd, unlink, getpid, lockf):",
                "+    s = fromfd.return_value",
                "+    gsock = sock.UnixSocket('test.sock', mock.Mock(), mock.Mock(), mock.Mock())",
                "+    lockf.reset_mock()",
                "+    gsock.close()",
                "+    lockf.assert_called_with(s, fcntl.LOCK_EX | fcntl.LOCK_NB)",
                "+    unlink.assert_called_with('test.sock')",
                "+",
                "+",
                "+@mock.patch('fcntl.lockf')",
                "+@mock.patch('os.getpid')",
                "+@mock.patch('os.unlink')",
                "+@mock.patch('socket.fromfd')",
                "+def test_unix_socket_close_keep_if_no_exlock(fromfd, unlink, getpid, lockf):",
                "+    s = fromfd.return_value",
                "+    gsock = sock.UnixSocket('test.sock', mock.Mock(), mock.Mock(), mock.Mock())",
                "+    lockf.reset_mock()",
                "+    lockf.side_effect = IOError('locked')",
                "+    gsock.close()",
                "+    lockf.assert_called_with(s, fcntl.LOCK_EX | fcntl.LOCK_NB)",
                "+    unlink.assert_not_called()",
                "+",
                "+",
                "+@mock.patch('fcntl.lockf')",
                "+@mock.patch('os.getpid')",
                "+@mock.patch('socket.fromfd')",
                "+def test_unix_socket_not_deleted_by_worker(fromfd, getpid, lockf):",
                "+    fd = mock.Mock()",
                "+    gsock = sock.UnixSocket('name', mock.Mock(), mock.Mock(), fd)",
                "+    lockf.reset_mock()",
                "+    getpid.reset_mock()",
                "+    getpid.return_value = mock.Mock()  # fake a pid change",
                "+    gsock.close()",
                "+    lockf.assert_not_called()"
            ],
            "changed_files": [
                "tests/test_sock.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "19.10.0",
                "19.5.0",
                "19.6.0",
                "19.7.0",
                "19.7.1",
                "19.8.0",
                "19.8.1",
                "19.9.0",
                "20.0.0",
                "20.0.1",
                "20.0.2",
                "20.0.3",
                "20.0.4",
                "20.1.0",
                "21.0.0",
                "21.0.1",
                "21.1.0",
                "21.2.0",
                "22.0.0"
            ],
            "matched_rules": []
        }
    ]
}
