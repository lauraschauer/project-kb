{
    "advisory_record": {
        "cve_id": "CVE-2018-1000125",
        "description": "inversoft prime-jwt version prior to version 1.3.0 or prior to commit 0d94dcef0133d699f21d217e922564adbb83a227 contains an input validation vulnerability in JWTDecoder.decode that can result in a JWT that is decoded and thus implicitly validated even if it lacks a valid signature. This attack appear to be exploitable via an attacker crafting a token with a valid header and body and then requests it to be validated. This vulnerability appears to have been fixed in 1.3.0 and later or after commit 0d94dcef0133d699f21d217e922564adbb83a227.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814119,
        "updated_timestamp": 1664814119,
        "repository_url": null,
        "references": {
            "": 106,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "commit::0d94dcef0133d699f21d217e922564adbb83a227": 3,
            "https://github.com/inversoft/prime-jwt/blob/master/CHANGES": 2,
            "https://github.com/inversoft/prime-jwt/issues/2": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-4.1.1": 1,
            "https://github.com/inversoft/prime-jwt/files/1677222/JwtTest.java.txt": 1,
            "https://github.com/FusionAuth/fusionauth-jwt/issues/2": 1,
            "https://github.com/dmak": 1
        },
        "affected_products": [
            "n/a",
            "JWT"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "JWT",
            "prime-jwt",
            "JWTDecoder",
            "decode"
        ],
        "keywords": [
            "result",
            "validate",
            "attack",
            "attacker",
            "commit",
            "decode",
            "craft",
            "input",
            "token",
            "0d94dcef0133d699f21d217e922564adbb83a227",
            "vulnerability",
            "header",
            "appear",
            "request",
            "contain",
            "body",
            "signature",
            "validation",
            "lack",
            "version"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "0d94dcef0133d699f21d217e922564adbb83a227",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1517330298,
            "hunks": 4,
            "message": "Fixes Issue #2, bug exists that allows a JWT to be decoded even when no signature is provided.",
            "diff": [
                "diff --git a/src/main/java/org/primeframework/jwt/JWTDecoder.java b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "index b37d27a..8740428 100644",
                "--- a/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "+++ b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "@@ -21,2 +21,3 @@ import org.primeframework.jwt.domain.Header;",
                " import org.primeframework.jwt.domain.InvalidJWTException;",
                "+import org.primeframework.jwt.domain.InvalidJWTSignatureException;",
                " import org.primeframework.jwt.domain.JWT;",
                "@@ -67,5 +68,9 @@ public class JWTDecoder {",
                "-    // Be particular about decoding an unsecured JWT. If the JWT is signed or any verifiers were provided don't do it.",
                "-    if (header.algorithm == Algorithm.none && parts.length == 2 && verifiers.length == 0) {",
                "-      return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "+    // If parts.length == 2 we have no signature, if no verifiers were provided, decode if header says 'none', else throw an exception",
                "+    if (parts.length == 2 && verifiers.length == 0) {",
                "+      if (header.algorithm == Algorithm.none) {",
                "+        return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "+      } else {",
                "+        throw new InvalidJWTSignatureException();",
                "+      }",
                "     }",
                "@@ -117,5 +122,9 @@ public class JWTDecoder {",
                "     Header header = Mapper.deserialize(base64Decode(parts[0].getBytes(StandardCharsets.UTF_8)), Header.class);",
                "-    // Be particular about decoding an unsecured JWT. If the JWT is signed or any verifiers were provided don't do it.",
                "-    if (header.algorithm == Algorithm.none && parts.length == 2 && verifiers.isEmpty()) {",
                "-      return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "+    // If parts.length == 2 we have no signature, if no verifiers were provided, decode if header says 'none', else throw an exception",
                "+    if (parts.length == 2 && verifiers.isEmpty()) {",
                "+      if (header.algorithm == Algorithm.none) {",
                "+        return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "+      } else {",
                "+        throw new InvalidJWTSignatureException();",
                "+      }",
                "     }",
                "@@ -152,2 +161,7 @@ public class JWTDecoder {",
                "+    // A verifier was provided but no signature exists, this is treated as an invalid signature.",
                "+    if (parts.length == 2 && verifier != null) {",
                "+      throw new InvalidJWTSignatureException();",
                "+    }",
                "+",
                "     if (parts.length == 3) {"
            ],
            "changed_files": [
                "src/main/java/org/primeframework/jwt/JWTDecoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.0",
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 2",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 3 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: JWT",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JWT, JWTDecoder, decode",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/primeframework/jwt/JWTDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: signature, decode",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: decode",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7c9474a493e00ba184df370fc87d8f87ac00904a",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1517003576,
            "hunks": 21,
            "message": "Per issue #1, be consistent with usage of .getBytes() and always use UTF-8.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 775e366..cc5147f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -8,3 +8,3 @@",
                "   <artifactId>prime-jwt</artifactId>",
                "-  <version>1.2.1</version>",
                "+  <version>1.3.0</version>",
                "   <packaging>jar</packaging>",
                "diff --git a/src/main/java/org/primeframework/jwt/JWTDecoder.java b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "index 5a46546..b37d27a 100644",
                "--- a/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "+++ b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -27,2 +27,3 @@ import org.primeframework.jwt.json.Mapper;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.Base64;",
                "@@ -64,3 +65,3 @@ public class JWTDecoder {",
                "     String[] parts = getParts(encodedJWT);",
                "-    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes()), Header.class);",
                "+    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes(StandardCharsets.UTF_8)), Header.class);",
                "@@ -68,3 +69,3 @@ public class JWTDecoder {",
                "     if (header.algorithm == Algorithm.none && parts.length == 2 && verifiers.length == 0) {",
                "-      return Mapper.deserialize(base64Decode(parts[1].getBytes()), JWT.class);",
                "+      return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "     }",
                "@@ -115,6 +116,6 @@ public class JWTDecoder {",
                "     String[] parts = getParts(encodedJWT);",
                "-    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes()), Header.class);",
                "+    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes(StandardCharsets.UTF_8)), Header.class);",
                "     // Be particular about decoding an unsecured JWT. If the JWT is signed or any verifiers were provided don't do it.",
                "     if (header.algorithm == Algorithm.none && parts.length == 2 && verifiers.isEmpty()) {",
                "-      return Mapper.deserialize(base64Decode(parts[1].getBytes()), JWT.class);",
                "+      return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "     }",
                "@@ -144,3 +145,3 @@ public class JWTDecoder {",
                "     // The message comprises the first two segments of the entire JWT, the signature is the last segment.",
                "-    byte[] message = encodedJWT.substring(0, index).getBytes();",
                "+    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);",
                "@@ -153,3 +154,3 @@ public class JWTDecoder {",
                "       // Verify the signature before de-serializing the payload.",
                "-      byte[] signature = base64Decode(parts[2].getBytes());",
                "+      byte[] signature = base64Decode(parts[2].getBytes(StandardCharsets.UTF_8));",
                "       verifier.verify(header.algorithm, message, signature);",
                "@@ -157,3 +158,3 @@ public class JWTDecoder {",
                "-    JWT jwt = Mapper.deserialize(base64Decode(parts[1].getBytes()), JWT.class);",
                "+    JWT jwt = Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "diff --git a/src/main/java/org/primeframework/jwt/hmac/HMACSigner.java b/src/main/java/org/primeframework/jwt/hmac/HMACSigner.java",
                "index 1ff7620..ae119ec 100644",
                "--- a/src/main/java/org/primeframework/jwt/hmac/HMACSigner.java",
                "+++ b/src/main/java/org/primeframework/jwt/hmac/HMACSigner.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -23,2 +23,3 @@ import javax.crypto.Mac;",
                " import javax.crypto.spec.SecretKeySpec;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.security.InvalidKeyException;",
                "@@ -40,3 +41,3 @@ public class HMACSigner implements Signer {",
                "     this.algorithm = algorithm;",
                "-    this.secret = secret.getBytes();",
                "+    this.secret = secret.getBytes(StandardCharsets.UTF_8);",
                "   }",
                "@@ -68,3 +69,3 @@ public class HMACSigner implements Signer {",
                "       mac.init(new SecretKeySpec(secret, algorithm.getName()));",
                "-      return mac.doFinal(message.getBytes());",
                "+      return mac.doFinal(message.getBytes(StandardCharsets.UTF_8));",
                "     } catch (InvalidKeyException | NoSuchAlgorithmException e) {",
                "diff --git a/src/main/java/org/primeframework/jwt/hmac/HMACVerifier.java b/src/main/java/org/primeframework/jwt/hmac/HMACVerifier.java",
                "index cf031cc..b5a8c7a 100644",
                "--- a/src/main/java/org/primeframework/jwt/hmac/HMACVerifier.java",
                "+++ b/src/main/java/org/primeframework/jwt/hmac/HMACVerifier.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -24,2 +24,3 @@ import javax.crypto.Mac;",
                " import javax.crypto.spec.SecretKeySpec;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.security.InvalidKeyException;",
                "@@ -40,3 +41,3 @@ public class HMACVerifier implements Verifier {",
                "     Objects.requireNonNull(secret);",
                "-    this.secret = secret.getBytes();",
                "+    this.secret = secret.getBytes(StandardCharsets.UTF_8);",
                "   }",
                "diff --git a/src/main/java/org/primeframework/jwt/rsa/PEMUtils.java b/src/main/java/org/primeframework/jwt/rsa/PEMUtils.java",
                "index 3543d2d..b5c4b96 100644",
                "--- a/src/main/java/org/primeframework/jwt/rsa/PEMUtils.java",
                "+++ b/src/main/java/org/primeframework/jwt/rsa/PEMUtils.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2017, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "diff --git a/src/main/java/org/primeframework/jwt/rsa/RSASigner.java b/src/main/java/org/primeframework/jwt/rsa/RSASigner.java",
                "index 605052c..ca99ce7 100644",
                "--- a/src/main/java/org/primeframework/jwt/rsa/RSASigner.java",
                "+++ b/src/main/java/org/primeframework/jwt/rsa/RSASigner.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -22,2 +22,3 @@ import org.primeframework.jwt.domain.InvalidKeyLengthException;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.security.InvalidKeyException;",
                "@@ -91,3 +92,3 @@ public class RSASigner implements Signer {",
                "       signature.initSign(privateKey);",
                "-      signature.update(message.getBytes());",
                "+      signature.update(message.getBytes(StandardCharsets.UTF_8));",
                "       return signature.sign();"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "src/main/java/org/primeframework/jwt/hmac/HMACSigner.java",
                "src/main/java/org/primeframework/jwt/hmac/HMACVerifier.java",
                "src/main/java/org/primeframework/jwt/rsa/PEMUtils.java",
                "src/main/java/org/primeframework/jwt/rsa/RSASigner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.0",
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JWT, JWTDecoder",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/primeframework/jwt/JWTDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: decode",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1",
                    "relevance": 2
                }
            ]
        }
    ]
}
