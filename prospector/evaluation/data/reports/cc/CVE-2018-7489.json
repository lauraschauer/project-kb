{
    "advisory_record": {
        "cve_id": "CVE-2018-7489",
        "description": "FasterXML jackson-databind before 2.7.9.3, 2.8.x before 2.8.11.1 and 2.9.x before 2.9.5 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the c3p0 libraries are available in the classpath.",
        "reserved_timestamp": 1519603200,
        "published_timestamp": 1519657200,
        "updated_timestamp": 1616630775,
        "repository_url": null,
        "references": {
            "": 607,
            "https://access.redhat.com/support/": 85,
            "https://access.redhat.com/downloads/": 68,
            "https://access.redhat.com/errata/": 51,
            "https://access.redhat.com/labs/": 51,
            "https://access.redhat.com/management/": 34,
            "https://access.redhat.com/": 34,
            "https://access.redhat.com/documentation": 34,
            "https://access.redhat.com/product-life-cycles/": 34,
            "https://access.redhat.com/security": 34,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 34,
            "https://access.redhat.com/security/security-updates/#/cve": 34,
            "https://access.redhat.com/support/contact/": 34,
            "https://status.redhat.com": 34,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 32,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 32,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 32,
            "https://access.redhat.com/products/": 32,
            "https://access.redhat.com/downloads/content/package-browser": 17,
            "https://catalog.redhat.com/software/containers/explore/": 17,
            "https://access.redhat.com/articles/1202803": 17,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 17,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 17,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 17,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 17,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 17,
            "https://access.redhat.com/documentation/": 17,
            "https://access.redhat.com/security/": 17,
            "https://access.redhat.com/security/vulnerabilities": 17,
            "https://access.redhat.com/security/data": 17,
            "https://access.redhat.com/security/security-updates/#/security-labs": 17,
            "https://access.redhat.com/security/updates/backporting/": 17,
            "https://access.redhat.com/support/cases/": 17,
            "https://access.redhat.com/support/cases/#/troubleshoot": 17,
            "https://access.redhat.com/community": 17,
            "https://access.redhat.com/community/": 17,
            "https://access.redhat.com/discussions/": 17,
            "https://access.redhat.com/announcements/": 17,
            "https://access.redhat.com/accelerators/": 17,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 17,
            "https://cloud.redhat.com/insights": 17,
            "https://access.redhat.com/changeLanguage?language=en": 17,
            "https://access.redhat.com/changeLanguage?language=ko": 17,
            "https://access.redhat.com/changeLanguage?language=ja": 17,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 17,
            "https://redhat.com/en": 17,
            "https://twitter.com/RedHat": 17,
            "https://access.redhat.com/management": 17,
            "https://access.redhat.com/support": 17,
            "https://access.redhat.com/support/customer-service": 17,
            "https://access.redhat.com/articles/33844": 17,
            "https://access.redhat.com/help/login_assistance": 17,
            "https://www.redhat.com/en/trust": 17,
            "https://www.redhat.com/en/about/browser-support": 17,
            "https://www.redhat.com/en/about/digital-accessibility": 17,
            "https://access.redhat.com/recognition/": 17,
            "https://access.redhat.com/help/colophon/": 17,
            "https://www.redhat.com/": 17,
            "http://developers.redhat.com/": 17,
            "https://connect.redhat.com/": 17,
            "https://cloud.redhat.com/": 17,
            "https://access.redhat.com/subscription-value": 17,
            "https://www.redhat.com/about/": 17,
            "http://jobs.redhat.com": 17,
            "https://redhat.com/en/about/company": 17,
            "https://redhat.com/en/jobs": 17,
            "https://redhat.com/en/events": 17,
            "https://redhat.com/en/about/office-locations": 17,
            "https://redhat.com/en/contact": 17,
            "https://redhat.com/en/blog": 17,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 17,
            "https://coolstuff.redhat.com/": 17,
            "https://www.redhat.com/en/summit": 17,
            "https://redhat.com/en/about/privacy-policy": 17,
            "https://redhat.com/en/about/terms-use": 17,
            "https://redhat.com/en/about/all-policies-guidelines": 17,
            "https://redhat.com/en/about/digital-accessibility": 17,
            "https://access.redhat.com/changeLanguage?language=fr": 15,
            "https://access.redhat.com/products/red-hat-satellite/": 15,
            "https://access.redhat.com/products/red-hat-subscription-management/": 15,
            "https://access.redhat.com/products/red-hat-insights/": 15,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 15,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 15,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 15,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 15,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 15,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 15,
            "https://access.redhat.com/products/red-hat-quay/": 15,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 15,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 15,
            "https://access.redhat.com/products/red-hat-storage/": 15,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 15,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 15,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 15,
            "https://access.redhat.com/products/red-hat-runtimes/": 15,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 15,
            "https://access.redhat.com/products/red-hat-data-grid/": 15,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 15,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 15,
            "https://access.redhat.com/products/spring-boot/": 15,
            "https://access.redhat.com/products/nodejs/": 15,
            "https://access.redhat.com/products/quarkus/": 15,
            "https://access.redhat.com/products/red-hat-application-foundations/": 15,
            "https://access.redhat.com/products/red-hat-fuse/": 15,
            "https://access.redhat.com/products/red-hat-amq/": 15,
            "https://access.redhat.com/products/red-hat-3scale/": 15,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1549276": 14,
            "https://www.redhat.com/security/data/cve/CVE-2018-7489.html": 14,
            "https://access.redhat.com/security/team/contact/": 14,
            "https://github.com/FasterXML/jackson-databind/issues/1931": 11,
            "https://access.redhat.com/security/updates/classification/#important": 8,
            "https://access.redhat.com/articles/11258": 7,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1506612": 7,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1528565": 7,
            "https://www.redhat.com/security/data/cve/CVE-2017-15095.html": 7,
            "https://www.redhat.com/security/data/cve/CVE-2017-17485.html": 7,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548289": 6,
            "https://www.redhat.com/security/data/cve/CVE-2018-1304.html": 6,
            "https://github.com/advisories/GHSA-cggj-fvv3-cqwv": 6,
            "commit::6799f8f10cc78e9af6d443ed6982d00a13f2e7d2": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1379207": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1454783": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548909": 5,
            "https://www.redhat.com/security/data/cve/CVE-2016-4978.html": 5,
            "https://www.redhat.com/security/data/cve/CVE-2017-3163.html": 5,
            "https://www.redhat.com/security/data/cve/CVE-2018-8088.html": 5,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/?version=6.4": 5,
            "https://access.redhat.com/security/updates/classification/#moderate": 5,
            "https://access.redhat.com/errata/RHSA-2018:1448": 4,
            "https://access.redhat.com/errata/RHSA-2018:1449": 4,
            "https://access.redhat.com/errata/RHSA-2018:2938": 4,
            "https://access.redhat.com/errata/RHSA-2018:1450": 4,
            "https://access.redhat.com/errata/RHSA-2018:2090": 4,
            "https://access.redhat.com/errata/RHSA-2018:2939": 4,
            "https://access.redhat.com/errata/RHSA-2018:1786": 4,
            "https://access.redhat.com/errata/RHSA-2018:1451": 4,
            "https://access.redhat.com/errata/RHSA-2018:1447": 4,
            "https://access.redhat.com/errata/RHSA-2018:2088": 4,
            "https://access.redhat.com/errata/RHSA-2018:2089": 4,
            "https://access.redhat.com/errata/RHSA-2019:2858": 4,
            "https://access.redhat.com/errata/RHSA-2019:3149": 4,
            "https://www.redhat.com/security/data/cve/CVE-2017-7525.html": 4,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "commit::42bc1eb2216a86e270573139fad1599466f81426": 4,
            "https://www.redhat.com/security/data/cve/CVE-2018-1114.html": 3,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1573391": 3,
            "https://www.redhat.com/security/data/cve/CVE-2018-10237.html": 3,
            "commit::4124dde88885a499ee083cfd25cd6bc13b7350ab": 3,
            "http://www.securityfocus.com/bid/103203": 2,
            "http://www.securitytracker.com/id/1041890": 2,
            "http://www.securitytracker.com/id/1040693": 2,
            "https://www.debian.org/security/2018/dsa-4190": 2,
            "http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html": 2,
            "http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html": 2,
            "http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html": 2,
            "https://www.oracle.com/security-alerts/cpuoct2020.html": 2,
            "https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03902en_us": 2,
            "https://security.netapp.com/advisory/ntap-20180328-0001/": 2,
            "https://access.redhat.com/security/cve/CVE-2017-7525": 2,
            "https://access.redhat.com/solutions/3442891": 2,
            "https://access.redhat.com/solutions/3279231": 2,
            "https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization": 2,
            "https://access.redhat.com/errata/RHSA-2020:2562": 2,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/red_hat_openshift_application_runtimes_release_notes/": 2,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/?version=7.1": 2,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html-single/installation_guide/": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1462702": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1538332": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666415": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666418": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666423": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666428": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666482": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666484": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666489": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671096": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671097": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1677341": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1713468": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1725795": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1725807": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1737517": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-5968.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-11307.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-12022.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-12023.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14718.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14719.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14720.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14721.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19360.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19361.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19362.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12086.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12384.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12814.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-14379.html": 2,
            "https://security.netapp.com/en": 2,
            "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://github.com/philippn": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:1448": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559010": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559013": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559018": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:1449": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559008": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559011": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559016": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1528361": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1047.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.wildFly.swarm&version=2.2.0": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:1450": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559009": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559012": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559017": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2090": 1,
            "https://access.redhat.com/articles/3060411": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1494283": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548282": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1564405": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1565307": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1571050": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1584376": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607591": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12617.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1260.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1270.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1271.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1275.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1305.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1336.html": 1,
            "https://access.redhat.com/security/updates/classification/#critical": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.eclipse.vertx&version=3.5.1": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:1451": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&downloadType=securityPatches&version=6.4": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&downloadType=securityPatches&version=7.1": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/?version=7.1/": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2089": 1,
            "https://docs.openshift.com/container-platform/4.1/release_notes/ocp-4-1-release-notes.html": 1,
            "https://docs.openshift.com/container-platform/3.11/release_notes/ocp_3_11_release_notes.html": 1,
            "https://www.netapp.com/": 1,
            "https://mysupport.netapp.com": 1,
            "https://community.netapp.com": 1,
            "https://www.netapp.com/company/contact-us/": 1,
            "https://security.netapp.com": 1,
            "https://security.netapp.com/advisory/": 1,
            "https://security.netapp.com/bulletins/": 1,
            "https://security.netapp.com/contact/": 1,
            "https://security.netapp.com/policy/": 1,
            "https://security.netapp.com/resources/": 1,
            "https://security.netapp.com/certs/": 1,
            "https://security.netapp.com/advisory": 1,
            "https://security.netapp.com/advisory/ntap-20180328-0001": 1,
            "https://www.netapp.com/company/legal/privacy-policy/": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-7489": 1,
            "https://cwiki.apache.org/confluence/display/WW/S2-055": 1,
            "https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf": 1,
            "https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/": 1,
            "https://mysupport.netapp.com/NOW/download/software/oncommand_api/2.1/": 1,
            "https://mysupport.netapp.com/site/products/all/details/cloud-manager/downloads-tab/download/61906/3.6.3/downloads": 1,
            "https://mysupport.netapp.com/NOW/download/software/ntap_service_levelmgr/1.1/": 1,
            "https://mysupport.netapp.com/NOW/download/software/snapcenter/4.0/": 1,
            "https://mysupport.netapp.com/site/downloads/": 1,
            "http://mysupport.netapp.com": 1,
            "https://security.netapp.com/advisory/NTAP-20180328-0001": 1,
            "https://www.netapp.com/forms/site-feedback/": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/FasterXML/jackson-databind/issues/1737": 1,
            "http://repo1.maven.org/maven2/com/fasterxml/jackson/jackson-bom/": 1,
            "https://access.redhat.com/security/cve/cve-2018-7489": 1,
            "https://github.com/hmcts/ccpay-payment-app/pull/119": 1,
            "https://access.redhat.com/login?redirectTo=https://access.redhat.com/solutions/3442891": 1,
            "https://access.redhat.com/articles/public-cloud-marketplace-access": 1,
            "https://access.redhat.com/search?q=Red+Hat+JBoss+Enterprise+Application+Platform&documentKind=Article%26Solution": 1,
            "https://access.redhat.com/search?q=Secure&documentKind=Article%26Solution": 1,
            "https://access.redhat.com/search?q=jaxrs&documentKind=Article%26Solution": 1,
            "http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming": 1,
            "http://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1503055": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1550671": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1593527": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12196.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1067.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10862.html": 1
        },
        "affected_products": [
            "n/a",
            "FasterXML",
            "jackson",
            "ObjectMapper"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "FasterXML",
            "ObjectMapper",
            "CVE-2017-7525",
            "JSON",
            "jackson-databind",
            "readValue"
        ],
        "keywords": [
            "databind",
            "blacklist",
            "method",
            "code",
            "input",
            "execution",
            "deserialization",
            "library",
            "bypass",
            "send",
            "classpath",
            "objectmapper",
            "flaw",
            "c3p0",
            "jackson",
            "craft",
            "fasterxml",
            "allow"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "6799f8f10cc78e9af6d443ed6982d00a13f2e7d2",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518319321,
            "hunks": 6,
            "message": "Fix #1931",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 37bb953fb..b13ccfb78 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -11,2 +11,3 @@ Project: jackson-databind",
                "  (reported by Rob W)",
                "+#1931: Two more `c3p0` gadgets to exploit default typing issue",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "index 1be6fca29..777637a75 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "@@ -20,3 +20,6 @@ public class SubTypeValidator",
                " {",
                "-    protected final static String PREFIX_STRING = \"org.springframework.\";",
                "+    protected final static String PREFIX_SPRING = \"org.springframework.\";",
                "+",
                "+    protected final static String PREFIX_C3P0 = \"com.mchange.v2.c3p0.\";",
                "+",
                "     /**",
                "@@ -47,4 +50,5 @@ public class SubTypeValidator",
                "         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
                "-        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
                "-        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
                "+",
                "+// s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\"); // deprecated by [databind#1931]",
                "+// s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\"); // - \"\" -",
                "         // [databind#1855]: more 3rd party",
                "@@ -52,2 +56,3 @@ public class SubTypeValidator",
                "         s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
                "+",
                "         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
                "@@ -82,3 +87,5 @@ public class SubTypeValidator",
                "             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces",
                "-            if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {",
                "+            if (raw.isInterface()) {",
                "+                ;",
                "+            } else if (full.startsWith(PREFIX_SPRING)) {",
                "                 for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){",
                "@@ -92,2 +99,12 @@ public class SubTypeValidator",
                "                 }",
                "+            } else if (full.startsWith(PREFIX_C3P0)) {",
                "+                // [databind#1737]; more 3rd party",
                "+                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
                "+                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
                "+                // [databind#1931]; more 3rd party",
                "+                // com.mchange.v2.c3p0.ComboPooledDataSource",
                "+                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource ",
                "+                if (full.endsWith(\"DataSource\")) {",
                "+                    break main_check;",
                "+                }",
                "             }"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1931": "Another two gadgets to exploit default typing issue in jackson-databind (CVE-2018-5968) #1899 update json parser cloudfoundry/uaa#788 Add 'suppress until' config to temporarily suppress a vulnerability jeremylong/DependencyCheck#1145 Add temporary dependency check exclusion for CVE-2018-7489 Activiti/Activiti#1838 Build is broken because of CVE-2018-7489 aws/serverless-java-container#139 Security vulnerability DSA-4004-1 for CVE-2017-7525, in which release is it fixed #1837 Two more c3p0 gadgets to exploit default typing issue [CVE-2018-7489] #1931 #1984 Fixed latest cve error for jackson-data-bind CVE-2018-7489. hmcts/ccpay-payment-app#119 Upgrade to Jackson 2.9.5 spring-projects/spring-boot#12638 [deleted] Contrast-Security-OSS/ghardy-test#396 [deleted] Contrast-Security-OSS/ghardy-test#412 [deleted] Contrast-Security-OSS/ghardy-test#432 [deleted] Contrast-Security-OSS/ghardy-test#450 [deleted] Contrast-Security-OSS/ghardy-test#460 [deleted] Contrast-Security-OSS/ghardy-test#479 [deleted] Contrast-Security-OSS/ghardy-test#497 [deleted] Contrast-Security-OSS/ghardy-test#516 [deleted] Contrast-Security-OSS/ghardy-test#532 [deleted] Contrast-Security-OSS/ghardy-test#552 [deleted] Contrast-Security-OSS/ghardy-test#572 Vulnerabilities found in com.fasterxml.jackson.core:jackson-databind 2.7.1 Contrast-Security-OSS/ghardy-test#592 CVE-2019-10202 #2700 BRAVO-666 - Create release artifact after creating the release EliLillyCo/jenkinsdsl#1 (2.6) Backport all CVE fixes up to CVE-2021-20190 #3087 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#5 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#7 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#9 CVE-2018-7489 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#115 CVE-2018-7489 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#211 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.6.7.1 scott-cx/edgemere#99 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#45 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.8.9 margaritalm/BookStore_Small_CLI_small#67 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#350 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#574 Findings for Critical davisbarillas/shiftleft-java-demo2#57 Findings for Critical davisbarillas/JavaVulnerableLab#15 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#782"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.7.9.3",
                "jackson-databind-2.7.9.4",
                "jackson-databind-2.7.9.5",
                "jackson-databind-2.7.9.6",
                "jackson-databind-2.7.9.7",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1931",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1931 contains some security-related terms: exploit, vulnerability, security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1931",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bc22f90eb7f896ace9567598a99cb1ff6e0f9d9d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518456495,
            "hunks": 2,
            "message": "Update release notes wrt #1931",
            "diff": [
                "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x",
                "index 7388752b3..2123b115a 100644",
                "--- a/release-notes/CREDITS-2.x",
                "+++ b/release-notes/CREDITS-2.x",
                "@@ -751 +751,5 @@ Deblock Thomas (deblockt@github)",
                "  (contributed by Deblock T)",
                "+",
                "+lilei@venusgroup.com.cn:",
                "+  * Reported #1931: Two more `c3p0` gadgets to exploit default typing issue",
                "+   (2.9.5)",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index cda2b93fb..1b0e79421 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -15,2 +15,3 @@ Project: jackson-databind",
                " #1931: Two more `c3p0` gadgets to exploit default typing issue",
                "+ (reported by lilei@venusgroup.com.cn)"
            ],
            "changed_files": [
                "release-notes/CREDITS-2.x",
                "release-notes/VERSION-2.x"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1931": "Another two gadgets to exploit default typing issue in jackson-databind (CVE-2018-5968) #1899 update json parser cloudfoundry/uaa#788 Add 'suppress until' config to temporarily suppress a vulnerability jeremylong/DependencyCheck#1145 Add temporary dependency check exclusion for CVE-2018-7489 Activiti/Activiti#1838 Build is broken because of CVE-2018-7489 aws/serverless-java-container#139 Security vulnerability DSA-4004-1 for CVE-2017-7525, in which release is it fixed #1837 Two more c3p0 gadgets to exploit default typing issue [CVE-2018-7489] #1931 #1984 Fixed latest cve error for jackson-data-bind CVE-2018-7489. hmcts/ccpay-payment-app#119 Upgrade to Jackson 2.9.5 spring-projects/spring-boot#12638 [deleted] Contrast-Security-OSS/ghardy-test#396 [deleted] Contrast-Security-OSS/ghardy-test#412 [deleted] Contrast-Security-OSS/ghardy-test#432 [deleted] Contrast-Security-OSS/ghardy-test#450 [deleted] Contrast-Security-OSS/ghardy-test#460 [deleted] Contrast-Security-OSS/ghardy-test#479 [deleted] Contrast-Security-OSS/ghardy-test#497 [deleted] Contrast-Security-OSS/ghardy-test#516 [deleted] Contrast-Security-OSS/ghardy-test#532 [deleted] Contrast-Security-OSS/ghardy-test#552 [deleted] Contrast-Security-OSS/ghardy-test#572 Vulnerabilities found in com.fasterxml.jackson.core:jackson-databind 2.7.1 Contrast-Security-OSS/ghardy-test#592 CVE-2019-10202 #2700 BRAVO-666 - Create release artifact after creating the release EliLillyCo/jenkinsdsl#1 (2.6) Backport all CVE fixes up to CVE-2021-20190 #3087 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#5 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#7 Fix CVE\u20132018\u20137489 philomather/example-bazel-maven#9 CVE-2018-7489 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#115 CVE-2018-7489 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#211 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.6.7.1 scott-cx/edgemere#99 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#45 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.8.9 margaritalm/BookStore_Small_CLI_small#67 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#350 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#574 Findings for Critical davisbarillas/shiftleft-java-demo2#57 Findings for Critical davisbarillas/JavaVulnerableLab#15 CVE-2018-7489 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#782"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1931",
                    "relevance": 32
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1931 contains some security-related terms: exploit, vulnerability, security",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1931",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b2b5d86fb82a343ef38f0c9b599a40b5a7249f96",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517617687,
            "hunks": 12,
            "message": "Remove mapper feature configuration direclty via ObjectMapper",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 21fe935d6..a6d25144f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -174,3 +174,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _generatorFeatures = base._deserFeatures;",
                "-        ",
                "+",
                "         _mapperFeatures = base._mapperFeatures;",
                "@@ -353,5 +353,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         if (state) {",
                "-            _serFeatures |= feature.getMask();",
                "+            _mapperFeatures |= feature.getMask();",
                "         } else {",
                "-            _serFeatures &= ~feature.getMask();",
                "+            _mapperFeatures &= ~feature.getMask();",
                "         }",
                "@@ -613,3 +613,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    ",
                "+",
                "     // silly convenience cast method we need",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 9d052ded2..f5314a52d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1435,14 +1435,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for checking whether given {@link MapperFeature} is enabled.",
                "-     */",
                "-    public boolean isEnabled(MapperFeature f) {",
                "-        // ok to use either one, should be kept in sync",
                "-        return _serializationConfig.isEnabled(f);",
                "-    }",
                "-    ",
                "-    /**",
                "-     * Method for changing state of an on/off mapper feature for",
                "-     * this mapper instance.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper configure(MapperFeature f, boolean state) {",
                "@@ -1455,6 +1444,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for enabling specified {@link MapperConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper enable(MapperFeature... f) {",
                "@@ -1465,6 +1451,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for disabling specified {@link MapperConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper disable(MapperFeature... f) {",
                "@@ -1474,3 +1457,3 @@ public class ObjectMapper",
                "     }",
                "-    ",
                "+",
                "     /*",
                "@@ -1481,10 +1464,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for checking whether given serialization-specific",
                "-     * feature is enabled.",
                "-     */",
                "-    public boolean isEnabled(SerializationFeature f) {",
                "-        return _serializationConfig.isEnabled(f);",
                "-    }",
                "-",
                "     /**",
                "@@ -1543,10 +1518,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for checking whether given deserialization-specific",
                "-     * feature is enabled.",
                "-     */",
                "-    public boolean isEnabled(DeserializationFeature f) {",
                "-        return _deserializationConfig.isEnabled(f);",
                "-    }",
                "-",
                "     /**",
                "@@ -1605,8 +1572,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Convenience method, equivalent to:",
                "-     *<pre>",
                "-     *  tokenStreamFactory().isEnabled(f);",
                "-     *</pre>",
                "-     */",
                "     public boolean isEnabled(JsonFactory.Feature f) {",
                "@@ -1623,2 +1584,26 @@ public class ObjectMapper",
                "+    /**",
                "+     * Method for checking whether given {@link MapperFeature} is enabled.",
                "+     */",
                "+    public boolean isEnabled(MapperFeature f) {",
                "+        // ok to use either one, should be kept in sync",
                "+        return _serializationConfig.isEnabled(f);",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for checking whether given deserialization-specific",
                "+     * feature is enabled.",
                "+     */",
                "+    public boolean isEnabled(DeserializationFeature f) {",
                "+        return _deserializationConfig.isEnabled(f);",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for checking whether given serialization-specific",
                "+     * feature is enabled.",
                "+     */",
                "+    public boolean isEnabled(SerializationFeature f) {",
                "+        return _serializationConfig.isEnabled(f);",
                "+    }",
                "+",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c35c276d5773d4c1cc0880df4801cb40a2da8f9c",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518068539,
            "hunks": 20,
            "message": "More \"builderization\" for ObjectMapper",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 2a348dea6..2e3280798 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -206,3 +206,3 @@ public class ObjectMapper",
                "      */",
                "-    protected InjectableValues _injectableValues;",
                "+    protected final InjectableValues _injectableValues;",
                "@@ -395,9 +395,15 @@ public class ObjectMapper",
                "         BaseSettings base = builder.baseSettings();",
                "+",
                "+        // general type handling",
                "         _typeFactory = base.getTypeFactory();",
                "+        _subtypeResolver = builder.subtypeResolver();",
                "+        ",
                "         // Ser/deser framework factories",
                "         _serializerProvider = sp;",
                "-        _deserializationContext = dc;",
                "         _serializerFactory = builder.serializerFactory();",
                "-        _subtypeResolver = builder.subtypeResolver();",
                "+        _deserializationContext = dc;",
                "+        _deserializationContext = dc;",
                "+        _injectableValues = builder.injectableValues();",
                "+",
                "         RootNameLookup rootNames = new RootNameLookup();",
                "@@ -1020,12 +1026,2 @@ public class ObjectMapper",
                "      */",
                "-    ",
                "-    /**",
                "-     * Convenience method, equivalent to calling:",
                "-     *<pre>",
                "-     *  setPropertyInclusion(JsonInclude.Value.construct(incl, incl));",
                "-     *</pre>",
                "-     */",
                "-    public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {",
                "-        return setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl));",
                "-    }",
                "@@ -1048,4 +1044,3 @@ public class ObjectMapper",
                "     public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Include incl) {",
                "-        _configOverrides.setDefaultInclusion(JsonInclude.Value.construct(incl, incl));",
                "-        return this;",
                "+        return setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl));",
                "     }",
                "@@ -1329,11 +1324,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for configuring {@link InjectableValues} which used to find",
                "-     * values to inject.",
                "-     */",
                "-    public ObjectMapper setInjectableValues(InjectableValues injectableValues) {",
                "-        _injectableValues = injectableValues;",
                "-        return this;",
                "-    }",
                "-",
                "     public InjectableValues getInjectableValues() {",
                "@@ -1358,3 +1344,3 @@ public class ObjectMapper",
                "     @Deprecated",
                "-    public ObjectMapper enable(MapperFeature... f) {",
                "+    public ObjectMapper enable(MapperFeature f) {",
                "         _deserializationConfig = _deserializationConfig.with(f);",
                "@@ -1365,3 +1351,3 @@ public class ObjectMapper",
                "     @Deprecated",
                "-    public ObjectMapper disable(MapperFeature... f) {",
                "+    public ObjectMapper disable(MapperFeature f) {",
                "         _deserializationConfig = _deserializationConfig.without(f);",
                "@@ -1377,6 +1363,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for changing state of an on/off serialization feature for",
                "-     * this object mapper.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper configure(SerializationFeature f, boolean state) {",
                "@@ -1387,6 +1370,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for enabling specified {@link SerializationConfig} feature.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper enable(SerializationFeature f) {",
                "@@ -1396,16 +1376,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for enabling specified {@link SerializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "-    public ObjectMapper enable(SerializationFeature first,",
                "-            SerializationFeature... f) {",
                "-        _serializationConfig = _serializationConfig.with(first, f);",
                "-        return this;",
                "-    }",
                "-    ",
                "-    /**",
                "-     * Method for disabling specified {@link SerializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper disable(SerializationFeature f) {",
                "@@ -1415,12 +1382,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for disabling specified {@link SerializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "-    public ObjectMapper disable(SerializationFeature first,",
                "-            SerializationFeature... f) {",
                "-        _serializationConfig = _serializationConfig.without(first, f);",
                "-        return this;",
                "-    }",
                "-    ",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 6ca6ed52f..8a697ece5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -95,2 +95,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Provider for values to inject in deserialized POJOs.",
                "+     */",
                "+    protected InjectableValues _injectableValues;",
                "+",
                "     /*",
                "@@ -175,2 +180,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserializationContext = null;",
                "+        _injectableValues = null;",
                "     }",
                "@@ -200,2 +206,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserializationContext = base._deserializationContext;",
                "+        _injectableValues = base._injectableValues;",
                "     }",
                "@@ -342,2 +349,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public InjectableValues injectableValues() {",
                "+        return _injectableValues;",
                "+    }",
                "+",
                "     /*",
                "@@ -560,3 +571,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    protected B deserializationContext(DefaultDeserializationContext ctxt) {",
                "+    public B deserializationContext(DefaultDeserializationContext ctxt) {",
                "         _deserializationContext = ctxt;",
                "@@ -565,2 +576,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B injectableValues(InjectableValues v) {",
                "+        _injectableValues = v;",
                "+        return _this();",
                "+    }",
                "+",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "59166d93ecc01478d8ef7add253f5f0140875765",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517551629,
            "hunks": 2,
            "message": "Trying to solve typing problem wrt ObjectMapper builder base type",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 6d6f5c4c1..ed4f88c60 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -472,7 +472,9 @@ public class ObjectMapper",
                "      */",
                "-    public static ObjectMapper.Builder builder() {",
                "-        return new ObjectMapper.Builder(new JsonFactory());",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                "+//      public static <M extends ObjectMapper> MapperBuilder<> builder() {",
                "+        return (MapperBuilder<M,B>) new ObjectMapper.Builder(new JsonFactory());",
                "     }",
                "-    public ObjectMapper.Builder builder(TokenStreamFactory streamFactory) {",
                "+    public static ObjectMapper.Builder builder(TokenStreamFactory streamFactory) {",
                "         return new ObjectMapper.Builder(streamFactory);"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8085e2027e6cf69b47767ef3db4fc39f0408eab9",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517545602,
            "hunks": 43,
            "message": "More ObjectMapper builder changes",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index fdcc865d2..ebf8a8039 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -84,18 +84,2 @@ public final class DeserializationConfig",
                "-    /**",
                "-     * Constructor used by ObjectMapper to create default configuration object instance.",
                "-     */",
                "-    public DeserializationConfig(BaseSettings base, ClassIntrospector classIntrospector,",
                "-            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "-            ConfigOverrides configOverrides)",
                "-    {",
                "-        super(base, classIntrospector, str, mixins, rootNames, configOverrides);",
                "-        _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);",
                "-        _problemHandlers = null;",
                "-        _parserFeatures = 0;",
                "-        _parserFeaturesToChange = 0;",
                "-        _formatReadFeatures = 0;",
                "-        _formatReadFeaturesToChange = 0;",
                "-    }",
                "-",
                "     /**",
                "@@ -116,7 +100,26 @@ public final class DeserializationConfig",
                "+    /**",
                "+     * @since 3.0",
                "+     */",
                "+    public DeserializationConfig(MapperBuilder<?,?> b,",
                "+            int mapperFeatures, int deserFeatures,",
                "+            SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            ConfigOverrides configOverrides)",
                "+    {",
                "+        super(b.baseSettings(), mapperFeatures,",
                "+                b.classIntrospector(), b.subtypeResolver(),",
                "+                mixins, rootNames, configOverrides);",
                "+        _deserFeatures = deserFeatures;",
                "+        _problemHandlers = null;",
                "+        _parserFeatures = 0;",
                "+        _parserFeaturesToChange = 0;",
                "+        _formatReadFeatures = 0;",
                "+        _formatReadFeaturesToChange = 0;",
                "+    }",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, secondary constructors to support",
                "     /* \"mutant factories\", with single property changes",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index abefa1b2e..253a0d83a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -2,4 +2,11 @@ package com.fasterxml.jackson.databind;",
                "+import java.text.DateFormat;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "+",
                " import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.cfg.BaseSettings;",
                "+import com.fasterxml.jackson.databind.cfg.ConfigOverrides;",
                "+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;",
                "+import com.fasterxml.jackson.databind.cfg.MapperConfig;",
                " import com.fasterxml.jackson.databind.deser.*;",
                "@@ -7,2 +14,3 @@ import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;",
                " import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                " import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "@@ -12,2 +20,3 @@ import com.fasterxml.jackson.databind.ser.*;",
                " import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+import com.fasterxml.jackson.databind.util.RootNameLookup;",
                "@@ -23,2 +32,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                " {",
                "+    protected final static int DEFAULT_MAPPER_FEATURES = MapperConfig.collectFeatureDefaults(MapperFeature.class);",
                "+    protected final static int DEFAULT_SER_FEATURES = MapperConfig.collectFeatureDefaults(SerializationFeature.class);",
                "+    protected final static int DEFAULT_DESER_FEATURES = MapperConfig.collectFeatureDefaults(DeserializationFeature.class);",
                "+",
                "     /*",
                "@@ -49,3 +62,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     protected ClassIntrospector _classIntrospector;",
                "-    ",
                "+",
                "     protected SubtypeResolver _subtypeResolver;",
                "@@ -80,6 +93,47 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Configuration settings, shared",
                "+    /* Feature flags: ser, deser",
                "     /**********************************************************",
                "      */",
                "-    ",
                "+",
                "+    /**",
                "+     * Set of shared mapper features enabled.",
                "+     */",
                "+    protected int _mapperFeatures;",
                "+",
                "+    /**",
                "+     * Set of {@link SerializationFeature}s enabled.",
                "+     */",
                "+    protected int _serFeatures;",
                "+",
                "+    /**",
                "+     * Set of {@link DeserializationFeature}s enabled.",
                "+     */",
                "+    protected int _deserFeatures;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Feature flags: generation, parsing",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * States of {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s to enable/disable.",
                "+     */",
                "+    protected int _generatorFeatures;",
                "+",
                "+    /**",
                "+     * Bitflag of {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s to enable/disable",
                "+     */",
                "+    protected int _generatorFeaturesToChange;",
                "+",
                "+    /**",
                "+     * States of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable.",
                "+     */",
                "+    protected int _formatWriteFeatures;",
                "+",
                "+    /**",
                "+     * Bitflag of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable",
                "+     */",
                "+    protected int _formatWriteFeaturesToChange;",
                "+",
                "     /*",
                "@@ -93,2 +147,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _baseSettings = BaseSettings.std();",
                "+",
                "+        _mapperFeatures = DEFAULT_MAPPER_FEATURES;",
                "+        _serFeatures = DEFAULT_SER_FEATURES;",
                "+        _deserFeatures = DEFAULT_DESER_FEATURES;",
                "+",
                "         _streamFactory = streamFactory;",
                "@@ -103,3 +162,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserializationContext = null;",
                "-",
                "         //        _mapperFeatures = MapperFeature;",
                "@@ -110,2 +168,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _baseSettings = base._baseSettings;",
                "+",
                "+        _mapperFeatures = base._mapperFeatures;",
                "+        _serFeatures = base._serFeatures;",
                "+        _deserFeatures = base._deserFeatures;",
                "+",
                "         _streamFactory = base._streamFactory;",
                "@@ -122,2 +185,8 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Build methods",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     /**",
                "@@ -127,2 +196,16 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public SerializationConfig buildSerializationConfig(SimpleMixInResolver mixins,",
                "+            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+    {",
                "+        return new SerializationConfig(this, _mapperFeatures, _serFeatures,",
                "+                mixins, rootNames, configOverrides);",
                "+    }",
                "+",
                "+    public DeserializationConfig buildDeserializationConfig(SimpleMixInResolver mixins,",
                "+            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+    {",
                "+        return new DeserializationConfig(this, _mapperFeatures, _deserFeatures,",
                "+                mixins, rootNames, configOverrides);",
                "+    }",
                "+",
                "     /*",
                "@@ -146,3 +229,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public ClassIntrospector classIntrospector() {",
                "-        return (_classIntrospector != null) ? _classIntrospector : defaultClassIntrospector();",
                "+        if (_classIntrospector == null) {",
                "+            _classIntrospector = _defaultClassIntrospector();",
                "+        }",
                "+        return _classIntrospector;",
                "     }",
                "@@ -152,3 +238,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    protected ClassIntrospector defaultClassIntrospector() {",
                "+    protected ClassIntrospector _defaultClassIntrospector() {",
                "         return new BasicClassIntrospector();",
                "@@ -157,3 +243,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public SubtypeResolver subtypeResolver() {",
                "-        return (_subtypeResolver != null) ? _subtypeResolver : defaultSubtypeResolver();",
                "+        if (_subtypeResolver == null) {",
                "+            _subtypeResolver = _defaultSubtypeResolver();",
                "+        }",
                "+        return _subtypeResolver;",
                "     }",
                "@@ -164,3 +253,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    protected SubtypeResolver defaultSubtypeResolver() {",
                "+    protected SubtypeResolver _defaultSubtypeResolver() {",
                "         return new StdSubtypeResolver();",
                "@@ -179,3 +268,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public DefaultSerializerProvider serializerProvider() {",
                "-        return (_serializerProvider != null) ? _serializerProvider : defaultSerializerProvider();",
                "+        if (_serializerProvider == null) {",
                "+            _serializerProvider = _defaultSerializerProvider();",
                "+        }",
                "+        return _serializerProvider;",
                "     }",
                "@@ -186,3 +278,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    protected DefaultSerializerProvider defaultSerializerProvider() {",
                "+    protected DefaultSerializerProvider _defaultSerializerProvider() {",
                "         return new DefaultSerializerProvider.Impl(_streamFactory);",
                "@@ -201,4 +293,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     protected DefaultDeserializationContext deserializationContext() {",
                "-        return (_deserializationContext != null) ? _deserializationContext",
                "-                : defaultDeserializationContext();",
                "+        if (_deserializationContext == null) {",
                "+            _deserializationContext = _defaultDeserializationContext();",
                "+        }",
                "+        return _deserializationContext;",
                "     }",
                "@@ -209,3 +303,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    protected DefaultDeserializationContext defaultDeserializationContext() {",
                "+    protected DefaultDeserializationContext _defaultDeserializationContext() {",
                "         return new DefaultDeserializationContext.Impl(deserializerFactory(),",
                "@@ -214,2 +308,80 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing features: mapper, ser, deser",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B enable(MapperFeature... features) {",
                "+        for (MapperFeature f : features) {",
                "+            _mapperFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(MapperFeature... features) {",
                "+        for (MapperFeature f : features) {",
                "+            _mapperFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(MapperFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _serFeatures |= feature.getMask();",
                "+        } else {",
                "+            _serFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B enable(SerializationFeature... features) {",
                "+        for (SerializationFeature f : features) {",
                "+            _serFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(SerializationFeature... features) {",
                "+        for (SerializationFeature f : features) {",
                "+            _serFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(SerializationFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _serFeatures |= feature.getMask();",
                "+        } else {",
                "+            _serFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+    ",
                "+    public B enable(DeserializationFeature... features) {",
                "+        for (DeserializationFeature f : features) {",
                "+            _deserFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(DeserializationFeature... features) {",
                "+        for (DeserializationFeature f : features) {",
                "+            _deserFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(DeserializationFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _deserFeatures |= feature.getMask();",
                "+        } else {",
                "+            _deserFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "@@ -230,4 +402,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public B subtypeResolver(SubtypeResolver r) {",
                "-        _subtypeResolver = r;",
                "+    public B classIntrospector(ClassIntrospector ci) {",
                "+        _classIntrospector = ci;",
                "         return _this();",
                "@@ -235,4 +407,16 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public B classIntrospector(ClassIntrospector ci) {",
                "-        _classIntrospector = ci;",
                "+    /**",
                "+     * Method for configuring {@link HandlerInstantiator} to use for creating",
                "+     * instances of handlers (such as serializers, deserializers, type and type",
                "+     * id resolvers), given a class.",
                "+     *",
                "+     * @param hi Instantiator to use; if null, use the default implementation",
                "+     */",
                "+    public B handlerInstantiator(HandlerInstantiator hi) {",
                "+        _baseSettings = _baseSettings.with(hi);",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B subtypeResolver(SubtypeResolver r) {",
                "+        _subtypeResolver = r;",
                "         return _this();",
                "@@ -245,3 +429,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    ",
                "+",
                "     public B serializerFactory(SerializerFactory f) {",
                "@@ -272,2 +456,57 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing settings, date/time",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method for configuring the default {@link DateFormat} to use when serializing time",
                "+     * values as Strings, and deserializing from JSON Strings.",
                "+     * If you need per-request configuration, factory methods in",
                "+     * {@link ObjectReader} and {@link ObjectWriter} instead.",
                "+     */",
                "+    public B defaultDateFormat(DateFormat f) {",
                "+        _baseSettings = _baseSettings.with(f);",
                "+        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, (f == null));",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for overriding default TimeZone to use for formatting.",
                "+     * Default value used is UTC (NOT default TimeZone of JVM).",
                "+     */",
                "+    public B defaultTimeZone(TimeZone tz) {",
                "+        _baseSettings = _baseSettings.with(tz);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for overriding default locale to use for formatting.",
                "+     * Default value used is {@link Locale#getDefault()}.",
                "+     */",
                "+    public B defaultLocale(Locale locale) {",
                "+        _baseSettings = _baseSettings.with(locale);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing settings, formatting",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method that will configure default {@link Base64Variant} that",
                "+     * <code>byte[]</code> serializers and deserializers will use.",
                "+     * ",
                "+     * @param v Base64 variant to use",
                "+     * ",
                "+     * @return This mapper, for convenience to allow chaining",
                "+     */",
                "+    public B defaultBase64Variant(Base64Variant v) {",
                "+        _baseSettings = _baseSettings.with(v);",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 94134803b..14bee75bc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -458,13 +458,6 @@ public class ObjectMapper",
                "-        SimpleMixInResolver mixins = new SimpleMixInResolver(null);",
                "-        _mixIns = mixins;",
                "+        _mixIns = new SimpleMixInResolver(null);",
                "         _configOverrides = new ConfigOverrides();",
                "-        // 30-Jan-2018, tatu: Note that we need to weave in TypeFactory",
                "-        ClassIntrospector ci = builder.classIntrospector();",
                "-        _serializationConfig = new SerializationConfig(base, ci,",
                "-                _subtypeResolver, mixins, rootNames, _configOverrides)",
                "-                .with(_typeFactory);",
                "-        _deserializationConfig = new DeserializationConfig(base, ci,",
                "-                _subtypeResolver, mixins, rootNames, _configOverrides)",
                "-                .with(_typeFactory);",
                "+        _serializationConfig = builder.buildSerializationConfig(_mixIns, rootNames, _configOverrides);",
                "+        _deserializationConfig = builder.buildDeserializationConfig(_mixIns, rootNames, _configOverrides);",
                "@@ -596,3 +589,2 @@ public class ObjectMapper",
                "             public Object getOwner() {",
                "-                // why do we need the cast here?!?",
                "                 return ObjectMapper.this;",
                "@@ -1468,16 +1460,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that will configure default {@link Base64Variant} that",
                "-     * <code>byte[]</code> serializers and deserializers will use.",
                "-     * ",
                "-     * @param v Base64 variant to use",
                "-     * ",
                "-     * @return This mapper, for convenience to allow chaining",
                "-     */",
                "-    public ObjectMapper setBase64Variant(Base64Variant v) {",
                "-        _serializationConfig = _serializationConfig.with(v);",
                "-        _deserializationConfig = _deserializationConfig.with(v);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "@@ -1488,38 +1466,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for configuring the default {@link DateFormat} to use when serializing time",
                "-     * values as Strings, and deserializing from JSON Strings.",
                "-     * This is preferably to directly modifying {@link SerializationConfig} and",
                "-     * {@link DeserializationConfig} instances.",
                "-     * If you need per-request configuration, use {@link #writer(DateFormat)} to",
                "-     * create properly configured {@link ObjectWriter} and use that; this because",
                "-     * {@link ObjectWriter}s are thread-safe whereas ObjectMapper itself is only",
                "-     * thread-safe when configuring methods (such as this one) are NOT called.",
                "-     */",
                "-    public ObjectMapper setDateFormat(DateFormat dateFormat)",
                "-    {",
                "-        _deserializationConfig = _deserializationConfig.with(dateFormat);",
                "-        _serializationConfig = _serializationConfig.with(dateFormat);",
                "-        return this;",
                "-    }",
                "-",
                "-    public DateFormat getDateFormat() {",
                "-        // arbitrary choice but let's do:",
                "-        return _serializationConfig.getDateFormat();",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for configuring {@link HandlerInstantiator} to use for creating",
                "-     * instances of handlers (such as serializers, deserializers, type and type",
                "-     * id resolvers), given a class.",
                "-     *",
                "-     * @param hi Instantiator to use; if null, use the default implementation",
                "-     */",
                "-    public ObjectMapper setHandlerInstantiator(HandlerInstantiator hi)",
                "-    {",
                "-        _deserializationConfig = _deserializationConfig.with(hi);",
                "-        _serializationConfig = _serializationConfig.with(hi);",
                "-        return this;",
                "-    }",
                "-    ",
                "     /**",
                "@@ -1533,5 +1475,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * @since 2.6",
                "-     */",
                "     public InjectableValues getInjectableValues() {",
                "@@ -1540,22 +1479,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for overriding default locale to use for formatting.",
                "-     * Default value used is {@link Locale#getDefault()}.",
                "-     */",
                "-    public ObjectMapper setLocale(Locale l) {",
                "-        _deserializationConfig = _deserializationConfig.with(l);",
                "-        _serializationConfig = _serializationConfig.with(l);",
                "-        return this;",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for overriding default TimeZone to use for formatting.",
                "-     * Default value used is UTC (NOT default TimeZone of JVM).",
                "-     */",
                "-    public ObjectMapper setTimeZone(TimeZone tz) {",
                "-        _deserializationConfig = _deserializationConfig.with(tz);",
                "-        _serializationConfig = _serializationConfig.with(tz);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index 9b5eb5cbb..07fb26daf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -9,3 +9,2 @@ import com.fasterxml.jackson.core.util.Instantiatable;",
                " import com.fasterxml.jackson.databind.cfg.*;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                " import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "@@ -95,19 +94,2 @@ public final class SerializationConfig",
                "-    /**",
                "-     * Constructor used by ObjectMapper to create default configuration object instance.",
                "-     */",
                "-    public SerializationConfig(BaseSettings base, ClassIntrospector classIntrospector,",
                "-            SubtypeResolver str,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "-    {",
                "-        super(base, classIntrospector, str, mixins, rootNames, configOverrides);",
                "-        _serFeatures = collectFeatureDefaults(SerializationFeature.class);",
                "-        _filterProvider = null;",
                "-        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;",
                "-        _generatorFeatures = 0;",
                "-        _generatorFeaturesToChange = 0;",
                "-        _formatWriteFeatures = 0;",
                "-        _formatWriteFeaturesToChange = 0;",
                "-    }",
                "-",
                "     /**",
                "@@ -129,2 +111,21 @@ public final class SerializationConfig",
                "+    /**",
                "+     * @since 3.0",
                "+     */",
                "+    public SerializationConfig(MapperBuilder<?,?> b,",
                "+            int mapperFeatures, int serFeatures,",
                "+            SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+    {",
                "+        super(b.baseSettings(), mapperFeatures,",
                "+                b.classIntrospector(), b.subtypeResolver(),",
                "+                mixins, rootNames, configOverrides);",
                "+        _serFeatures = serFeatures;",
                "+        _filterProvider = null;",
                "+        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;",
                "+        _generatorFeatures = 0;",
                "+        _generatorFeaturesToChange = 0;",
                "+        _formatWriteFeatures = 0;",
                "+        _formatWriteFeaturesToChange = 0;",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "index 0c66ddf85..2bb148fb1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "@@ -28,3 +28,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "-    private final static int DEFAULT_MAPPER_FEATURES = collectFeatureDefaults(MapperFeature.class);",
                "+    protected final static int DEFAULT_MAPPER_FEATURES = collectFeatureDefaults(MapperFeature.class);",
                "@@ -98,3 +98,4 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "      */",
                "-    protected MapperConfigBase(BaseSettings base, ClassIntrospector classIntrospector,",
                "+    protected MapperConfigBase(BaseSettings base, int mapperFeatures,",
                "+            ClassIntrospector classIntrospector,",
                "             SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "@@ -102,3 +103,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "     {",
                "-        super(base, DEFAULT_MAPPER_FEATURES);",
                "+        super(base, mapperFeatures);",
                "         _classIntrospector = classIntrospector;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java, src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6d157128cb49983ef6a92add8bf4cd18e56e4b0f",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517517296,
            "hunks": 7,
            "message": "Fixed some typos in javadoc of public api methods. (#1922)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 94134803b..357b3ddca 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1597,3 +1597,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for disabling specified {@link MapperConfig} features.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1631,3 +1631,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} feature.",
                "+     * Method for enabling specified {@link SerializationConfig} feature.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1640,3 +1640,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for enabling specified {@link SerializationConfig} features.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1650,3 +1650,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for disabling specified {@link SerializationConfig} features.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1659,3 +1659,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for disabling specified {@link SerializationConfig} features.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1712,3 +1712,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for disabling specified {@link DeserializationConfig} features.",
                "      * Modifies and returns this instance; no new object is created.",
                "@@ -1721,3 +1721,3 @@ public class ObjectMapper",
                "     /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "+     * Method for disabling specified {@link DeserializationConfig} features.",
                "      * Modifies and returns this instance; no new object is created."
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1922": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: method",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1922",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8ae9feb7336e7c78ca97544f93b5f2fd126f98f",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517721589,
            "hunks": 1,
            "message": "Remove `ObjectMapper.copy()`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 1ac17ab6c..53d076fec 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -482,35 +482,2 @@ public class ObjectMapper",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Methods sub-classes MUST override",
                "-    /**********************************************************",
                "-     */",
                "-    ",
                "-    /**",
                "-     * Method for creating a new {@link ObjectMapper} instance that",
                "-     * has same initial configuration as this instance. Note that this",
                "-     * also requires making a copy of the underlying {@link TokenStreamFactory}",
                "-     * instance.",
                "-     *<p>",
                "-     * Method is typically",
                "-     * used when multiple, differently configured mappers are needed.",
                "-     * Although configuration is shared, cached serializers and deserializers",
                "-     * are NOT shared, which means that the new instance may be re-configured",
                "-     * before use; meaning that it behaves the same way as if an instance",
                "-     * was constructed from scratch.",
                "-     */",
                "-    public ObjectMapper copy() {",
                "-        _checkInvalidCopy(ObjectMapper.class);",
                "-        return new ObjectMapper(this);",
                "-    }",
                "-",
                "-    protected void _checkInvalidCopy(Class<?> exp)",
                "-    {",
                "-        if (getClass() != exp) {",
                "-            // 10-Nov-2016, tatu: could almost use `ClassUtil.verifyMustOverride()` but not quite",
                "-            throw new IllegalStateException(\"Failed copy(): \"+getClass().getName()",
                "-                    +\" (version: \"+version()+\") does not override copy(); it has to\");",
                "-        }",
                "-    }",
                "-",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3419c387fc37ac35cedaf225f43f6bb673e83fdb",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517612380,
            "hunks": 96,
            "message": "Refactor configuration of generator, parser features for `ObjectMapper`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index ebf8a8039..706daa1de 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -63,7 +63,2 @@ public final class DeserializationConfig",
                "-    /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.JsonParser.Feature}s to enable/disable",
                "-     */",
                "-    protected final int _parserFeaturesToChange;",
                "-",
                "     /**",
                "@@ -95,3 +90,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -104,3 +98,3 @@ public final class DeserializationConfig",
                "     public DeserializationConfig(MapperBuilder<?,?> b,",
                "-            int mapperFeatures, int deserFeatures,",
                "+            int mapperFeatures, int deserFeatures, int parserFeatures,",
                "             SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "@@ -113,4 +107,3 @@ public final class DeserializationConfig",
                "         _problemHandlers = null;",
                "-        _parserFeatures = 0;",
                "-        _parserFeaturesToChange = 0;",
                "+        _parserFeatures = parserFeatures;",
                "         _formatReadFeatures = 0;",
                "@@ -127,4 +120,3 @@ public final class DeserializationConfig",
                "     private DeserializationConfig(DeserializationConfig src,",
                "-            int mapperFeatures, int deserFeatures,",
                "-            int parserFeatures, int parserFeatureMask,",
                "+            int mapperFeatures, int deserFeatures, int parserFeatures,",
                "             int formatFeatures, int formatFeatureMask)",
                "@@ -135,3 +127,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = parserFeatures;",
                "-        _parserFeaturesToChange = parserFeatureMask;",
                "         _formatReadFeatures = formatFeatures;",
                "@@ -150,3 +141,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -161,3 +151,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -172,3 +161,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -184,3 +172,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -195,3 +182,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -206,3 +192,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -217,3 +202,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -228,3 +212,2 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _parserFeaturesToChange = src._parserFeaturesToChange;",
                "         _formatReadFeatures = src._formatReadFeatures;",
                "@@ -249,5 +232,4 @@ public final class DeserializationConfig",
                "     protected final DeserializationConfig _withMapperFeatures(int mapperFeatures) {",
                "-        return new DeserializationConfig(this, mapperFeatures, _deserFeatures,",
                "-                        _parserFeatures, _parserFeaturesToChange,",
                "-                        _formatReadFeatures, _formatReadFeaturesToChange);",
                "+        return new DeserializationConfig(this, mapperFeatures, _deserFeatures, _parserFeatures,",
                "+                _formatReadFeatures, _formatReadFeaturesToChange);",
                "     }",
                "@@ -301,4 +283,3 @@ public final class DeserializationConfig",
                "         return (newDeserFeatures == _deserFeatures) ? this :",
                "-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -318,4 +299,3 @@ public final class DeserializationConfig",
                "         return (newDeserFeatures == _deserFeatures) ? this :",
                "-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -335,3 +315,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -348,3 +328,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -364,4 +344,3 @@ public final class DeserializationConfig",
                "         return (newDeserFeatures == _deserFeatures) ? this :",
                "-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -380,4 +359,3 @@ public final class DeserializationConfig",
                "         return (newDeserFeatures == _deserFeatures) ? this :",
                "-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -398,6 +376,4 @@ public final class DeserializationConfig",
                "         int newSet = _parserFeatures | feature.getMask();",
                "-        int newMask = _parserFeaturesToChange | feature.getMask();",
                "-        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    newSet, newMask,",
                "+        return (_parserFeatures == newSet)? this :",
                "+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -412,11 +388,7 @@ public final class DeserializationConfig",
                "         int newSet = _parserFeatures;",
                "-        int newMask = _parserFeaturesToChange;",
                "         for (JsonParser.Feature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet |= mask;",
                "-            newMask |= mask;",
                "+            newSet |= f.getMask();",
                "         }",
                "-        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    newSet, newMask,",
                "+        return (_parserFeatures == newSet) ? this :",
                "+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -431,6 +403,4 @@ public final class DeserializationConfig",
                "         int newSet = _parserFeatures & ~feature.getMask();",
                "-        int newMask = _parserFeaturesToChange | feature.getMask();",
                "-        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    newSet, newMask,",
                "+        return (_parserFeatures == newSet) ? this :",
                "+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -441,4 +411,2 @@ public final class DeserializationConfig",
                "      * object instance with specified features disabled.",
                "-     *",
                "-     * @since 2.5",
                "      */",
                "@@ -447,11 +415,7 @@ public final class DeserializationConfig",
                "         int newSet = _parserFeatures;",
                "-        int newMask = _parserFeaturesToChange;",
                "         for (JsonParser.Feature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet &= ~mask;",
                "-            newMask |= mask;",
                "+            newSet &= ~f.getMask();",
                "         }",
                "-        return ((_parserFeatures == newSet) && (_parserFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    newSet, newMask,",
                "+        return (_parserFeatures == newSet)? this :",
                "+            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "                     _formatReadFeatures, _formatReadFeaturesToChange);",
                "@@ -478,3 +442,3 @@ public final class DeserializationConfig",
                "         return new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     newSet, newMask);",
                "@@ -497,3 +461,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     newSet, newMask);",
                "@@ -511,3 +475,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     newSet, newMask);",
                "@@ -530,3 +494,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures, _parserFeaturesToChange,",
                "+                    _parserFeatures,",
                "                     newSet, newMask);",
                "@@ -576,3 +540,3 @@ public final class DeserializationConfig",
                "     public int getParserFeatures(int defaults) {",
                "-        return (defaults & ~_parserFeaturesToChange) | _parserFeatures;",
                "+        return _parserFeatures;",
                "     }",
                "@@ -605,8 +569,4 @@ public final class DeserializationConfig",
                "-    public final boolean isEnabled(JsonParser.Feature f, TokenStreamFactory factory) {",
                "-        int mask = f.getMask();",
                "-        if ((_parserFeaturesToChange & mask) != 0) {",
                "-            return (_parserFeatures & f.getMask()) != 0;",
                "-        }",
                "-        return factory.isEnabled(f);",
                "+    public final boolean isEnabled(JsonParser.Feature f) {",
                "+        return (_parserFeatures & f.getMask()) != 0;",
                "     }",
                "@@ -616,4 +576,2 @@ public final class DeserializationConfig",
                "      * mask are enabled.",
                "-     * ",
                "-     * @since 2.3",
                "      */",
                "@@ -626,4 +584,2 @@ public final class DeserializationConfig",
                "      * mask is enabled.",
                "-     * ",
                "-     * @since 2.6",
                "      */",
                "@@ -642,3 +598,3 @@ public final class DeserializationConfig",
                "     /**",
                "-     * Convenience method equivalant to:",
                "+     * Convenience method equivalent to:",
                "      *<code>",
                "@@ -646,4 +602,2 @@ public final class DeserializationConfig",
                "      *</code>",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 2c6913282..7cd162e38 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -7,2 +7,3 @@ import java.util.TimeZone;",
                " import com.fasterxml.jackson.core.*;",
                "+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
                " import com.fasterxml.jackson.databind.cfg.BaseSettings;",
                "@@ -36,2 +37,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected final static PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter();",
                "+",
                "     /*",
                "@@ -80,2 +83,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected PrettyPrinter _defaultPrettyPrinter;",
                "+",
                "     /*",
                "@@ -126,15 +131,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s to enable/disable",
                "-     */",
                "-    protected int _generatorFeaturesToChange;",
                "-",
                "-    /**",
                "-     * States of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable.",
                "-     */",
                "-    protected int _formatWriteFeatures;",
                "-",
                "-    /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable",
                "+     * States of {@link com.fasterxml.jackson.core.JsonParser.Feature}s to enable/disable.",
                "      */",
                "-    protected int _formatWriteFeaturesToChange;",
                "+    protected int _parserFeatures;",
                "@@ -151,5 +146,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+        _parserFeatures = streamFactory.getParserFeatures();",
                "+        _generatorFeatures = streamFactory.getGeneratorFeatures();",
                "+",
                "         _mapperFeatures = DEFAULT_MAPPER_FEATURES;",
                "-        _serFeatures = DEFAULT_SER_FEATURES;",
                "-        _deserFeatures = DEFAULT_DESER_FEATURES;",
                "         // Some overrides we may need based on format",
                "@@ -158,2 +154,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         }",
                "+        _deserFeatures = DEFAULT_DESER_FEATURES;",
                "+        _serFeatures = DEFAULT_SER_FEATURES;",
                "@@ -175,2 +173,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+        _parserFeatures = base._parserFeatures;",
                "+        _generatorFeatures = base._deserFeatures;",
                "+        ",
                "         _mapperFeatures = base._mapperFeatures;",
                "@@ -204,3 +205,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "-        return new SerializationConfig(this, _mapperFeatures, _serFeatures,",
                "+        return new SerializationConfig(this,",
                "+                _mapperFeatures, _serFeatures, _generatorFeatures,",
                "                 mixins, rootNames, configOverrides);",
                "@@ -211,3 +213,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "-        return new DeserializationConfig(this, _mapperFeatures, _deserFeatures,",
                "+        return new DeserializationConfig(this,",
                "+                _mapperFeatures, _deserFeatures, _parserFeatures,",
                "                 mixins, rootNames, configOverrides);",
                "@@ -291,2 +294,13 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public PrettyPrinter defaultPrettyPrinter() {",
                "+        if (_defaultPrettyPrinter == null) {",
                "+            _defaultPrettyPrinter = _defaultPrettyPrinter();",
                "+        }",
                "+        return _defaultPrettyPrinter;",
                "+    }",
                "+",
                "+    protected PrettyPrinter _defaultPrettyPrinter() {",
                "+        return DEFAULT_PRETTY_PRINTER;",
                "+    }",
                "+",
                "     /*",
                "@@ -370,3 +384,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     }",
                "-    ",
                "+",
                "     public B enable(DeserializationFeature... features) {",
                "@@ -395,2 +409,54 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing features: parser, generator",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B enable(JsonParser.Feature... features) {",
                "+        for (JsonParser.Feature f : features) {",
                "+            _parserFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(JsonParser.Feature... features) {",
                "+        for (JsonParser.Feature f : features) {",
                "+            _parserFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(JsonParser.Feature feature, boolean state) {",
                "+        if (state) {",
                "+            _parserFeatures |= feature.getMask();",
                "+        } else {",
                "+            _parserFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B enable(JsonGenerator.Feature... features) {",
                "+        for (JsonGenerator.Feature f : features) {",
                "+            _generatorFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(JsonGenerator.Feature... features) {",
                "+        for (JsonGenerator.Feature f : features) {",
                "+            _generatorFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(JsonGenerator.Feature feature, boolean state) {",
                "+        if (state) {",
                "+            _generatorFeatures |= feature.getMask();",
                "+        } else {",
                "+            _generatorFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "@@ -462,2 +528,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B defaultPrettyPrinter(PrettyPrinter pp) {",
                "+        _defaultPrettyPrinter = pp;",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index ed4f88c60..83ca00696 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1633,3 +1633,3 @@ public class ObjectMapper",
                "     public boolean isEnabled(JsonParser.Feature f) {",
                "-        return _deserializationConfig.isEnabled(f, _streamFactory);",
                "+        return _deserializationConfig.isEnabled(f);",
                "     }",
                "@@ -1637,3 +1637,3 @@ public class ObjectMapper",
                "     public boolean isEnabled(JsonGenerator.Feature f) {",
                "-        return _serializationConfig.isEnabled(f, _streamFactory);",
                "+        return _serializationConfig.isEnabled(f);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index ec153fe20..d9b725b7b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -5,3 +5,2 @@ import java.text.DateFormat;",
                " import com.fasterxml.jackson.core.*;",
                "-import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
                " import com.fasterxml.jackson.core.util.Instantiatable;",
                "@@ -32,4 +31,2 @@ public final class SerializationConfig",
                "-    protected final static PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter();",
                "-",
                "     /*",
                "@@ -68,2 +65,3 @@ public final class SerializationConfig",
                "      */",
                "+",
                "     /**",
                "@@ -73,7 +71,2 @@ public final class SerializationConfig",
                "-    /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s to enable/disable",
                "-     */",
                "-    protected final int _generatorFeaturesToChange;",
                "-",
                "     /**",
                "@@ -106,3 +99,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -115,3 +107,3 @@ public final class SerializationConfig",
                "     public SerializationConfig(MapperBuilder<?,?> b,",
                "-            int mapperFeatures, int serFeatures,",
                "+            int mapperFeatures, int serFeatures, int genFeatures,",
                "             SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "@@ -123,5 +115,4 @@ public final class SerializationConfig",
                "         _filterProvider = b.filterProvider();",
                "-        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;",
                "-        _generatorFeatures = 0;",
                "-        _generatorFeaturesToChange = 0;",
                "+        _defaultPrettyPrinter = b.defaultPrettyPrinter();",
                "+        _generatorFeatures = genFeatures;",
                "         _formatWriteFeatures = 0;",
                "@@ -144,3 +135,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -150,4 +140,3 @@ public final class SerializationConfig",
                "     private SerializationConfig(SerializationConfig src,",
                "-            int mapperFeatures, int serFeatures,",
                "-            int generatorFeatures, int generatorFeatureMask,",
                "+            int mapperFeatures, int serFeatures, int generatorFeatures,",
                "             int formatFeatures, int formatFeaturesMask)",
                "@@ -159,3 +148,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = generatorFeatures;",
                "-        _generatorFeaturesToChange = generatorFeatureMask;",
                "         _formatWriteFeatures = formatFeatures;",
                "@@ -171,3 +159,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -183,3 +170,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -195,3 +181,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -207,3 +192,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -219,3 +203,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -231,3 +214,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -243,3 +225,2 @@ public final class SerializationConfig",
                "         _generatorFeatures = src._generatorFeatures;",
                "-        _generatorFeaturesToChange = src._generatorFeaturesToChange;",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "@@ -262,3 +243,3 @@ public final class SerializationConfig",
                "         return new SerializationConfig(this, mapperFeatures, _serFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "+                        _generatorFeatures,",
                "                         _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -328,4 +309,4 @@ public final class SerializationConfig",
                "         return (newSerFeatures == _serFeatures) ? this",
                "-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "+                : new SerializationConfig(this,",
                "+                        _mapperFeatures, newSerFeatures, _generatorFeatures,",
                "                         _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -345,3 +326,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "+                        _generatorFeatures,",
                "                         _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -361,3 +342,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "+                        _generatorFeatures,",
                "                         _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -374,3 +355,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "+                        _generatorFeatures,",
                "                         _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -390,4 +371,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                        _generatorFeatures, _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "     }",
                "@@ -406,4 +386,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _generatorFeaturesToChange,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                        _generatorFeatures, _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "     }",
                "@@ -423,6 +402,4 @@ public final class SerializationConfig",
                "         int newSet = _generatorFeatures | feature.getMask();",
                "-        int newMask = _generatorFeaturesToChange | feature.getMask();",
                "-        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    newSet, newMask,",
                "+        return (_generatorFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "                     _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -437,11 +414,7 @@ public final class SerializationConfig",
                "         int newSet = _generatorFeatures;",
                "-        int newMask = _generatorFeaturesToChange;",
                "         for (JsonGenerator.Feature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet |= mask;",
                "-            newMask |= mask;",
                "+            newSet |= f.getMask();",
                "         }",
                "-        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    newSet, newMask,",
                "+        return (_generatorFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "                     _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -456,6 +429,4 @@ public final class SerializationConfig",
                "         int newSet = _generatorFeatures & ~feature.getMask();",
                "-        int newMask = _generatorFeaturesToChange | feature.getMask();",
                "-        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    newSet, newMask,",
                "+        return (_generatorFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "                     _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -470,11 +441,7 @@ public final class SerializationConfig",
                "         int newSet = _generatorFeatures;",
                "-        int newMask = _generatorFeaturesToChange;",
                "         for (JsonGenerator.Feature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet &= ~mask;",
                "-            newMask |= mask;",
                "+            newSet &= ~f.getMask();",
                "         }",
                "-        return ((_generatorFeatures == newSet) && (_generatorFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    newSet, newMask,",
                "+        return (_generatorFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "                     _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "@@ -497,4 +464,3 @@ public final class SerializationConfig",
                "         return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    _generatorFeatures, _generatorFeaturesToChange,",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "                     newSet, newMask);",
                "@@ -516,4 +482,3 @@ public final class SerializationConfig",
                "         return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    _generatorFeatures, _generatorFeaturesToChange,",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "                     newSet, newMask);",
                "@@ -530,4 +495,3 @@ public final class SerializationConfig",
                "         return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    _generatorFeatures, _generatorFeaturesToChange,",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "                     newSet, newMask);",
                "@@ -549,7 +513,6 @@ public final class SerializationConfig",
                "         return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures,",
                "-                    _generatorFeatures, _generatorFeaturesToChange,",
                "+            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "                     newSet, newMask);",
                "     }",
                "-    ",
                "+",
                "     /*",
                "@@ -592,3 +555,3 @@ public final class SerializationConfig",
                "     public int getGeneratorFeatures(int defaults) {",
                "-        return (defaults & ~_generatorFeaturesToChange) | _generatorFeatures;",
                "+        return _generatorFeatures;",
                "     }",
                "@@ -626,8 +589,4 @@ public final class SerializationConfig",
                "      */",
                "-    public final boolean isEnabled(JsonGenerator.Feature f, TokenStreamFactory factory) {",
                "-        int mask = f.getMask();",
                "-        if ((_generatorFeaturesToChange & mask) != 0) {",
                "-            return (_generatorFeatures & f.getMask()) != 0;",
                "-        }",
                "-        return factory.isEnabled(f);",
                "+    public final boolean isEnabled(JsonGenerator.Feature f) {",
                "+        return (_generatorFeatures & f.getMask()) != 0;",
                "     }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java, src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "678f7ba426d8bee1d6af5cbfbc34b4ecdabd5689",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518815972,
            "hunks": 4,
            "message": "Argh. Type substitution rules for generic types are a pain. Need to revert signature change for ObjectMapper.builder()",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 125b2fd35..cf128728e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -411,2 +411,7 @@ public class ObjectMapper",
                "+    // 16-Feb-2018, tatu: Arggghh. Due to Java Type Erasure rules, override, even static methods",
                "+    //    are apparently bound to compatibility rules (despite them not being real overrides at all).",
                "+    //    And because there is no \"JsonMapper\" we need to use odd weird typing here. Instead of simply",
                "+    //    using `MapperBuilder` we already go",
                "+    ",
                "     /**",
                "@@ -419,9 +424,14 @@ public class ObjectMapper",
                "      */",
                "-//    @SuppressWarnings(\"unchecked\")",
                "-//    public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                " //      public static <M extends ObjectMapper> MapperBuilder<> builder() {",
                "-    public static ObjectMapper.Builder builder() {",
                "-        return new ObjectMapper.Builder(new JsonFactory());",
                "+//    public static ObjectMapper.Builder builder() {",
                "+        return (MapperBuilder<M,B>) jsonBuilder();",
                "     }",
                "+    // But here we can just use simple typing. Since there are no overloads of any kind.",
                "+    public static ObjectMapper.Builder jsonBuilder() {",
                "+        return new ObjectMapper.Builder(new JsonFactory());",
                "+    }",
                "+    ",
                "     public static ObjectMapper.Builder builder(TokenStreamFactory streamFactory) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1fbff874c4f6b2d448c21b7ad456c75fe34ca544",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518732658,
            "hunks": 25,
            "message": "Rename `MapperFeature.ALLOW_COERCION_OF_SCALARS` as `DeserializationFeature.ALLOW_COERCION_OF_SCALARS`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "index 004ea436f..d483b4479 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "@@ -23,3 +23,3 @@ public enum DeserializationFeature implements ConfigFeature",
                "     /******************************************************",
                "-    /* Value (mostly scalar) conversion features",
                "+    /* Value (mostly scalar) mapping features",
                "     /******************************************************",
                "@@ -79,4 +79,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * if value fits.",
                "-     * ",
                "-     * @since 2.6",
                "      */",
                "@@ -150,4 +148,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * type information.",
                "-     * ",
                "-     * @since 2.2",
                "      */",
                "@@ -167,4 +163,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default so that no exception is thrown.",
                "-     * ",
                "-     * @since 2.3",
                "      */",
                "@@ -178,4 +172,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default so that no exception is thrown.",
                "-     *",
                "-     * @since 2.3",
                "      */",
                "@@ -194,4 +186,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * exception being thrown, at the end of deserialization.",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -215,4 +205,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * property values, unless they are explicitly marked as `required`.",
                "-     * ",
                "-     * @since 2.6",
                "      */",
                "@@ -228,4 +216,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "       * property values, unless they are explicitly marked as `required`.",
                "-      *",
                "-      * @since 2.8",
                "       */",
                "@@ -242,4 +228,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * missing.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -262,4 +246,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * token(s)) for backwards compatibility reasons.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -310,3 +292,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default",
                "-     * @since 2.4",
                "      */",
                "@@ -328,5 +309,28 @@ public enum DeserializationFeature implements ConfigFeature",
                "     /******************************************************",
                "-    /* Value conversion features",
                "+    /* Value conversion/coercion features",
                "     /******************************************************",
                "      */",
                "+",
                "+    /**",
                "+     * Feature that determines whether coercions from secondary representations are allowed",
                "+     * for simple non-textual scalar types: numbers and booleans. This includes `primitive`",
                "+     * types and their wrappers, but excludes `java.lang.String` and date/time types.",
                "+     *<p>",
                "+     * When feature is disabled, only strictly compatible input may be bound: numbers for",
                "+     * numbers, boolean values for booleans. When feature is enabled, conversions from",
                "+     * JSON String are allowed, as long as textual value matches (for example, String",
                "+     * \"true\" is allowed as equivalent of JSON boolean token `true`; or String \"1.0\"",
                "+     * for `double`).",
                "+     *<p>",
                "+     * Note that it is possible that other configurability options can override this",
                "+     * in closer scope (like on per-type or per-property basis); this is just the global",
                "+     * default.",
                "+     *<p>",
                "+     * Feature is enabled by default (for backwards compatibility since this was the",
                "+     * default behavior)",
                "+     * ",
                "+     *",
                "+     * @since 3.0 (in 2.x was a `MapperFeature` instead)",
                "+     */",
                "+    ALLOW_COERCION_OF_SCALARS(true),",
                "@@ -344,3 +348,3 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * whether they can be coerced depends on",
                "-     * {@link MapperFeature#ALLOW_COERCION_OF_SCALARS}.",
                "+     * {@link #ALLOW_COERCION_OF_SCALARS}.",
                "      *<p>",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "index ee268f15c..aa06644ec 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "@@ -289,28 +289,2 @@ public enum MapperFeature implements ConfigFeature",
                "-    /*",
                "-    /******************************************************",
                "-    /* Coercion features",
                "-    /******************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Feature that determines whether coercions from secondary representations are allowed",
                "-     * for simple non-textual scalar types: numbers and booleans. This includes `primitive`",
                "-     * types and their wrappers, but excludes `java.lang.String` and date/time types.",
                "-     *<p>",
                "-     * When feature is disabled, only strictly compatible input may be bound: numbers for",
                "-     * numbers, boolean values for booleans. When feature is enabled, conversions from",
                "-     * JSON String are allowed, as long as textual value matches (for example, String",
                "-     * \"true\" is allowed as equivalent of JSON boolean token `true`; or String \"1.0\"",
                "-     * for `double`).",
                "-     *<p>",
                "-     * Note that it is possible that other configurability options can override this",
                "-     * in closer scope (like on per-type or per-property basis); this is just the global",
                "-     * default.",
                "-     *<p>",
                "-     * Feature is enabled by default (for backwards compatibility since this was the",
                "-     * default behavior)",
                "-     */",
                "-    ALLOW_COERCION_OF_SCALARS(true),",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "index c85415653..abb4f3028 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "@@ -195,5 +195,5 @@ public class EnumDeserializer",
                "                         int index = Integer.parseInt(name);",
                "-                        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "+                        if (!ctxt.isEnabled(DeserializationFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "                             return ctxt.handleWeirdStringValue(_enumClass(), name,",
                "-\"value looks like quoted Enum index, but `MapperFeature.ALLOW_COERCION_OF_SCALARS` prevents use\"",
                "+\"value looks like quoted Enum index, but `DeserializationFeature.ALLOW_COERCION_OF_SCALARS` prevents use\"",
                "                                     );",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "index 613d398f4..3e27f0e44 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "@@ -747,4 +747,4 @@ public abstract class StdDeserializer<T>",
                "-        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "-            feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
                "+        if (!ctxt.isEnabled(DeserializationFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "+            feat = DeserializationFeature.ALLOW_COERCION_OF_SCALARS;",
                "             enable = true;",
                "@@ -770,4 +770,4 @@ public abstract class StdDeserializer<T>",
                "-        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "-            feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
                "+        if (!ctxt.isEnabled(DeserializationFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "+            feat = DeserializationFeature.ALLOW_COERCION_OF_SCALARS;",
                "             enable = true;",
                "@@ -800,4 +800,4 @@ public abstract class StdDeserializer<T>",
                "-        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "-            feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
                "+        if (!ctxt.isEnabled(DeserializationFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "+            feat = DeserializationFeature.ALLOW_COERCION_OF_SCALARS;",
                "             enable = true;",
                "@@ -817,5 +817,5 @@ public abstract class StdDeserializer<T>",
                "     {",
                "-        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "+        if (!ctxt.isEnabled(DeserializationFeature.ALLOW_COERCION_OF_SCALARS)) {",
                "             String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str);",
                "-            _reportFailedNullCoerce(ctxt, true, MapperFeature.ALLOW_COERCION_OF_SCALARS, strDesc);",
                "+            _reportFailedNullCoerce(ctxt, true, DeserializationFeature.ALLOW_COERCION_OF_SCALARS, strDesc);",
                "         }",
                "@@ -826,3 +826,3 @@ public abstract class StdDeserializer<T>",
                "     {",
                "-        MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
                "+        DeserializationFeature feat = DeserializationFeature.ALLOW_COERCION_OF_SCALARS;",
                "         if (!ctxt.isEnabled(feat)) {",
                "@@ -836,3 +836,3 @@ public abstract class StdDeserializer<T>",
                "     {",
                "-        MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
                "+        DeserializationFeature feat = DeserializationFeature.ALLOW_COERCION_OF_SCALARS;",
                "         if (!ctxt.isEnabled(feat)) {",
                "@@ -860,4 +860,2 @@ public abstract class StdDeserializer<T>",
                "      * @return Message with backtick-enclosed name of type this deserializer supports",
                "-     *",
                "-     * @since 2.9",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java, src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java, src/main/java/com/fasterxml/jackson/databind/MapperFeature.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: deserialization, allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "151deda08a894a13db5ab355f26978affdc76523",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517722213,
            "hunks": 6,
            "message": "More work on eliminating unnecessary copy() methods",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index 04aad0985..fe1b5ef59 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -221,18 +221,2 @@ public abstract class DeserializationContext",
                "-    /**",
                "-     * Copy-constructor for use with <code>copy()</code> by {@link ObjectMapper#copy()}",
                "-     */",
                "-    protected DeserializationContext(DeserializationContext src) {",
                "-        _cache = new DeserializerCache();",
                "-        _factory = src._factory;",
                "-        _streamFactory = src._streamFactory;",
                "-",
                "-        _config = src._config;",
                "-        _featureFlags = src._featureFlags;",
                "-        _view = src._view;",
                "-        _schema = src._schema;",
                "-",
                "-        _injectableValues = null;",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 53d076fec..2a348dea6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -68,25 +68,3 @@ Simplest usage is of form:",
                "  *<p> ",
                "- * Mapper instances are fully thread-safe provided that ALL configuration of the",
                "- * instance occurs before ANY read or write calls. If configuration of a mapper instance",
                "- * is modified after first usage, changes may or may not take effect, and configuration",
                "- * calls themselves may fail.",
                "- * If you need to use different configuration, you have two main possibilities:",
                "- *<ul>",
                "- * <li>Construct and use {@link ObjectReader} for reading, {@link ObjectWriter} for writing.",
                "- *    Both types are fully immutable and you can freely create new instances with different",
                "- *    configuration using either factory methods of {@link ObjectMapper}, or readers/writers",
                "- *    themselves. Construction of new {@link ObjectReader}s and {@link ObjectWriter}s is",
                "- *    a very light-weight operation so it is usually appropriate to create these on per-call",
                "- *    basis, as needed, for configuring things like optional indentation of JSON.",
                "- *  </li>",
                "- * <li>If the specific kind of configurability is not available via {@link ObjectReader} and",
                "- *   {@link ObjectWriter}, you may need to use multiple {@link ObjectMapper} instead (for example:",
                "- *   you cannot change mix-in annotations on-the-fly; or, set of custom (de)serializers).",
                "- *   To help with this usage, you may want to use method {@link #copy()} which creates a clone",
                "- *   of the mapper with specific configuration, and allows configuration of the copied instance",
                "- *   before it gets used. Note that {@link #copy} operation is as expensive as constructing",
                "- *   a new {@link ObjectMapper} instance: if possible, you should still pool and reuse mappers",
                "- *   if you intend to use them for multiple operations.",
                "- *  </li>",
                "- * </ul>",
                "+ * Mapper instances are fully thread-safe as of Jackson 3.0.",
                "  *<p>",
                "@@ -385,34 +363,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Copy-constructor, mostly used to support {@link #copy}.",
                "-     */",
                "-    protected ObjectMapper(ObjectMapper src)",
                "-    {",
                "-        _streamFactory = src._streamFactory; // stream factories now immutable",
                "-        _subtypeResolver = src._subtypeResolver;",
                "-        _typeFactory = src._typeFactory;",
                "-        _injectableValues = src._injectableValues;",
                "-        _configOverrides = src._configOverrides.copy();",
                "-        _mixIns = src._mixIns.copy();",
                "-",
                "-        RootNameLookup rootNames = new RootNameLookup();",
                "-        _serializationConfig = new SerializationConfig(src._serializationConfig,",
                "-                _mixIns, rootNames, _configOverrides);",
                "-        _deserializationConfig = new DeserializationConfig(src._deserializationConfig,",
                "-                _mixIns, rootNames,  _configOverrides);",
                "-        _serializerProvider = src._serializerProvider.copy();",
                "-        _deserializationContext = src._deserializationContext.copy();",
                "-",
                "-        // Default serializer factory is stateless, can just assign",
                "-        _serializerFactory = src._serializerFactory;",
                "-",
                "-        // as per [databind#922], [databind#1078] make sure to copy registered modules as appropriate",
                "-        Set<Object> reg = src._registeredModuleTypes;",
                "-        if (reg == null) {",
                "-            _registeredModuleTypes = null;",
                "-        } else {",
                "-            _registeredModuleTypes = new LinkedHashSet<Object>(reg);",
                "-        }",
                "-    }",
                "-",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "index f01491f37..f7f93c9bd 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "@@ -59,16 +59,2 @@ public abstract class DefaultDeserializationContext",
                "-    protected DefaultDeserializationContext(DefaultDeserializationContext src) {",
                "-        super(src);",
                "-    }",
                "-    ",
                "-    /**",
                "-     * Method needed to ensure that {@link ObjectMapper#copy} will work",
                "-     * properly; specifically, that caches are cleared, but settings",
                "-     * will otherwise remain identical; and that no sharing of state",
                "-     * occurs.",
                "-     */",
                "-    public DefaultDeserializationContext copy() {",
                "-        throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");",
                "-    }",
                "-",
                "     public DefaultDeserializationContext assignParser(JsonParser p) {",
                "@@ -325,4 +311,2 @@ public abstract class DefaultDeserializationContext",
                "-        protected Impl(Impl src) { super(src); }",
                "-        ",
                "         protected Impl(Impl src, DeserializerFactory factory) {",
                "@@ -331,8 +315,2 @@ public abstract class DefaultDeserializationContext",
                "-        @Override",
                "-        public DefaultDeserializationContext copy() {",
                "-            ClassUtil.verifyMustOverride(Impl.class, this, \"copy\");",
                "-           return new Impl(this);",
                "-        }",
                "-        ",
                "         @Override"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: method",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0918161341b1097c3690091f5086500bb7874b52",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518322769,
            "hunks": 2,
            "message": "Add temporary version `setInjectableValues` back in `ObjectMapper` as OSGi module needs it",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index a0b5e897c..4f2f54798 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -207,3 +207,3 @@ public class ObjectMapper",
                "      */",
                "-    protected final InjectableValues _injectableValues;",
                "+    protected InjectableValues _injectableValues;",
                "@@ -1289,2 +1289,9 @@ public class ObjectMapper",
                "+    // 10-Feb-2018, tatu: Should not be needed but alas OSGi module relies on it",
                "+    @Deprecated",
                "+    public ObjectMapper setInjectableValues(InjectableValues v) {",
                "+        _injectableValues = v;",
                "+        return this;",
                "+    }",
                "+",
                "     public InjectableValues getInjectableValues() {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "af1b09854c8556a963cbcc834ce907eff76e519d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517550602,
            "hunks": 2,
            "message": "Minor signature change to allow ObjectMapper.Builder specialization",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 66ac0979a..905839454 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -438,3 +438,3 @@ public class ObjectMapper",
                "-    public ObjectMapper(Builder builder)",
                "+    public ObjectMapper(MapperBuilder<?,?> builder)",
                "     {",
                "@@ -443,3 +443,3 @@ public class ObjectMapper",
                "-    public ObjectMapper(Builder builder,",
                "+    public ObjectMapper(MapperBuilder<?,?> builder,",
                "             DefaultSerializerProvider sp, DefaultDeserializationContext dc)            "
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "df35e722a05fd0bf38b07f5f777d288f12d207a7",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518502874,
            "hunks": 19,
            "message": "More ObjectMapper/builder work",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 4f2f54798..2d79e8333 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -924,48 +924,3 @@ public class ObjectMapper",
                "     public VisibilityChecker<?> getVisibilityChecker() {",
                "-        return _serializationConfig.getDefaultVisibilityChecker();",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for setting currently configured default {@link VisibilityChecker},",
                "-     * object used for determining whether given property element",
                "-     * (method, field, constructor) can be auto-detected or not.",
                "-     * This default checker is used as the base visibility:",
                "-     * per-class overrides (both via annotations and per-type config overrides)",
                "-     * can further change these settings.",
                "-     */",
                "-    public ObjectMapper setVisibility(VisibilityChecker<?> vc) {",
                "-        _configOverrides.setDefaultVisibility(vc);",
                "-        return this;",
                "-    }",
                "-",
                "-    /**",
                "-     * Convenience method that allows changing configuration for",
                "-     * underlying {@link VisibilityChecker}s, to change details of what kinds of",
                "-     * properties are auto-detected.",
                "-     * Basically short cut for doing:",
                "-     *<pre>",
                "-     *  mapper.setVisibilityChecker(",
                "-     *     mapper.getVisibilityChecker().withVisibility(forMethod, visibility)",
                "-     *  );",
                "-     *</pre>",
                "-     * one common use case would be to do:",
                "-     *<pre>",
                "-     *  mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);",
                "-     *</pre>",
                "-     * which would make all member fields serializable without further annotations,",
                "-     * instead of just public fields (default setting).",
                "-     * ",
                "-     * @param forMethod Type of property descriptor affected (field, getter/isGetter,",
                "-     *     setter, creator)",
                "-     * @param visibility Minimum visibility to require for the property descriptors of type",
                "-     * ",
                "-     * @return Modified mapper instance (that is, \"this\"), to allow chaining",
                "-     *    of configuration calls",
                "-     */",
                "-    public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)",
                "-    {",
                "-        VisibilityChecker<?> vc = _configOverrides.getDefaultVisibility();",
                "-        vc = vc.withVisibility(forMethod, visibility);",
                "-        _configOverrides.setDefaultVisibility(vc);",
                "-        return this;",
                "+        return _configOverrides.getDefaultVisibility();",
                "     }",
                "@@ -1022,13 +977,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for setting auto-detection visibility definition",
                "-     * defaults, which are in effect unless overridden by",
                "-     * annotations (like <code>JsonAutoDetect</code>) or per-type",
                "-     * visibility overrides.",
                "-     */",
                "-    public ObjectMapper setDefaultVisibility(JsonAutoDetect.Value vis) {",
                "-        _configOverrides.setDefaultVisibility(VisibilityChecker.Std.construct(vis));",
                "-        return this;",
                "-    }",
                "-",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "index a432552c2..02d02c0d8 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "@@ -4,4 +4,6 @@ import java.util.*;",
                "+import com.fasterxml.jackson.annotation.JsonAutoDetect;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                " import com.fasterxml.jackson.annotation.JsonSetter;",
                "+",
                " import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
                "@@ -108,3 +110,3 @@ public class ConfigOverrides",
                "     /**********************************************************",
                "-    /* Global defaults access",
                "+    /* Global defaults accessors",
                "     /**********************************************************",
                "@@ -128,16 +130,31 @@ public class ConfigOverrides",
                "-    public void setDefaultInclusion(JsonInclude.Value v) {",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Global defaults mutators",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public ConfigOverrides setDefaultInclusion(JsonInclude.Value v) {",
                "         _defaultInclusion = v;",
                "+        return this;",
                "     }",
                "-    public void setDefaultSetterInfo(JsonSetter.Value v) {",
                "+    public ConfigOverrides setDefaultSetterInfo(JsonSetter.Value v) {",
                "         _defaultSetterInfo = v;",
                "+        return this;",
                "     }",
                "-    public void setDefaultMergeable(Boolean v) {",
                "+    public ConfigOverrides setDefaultMergeable(Boolean v) {",
                "         _defaultMergeable = v;",
                "+        return this;",
                "     }",
                "-    public void setDefaultVisibility(VisibilityChecker<?> v) {",
                "+    public ConfigOverrides setDefaultVisibility(VisibilityChecker<?> v) {",
                "         _visibilityChecker = v;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConfigOverrides setDefaultVisibility(JsonAutoDetect.Value vis) {",
                "+        _visibilityChecker = VisibilityChecker.Std.construct(vis);",
                "+        return this;",
                "     }",
                "@@ -149,3 +166,3 @@ public class ConfigOverrides",
                "      */",
                "-    ",
                "+",
                "     protected Map<Class<?>, MutableConfigOverride> _newMap() {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index ae44668b5..5fd646fae 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -4,4 +4,6 @@ import java.text.DateFormat;",
                " import java.util.Locale;",
                "+import java.util.Objects;",
                " import java.util.TimeZone;",
                " import java.util.function.Consumer;",
                "+import java.util.function.Function;",
                "@@ -15,2 +17,3 @@ import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                " import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
                " import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "@@ -510,2 +513,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method for changing various aspects of configuration overrides.",
                "+     */",
                "     public B withAllConfigOverrides(Consumer<ConfigOverrides> handler) {",
                "@@ -515,2 +521,23 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method for changing currently configured default {@link VisibilityChecker},",
                "+     * object used for determining whether given property element",
                "+     * (method, field, constructor) can be auto-detected or not.",
                "+     * Checker to modify is used for all POJO types for which there is no specific",
                "+     * per-type checker.",
                "+     *",
                "+     * @param handler Function that is given current default visibility checker and that",
                "+     *    needs to return either checker as is, or a new instance created using one or more of",
                "+     *    {@code withVisibility} (and similar) calls.",
                "+     */",
                "+    public B changeDefaultVisibility(Function<VisibilityChecker<?>,VisibilityChecker<?>> handler) {",
                "+        VisibilityChecker<?> oldV = _configOverrides.getDefaultVisibility();",
                "+        VisibilityChecker<?> newV = handler.apply(oldV);",
                "+        if (newV != oldV) {",
                "+            Objects.requireNonNull(newV, \"Can not assign null default VisibilityChecker\");",
                "+            _configOverrides.setDefaultVisibility(newV);",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: objectmapper",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ec7ee38f6c25ca530042af40026b8b5576cb5b55",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519092567,
            "hunks": 100,
            "message": "Code cleanup, register modules using builder",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index fe1b5ef59..d23cd7f21 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -1563,4 +1563,2 @@ trailingToken, ClassUtil.nameOf(targetType)",
                "      * {@link #handleWeirdNativeValue} should be called which will call this method",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -1618,5 +1616,2 @@ trailingToken, ClassUtil.nameOf(targetType)",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public JsonMappingException missingTypeIdException(JavaType baseType,",
                "@@ -1639,7 +1634,5 @@ trailingToken, ClassUtil.nameOf(targetType)",
                "         }",
                "-        /* 24-Feb-2012, tatu: At this point, all timezone configuration",
                "-         *    should have occurred, with respect to default dateformat",
                "-         *    and timezone configuration. But we still better clone",
                "-         *    an instance as formatters may be stateful.",
                "-         */",
                "+        // 24-Feb-2012, tatu: At this point, all timezone configuration should have",
                "+        // occurred, with respect to default date format and time zone configuration. ",
                "+        // But we still better clone an instance as formatters may be stateful.",
                "         DateFormat df = _config.getDateFormat();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index f1d0584c4..ec7988aa6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -5,10 +5,5 @@ import java.util.Collection;",
                " import com.fasterxml.jackson.core.*;",
                "-import com.fasterxml.jackson.core.json.JsonFactory;",
                "-",
                "+import com.fasterxml.jackson.databind.cfg.MapperBuilder;",
                " import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;",
                "-import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;",
                "-import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;",
                "-import com.fasterxml.jackson.databind.deser.Deserializers;",
                "-import com.fasterxml.jackson.databind.deser.KeyDeserializers;",
                "-import com.fasterxml.jackson.databind.deser.ValueInstantiators;",
                "+import com.fasterxml.jackson.databind.deser.*;",
                " import com.fasterxml.jackson.databind.jsontype.NamedType;",
                "@@ -109,3 +104,3 @@ public abstract class Module",
                "          * Fallback access method that allows modules to refer to the",
                "-         * {@link ObjectMapper} that provided this context.",
                "+         * {@link MapperBuilder} that provided this context.",
                "          * It should NOT be needed by most modules; and ideally should",
                "@@ -119,6 +114,7 @@ public abstract class Module",
                "          *<p>",
                "-         * Return value is chosen to not leak dependency to {@link ObjectMapper};",
                "-         * however, instance will always be of that type.",
                "-         * This is why return value is declared generic, to allow caller to",
                "-         * specify context to often avoid casting.",
                "+         * Return value is chosen to force casting, to make caller aware that",
                "+         * this is a fallback accessor, used only when everything else fails:",
                "+         * type is, however, guaranteed to be {@link MapperBuilder} (and more",
                "+         * specifally format-specific subtype that mapper constructed, in case",
                "+         * format-specific access is needed).",
                "          */",
                "@@ -140,3 +136,3 @@ public abstract class Module",
                "         public boolean isEnabled(SerializationFeature f);",
                "-        public boolean isEnabled(JsonFactory.Feature f);",
                "+        public boolean isEnabled(TokenStreamFactory.Feature f);",
                "         public boolean isEnabled(JsonParser.Feature f);",
                "@@ -180,3 +176,3 @@ public abstract class Module",
                "          */",
                "-        public void addDeserializers(Deserializers d);",
                "+        public SetupContext addDeserializers(Deserializers d);",
                "@@ -187,3 +183,3 @@ public abstract class Module",
                "          */",
                "-        public void addKeyDeserializers(KeyDeserializers s);",
                "+        public SetupContext addKeyDeserializers(KeyDeserializers s);",
                "@@ -196,3 +192,3 @@ public abstract class Module",
                "          */",
                "-        public void addSerializers(Serializers s);",
                "+        public SetupContext addSerializers(Serializers s);",
                "@@ -203,25 +199,33 @@ public abstract class Module",
                "          */",
                "-        public void addKeySerializers(Serializers s);",
                "+        public SetupContext addKeySerializers(Serializers s);",
                "         /*",
                "-        /**********************************************************",
                "-        /* Handler registration; other",
                "-        /**********************************************************",
                "+        /******************************************************************",
                "+        /* Handler registration, annotation introspectors",
                "+        /******************************************************************",
                "          */",
                "-        ",
                "+",
                "         /**",
                "-         * Method that module can use to register additional modifier objects to",
                "-         * customize configuration and construction of bean deserializers.",
                "+         * Method for registering specified {@link AnnotationIntrospector} as the highest",
                "+         * priority introspector (will be chained with existing introspector(s) which",
                "+         * will be used as fallbacks for cases this introspector does not handle)",
                "          * ",
                "-         * @param mod Modifier to register",
                "+         * @param ai Annotation introspector to register.",
                "          */",
                "-        public void addBeanDeserializerModifier(BeanDeserializerModifier mod);",
                "+        public SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai);",
                "         /**",
                "-         * Method that module can use to register additional modifier objects to",
                "-         * customize configuration and construction of bean serializers.",
                "+         * Method for registering specified {@link AnnotationIntrospector} as the lowest",
                "+         * priority introspector, chained with existing introspector(s) and called",
                "+         * as fallback for cases not otherwise handled.",
                "          * ",
                "-         * @param mod Modifier to register",
                "+         * @param ai Annotation introspector to register.",
                "+         */",
                "+        public SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai);",
                "+",
                "+        /*",
                "+        /******************************************************************",
                "+        /* Type handling",
                "+        /******************************************************************",
                "          */",
                "-        public void addBeanSerializerModifier(BeanSerializerModifier mod);",
                "@@ -234,3 +238,3 @@ public abstract class Module",
                "          */",
                "-        public void addAbstractTypeResolver(AbstractTypeResolver resolver);",
                "+        public SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver);",
                "@@ -243,50 +247,61 @@ public abstract class Module",
                "          */",
                "-        public void addTypeModifier(TypeModifier modifier);",
                "+        public SetupContext addTypeModifier(TypeModifier modifier);",
                "         /**",
                "-         * Method that module can use to register additional {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s,",
                "-         * by adding {@link ValueInstantiators} object that gets called when ",
                "-         * instantatiator is needed by a deserializer.",
                "-         * ",
                "-         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for",
                "-         *    constructing POJO values during deserialization",
                "+         * Method for registering specified classes as subtypes (of supertype(s)",
                "+         * they have)",
                "          */",
                "-        public void addValueInstantiators(ValueInstantiators instantiators);",
                "+        public SetupContext registerSubtypes(Class<?>... subtypes);",
                "         /**",
                "-         * Method for registering specified {@link AnnotationIntrospector} as the highest",
                "-         * priority introspector (will be chained with existing introspector(s) which",
                "-         * will be used as fallbacks for cases this introspector does not handle)",
                "-         * ",
                "-         * @param ai Annotation introspector to register.",
                "+         * Method for registering specified classes as subtypes (of supertype(s)",
                "+         * they have), using specified type names.",
                "          */",
                "-        public void insertAnnotationIntrospector(AnnotationIntrospector ai);",
                "+        public SetupContext registerSubtypes(NamedType... subtypes);",
                "         /**",
                "-         * Method for registering specified {@link AnnotationIntrospector} as the lowest",
                "-         * priority introspector, chained with existing introspector(s) and called",
                "-         * as fallback for cases not otherwise handled.",
                "-         * ",
                "-         * @param ai Annotation introspector to register.",
                "+         * Method for registering specified classes as subtypes (of supertype(s)",
                "+         * they have)",
                "+         */",
                "+        public SetupContext registerSubtypes(Collection<Class<?>> subtypes);",
                "+        ",
                "+        /*",
                "+        /******************************************************************",
                "+        /* Handler registration, other",
                "+        /******************************************************************",
                "          */",
                "-        public void appendAnnotationIntrospector(AnnotationIntrospector ai);",
                "         /**",
                "-         * Method for registering specified classes as subtypes (of supertype(s)",
                "-         * they have)",
                "+         * Add a deserialization problem handler",
                "+         *",
                "+         * @param handler The deserialization problem handler",
                "          */",
                "-        public void registerSubtypes(Class<?>... subtypes);",
                "+        public SetupContext addHandler(DeserializationProblemHandler handler);",
                "         /**",
                "-         * Method for registering specified classes as subtypes (of supertype(s)",
                "-         * they have), using specified type names.",
                "+         * Method that module can use to register additional modifier objects to",
                "+         * customize configuration and construction of bean deserializers.",
                "+         * ",
                "+         * @param mod Modifier to register",
                "          */",
                "-        public void registerSubtypes(NamedType... subtypes);",
                "+        public SetupContext addDeserializerModifier(BeanDeserializerModifier mod);",
                "         /**",
                "-         * Method for registering specified classes as subtypes (of supertype(s)",
                "-         * they have)",
                "+         * Method that module can use to register additional modifier objects to",
                "+         * customize configuration and construction of bean serializers.",
                "+         * ",
                "+         * @param mod Modifier to register",
                "          */",
                "-        public void registerSubtypes(Collection<Class<?>> subtypes);",
                "-        ",
                "+        public SetupContext addSerializerModifier(BeanSerializerModifier mod);",
                "+",
                "+        /**",
                "+         * Method that module can use to register additional {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s,",
                "+         * by adding {@link ValueInstantiators} object that gets called when ",
                "+         * instantatiator is needed by a deserializer.",
                "+         * ",
                "+         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for",
                "+         *    constructing POJO values during deserialization",
                "+         */",
                "+        public SetupContext addValueInstantiators(ValueInstantiators instantiators);",
                "+",
                "         /**",
                "@@ -309,10 +324,3 @@ public abstract class Module",
                "          */",
                "-        public void setMixInAnnotations(Class<?> target, Class<?> mixinSource);",
                "-",
                "-        /**",
                "-         * Add a deserialization problem handler",
                "-         *",
                "-         * @param handler The deserialization problem handler",
                "-         */",
                "-        public void addDeserializationProblemHandler(DeserializationProblemHandler handler);",
                "+        public SetupContext setMixIn(Class<?> target, Class<?> mixinSource);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index d2112d0a3..9ef324aaf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -445,3 +445,3 @@ public class ObjectMapper",
                "      */",
                "-    ",
                "+",
                "     /**",
                "@@ -468,2 +468,3 @@ public class ObjectMapper",
                "      */",
                "+    @Deprecated",
                "     public ObjectMapper registerModule(Module module)",
                "@@ -481,3 +482,2 @@ public class ObjectMapper",
                "         }",
                "-",
                "         // And then call registration",
                "@@ -552,5 +552,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addDeserializers(Deserializers d) {",
                "+            public Module.SetupContext addDeserializers(Deserializers d) {",
                "                 DeserializerFactory df = _deserializationContext._factory.withAdditionalDeserializers(d);",
                "                 _deserializationContext = _deserializationContext.with(df);",
                "+                return this;",
                "             }",
                "@@ -558,5 +559,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addKeyDeserializers(KeyDeserializers d) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withAdditionalKeyDeserializers(d);",
                "+            public Module.SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "+                DeserializerFactory df = _deserializationContext._factory.withAdditionalKeyDeserializers(kd);",
                "                 _deserializationContext = _deserializationContext.with(df);",
                "+                return this;",
                "             }",
                "@@ -564,5 +566,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {",
                "+            public Module.SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "                 DeserializerFactory df = _deserializationContext._factory.withDeserializerModifier(modifier);",
                "                 _deserializationContext = _deserializationContext.with(df);",
                "+                return this;",
                "             }",
                "@@ -572,4 +575,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addSerializers(Serializers s) {",
                "+            public Module.SetupContext addSerializers(Serializers s) {",
                "                 _serializerFactory = _serializerFactory.withAdditionalSerializers(s);",
                "+                return this;",
                "             }",
                "@@ -577,4 +581,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addKeySerializers(Serializers s) {",
                "+            public Module.SetupContext addKeySerializers(Serializers s) {",
                "                 _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);",
                "+                return this;",
                "             }",
                "@@ -582,4 +587,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addBeanSerializerModifier(BeanSerializerModifier modifier) {",
                "+            public Module.SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "                 _serializerFactory = _serializerFactory.withSerializerModifier(modifier);",
                "+                return this;",
                "             }",
                "@@ -589,5 +595,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "+            public Module.SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "                 DeserializerFactory df = _deserializationContext._factory.withAbstractTypeResolver(resolver);",
                "                 _deserializationContext = _deserializationContext.with(df);",
                "+                return this;",
                "             }",
                "@@ -595,3 +602,3 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addTypeModifier(TypeModifier modifier) {",
                "+            public Module.SetupContext addTypeModifier(TypeModifier modifier) {",
                "                 TypeFactory f = _typeFactory;",
                "@@ -599,2 +606,3 @@ public class ObjectMapper",
                "                 setTypeFactory(f);",
                "+                return this;",
                "             }",
                "@@ -602,5 +610,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addValueInstantiators(ValueInstantiators instantiators) {",
                "+            public Module.SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "                 DeserializerFactory df = _deserializationContext._factory.withValueInstantiators(instantiators);",
                "                 _deserializationContext = _deserializationContext.with(df);",
                "+                return this;",
                "             }",
                "@@ -608,5 +617,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+            public Module.SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "                 _deserializationConfig = _deserializationConfig.withInsertedAnnotationIntrospector(ai);",
                "                 _serializationConfig = _serializationConfig.withInsertedAnnotationIntrospector(ai);",
                "+                return this;",
                "             }",
                "@@ -614,5 +624,6 @@ public class ObjectMapper",
                "             @Override",
                "-            public void appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+            public Module.SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "                 _deserializationConfig = _deserializationConfig.withAppendedAnnotationIntrospector(ai);",
                "                 _serializationConfig = _serializationConfig.withAppendedAnnotationIntrospector(ai);",
                "+                return this;",
                "             }",
                "@@ -620,4 +631,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void registerSubtypes(Class<?>... subtypes) {",
                "+            public Module.SetupContext registerSubtypes(Class<?>... subtypes) {",
                "                 ObjectMapper.this.registerSubtypes(subtypes);",
                "+                return this;",
                "             }",
                "@@ -625,4 +637,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void registerSubtypes(NamedType... subtypes) {",
                "+            public Module.SetupContext registerSubtypes(NamedType... subtypes) {",
                "                 ObjectMapper.this.registerSubtypes(subtypes);",
                "+                return this;",
                "             }",
                "@@ -630,4 +643,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void registerSubtypes(Collection<Class<?>> subtypes) {",
                "+            public Module.SetupContext registerSubtypes(Collection<Class<?>> subtypes) {",
                "                 ObjectMapper.this.registerSubtypes(subtypes);",
                "+                return this;",
                "             }",
                "@@ -635,4 +649,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {",
                "+            public Module.SetupContext setMixIn(Class<?> target, Class<?> mixinSource) {",
                "                 addMixIn(target, mixinSource);",
                "+                return this;",
                "             }",
                "@@ -640,4 +655,5 @@ public class ObjectMapper",
                "             @Override",
                "-            public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {",
                "+            public Module.SetupContext addHandler(DeserializationProblemHandler handler) {",
                "                 addHandler(handler);",
                "+                return this;",
                "             }",
                "@@ -664,2 +680,3 @@ public class ObjectMapper",
                "     }",
                "+",
                "     @Deprecated",
                "@@ -693,2 +710,3 @@ public class ObjectMapper",
                "     }",
                "+    /*",
                "     @Deprecated",
                "@@ -697,2 +715,3 @@ public class ObjectMapper",
                "     }",
                "+    */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index a591130f3..1f9102adc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -24,2 +24,3 @@ import com.fasterxml.jackson.databind.ser.*;",
                " import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+import com.fasterxml.jackson.databind.type.TypeModifier;",
                " import com.fasterxml.jackson.databind.util.LinkedNode;",
                "@@ -188,3 +189,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     protected LinkedNode<DeserializationProblemHandler> _problemHandlers;",
                "-    ",
                "+",
                "     /*",
                "@@ -288,3 +289,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Accessors, general",
                "+    /* Accessors, features",
                "     /**********************************************************************",
                "@@ -292,2 +293,25 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public boolean isEnabled(MapperFeature f) {",
                "+        return f.enabledIn(_mapperFeatures);",
                "+    }",
                "+    public boolean isEnabled(DeserializationFeature f) {",
                "+        return f.enabledIn(_deserFeatures);",
                "+    }",
                "+    public boolean isEnabled(SerializationFeature f) {",
                "+        return f.enabledIn(_serFeatures);",
                "+    }",
                "+",
                "+    public boolean isEnabled(JsonParser.Feature f) {",
                "+        return f.enabledIn(_parserFeatures);",
                "+    }",
                "+    public boolean isEnabled(JsonGenerator.Feature f) {",
                "+        return f.enabledIn(_generatorFeatures);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Accessors, general",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "     public BaseSettings baseSettings() {",
                "@@ -345,3 +369,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**",
                "-     * Overridable method for changing default {@link StdMixInResolver} prototype",
                "+     * Overridable method for changing default {@link MixInHandler} prototype",
                "      * to use.",
                "@@ -755,2 +779,9 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B addTypeModifier(TypeModifier modifier) {",
                "+        TypeFactory tf = _baseSettings.getTypeFactory()",
                "+                .withModifier(modifier);",
                "+        _baseSettings = _baseSettings.with(tf);",
                "+        return _this();",
                "+    }",
                "+",
                "     public B nodeFactory(JsonNodeFactory f) {",
                "@@ -787,22 +818,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    /**",
                "-     * Method that may be used to completely change mix-in handling by providing",
                "-     * alternate {@link MixInHandler} implementation.",
                "-     * Most of the time this is NOT the method you want to call, and rather are looking",
                "-     * for {@link #mixInOverrides}.",
                "-     */",
                "-    public B mixInHandler(MixInHandler h) {",
                "-        _mixInHandler = h;",
                "-        return _this();",
                "-    }",
                "-",
                "-    /**",
                "-     * Method that allows defining \"override\" mix-in resolver: something that is checked first,",
                "-     * before simple mix-in definitions.",
                "-     */",
                "-    public B mixInOverrides(MixInResolver r) {",
                "-        _mixInHandler = mixInHandler().withOverrides(r);",
                "-        return _this();",
                "-    }",
                "-",
                "     /*",
                "@@ -882,3 +893,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     }",
                "-    ",
                "+",
                "     /*",
                "@@ -944,2 +955,22 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method that may be used to completely change mix-in handling by providing",
                "+     * alternate {@link MixInHandler} implementation.",
                "+     * Most of the time this is NOT the method you want to call, and rather are looking",
                "+     * for {@link #mixInOverrides}.",
                "+     */",
                "+    public B mixInHandler(MixInHandler h) {",
                "+        _mixInHandler = h;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method that allows defining \"override\" mix-in resolver: something that is checked first,",
                "+     * before simple mix-in definitions.",
                "+     */",
                "+    public B mixInOverrides(MixInResolver r) {",
                "+        _mixInHandler = mixInHandler().withOverrides(r);",
                "+        return _this();",
                "+    }",
                "+    ",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "new file mode 100644",
                "index 000000000..5b2c7eccc",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "@@ -0,0 +1,254 @@",
                "+package com.fasterxml.jackson.databind.cfg;",
                "+",
                "+import java.util.Collection;",
                "+",
                "+import com.fasterxml.jackson.core.*;",
                "+",
                "+import com.fasterxml.jackson.databind.*;",
                "+import com.fasterxml.jackson.databind.deser.*;",
                "+import com.fasterxml.jackson.databind.jsontype.NamedType;",
                "+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;",
                "+import com.fasterxml.jackson.databind.ser.SerializerFactory;",
                "+import com.fasterxml.jackson.databind.ser.Serializers;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+import com.fasterxml.jackson.databind.type.TypeModifier;",
                "+",
                "+public abstract class ModuleContextBase<M extends ObjectMapper>",
                "+    implements Module.SetupContext",
                "+{",
                "+    // // // Immutable objects we need to access information",
                "+",
                "+    protected final MapperBuilder<M,?> _builder;",
                "+",
                "+    protected final TokenStreamFactory _streamFactory;",
                "+",
                "+    // // // Factories we need to change/modify",
                "+",
                "+    protected DeserializerFactory _deserializerFactory;",
                "+",
                "+    protected SerializerFactory _serializerFactory;",
                "+",
                "+    // // // Other modifiable state",
                "+",
                "+    protected final ConfigOverrides _configOverrides;",
                "+",
                "+    protected BaseSettings _baseSettings;",
                "+",
                "+    protected ModuleContextBase(MapperBuilder<M,?> b,",
                "+            ConfigOverrides configOverrides)",
                "+    {",
                "+        _builder = b;",
                "+",
                "+        _streamFactory = b.streamFactory();",
                "+        _deserializerFactory = b.deserializerFactory();",
                "+        _serializerFactory = b.serializerFactory();",
                "+",
                "+        _configOverrides = configOverrides;",
                "+        _baseSettings = b.baseSettings();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Accessors for metadata",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "+    @Override",
                "+    public Version getMapperVersion() {",
                "+        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getFormatName() {",
                "+        return _streamFactory.getFormatName();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Accessors for subset of handlers",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public Object getOwner() {",
                "+        return _builder;",
                "+    }",
                "+",
                "+    @Override",
                "+    public TypeFactory typeFactory() {",
                "+        return _builder.typeFactory();",
                "+    }",
                "+",
                "+    @Override",
                "+    public TokenStreamFactory tokenStreamFactory() {",
                "+        return _streamFactory;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Accessors on/off features",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "+    @Override",
                "+    public boolean isEnabled(MapperFeature f) {",
                "+        return _builder.isEnabled(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isEnabled(DeserializationFeature f) {",
                "+        return _builder.isEnabled(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isEnabled(SerializationFeature f) {",
                "+        return _builder.isEnabled(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isEnabled(TokenStreamFactory.Feature f) {",
                "+        return _streamFactory.isEnabled(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isEnabled(JsonParser.Feature f) {",
                "+        return _builder.isEnabled(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isEnabled(JsonGenerator.Feature f) {",
                "+        return _builder.isEnabled(f);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators for adding deserializers, related",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addDeserializers(Deserializers d) {",
                "+        _deserializerFactory = _deserializerFactory.withAdditionalDeserializers(d);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "+        _deserializerFactory = _deserializerFactory.withAdditionalKeyDeserializers(kd);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "+        _deserializerFactory = _deserializerFactory.withDeserializerModifier(modifier);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "+        _deserializerFactory = _deserializerFactory.withValueInstantiators(instantiators);",
                "+        return this;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators for adding serializers, related",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addSerializers(Serializers s) {",
                "+        _serializerFactory = _serializerFactory.withAdditionalSerializers(s);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addKeySerializers(Serializers s) {",
                "+        _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "+        _serializerFactory = _serializerFactory.withSerializerModifier(modifier);",
                "+        return this;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators for type handling",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "+        _deserializerFactory = _deserializerFactory.withAbstractTypeResolver(resolver);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addTypeModifier(TypeModifier modifier) {",
                "+        _builder.addTypeModifier(modifier);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext registerSubtypes(Class<?>... subtypes) {",
                "+        _builder.subtypeResolver().registerSubtypes(subtypes);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext registerSubtypes(NamedType... subtypes) {",
                "+        _builder.subtypeResolver().registerSubtypes(subtypes);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext registerSubtypes(Collection<Class<?>> subtypes) {",
                "+        _builder.subtypeResolver().registerSubtypes(subtypes);",
                "+        return this;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators for annotation introspection",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public Module.SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+        _baseSettings = _baseSettings.withInsertedAnnotationIntrospector(ai);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+        _baseSettings = _baseSettings.withAppendedAnnotationIntrospector(ai);",
                "+        return this;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators, other",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    @Override",
                "+    public MutableConfigOverride configOverride(Class<?> type) {",
                "+        return _configOverrides.findOrCreateOverride(type);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext addHandler(DeserializationProblemHandler handler)",
                "+    {",
                "+        _builder.addHandler(handler);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Module.SetupContext setMixIn(Class<?> target, Class<?> mixinSource) {",
                "+        _builder.addMixIn(target, mixinSource);",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "index 0faa0b36c..fa8c0ae7d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "@@ -322,3 +322,3 @@ public abstract class DefaultDeserializationContext",
                "         public DefaultDeserializationContext with(DeserializerFactory factory) {",
                "-            return new Impl(this, factory);",
                "+            return (factory == this._factory) ? this : new Impl(this, factory);",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
                "index 0dc7d4e7b..58906de6c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
                "@@ -15,2 +15,17 @@ public abstract class SubtypeResolver",
                " {",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Life-cycle",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method that has to create a new instance that contains",
                "+     * same registration information as this instance, but is not",
                "+     * linked to this instance.",
                "+     *",
                "+     * @since 3.0",
                "+     */",
                "+    public abstract SubtypeResolver copy();",
                "+",
                "     /*",
                "@@ -31,3 +46,3 @@ public abstract class SubtypeResolver",
                "     public abstract SubtypeResolver registerSubtypes(Collection<Class<?>> subtypes);",
                "-    ",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
                "index 7c91d6800..5286dc177 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
                "@@ -21,3 +21,3 @@ public class StdSubtypeResolver",
                "-    protected LinkedHashSet<NamedType> _registeredSubtypes;",
                "+    protected Set<NamedType> _registeredSubtypes;",
                "@@ -25,2 +25,14 @@ public class StdSubtypeResolver",
                "+    protected StdSubtypeResolver(Set<NamedType> reg) {",
                "+        _registeredSubtypes = reg;",
                "+    }",
                "+",
                "+    @Override",
                "+    public SubtypeResolver copy() {",
                "+        if (_registeredSubtypes == null) {",
                "+            return new StdSubtypeResolver();",
                "+        }",
                "+        return new StdSubtypeResolver(new LinkedHashSet<>(_registeredSubtypes));",
                "+    }",
                "+",
                "     /*",
                "@@ -34,3 +46,3 @@ public class StdSubtypeResolver",
                "         if (_registeredSubtypes == null) {",
                "-            _registeredSubtypes = new LinkedHashSet<NamedType>();",
                "+            _registeredSubtypes = new LinkedHashSet<>();",
                "         }",
                "@@ -52,3 +64,3 @@ public class StdSubtypeResolver",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public StdSubtypeResolver registerSubtypes(Collection<Class<?>> subtypes) {",
                "@@ -78,3 +90,3 @@ public class StdSubtypeResolver",
                "-        HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType>();",
                "+        HashMap<NamedType, NamedType> collected = new HashMap<>();",
                "         // start with registered subtypes (which have precedence)",
                "@@ -117,3 +129,3 @@ public class StdSubtypeResolver",
                "         final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
                "-        HashMap<NamedType, NamedType> subtypes = new HashMap<NamedType, NamedType>();",
                "+        HashMap<NamedType, NamedType> subtypes = new HashMap<>();",
                "         // then consider registered subtypes (which have precedence over annotations)",
                "@@ -133,3 +145,3 @@ public class StdSubtypeResolver",
                "         _collectAndResolve(type, rootType, config, ai, subtypes);",
                "-        return new ArrayList<NamedType>(subtypes.values());",
                "+        return new ArrayList<>(subtypes.values());",
                "     }",
                "@@ -150,4 +162,4 @@ public class StdSubtypeResolver",
                "         // Need to keep track of classes that have been handled already ",
                "-        Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
                "-        Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
                "+        Set<Class<?>> typesHandled = new HashSet<>();",
                "+        Map<String,NamedType> byName = new LinkedHashMap<>();",
                "@@ -188,4 +200,4 @@ public class StdSubtypeResolver",
                "         final Class<?> rawBase = baseType.getRawType();",
                "-        Set<Class<?>> typesHandled = new HashSet<Class<?>>();",
                "-        Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();",
                "+        Set<Class<?>> typesHandled = new HashSet<>();",
                "+        Map<String,NamedType> byName = new LinkedHashMap<>();",
                "@@ -290,3 +302,3 @@ public class StdSubtypeResolver",
                "     {",
                "-        ArrayList<NamedType> result = new ArrayList<NamedType>(byName.values());",
                "+        ArrayList<NamedType> result = new ArrayList<>(byName.values());",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "index 1704ad7bd..9b843f427 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "@@ -497,6 +497,6 @@ public class SimpleModule",
                "         if (_deserializerModifier != null) {",
                "-            context.addBeanDeserializerModifier(_deserializerModifier);",
                "+            context.addDeserializerModifier(_deserializerModifier);",
                "         }",
                "         if (_serializerModifier != null) {",
                "-            context.addBeanSerializerModifier(_serializerModifier);",
                "+            context.addSerializerModifier(_serializerModifier);",
                "         }",
                "@@ -507,3 +507,3 @@ public class SimpleModule",
                "             for (Map.Entry<Class<?>,Class<?>> entry : _mixins.entrySet()) {",
                "-                context.setMixInAnnotations(entry.getKey(), entry.getValue());",
                "+                context.setMixIn(entry.getKey(), entry.getValue());",
                "             }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java",
                "index ae2939a7c..925873943 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java",
                "@@ -153,4 +153,2 @@ public final class ArrayBuilders",
                "      * typed instances (one for Object[] and sub-types; one per primitive type).",
                "-     * ",
                "-     * @since 2.2 Moved from earlier <code>Comparators</code> class",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
                "src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java, src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java, src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/Module.java, src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java, src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java, src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ebe7d44d8f2b5a94628251ce34dcb04ff3a46e22",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518723217,
            "hunks": 35,
            "message": "Fix #1600 (for 3.0)",
            "diff": [
                "diff --git a/release-notes/CREDITS b/release-notes/CREDITS",
                "index 38bf108d7..8450266b3 100644",
                "--- a/release-notes/CREDITS",
                "+++ b/release-notes/CREDITS",
                "@@ -7 +7,5 @@ Version numbers in brackets indicate release in which the problem was fixed",
                " Tatu Saloranta, tatu.saloranta@iki.fi: author",
                "+",
                "+Alexander Koshman (akoshman@github)",
                "+ * Requested #1600: Serializing locale with underscore, not standard hyphen\t",
                "+  [3.0.0]",
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 41e5c1c59..9182b7560 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -11,2 +11,4 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                "   parser/generation construction",
                "+#1600: Serializing locale with underscore, not standard hyphen",
                "+ (requested by Alexander K)",
                " #1762: `StdDateFormat`: serialize time offset using colon",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java",
                "index 9bc300b2c..f4e77ef8d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java",
                "@@ -17,10 +17,9 @@ public class StdJdkDeserializers",
                "         // note: can skip primitive types; other ways to check them:",
                "-        Class<?>[] types = new Class<?>[] {",
                "-                UUID.class,",
                "-                AtomicBoolean.class,",
                "-                StackTraceElement.class,",
                "-                ByteBuffer.class",
                "-        };",
                "-        for (Class<?> cls : types) { _classNames.add(cls.getName()); }",
                "-        for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); }",
                "+        _classNames.add(UUID.class.getName());",
                "+        _classNames.add(AtomicBoolean.class.getName());",
                "+        _classNames.add(StackTraceElement.class.getName());",
                "+        _classNames.add(ByteBuffer.class.getName());",
                "+        for (Class<?> cls : FromStringDeserializer.types()) {",
                "+            _classNames.add(cls.getName());",
                "+        }",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "index 7108cf6ee..4a4a892dc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "@@ -54,5 +54,5 @@ public abstract class BasicSerializerFactory",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, lookup tables/maps",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -65,13 +65,4 @@ public abstract class BasicSerializerFactory",
                "     protected final static HashMap<String, JsonSerializer<?>> _concrete;",
                "-    ",
                "-    /**",
                "-     * Actually it may not make much sense to eagerly instantiate all",
                "-     * kinds of serializers: so this Map actually contains class references,",
                "-     * not instances",
                "-     */",
                "-    protected final static HashMap<String, Class<? extends JsonSerializer<?>>> _concreteLazy;",
                "     static {",
                "-        HashMap<String, Class<? extends JsonSerializer<?>>> concLazy",
                "-            = new HashMap<String, Class<? extends JsonSerializer<?>>>();",
                "         HashMap<String, JsonSerializer<?>> concrete",
                "@@ -83,3 +74,3 @@ public abstract class BasicSerializerFactory",
                "          */",
                "-        concrete.put(String.class.getName(), new StringSerializer());",
                "+        concrete.put(String.class.getName(), StringSerializer.instance);",
                "         final ToStringSerializer sls = ToStringSerializer.instance;",
                "@@ -97,3 +88,3 @@ public abstract class BasicSerializerFactory",
                "         concrete.put(BigInteger.class.getName(), new NumberSerializer(BigInteger.class));",
                "-        concrete.put(BigDecimal.class.getName(),new NumberSerializer(BigDecimal.class));",
                "+        concrete.put(BigDecimal.class.getName(), new NumberSerializer(BigDecimal.class));",
                "@@ -104,20 +95,3 @@ public abstract class BasicSerializerFactory",
                "-        // And then other standard non-structured JDK types",
                "-        for (Map.Entry<Class<?>,Object> en : StdJdkSerializers.all()) {",
                "-            Object value = en.getValue();",
                "-            if (value instanceof JsonSerializer<?>) {",
                "-                concrete.put(en.getKey().getName(), (JsonSerializer<?>) value);",
                "-            } else {",
                "-                @SuppressWarnings(\"unchecked\")",
                "-                Class<? extends JsonSerializer<?>> cls = (Class<? extends JsonSerializer<?>>) value;",
                "-                concLazy.put(en.getKey().getName(), cls);",
                "-            }",
                "-        }",
                "-",
                "-        // Jackson-specific type(s)",
                "-        // (Q: can this ever be sub-classed?)",
                "-        concLazy.put(TokenBuffer.class.getName(), TokenBufferSerializer.class);",
                "-",
                "         _concrete = concrete;",
                "-        _concreteLazy = concLazy;",
                "     }",
                "@@ -125,5 +99,5 @@ public abstract class BasicSerializerFactory",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -317,13 +291,7 @@ public abstract class BasicSerializerFactory",
                "     {",
                "-        Class<?> raw = type.getRawClass();",
                "-        String clsName = raw.getName();",
                "-        JsonSerializer<?> ser = _concrete.get(clsName);",
                "+        final Class<?> raw = type.getRawClass();",
                "+        JsonSerializer<?> ser = StdJdkSerializers.find(raw);",
                "         if (ser == null) {",
                "-            Class<? extends JsonSerializer<?>> serClass = _concreteLazy.get(clsName);",
                "-            if (serClass != null) {",
                "-                // 07-Jan-2017, tatu: Should never fail (since we control constructors),",
                "-                //   but if it does will throw `IllegalArgumentException` with description,",
                "-                //   which we could catch, re-title.",
                "-                return ClassUtil.createInstance(serClass, false);",
                "-            }",
                "+            final String clsName = raw.getName();",
                "+            ser = _concrete.get(clsName);",
                "         }",
                "@@ -345,4 +313,2 @@ public abstract class BasicSerializerFactory",
                "      *</ul>",
                "-     *",
                "-     * @since 2.0",
                "      */",
                "@@ -449,6 +415,6 @@ public abstract class BasicSerializerFactory",
                "         }",
                "-        // 17-Sep-2017, tatu: With 3.0, this JDK7 type may be added here too.",
                "-        // NOTE: not concrete, can not just add via StdJdkSerializers.",
                "+        // NOTE: not concrete, can not just add directly via StdJdkSerializers. Also, requires",
                "+        // bit of trickery wrt class name for polymorphic...",
                "         if (Path.class.isAssignableFrom(raw)) {",
                "-            return new NioPathSerializer();",
                "+            return StringLikeSerializer.find(Path.class);",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java",
                "deleted file mode 100644",
                "index 801f71ab9..000000000",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java",
                "+++ /dev/null",
                "@@ -1,34 +0,0 @@",
                "-package com.fasterxml.jackson.databind.ser.std;",
                "-",
                "-import java.io.IOException;",
                "-",
                "-import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "-import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.JsonMappingException;",
                "-import com.fasterxml.jackson.databind.SerializerProvider;",
                "-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "-",
                "-/**",
                "- * Also: default bean access will not do much good with Class.class. But",
                "- * we can just serialize the class name and that should be enough.",
                "- */",
                "-@SuppressWarnings(\"serial\")",
                "-public class ClassSerializer",
                "-    extends StdScalarSerializer<Class<?>>",
                "-{",
                "-    public ClassSerializer() { super(Class.class, false); }",
                "-",
                "-    @Override",
                "-    public void serialize(Class<?> value, JsonGenerator g, SerializerProvider provider) throws IOException",
                "-    {",
                "-        g.writeString(value.getName());",
                "-    }",
                "-",
                "-    @Override",
                "-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)",
                "-        throws JsonMappingException",
                "-    {",
                "-        visitStringFormat(visitor, typeHint);",
                "-    }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java",
                "deleted file mode 100644",
                "index 11e298ce7..000000000",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java",
                "+++ /dev/null",
                "@@ -1,33 +0,0 @@",
                "-package com.fasterxml.jackson.databind.ser.std;",
                "-",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-",
                "-import com.fasterxml.jackson.core.JsonGenerator;",
                "-import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.JsonMappingException;",
                "-import com.fasterxml.jackson.databind.SerializerProvider;",
                "-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "-",
                "-/**",
                "- * For now, File objects get serialized by just outputting",
                "- * absolute (but not canonical) name as String value",
                "- */",
                "-@SuppressWarnings(\"serial\")",
                "-public class FileSerializer",
                "-    extends StdScalarSerializer<File>",
                "-{",
                "-    public FileSerializer() { super(File.class); }",
                "-",
                "-    @Override",
                "-    public void serialize(File value, JsonGenerator g, SerializerProvider provider) throws IOException {",
                "-        g.writeString(value.getAbsolutePath());",
                "-    }",
                "-",
                "-    @Override",
                "-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)",
                "-        throws JsonMappingException",
                "-    {",
                "-        visitStringFormat(visitor, typeHint);",
                "-    }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NioPathSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NioPathSerializer.java",
                "deleted file mode 100644",
                "index b7c707cbf..000000000",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NioPathSerializer.java",
                "+++ /dev/null",
                "@@ -1,39 +0,0 @@",
                "-",
                "-package com.fasterxml.jackson.databind.ser.std;",
                "-",
                "-import java.io.IOException;",
                "-import java.nio.file.Path;",
                "-",
                "-import com.fasterxml.jackson.core.JsonGenerator;",
                "-import com.fasterxml.jackson.core.JsonToken;",
                "-import com.fasterxml.jackson.core.type.WritableTypeId;",
                "-",
                "-import com.fasterxml.jackson.databind.SerializerProvider;",
                "-import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-",
                "-public class NioPathSerializer extends StdScalarSerializer<Path>",
                "-{",
                "-    private static final long serialVersionUID = 1;",
                "-",
                "-    public NioPathSerializer() { super(Path.class); }",
                "-",
                "-    @Override",
                "-    public void serialize(Path value, JsonGenerator gen, SerializerProvider serializers) throws IOException",
                "-    {",
                "-        // write the Path as a URI, always.",
                "-        gen.writeString(value.toUri().toString());",
                "-    }",
                "-",
                "-    // [databind#1688]: Not sure this is 100% ok, considering there are legitimately different",
                "-    //  impls... but has to do",
                "-    @Override",
                "-    public void serializeWithType(Path value, JsonGenerator g,",
                "-            SerializerProvider provider, TypeSerializer typeSer) throws IOException",
                "-    {",
                "-        // Better ensure we don't use specific sub-classes:",
                "-        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,",
                "-                typeSer.typeId(value, Path.class, JsonToken.VALUE_STRING));",
                "-        serialize(value, g, provider);",
                "-        typeSer.writeTypeSuffix(g, typeIdDef);",
                "-    }",
                "-}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
                "index 58d6fd624..e84f1cd20 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
                "@@ -10,2 +10,3 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;",
                "+import com.fasterxml.jackson.databind.util.TokenBuffer;",
                "@@ -20,40 +21,49 @@ public class StdJdkSerializers",
                "     /**",
                "-     * Method called by {@link BasicSerializerFactory} to access",
                "-     * all serializers this class provides.",
                "+     * Method called by {@link BasicSerializerFactory} to find one of serializers provided here.",
                "      */",
                "-    public static Collection<Map.Entry<Class<?>, Object>> all()",
                "+    public static final JsonSerializer<?> find(Class<?> raw)",
                "     {",
                "-        HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();",
                "-",
                "-        // First things that 'toString()' can handle",
                "-        sers.put(java.net.URL.class, new ToStringSerializer(java.net.URL.class));",
                "-        sers.put(java.net.URI.class, new ToStringSerializer(java.net.URI.class));",
                "-",
                "-        sers.put(Currency.class, new ToStringSerializer(Currency.class));",
                "-        sers.put(UUID.class, new UUIDSerializer());",
                "-        sers.put(java.util.regex.Pattern.class, new ToStringSerializer(java.util.regex.Pattern.class));",
                "-        sers.put(Locale.class, new ToStringSerializer(Locale.class));",
                "-",
                "-        // then atomic types (note: AtomicReference defined elsewhere)",
                "-        sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);",
                "-        sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);",
                "-        sers.put(AtomicLong.class, AtomicLongSerializer.class);",
                "-",
                "-        // then other types that need specialized serializers",
                "-        sers.put(File.class, FileSerializer.class);",
                "-        sers.put(Class.class, ClassSerializer.class);",
                "-",
                "+        JsonSerializer<?> ser = StringLikeSerializer.find(raw);",
                "+        if (ser != null) {",
                "+            return ser;",
                "+        }",
                "+        if (raw == UUID.class) {",
                "+            return new UUIDSerializer();",
                "+        }",
                "+        if (raw == AtomicBoolean.class) {",
                "+            return new AtomicBooleanSerializer();",
                "+        }",
                "+        if (raw == AtomicInteger.class) {",
                "+            return new AtomicIntegerSerializer();",
                "+        }",
                "+        if (raw == AtomicLong.class) {",
                "+            return new AtomicLongSerializer();",
                "+        }",
                "+        // Jackson-specific type(s)",
                "+        // (Q: can this ever be sub-classed?)",
                "+        if (raw == TokenBuffer.class) {",
                "+            return new TokenBufferSerializer();",
                "+        }",
                "         // And then some stranger types... not 100% they are needed but:",
                "-        sers.put(Void.class, NullSerializer.instance);",
                "-        sers.put(Void.TYPE, NullSerializer.instance);",
                "+        if ((raw == Void.class) || (raw == Void.TYPE)) { ",
                "+            return NullSerializer.instance;",
                "+        }",
                "+        if (raw.getName().startsWith(\"java.sql.\"))  {",
                "+            return _findSqlType(raw);",
                "+        }",
                "+        return null;",
                "+    }",
                "-        // 09-Jan-2015, tatu: As per [databind#1073], let's try to guard against possibility",
                "-        //   of some environments missing `java.sql.` types",
                "+    private static JsonSerializer<?> _findSqlType(Class<?> raw) {",
                "         try {",
                "             // note: timestamps are very similar to java.util.Date, thus serialized as such",
                "-            sers.put(java.sql.Timestamp.class, DateSerializer.instance);",
                "-    ",
                "-            // leave some of less commonly used ones as lazy, no point in proactive construction",
                "-            sers.put(java.sql.Date.class, SqlDateSerializer.class);",
                "-            sers.put(java.sql.Time.class, SqlTimeSerializer.class);",
                "+            if (raw == java.sql.Timestamp.class) {",
                "+                return DateSerializer.instance;",
                "+            }",
                "+            if (raw == java.sql.Date.class) {",
                "+                return new SqlDateSerializer();",
                "+            }",
                "+            if (raw == java.sql.Time.class) {",
                "+                return new SqlTimeSerializer();",
                "+            }",
                "         } catch (NoClassDefFoundError e) {",
                "@@ -61,3 +71,3 @@ public class StdJdkSerializers",
                "         }",
                "-        return sers.entrySet();",
                "+        return null;",
                "     }",
                "@@ -76,3 +86,3 @@ public class StdJdkSerializers",
                "         @Override",
                "-        public void serialize(AtomicBoolean value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {",
                "+        public void serialize(AtomicBoolean value, JsonGenerator gen, SerializerProvider provider) throws IOException {",
                "             gen.writeBoolean(value.get());",
                "@@ -85,3 +95,3 @@ public class StdJdkSerializers",
                "     }",
                "-    ",
                "+",
                "     public static class AtomicIntegerSerializer",
                "@@ -92,3 +102,3 @@ public class StdJdkSerializers",
                "         @Override",
                "-        public void serialize(AtomicInteger value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {",
                "+        public void serialize(AtomicInteger value, JsonGenerator gen, SerializerProvider provider) throws IOException {",
                "             gen.writeNumber(value.get());",
                "@@ -109,3 +119,3 @@ public class StdJdkSerializers",
                "         @Override",
                "-        public void serialize(AtomicLong value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonGenerationException {",
                "+        public void serialize(AtomicLong value, JsonGenerator gen, SerializerProvider provider) throws IOException {",
                "             gen.writeNumber(value.get());",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringLikeSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringLikeSerializer.java",
                "new file mode 100644",
                "index 000000000..294054780",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringLikeSerializer.java",
                "@@ -0,0 +1,134 @@",
                "+package com.fasterxml.jackson.databind.ser.std;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.net.URI;",
                "+import java.net.URL;",
                "+import java.nio.file.Path;",
                "+import java.util.*;",
                "+import java.util.regex.Pattern;",
                "+",
                "+import com.fasterxml.jackson.core.*;",
                "+import com.fasterxml.jackson.core.type.WritableTypeId;",
                "+",
                "+import com.fasterxml.jackson.databind.*;",
                "+import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "+",
                "+/**",
                "+ * \"Combo\" serializer used for JDK types that work almost like {@link ToStringSerializer}.",
                "+ *",
                "+ * @since 3.0",
                "+ */",
                "+@JacksonStdImpl",
                "+public class StringLikeSerializer",
                "+    extends StdSerializer<Object>",
                "+{",
                "+    private static final long serialVersionUID = 1L;",
                "+",
                "+    protected final static int TYPE_URL = 1;",
                "+    protected final static int TYPE_URI = 2;",
                "+    protected final static int TYPE_FILE = 3;",
                "+    protected final static int TYPE_PATH = 4;",
                "+",
                "+    protected final static int TYPE_CLASS = 5;",
                "+    ",
                "+    protected final static int TYPE_CURRENCY = 6;",
                "+    protected final static int TYPE_LOCALE = 7;",
                "+    protected final static int TYPE_PATTERN = 8;",
                "+",
                "+    private final static Map<Class<?>,Integer> _types = new HashMap<>();",
                "+    static {",
                "+        _types.put(URL.class, TYPE_URL);",
                "+        _types.put(URI.class, TYPE_URI);",
                "+        _types.put(File.class, TYPE_FILE);",
                "+        _types.put(Path.class, TYPE_PATH);",
                "+",
                "+        _types.put(Class.class, TYPE_CLASS);",
                "+",
                "+        _types.put(Currency.class, TYPE_CURRENCY);",
                "+        _types.put(Locale.class, TYPE_LOCALE);",
                "+        _types.put(Pattern.class, TYPE_PATTERN);",
                "+    }",
                "+",
                "+    private final int _type;",
                "+",
                "+    public StringLikeSerializer(Class<?> handledType, int type) {",
                "+        super(handledType, false);",
                "+        _type = type;",
                "+    }",
                "+",
                "+    public static final JsonSerializer<?> find(Class<?> raw)",
                "+    {",
                "+        Integer I = _types.get(raw);",
                "+        if (I == null) {",
                "+            return null;",
                "+        }",
                "+        return new StringLikeSerializer(raw, I.intValue());",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public boolean isEmpty(SerializerProvider prov, Object value) {",
                "+        return value.toString().isEmpty();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void serialize(Object value, JsonGenerator g, SerializerProvider provider)",
                "+        throws IOException",
                "+    {",
                "+        String str;",
                "+",
                "+        switch (_type) {",
                "+        case TYPE_FILE:",
                "+            str = ((File) value).getAbsolutePath();",
                "+            break;",
                "+        case TYPE_PATH:",
                "+            str = ((Path)value).toUri().toString();",
                "+            break;",
                "+        case TYPE_CLASS:",
                "+            str = ((Class<?>)value).getName();",
                "+            break;",
                "+        case TYPE_LOCALE: // [databind#1600]",
                "+            {",
                "+                Locale loc = (Locale) value;",
                "+                if (loc == Locale.ROOT) {",
                "+                    str = \"\";",
                "+                } else {",
                "+                    str = loc.toLanguageTag();",
                "+                }",
                "+            }",
                "+            break;",
                "+        default:",
                "+            str = value.toString();",
                "+            break;",
                "+        }",
                "+        g.writeString(str);",
                "+    }",
                "+",
                "+    /**",
                "+     * Default implementation will write type prefix, call regular serialization",
                "+     * method (since assumption is that value itself does not need JSON",
                "+     * Array or Object start/end markers), and then write type suffix.",
                "+     * This should work for most cases; some sub-classes may want to",
                "+     * change this behavior.",
                "+     */",
                "+    @Override",
                "+    public void serializeWithType(Object value, JsonGenerator g, SerializerProvider provider,",
                "+            TypeSerializer typeSer)",
                "+        throws IOException",
                "+    {",
                "+        // 15-Feb-2018, tatu: Note! In some cases `handledType` is base type, and not necessarily",
                "+        //    actual specific value type (f.ex. nio.Path)",
                "+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,",
                "+                typeSer.typeId(value, handledType(), JsonToken.VALUE_STRING));",
                "+        serialize(value, g, provider);",
                "+        typeSer.writeTypeSuffix(g, typeIdDef);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
                "+    {",
                "+        visitStringFormat(visitor, typeHint);",
                "+    }",
                "+}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
                "index 55077975a..427698bf9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
                "@@ -21,5 +21,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " public final class StringSerializer",
                "-// NOTE: generic parameter changed from String to Object in 2.6, to avoid",
                "-//   use of bridge methods",
                "-// In 2.9, removed use of intermediate type `NonTypedScalarSerializerBase`",
                "     extends StdScalarSerializer<Object>",
                "@@ -28,2 +25,4 @@ public final class StringSerializer",
                "+    public final static StringSerializer instance = new StringSerializer();",
                "+    ",
                "     public StringSerializer() { super(String.class, false); }"
            ],
            "changed_files": [
                "release-notes/CREDITS",
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/NioPathSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StringLikeSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1600": "Locale deserialize 'zh-hant_CN' #1948 fix(3259): Support deserialization of Locales created using BCP 47 format #3265 Support for BCP 47 java.util.Locale serialization/deserialization #3259"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdJdkDeserializers.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StringLikeSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/NioPathSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1600",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d0c9e750915efff2525e949a27d9750252322886",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518153294,
            "hunks": 20,
            "message": "more refactoring",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index 2667c80dd..9534e19b7 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -104,2 +104,7 @@ public abstract class Module",
                "+        /**",
                "+         * @since 3.0",
                "+         */",
                "+        public String getFormatName();",
                "+",
                "         /**",
                "@@ -130,14 +135,11 @@ public abstract class Module",
                "          */",
                "-        public TypeFactory getTypeFactory();",
                "-        ",
                "+        public TypeFactory typeFactory();",
                "+",
                "+        public TokenStreamFactory tokenStreamFactory();",
                "+",
                "         public boolean isEnabled(MapperFeature f);",
                "-        ",
                "         public boolean isEnabled(DeserializationFeature f);",
                "-",
                "         public boolean isEnabled(SerializationFeature f);",
                "-",
                "         public boolean isEnabled(JsonFactory.Feature f);",
                "-        ",
                "         public boolean isEnabled(JsonParser.Feature f);",
                "-",
                "         public boolean isEnabled(JsonGenerator.Feature f);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 78c888e63..a7c5f3ca4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -508,3 +508,13 @@ public class ObjectMapper",
                "             @Override",
                "-            public TypeFactory getTypeFactory() {",
                "+            public String getFormatName() {",
                "+                return _streamFactory.getFormatName();",
                "+            }",
                "+",
                "+            @Override",
                "+            public TokenStreamFactory tokenStreamFactory() {",
                "+                return _streamFactory;",
                "+            }",
                "+            ",
                "+            @Override",
                "+            public TypeFactory typeFactory() {",
                "                 return _typeFactory;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "index 49c622cc6..a432552c2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "@@ -10,4 +10,2 @@ import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
                "  * Container for individual {@link ConfigOverride} values.",
                "- * ",
                "- * @since 2.8",
                "  */",
                "@@ -18,2 +16,10 @@ public class ConfigOverrides",
                "+    /**",
                "+     * Convenience value used as the default root setting.",
                "+     *",
                "+     * @since 3.0",
                "+     */",
                "+    public final static JsonInclude.Value INCLUDE_ALL",
                "+        = JsonInclude.Value.construct(JsonInclude.Include.ALWAYS, JsonInclude.Include.ALWAYS);",
                "+    ",
                "     /**",
                "@@ -25,20 +31,8 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected JsonInclude.Value _defaultInclusion;",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected JsonSetter.Value _defaultSetterInfo;",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected VisibilityChecker<?> _visibilityChecker;",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected Boolean _defaultMergeable;",
                "@@ -53,4 +47,3 @@ public class ConfigOverrides",
                "         this(null,",
                "-                // !!! TODO: change to (ALWAYS, ALWAYS)?",
                "-                JsonInclude.Value.empty(),",
                "+                INCLUDE_ALL,",
                "                 JsonSetter.Value.empty(),",
                "@@ -131,5 +124,2 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public VisibilityChecker<?> getDefaultVisibility() {",
                "@@ -138,5 +128,2 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public void setDefaultInclusion(JsonInclude.Value v) {",
                "@@ -145,5 +132,2 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public void setDefaultSetterInfo(JsonSetter.Value v) {",
                "@@ -152,5 +136,2 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public void setDefaultMergeable(Boolean v) {",
                "@@ -159,5 +140,2 @@ public class ConfigOverrides",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public void setDefaultVisibility(VisibilityChecker<?> v) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1c1ed4dfff1883a95ef38e237d86aa79ad33a3dd"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java, src/main/java/com/fasterxml/jackson/databind/Module.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e5b6fbe26974ad224b7cbe5029fd56ec881a7a2",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519100404,
            "hunks": 2,
            "message": "...",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 0f753c5f6..88c97ce47 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -170,8 +170,2 @@ public class ObjectMapper",
                "         }",
                "-",
                "-        @Override",
                "-        public ModuleContextBase _constructModuleContext() {",
                "-            return new ModuleContextBase(this,",
                "-                    _configOverrides, baseSettings());",
                "-        }",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 9d972ba31..9c46b84f3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -296,4 +296,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public abstract ModuleContextBase _constructModuleContext();",
                "-    ",
                "+    public ModuleContextBase _constructModuleContext() {",
                "+        return new ModuleContextBase(this,",
                "+                _configOverrides, baseSettings());",
                "+    }",
                "+",
                "     public MapperBuilderState _constructState() {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fd623249a1644602f73e36932e001e2c8e584f4d"
                ],
                [
                    "no-tag",
                    "4230322a6d955025b4c29cf59b90a7df549995f4"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8098ff38f696a2b7001d86969c6b98c549458726",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517797375,
            "hunks": 11,
            "message": "Remove usage of _neitherNull on findProperty (#1918) * Fix #1912 Remove usage of _neitherNull on findProperty to get custom property if possible. * [#1912] add unit test",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index 2315960be..cefa096e6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@ -263,3 +263,3 @@ public abstract class BeanDeserializerBase",
                "     }",
                "- ",
                "+",
                "     protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper)",
                "@@ -417,3 +417,3 @@ public abstract class BeanDeserializerBase",
                "      * if no such input is possible.",
                "-     * ",
                "+     *",
                "      * @since 2.1",
                "@@ -646,3 +646,3 @@ public abstract class BeanDeserializerBase",
                "      * care to do that.",
                "-     * ",
                "+     *",
                "      * @since 2.2",
                "@@ -667,3 +667,3 @@ public abstract class BeanDeserializerBase",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -1028,3 +1028,3 @@ public abstract class BeanDeserializerBase",
                "      * factory method)",
                "-     * ",
                "+     *",
                "      * @since 2.0",
                "@@ -1049,3 +1049,3 @@ public abstract class BeanDeserializerBase",
                "      * in external data representation (JSON).",
                "-     * ",
                "+     *",
                "      * @since 2.0",
                "@@ -1056,3 +1056,3 @@ public abstract class BeanDeserializerBase",
                "                 null : _beanProperties.find(propertyName);",
                "-        if (_neitherNull(prop, _propertyBasedCreator)) {",
                "+        if (prop == null && _propertyBasedCreator != null) {",
                "             prop = _propertyBasedCreator.findCreatorProperty(propertyName);",
                "@@ -1069,3 +1069,3 @@ public abstract class BeanDeserializerBase",
                "      * is low.",
                "-     * ",
                "+     *",
                "      * @since 2.3",
                "@@ -1076,3 +1076,3 @@ public abstract class BeanDeserializerBase",
                "                 null : _beanProperties.find(propertyIndex);",
                "-        if (_neitherNull(prop, _propertyBasedCreator)) {",
                "+        if (prop == null && _propertyBasedCreator != null) {",
                "             prop = _propertyBasedCreator.findCreatorProperty(propertyIndex);",
                "@@ -1115,3 +1115,3 @@ public abstract class BeanDeserializerBase",
                "      * @param replacement Property to replace it with",
                "-     * ",
                "+     *",
                "      * @since 2.1",
                "@@ -1587,3 +1587,3 @@ public abstract class BeanDeserializerBase",
                "      * name to match, either by property annotation or class annotation) is encountered.",
                "-     * ",
                "+     *",
                "      * @since 2.3"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1918": "",
                "1912": "Remove usage of _neitherNull on findProperty #1913 Remove usage of _neitherNull on findProperty #1918"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1918, 1912",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d2532a4fa0aa78307809278ec6ab3930a072358",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517619261,
            "hunks": 4,
            "message": "More refactoring",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index f5314a52d..055437feb 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1518,6 +1518,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for changing state of an on/off deserialization feature for",
                "-     * this object mapper.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper configure(DeserializationFeature f, boolean state) {",
                "@@ -1528,6 +1525,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper enable(DeserializationFeature feature) {",
                "@@ -1537,16 +1531,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for enabling specified {@link DeserializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "-    public ObjectMapper enable(DeserializationFeature first,",
                "-            DeserializationFeature... f) {",
                "-        _deserializationConfig = _deserializationConfig.with(first, f);",
                "-        return this;",
                "-    }",
                "-    ",
                "-    /**",
                "-     * Method for disabling specified {@link DeserializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper disable(DeserializationFeature feature) {",
                "@@ -1556,12 +1537,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for disabling specified {@link DeserializationConfig} features.",
                "-     * Modifies and returns this instance; no new object is created.",
                "-     */",
                "-    public ObjectMapper disable(DeserializationFeature first,",
                "-            DeserializationFeature... f) {",
                "-        _deserializationConfig = _deserializationConfig.without(first, f);",
                "-        return this;",
                "-    }",
                "-    ",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8ca15ef3a04c54550bc8486a8b5d57834ad7de83",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517811668,
            "hunks": 1,
            "message": "Refactoring: move base `MapperBuilder` in cfg package away from root",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "new file mode 100644",
                "index 000000000..6ca6ed52f",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -0,0 +1,630 @@",
                "+package com.fasterxml.jackson.databind.cfg;",
                "+",
                "+import java.text.DateFormat;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "+",
                "+import com.fasterxml.jackson.core.*;",
                "+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
                "+",
                "+import com.fasterxml.jackson.databind.*;",
                "+import com.fasterxml.jackson.databind.deser.*;",
                "+import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
                "+import com.fasterxml.jackson.databind.node.JsonNodeFactory;",
                "+import com.fasterxml.jackson.databind.ser.*;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+import com.fasterxml.jackson.databind.util.RootNameLookup;",
                "+",
                "+/**",
                "+ * Since {@link ObjectMapper} instances are immutable in  Jackson 3.x for full thread-safety,",
                "+ * we need means to construct configured instances. This is the shared base API for",
                "+ * builders for all types of mappers.",
                "+ *",
                "+ * @since 3.0",
                "+ */",
                "+public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    B extends MapperBuilder<M,B>>",
                "+{",
                "+    protected final static int DEFAULT_MAPPER_FEATURES = MapperConfig.collectFeatureDefaults(MapperFeature.class);",
                "+    protected final static int DEFAULT_SER_FEATURES = MapperConfig.collectFeatureDefaults(SerializationFeature.class);",
                "+    protected final static int DEFAULT_DESER_FEATURES = MapperConfig.collectFeatureDefaults(DeserializationFeature.class);",
                "+",
                "+    protected final static PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter();",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Basic settings",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected BaseSettings _baseSettings;",
                "+",
                "+    /**",
                "+     * Underlying stream factory",
                "+     */",
                "+    protected final TokenStreamFactory _streamFactory;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Handlers, introspection",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Introspector used to figure out Bean properties needed for bean serialization",
                "+     * and deserialization. Overridable so that it is possible to change low-level",
                "+     * details of introspection, like adding new annotation types.",
                "+     */",
                "+    protected ClassIntrospector _classIntrospector;",
                "+",
                "+    protected SubtypeResolver _subtypeResolver;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Factories for serialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected SerializerFactory _serializerFactory;",
                "+",
                "+    /**",
                "+     * Prototype {@link SerializerProvider} to use for creating per-operation providers.",
                "+     */",
                "+    protected DefaultSerializerProvider _serializerProvider;",
                "+",
                "+    protected FilterProvider _filterProvider;",
                "+",
                "+    protected PrettyPrinter _defaultPrettyPrinter;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Factories for deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected DeserializerFactory _deserializerFactory;",
                "+",
                "+    /**",
                "+     * Prototype (about same as factory) to use for creating per-operation contexts.",
                "+     */",
                "+    protected DefaultDeserializationContext _deserializationContext;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Feature flags: ser, deser",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Set of shared mapper features enabled.",
                "+     */",
                "+    protected int _mapperFeatures;",
                "+",
                "+    /**",
                "+     * Set of {@link SerializationFeature}s enabled.",
                "+     */",
                "+    protected int _serFeatures;",
                "+",
                "+    /**",
                "+     * Set of {@link DeserializationFeature}s enabled.",
                "+     */",
                "+    protected int _deserFeatures;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Feature flags: generation, parsing",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * States of {@link com.fasterxml.jackson.core.JsonParser.Feature}s to enable/disable.",
                "+     */",
                "+    protected int _parserFeatures;",
                "+",
                "+    /**",
                "+     * States of {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s to enable/disable.",
                "+     */",
                "+    protected int _generatorFeatures;",
                "+",
                "+    /**",
                "+     * Optional per-format parser feature flags.",
                "+     */",
                "+    protected int _formatParserFeatures;",
                "+",
                "+    /**",
                "+     * Optional per-format generator feature flags.",
                "+     */",
                "+    protected int _formatGeneratorFeatures;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Life-cycle",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected MapperBuilder(TokenStreamFactory streamFactory)",
                "+    {",
                "+        _streamFactory = streamFactory;",
                "+        _baseSettings = BaseSettings.std();",
                "+",
                "+        _parserFeatures = streamFactory.getParserFeatures();",
                "+        _generatorFeatures = streamFactory.getGeneratorFeatures();",
                "+        _formatParserFeatures = streamFactory.getFormatParserFeatures();",
                "+        _formatGeneratorFeatures = streamFactory.getFormatGeneratorFeatures();",
                "+",
                "+        _mapperFeatures = DEFAULT_MAPPER_FEATURES;",
                "+        // Some overrides we may need based on format",
                "+        if (streamFactory.requiresPropertyOrdering()) {",
                "+            _mapperFeatures |= MapperFeature.SORT_PROPERTIES_ALPHABETICALLY.getMask();",
                "+        }",
                "+        _deserFeatures = DEFAULT_DESER_FEATURES;",
                "+        _serFeatures = DEFAULT_SER_FEATURES;",
                "+",
                "+        _classIntrospector = null;",
                "+        _subtypeResolver = null;",
                "+",
                "+        _serializerFactory = BeanSerializerFactory.instance;",
                "+        _serializerProvider = null;",
                "+        _filterProvider = null;",
                "+",
                "+        _deserializerFactory = BeanDeserializerFactory.instance;",
                "+        _deserializationContext = null;",
                "+    }",
                "+",
                "+    protected MapperBuilder(MapperBuilder<?,?> base)",
                "+    {",
                "+        _streamFactory = base._streamFactory;",
                "+        _baseSettings = base._baseSettings;",
                "+",
                "+        _mapperFeatures = base._mapperFeatures;",
                "+        _serFeatures = base._serFeatures;",
                "+        _deserFeatures = base._deserFeatures;",
                "+",
                "+        _parserFeatures = base._parserFeatures;",
                "+        _generatorFeatures = base._deserFeatures;",
                "+        _formatParserFeatures = base._formatParserFeatures;",
                "+        _formatGeneratorFeatures = base._formatGeneratorFeatures;",
                "+",
                "+        _classIntrospector = base._classIntrospector;",
                "+        _subtypeResolver = base._subtypeResolver;",
                "+",
                "+        _serializerFactory = base._serializerFactory;",
                "+        _serializerProvider = base._serializerProvider;",
                "+        _filterProvider = base._filterProvider;",
                "+",
                "+        _deserializerFactory = base._deserializerFactory;",
                "+        _deserializationContext = base._deserializationContext;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Build methods",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method to call to create an initialize actual mapper instance",
                "+     */",
                "+    public abstract M build();",
                "+",
                "+    public SerializationConfig buildSerializationConfig(SimpleMixInResolver mixins,",
                "+            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+    {",
                "+        return new SerializationConfig(this,",
                "+                _mapperFeatures, _serFeatures, _generatorFeatures, _formatGeneratorFeatures,",
                "+                mixins, rootNames, configOverrides);",
                "+    }",
                "+",
                "+    public DeserializationConfig buildDeserializationConfig(SimpleMixInResolver mixins,",
                "+            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+    {",
                "+        return new DeserializationConfig(this,",
                "+                _mapperFeatures, _deserFeatures, _parserFeatures, _formatParserFeatures,",
                "+                mixins, rootNames, configOverrides);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors, general",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public BaseSettings baseSettings() {",
                "+        return _baseSettings;",
                "+    }",
                "+",
                "+    public TokenStreamFactory streamFactory() {",
                "+        return _streamFactory;",
                "+    }",
                "+",
                "+    public TypeFactory typeFactory() {",
                "+        return _baseSettings.getTypeFactory();",
                "+    }",
                "+",
                "+    public ClassIntrospector classIntrospector() {",
                "+        if (_classIntrospector == null) {",
                "+            _classIntrospector = _defaultClassIntrospector();",
                "+        }",
                "+        return _classIntrospector;",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SubtypeResolver} instance to use",
                "+     */",
                "+    protected ClassIntrospector _defaultClassIntrospector() {",
                "+        return new BasicClassIntrospector();",
                "+    }",
                "+",
                "+    public SubtypeResolver subtypeResolver() {",
                "+        if (_subtypeResolver == null) {",
                "+            _subtypeResolver = _defaultSubtypeResolver();",
                "+        }",
                "+        return _subtypeResolver;",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SubtypeResolver} prototype",
                "+     * to use.",
                "+     */",
                "+    protected SubtypeResolver _defaultSubtypeResolver() {",
                "+        return new StdSubtypeResolver();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors, serialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public SerializerFactory serializerFactory() {",
                "+        return _serializerFactory;",
                "+    }",
                "+",
                "+    public DefaultSerializerProvider serializerProvider() {",
                "+        if (_serializerProvider == null) {",
                "+            _serializerProvider = _defaultSerializerProvider();",
                "+        }",
                "+        return _serializerProvider;",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SerializerProvider} prototype",
                "+     * to use.",
                "+     */",
                "+    protected DefaultSerializerProvider _defaultSerializerProvider() {",
                "+        return new DefaultSerializerProvider.Impl(_streamFactory);",
                "+    }",
                "+",
                "+    public FilterProvider filterProvider() {",
                "+        return _filterProvider;",
                "+    }",
                "+    ",
                "+    public PrettyPrinter defaultPrettyPrinter() {",
                "+        if (_defaultPrettyPrinter == null) {",
                "+            _defaultPrettyPrinter = _defaultPrettyPrinter();",
                "+        }",
                "+        return _defaultPrettyPrinter;",
                "+    }",
                "+",
                "+    protected PrettyPrinter _defaultPrettyPrinter() {",
                "+        return DEFAULT_PRETTY_PRINTER;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors, deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public DeserializerFactory deserializerFactory() {",
                "+        return _deserializerFactory;",
                "+    }",
                "+",
                "+    public DefaultDeserializationContext deserializationContext() {",
                "+        if (_deserializationContext == null) {",
                "+            _deserializationContext = _defaultDeserializationContext();",
                "+        }",
                "+        return _deserializationContext;",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SerializerProvider} prototype",
                "+     * to use.",
                "+     */",
                "+    protected DefaultDeserializationContext _defaultDeserializationContext() {",
                "+        return new DefaultDeserializationContext.Impl(deserializerFactory(),",
                "+                _streamFactory);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing features: mapper, ser, deser",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B enable(MapperFeature... features) {",
                "+        for (MapperFeature f : features) {",
                "+            _mapperFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(MapperFeature... features) {",
                "+        for (MapperFeature f : features) {",
                "+            _mapperFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(MapperFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _mapperFeatures |= feature.getMask();",
                "+        } else {",
                "+            _mapperFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B enable(SerializationFeature... features) {",
                "+        for (SerializationFeature f : features) {",
                "+            _serFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(SerializationFeature... features) {",
                "+        for (SerializationFeature f : features) {",
                "+            _serFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(SerializationFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _serFeatures |= feature.getMask();",
                "+        } else {",
                "+            _serFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B enable(DeserializationFeature... features) {",
                "+        for (DeserializationFeature f : features) {",
                "+            _deserFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(DeserializationFeature... features) {",
                "+        for (DeserializationFeature f : features) {",
                "+            _deserFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(DeserializationFeature feature, boolean state)",
                "+    {",
                "+        if (state) {",
                "+            _deserFeatures |= feature.getMask();",
                "+        } else {",
                "+            _deserFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing features: parser, generator",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B enable(JsonParser.Feature... features) {",
                "+        for (JsonParser.Feature f : features) {",
                "+            _parserFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(JsonParser.Feature... features) {",
                "+        for (JsonParser.Feature f : features) {",
                "+            _parserFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(JsonParser.Feature feature, boolean state) {",
                "+        if (state) {",
                "+            _parserFeatures |= feature.getMask();",
                "+        } else {",
                "+            _parserFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B enable(JsonGenerator.Feature... features) {",
                "+        for (JsonGenerator.Feature f : features) {",
                "+            _generatorFeatures |= f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B disable(JsonGenerator.Feature... features) {",
                "+        for (JsonGenerator.Feature f : features) {",
                "+            _generatorFeatures &= ~f.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B configure(JsonGenerator.Feature feature, boolean state) {",
                "+        if (state) {",
                "+            _generatorFeatures |= feature.getMask();",
                "+        } else {",
                "+            _generatorFeatures &= ~feature.getMask();",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories/handlers, general",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B typeFactory(TypeFactory f) {",
                "+        _baseSettings = _baseSettings.with(f);",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B nodeFactory(JsonNodeFactory f) {",
                "+        _baseSettings = _baseSettings.with(f);",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B classIntrospector(ClassIntrospector ci) {",
                "+        _classIntrospector = ci;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for configuring {@link HandlerInstantiator} to use for creating",
                "+     * instances of handlers (such as serializers, deserializers, type and type",
                "+     * id resolvers), given a class.",
                "+     *",
                "+     * @param hi Instantiator to use; if null, use the default implementation",
                "+     */",
                "+    public B handlerInstantiator(HandlerInstantiator hi) {",
                "+        _baseSettings = _baseSettings.with(hi);",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B subtypeResolver(SubtypeResolver r) {",
                "+        _subtypeResolver = r;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B propertyNamingStrategy(PropertyNamingStrategy s) {",
                "+        _baseSettings = _baseSettings.with(s);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories, serialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B serializerFactory(SerializerFactory f) {",
                "+        _serializerFactory = f;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B serializerProvider(DefaultSerializerProvider prov) {",
                "+        _serializerProvider = prov;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for configuring this mapper to use specified {@link FilterProvider} for",
                "+     * mapping Filter Ids to actual filter instances.",
                "+     *<p>",
                "+     * Note that usually it is better to use method in {@link ObjectWriter}, but sometimes",
                "+     * this method is more convenient. For example, some frameworks only allow configuring",
                "+     * of ObjectMapper instances and not {@link ObjectWriter}s.",
                "+     */",
                "+    public B filterProvider(FilterProvider prov) {",
                "+        _filterProvider = prov;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B defaultPrettyPrinter(PrettyPrinter pp) {",
                "+        _defaultPrettyPrinter = pp;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories, deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B deserializerFactory(DeserializerFactory f) {",
                "+        _deserializerFactory = f;",
                "+        return _this();",
                "+    }",
                "+",
                "+    protected B deserializationContext(DefaultDeserializationContext ctxt) {",
                "+        _deserializationContext = ctxt;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing settings, date/time",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method for configuring the default {@link DateFormat} to use when serializing time",
                "+     * values as Strings, and deserializing from JSON Strings.",
                "+     * If you need per-request configuration, factory methods in",
                "+     * {@link ObjectReader} and {@link ObjectWriter} instead.",
                "+     */",
                "+    public B defaultDateFormat(DateFormat f) {",
                "+        _baseSettings = _baseSettings.with(f);",
                "+        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, (f == null));",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for overriding default TimeZone to use for formatting.",
                "+     * Default value used is UTC (NOT default TimeZone of JVM).",
                "+     */",
                "+    public B defaultTimeZone(TimeZone tz) {",
                "+        _baseSettings = _baseSettings.with(tz);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for overriding default locale to use for formatting.",
                "+     * Default value used is {@link Locale#getDefault()}.",
                "+     */",
                "+    public B defaultLocale(Locale locale) {",
                "+        _baseSettings = _baseSettings.with(locale);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing settings, formatting",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method that will configure default {@link Base64Variant} that",
                "+     * <code>byte[]</code> serializers and deserializers will use.",
                "+     * ",
                "+     * @param v Base64 variant to use",
                "+     * ",
                "+     * @return This mapper, for convenience to allow chaining",
                "+     */",
                "+    public B defaultBase64Variant(Base64Variant v) {",
                "+        _baseSettings = _baseSettings.with(v);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Other helper methods",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    // silly convenience cast method we need",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected final B _this() { return (B) this; }",
                "+}"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "99490557caeef43accacb60c2c5bde4407ea7762",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517805402,
            "hunks": 103,
            "message": "Changes to add format-parser/-generator feature support back via builders",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index 706daa1de..ffb61f883 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -26,8 +26,8 @@ public final class DeserializationConfig",
                " {",
                "-    private static final long serialVersionUID = 2;",
                "+    private static final long serialVersionUID = 3;",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configured helper objects",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -42,5 +42,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Deserialization features ",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -53,5 +53,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Parser features: generic, format-specific",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -66,13 +66,8 @@ public final class DeserializationConfig",
                "      */",
                "-    protected final int _formatReadFeatures;",
                "-",
                "-    /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable",
                "-     */",
                "-    protected final int _formatReadFeaturesToChange;",
                "+    protected final int _formatParserFeatures;",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, primary constructors for new instances",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -90,4 +85,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -97,4 +91,4 @@ public final class DeserializationConfig",
                "      */",
                "-    public DeserializationConfig(MapperBuilder<?,?> b,",
                "-            int mapperFeatures, int deserFeatures, int parserFeatures,",
                "+    public DeserializationConfig(MapperBuilder<?,?> b, int mapperFeatures,",
                "+            int deserFeatures, int parserFeatures, int formatParserFeatures,",
                "             SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "@@ -108,4 +102,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = parserFeatures;",
                "-        _formatReadFeatures = 0;",
                "-        _formatReadFeaturesToChange = 0;",
                "+        _formatParserFeatures = formatParserFeatures;",
                "     }",
                "@@ -121,3 +114,3 @@ public final class DeserializationConfig",
                "             int mapperFeatures, int deserFeatures, int parserFeatures,",
                "-            int formatFeatures, int formatFeatureMask)",
                "+            int formatParserFeatures)",
                "     {",
                "@@ -127,4 +120,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = parserFeatures;",
                "-        _formatReadFeatures = formatFeatures;",
                "-        _formatReadFeaturesToChange = formatFeatureMask;",
                "+        _formatParserFeatures = formatParserFeatures;",
                "     }",
                "@@ -141,4 +133,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -151,4 +142,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -161,4 +151,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -172,4 +161,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -182,4 +170,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -192,4 +179,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -202,4 +188,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -212,4 +197,3 @@ public final class DeserializationConfig",
                "         _parserFeatures = src._parserFeatures;",
                "-        _formatReadFeatures = src._formatReadFeatures;",
                "-        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;",
                "+        _formatParserFeatures = src._formatParserFeatures;",
                "     }",
                "@@ -220,5 +204,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, general factory methods from MapperConfig(Base)",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -233,3 +217,3 @@ public final class DeserializationConfig",
                "         return new DeserializationConfig(this, mapperFeatures, _deserFeatures, _parserFeatures,",
                "-                _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                _formatParserFeatures);",
                "     }",
                "@@ -237,5 +221,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, specific factory methods from MapperConfig",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -270,5 +254,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, DeserializationFeature-based factory methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -284,3 +268,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _formatParserFeatures);",
                "     }",
                "@@ -300,3 +284,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _formatParserFeatures);",
                "     }",
                "@@ -315,4 +299,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _parserFeatures, _formatParserFeatures);",
                "     }",
                "@@ -328,4 +311,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures,",
                "-                    _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _parserFeatures, _formatParserFeatures);",
                "     }",
                "@@ -345,3 +327,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _formatParserFeatures);",
                "     }",
                "@@ -359,4 +341,4 @@ public final class DeserializationConfig",
                "         return (newDeserFeatures == _deserFeatures) ? this :",
                "-            new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+            new DeserializationConfig(this, _mapperFeatures,",
                "+                    newDeserFeatures, _parserFeatures, _formatParserFeatures);",
                "     }",
                "@@ -364,5 +346,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, JsonParser.Feature-based factory methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -377,4 +359,4 @@ public final class DeserializationConfig",
                "         return (_parserFeatures == newSet)? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+            new DeserializationConfig(this,  _mapperFeatures,",
                "+                    _deserFeatures, newSet, _formatParserFeatures);",
                "     }",
                "@@ -393,3 +375,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _formatParserFeatures);",
                "     }",
                "@@ -405,3 +387,3 @@ public final class DeserializationConfig",
                "             new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+                    _formatParserFeatures);",
                "     }",
                "@@ -419,4 +401,4 @@ public final class DeserializationConfig",
                "         return (_parserFeatures == newSet)? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures, newSet,",
                "-                    _formatReadFeatures, _formatReadFeaturesToChange);",
                "+            new DeserializationConfig(this, _mapperFeatures,",
                "+                    _deserFeatures, newSet, _formatParserFeatures);",
                "     }",
                "@@ -435,11 +417,6 @@ public final class DeserializationConfig",
                "     {",
                "-        int newSet = _formatReadFeatures | feature.getMask();",
                "-        int newMask = _formatReadFeaturesToChange | feature.getMask();",
                "-",
                "-        if ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) {",
                "-            return this;",
                "-        }",
                "-        return new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures,",
                "-                    newSet, newMask);",
                "+        int newSet = _formatParserFeatures | feature.getMask();",
                "+        return (_formatParserFeatures == newSet) ? this",
                "+                : new DeserializationConfig(this,  _mapperFeatures,",
                "+                        _deserFeatures, _parserFeatures,  newSet);",
                "     }",
                "@@ -452,15 +429,11 @@ public final class DeserializationConfig",
                "     {",
                "-        int newSet = _formatReadFeatures;",
                "-        int newMask = _formatReadFeaturesToChange;",
                "+        int newSet = _formatParserFeatures;",
                "         for (FormatFeature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet |= mask;",
                "-            newMask |= mask;",
                "+            newSet |= f.getMask();",
                "         }",
                "-        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatParserFeatures == newSet) ? this",
                "+                : new DeserializationConfig(this, _mapperFeatures,",
                "+                        _deserFeatures, _parserFeatures, newSet);",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -471,8 +444,6 @@ public final class DeserializationConfig",
                "     {",
                "-        int newSet = _formatReadFeatures & ~feature.getMask();",
                "-        int newMask = _formatReadFeaturesToChange | feature.getMask();",
                "-        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures,",
                "-                    newSet, newMask);",
                "+        int newSet = _formatParserFeatures & ~feature.getMask();",
                "+        return (_formatParserFeatures == newSet) ? this",
                "+                : new DeserializationConfig(this, _mapperFeatures,",
                "+                        _deserFeatures, _parserFeatures, newSet);",
                "     }",
                "@@ -485,13 +456,9 @@ public final class DeserializationConfig",
                "     {",
                "-        int newSet = _formatReadFeatures;",
                "-        int newMask = _formatReadFeaturesToChange;",
                "+        int newSet = _formatParserFeatures;",
                "         for (FormatFeature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet &= ~mask;",
                "-            newMask |= mask;",
                "+            newSet &= ~f.getMask();",
                "         }",
                "-        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :",
                "-            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,",
                "-                    _parserFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatParserFeatures == newSet) ? this",
                "+                : new DeserializationConfig(this,  _mapperFeatures,",
                "+                        _deserFeatures, _parserFeatures, newSet);",
                "     }    ",
                "@@ -547,3 +514,3 @@ public final class DeserializationConfig",
                "     public int getFormatReadFeatures(int defaults) {",
                "-        return (defaults & ~_formatReadFeaturesToChange) | _formatReadFeatures;",
                "+        return _formatParserFeatures;",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index a6d25144f..aec64a875 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -124,2 +124,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * States of {@link com.fasterxml.jackson.core.JsonParser.Feature}s to enable/disable.",
                "+     */",
                "+    protected int _parserFeatures;",
                "+",
                "     /**",
                "@@ -130,5 +135,10 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**",
                "-     * States of {@link com.fasterxml.jackson.core.JsonParser.Feature}s to enable/disable.",
                "+     * Optional per-format parser feature flags.",
                "      */",
                "-    protected int _parserFeatures;",
                "+    protected int _formatParserFeatures;",
                "+",
                "+    /**",
                "+     * Optional per-format generator feature flags.",
                "+     */",
                "+    protected int _formatGeneratorFeatures;",
                "@@ -148,2 +158,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+        // NOTE: format parser/generator features MUST be set by sub-class!",
                "+        ",
                "         _mapperFeatures = DEFAULT_MAPPER_FEATURES;",
                "@@ -172,5 +184,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-        _parserFeatures = base._parserFeatures;",
                "-        _generatorFeatures = base._deserFeatures;",
                "-",
                "         _mapperFeatures = base._mapperFeatures;",
                "@@ -179,2 +188,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+        _parserFeatures = base._parserFeatures;",
                "+        _generatorFeatures = base._deserFeatures;",
                "+        _formatParserFeatures = base._formatParserFeatures;",
                "+        _formatGeneratorFeatures = base._formatGeneratorFeatures;",
                "+",
                "         _classIntrospector = base._classIntrospector;",
                "@@ -205,3 +219,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         return new SerializationConfig(this,",
                "-                _mapperFeatures, _serFeatures, _generatorFeatures,",
                "+                _mapperFeatures, _serFeatures, _generatorFeatures, _formatGeneratorFeatures,",
                "                 mixins, rootNames, configOverrides);",
                "@@ -213,3 +227,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         return new DeserializationConfig(this,",
                "-                _mapperFeatures, _deserFeatures, _parserFeatures,",
                "+                _mapperFeatures, _deserFeatures, _parserFeatures, _formatParserFeatures,",
                "                 mixins, rootNames, configOverrides);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index 050e37338..67985ca43 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -70,7 +70,2 @@ public final class SerializationConfig",
                "-    /**",
                "-     * Bitflag of {@link com.fasterxml.jackson.core.FormatFeature}s to enable/disable",
                "-     */",
                "-    protected final int _formatWriteFeaturesToChange;",
                "-",
                "     /*",
                "@@ -94,3 +89,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -101,3 +95,3 @@ public final class SerializationConfig",
                "     public SerializationConfig(MapperBuilder<?,?> b,",
                "-            int mapperFeatures, int serFeatures, int genFeatures,",
                "+            int mapperFeatures, int serFeatures, int genFeatures, int formatWriteFeatures,",
                "             SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "@@ -111,4 +105,3 @@ public final class SerializationConfig",
                "         _generatorFeatures = genFeatures;",
                "-        _formatWriteFeatures = 0;",
                "-        _formatWriteFeaturesToChange = 0;",
                "+        _formatWriteFeatures = formatWriteFeatures;",
                "     }",
                "@@ -130,8 +123,6 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "-    private SerializationConfig(SerializationConfig src,",
                "-            int mapperFeatures, int serFeatures, int generatorFeatures,",
                "-            int formatFeatures, int formatFeaturesMask)",
                "+    private SerializationConfig(SerializationConfig src, int mapperFeatures,",
                "+            int serFeatures, int generatorFeatures, int formatWriteFeatures)",
                "     {",
                "@@ -142,4 +133,3 @@ public final class SerializationConfig",
                "         _generatorFeatures = generatorFeatures;",
                "-        _formatWriteFeatures = formatFeatures;",
                "-        _formatWriteFeaturesToChange = formatFeaturesMask;",
                "+        _formatWriteFeatures = formatWriteFeatures;",
                "     }",
                "@@ -154,3 +144,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -165,3 +154,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -176,3 +164,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -187,3 +174,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -198,3 +184,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -209,3 +194,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -220,3 +204,2 @@ public final class SerializationConfig",
                "         _formatWriteFeatures = src._formatWriteFeatures;",
                "-        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;",
                "     }",
                "@@ -237,4 +220,3 @@ public final class SerializationConfig",
                "         return new SerializationConfig(this, mapperFeatures, _serFeatures,",
                "-                        _generatorFeatures,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                        _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -303,5 +285,4 @@ public final class SerializationConfig",
                "         return (newSerFeatures == _serFeatures) ? this",
                "-                : new SerializationConfig(this,",
                "-                        _mapperFeatures, newSerFeatures, _generatorFeatures,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                : new SerializationConfig(this, _mapperFeatures,",
                "+                        newSerFeatures, _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -319,5 +300,4 @@ public final class SerializationConfig",
                "         return (newSerFeatures == _serFeatures) ? this",
                "-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                : new SerializationConfig(this, _mapperFeatures,",
                "+                        newSerFeatures, _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -335,5 +315,4 @@ public final class SerializationConfig",
                "         return (newSerFeatures == _serFeatures) ? this",
                "-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                : new SerializationConfig(this, _mapperFeatures,",
                "+                        newSerFeatures, _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -348,5 +327,4 @@ public final class SerializationConfig",
                "         return (newSerFeatures == _serFeatures) ? this",
                "-                : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures,",
                "-                        _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                : new SerializationConfig(this, _mapperFeatures,",
                "+                        newSerFeatures, _generatorFeatures,  _formatWriteFeatures);",
                "     }",
                "@@ -365,3 +343,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                        _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -380,3 +358,3 @@ public final class SerializationConfig",
                "                 : new SerializationConfig(this, _mapperFeatures, newSerFeatures,",
                "-                        _generatorFeatures, _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                        _generatorFeatures, _formatWriteFeatures);",
                "     }",
                "@@ -398,3 +376,3 @@ public final class SerializationConfig",
                "             new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "-                    _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                    _formatWriteFeatures);",
                "     }",
                "@@ -413,3 +391,3 @@ public final class SerializationConfig",
                "             new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "-                    _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                    _formatWriteFeatures);",
                "     }",
                "@@ -425,3 +403,3 @@ public final class SerializationConfig",
                "             new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "-                    _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                    _formatWriteFeatures);",
                "     }",
                "@@ -440,3 +418,3 @@ public final class SerializationConfig",
                "             new SerializationConfig(this,  _mapperFeatures, _serFeatures, newSet,",
                "-                    _formatWriteFeatures, _formatWriteFeaturesToChange);",
                "+                    _formatWriteFeatures);",
                "     }",
                "@@ -456,6 +434,5 @@ public final class SerializationConfig",
                "         int newSet = _formatWriteFeatures | feature.getMask();",
                "-        int newMask = _formatWriteFeaturesToChange | feature.getMask();",
                "-        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatWriteFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures,",
                "+                    _serFeatures, _generatorFeatures, newSet);",
                "     }",
                "@@ -469,11 +446,8 @@ public final class SerializationConfig",
                "         int newSet = _formatWriteFeatures;",
                "-        int newMask = _formatWriteFeaturesToChange;",
                "         for (FormatFeature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet |= mask;",
                "-            newMask |= mask;",
                "+            newSet |= f.getMask();",
                "         }",
                "-        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatWriteFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures,",
                "+                    _serFeatures, _generatorFeatures, newSet);",
                "     }",
                "@@ -487,6 +461,5 @@ public final class SerializationConfig",
                "         int newSet = _formatWriteFeatures & ~feature.getMask();",
                "-        int newMask = _formatWriteFeaturesToChange | feature.getMask();",
                "-        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatWriteFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures,",
                "+                    _serFeatures, _generatorFeatures, newSet);",
                "     }",
                "@@ -500,11 +473,8 @@ public final class SerializationConfig",
                "         int newSet = _formatWriteFeatures;",
                "-        int newMask = _formatWriteFeaturesToChange;",
                "         for (FormatFeature f : features) {",
                "-            int mask = f.getMask();",
                "-            newSet &= ~mask;",
                "-            newMask |= mask;",
                "+            newSet &= ~f.getMask();",
                "         }",
                "-        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :",
                "-            new SerializationConfig(this,  _mapperFeatures, _serFeatures, _generatorFeatures,",
                "-                    newSet, newMask);",
                "+        return (_formatWriteFeatures == newSet) ? this :",
                "+            new SerializationConfig(this,  _mapperFeatures,",
                "+                    _serFeatures, _generatorFeatures, newSet);",
                "     }",
                "@@ -556,3 +526,3 @@ public final class SerializationConfig",
                "     public int getFormatWriteFeatures(int defaults) {",
                "-        return (defaults & ~_formatWriteFeaturesToChange) | _formatWriteFeatures;",
                "+        return _formatWriteFeatures;",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "index f7f93c9bd..0faa0b36c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "@@ -70,5 +70,5 @@ public abstract class DefaultDeserializationContext",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Abstract methods impls, Object Id",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -182,5 +182,5 @@ public abstract class DefaultDeserializationContext",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Abstract methods impls, other factory methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -200,5 +200,4 @@ public abstract class DefaultDeserializationContext",
                "         } else {",
                "-            /* Alas, there's no way to force return type of \"either class",
                "-             * X or Y\" -- need to throw an exception after the fact",
                "-             */",
                "+            // Alas, there's no way to force return type of \"either class",
                "+            // X or Y\" -- need to throw an exception after the fact",
                "             if (!(deserDef instanceof Class)) {",
                "@@ -266,5 +265,5 @@ public abstract class DefaultDeserializationContext",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Extended API",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -285,5 +284,5 @@ public abstract class DefaultDeserializationContext",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* And then the concrete implementation class",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a1c424ae32f5f34797baf8df39f930b6a3e23d93",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518748760,
            "hunks": 4,
            "message": "warnings removal",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index 6e930d972..f1d0584c4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -50,4 +50,3 @@ public abstract class Module",
                "      * instances are considered to be of same type, for purpose of preventing",
                "-     * multiple registrations of \"same\" module",
                "-     * (see {@link com.fasterxml.jackson.databind.MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS})",
                "+     * multiple registrations of \"same\" module,",
                "      *<p>",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index d02ff950c..aaae9088c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -292,16 +292,2 @@ public class ObjectMapper",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Module-related",
                "-    /**********************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Set of module types (as per {@link Module#getRegistrationId()} that have been",
                "-     * registered; kept track of iff {@link MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS}",
                "-     * is enabled, so that duplicate registration calls can be ignored",
                "-     * (to avoid adding same handlers multiple times, mostly).",
                "-     */",
                "-    protected Set<Object> _registeredModuleTypes;",
                "-",
                "     /*",
                "@@ -473,19 +459,5 @@ public class ObjectMapper",
                "     {",
                "-        Object typeId = module.getRegistrationId();",
                "-        if (typeId != null) {",
                "-            if (_registeredModuleTypes == null) {",
                "-                // plus let's keep them in order too, easier to debug or expose",
                "-                // in registration order if that matter",
                "-                _registeredModuleTypes = new LinkedHashSet<Object>();",
                "-            }",
                "-            // try adding; if already had it, should skip",
                "-            if (!_registeredModuleTypes.add(typeId)) {",
                "-                return this;",
                "-            }",
                "-        }",
                "-        ",
                "-        /* Let's ensure we have access to name and version information, ",
                "-         * even if we do not have immediate use for either. This way we know",
                "-         * that they will be available from beginning",
                "-         */",
                "+        // Let's ensure we have access to name and version information, ",
                "+        // even if we do not have immediate use for either. This way we know",
                "+        // that they will be available from beginning",
                "         String name = module.getModuleName();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index e32cb8c07..03b9cee87 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -571,4 +571,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      * replacing an earlier instance of the module (as specified by its",
                "-     * {@link Module#getRegistrationId()}), if",
                "-     * {@link MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS} is enabled.",
                "+     * {@link Module#getRegistrationId()}).",
                "+     * Actual registration occurs in addition order (considering last add to count,",
                "+     * in case of re-registration for same id) when {@link #build()} is called.",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/Module.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b21c68bc5b87c31789c6aa40fa4c40106809149d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517809824,
            "hunks": 1,
            "message": "Add initialization of format parser/generator default features",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index aec64a875..f638b9538 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -157,5 +157,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _generatorFeatures = streamFactory.getGeneratorFeatures();",
                "+        _formatParserFeatures = streamFactory.getFormatParserFeatures();",
                "+        _formatGeneratorFeatures = streamFactory.getFormatGeneratorFeatures();",
                "-        // NOTE: format parser/generator features MUST be set by sub-class!",
                "-        ",
                "         _mapperFeatures = DEFAULT_MAPPER_FEATURES;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d5dc9f5dc31e2ed3c165ed4b5953b8ff9ca088fd",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517613923,
            "hunks": 11,
            "message": "yet more refactoring",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 7cd162e38..21fe935d6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -47,8 +47,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Factories for framework itself, general",
                "-    /**********************************************************",
                "-     */",
                "-",
                "     /**",
                "@@ -58,3 +52,8 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    ",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Handlers, introspection",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     /**",
                "@@ -73,3 +72,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    ",
                "+",
                "     protected SerializerFactory _serializerFactory;",
                "@@ -92,3 +91,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     protected DeserializerFactory _deserializerFactory;",
                "-    ",
                "+",
                "     /**",
                "@@ -463,3 +462,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Changing factories, general",
                "+    /* Changing factories/handlers, general",
                "     /**********************************************************",
                "@@ -499,2 +498,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B propertyNamingStrategy(PropertyNamingStrategy s) {",
                "+        _baseSettings = _baseSettings.with(s);",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 83ca00696..9d052ded2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1091,3 +1091,3 @@ public class ObjectMapper",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -1095,2 +1095,3 @@ public class ObjectMapper",
                "      */",
                "+    @Deprecated",
                "     public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) {",
                "@@ -1101,20 +1102,2 @@ public class ObjectMapper",
                "-    public PropertyNamingStrategy getPropertyNamingStrategy() {",
                "-        // arbitrary choice but let's do:",
                "-        return _serializationConfig.getPropertyNamingStrategy();",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for specifying {@link PrettyPrinter} to use when \"default pretty-printing\"",
                "-     * is enabled (by enabling {@link SerializationFeature#INDENT_OUTPUT})",
                "-     * ",
                "-     * @param pp Pretty printer to use by default.",
                "-     * ",
                "-     * @return This mapper, useful for call-chaining",
                "-     */",
                "-    public ObjectMapper setDefaultPrettyPrinter(PrettyPrinter pp) {",
                "-        _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(pp);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index d9b725b7b..050e37338 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -51,3 +51,3 @@ public final class SerializationConfig",
                "     /**********************************************************",
                "-    /* Serialization features ",
                "+    /* Feature flags",
                "     /**********************************************************",
                "@@ -60,8 +60,2 @@ public final class SerializationConfig",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Generator features: generic, format-specific",
                "-    /**********************************************************",
                "-     */",
                "-",
                "     /**"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fd95426b7264d9390344f00eb371144aec8dbe80",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518727736,
            "hunks": 5,
            "message": "Remove `MapperFeature` for checking multiple module registrations (3.0 will always check, just based on id).",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "index 4d89489ca..ee268f15c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "@@ -321,20 +321,2 @@ public enum MapperFeature implements ConfigFeature",
                "-    /**",
                "-     * Feature that determines whether multiple registrations of same module",
                "-     * are prevented or not: if enabled, later registrations of \"same\" module",
                "-     * will replace earlier ones (or, be ignored, depending on exact call);",
                "-     * If disabled, no checking is done and all registrations are processed in",
                "-     * order they are made.",
                "-     *<p>",
                "-     * Definition of \"same module\" is based on using {@link Module#getRegistrationId()};",
                "-     * modules with same <code>registration id</code> are considered same for",
                "-     * purposes of duplicate registration.",
                "-     *<p>",
                "-     * Feature is enabled by default so that only one instance of \"same\" module is allowed",
                "-     * and latest addition sticks (in case they are configured differently).",
                "-     *",
                "-     * @since 3.0",
                "-     */",
                "-    PREVENT_MULTIPLE_MODULE_REGISTRATIONS(true),",
                "-",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 997e0d112..179f2696a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -469,14 +469,12 @@ public class ObjectMapper",
                "     {",
                "-        if (isEnabled(MapperFeature.PREVENT_MULTIPLE_MODULE_REGISTRATIONS)) {",
                "-            Object typeId = module.getRegistrationId();",
                "-            if (typeId != null) {",
                "-                if (_registeredModuleTypes == null) {",
                "-                    // plus let's keep them in order too, easier to debug or expose",
                "-                    // in registration order if that matter",
                "-                    _registeredModuleTypes = new LinkedHashSet<Object>();",
                "-                }",
                "-                // try adding; if already had it, should skip",
                "-                if (!_registeredModuleTypes.add(typeId)) {",
                "-                    return this;",
                "-                }",
                "+        Object typeId = module.getRegistrationId();",
                "+        if (typeId != null) {",
                "+            if (_registeredModuleTypes == null) {",
                "+                // plus let's keep them in order too, easier to debug or expose",
                "+                // in registration order if that matter",
                "+                _registeredModuleTypes = new LinkedHashSet<Object>();",
                "+            }",
                "+            // try adding; if already had it, should skip",
                "+            if (!_registeredModuleTypes.add(typeId)) {",
                "+                return this;",
                "             }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 607d6140a..0da96c10e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -589,8 +589,10 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         }",
                "-        final boolean preventDups = MapperFeature.PREVENT_MULTIPLE_MODULE_REGISTRATIONS.enabledIn(_mapperFeatures);",
                "         // If dups are ok we still need a key, but just need to ensure it is unique so:",
                "-        final Object moduleId = preventDups ? module.getRegistrationId() : new Object();",
                "+        final Object moduleId = module.getRegistrationId();",
                "         if (_modules == null) {",
                "             _modules = new LinkedHashMap<>();",
                "-        } else if (preventDups) {",
                "+        } else {",
                "+            // Important: since order matters, we won't try to simply replace existing one.",
                "+            // Could do in different order (put, and only re-order if there was old value),",
                "+            // but simple does it for now.",
                "             _modules.remove(moduleId);"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3099509bf01e3e37fc7e580a8c55732ab6d6e6bb",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518828286,
            "hunks": 50,
            "message": "yet more mapper/builder refactorign",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index e56d31131..380faa8b5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -77,2 +77,3 @@ public final class DeserializationConfig",
                "      */",
                "+    /*",
                "     protected DeserializationConfig(DeserializationConfig src,",
                "@@ -87,2 +88,3 @@ public final class DeserializationConfig",
                "     }",
                "+*/",
                "@@ -100,3 +102,3 @@ public final class DeserializationConfig",
                "         _deserFeatures = deserFeatures;",
                "-        _problemHandlers = null;",
                "+        _problemHandlers = b.deserializationProblemHandlers();",
                "         _parserFeatures = parserFeatures;",
                "@@ -466,5 +468,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle, deserialization-specific factory methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -478,7 +480,5 @@ public final class DeserializationConfig",
                "         // Sanity check: let's prevent adding same handler multiple times",
                "-        if (LinkedNode.contains(_problemHandlers, h)) {",
                "-            return this;",
                "-        }",
                "-        return new DeserializationConfig(this,",
                "-                new LinkedNode<DeserializationProblemHandler>(h, _problemHandlers));",
                "+        return LinkedNode.contains(_problemHandlers, h) ? this",
                "+                : new DeserializationConfig(this,",
                "+                        new LinkedNode<DeserializationProblemHandler>(h, _problemHandlers));",
                "     }",
                "@@ -490,7 +490,5 @@ public final class DeserializationConfig",
                "     public DeserializationConfig withNoProblemHandlers() {",
                "-        if (_problemHandlers == null) {",
                "-            return this;",
                "-        }",
                "-        return new DeserializationConfig(this,",
                "-                (LinkedNode<DeserializationProblemHandler>) null);",
                "+        return (_problemHandlers == null) ? this",
                "+                : new DeserializationConfig(this,",
                "+                        (LinkedNode<DeserializationProblemHandler>) null);",
                "     }",
                "@@ -498,5 +496,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Support for ObjectReadContext",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -518,5 +516,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* MapperConfig implementation/overrides: other",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -575,5 +573,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Other configuration",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -589,5 +587,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Introspection methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -614,5 +612,2 @@ public final class DeserializationConfig",
                "-    /**",
                "-     * @since 2.0",
                "-     */",
                "     @SuppressWarnings(\"unchecked\")",
                "@@ -623,5 +618,5 @@ public final class DeserializationConfig",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Support for polymorphic type handling",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -632,4 +627,2 @@ public final class DeserializationConfig",
                "      * or various \"optional\" types.",
                "-     * ",
                "-     * @since 2.4",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index e006ff9da..d2112d0a3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -810,8 +810,3 @@ public class ObjectMapper",
                "     // For testing only:",
                "-    public int mixInCount() {",
                "-        return _mixIns.localSize();",
                "-    }",
                "-",
                "-    // For testing only:",
                "-    public MixInResolver mixInResolver() {",
                "+    public MixInHandler mixInHandler() {",
                "         return _mixIns;",
                "@@ -825,11 +820,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for accessing currently configured visibility checker;",
                "-     * object used for determining whether given property element",
                "-     * (method, field, constructor) can be auto-detected or not.",
                "-     */",
                "-    public VisibilityChecker getVisibilityChecker() {",
                "-        return _configOverrides.getDefaultVisibility();",
                "-    }",
                "-",
                "     /**",
                "@@ -1082,9 +1068,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that can be used to override {@link TypeFactory} instance",
                "-     * used by this mapper.",
                "-     *<p>",
                "-     * Note: will also set {@link TypeFactory} that deserialization and",
                "-     * serialization config objects use.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper setTypeFactory(TypeFactory f)",
                "@@ -1122,3 +1102,3 @@ public class ObjectMapper",
                "      */",
                "-    public JsonNodeFactory getNodeFactory() {",
                "+    public JsonNodeFactory nodeFactory() {",
                "         return _deserializationConfig.getNodeFactory();",
                "@@ -1130,2 +1110,3 @@ public class ObjectMapper",
                "      */",
                "+    @Deprecated",
                "     public ObjectMapper addHandler(DeserializationProblemHandler h) {",
                "@@ -1631,3 +1612,3 @@ public class ObjectMapper",
                "         if (n == null) {",
                "-            n = getNodeFactory().nullNode();",
                "+            n = nodeFactory().nullNode();",
                "         }",
                "@@ -2278,4 +2259,3 @@ public class ObjectMapper",
                "     @SuppressWarnings(\"unchecked\")",
                "-    public <T> T readValue(byte[] src, int offset, int len, ",
                "-                               Class<T> valueType)",
                "+    public <T> T readValue(byte[] src, int offset, int len, Class<T> valueType)",
                "         throws IOException, JsonParseException, JsonMappingException",
                "@@ -2297,4 +2277,3 @@ public class ObjectMapper",
                "     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
                "-    public <T> T readValue(byte[] src, int offset, int len,",
                "-                           TypeReference valueTypeRef)",
                "+    public <T> T readValue(byte[] src, int offset, int len, TypeReference valueTypeRef)",
                "         throws IOException, JsonParseException, JsonMappingException",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index b5160edc5..a591130f3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -24,2 +24,3 @@ import com.fasterxml.jackson.databind.ser.*;",
                " import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+import com.fasterxml.jackson.databind.util.LinkedNode;",
                " import com.fasterxml.jackson.databind.util.RootNameLookup;",
                "@@ -176,2 +177,14 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Misc other configuratoon",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Optional handlers that application may register to try to work-around",
                "+     * various problem situations during deserialization",
                "+     */",
                "+    protected LinkedNode<DeserializationProblemHandler> _problemHandlers;",
                "+    ",
                "     /*",
                "@@ -212,2 +225,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _injectableValues = null;",
                "+",
                "+        _problemHandlers = null;",
                "     }",
                "@@ -240,2 +255,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _injectableValues = base._injectableValues;",
                "+",
                "+        _problemHandlers = base._problemHandlers;",
                "     }",
                "@@ -337,3 +354,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Accessors, serialization",
                "+    /* Accessors, serialization factories, related",
                "     /**********************************************************************",
                "@@ -377,3 +394,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Accessors, deserialization",
                "+    /* Accessors, deserialization factories, related",
                "     /**********************************************************************",
                "@@ -405,2 +422,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public LinkedNode<DeserializationProblemHandler> deserializationProblemHandlers() {",
                "+        return _problemHandlers;",
                "+    }",
                "+    ",
                "     /*",
                "@@ -822,3 +843,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Changing factories, deserialization",
                "+    /* Changing factories, related, deserialization",
                "     /**********************************************************************",
                "@@ -841,2 +862,23 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method used for adding a {@link DeserializationProblemHandler} for this",
                "+     * builder, at the head of the list (meaning it has priority over handler",
                "+     * registered earlier).",
                "+     */",
                "+    public B addHandler(DeserializationProblemHandler h) {",
                "+        if (!LinkedNode.contains(_problemHandlers, h)) {",
                "+            _problemHandlers = new LinkedNode<>(h, _problemHandlers);",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method that may be used to remove all {@link DeserializationProblemHandler}s added",
                "+     * to this builder (if any).",
                "+     */",
                "+    public B clearProblemHandlers() {",
                "+        _problemHandlers = null;",
                "+        return _this();",
                "+    }",
                "+    ",
                "     /*",
                "@@ -898,3 +940,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Mix-ins",
                "+    /* Changing Mix-ins",
                "     /**********************************************************************",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
                "index 501cff8f4..5d053f7ea 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
                "@@ -37,4 +37,2 @@ public abstract class DeserializationProblemHandler",
                "      * they could not handle problem and produce replacement value.",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -97,4 +95,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -131,4 +127,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>)",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -165,4 +159,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>)",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -193,4 +185,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>)",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -227,4 +217,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -262,4 +250,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -295,4 +281,2 @@ public abstract class DeserializationProblemHandler",
                "      *    <code>null</code>",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -333,4 +317,2 @@ public abstract class DeserializationProblemHandler",
                "      *     type with the id (which caller may choose to do... or not)",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -369,4 +351,2 @@ public abstract class DeserializationProblemHandler",
                "      *     type with the id (which caller may choose to do... or not)",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java b/src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java",
                "index fa7cdae8b..11ff05bb9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java",
                "@@ -4,7 +4,8 @@ package com.fasterxml.jackson.databind.util;",
                "  * Node of a forward-only linked list.",
                "- * ",
                "- * @author tatu",
                "  */",
                " public final class LinkedNode<T>",
                "+    implements java.io.Serializable",
                " {",
                "+    private static final long serialVersionUID = 3L;",
                "+",
                "     private final T value;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
                "src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, readValue",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1e6d97a29dc8db1936c8f22093c258c524212173",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518824595,
            "hunks": 79,
            "message": "Refactor mix-in annotation configuration",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index ffb61f883..e56d31131 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -78,3 +78,3 @@ public final class DeserializationConfig",
                "     protected DeserializationConfig(DeserializationConfig src,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            MixInHandler mixins, RootNameLookup rootNames,",
                "             ConfigOverrides configOverrides)",
                "@@ -93,3 +93,3 @@ public final class DeserializationConfig",
                "             int deserFeatures, int parserFeatures, int formatParserFeatures,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            MixInHandler mixins, RootNameLookup rootNames,",
                "             ConfigOverrides configOverrides)",
                "@@ -191,3 +191,3 @@ public final class DeserializationConfig",
                "-    protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins)",
                "+    protected DeserializationConfig(DeserializationConfig src, MixInHandler mixins)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index cf128728e..e006ff9da 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -242,3 +242,3 @@ public class ObjectMapper",
                "      */",
                "-    protected SimpleMixInResolver _mixIns;",
                "+    protected final MixInHandler _mixIns;",
                "@@ -406,3 +406,3 @@ public class ObjectMapper",
                "-        _mixIns = new SimpleMixInResolver(null);",
                "+        _mixIns = builder.mixInHandler();",
                "         _serializationConfig = builder.buildSerializationConfig(_mixIns, rootNames);",
                "@@ -772,3 +772,3 @@ public class ObjectMapper",
                "      * configured: to get a properly configured instance to call, use",
                "-     * {@link #getSerializerProviderInstance()} instead.",
                "+     * {@link #serializerProviderInstance()} instead.",
                "      */",
                "@@ -783,3 +783,3 @@ public class ObjectMapper",
                "      */",
                "-    public SerializerProvider getSerializerProviderInstance() {",
                "+    public SerializerProvider serializerProviderInstance() {",
                "         return _serializerProvider();",
                "@@ -793,24 +793,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method to use for defining mix-in annotations to use for augmenting",
                "-     * annotations that processable (serializable / deserializable)",
                "-     * classes have.",
                "-     * Mixing in is done when introspecting class annotations and properties.",
                "-     * Map passed contains keys that are target classes (ones to augment",
                "-     * with new annotation overrides), and values that are source classes",
                "-     * (have annotations to use for augmentation).",
                "-     * Annotations from source classes (and their supertypes)",
                "-     * will <b>override</b>",
                "-     * annotations that target classes (and their super-types) have.",
                "-     *<p>",
                "-     * Note that this method will CLEAR any previously defined mix-ins",
                "-     * for this mapper.",
                "-     */",
                "-    public ObjectMapper setMixIns(Map<Class<?>, Class<?>> sourceMixins)",
                "-    {",
                "-        // NOTE: does NOT change possible externally configured resolver, just local defs",
                "-        _mixIns.setLocalDefinitions(sourceMixins);",
                "-        return this;",
                "-    }",
                "-",
                "     /**",
                "@@ -831,23 +809,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that can be called to specify given resolver for locating",
                "-     * mix-in classes to use, overriding directly added mappings.",
                "-     * Note that direct mappings are not cleared, but they are only applied",
                "-     * if resolver does not provide mix-in matches.",
                "-     */",
                "-    public ObjectMapper setMixInResolver(ClassIntrospector.MixInResolver resolver)",
                "-    {",
                "-        SimpleMixInResolver r = _mixIns.withOverrides(resolver);",
                "-        if (r != _mixIns) {",
                "-            _mixIns = r;",
                "-            _deserializationConfig = new DeserializationConfig(_deserializationConfig, r);",
                "-            _serializationConfig = new SerializationConfig(_serializationConfig, r);",
                "-        }",
                "-        return this;",
                "-    }",
                "-    ",
                "-    public Class<?> findMixInClassFor(Class<?> cls) {",
                "-        return _mixIns.findMixInClassFor(cls);",
                "-    }",
                "-",
                "     // For testing only:",
                "@@ -857,2 +814,7 @@ public class ObjectMapper",
                "+    // For testing only:",
                "+    public MixInResolver mixInResolver() {",
                "+        return _mixIns;",
                "+    }",
                "+    ",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index 67985ca43..ea0abcd25 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -8,3 +8,3 @@ import com.fasterxml.jackson.core.util.Instantiatable;",
                " import com.fasterxml.jackson.databind.cfg.*;",
                "-import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.MixInHandler;",
                " import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "@@ -80,3 +80,3 @@ public final class SerializationConfig",
                "     protected SerializationConfig(SerializationConfig src,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            MixInHandler mixins, RootNameLookup rootNames,",
                "             ConfigOverrides configOverrides)",
                "@@ -96,3 +96,3 @@ public final class SerializationConfig",
                "             int mapperFeatures, int serFeatures, int genFeatures, int formatWriteFeatures,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+            MixInHandler mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "     {",
                "@@ -186,3 +186,3 @@ public final class SerializationConfig",
                "-    protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins)",
                "+    protected SerializationConfig(SerializationConfig src, MixInHandler mixins)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 031bd96bc..b5160edc5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -16,3 +16,4 @@ import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;",
                " import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "-import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.MixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.MixInHandler;",
                " import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
                "@@ -44,5 +45,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Basic settings",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -56,2 +57,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Various configuration setting overrides, both global base settings",
                "+     * and per-class overrides.",
                "+     */",
                "     protected final ConfigOverrides _configOverrides;",
                "@@ -59,5 +64,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Modules",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -70,5 +75,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Handlers, introspection",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -84,6 +89,11 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Handler responsible for resolving mix-in classes registered, if any.",
                "+     */",
                "+    protected MixInHandler _mixInHandler;",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Factories for serialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -102,5 +112,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Factories for deserialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -120,5 +130,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Feature flags: ser, deser",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -141,5 +151,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Feature flags: generation, parsing",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -167,5 +177,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -193,2 +203,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _subtypeResolver = null;",
                "+        _mixInHandler = null;",
                "@@ -220,2 +231,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _subtypeResolver = base._subtypeResolver;",
                "+        _mixInHandler = base._mixInHandler;",
                "@@ -231,5 +243,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Build methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -241,3 +253,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public SerializationConfig buildSerializationConfig(SimpleMixInResolver mixins,",
                "+    public SerializationConfig buildSerializationConfig(MixInHandler mixins,",
                "             RootNameLookup rootNames)",
                "@@ -249,3 +261,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public DeserializationConfig buildDeserializationConfig(SimpleMixInResolver mixins,",
                "+    public DeserializationConfig buildDeserializationConfig(MixInHandler mixins,",
                "             RootNameLookup rootNames)",
                "@@ -258,5 +270,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Accessors, general",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -308,6 +320,21 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public MixInHandler mixInHandler() {",
                "+        if (_mixInHandler == null) {",
                "+            _mixInHandler = _defaultMixInHandler();",
                "+        }",
                "+        return _mixInHandler;",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link StdMixInResolver} prototype",
                "+     * to use.",
                "+     */",
                "+    protected MixInHandler _defaultMixInHandler() {",
                "+        return new MixInHandler(null);",
                "+    }",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Accessors, serialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -349,5 +376,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Accessors, deserialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -379,5 +406,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing features: mapper, ser, deser",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -457,5 +484,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing features: parser, generator",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -509,5 +536,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing settings, config overrides",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -739,6 +766,26 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method that may be used to completely change mix-in handling by providing",
                "+     * alternate {@link MixInHandler} implementation.",
                "+     * Most of the time this is NOT the method you want to call, and rather are looking",
                "+     * for {@link #mixInOverrides}.",
                "+     */",
                "+    public B mixInHandler(MixInHandler h) {",
                "+        _mixInHandler = h;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method that allows defining \"override\" mix-in resolver: something that is checked first,",
                "+     * before simple mix-in definitions.",
                "+     */",
                "+    public B mixInOverrides(MixInResolver r) {",
                "+        _mixInHandler = mixInHandler().withOverrides(r);",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing factories, serialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -774,5 +821,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing factories, deserialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -795,5 +842,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing settings, date/time",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -831,5 +878,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Changing settings, formatting",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -850,5 +897,44 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "+    /* Mix-ins",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method to use for defining mix-in annotations to use for augmenting",
                "+     * annotations that processable (serializable / deserializable)",
                "+     * classes have.",
                "+     * This convenience method is equivalent to iterating over all entries",
                "+     * and calling {@link #addMixIn} with `key` and `value` of each entry.",
                "+     */",
                "+    public B addMixIns(Map<Class<?>, Class<?>> sourceMixins)",
                "+    {",
                "+        mixInHandler().addLocalDefinitions(sourceMixins);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method to use for defining mix-in annotations to use for augmenting",
                "+     * annotations that classes have, for purpose of configuration serialization",
                "+     * and/or deserialization processing.",
                "+     * Mixing in is done when introspecting class annotations and properties.",
                "+     * Annotations from \"mixin\" class (and its supertypes)",
                "+     * will <b>override</b>",
                "+     * annotations that target classes (and their super-types) have.",
                "+     *<p>",
                "+     * Note that standard mixin handler implementations will only allow a single mix-in",
                "+     * source class per target, so if there was a previous mix-in defined target it will",
                "+     * be cleared. This also means that you can remove mix-in definition by specifying",
                "+     * {@code mixinSource} of {@code null}",
                "+     */",
                "+    public B addMixIn(Class<?> target, Class<?> mixinSource)",
                "+    {",
                "+        mixInHandler().addLocalDefinition(target, mixinSource);",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "     /* Other helper methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "index adfebaf0a..4b8689cbe 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "@@ -15,2 +15,3 @@ import com.fasterxml.jackson.databind.introspect.AnnotatedClass;",
                " import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.MixInResolver;",
                " import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;",
                "@@ -37,3 +38,3 @@ import com.fasterxml.jackson.databind.util.ClassUtil;",
                " public abstract class MapperConfig<T extends MapperConfig<T>>",
                "-    implements ClassIntrospector.MixInResolver,",
                "+    implements MixInResolver,",
                "         java.io.Serializable",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "index 3f8824119..4aa44e131 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "@@ -10,5 +10,5 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.MixInResolver;",
                " import com.fasterxml.jackson.databind.introspect.AnnotatedClass;",
                "-import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "+import com.fasterxml.jackson.databind.introspect.MixInHandler;",
                " import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
                "@@ -42,3 +42,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "      */",
                "-    protected final SimpleMixInResolver _mixIns;",
                "+    protected final MixInHandler _mixIns;",
                "@@ -100,3 +100,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "             ClassIntrospector classIntrospector,",
                "-            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            SubtypeResolver str, MixInHandler mixins, RootNameLookup rootNames,",
                "             ConfigOverrides configOverrides)",
                "@@ -116,3 +116,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "     protected MapperConfigBase(MapperConfigBase<CFG,T> src,",
                "-            SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "+            MixInHandler mixins, RootNameLookup rootNames,",
                "             ConfigOverrides configOverrides)",
                "@@ -210,3 +210,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "-    protected MapperConfigBase(MapperConfigBase<CFG,T> src, SimpleMixInResolver mixins)",
                "+    protected MapperConfigBase(MapperConfigBase<CFG,T> src, MixInHandler mixins)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
                "index bc5fd63d5..451ec46ee 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.databind.AnnotationIntrospector;",
                " import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;",
                " import com.fasterxml.jackson.databind.type.TypeBindings;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
                "index fb4daf7dc..3b7c6bd4b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
                "@@ -11,3 +11,2 @@ import com.fasterxml.jackson.databind.JavaType;",
                " import com.fasterxml.jackson.databind.cfg.MapperConfig;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;",
                " import com.fasterxml.jackson.databind.type.TypeBindings;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
                "index 0dba88bba..f226c79f4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.databind.AnnotationIntrospector;",
                " import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;",
                " import com.fasterxml.jackson.databind.type.TypeFactory;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
                "index 1e003c824..8b2562406 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
                "@@ -9,3 +9,2 @@ import com.fasterxml.jackson.databind.AnnotationIntrospector;",
                " import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;",
                " import com.fasterxml.jackson.databind.type.TypeFactory;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "index f283a9caa..c1ed368f5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "@@ -17,30 +17,2 @@ public abstract class ClassIntrospector",
                " {",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Helper interfaces",
                "-    /**********************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Interface used for decoupling details of how mix-in annotation",
                "-     * definitions are accessed (via this interface), and how",
                "-     * they are stored (defined by classes that implement the interface)",
                "-     */",
                "-    public interface MixInResolver",
                "-    {",
                "-        /**",
                "-         * Method that will check if there are \"mix-in\" classes (with mix-in",
                "-         * annotations) for given class",
                "-         */",
                "-        public Class<?> findMixInClassFor(Class<?> cls);",
                "-",
                "-        /**",
                "-         * Method called to create a new, non-shared copy, to be used by different",
                "-         * <code>ObjectMapper</code> instance, and one that should not be connected",
                "-         * to this instance, if resolver has mutable state.",
                "-         * If resolver is immutable may simply return `this`.",
                "-         */",
                "-        public MixInResolver copy();",
                "-    }",
                "-",
                "     protected ClassIntrospector() { }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/MixInHandler.java b/src/main/java/com/fasterxml/jackson/databind/introspect/MixInHandler.java",
                "new file mode 100644",
                "index 000000000..b5c4522e0",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/MixInHandler.java",
                "@@ -0,0 +1,131 @@",
                "+package com.fasterxml.jackson.databind.introspect;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+import com.fasterxml.jackson.databind.type.ClassKey;",
                "+",
                "+/**",
                "+ * Basic {@link MixInResolver} implementation that both allows simple \"local\"",
                "+ * override definitions (with simple Mix-in class over Target class mapping)",
                "+ * and allows optional custom overrides for lookup.",
                "+ *<p>",
                "+ * Implementation is only thread-safe after initialization (that is,",
                "+ * when underlying Map is not modified but only read).",
                "+ */",
                "+public class MixInHandler",
                "+    implements MixInResolver,",
                "+        java.io.Serializable",
                "+{",
                "+    private static final long serialVersionUID = 1L;",
                "+",
                "+    /**",
                "+     * External resolver that gets called before looking at any locally defined",
                "+     * mix-in target classes.",
                "+     */",
                "+    protected final MixInResolver _overrides;",
                "+",
                "+    /**",
                "+     * Simple mix-in targets defined locally.",
                "+     */",
                "+    protected Map<ClassKey,Class<?>> _localMixIns;",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Construction, mutant factories",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    public MixInHandler(MixInResolver overrides) {",
                "+        _overrides = overrides;",
                "+    }",
                "+",
                "+    protected MixInHandler(MixInResolver overrides,",
                "+            Map<ClassKey,Class<?>> mixins) {",
                "+        _overrides = overrides;",
                "+        _localMixIns = mixins;",
                "+    }",
                "+",
                "+    /**",
                "+     * Mutant factory for constructor a new resolver instance with given",
                "+     * mix-in resolver override.",
                "+     */",
                "+    public MixInHandler withOverrides(MixInResolver overrides) {",
                "+        return new MixInHandler(overrides, _localMixIns);",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * Mutant factory method that constructs a new instance that has no locally",
                "+     * defined mix-in/target mappings.",
                "+     */",
                "+    public MixInHandler withoutLocalDefinitions() {",
                "+        return new MixInHandler(_overrides, null);",
                "+    }",
                "+    ",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutators",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    public MixInHandler addLocalDefinitions(Map<Class<?>, Class<?>> sourceMixins) {",
                "+        if (!sourceMixins.isEmpty()) {",
                "+            if (_localMixIns == null) {",
                "+                _localMixIns = new HashMap<>(sourceMixins.size());",
                "+            }",
                "+            for (Map.Entry<Class<?>,Class<?>> en : sourceMixins.entrySet()) {",
                "+                _localMixIns.put(new ClassKey(en.getKey()), en.getValue());",
                "+            }",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    public MixInHandler addLocalDefinition(Class<?> target, Class<?> mixinSource) {",
                "+        if (_localMixIns == null) {",
                "+            _localMixIns = new HashMap<ClassKey,Class<?>>();",
                "+        }",
                "+        _localMixIns.put(new ClassKey(target), mixinSource);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MixInHandler clearLocalDefinitions(Map<Class<?>, Class<?>> sourceMixins) {",
                "+        _localMixIns = null;",
                "+        return this;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* MixInResolver API implementation",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "+    @Override",
                "+    public MixInHandler copy() {",
                "+        MixInResolver overrides = (_overrides == null)",
                "+                ? null : _overrides.copy();",
                "+        Map<ClassKey,Class<?>> mixIns = (_localMixIns == null)",
                "+                ? null : new HashMap<ClassKey,Class<?>>(_localMixIns);",
                "+        return new MixInHandler(overrides, mixIns);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<?> findMixInClassFor(Class<?> cls)",
                "+    {",
                "+        Class<?> mixin = (_overrides == null) ? null : _overrides.findMixInClassFor(cls);",
                "+        if (mixin == null && (_localMixIns != null)) {",
                "+            mixin = _localMixIns.get(new ClassKey(cls));",
                "+        }",
                "+        return mixin;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Other",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    public int localSize() { // for tests",
                "+        return (_localMixIns == null) ? 0 : _localMixIns.size();",
                "+    }",
                "+}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/MixInResolver.java b/src/main/java/com/fasterxml/jackson/databind/introspect/MixInResolver.java",
                "new file mode 100644",
                "index 000000000..24160a2e6",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/MixInResolver.java",
                "@@ -0,0 +1,25 @@",
                "+package com.fasterxml.jackson.databind.introspect;",
                "+",
                "+/**",
                "+ * Interface used for decoupling details of how mix-in annotation",
                "+ * definitions are accessed (via this interface), and how",
                "+ * they are stored (defined by classes that implement the interface)",
                "+ *",
                "+ * @since 3.0 (in 2.x was nested type of {@link ClassIntrospector})",
                "+ */",
                "+public interface MixInResolver",
                "+{",
                "+    /**",
                "+     * Method that will check if there are \"mix-in\" classes (with mix-in",
                "+     * annotations) for given class",
                "+     */",
                "+    public Class<?> findMixInClassFor(Class<?> cls);",
                "+",
                "+    /**",
                "+     * Method called to create a new, non-shared copy, to be used by different",
                "+     * <code>ObjectMapper</code> instance, and one that should not be connected",
                "+     * to this instance, if resolver has mutable state.",
                "+     * If resolver is immutable may simply return `this`.",
                "+     */",
                "+    public MixInResolver copy();",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java b/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "deleted file mode 100644",
                "index 0eb21d5d4..000000000",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "+++ /dev/null",
                "@@ -1,100 +0,0 @@",
                "-package com.fasterxml.jackson.databind.introspect;",
                "-",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-",
                "-import com.fasterxml.jackson.databind.type.ClassKey;",
                "-",
                "-/**",
                "- * Simple implementation of {@link ClassIntrospector.MixInResolver}",
                "- * that just uses a {@link java.util.Map} for containing mapping",
                "- * from target to mix-in classes.",
                "- *<p>",
                "- * Implementation is only thread-safe after initialization (that is,",
                "- * when underlying Map is not modified but only read).",
                "- */",
                "-public class SimpleMixInResolver",
                "-    implements ClassIntrospector.MixInResolver,",
                "-        java.io.Serializable",
                "-{",
                "-    private static final long serialVersionUID = 1L;",
                "-",
                "-    /**",
                "-     * External resolver that gets called before looking at any locally defined",
                "-     * mix-in target classes.",
                "-     */",
                "-    protected final ClassIntrospector.MixInResolver _overrides;",
                "-",
                "-    /**",
                "-     * Simple mix-in targets defined locally.",
                "-     */",
                "-    protected Map<ClassKey,Class<?>> _localMixIns;",
                "-",
                "-    public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides) {",
                "-        _overrides = overrides;",
                "-    }",
                "-",
                "-    protected SimpleMixInResolver(ClassIntrospector.MixInResolver overrides,",
                "-            Map<ClassKey,Class<?>> mixins) {",
                "-        _overrides = overrides;",
                "-        _localMixIns = mixins;",
                "-    }",
                "-",
                "-    /**",
                "-     * Mutant factory for constructor a new resolver instance with given",
                "-     * mix-in resolver override.",
                "-     */",
                "-    public SimpleMixInResolver withOverrides(ClassIntrospector.MixInResolver overrides) {",
                "-        return new SimpleMixInResolver(overrides, _localMixIns);",
                "-    }",
                "-",
                "-    /**",
                "-     * Mutant factory method that constructs a new instance that has no locally",
                "-     * defined mix-in/target mappings.",
                "-     */",
                "-    public SimpleMixInResolver withoutLocalDefinitions() {",
                "-        return new SimpleMixInResolver(_overrides, null);",
                "-    }",
                "-",
                "-    public void setLocalDefinitions(Map<Class<?>, Class<?>> sourceMixins) {",
                "-        if (sourceMixins == null || sourceMixins.isEmpty()) {",
                "-            _localMixIns = null;",
                "-        } else {",
                "-            Map<ClassKey,Class<?>> mixIns = new HashMap<ClassKey,Class<?>>(sourceMixins.size());",
                "-            for (Map.Entry<Class<?>,Class<?>> en : sourceMixins.entrySet()) {",
                "-                mixIns.put(new ClassKey(en.getKey()), en.getValue());",
                "-            }",
                "-            _localMixIns = mixIns;",
                "-        }",
                "-    }",
                "-",
                "-    public void addLocalDefinition(Class<?> target, Class<?> mixinSource) {",
                "-        if (_localMixIns == null) {",
                "-            _localMixIns = new HashMap<ClassKey,Class<?>>();",
                "-        }",
                "-        _localMixIns.put(new ClassKey(target), mixinSource);",
                "-    }",
                "-",
                "-    @Override",
                "-    public SimpleMixInResolver copy() {",
                "-        ClassIntrospector.MixInResolver overrides = (_overrides == null)",
                "-                ? null : _overrides.copy();",
                "-        Map<ClassKey,Class<?>> mixIns = (_localMixIns == null)",
                "-                ? null : new HashMap<ClassKey,Class<?>>(_localMixIns);",
                "-        return new SimpleMixInResolver(overrides, mixIns);",
                "-    }",
                "-",
                "-    @Override",
                "-    public Class<?> findMixInClassFor(Class<?> cls)",
                "-    {",
                "-        Class<?> mixin = (_overrides == null) ? null : _overrides.findMixInClassFor(cls);",
                "-        if (mixin == null && (_localMixIns != null)) {",
                "-            mixin = _localMixIns.get(new ClassKey(cls));",
                "-        }",
                "-        return mixin;",
                "-    }",
                "-",
                "-    public int localSize() {",
                "-        return (_localMixIns == null) ? 0 : _localMixIns.size();",
                "-    }",
                "-}"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/MixInHandler.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/MixInResolver.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java, src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java, src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java, src/main/java/com/fasterxml/jackson/databind/introspect/MixInResolver.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java, src/main/java/com/fasterxml/jackson/databind/introspect/MixInHandler.java, src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: method, deserialization, objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "21a75f802c9620cbea996421b10246790dffd071",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519101550,
            "hunks": 22,
            "message": "Fix java 9 compilation problems (wrt type `Module`)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 9c46b84f3..59dac843d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -282,7 +282,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public void _registerModules(Collection<? extends Module> modules) {",
                "+    public void _registerModules(Collection<? extends com.fasterxml.jackson.databind.Module> modules) {",
                "         ModuleContextBase ctxt = _constructModuleContext();",
                "-        for (Module module : _modules.values()) {",
                "-            module.setupModule(ctxt);",
                "-        }",
                "+        _modules.values().forEach(m -> m.setupModule(ctxt));",
                "         ctxt.applyChanges();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "index 6dced3c58..beef855e0 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "@@ -7,2 +7,3 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.*;",
                "+import com.fasterxml.jackson.databind.Module.SetupContext;",
                " import com.fasterxml.jackson.databind.deser.*;",
                "@@ -16,3 +17,3 @@ import com.fasterxml.jackson.databind.type.TypeModifier;",
                " public class ModuleContextBase",
                "-    implements Module.SetupContext",
                "+    implements SetupContext",
                " {",
                "@@ -148,3 +149,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addDeserializers(Deserializers d) {",
                "+    public SetupContext addDeserializers(Deserializers d) {",
                "         _deserializerFactory = deserializerFactory().withAdditionalDeserializers(d);",
                "@@ -154,3 +155,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "+    public SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "         _deserializerFactory = deserializerFactory().withAdditionalKeyDeserializers(kd);",
                "@@ -160,3 +161,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "+    public SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "         _deserializerFactory = deserializerFactory().withDeserializerModifier(modifier);",
                "@@ -166,3 +167,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "+    public SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "         _deserializerFactory = deserializerFactory().withValueInstantiators(instantiators);",
                "@@ -178,3 +179,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addSerializers(Serializers s) {",
                "+    public SetupContext addSerializers(Serializers s) {",
                "         _serializerFactory = serializerFactory().withAdditionalSerializers(s);",
                "@@ -184,3 +185,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addKeySerializers(Serializers s) {",
                "+    public SetupContext addKeySerializers(Serializers s) {",
                "         _serializerFactory = serializerFactory().withAdditionalKeySerializers(s);",
                "@@ -190,3 +191,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "+    public SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "         _serializerFactory = serializerFactory().withSerializerModifier(modifier);",
                "@@ -202,3 +203,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "+    public SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "         _deserializerFactory = deserializerFactory().withAbstractTypeResolver(resolver);",
                "@@ -208,3 +209,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addTypeModifier(TypeModifier modifier) {",
                "+    public SetupContext addTypeModifier(TypeModifier modifier) {",
                "         _builder.addTypeModifier(modifier);",
                "@@ -214,3 +215,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext registerSubtypes(Class<?>... subtypes) {",
                "+    public SetupContext registerSubtypes(Class<?>... subtypes) {",
                "         _builder.subtypeResolver().registerSubtypes(subtypes);",
                "@@ -220,3 +221,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext registerSubtypes(NamedType... subtypes) {",
                "+    public SetupContext registerSubtypes(NamedType... subtypes) {",
                "         _builder.subtypeResolver().registerSubtypes(subtypes);",
                "@@ -226,3 +227,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext registerSubtypes(Collection<Class<?>> subtypes) {",
                "+    public SetupContext registerSubtypes(Collection<Class<?>> subtypes) {",
                "         _builder.subtypeResolver().registerSubtypes(subtypes);",
                "@@ -238,3 +239,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+    public SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "         _baseSettings = _baseSettings.withInsertedAnnotationIntrospector(ai);",
                "@@ -244,3 +245,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "+    public SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "         _baseSettings = _baseSettings.withAppendedAnnotationIntrospector(ai);",
                "@@ -261,3 +262,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext addHandler(DeserializationProblemHandler handler)",
                "+    public SetupContext addHandler(DeserializationProblemHandler handler)",
                "     {",
                "@@ -268,3 +269,3 @@ public class ModuleContextBase",
                "     @Override",
                "-    public Module.SetupContext setMixIn(Class<?> target, Class<?> mixinSource) {",
                "+    public SetupContext setMixIn(Class<?> target, Class<?> mixinSource) {",
                "         _builder.addMixIn(target, mixinSource);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java b/src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java",
                "index 1538ef3db..1e305a615 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java",
                "@@ -50,5 +50,2 @@ public class SimpleLookupCache<K,V>",
                "-    /**",
                "-     * @since 2.5",
                "-     */",
                "     public V putIfAbsent(K key, V value) {",
                "@@ -81,4 +78,2 @@ public class SimpleLookupCache<K,V>",
                "      * and that JDK serialization won't call ctor(s) if Serializable is implemented.",
                "-     * ",
                "-     * @since 2.1",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/util/SimpleLookupCache.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b3542d2cfb5dd0551711b980d4b7ca075ebb6106",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518815262,
            "hunks": 52,
            "message": "Simplify `VisibilityChecker` (see if it can be further merged with `@JsonAutoDetect.Value`)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "index d66515573..5ef3d50a3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "@@ -283,6 +283,6 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {",
                "+    public VisibilityChecker findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker checker) {",
                "         return checker;",
                "     }",
                "-    ",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 135bcd692..125b2fd35 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -858,3 +858,3 @@ public class ObjectMapper",
                "      */",
                "-    public VisibilityChecker<?> getVisibilityChecker() {",
                "+    public VisibilityChecker getVisibilityChecker() {",
                "         return _configOverrides.getDefaultVisibility();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "index 02d02c0d8..6f6623e5d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "@@ -37,3 +37,3 @@ public class ConfigOverrides",
                "-    protected VisibilityChecker<?> _visibilityChecker;",
                "+    protected VisibilityChecker _visibilityChecker;",
                "@@ -51,3 +51,3 @@ public class ConfigOverrides",
                "                 JsonSetter.Value.empty(),",
                "-                VisibilityChecker.Std.defaultInstance(),",
                "+                VisibilityChecker.defaultInstance(),",
                "                 null",
                "@@ -59,3 +59,3 @@ public class ConfigOverrides",
                "             JsonSetter.Value defSetter,",
                "-            VisibilityChecker<?> defVisibility,",
                "+            VisibilityChecker defVisibility,",
                "             Boolean defMergeable) {",
                "@@ -126,3 +126,3 @@ public class ConfigOverrides",
                "-    public VisibilityChecker<?> getDefaultVisibility() {",
                "+    public VisibilityChecker getDefaultVisibility() {",
                "         return _visibilityChecker;",
                "@@ -151,3 +151,3 @@ public class ConfigOverrides",
                "-    public ConfigOverrides setDefaultVisibility(VisibilityChecker<?> v) {",
                "+    public ConfigOverrides setDefaultVisibility(VisibilityChecker v) {",
                "         _visibilityChecker = v;",
                "@@ -157,3 +157,3 @@ public class ConfigOverrides",
                "     public ConfigOverrides setDefaultVisibility(JsonAutoDetect.Value vis) {",
                "-        _visibilityChecker = VisibilityChecker.Std.construct(vis);",
                "+        _visibilityChecker = VisibilityChecker.construct(vis);",
                "         return this;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 8b2b1a7e1..031bd96bc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -543,5 +543,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public B changeDefaultVisibility(Function<VisibilityChecker<?>,VisibilityChecker<?>> handler) {",
                "-        VisibilityChecker<?> oldV = _configOverrides.getDefaultVisibility();",
                "-        VisibilityChecker<?> newV = handler.apply(oldV);",
                "+    public B changeDefaultVisibility(Function<VisibilityChecker,VisibilityChecker> handler) {",
                "+        VisibilityChecker oldV = _configOverrides.getDefaultVisibility();",
                "+        VisibilityChecker newV = handler.apply(oldV);",
                "         if (newV != oldV) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "index f331d859c..adfebaf0a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "@@ -449,3 +449,3 @@ public abstract class MapperConfig<T extends MapperConfig<T>>",
                "      */",
                "-    public abstract VisibilityChecker<?> getDefaultVisibilityChecker();",
                "+    public abstract VisibilityChecker getDefaultVisibilityChecker();",
                "@@ -459,3 +459,3 @@ public abstract class MapperConfig<T extends MapperConfig<T>>",
                "      */",
                "-    public abstract VisibilityChecker<?> getDefaultVisibilityChecker(Class<?> baseType,",
                "+    public abstract VisibilityChecker getDefaultVisibilityChecker(Class<?> baseType,",
                "             AnnotatedClass actualClass);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "index 2bb148fb1..3f8824119 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "@@ -624,3 +624,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "     @Override",
                "-    public final VisibilityChecker<?> getDefaultVisibilityChecker()",
                "+    public final VisibilityChecker getDefaultVisibilityChecker()",
                "     {",
                "@@ -630,5 +630,5 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "     @Override",
                "-    public final VisibilityChecker<?> getDefaultVisibilityChecker(Class<?> baseType,",
                "+    public final VisibilityChecker getDefaultVisibilityChecker(Class<?> baseType,",
                "             AnnotatedClass actualClass) {",
                "-        VisibilityChecker<?> vc = getDefaultVisibilityChecker();",
                "+        VisibilityChecker vc = getDefaultVisibilityChecker();",
                "         AnnotationIntrospector intr = getAnnotationIntrospector();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index 4263c0427..5c45c0278 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@ -322,3 +322,3 @@ public abstract class BasicDeserializerFactory",
                "         final DeserializationConfig config = ctxt.getConfig();",
                "-        VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker(beanDesc.getBeanClass(),",
                "+        VisibilityChecker vchecker = config.getDefaultVisibilityChecker(beanDesc.getBeanClass(),",
                "                 beanDesc.getClassInfo());",
                "@@ -420,3 +420,3 @@ index, owner, defs[index], propDef);",
                "     protected void _addConstructorCreators(DeserializationContext ctxt,",
                "-            BeanDescription beanDesc, VisibilityChecker<?> vchecker,",
                "+            BeanDescription beanDesc, VisibilityChecker vchecker,",
                "             AnnotationIntrospector intr, CreatorCollector creators,",
                "@@ -607,3 +607,3 @@ nonAnnotatedParamIndex, ctor);",
                "     protected void _addFactoryCreators(DeserializationContext ctxt,",
                "-            BeanDescription beanDesc, VisibilityChecker<?> vchecker,",
                "+            BeanDescription beanDesc, VisibilityChecker vchecker,",
                "             AnnotationIntrospector intr, CreatorCollector creators,",
                "@@ -919,3 +919,3 @@ nonAnnotatedParamIndex, ctor);",
                "     private void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,",
                "-            BeanDescription beanDesc, VisibilityChecker<?> vchecker,",
                "+            BeanDescription beanDesc, VisibilityChecker vchecker,",
                "             AnnotationIntrospector intr, CreatorCollector creators,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "index a40de1c85..fe9dc1a55 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "@@ -168,4 +168,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac,",
                "-        VisibilityChecker<?> checker)",
                "+    public VisibilityChecker findAutoDetectVisibility(AnnotatedClass ac,",
                "+        VisibilityChecker checker)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "index ae5626cc9..21d6a510e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "@@ -274,4 +274,4 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac,",
                "-        VisibilityChecker<?> checker)",
                "+    public VisibilityChecker findAutoDetectVisibility(AnnotatedClass ac,",
                "+        VisibilityChecker checker)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "index 76dae7c20..560c41224 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "@@ -49,3 +49,3 @@ public class POJOPropertiesCollector",
                "-    protected final VisibilityChecker<?> _visibilityChecker;",
                "+    protected final VisibilityChecker _visibilityChecker;",
                "@@ -53,5 +53,2 @@ public class POJOPropertiesCollector",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected final boolean _useAnnotations;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
                "index c6f34522a..bf1add7ea 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
                "@@ -10,17 +10,121 @@ import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;",
                "  * to their visibility modifiers.",
                "- *<p>",
                "- * Note on type declaration: funky recursive type is necessary to",
                "- * support builder/fluent pattern.",
                "  */",
                "-public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "+public class VisibilityChecker",
                "+    implements java.io.Serializable",
                " {",
                "-    // // Builder methods",
                "+    private static final long serialVersionUID = 1;",
                "     /**",
                "-     * Method that can be used for merging default values from `this`",
                "-     * instance with specified overrides; and either return `this`",
                "-     * if overrides had no effect (that is, result would be equal),",
                "-     * or a new instance with merged visibility settings.",
                "+     * This is the canonical base instance, configured with default",
                "+     * visibility values",
                "+     */",
                "+    protected final static VisibilityChecker DEFAULT = new VisibilityChecker(",
                "+            Visibility.PUBLIC_ONLY, // field",
                "+            Visibility.PUBLIC_ONLY, // getter",
                "+            Visibility.PUBLIC_ONLY, // is-getter",
                "+            Visibility.ANY, // setter",
                "+            Visibility.PUBLIC_ONLY, // creator -- NOTE: was `ANY` for 2.x",
                "+            Visibility.NON_PRIVATE // scalar-constructor (new in 3.x)",
                "+            );",
                "+",
                "+    protected final Visibility _fieldMinLevel;",
                "+    protected final Visibility _getterMinLevel;",
                "+    protected final Visibility _isGetterMinLevel;",
                "+    protected final Visibility _setterMinLevel;",
                "+    protected final Visibility _creatorMinLevel;",
                "+    protected final Visibility _scalarConstructorMinLevel;",
                "+",
                "+    /**",
                "+     * Constructor used for building instance that has minumum visibility",
                "+     * levels as indicated by given annotation instance",
                "+     * ",
                "+     * @param ann Annotations to use for determining minimum visibility levels",
                "      */",
                "-    public T withOverrides(JsonAutoDetect.Value vis);",
                "+    public VisibilityChecker(JsonAutoDetect ann)",
                "+    {",
                "+        // let's combine checks for enabled/disabled, with minimum level checks:",
                "+        _fieldMinLevel = ann.fieldVisibility();",
                "+        _getterMinLevel = ann.getterVisibility();",
                "+        _isGetterMinLevel = ann.isGetterVisibility();",
                "+        _setterMinLevel = ann.setterVisibility();",
                "+        _creatorMinLevel = ann.creatorVisibility();",
                "+        _scalarConstructorMinLevel = ann.scalarConstructorVisibility();",
                "+    }",
                "+",
                "+    /**",
                "+     * Constructor that allows directly specifying minimum visibility levels to use",
                "+     */",
                "+    public VisibilityChecker(Visibility field,",
                "+            Visibility getter, Visibility isGetter, Visibility setter,",
                "+            Visibility creator, Visibility scalarConstructor)",
                "+    {",
                "+        ",
                "+        _getterMinLevel = getter;",
                "+        _isGetterMinLevel = isGetter;",
                "+        _setterMinLevel = setter;",
                "+        _creatorMinLevel = creator;",
                "+        _fieldMinLevel = field;",
                "+        _scalarConstructorMinLevel = scalarConstructor;",
                "+    }",
                "+",
                "+    /**",
                "+     * Constructor that will assign given visibility value for all",
                "+     * properties.",
                "+     * ",
                "+     * @param v level to use for all property types",
                "+     */",
                "+    public VisibilityChecker(Visibility v)",
                "+    {",
                "+        // typically we shouldn't get this value; but let's handle it if we do:",
                "+        if (v == Visibility.DEFAULT) {",
                "+            _getterMinLevel = DEFAULT._getterMinLevel;",
                "+            _isGetterMinLevel = DEFAULT._isGetterMinLevel;",
                "+            _setterMinLevel = DEFAULT._setterMinLevel;",
                "+            _creatorMinLevel = DEFAULT._creatorMinLevel;",
                "+            _fieldMinLevel = DEFAULT._fieldMinLevel;",
                "+            _scalarConstructorMinLevel = DEFAULT._scalarConstructorMinLevel;",
                "+        } else {",
                "+            _getterMinLevel = v;",
                "+            _isGetterMinLevel = v;",
                "+            _setterMinLevel = v;",
                "+            _creatorMinLevel = v;",
                "+            _fieldMinLevel = v;",
                "+            _scalarConstructorMinLevel = v;",
                "+        }",
                "+    }",
                "+",
                "+    public static VisibilityChecker construct(JsonAutoDetect.Value vis) {",
                "+        return DEFAULT.withOverrides(vis);",
                "+    }",
                "+",
                "+    ",
                "+    public static VisibilityChecker defaultInstance() { return DEFAULT; }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Mutant factories",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    public VisibilityChecker withOverrides(JsonAutoDetect.Value vis)",
                "+    {",
                "+        if (vis == null) {",
                "+            return this;",
                "+        }",
                "+        return _with(",
                "+                _defaultOrOverride(_fieldMinLevel, vis.getFieldVisibility()),",
                "+                _defaultOrOverride(_getterMinLevel, vis.getGetterVisibility()),",
                "+                _defaultOrOverride(_isGetterMinLevel, vis.getIsGetterVisibility()),",
                "+                _defaultOrOverride(_setterMinLevel, vis.getSetterVisibility()),",
                "+                _defaultOrOverride(_creatorMinLevel, vis.getCreatorVisibility()),",
                "+                _defaultOrOverride(_scalarConstructorMinLevel, vis.getScalarConstructorVisibility())",
                "+                );",
                "+    }",
                "+",
                "+    private Visibility _defaultOrOverride(Visibility defaults, Visibility override) {",
                "+        if (override == Visibility.DEFAULT) {",
                "+            return defaults;",
                "+        }",
                "+        return override;",
                "+    }",
                "@@ -36,3 +140,9 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public T with(Visibility v);",
                "+    public VisibilityChecker with(Visibility v)",
                "+    {",
                "+        if (v == Visibility.DEFAULT) {",
                "+            return DEFAULT;",
                "+        }",
                "+        return new VisibilityChecker(v);",
                "+    }",
                "@@ -48,3 +158,23 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public T withVisibility(PropertyAccessor method, Visibility v);",
                "+    public VisibilityChecker withVisibility(PropertyAccessor method, Visibility v)",
                "+    {",
                "+        switch (method) {",
                "+        case GETTER:",
                "+            return withGetterVisibility(v);",
                "+        case SETTER:",
                "+            return withSetterVisibility(v);",
                "+        case CREATOR:",
                "+            return withCreatorVisibility(v);",
                "+        case FIELD:",
                "+            return withFieldVisibility(v);",
                "+        case IS_GETTER:",
                "+            return withIsGetterVisibility(v);",
                "+        case ALL:",
                "+            return with(v);",
                "+        //case NONE:",
                "+        default:",
                "+            // break;",
                "+            return this;",
                "+        }",
                "+    }",
                "@@ -52,5 +182,10 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      * Builder method that will return a checker instance that has",
                "-     * specified minimum visibility level for regular (\"getXxx\") getters.",
                "+     * specified minimum visibility level for fields.",
                "      */",
                "-    public T withGetterVisibility(Visibility v);",
                "+    public VisibilityChecker withFieldVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;",
                "+        if (_fieldMinLevel == v) return this;",
                "+        return new VisibilityChecker(v, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "+                _creatorMinLevel, _scalarConstructorMinLevel);",
                "+    }",
                "@@ -58,11 +193,21 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      * Builder method that will return a checker instance that has",
                "-     * specified minimum visibility level for \"is-getters\" (\"isXxx\").",
                "+     * specified minimum visibility level for regular (\"getXxx\") getters.",
                "      */",
                "-    public T withIsGetterVisibility(Visibility v);",
                "-    ",
                "+    public VisibilityChecker withGetterVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT) v = DEFAULT._getterMinLevel;",
                "+        if (_getterMinLevel == v) return this;",
                "+        return new VisibilityChecker(_fieldMinLevel, v, _isGetterMinLevel, _setterMinLevel,",
                "+                _creatorMinLevel, _scalarConstructorMinLevel);",
                "+    }",
                "+",
                "     /**",
                "      * Builder method that will return a checker instance that has",
                "-     * specified minimum visibility level for setters.",
                "+     * specified minimum visibility level for \"is-getters\" (\"isXxx\").",
                "      */",
                "-    public T withSetterVisibility(Visibility v);",
                "+    public VisibilityChecker withIsGetterVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT) v = DEFAULT._isGetterMinLevel;",
                "+        if (_isGetterMinLevel == v) return this;",
                "+        return new VisibilityChecker(_fieldMinLevel, _getterMinLevel, v, _setterMinLevel,",
                "+                _creatorMinLevel, _scalarConstructorMinLevel);",
                "+    }",
                "@@ -70,6 +215,11 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      * Builder method that will return a checker instance that has",
                "-     * specified minimum visibility level for fields.",
                "+     * specified minimum visibility level for setters.",
                "      */",
                "-    public T withFieldVisibility(Visibility v);",
                "-    ",
                "+    public VisibilityChecker withSetterVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT) v = DEFAULT._setterMinLevel;",
                "+        if (_setterMinLevel == v) return this;",
                "+        return new VisibilityChecker(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, v,",
                "+                _creatorMinLevel, _scalarConstructorMinLevel);",
                "+    }",
                "+",
                "     /**",
                "@@ -79,3 +229,8 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public T withCreatorVisibility(Visibility v);",
                "+    public VisibilityChecker withCreatorVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT) v = DEFAULT._creatorMinLevel;",
                "+        if (_creatorMinLevel == v) return this;",
                "+        return new VisibilityChecker(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "+                v, _scalarConstructorMinLevel);",
                "+    }",
                "@@ -84,12 +239,42 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public T withScalarConstructorVisibility(Visibility v);",
                "-\t",
                "-    // // Accessors",
                "-\t",
                "+    public VisibilityChecker withScalarConstructorVisibility(Visibility v) {",
                "+        if (v == Visibility.DEFAULT)  v = DEFAULT._scalarConstructorMinLevel;",
                "+        if (_scalarConstructorMinLevel == v) return this;",
                "+        return new VisibilityChecker(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "+                _creatorMinLevel, v);",
                "+    }",
                "+",
                "     /**",
                "-     * Method for checking whether given method is auto-detectable",
                "-     * as regular getter, with respect to its visibility (not considering",
                "+     * Method that can be used for merging default values from `this`",
                "+     * instance with specified overrides; and either return `this`",
                "+     * if overrides had no effect (that is, result would be equal),",
                "+     * or a new instance with merged visibility settings.",
                "+     */",
                "+    protected VisibilityChecker _with(Visibility f, Visibility g, Visibility isG, Visibility s,",
                "+            Visibility cr, Visibility scalarCr) {",
                "+        if ((f == _fieldMinLevel)",
                "+                && (g == _getterMinLevel)",
                "+                && (isG == _isGetterMinLevel)",
                "+                && (s == _setterMinLevel)",
                "+                && (cr == _creatorMinLevel)",
                "+                && (scalarCr == _scalarConstructorMinLevel)) {",
                "+            return this;",
                "+        }",
                "+        return new VisibilityChecker(f, g, isG, s, cr, scalarCr);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Accessors",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method for checking whether given field is auto-detectable",
                "+     * as property, with respect to its visibility (not considering",
                "      * method signature or name, just visibility)",
                "      */",
                "-    public boolean isGetterVisible(AnnotatedMethod m);",
                "+    public boolean isFieldVisible(AnnotatedField f) {",
                "+        return _fieldMinLevel.isVisible(f.getAnnotated());",
                "+    }",
                "@@ -97,20 +282,26 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      * Method for checking whether given method is auto-detectable",
                "-     * as is-getter, with respect to its visibility (not considering",
                "+     * as regular getter, with respect to its visibility (not considering",
                "      * method signature or name, just visibility)",
                "      */",
                "-    public boolean isIsGetterVisible(AnnotatedMethod m);",
                "-    ",
                "+    public boolean isGetterVisible(AnnotatedMethod m) {",
                "+         return _getterMinLevel.isVisible(m.getAnnotated());",
                "+    }",
                "+",
                "     /**",
                "      * Method for checking whether given method is auto-detectable",
                "-     * as setter, with respect to its visibility (not considering",
                "+     * as is-getter, with respect to its visibility (not considering",
                "      * method signature or name, just visibility)",
                "      */",
                "-    public boolean isSetterVisible(AnnotatedMethod m);",
                "+    public boolean isIsGetterVisible(AnnotatedMethod m) {",
                "+        return _isGetterMinLevel.isVisible(m.getAnnotated());",
                "+    }",
                "     /**",
                "-     * Method for checking whether given field is auto-detectable",
                "-     * as property, with respect to its visibility (not considering",
                "+     * Method for checking whether given method is auto-detectable",
                "+     * as setter, with respect to its visibility (not considering",
                "      * method signature or name, just visibility)",
                "      */",
                "-    public boolean isFieldVisible(AnnotatedField f);",
                "+    public boolean isSetterVisible(AnnotatedMethod m) {",
                "+        return _setterMinLevel.isVisible(m.getAnnotated());",
                "+    }",
                "@@ -122,3 +313,5 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public boolean isCreatorVisible(AnnotatedMember m);",
                "+    public boolean isCreatorVisible(AnnotatedMember m) {",
                "+        return _creatorMinLevel.isVisible(m.getMember());",
                "+    }",
                "@@ -132,3 +325,5 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "      */",
                "-    public boolean isScalarConstructorVisible(AnnotatedMember m);",
                "+    public boolean isScalarConstructorVisible(AnnotatedMember m) {",
                "+        return _scalarConstructorMinLevel.isVisible(m.getMember());",
                "+    }",
                "@@ -136,281 +331,11 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>",
                "     /********************************************************",
                "-    /* Standard implementation suitable for basic use",
                "+    /* Standard methods",
                "     /********************************************************",
                "-    */",
                "-",
                "-   /**",
                "-    * Default standard implementation is purely based on visibility",
                "-    * modifier of given class members, and its configured minimum",
                "-    * levels.",
                "-    * Implemented using \"builder\" (or \"Fluent\") pattern, whereas instances",
                "-    * are immutable, and configuration is achieved by chainable factory",
                "-    * methods. As a result, type is declared is funky recursive generic",
                "-    * type, to allow for sub-classing of build methods with property type",
                "-    * co-variance.",
                "-    */",
                "-    public static class Std",
                "-        implements VisibilityChecker<Std>,",
                "-            java.io.Serializable",
                "-    {",
                "-        private static final long serialVersionUID = 1;",
                "-",
                "-        /**",
                "-         * This is the canonical base instance, configured with default",
                "-         * visibility values",
                "-         */",
                "-        protected final static Std DEFAULT = new Std(",
                "-                Visibility.PUBLIC_ONLY, // field",
                "-                Visibility.PUBLIC_ONLY, // getter",
                "-                Visibility.PUBLIC_ONLY, // is-getter",
                "-                Visibility.ANY, // setter",
                "-                Visibility.PUBLIC_ONLY, // creator -- NOTE: was `ANY` for 2.x",
                "-                Visibility.NON_PRIVATE // scalar-constructor (new in 3.x)",
                "-                );",
                "-",
                "-        protected final Visibility _fieldMinLevel;",
                "-        protected final Visibility _getterMinLevel;",
                "-        protected final Visibility _isGetterMinLevel;",
                "-        protected final Visibility _setterMinLevel;",
                "-        protected final Visibility _creatorMinLevel;",
                "-        protected final Visibility _scalarConstructorMinLevel;",
                "-",
                "-        public static Std defaultInstance() { return DEFAULT; }",
                "-        ",
                "-        /**",
                "-         * Constructor used for building instance that has minumum visibility",
                "-         * levels as indicated by given annotation instance",
                "-         * ",
                "-         * @param ann Annotations to use for determining minimum visibility levels",
                "-         */",
                "-        public Std(JsonAutoDetect ann)",
                "-        {",
                "-            // let's combine checks for enabled/disabled, with minimum level checks:",
                "-            _fieldMinLevel = ann.fieldVisibility();",
                "-            _getterMinLevel = ann.getterVisibility();",
                "-            _isGetterMinLevel = ann.isGetterVisibility();",
                "-            _setterMinLevel = ann.setterVisibility();",
                "-            _creatorMinLevel = ann.creatorVisibility();",
                "-            _scalarConstructorMinLevel = ann.scalarConstructorVisibility();",
                "-        }",
                "-",
                "-        /**",
                "-         * Constructor that allows directly specifying minimum visibility levels to use",
                "-         */",
                "-        public Std(Visibility field,",
                "-                Visibility getter, Visibility isGetter, Visibility setter,",
                "-                Visibility creator, Visibility scalarConstructor)",
                "-        {",
                "-            ",
                "-            _getterMinLevel = getter;",
                "-            _isGetterMinLevel = isGetter;",
                "-            _setterMinLevel = setter;",
                "-            _creatorMinLevel = creator;",
                "-            _fieldMinLevel = field;",
                "-            _scalarConstructorMinLevel = scalarConstructor;",
                "-        }",
                "-",
                "-        /**",
                "-         * Constructor that will assign given visibility value for all",
                "-         * properties.",
                "-         * ",
                "-         * @param v level to use for all property types",
                "-         */",
                "-        public Std(Visibility v)",
                "-        {",
                "-            // typically we shouldn't get this value; but let's handle it if we do:",
                "-            if (v == Visibility.DEFAULT) {",
                "-                _getterMinLevel = DEFAULT._getterMinLevel;",
                "-                _isGetterMinLevel = DEFAULT._isGetterMinLevel;",
                "-                _setterMinLevel = DEFAULT._setterMinLevel;",
                "-                _creatorMinLevel = DEFAULT._creatorMinLevel;",
                "-                _fieldMinLevel = DEFAULT._fieldMinLevel;",
                "-                _scalarConstructorMinLevel = DEFAULT._scalarConstructorMinLevel;",
                "-            } else {",
                "-                _getterMinLevel = v;",
                "-                _isGetterMinLevel = v;",
                "-                _setterMinLevel = v;",
                "-                _creatorMinLevel = v;",
                "-                _fieldMinLevel = v;",
                "-                _scalarConstructorMinLevel = v;",
                "-            }",
                "-        }",
                "-",
                "-        /**",
                "-         * @since 2.9",
                "-         */",
                "-        public static Std construct(JsonAutoDetect.Value vis) {",
                "-            return DEFAULT.withOverrides(vis);",
                "-        }",
                "-",
                "-        /*",
                "-        /********************************************************",
                "-        /* Builder/fluent methods for instantiating configured",
                "-        /* instances",
                "-        /********************************************************",
                "-         */",
                "-",
                "-        protected Std _with(Visibility f, Visibility g, Visibility isG, Visibility s,",
                "-                Visibility cr, Visibility scalarCr) {",
                "-            if ((f == _fieldMinLevel)",
                "-                    && (g == _getterMinLevel)",
                "-                    && (isG == _isGetterMinLevel)",
                "-                    && (s == _setterMinLevel)",
                "-                    && (cr == _creatorMinLevel)",
                "-                    && (scalarCr == _scalarConstructorMinLevel)) {",
                "-                return this;",
                "-            }",
                "-            return new Std(f, g, isG, s, cr, scalarCr);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withOverrides(JsonAutoDetect.Value vis)",
                "-        {",
                "-            if (vis == null) {",
                "-                return this;",
                "-            }",
                "-            return _with(",
                "-                    _defaultOrOverride(_fieldMinLevel, vis.getFieldVisibility()),",
                "-                    _defaultOrOverride(_getterMinLevel, vis.getGetterVisibility()),",
                "-                    _defaultOrOverride(_isGetterMinLevel, vis.getIsGetterVisibility()),",
                "-                    _defaultOrOverride(_setterMinLevel, vis.getSetterVisibility()),",
                "-                    _defaultOrOverride(_creatorMinLevel, vis.getCreatorVisibility()),",
                "-                    _defaultOrOverride(_scalarConstructorMinLevel, vis.getScalarConstructorVisibility())",
                "-                    );",
                "-        }",
                "-",
                "-        private Visibility _defaultOrOverride(Visibility defaults, Visibility override) {",
                "-            if (override == Visibility.DEFAULT) {",
                "-                return defaults;",
                "-            }",
                "-            return override;",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std with(Visibility v)",
                "-        {",
                "-            if (v == Visibility.DEFAULT) {",
                "-                return DEFAULT;",
                "-            }",
                "-            return new Std(v);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withVisibility(PropertyAccessor method, Visibility v)",
                "-        {",
                "-            switch (method) {",
                "-            case GETTER:",
                "-                return withGetterVisibility(v);",
                "-            case SETTER:",
                "-                return withSetterVisibility(v);",
                "-            case CREATOR:",
                "-                return withCreatorVisibility(v);",
                "-            case FIELD:",
                "-                return withFieldVisibility(v);",
                "-            case IS_GETTER:",
                "-                return withIsGetterVisibility(v);",
                "-            case ALL:",
                "-                return with(v);",
                "-            //case NONE:",
                "-            default:",
                "-                // break;",
                "-                return this;",
                "-            }",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withFieldVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;",
                "-            if (_fieldMinLevel == v) return this;",
                "-            return new Std(v, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "-                    _creatorMinLevel, _scalarConstructorMinLevel);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withGetterVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT) v = DEFAULT._getterMinLevel;",
                "-            if (_getterMinLevel == v) return this;",
                "-            return new Std(_fieldMinLevel, v, _isGetterMinLevel, _setterMinLevel,",
                "-                    _creatorMinLevel, _scalarConstructorMinLevel);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withIsGetterVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT) v = DEFAULT._isGetterMinLevel;",
                "-            if (_isGetterMinLevel == v) return this;",
                "-            return new Std(_fieldMinLevel, _getterMinLevel, v, _setterMinLevel,",
                "-                    _creatorMinLevel, _scalarConstructorMinLevel);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withSetterVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT) v = DEFAULT._setterMinLevel;",
                "-            if (_setterMinLevel == v) return this;",
                "-            return new Std(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, v,",
                "-                    _creatorMinLevel, _scalarConstructorMinLevel);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withCreatorVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT) v = DEFAULT._creatorMinLevel;",
                "-            if (_creatorMinLevel == v) return this;",
                "-            return new Std(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "-                    v, _scalarConstructorMinLevel);",
                "-        }",
                "-",
                "-        @Override",
                "-        public Std withScalarConstructorVisibility(Visibility v) {",
                "-            if (v == Visibility.DEFAULT)  v = DEFAULT._scalarConstructorMinLevel;",
                "-            if (_scalarConstructorMinLevel == v) return this;",
                "-            return new Std(_fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "-                    _creatorMinLevel, v);",
                "-        }",
                "-",
                "-        /*",
                "-        /********************************************************",
                "-        /* Public API impl",
                "-        /********************************************************",
                "-         */",
                "-",
                "-        @Override",
                "-        public boolean isFieldVisible(AnnotatedField f) {",
                "-            return _fieldMinLevel.isVisible(f.getAnnotated());",
                "-        }",
                "-",
                "-        @Override",
                "-        public boolean isGetterVisible(AnnotatedMethod m) {",
                "-             return _getterMinLevel.isVisible(m.getAnnotated());",
                "-        }",
                "-",
                "-        @Override",
                "-        public boolean isIsGetterVisible(AnnotatedMethod m) {",
                "-            return _isGetterMinLevel.isVisible(m.getAnnotated());",
                "-        }",
                "-",
                "-        @Override",
                "-        public boolean isSetterVisible(AnnotatedMethod m) {",
                "-            return _setterMinLevel.isVisible(m.getAnnotated());",
                "-        }",
                "-",
                "-        @Override",
                "-        public boolean isCreatorVisible(AnnotatedMember m) {",
                "-            return _creatorMinLevel.isVisible(m.getMember());",
                "-        }",
                "-",
                "-        @Override",
                "-        public boolean isScalarConstructorVisible(AnnotatedMember m) {",
                "-            return _scalarConstructorMinLevel.isVisible(m.getMember());",
                "-        }",
                "+     */",
                "-        /*",
                "-        /********************************************************",
                "-        /* Standard methods",
                "-        /********************************************************",
                "-         */",
                "-    ",
                "-        @Override",
                "-        public String toString() {",
                "-            return String.format(\"[Visibility: field=%s,getter=%s,isGetter=%s,setter=%s,creator=%s,scalarConstructor=%s]\",",
                "-                    _fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "-                    _creatorMinLevel, _scalarConstructorMinLevel);",
                "-        }",
                "+    @Override",
                "+    public String toString() {",
                "+        return String.format(\"[Visibility: field=%s,getter=%s,isGetter=%s,setter=%s,creator=%s,scalarConstructor=%s]\",",
                "+                _fieldMinLevel, _getterMinLevel, _isGetterMinLevel, _setterMinLevel,",
                "+                _creatorMinLevel, _scalarConstructorMinLevel);",
                "     }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java, src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java, src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java, src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java, src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e01566f27c6e1286595ef12c8f55259bb2d43c2e",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518147761,
            "hunks": 10,
            "message": "further refactoring to move configOverrides into MapperBuilder too...",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 2e3280798..78c888e63 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -395,2 +395,3 @@ public class ObjectMapper",
                "         BaseSettings base = builder.baseSettings();",
                "+        _configOverrides = builder.configOverrides();",
                "@@ -411,5 +412,4 @@ public class ObjectMapper",
                "         _mixIns = new SimpleMixInResolver(null);",
                "-        _configOverrides = new ConfigOverrides();",
                "-        _serializationConfig = builder.buildSerializationConfig(_mixIns, rootNames, _configOverrides);",
                "-        _deserializationConfig = builder.buildDeserializationConfig(_mixIns, rootNames, _configOverrides);",
                "+        _serializationConfig = builder.buildSerializationConfig(_mixIns, rootNames);",
                "+        _deserializationConfig = builder.buildDeserializationConfig(_mixIns, rootNames);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 8a697ece5..3e22e4217 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -50,2 +50,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected final ConfigOverrides _configOverrides;",
                "+    ",
                "     /*",
                "@@ -157,2 +159,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _baseSettings = BaseSettings.std();",
                "+        _configOverrides = new ConfigOverrides();",
                "@@ -187,2 +190,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _baseSettings = base._baseSettings;",
                "+        _configOverrides = base._configOverrides;",
                "@@ -221,3 +225,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public SerializationConfig buildSerializationConfig(SimpleMixInResolver mixins,",
                "-            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+            RootNameLookup rootNames)",
                "     {",
                "@@ -225,3 +229,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "                 _mapperFeatures, _serFeatures, _generatorFeatures, _formatGeneratorFeatures,",
                "-                mixins, rootNames, configOverrides);",
                "+                mixins, rootNames, _configOverrides);",
                "     }",
                "@@ -229,3 +233,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public DeserializationConfig buildDeserializationConfig(SimpleMixInResolver mixins,",
                "-            RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "+            RootNameLookup rootNames)",
                "     {",
                "@@ -233,3 +237,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "                 _mapperFeatures, _deserFeatures, _parserFeatures, _formatParserFeatures,",
                "-                mixins, rootNames, configOverrides);",
                "+                mixins, rootNames, _configOverrides);",
                "     }",
                "@@ -246,2 +250,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public ConfigOverrides configOverrides() {",
                "+        return _configOverrides;",
                "+    }",
                "+",
                "     public TokenStreamFactory streamFactory() {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "36b44510565c564181e29145f1e751141a447a00",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518238471,
            "hunks": 54,
            "message": "More builder()ization for mapper",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index 9534e19b7..5742604ba 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -319,8 +319,2 @@ public abstract class Module",
                "         public void addDeserializationProblemHandler(DeserializationProblemHandler handler);",
                "-",
                "-        /**",
                "-         * Method that may be used to override naming strategy that is used",
                "-         * by {@link ObjectMapper}.",
                "-         */",
                "-        public void setNamingStrategy(PropertyNamingStrategy naming);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index a7c5f3ca4..a0b5e897c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -10,2 +10,3 @@ import java.util.*;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.atomic.AtomicReference;",
                "@@ -395,4 +396,8 @@ public class ObjectMapper",
                "         BaseSettings base = builder.baseSettings();",
                "-        _configOverrides = builder.configOverrides();",
                "-",
                "+        // bit tricky as we do NOT want to expose simple accessors (to a mutable thing)",
                "+        {",
                "+            final AtomicReference<ConfigOverrides> ref = new AtomicReference<>();",
                "+            builder.withAllConfigOverrides(overrides -> ref.set(overrides));",
                "+            _configOverrides = ref.get();",
                "+        }",
                "         // general type handling",
                "@@ -653,7 +658,2 @@ public class ObjectMapper",
                "             }",
                "-",
                "-            @Override",
                "-            public void setNamingStrategy(PropertyNamingStrategy naming) {",
                "-                setPropertyNamingStrategy(naming);",
                "-            }",
                "         });",
                "@@ -767,3 +767,3 @@ public class ObjectMapper",
                "      */",
                "-    public SerializationConfig getSerializationConfig() {",
                "+    public SerializationConfig serializationConfig() {",
                "         return _serializationConfig;",
                "@@ -780,3 +780,3 @@ public class ObjectMapper",
                "      */",
                "-    public DeserializationConfig getDeserializationConfig() {",
                "+    public DeserializationConfig deserializationConfig() {",
                "         return _deserializationConfig;",
                "@@ -805,8 +805,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * @deprecated Since 3.0 use {@link #tokenStreamFactory()} instead.",
                "-     */",
                "-    @Deprecated // since 3.0",
                "-    public TokenStreamFactory getFactory() { return tokenStreamFactory(); }",
                "-",
                "     /*",
                "@@ -985,12 +979,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for setting {@link AnnotationIntrospector} used by this",
                "-     * mapper instance for both serialization and deserialization.",
                "-     * Note that doing this will replace the current introspector, which",
                "-     * may lead to unavailability of core Jackson annotations.",
                "-     * If you want to combine handling of multiple introspectors,",
                "-     * have a look at {@link com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair}.",
                "-     * ",
                "-     * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) {",
                "@@ -1001,32 +986,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for changing {@link AnnotationIntrospector} instances used",
                "-     * by this mapper instance for serialization and deserialization,",
                "-     * specifying them separately so that different introspection can be",
                "-     * used for different aspects",
                "-     * ",
                "-     * @param serializerAI {@link AnnotationIntrospector} to use for configuring",
                "-     *    serialization",
                "-     * @param deserializerAI {@link AnnotationIntrospector} to use for configuring",
                "-     *    deserialization",
                "-     * ",
                "-     * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
                "-     */",
                "-    public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI,",
                "-            AnnotationIntrospector deserializerAI) {",
                "-        _serializationConfig = _serializationConfig.with(serializerAI);",
                "-        _deserializationConfig = _deserializationConfig.with(deserializerAI);",
                "-        return this;",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for setting custom property naming strategy to use.",
                "-     */",
                "-    @Deprecated",
                "-    public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) {",
                "-        _serializationConfig = _serializationConfig.with(s);",
                "-        _deserializationConfig = _deserializationConfig.with(s);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "@@ -2048,3 +2003,3 @@ public class ObjectMapper",
                "     {",
                "-        SerializationConfig config = getSerializationConfig();",
                "+        SerializationConfig config = serializationConfig();",
                "         // 04-Oct-2017, tatu: Generator should come properly configured and we should not",
                "@@ -2077,3 +2032,3 @@ public class ObjectMapper",
                "     {",
                "-        SerializationConfig config = getSerializationConfig();",
                "+        SerializationConfig config = serializationConfig();",
                "         _serializerProvider(config).serializeValue(g, rootNode);",
                "@@ -2091,3 +2046,3 @@ public class ObjectMapper",
                "     {",
                "-        SerializationConfig config = getSerializationConfig();",
                "+        SerializationConfig config = serializationConfig();",
                "         _serializerProvider(config).serializeValue(g, rootNode);",
                "@@ -2197,3 +2152,3 @@ public class ObjectMapper",
                "         //   do it here too",
                "-        SerializationConfig config = getSerializationConfig()",
                "+        SerializationConfig config = serializationConfig()",
                "             .without(SerializationFeature.WRAP_ROOT_VALUE);",
                "@@ -2713,3 +2668,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer() {",
                "-        return _newWriter(getSerializationConfig());",
                "+        return _newWriter(serializationConfig());",
                "     }",
                "@@ -2722,3 +2677,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(SerializationFeature feature) {",
                "-        return _newWriter(getSerializationConfig().with(feature));",
                "+        return _newWriter(serializationConfig().with(feature));",
                "     }",
                "@@ -2732,3 +2687,3 @@ public class ObjectMapper",
                "             SerializationFeature... other) {",
                "-        return _newWriter(getSerializationConfig().with(first, other));",
                "+        return _newWriter(serializationConfig().with(first, other));",
                "     }",
                "@@ -2741,3 +2696,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(DateFormat df) {",
                "-        return _newWriter(getSerializationConfig().with(df));",
                "+        return _newWriter(serializationConfig().with(df));",
                "     }",
                "@@ -2749,3 +2704,3 @@ public class ObjectMapper",
                "     public ObjectWriter writerWithView(Class<?> serializationView) {",
                "-        return _newWriter(getSerializationConfig().withView(serializationView));",
                "+        return _newWriter(serializationConfig().withView(serializationView));",
                "     }",
                "@@ -2762,3 +2717,3 @@ public class ObjectMapper",
                "     public ObjectWriter writerFor(Class<?> rootType) {",
                "-        return _newWriter(getSerializationConfig(),",
                "+        return _newWriter(serializationConfig(),",
                "                 ((rootType == null) ? null :_typeFactory.constructType(rootType)),",
                "@@ -2777,3 +2732,3 @@ public class ObjectMapper",
                "     public ObjectWriter writerFor(TypeReference<?> rootType) {",
                "-        return _newWriter(getSerializationConfig(),",
                "+        return _newWriter(serializationConfig(),",
                "                 ((rootType == null) ? null : _typeFactory.constructType(rootType)),",
                "@@ -2792,3 +2747,3 @@ public class ObjectMapper",
                "     public ObjectWriter writerFor(JavaType rootType) {",
                "-        return _newWriter(getSerializationConfig(), rootType, /*PrettyPrinter*/null);",
                "+        return _newWriter(serializationConfig(), rootType, /*PrettyPrinter*/null);",
                "     }",
                "@@ -2800,3 +2755,3 @@ public class ObjectMapper",
                "     public ObjectWriter writerWithDefaultPrettyPrinter() {",
                "-        SerializationConfig config = getSerializationConfig();",
                "+        SerializationConfig config = serializationConfig();",
                "         return _newWriter(config,",
                "@@ -2810,3 +2765,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(FilterProvider filterProvider) {",
                "-        return _newWriter(getSerializationConfig().withFilters(filterProvider));",
                "+        return _newWriter(serializationConfig().withFilters(filterProvider));",
                "     }",
                "@@ -2822,3 +2777,3 @@ public class ObjectMapper",
                "         _verifySchemaType(schema);",
                "-        return _newWriter(getSerializationConfig(), schema);",
                "+        return _newWriter(serializationConfig(), schema);",
                "     }",
                "@@ -2830,3 +2785,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(Base64Variant defaultBase64) {",
                "-        return _newWriter(getSerializationConfig().with(defaultBase64));",
                "+        return _newWriter(serializationConfig().with(defaultBase64));",
                "     }",
                "@@ -2838,3 +2793,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(CharacterEscapes escapes) {",
                "-        return _newWriter(getSerializationConfig()).with(escapes);",
                "+        return _newWriter(serializationConfig()).with(escapes);",
                "     }",
                "@@ -2846,3 +2801,3 @@ public class ObjectMapper",
                "     public ObjectWriter writer(ContextAttributes attrs) {",
                "-        return _newWriter(getSerializationConfig().with(attrs));",
                "+        return _newWriter(serializationConfig().with(attrs));",
                "     }",
                "@@ -2862,3 +2817,3 @@ public class ObjectMapper",
                "     public ObjectReader reader() {",
                "-        return _newReader(getDeserializationConfig()).with(_injectableValues);",
                "+        return _newReader(deserializationConfig()).with(_injectableValues);",
                "     }",
                "@@ -2873,3 +2828,3 @@ public class ObjectMapper",
                "     public ObjectReader reader(DeserializationFeature feature) {",
                "-        return _newReader(getDeserializationConfig().with(feature));",
                "+        return _newReader(deserializationConfig().with(feature));",
                "     }",
                "@@ -2885,3 +2840,3 @@ public class ObjectMapper",
                "             DeserializationFeature... other) {",
                "-        return _newReader(getDeserializationConfig().with(first, other));",
                "+        return _newReader(deserializationConfig().with(first, other));",
                "     }",
                "@@ -2900,3 +2855,3 @@ public class ObjectMapper",
                "         JavaType t = _typeFactory.constructType(valueToUpdate.getClass());",
                "-        return _newReader(getDeserializationConfig(), t, valueToUpdate,",
                "+        return _newReader(deserializationConfig(), t, valueToUpdate,",
                "                 null, _injectableValues);",
                "@@ -2909,3 +2864,3 @@ public class ObjectMapper",
                "     public ObjectReader readerFor(JavaType type) {",
                "-        return _newReader(getDeserializationConfig(), type, null,",
                "+        return _newReader(deserializationConfig(), type, null,",
                "                 null, _injectableValues);",
                "@@ -2918,3 +2873,3 @@ public class ObjectMapper",
                "     public ObjectReader readerFor(Class<?> type) {",
                "-        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,",
                "+        return _newReader(deserializationConfig(), _typeFactory.constructType(type), null,",
                "                 null, _injectableValues);",
                "@@ -2927,3 +2882,3 @@ public class ObjectMapper",
                "     public ObjectReader readerFor(TypeReference<?> type) {",
                "-        return _newReader(getDeserializationConfig(), _typeFactory.constructType(type), null,",
                "+        return _newReader(deserializationConfig(), _typeFactory.constructType(type), null,",
                "                 null, _injectableValues);",
                "@@ -2936,3 +2891,3 @@ public class ObjectMapper",
                "     public ObjectReader reader(JsonNodeFactory f) {",
                "-        return _newReader(getDeserializationConfig()).with(f);",
                "+        return _newReader(deserializationConfig()).with(f);",
                "     }",
                "@@ -2948,3 +2903,3 @@ public class ObjectMapper",
                "         _verifySchemaType(schema);",
                "-        return _newReader(getDeserializationConfig(), null, null,",
                "+        return _newReader(deserializationConfig(), null, null,",
                "                 schema, _injectableValues);",
                "@@ -2959,3 +2914,3 @@ public class ObjectMapper",
                "     public ObjectReader reader(InjectableValues injectableValues) {",
                "-        return _newReader(getDeserializationConfig(), null, null,",
                "+        return _newReader(deserializationConfig(), null, null,",
                "                 null, injectableValues);",
                "@@ -2968,3 +2923,3 @@ public class ObjectMapper",
                "     public ObjectReader readerWithView(Class<?> view) {",
                "-        return _newReader(getDeserializationConfig().withView(view));",
                "+        return _newReader(deserializationConfig().withView(view));",
                "     }",
                "@@ -2976,3 +2931,3 @@ public class ObjectMapper",
                "     public ObjectReader reader(Base64Variant defaultBase64) {",
                "-        return _newReader(getDeserializationConfig().with(defaultBase64));",
                "+        return _newReader(deserializationConfig().with(defaultBase64));",
                "     }",
                "@@ -2984,3 +2939,3 @@ public class ObjectMapper",
                "     public ObjectReader reader(ContextAttributes attrs) {",
                "-        return _newReader(getDeserializationConfig().with(attrs));",
                "+        return _newReader(deserializationConfig().with(attrs));",
                "     }",
                "@@ -3076,3 +3031,3 @@ public class ObjectMapper",
                "         // first: disable wrapping when writing",
                "-        SerializationConfig config = getSerializationConfig()",
                "+        SerializationConfig config = serializationConfig()",
                "                 .without(SerializationFeature.WRAP_ROOT_VALUE);",
                "@@ -3151,3 +3106,3 @@ public class ObjectMapper",
                "         }",
                "-        SerializationConfig config = getSerializationConfig()",
                "+        SerializationConfig config = serializationConfig()",
                "                 .without(SerializationFeature.WRAP_ROOT_VALUE);",
                "@@ -3233,3 +3188,3 @@ public class ObjectMapper",
                "         // 03-Oct-2017, tatu: Should be ok to pass \"empty\" generator settings...",
                "-        return _serializerProvider.createInstance(getSerializationConfig(),",
                "+        return _serializerProvider.createInstance(serializationConfig(),",
                "                 GeneratorSettings.empty(), _serializerFactory);",
                "@@ -3318,3 +3273,3 @@ public class ObjectMapper",
                "-            DeserializationConfig cfg = getDeserializationConfig();",
                "+            DeserializationConfig cfg = deserializationConfig();",
                "@@ -3394,3 +3349,3 @@ public class ObjectMapper",
                "     protected DefaultDeserializationContext createDeserializationContext(JsonParser p) {",
                "-        return _deserializationContext.createInstance(getDeserializationConfig(),",
                "+        return _deserializationContext.createInstance(deserializationConfig(),",
                "                 /* FormatSchema */ null, _injectableValues)",
                "@@ -3400,3 +3355,3 @@ public class ObjectMapper",
                "     protected DefaultDeserializationContext createDeserializationContext() {",
                "-        return _deserializationContext.createInstance(getDeserializationConfig(),",
                "+        return _deserializationContext.createInstance(deserializationConfig(),",
                "                 /* FormatSchema */ null, _injectableValues);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 3e22e4217..568db8640 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -5,2 +5,3 @@ import java.util.Locale;",
                " import java.util.TimeZone;",
                "+import java.util.function.Consumer;",
                "@@ -37,2 +38,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected final static BaseSettings DEFAULT_BASE_SETTINGS = BaseSettings.std();",
                "+",
                "     /*",
                "@@ -158,3 +161,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _streamFactory = streamFactory;",
                "-        _baseSettings = BaseSettings.std();",
                "+        _baseSettings = DEFAULT_BASE_SETTINGS;",
                "         _configOverrides = new ConfigOverrides();",
                "@@ -250,6 +253,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public ConfigOverrides configOverrides() {",
                "-        return _configOverrides;",
                "-    }",
                "-",
                "     public TokenStreamFactory streamFactory() {",
                "@@ -262,2 +261,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public AnnotationIntrospector annotationIntrospector() {",
                "+        return _baseSettings.getAnnotationIntrospector();",
                "+    }",
                "+",
                "     public ClassIntrospector classIntrospector() {",
                "@@ -491,2 +494,23 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing settings, config overrides",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method for changing config overrides for specific type, through",
                "+     * callback to specific handler.",
                "+     */",
                "+    public B withConfigOverrides(Class<?> forType,",
                "+            Consumer<MutableConfigOverride> handler) {",
                "+        handler.accept(_configOverrides.findOrCreateOverride(forType));",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B withAllConfigOverrides(Consumer<ConfigOverrides> handler) {",
                "+        handler.accept(_configOverrides);",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "@@ -497,2 +521,17 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method for replacing {@link AnnotationIntrospector} used by the",
                "+     * mapper instance to be built.",
                "+     * Note that doing this will replace the current introspector, which",
                "+     * may lead to unavailability of core Jackson annotations.",
                "+     * If you want to combine handling of multiple introspectors,",
                "+     * have a look at {@link com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair}.",
                "+     *",
                "+     * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
                "+     */",
                "+    public B setAnnotationIntrospector(AnnotationIntrospector intr) {",
                "+        _baseSettings = _baseSettings.withAnnotationIntrospector(intr);",
                "+        return _this();",
                "+    }",
                "+",
                "     public B typeFactory(TypeFactory f) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "index 5de340e5c..b56ed21dc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "@@ -518,5 +518,2 @@ public class SimpleModule",
                "         }",
                "-        if (_namingStrategy != null) {",
                "-            context.setNamingStrategy(_namingStrategy);",
                "-        }",
                "         if (_mixins != null) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/Module.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f556821c1356ff5fd37fb4dd92c6f6b5c9999c17",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518761979,
            "hunks": 4,
            "message": "Convert config override setting to go via MapperBuilder",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index aaae9088c..135bcd692 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -419,6 +419,7 @@ public class ObjectMapper",
                "      */",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                "+//    @SuppressWarnings(\"unchecked\")",
                "+//    public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                " //      public static <M extends ObjectMapper> MapperBuilder<> builder() {",
                "-        return (MapperBuilder<M,B>) new ObjectMapper.Builder(new JsonFactory());",
                "+    public static ObjectMapper.Builder builder() {",
                "+        return new ObjectMapper.Builder(new JsonFactory());",
                "     }",
                "@@ -1091,2 +1092,3 @@ public class ObjectMapper",
                "      */",
                "+    @Deprecated",
                "     public MutableConfigOverride configOverride(Class<?> type) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 03b9cee87..8b2b1a7e1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -518,3 +518,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public B withConfigOverrides(Class<?> forType,",
                "+    public B withConfigOverride(Class<?> forType,",
                "             Consumer<MutableConfigOverride> handler) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "844fcd434001b47365840da054d4e2108ab88f53",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518737386,
            "hunks": 17,
            "message": "try to fix java 9 compilation problem",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 179f2696a..d02ff950c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -168,3 +168,7 @@ public class ObjectMapper",
                "         public ObjectMapper build() {",
                "-            return new ObjectMapper(this);",
                "+            ObjectMapper m = new ObjectMapper(this);",
                "+            if (_modules != null) {",
                "+                m.registerModules(_modules.values());",
                "+            }",
                "+            return m;",
                "         }",
                "@@ -660,11 +664,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Convenience method for registering specified modules in order;",
                "-     * functionally equivalent to:",
                "-     *<pre>",
                "-     *   for (Module module : modules) {",
                "-     *      registerModule(module);",
                "-     *   }",
                "-     *</pre>",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper registerModules(Module... modules)",
                "@@ -677,11 +673,3 @@ public class ObjectMapper",
                "-    /**",
                "-     * Convenience method for registering specified modules in order;",
                "-     * functionally equivalent to:",
                "-     *<pre>",
                "-     *   for (Module module : modules) {",
                "-     *      registerModule(module);",
                "-     *   }",
                "-     *</pre>",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper registerModules(Iterable<? extends Module> modules)",
                "@@ -693,10 +681,3 @@ public class ObjectMapper",
                "     }",
                "-    ",
                "-    /**",
                "-     * Method for locating available methods, using JDK {@link ServiceLoader}",
                "-     * facility, along with module-provided SPI.",
                "-     *<p>",
                "-     * Note that method does not do any caching, so calls should be considered",
                "-     * potentially expensive.",
                "-     */",
                "+    @Deprecated",
                "     public static List<Module> findModules() {",
                "@@ -704,10 +685,3 @@ public class ObjectMapper",
                "     }",
                "-",
                "-    /**",
                "-     * Method for locating available methods, using JDK {@link ServiceLoader}",
                "-     * facility, along with module-provided SPI.",
                "-     *<p>",
                "-     * Note that method does not do any caching, so calls should be considered",
                "-     * potentially expensive.",
                "-     */",
                "+    @Deprecated",
                "     public static List<Module> findModules(ClassLoader classLoader)",
                "@@ -736,13 +710,3 @@ public class ObjectMapper",
                "     }",
                "-",
                "-    /**",
                "-     * Convenience method that is functionally equivalent to:",
                "-     *<code>",
                "-     *   mapper.registerModules(mapper.findModules());",
                "-     *</code>",
                "-     *<p>",
                "-     * As with {@link #findModules()}, no caching is done for modules, so care",
                "-     * needs to be taken to either create and share a single mapper instance;",
                "-     * or to cache introspected set of modules.",
                "-     */",
                "+    @Deprecated",
                "     public ObjectMapper findAndRegisterModules() {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 0da96c10e..e32cb8c07 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -5,10 +5,3 @@ import java.security.PrivilegedAction;",
                " import java.text.DateFormat;",
                "-import java.util.ArrayList;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.List;",
                "-import java.util.Locale;",
                "-import java.util.Map;",
                "-import java.util.Objects;",
                "-import java.util.ServiceLoader;",
                "-import java.util.TimeZone;",
                "+import java.util.*;",
                " import java.util.function.Consumer;",
                "@@ -74,3 +67,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    protected Map<Object, Module> _modules;",
                "+    protected Map<Object, com.fasterxml.jackson.databind.Module> _modules;",
                "@@ -581,3 +574,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public B addModule(Module module)",
                "+    public B addModule(com.fasterxml.jackson.databind.Module module)",
                "     {",
                "@@ -603,5 +596,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public B addModules(Module... modules)",
                "+    public B addModules(com.fasterxml.jackson.databind.Module... modules)",
                "     {",
                "-        for (Module module : modules) {",
                "+        for (com.fasterxml.jackson.databind.Module module : modules) {",
                "             addModule(module);",
                "@@ -611,5 +604,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public B addModules(Iterable<? extends Module> modules)",
                "+    public B addModules(Iterable<? extends com.fasterxml.jackson.databind.Module> modules)",
                "     {",
                "-        for (Module module : modules) {",
                "+        for (com.fasterxml.jackson.databind.Module module : modules) {",
                "             addModule(module);",
                "@@ -626,3 +619,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public static List<Module> findModules() {",
                "+    public static List<com.fasterxml.jackson.databind.Module> findModules() {",
                "         return findModules(null);",
                "@@ -637,7 +630,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public static List<Module> findModules(ClassLoader classLoader)",
                "+    public static List<com.fasterxml.jackson.databind.Module> findModules(ClassLoader classLoader)",
                "     {",
                "-        ArrayList<Module> modules = new ArrayList<Module>();",
                "-        ServiceLoader<Module> loader = secureGetServiceLoader(Module.class, classLoader);",
                "-        for (Module module : loader) {",
                "+        ArrayList<com.fasterxml.jackson.databind.Module> modules = new ArrayList<>();",
                "+        ServiceLoader<com.fasterxml.jackson.databind.Module> loader = secureGetServiceLoader(com.fasterxml.jackson.databind.Module.class, classLoader);",
                "+        for (com.fasterxml.jackson.databind.Module module : loader) {",
                "             modules.add(module);",
                "@@ -680,3 +673,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public B withModules(Consumer<Module> handler) {",
                "+    public B withModules(Consumer<com.fasterxml.jackson.databind.Module> handler) {",
                "         if (_modules != null) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9e2c2fb9c595813608f4110a4ac0d79c198f45ba",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519100293,
            "hunks": 91,
            "message": "Major refactoring: change module setup context to be based on builder, not mapper",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 9ef324aaf..0f753c5f6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -5,4 +5,2 @@ import java.lang.reflect.Type;",
                " import java.net.URL;",
                "-import java.security.AccessController;",
                "-import java.security.PrivilegedAction;",
                " import java.text.DateFormat;",
                "@@ -13,2 +11,3 @@ import java.util.concurrent.atomic.AtomicReference;",
                " import com.fasterxml.jackson.annotation.*;",
                "+",
                " import com.fasterxml.jackson.core.*;",
                "@@ -20,2 +19,3 @@ import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.fasterxml.jackson.core.util.*;",
                "+",
                " import com.fasterxml.jackson.databind.cfg.*;",
                "@@ -167,8 +167,10 @@ public class ObjectMapper",
                "         @Override",
                "-        public ObjectMapper build() {",
                "-            ObjectMapper m = new ObjectMapper(this);",
                "-            if (_modules != null) {",
                "-                m.registerModules(_modules.values());",
                "-            }",
                "-            return m;",
                "+        public ObjectMapper _constructMapper(MapperBuilderState state) {",
                "+            return new ObjectMapper(this);",
                "+        }",
                "+",
                "+        @Override",
                "+        public ModuleContextBase _constructModuleContext() {",
                "+            return new ModuleContextBase(this,",
                "+                    _configOverrides, baseSettings());",
                "         }",
                "@@ -324,5 +326,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle: constructing instance",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -426,4 +428,2 @@ public class ObjectMapper",
                "     public static <M extends ObjectMapper, B extends MapperBuilder<M,B>> MapperBuilder<M,B> builder() {",
                "-//      public static <M extends ObjectMapper> MapperBuilder<> builder() {",
                "-//    public static ObjectMapper.Builder builder() {",
                "         return (MapperBuilder<M,B>) jsonBuilder();",
                "@@ -441,5 +441,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Versioned impl",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -456,277 +456,7 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "-    /* Module registration, discovery",
                "-    /**********************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Method for registering a module that can extend functionality",
                "-     * provided by this mapper; for example, by adding providers for",
                "-     * custom serializers and deserializers.",
                "-     * ",
                "-     * @param module Module to register",
                "-     */",
                "-    @Deprecated",
                "-    public ObjectMapper registerModule(Module module)",
                "-    {",
                "-        // Let's ensure we have access to name and version information, ",
                "-        // even if we do not have immediate use for either. This way we know",
                "-        // that they will be available from beginning",
                "-        String name = module.getModuleName();",
                "-        if (name == null) {",
                "-            throw new IllegalArgumentException(\"Module without defined name\");",
                "-        }",
                "-        Version version = module.version();",
                "-        if (version == null) {",
                "-            throw new IllegalArgumentException(\"Module without defined version\");",
                "-        }",
                "-        // And then call registration",
                "-        module.setupModule(new Module.SetupContext()",
                "-        {",
                "-            // // // Accessors",
                "-",
                "-            @Override",
                "-            public Version getMapperVersion() {",
                "-                return version();",
                "-            }",
                "-",
                "-            @Override",
                "-            public Object getOwner() {",
                "-                return ObjectMapper.this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getFormatName() {",
                "-                return _streamFactory.getFormatName();",
                "-            }",
                "-",
                "-            @Override",
                "-            public TokenStreamFactory tokenStreamFactory() {",
                "-                return _streamFactory;",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public TypeFactory typeFactory() {",
                "-                return _typeFactory;",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public boolean isEnabled(MapperFeature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean isEnabled(DeserializationFeature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public boolean isEnabled(SerializationFeature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean isEnabled(JsonFactory.Feature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean isEnabled(JsonParser.Feature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean isEnabled(JsonGenerator.Feature f) {",
                "-                return ObjectMapper.this.isEnabled(f);",
                "-            }",
                "-",
                "-            // // // Mutant accessors",
                "-",
                "-            @Override",
                "-            public MutableConfigOverride configOverride(Class<?> type) {",
                "-                return ObjectMapper.this.configOverride(type);",
                "-            }",
                "-",
                "-            // // // Methods for registering handlers: deserializers",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addDeserializers(Deserializers d) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withAdditionalDeserializers(d);",
                "-                _deserializationContext = _deserializationContext.with(df);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withAdditionalKeyDeserializers(kd);",
                "-                _deserializationContext = _deserializationContext.with(df);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withDeserializerModifier(modifier);",
                "-                _deserializationContext = _deserializationContext.with(df);",
                "-                return this;",
                "-            }",
                "-            ",
                "-            // // // Methods for registering handlers: serializers",
                "-            ",
                "-            @Override",
                "-            public Module.SetupContext addSerializers(Serializers s) {",
                "-                _serializerFactory = _serializerFactory.withAdditionalSerializers(s);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addKeySerializers(Serializers s) {",
                "-                _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);",
                "-                return this;",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public Module.SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "-                _serializerFactory = _serializerFactory.withSerializerModifier(modifier);",
                "-                return this;",
                "-            }",
                "-",
                "-            // // // Methods for registering handlers: other",
                "-            ",
                "-            @Override",
                "-            public Module.SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withAbstractTypeResolver(resolver);",
                "-                _deserializationContext = _deserializationContext.with(df);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addTypeModifier(TypeModifier modifier) {",
                "-                TypeFactory f = _typeFactory;",
                "-                f = f.withModifier(modifier);",
                "-                setTypeFactory(f);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "-                DeserializerFactory df = _deserializationContext._factory.withValueInstantiators(instantiators);",
                "-                _deserializationContext = _deserializationContext.with(df);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext insertAnnotationIntrospector(AnnotationIntrospector ai) {",
                "-                _deserializationConfig = _deserializationConfig.withInsertedAnnotationIntrospector(ai);",
                "-                _serializationConfig = _serializationConfig.withInsertedAnnotationIntrospector(ai);",
                "-                return this;",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public Module.SetupContext appendAnnotationIntrospector(AnnotationIntrospector ai) {",
                "-                _deserializationConfig = _deserializationConfig.withAppendedAnnotationIntrospector(ai);",
                "-                _serializationConfig = _serializationConfig.withAppendedAnnotationIntrospector(ai);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext registerSubtypes(Class<?>... subtypes) {",
                "-                ObjectMapper.this.registerSubtypes(subtypes);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext registerSubtypes(NamedType... subtypes) {",
                "-                ObjectMapper.this.registerSubtypes(subtypes);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext registerSubtypes(Collection<Class<?>> subtypes) {",
                "-                ObjectMapper.this.registerSubtypes(subtypes);",
                "-                return this;",
                "-            }",
                "-",
                "-            @Override",
                "-            public Module.SetupContext setMixIn(Class<?> target, Class<?> mixinSource) {",
                "-                addMixIn(target, mixinSource);",
                "-                return this;",
                "-            }",
                "-            ",
                "-            @Override",
                "-            public Module.SetupContext addHandler(DeserializationProblemHandler handler) {",
                "-                addHandler(handler);",
                "-                return this;",
                "-            }",
                "-        });",
                "-        return this;",
                "-    }",
                "-",
                "-    @Deprecated",
                "-    public ObjectMapper registerModules(Module... modules)",
                "-    {",
                "-        for (Module module : modules) {",
                "-            registerModule(module);",
                "-        }",
                "-        return this;",
                "-    }",
                "-",
                "-    @Deprecated",
                "-    public ObjectMapper registerModules(Iterable<? extends Module> modules)",
                "-    {",
                "-        for (Module module : modules) {",
                "-            registerModule(module);",
                "-        }",
                "-        return this;",
                "-    }",
                "-",
                "-    @Deprecated",
                "-    public static List<Module> findModules() {",
                "-        return findModules(null);",
                "-    }",
                "-    @Deprecated",
                "-    public static List<Module> findModules(ClassLoader classLoader)",
                "-    {",
                "-        ArrayList<Module> modules = new ArrayList<Module>();",
                "-        ServiceLoader<Module> loader = secureGetServiceLoader(Module.class, classLoader);",
                "-        for (Module module : loader) {",
                "-            modules.add(module);",
                "-        }",
                "-        return modules;",
                "-    }",
                "-",
                "-    private static <T> ServiceLoader<T> secureGetServiceLoader(final Class<T> clazz, final ClassLoader classLoader) {",
                "-        final SecurityManager sm = System.getSecurityManager();",
                "-        if (sm == null) {",
                "-            return (classLoader == null) ?",
                "-                    ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);",
                "-        }",
                "-        return AccessController.doPrivileged(new PrivilegedAction<ServiceLoader<T>>() {",
                "-            @Override",
                "-            public ServiceLoader<T> run() {",
                "-                return (classLoader == null) ?",
                "-                        ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);",
                "-            }",
                "-        });",
                "-    }",
                "-    /*",
                "-    @Deprecated",
                "-    public ObjectMapper findAndRegisterModules() {",
                "-        return registerModules(findModules());",
                "-    }",
                "-    */",
                "-",
                "-    /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration: main config object access",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "-    /**",
                "-     * Method that returns the shared default {@link SerializationConfig}",
                "-     * object that defines configuration settings for serialization.",
                "-     *<p>",
                "-     * Note that since instances are immutable, you can NOT change settings",
                "-     * by accessing an instance and calling methods: this will simply create",
                "-     * new instance of config object.",
                "-     */",
                "     public SerializationConfig serializationConfig() {",
                "@@ -735,11 +465,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that returns",
                "-     * the shared default {@link DeserializationConfig} object",
                "-     * that defines configuration settings for deserialization.",
                "-     *<p>",
                "-     * Note that since instances are immutable, you can NOT change settings",
                "-     * by accessing an instance and calling methods: this will simply create",
                "-     * new instance of config object.",
                "-     */",
                "     public DeserializationConfig deserializationConfig() {",
                "@@ -770,14 +491,7 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration: ser/deser factory, provider access",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "-    /**",
                "-     * Method for getting current {@link SerializerFactory}.",
                "-      *<p>",
                "-     * Note that since instances are immutable, you can NOT change settings",
                "-     * by accessing an instance and calling methods: this will simply create",
                "-     * new instance of factory object.",
                "-     */",
                "     public SerializerFactory getSerializerFactory() {",
                "@@ -786,9 +500,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Accessor for the \"blueprint\" (or, factory) instance, from which instances",
                "-     * are created by calling {@link DefaultSerializerProvider#createInstance}.",
                "-     * Note that returned instance cannot be directly used as it is not properly",
                "-     * configured: to get a properly configured instance to call, use",
                "-     * {@link #serializerProviderInstance()} instead.",
                "-     */",
                "     public SerializerProvider getSerializerProvider() {",
                "@@ -807,5 +514,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration: mix-in annotations",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -822,2 +529,3 @@ public class ObjectMapper",
                "      */",
                "+    @Deprecated",
                "     public ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource)",
                "@@ -834,5 +542,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, introspection",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -846,13 +554,6 @@ public class ObjectMapper",
                "-    @Deprecated",
                "-    public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) {",
                "-        _serializationConfig = _serializationConfig.with(ai);",
                "-        _deserializationConfig = _deserializationConfig.with(ai);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration: global-default/per-type override settings",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -900,5 +601,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Type information configuration",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1021,2 +722,8 @@ public class ObjectMapper",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Subtype resolution",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "     /**",
                "@@ -1049,5 +756,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, basic type handling",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1075,5 +782,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, basic type handling",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1087,11 +794,2 @@ public class ObjectMapper",
                "-    @Deprecated",
                "-    public ObjectMapper setTypeFactory(TypeFactory f)",
                "-    {",
                "-        _typeFactory = f;",
                "-        _deserializationConfig = _deserializationConfig.with(f);",
                "-        _serializationConfig = _serializationConfig.with(f);",
                "-        return this;",
                "-    }",
                "-",
                "     /**",
                "@@ -1106,5 +804,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, deserialization",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1125,16 +823,6 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for adding specified {@link DeserializationProblemHandler}",
                "-     * to be used for handling specific problems during deserialization.",
                "-     */",
                "-    @Deprecated",
                "-    public ObjectMapper addHandler(DeserializationProblemHandler h) {",
                "-        _deserializationConfig = _deserializationConfig.withHandler(h);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, other",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1153,5 +841,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, simple features: MapperFeature",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1182,5 +870,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, simple features: SerializationFeature",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1207,5 +895,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, simple features: DeserializationFeature",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1232,5 +920,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration, accessing features",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1274,6 +962,6 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Public API: constructing Parsers that are properly linked",
                "     /* to `ObjectReadContext`",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1424,6 +1112,6 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Public API: constructing Generator that are properly linked",
                "     /* to `ObjectWriteContext`",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1492,5 +1180,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Public API deserialization, main methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1681,6 +1369,6 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Public API: deserialization",
                "     /* (mapping from token stream to Java types)",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -1849,6 +1537,6 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Public API serialization",
                "     /* (mapping from Java types to token streams)",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -3028,5 +2716,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Internal methods for serialization, overridable",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -3050,5 +2738,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Internal methods for deserialization, overridable",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -3129,3 +2817,2 @@ public class ObjectMapper",
                "             final JavaType valueType = JSON_NODE_TYPE;",
                "-",
                "             DeserializationConfig cfg = deserializationConfig();",
                "@@ -3172,3 +2859,2 @@ public class ObjectMapper",
                "                     expSimpleName, p.currentToken());",
                "-            ",
                "         }",
                "@@ -3269,5 +2955,5 @@ public class ObjectMapper",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Internal factory methods for ObjectReaders/-Writers",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -3316,7 +3002,7 @@ public class ObjectMapper",
                "     }",
                "-    ",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Internal methods, other",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 1f9102adc..9d972ba31 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -7,3 +7,3 @@ import java.util.*;",
                " import java.util.function.Consumer;",
                "-import java.util.function.Function;",
                "+import java.util.function.UnaryOperator;",
                "@@ -262,3 +262,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************************",
                "-    /* Build methods",
                "+    /* Methods for actual build process",
                "     /**********************************************************************",
                "@@ -269,4 +269,42 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public abstract M build();",
                "+    public M build() {",
                "+        MapperBuilderState state = _constructState();",
                "+        if (_modules != null) {",
                "+            _registerModules(_modules.values());",
                "+        }",
                "+        return _constructMapper(state);",
                "+    }",
                "+",
                "+    /**",
                "+     * Method usually called during {@link #build}, to give modules change to",
                "+     * actually make changes, via context we construct (usually by calling",
                "+     * {@link #_constructModuleContext}).",
                "+     */",
                "+    public void _registerModules(Collection<? extends Module> modules) {",
                "+        ModuleContextBase ctxt = _constructModuleContext();",
                "+        for (Module module : _modules.values()) {",
                "+            module.setupModule(ctxt);",
                "+        }",
                "+        ctxt.applyChanges();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method usually called during {@link #build},",
                "+     * after applying all changes, to construct actual typed mapper instance.",
                "+     */",
                "+    public abstract M _constructMapper(MapperBuilderState state);",
                "+    public abstract ModuleContextBase _constructModuleContext();",
                "+    ",
                "+    public MapperBuilderState _constructState() {",
                "+        // !!! TBI",
                "+        return null;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Secondary factory methods",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "     public SerializationConfig buildSerializationConfig(MixInHandler mixins,",
                "@@ -315,3 +353,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    ",
                "+",
                "     public BaseSettings baseSettings() {",
                "@@ -615,3 +653,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "      */",
                "-    public B changeDefaultVisibility(Function<VisibilityChecker,VisibilityChecker> handler) {",
                "+    public B changeDefaultVisibility(UnaryOperator<VisibilityChecker> handler) {",
                "         VisibilityChecker oldV = _configOverrides.getDefaultVisibility();",
                "@@ -759,2 +797,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B baseSettings(BaseSettings b) {",
                "+        _baseSettings = b;",
                "+        return _this();",
                "+    }",
                "+",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilderState.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilderState.java",
                "new file mode 100644",
                "index 000000000..11a806101",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilderState.java",
                "@@ -0,0 +1,11 @@",
                "+package com.fasterxml.jackson.databind.cfg;",
                "+",
                "+/**",
                "+ * Interface for State object used for preserving initial state of a",
                "+ * {@link MapperBuilder} before modules are configured and resulting",
                "+ * {@link com.fasterxml.jackson.databind.ObjectMapper} isn't constructed.",
                "+ * It is passed to mapper to allow \"re-building\" via newly created builder.",
                "+ */",
                "+public abstract class MapperBuilderState {",
                "+",
                "+}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "index 5b2c7eccc..6dced3c58 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "@@ -15,3 +15,3 @@ import com.fasterxml.jackson.databind.type.TypeModifier;",
                "-public abstract class ModuleContextBase<M extends ObjectMapper>",
                "+public class ModuleContextBase",
                "     implements Module.SetupContext",
                "@@ -20,5 +20,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "-    protected final MapperBuilder<M,?> _builder;",
                "-",
                "-    protected final TokenStreamFactory _streamFactory;",
                "+    protected final MapperBuilder<?,?> _builder;",
                "@@ -36,4 +34,10 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "-    protected ModuleContextBase(MapperBuilder<M,?> b,",
                "-            ConfigOverrides configOverrides)",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Life-cycle",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    public ModuleContextBase(MapperBuilder<?,?> b,",
                "+            ConfigOverrides configOverrides, BaseSettings base)",
                "     {",
                "@@ -41,8 +45,23 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "-        _streamFactory = b.streamFactory();",
                "-        _deserializerFactory = b.deserializerFactory();",
                "-        _serializerFactory = b.serializerFactory();",
                "-",
                "         _configOverrides = configOverrides;",
                "-        _baseSettings = b.baseSettings();",
                "+        _baseSettings = base;",
                "+",
                "+        _deserializerFactory = null;",
                "+        _serializerFactory = null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Method called after all changes have been applied through this context, to",
                "+     * propagate any buffered or pending changes back (some may have been applied",
                "+     * earlier)",
                "+     */",
                "+    public void applyChanges() {",
                "+        if (_deserializerFactory != null) {",
                "+            _builder.deserializerFactory(_deserializerFactory);",
                "+        }",
                "+        if (_serializerFactory != null) {",
                "+            _builder.serializerFactory(_serializerFactory);",
                "+        }",
                "+        // could keep track of changes/no-changes, but for now:",
                "+        _builder.baseSettings(_baseSettings);",
                "     }",
                "@@ -62,3 +81,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public String getFormatName() {",
                "-        return _streamFactory.getFormatName();",
                "+        return streamFactory().getFormatName();",
                "     }",
                "@@ -83,3 +102,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public TokenStreamFactory tokenStreamFactory() {",
                "-        return _streamFactory;",
                "+        return streamFactory();",
                "     }",
                "@@ -109,3 +128,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public boolean isEnabled(TokenStreamFactory.Feature f) {",
                "-        return _streamFactory.isEnabled(f);",
                "+        return streamFactory().isEnabled(f);",
                "     }",
                "@@ -130,3 +149,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addDeserializers(Deserializers d) {",
                "-        _deserializerFactory = _deserializerFactory.withAdditionalDeserializers(d);",
                "+        _deserializerFactory = deserializerFactory().withAdditionalDeserializers(d);",
                "         return this;",
                "@@ -136,3 +155,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addKeyDeserializers(KeyDeserializers kd) {",
                "-        _deserializerFactory = _deserializerFactory.withAdditionalKeyDeserializers(kd);",
                "+        _deserializerFactory = deserializerFactory().withAdditionalKeyDeserializers(kd);",
                "         return this;",
                "@@ -142,3 +161,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addDeserializerModifier(BeanDeserializerModifier modifier) {",
                "-        _deserializerFactory = _deserializerFactory.withDeserializerModifier(modifier);",
                "+        _deserializerFactory = deserializerFactory().withDeserializerModifier(modifier);",
                "         return this;",
                "@@ -148,3 +167,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addValueInstantiators(ValueInstantiators instantiators) {",
                "-        _deserializerFactory = _deserializerFactory.withValueInstantiators(instantiators);",
                "+        _deserializerFactory = deserializerFactory().withValueInstantiators(instantiators);",
                "         return this;",
                "@@ -160,3 +179,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addSerializers(Serializers s) {",
                "-        _serializerFactory = _serializerFactory.withAdditionalSerializers(s);",
                "+        _serializerFactory = serializerFactory().withAdditionalSerializers(s);",
                "         return this;",
                "@@ -166,3 +185,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addKeySerializers(Serializers s) {",
                "-        _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);",
                "+        _serializerFactory = serializerFactory().withAdditionalKeySerializers(s);",
                "         return this;",
                "@@ -172,3 +191,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addSerializerModifier(BeanSerializerModifier modifier) {",
                "-        _serializerFactory = _serializerFactory.withSerializerModifier(modifier);",
                "+        _serializerFactory = serializerFactory().withSerializerModifier(modifier);",
                "         return this;",
                "@@ -184,3 +203,3 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     public Module.SetupContext addAbstractTypeResolver(AbstractTypeResolver resolver) {",
                "-        _deserializerFactory = _deserializerFactory.withAbstractTypeResolver(resolver);",
                "+        _deserializerFactory = deserializerFactory().withAbstractTypeResolver(resolver);",
                "         return this;",
                "@@ -253,2 +272,26 @@ public abstract class ModuleContextBase<M extends ObjectMapper>",
                "     }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Internal/sub-class helper methods",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    protected TokenStreamFactory streamFactory() {",
                "+        return _builder.streamFactory();",
                "+    }",
                "+",
                "+    protected DeserializerFactory deserializerFactory() {",
                "+        if (_deserializerFactory == null) {",
                "+            _deserializerFactory = _builder.deserializerFactory();",
                "+        }",
                "+        return _deserializerFactory;",
                "+    }",
                "+",
                "+    protected SerializerFactory serializerFactory() {",
                "+        if (_serializerFactory == null) {",
                "+            _serializerFactory = _builder.serializerFactory();",
                "+        }",
                "+        return _serializerFactory;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilderState.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilderState.java, src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a5fabe1c151e4e8b9dbea0dc828546624f401771",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517546982,
            "hunks": 15,
            "message": "more mapper building",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 253a0d83a..2c6913282 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -67,3 +67,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Factories for framework itself, serialization",
                "+    /* Factories for serialization",
                "     /**********************************************************",
                "@@ -78,5 +78,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected FilterProvider _filterProvider;",
                "+",
                "     /*",
                "     /**********************************************************",
                "-    /* Factories for framework itself, deserialization",
                "+    /* Factories for deserialization",
                "     /**********************************************************",
                "@@ -146,2 +148,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "+        _streamFactory = streamFactory;",
                "         _baseSettings = BaseSettings.std();",
                "@@ -151,4 +154,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserFeatures = DEFAULT_DESER_FEATURES;",
                "-",
                "-        _streamFactory = streamFactory;",
                "+        // Some overrides we may need based on format",
                "+        if (streamFactory.requiresPropertyOrdering()) {",
                "+            _mapperFeatures |= MapperFeature.SORT_PROPERTIES_ALPHABETICALLY.getMask();",
                "+        }",
                "@@ -159,2 +164,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _serializerProvider = null;",
                "+        _filterProvider = null;",
                "@@ -162,3 +168,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserializationContext = null;",
                "-        //        _mapperFeatures = MapperFeature;",
                "     }",
                "@@ -167,2 +172,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "+        _streamFactory = base._streamFactory;",
                "         _baseSettings = base._baseSettings;",
                "@@ -173,4 +179,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-        _streamFactory = base._streamFactory;",
                "-",
                "         _classIntrospector = base._classIntrospector;",
                "@@ -180,2 +184,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _serializerProvider = base._serializerProvider;",
                "+        _filterProvider = base._filterProvider;",
                "@@ -282,2 +287,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public FilterProvider filterProvider() {",
                "+        return _filterProvider;",
                "+    }",
                "+    ",
                "     /*",
                "@@ -440,2 +449,15 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Method for configuring this mapper to use specified {@link FilterProvider} for",
                "+     * mapping Filter Ids to actual filter instances.",
                "+     *<p>",
                "+     * Note that usually it is better to use method in {@link ObjectWriter}, but sometimes",
                "+     * this method is more convenient. For example, some frameworks only allow configuring",
                "+     * of ObjectMapper instances and not {@link ObjectWriter}s.",
                "+     */",
                "+    public B filterProvider(FilterProvider prov) {",
                "+        _filterProvider = prov;",
                "+        return _this();",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index ab74cfcad..66ac0979a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -462,8 +462,2 @@ public class ObjectMapper",
                "         _deserializationConfig = builder.buildDeserializationConfig(_mixIns, rootNames, _configOverrides);",
                "-",
                "-        // Some overrides we may need",
                "-        final boolean needOrder = _streamFactory.requiresPropertyOrdering();",
                "-        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {",
                "-            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);",
                "-        }",
                "     }",
                "@@ -1431,31 +1425,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for removing all registered {@link DeserializationProblemHandler}s",
                "-     * instances from this mapper.",
                "-     */",
                "-    public ObjectMapper clearProblemHandlers() {",
                "-        _deserializationConfig = _deserializationConfig.withNoProblemHandlers();",
                "-        return this;",
                "-    }",
                "-",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Configuration, serialization",
                "-    /**********************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Method for configuring this mapper to use specified {@link FilterProvider} for",
                "-     * mapping Filter Ids to actual filter instances.",
                "-     *<p>",
                "-     * Note that usually it is better to use method {@link #writer(FilterProvider)};",
                "-     * however, sometimes",
                "-     * this method is more convenient. For example, some frameworks only allow configuring",
                "-     * of ObjectMapper instances and not {@link ObjectWriter}s.",
                "-     */",
                "-    public ObjectMapper setFilterProvider(FilterProvider filterProvider) {",
                "-        _serializationConfig = _serializationConfig.withFilters(filterProvider);",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index 07fb26daf..ec153fe20 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -122,3 +122,3 @@ public final class SerializationConfig",
                "         _serFeatures = serFeatures;",
                "-        _filterProvider = null;",
                "+        _filterProvider = b.filterProvider();",
                "         _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b46230c63dec933cb46e35aee0328e091d9b63cb",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518675357,
            "hunks": 68,
            "message": "start adding module registration via mapper builder",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "index 533f44788..4d89489ca 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "@@ -323,16 +323,17 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature that determines whether multiple registrations of same module",
                "-     * should be ignored or not; if enabled, only the first registration call",
                "-     * results in module being called, and possible duplicate calls are silently",
                "-     * ignored; if disabled, no checking is done and all registration calls are",
                "-     * dispatched to module.",
                "+     * are prevented or not: if enabled, later registrations of \"same\" module",
                "+     * will replace earlier ones (or, be ignored, depending on exact call);",
                "+     * If disabled, no checking is done and all registrations are processed in",
                "+     * order they are made.",
                "      *<p>",
                "-     * Definition of \"same module\" is based on using {@link Module#getTypeId()};",
                "-     * modules with same non-null <code>type id</code> are considered same for",
                "-     * purposes of duplicate registration. This also avoids having to keep track",
                "-     * of actual module instances; only ids will be kept track of (and only if",
                "-     * this feature is enabled).",
                "+     * Definition of \"same module\" is based on using {@link Module#getRegistrationId()};",
                "+     * modules with same <code>registration id</code> are considered same for",
                "+     * purposes of duplicate registration.",
                "      *<p>",
                "-     * Feature is enabled by default.",
                "+     * Feature is enabled by default so that only one instance of \"same\" module is allowed",
                "+     * and latest addition sticks (in case they are configured differently).",
                "+     *",
                "+     * @since 3.0",
                "      */",
                "-    IGNORE_DUPLICATE_MODULE_REGISTRATIONS(true),",
                "+    PREVENT_MULTIPLE_MODULE_REGISTRATIONS(true),",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index 5742604ba..6e930d972 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -50,14 +50,13 @@ public abstract class Module",
                "      * instances are considered to be of same type, for purpose of preventing",
                "-     * multiple registrations of \"same type of\" module",
                "-     * (see {@link com.fasterxml.jackson.databind.MapperFeature#IGNORE_DUPLICATE_MODULE_REGISTRATIONS})",
                "-     * If `null` is returned, every instance is considered unique.",
                "-     * If non-null value is returned, equality of id Objects is used to check whether",
                "-     * modules should be considered to be \"of same type\"",
                "+     * multiple registrations of \"same\" module",
                "+     * (see {@link com.fasterxml.jackson.databind.MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS})",
                "      *<p>",
                "      * Default implementation returns value of class name ({@link Class#getName}).",
                "+     *",
                "+     * @since 3.0",
                "      */",
                "-    public Object getTypeId() {",
                "+    public Object getRegistrationId() {",
                "         return getClass().getName();",
                "     }",
                "-    ",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 2d79e8333..997e0d112 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -295,4 +295,4 @@ public class ObjectMapper",
                "     /**",
                "-     * Set of module types (as per {@link Module#getTypeId()} that have been",
                "-     * registered; kept track of iff {@link MapperFeature#IGNORE_DUPLICATE_MODULE_REGISTRATIONS}",
                "+     * Set of module types (as per {@link Module#getRegistrationId()} that have been",
                "+     * registered; kept track of iff {@link MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS}",
                "      * is enabled, so that duplicate registration calls can be ignored",
                "@@ -301,3 +301,3 @@ public class ObjectMapper",
                "     protected Set<Object> _registeredModuleTypes;",
                "-    ",
                "+",
                "     /*",
                "@@ -469,4 +469,4 @@ public class ObjectMapper",
                "     {",
                "-        if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {",
                "-            Object typeId = module.getTypeId();",
                "+        if (isEnabled(MapperFeature.PREVENT_MULTIPLE_MODULE_REGISTRATIONS)) {",
                "+            Object typeId = module.getRegistrationId();",
                "             if (typeId != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 5fd646fae..607d6140a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -2,5 +2,12 @@ package com.fasterxml.jackson.databind.cfg;",
                "+import java.security.AccessController;",
                "+import java.security.PrivilegedAction;",
                " import java.text.DateFormat;",
                "+import java.util.ArrayList;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                " import java.util.Locale;",
                "+import java.util.Map;",
                " import java.util.Objects;",
                "+import java.util.ServiceLoader;",
                " import java.util.TimeZone;",
                "@@ -57,3 +64,14 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     protected final ConfigOverrides _configOverrides;",
                "-    ",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Modules",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Modules registered for addition, indexed by registration id.",
                "+     */",
                "+    protected Map<Object, Module> _modules;",
                "+",
                "     /*",
                "@@ -543,5 +561,130 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "+    /* Module registration, discovery, access",
                "+    /**********************************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method that will drop all modules added (via {@link #addModule} and similar",
                "+     * calls) to this builder.",
                "+     */",
                "+    public B removeAllModules() {",
                "+        _modules = null;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method will add given module to be registered when mapper is built, possibly",
                "+     * replacing an earlier instance of the module (as specified by its",
                "+     * {@link Module#getRegistrationId()}), if",
                "+     * {@link MapperFeature#PREVENT_MULTIPLE_MODULE_REGISTRATIONS} is enabled.",
                "+     */",
                "+    public B addModule(Module module)",
                "+    {",
                "+        if (module.getModuleName() == null) {",
                "+            throw new IllegalArgumentException(\"Module without defined name\");",
                "+        }",
                "+        if (module.version() == null) {",
                "+            throw new IllegalArgumentException(\"Module without defined version\");",
                "+        }",
                "+        final boolean preventDups = MapperFeature.PREVENT_MULTIPLE_MODULE_REGISTRATIONS.enabledIn(_mapperFeatures);",
                "+        // If dups are ok we still need a key, but just need to ensure it is unique so:",
                "+        final Object moduleId = preventDups ? module.getRegistrationId() : new Object();",
                "+        if (_modules == null) {",
                "+            _modules = new LinkedHashMap<>();",
                "+        } else if (preventDups) {",
                "+            _modules.remove(moduleId);",
                "+        }",
                "+        _modules.put(moduleId, module);",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B addModules(Module... modules)",
                "+    {",
                "+        for (Module module : modules) {",
                "+            addModule(module);",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B addModules(Iterable<? extends Module> modules)",
                "+    {",
                "+        for (Module module : modules) {",
                "+            addModule(module);",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for locating available methods, using JDK {@link ServiceLoader}",
                "+     * facility, along with module-provided SPI.",
                "+     *<p>",
                "+     * Note that method does not do any caching, so calls should be considered",
                "+     * potentially expensive.",
                "+     */",
                "+    public static List<Module> findModules() {",
                "+        return findModules(null);",
                "+    }",
                "+",
                "+    /**",
                "+     * Method for locating available methods, using JDK {@link ServiceLoader}",
                "+     * facility, along with module-provided SPI.",
                "+     *<p>",
                "+     * Note that method does not do any caching, so calls should be considered",
                "+     * potentially expensive.",
                "+     */",
                "+    public static List<Module> findModules(ClassLoader classLoader)",
                "+    {",
                "+        ArrayList<Module> modules = new ArrayList<Module>();",
                "+        ServiceLoader<Module> loader = secureGetServiceLoader(Module.class, classLoader);",
                "+        for (Module module : loader) {",
                "+            modules.add(module);",
                "+        }",
                "+        return modules;",
                "+    }",
                "+",
                "+    private static <T> ServiceLoader<T> secureGetServiceLoader(final Class<T> clazz, final ClassLoader classLoader) {",
                "+        final SecurityManager sm = System.getSecurityManager();",
                "+        if (sm == null) {",
                "+            return (classLoader == null) ?",
                "+                    ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);",
                "+        }",
                "+        return AccessController.doPrivileged(new PrivilegedAction<ServiceLoader<T>>() {",
                "+            @Override",
                "+            public ServiceLoader<T> run() {",
                "+                return (classLoader == null) ?",
                "+                        ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "+    /**",
                "+     * Convenience method that is functionally equivalent to:",
                "+     *<code>",
                "+     *   addModules(builder.findModules());",
                "+     *</code>",
                "+     *<p>",
                "+     * As with {@link #findModules()}, no caching is done for modules, so care",
                "+     * needs to be taken to either create and share a single mapper instance;",
                "+     * or to cache introspected set of modules.",
                "+     */",
                "+    public B findAndAddModules() {",
                "+        return addModules(findModules());",
                "+    }",
                "+",
                "+    /**",
                "+     * \"Accessor\" method that will expose set of registered modules, in addition",
                "+     * order, to given handler.",
                "+     */",
                "+    public B withModules(Consumer<Module> handler) {",
                "+        if (_modules != null) {",
                "+            _modules.values().forEach(handler);",
                "+        }",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************************",
                "     /* Changing factories/handlers, general",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
                "index 123cf6be9..436a280a0 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
                "@@ -27,4 +27,2 @@ public abstract class ContainerDeserializerBase<T>",
                "      * Handler we need for dealing with nulls.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -36,4 +34,2 @@ public abstract class ContainerDeserializerBase<T>",
                "      * or not. If null, left to global defaults.",
                "-     *",
                "-     * @since 2.9 (demoted from sub-classes where added in 2.7)",
                "      */",
                "@@ -44,4 +40,2 @@ public abstract class ContainerDeserializerBase<T>",
                "      * content values should be skipped (instead of being possibly converted).",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -62,5 +56,2 @@ public abstract class ContainerDeserializerBase<T>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected ContainerDeserializerBase(ContainerDeserializerBase<?> base) {",
                "@@ -69,5 +60,2 @@ public abstract class ContainerDeserializerBase<T>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected ContainerDeserializerBase(ContainerDeserializerBase<?> base,",
                "@@ -87,6 +75,6 @@ public abstract class ContainerDeserializerBase<T>",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public JavaType getValueType() { return _containerType; }",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public Boolean supportsUpdate(DeserializationConfig config) {",
                "@@ -128,5 +116,2 @@ public abstract class ContainerDeserializerBase<T>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     @Override",
                "@@ -136,3 +121,3 @@ public abstract class ContainerDeserializerBase<T>",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public AccessPattern getEmptyAccessPattern() {",
                "@@ -143,3 +128,3 @@ public abstract class ContainerDeserializerBase<T>",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "index b56ed21dc..1704ad7bd 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
                "@@ -42,3 +42,3 @@ public class SimpleModule",
                " {",
                "-    private static final long serialVersionUID = 1L; // 2.5.0",
                "+    private static final long serialVersionUID = 3L;",
                "@@ -47,2 +47,10 @@ public class SimpleModule",
                "+    /**",
                "+     * Unique id generated to avoid instances from ever matching so all",
                "+     * registrations succeed.",
                "+     *",
                "+     * @since 3.0",
                "+     */",
                "+    protected final Object _id;",
                "+    ",
                "     protected SimpleSerializers _serializers = null;",
                "@@ -67,10 +75,4 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.2",
                "-     */",
                "     protected BeanDeserializerModifier _deserializerModifier = null;",
                "-    /**",
                "-     * @since 2.2",
                "-     */",
                "     protected BeanSerializerModifier _serializerModifier = null;",
                "@@ -88,11 +90,8 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.3",
                "-     */",
                "     protected PropertyNamingStrategy _namingStrategy = null;",
                "-    ",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Life-cycle: creation",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -111,4 +110,5 @@ public class SimpleModule",
                "         _version = Version.unknownVersion();",
                "+        _id = new Object();",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -126,4 +126,3 @@ public class SimpleModule",
                "     public SimpleModule(Version version) {",
                "-        _name = version.getArtifactId();",
                "-        _version = version;",
                "+        this(version.getArtifactId(), version);",
                "     }",
                "@@ -142,7 +141,5 @@ public class SimpleModule",
                "         _version = version;",
                "+        _id = new Object();",
                "     }",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "     public SimpleModule(String name, Version version,",
                "@@ -152,5 +149,2 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "     public SimpleModule(String name, Version version,",
                "@@ -159,6 +153,3 @@ public class SimpleModule",
                "     }",
                "-    ",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "+",
                "     public SimpleModule(String name, Version version,",
                "@@ -169,2 +160,3 @@ public class SimpleModule",
                "         _version = version;",
                "+        _id = new Object();",
                "         if (deserializers != null) {",
                "@@ -177,2 +169,11 @@ public class SimpleModule",
                "+    /*",
                "+    /**********************************************************************",
                "+    /* Simple accessors",
                "+    /**********************************************************************",
                "+     */",
                "+    ",
                "+    @Override",
                "+    public Version version() { return _version; }",
                "+",
                "     /**",
                "@@ -183,13 +184,10 @@ public class SimpleModule",
                "     @Override",
                "-    public Object getTypeId() {",
                "-        if (getClass() == SimpleModule.class) {",
                "-            return null;",
                "-        }",
                "-        return super.getTypeId();",
                "+    public Object getRegistrationId() {",
                "+        return _id;",
                "     }",
                "-    ",
                "+",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Simple setters to allow overriding",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -238,5 +236,2 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.2",
                "-     */",
                "     public SimpleModule setDeserializerModifier(BeanDeserializerModifier mod) {",
                "@@ -246,5 +241,2 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.2",
                "-     */",
                "     public SimpleModule setSerializerModifier(BeanSerializerModifier mod) {",
                "@@ -254,5 +246,2 @@ public class SimpleModule",
                "-    /**",
                "-     * @since 2.3",
                "-     */",
                "     protected SimpleModule setNamingStrategy(PropertyNamingStrategy naming) {",
                "@@ -263,5 +252,5 @@ public class SimpleModule",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration methods, adding serializers",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -316,7 +305,7 @@ public class SimpleModule",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration methods, adding deserializers",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "-    ",
                "+",
                "     /**",
                "@@ -351,5 +340,5 @@ public class SimpleModule",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration methods, type mapping",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -412,4 +401,2 @@ public class SimpleModule",
                "      * this is an alternative to using annotations in super type to indicate subtypes.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -428,5 +415,5 @@ public class SimpleModule",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Configuration methods, add other handlers",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -471,5 +458,5 @@ public class SimpleModule",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Module impl",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "@@ -525,14 +512,8 @@ public class SimpleModule",
                "-    @Override",
                "-    public Version version() { return _version; }",
                "-",
                "     /*",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "     /* Helper methods",
                "-    /**********************************************************",
                "+    /**********************************************************************",
                "      */",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected void _checkNotNull(Object thingy, String type)"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperFeature.java, src/main/java/com/fasterxml/jackson/databind/Module.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: objectmapper, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f4812e790fdf434d39c4bc167e219f53bf3b3d02",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519101885,
            "hunks": 1,
            "message": "Ensure that deser factory, context are linked (hope to maybe eliminate coupling in future)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "index 59dac843d..c07b6235a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                "@@ -904,2 +904,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _deserializerFactory = f;",
                "+        // 19-Feb-2018, tatu: Hopefully not needed in future but is needed for now",
                "+        if (_deserializationContext != null) {",
                "+            _deserializationContext = _deserializationContext.with(f);",
                "+        }",
                "         return _this();"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "820eda75e3dc849da2eacada54c166648925cfa1",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517797461,
            "hunks": 3,
            "message": "more removal of `copy()`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java b/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "index a3c630a88..0eb21d5d4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "@@ -14,4 +14,2 @@ import com.fasterxml.jackson.databind.type.ClassKey;",
                "  * when underlying Map is not modified but only read).",
                "- * ",
                "- * @since 2.6",
                "  */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "index 058529945..4a9543956 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "@@ -78,12 +78,2 @@ public abstract class DefaultSerializerProvider",
                "-    /**",
                "-     * Method needed to ensure that {@link ObjectMapper#copy} will work",
                "-     * properly; specifically, that caches are cleared, but settings",
                "-     * will otherwise remain identical; and that no sharing of state",
                "-     * occurs.",
                "-     */",
                "-    public DefaultSerializerProvider copy() {",
                "-        throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\");",
                "-    }",
                "-",
                "     /*",
                "@@ -542,11 +532,2 @@ filter.getClass().getName(), t.getClass().getName(), t.getMessage());",
                "-        @Override",
                "-        public DefaultSerializerProvider copy()",
                "-        {",
                "-            if (getClass() != Impl.class) {",
                "-                return super.copy();",
                "-            }",
                "-            return new Impl(this);",
                "-        }",
                "-",
                "         @Override"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java, src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c803a2658e45b8d1095d2504f943bd4ebaab18e9",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517594464,
            "hunks": 2,
            "message": "Fix #1872 (#1923)",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 0f6d3bc6d..37bb953fb 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -6,2 +6,8 @@ Project: jackson-databind",
                "+2.7.9.3 (not yet released)",
                "+",
                "+#1872 `NullPointerException` in `SubTypeValidator.validateSubType` when",
                "+  validating Spring interface",
                "+ (reported by Rob W)",
                "+",
                " 2.7.9.2 (20-Dec-2017)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "index 45a76169f..1be6fca29 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "@@ -81,4 +81,5 @@ public class SubTypeValidator",
                "             //    for some Spring framework types",
                "-            if (full.startsWith(PREFIX_STRING)) {",
                "-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {",
                "+            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces",
                "+            if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {",
                "+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){",
                "                     String name = cls.getSimpleName();"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1872": "Fix #1872 #1923 Another two gadgets to exploit default typing issue in jackson-databind (CVE-2018-5968) #1899",
                "1923": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.7.9.3",
                "jackson-databind-2.7.9.4",
                "jackson-databind-2.7.9.5",
                "jackson-databind-2.7.9.6",
                "jackson-databind-2.7.9.7",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1872 contains some security-related terms: exploit",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1872, 1923",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0808642a4cbd161d616538a94334681a7af75d68",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518403642,
            "hunks": 88,
            "message": "Add `config` parameter for many remaingin methods in `AnnotationIntrospector`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "index 8804d43f1..d66515573 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "@@ -556,3 +556,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findSerializer(Annotated am) {",
                "+    public Object findSerializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -567,3 +567,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findKeySerializer(Annotated am) {",
                "+    public Object findKeySerializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -579,3 +579,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findContentSerializer(Annotated am) {",
                "+    public Object findContentSerializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -587,3 +587,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findNullSerializer(Annotated am) {",
                "+    public Object findNullSerializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -599,3 +599,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public JsonSerialize.Typing findSerializationTyping(Annotated a) {",
                "+    public JsonSerialize.Typing findSerializationTyping(MapperConfig<?> config, Annotated a) {",
                "         return null;",
                "@@ -651,3 +651,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public JsonInclude.Value findPropertyInclusion(Annotated a) {",
                "+    public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Annotated a) {",
                "         return JsonInclude.Value.empty();",
                "@@ -785,3 +785,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findDeserializer(Annotated am) {",
                "+    public Object findDeserializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -797,3 +797,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findKeyDeserializer(Annotated am) {",
                "+    public Object findKeyDeserializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -810,3 +810,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findContentDeserializer(Annotated am) {",
                "+    public Object findContentDeserializer(MapperConfig<?> config, Annotated am) {",
                "         return null;",
                "@@ -884,3 +884,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findValueInstantiator(AnnotatedClass ac) {",
                "+    public Object findValueInstantiator(MapperConfig<?> config, AnnotatedClass ac) {",
                "         return null;",
                "@@ -899,3 +899,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Class<?> findPOJOBuilder(AnnotatedClass ac) {",
                "+    public Class<?> findPOJOBuilder(MapperConfig<?> config, AnnotatedClass ac) {",
                "         return null;",
                "@@ -903,3 +903,3 @@ public abstract class AnnotationIntrospector",
                "-    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {",
                "+    public JsonPOJOBuilder.Value findPOJOBuilderConfig(MapperConfig<?> config, AnnotatedClass ac) {",
                "         return null;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "index 31dbdcd48..c9501f858 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "@@ -244,3 +244,3 @@ public interface BeanProperty extends FullyNamed",
                "             }",
                "-            JsonInclude.Value v = intr.findPropertyInclusion(_member);",
                "+            JsonInclude.Value v = intr.findPropertyInclusion(config, _member);",
                "             if (v == null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index 5d7df8e26..4263c0427 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@ -249,3 +249,3 @@ public abstract class BasicDeserializerFactory",
                "         AnnotatedClass ac = beanDesc.getClassInfo();",
                "-        Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);",
                "+        Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ctxt.getConfig(), ac);",
                "         if (instDef != null) {",
                "@@ -2036,3 +2036,3 @@ nonAnnotatedParamIndex, ctor);",
                "         if (intr != null) {",
                "-            Object deserDef = intr.findDeserializer(ann);",
                "+            Object deserDef = intr.findDeserializer(ctxt.getConfig(), ann);",
                "             if (deserDef != null) {",
                "@@ -2055,3 +2055,3 @@ nonAnnotatedParamIndex, ctor);",
                "         if (intr != null) {",
                "-            Object deserDef = intr.findKeyDeserializer(ann);",
                "+            Object deserDef = intr.findKeyDeserializer(ctxt.getConfig(), ann);",
                "             if (deserDef != null) {",
                "@@ -2069,3 +2069,3 @@ nonAnnotatedParamIndex, ctor);",
                "         if (intr != null) {",
                "-            Object deserDef = intr.findContentDeserializer(ann);",
                "+            Object deserDef = intr.findContentDeserializer(ctxt.getConfig(), ann);",
                "             if (deserDef != null) {",
                "@@ -2098,3 +2098,3 @@ nonAnnotatedParamIndex, ctor);",
                "             if (keyType != null) {",
                "-                Object kdDef = intr.findKeyDeserializer(member);",
                "+                Object kdDef = intr.findKeyDeserializer(ctxt.getConfig(), member);",
                "                 KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);",
                "@@ -2108,3 +2108,3 @@ nonAnnotatedParamIndex, ctor);",
                "         if (type.hasContentType()) { // that is, is either container- or reference-type",
                "-            Object cdDef = intr.findContentDeserializer(member);",
                "+            Object cdDef = intr.findContentDeserializer(ctxt.getConfig(), member);",
                "             JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "index 6593f54a1..f84d3ba26 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "@@ -7,2 +7,3 @@ import com.fasterxml.jackson.annotation.JsonFormat;",
                " import com.fasterxml.jackson.databind.*;",
                "+import com.fasterxml.jackson.databind.cfg.MapperConfig;",
                " import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;",
                "@@ -422,3 +423,3 @@ public final class DeserializerCache",
                "     {",
                "-        Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann);",
                "+        Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ctxt.getConfig(), ann);",
                "         if (deserDef == null) {",
                "@@ -483,2 +484,3 @@ public final class DeserializerCache",
                "         }",
                "+        final MapperConfig<?> config = ctxt.getConfig();",
                "@@ -493,3 +495,3 @@ public final class DeserializerCache",
                "             if (keyType != null && keyType.getValueHandler() == null) {",
                "-                Object kdDef = intr.findKeyDeserializer(a);",
                "+                Object kdDef = intr.findKeyDeserializer(config, a);",
                "                 if (kdDef != null) {",
                "@@ -506,3 +508,3 @@ public final class DeserializerCache",
                "             if (contentType.getValueHandler() == null) { // as with above, avoid resetting (which would trigger exception)",
                "-                Object cdDef = intr.findContentDeserializer(a);",
                "+                Object cdDef = intr.findContentDeserializer(config, a);",
                "                 if (cdDef != null) {",
                "@@ -526,3 +528,3 @@ public final class DeserializerCache",
                "         // (note: could possibly avoid this if explicit deserializer was invoked?)",
                "-        type = intr.refineDeserializationType(ctxt.getConfig(), a, type);",
                "+        type = intr.refineDeserializationType(config, a, type);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "index 34f9134fe..a40de1c85 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "@@ -35,7 +35,2 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * Jackson provider, along with JAXB annotation introspector.",
                "- *<p>",
                "- * Note: up until 2.0, this class was an inner class of",
                "- * {@link AnnotationIntrospector}; moved here for convenience.",
                "- * ",
                "- * @since 2.1",
                "  */",
                "@@ -282,4 +277,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findSerializer(Annotated am) {",
                "-        Object r = _primary.findSerializer(am);",
                "+    public Object findSerializer(MapperConfig<?> config, Annotated am) {",
                "+        Object r = _primary.findSerializer(config, am);",
                "         if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {",
                "@@ -287,3 +282,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findSerializer(am),",
                "+        return _explicitClassOrOb(_secondary.findSerializer(config, am),",
                "                 JsonSerializer.None.class);",
                "@@ -292,4 +287,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findKeySerializer(Annotated a) {",
                "-        Object r = _primary.findKeySerializer(a);",
                "+    public Object findKeySerializer(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findKeySerializer(config, a);",
                "         if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {",
                "@@ -297,3 +292,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findKeySerializer(a),",
                "+        return _explicitClassOrOb(_secondary.findKeySerializer(config, a),",
                "                 JsonSerializer.None.class);",
                "@@ -302,4 +297,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findContentSerializer(Annotated a) {",
                "-        Object r = _primary.findContentSerializer(a);",
                "+    public Object findContentSerializer(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findContentSerializer(config, a);",
                "         if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {",
                "@@ -307,3 +302,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findContentSerializer(a),",
                "+        return _explicitClassOrOb(_secondary.findContentSerializer(config, a),",
                "                 JsonSerializer.None.class);",
                "@@ -312,4 +307,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findNullSerializer(Annotated a) {",
                "-        Object r = _primary.findNullSerializer(a);",
                "+    public Object findNullSerializer(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findNullSerializer(config, a);",
                "         if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {",
                "@@ -317,3 +312,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findNullSerializer(a),",
                "+        return _explicitClassOrOb(_secondary.findNullSerializer(config, a),",
                "                 JsonSerializer.None.class);",
                "@@ -322,6 +317,6 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public JsonInclude.Value findPropertyInclusion(Annotated a)",
                "+    public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Annotated a)",
                "     {",
                "-        JsonInclude.Value v2 = _secondary.findPropertyInclusion(a);",
                "-        JsonInclude.Value v1 = _primary.findPropertyInclusion(a);",
                "+        JsonInclude.Value v2 = _secondary.findPropertyInclusion(config, a);",
                "+        JsonInclude.Value v1 = _primary.findPropertyInclusion(config, a);",
                "@@ -334,5 +329,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public JsonSerialize.Typing findSerializationTyping(Annotated a) {",
                "-        JsonSerialize.Typing r = _primary.findSerializationTyping(a);",
                "-        return (r == null) ? _secondary.findSerializationTyping(a) : r;",
                "+    public JsonSerialize.Typing findSerializationTyping(MapperConfig<?> config, Annotated a) {",
                "+        JsonSerialize.Typing r = _primary.findSerializationTyping(config, a);",
                "+        return (r == null) ? _secondary.findSerializationTyping(config, a) : r;",
                "     }",
                "@@ -452,3 +447,3 @@ public class AnnotationIntrospectorPair",
                "-    @Override // since 2.7",
                "+    @Override",
                "     public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config,",
                "@@ -465,3 +460,3 @@ public class AnnotationIntrospectorPair",
                "-    @Override // since 2.7",
                "+    @Override",
                "     public JavaType refineSerializationType(MapperConfig<?> config,",
                "@@ -547,4 +542,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findDeserializer(Annotated a) {",
                "-        Object r = _primary.findDeserializer(a);",
                "+    public Object findDeserializer(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findDeserializer(config, a);",
                "         if (_isExplicitClassOrOb(r, JsonDeserializer.None.class)) {",
                "@@ -552,3 +547,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findDeserializer(a),",
                "+        return _explicitClassOrOb(_secondary.findDeserializer(config, a),",
                "                 JsonDeserializer.None.class);",
                "@@ -557,4 +552,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findKeyDeserializer(Annotated a) {",
                "-        Object r = _primary.findKeyDeserializer(a);",
                "+    public Object findKeyDeserializer(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findKeyDeserializer(config, a);",
                "         if (_isExplicitClassOrOb(r, KeyDeserializer.None.class)) {",
                "@@ -562,3 +557,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findKeyDeserializer(a),",
                "+        return _explicitClassOrOb(_secondary.findKeyDeserializer(config, a),",
                "                 KeyDeserializer.None.class);",
                "@@ -567,4 +562,4 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findContentDeserializer(Annotated am) {",
                "-        Object r = _primary.findContentDeserializer(am);",
                "+    public Object findContentDeserializer(MapperConfig<?> config, Annotated am) {",
                "+        Object r = _primary.findContentDeserializer(config, am);",
                "         if (_isExplicitClassOrOb(r, JsonDeserializer.None.class)) {",
                "@@ -572,3 +567,3 @@ public class AnnotationIntrospectorPair",
                "         }",
                "-        return _explicitClassOrOb(_secondary.findContentDeserializer(am),",
                "+        return _explicitClassOrOb(_secondary.findContentDeserializer(config, am),",
                "                 JsonDeserializer.None.class);",
                "@@ -602,5 +597,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findValueInstantiator(AnnotatedClass ac) {",
                "-        Object result = _primary.findValueInstantiator(ac);",
                "-        return (result == null) ? _secondary.findValueInstantiator(ac) : result;",
                "+    public Object findValueInstantiator(MapperConfig<?> config, AnnotatedClass ac) {",
                "+        Object result = _primary.findValueInstantiator(config, ac);",
                "+        return (result == null) ? _secondary.findValueInstantiator(config, ac) : result;",
                "     }",
                "@@ -608,5 +603,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Class<?> findPOJOBuilder(AnnotatedClass ac) {",
                "-        Class<?> result = _primary.findPOJOBuilder(ac);",
                "-        return (result == null) ? _secondary.findPOJOBuilder(ac) : result;",
                "+    public Class<?> findPOJOBuilder(MapperConfig<?> config, AnnotatedClass ac) {",
                "+        Class<?> result = _primary.findPOJOBuilder(config, ac);",
                "+        return (result == null) ? _secondary.findPOJOBuilder(config, ac) : result;",
                "     }",
                "@@ -614,5 +609,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {",
                "-        JsonPOJOBuilder.Value result = _primary.findPOJOBuilderConfig(ac);",
                "-        return (result == null) ? _secondary.findPOJOBuilderConfig(ac) : result;",
                "+    public JsonPOJOBuilder.Value findPOJOBuilderConfig(MapperConfig<?> config, AnnotatedClass ac) {",
                "+        JsonPOJOBuilder.Value result = _primary.findPOJOBuilderConfig(config, ac);",
                "+        return (result == null) ? _secondary.findPOJOBuilderConfig(config, ac) : result;",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "index b2e11a8aa..3beb58bd9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "@@ -420,3 +420,3 @@ anyField.getName()));",
                "         if (_annotationIntrospector != null) {",
                "-            JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_classInfo);",
                "+            JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_config, _classInfo);",
                "             if (incl != null) {",
                "@@ -588,4 +588,4 @@ anyField.getName()));",
                "     public Class<?> findPOJOBuilder() {",
                "-        return (_annotationIntrospector == null) ?",
                "-    \t\t\tnull : _annotationIntrospector.findPOJOBuilder(_classInfo);",
                "+        return (_annotationIntrospector == null) ? null",
                "+                : _annotationIntrospector.findPOJOBuilder(_config, _classInfo);",
                "     }",
                "@@ -595,4 +595,4 @@ anyField.getName()));",
                "     {",
                "-        return (_annotationIntrospector == null) ?",
                "-                null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);",
                "+        return (_annotationIntrospector == null) ? null",
                "+                : _annotationIntrospector.findPOJOBuilderConfig(_config, _classInfo);",
                "     }",
                "@@ -602,7 +602,5 @@ anyField.getName()));",
                "     {",
                "-        if (_annotationIntrospector == null) {",
                "-            return null;",
                "-        }",
                "-        return _createConverter(_annotationIntrospector",
                "-                .findDeserializationConverter(_config, _classInfo));",
                "+        return (_annotationIntrospector == null) ? null",
                "+                :  _createConverter(_annotationIntrospector",
                "+                        .findDeserializationConverter(_config, _classInfo));",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "index bb267d7fc..781edd57d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "@@ -191,3 +191,4 @@ public class BasicClassIntrospector",
                "         AnnotationIntrospector ai = config.isAnnotationProcessingEnabled() ? config.getAnnotationIntrospector() : null;",
                "-        JsonPOJOBuilder.Value builderConfig = (ai == null) ? null : ai.findPOJOBuilderConfig(ac);",
                "+        JsonPOJOBuilder.Value builderConfig = (ai == null) ? null",
                "+                : ai.findPOJOBuilderConfig(config, ac);",
                "         String mutatorPrefix = (builderConfig == null) ? JsonPOJOBuilder.DEFAULT_WITH_PREFIX : builderConfig.withPrefix;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java b/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
                "index f648a1a20..b642d4bf4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
                "@@ -100,3 +100,3 @@ public abstract class ConcreteBeanPropertyBase",
                "         }",
                "-        JsonInclude.Value v = intr.findPropertyInclusion(member);",
                "+        JsonInclude.Value v = intr.findPropertyInclusion(config, member);",
                "         if (v0 == null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "index 2afec76f9..ae5626cc9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "@@ -608,3 +608,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findSerializer(Annotated a)",
                "+    public Object findSerializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -633,3 +633,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findKeySerializer(Annotated a)",
                "+    public Object findKeySerializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -647,3 +647,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findContentSerializer(Annotated a)",
                "+    public Object findContentSerializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -661,3 +661,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findNullSerializer(Annotated a)",
                "+    public Object findNullSerializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -675,3 +675,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public JsonInclude.Value findPropertyInclusion(Annotated a)",
                "+    public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -683,3 +683,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public JsonSerialize.Typing findSerializationTyping(Annotated a)",
                "+    public JsonSerialize.Typing findSerializationTyping(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -990,3 +990,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findDeserializer(Annotated a)",
                "+    public Object findDeserializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -1004,3 +1004,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findKeyDeserializer(Annotated a)",
                "+    public Object findKeyDeserializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -1017,3 +1017,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findContentDeserializer(Annotated a)",
                "+    public Object findContentDeserializer(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -1118,3 +1118,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findValueInstantiator(AnnotatedClass ac)",
                "+    public Object findValueInstantiator(MapperConfig<?> config, AnnotatedClass ac)",
                "     {",
                "@@ -1126,3 +1126,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Class<?> findPOJOBuilder(AnnotatedClass ac)",
                "+    public Class<?> findPOJOBuilder(MapperConfig<?> config, AnnotatedClass ac)",
                "     {",
                "@@ -1133,3 +1133,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)",
                "+    public JsonPOJOBuilder.Value findPOJOBuilderConfig(MapperConfig<?> config, AnnotatedClass ac)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "index fc26a2ffc..76dae7c20 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "@@ -262,3 +262,3 @@ public class POJOPropertiesCollector",
                "     public Class<?> findPOJOBuilderClass() {",
                "-        return _annotationIntrospector.findPOJOBuilder(_classDef);",
                "+        return _annotationIntrospector.findPOJOBuilder(_config, _classDef);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
                "index 7b9e6b9dd..add868124 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
                "@@ -679,3 +679,3 @@ public class POJOPropertyBuilder",
                "         //    is available here",
                "-        JsonInclude.Value v = _annotationIntrospector.findPropertyInclusion(a);",
                "+        JsonInclude.Value v = _annotationIntrospector.findPropertyInclusion(_config, a);",
                "         return (v == null) ? JsonInclude.Value.empty() : v;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "index 7113e064c..7108cf6ee 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "@@ -501,3 +501,3 @@ public abstract class BasicSerializerFactory",
                "     {",
                "-        Object serDef = prov.getAnnotationIntrospector().findSerializer(a);",
                "+        Object serDef = prov.getAnnotationIntrospector().findSerializer(prov.getConfig(), a);",
                "         if (serDef == null) {",
                "@@ -1211,3 +1211,3 @@ public abstract class BasicSerializerFactory",
                "         AnnotationIntrospector intr = prov.getAnnotationIntrospector();",
                "-        Object serDef = intr.findKeySerializer(a);",
                "+        Object serDef = intr.findKeySerializer(prov.getConfig(), a);",
                "         if (serDef != null) {",
                "@@ -1228,3 +1228,3 @@ public abstract class BasicSerializerFactory",
                "         AnnotationIntrospector intr = prov.getAnnotationIntrospector();",
                "-        Object serDef = intr.findContentSerializer(a);",
                "+        Object serDef = intr.findContentSerializer(prov.getConfig(), a);",
                "         if (serDef != null) {",
                "@@ -1261,3 +1261,3 @@ public abstract class BasicSerializerFactory",
                "         AnnotationIntrospector intr = config.getAnnotationIntrospector();",
                "-        JsonSerialize.Typing t = intr.findSerializationTyping(beanDesc.getClassInfo());",
                "+        JsonSerialize.Typing t = intr.findSerializationTyping(config, beanDesc.getClassInfo());",
                "         if (t != null && t != JsonSerialize.Typing.DEFAULT_TYPING) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
                "index 5ed1c970d..9bb8a0b82 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
                "@@ -230,3 +230,3 @@ public class PropertyBuilder",
                "         // How about custom null serializer?",
                "-        Object serDef = _annotationIntrospector.findNullSerializer(am);",
                "+        Object serDef = _annotationIntrospector.findNullSerializer(_config, am);",
                "         if (serDef != null) {",
                "@@ -286,3 +286,3 @@ public class PropertyBuilder",
                "         // If using static typing, declared type is known to be the type...",
                "-        JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);",
                "+        JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(_config, a);",
                "         if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "index 84270031d..961d25fd2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "@@ -174,3 +174,3 @@ public class MapEntrySerializer",
                "         if (propertyAcc != null && intr != null) {",
                "-            Object serDef = intr.findKeySerializer(propertyAcc);",
                "+            Object serDef = intr.findKeySerializer(provider.getConfig(), propertyAcc);",
                "             if (serDef != null) {",
                "@@ -178,3 +178,3 @@ public class MapEntrySerializer",
                "             }",
                "-            serDef = intr.findContentSerializer(propertyAcc);",
                "+            serDef = intr.findContentSerializer(provider.getConfig(), propertyAcc);",
                "             if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "index 4901ab2ce..e4067bf78 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "@@ -81,6 +81,5 @@ public class StringArraySerializer",
                "     {",
                "-        /* 29-Sep-2012, tatu: Actually, we need to do much more contextual",
                "-         *    checking here since we finally know for sure the property,",
                "-         *    and it may have overrides",
                "-         */",
                "+        // 29-Sep-2012, tatu: Actually, we need to do much more contextual",
                "+        //    checking here since we finally know for sure the property,",
                "+        //    and it may have overrides",
                "         JsonSerializer<?> ser = null;",
                "@@ -92,3 +91,3 @@ public class StringArraySerializer",
                "             if (m != null) {",
                "-                Object serDef = ai.findContentSerializer(m);",
                "+                Object serDef = ai.findContentSerializer(provider.getConfig(), m);",
                "                 if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "index ce4868164..97cdf80f8 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "@@ -128,3 +128,3 @@ public abstract class AsArraySerializerBase<T>",
                "             if (m != null) {",
                "-                Object serDef = intr.findContentSerializer(m);",
                "+                Object serDef = intr.findContentSerializer(serializers.getConfig(), m);",
                "                 if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "index 015fb0d44..4368f73ad 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "@@ -347,3 +347,3 @@ public class MapSerializer",
                "         if (_neitherNull(propertyAcc, intr)) {",
                "-            Object serDef = intr.findKeySerializer(propertyAcc);",
                "+            Object serDef = intr.findKeySerializer(provider.getConfig(), propertyAcc);",
                "             if (serDef != null) {",
                "@@ -351,3 +351,3 @@ public class MapSerializer",
                "             }",
                "-            serDef = intr.findContentSerializer(propertyAcc);",
                "+            serDef = intr.findContentSerializer(provider.getConfig(), propertyAcc);",
                "             if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "index c4f628915..3d8854927 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "@@ -135,3 +135,3 @@ public class ObjectArraySerializer",
                "             if (m != null) {",
                "-                Object serDef = intr.findContentSerializer(m);",
                "+                Object serDef = intr.findContentSerializer(serializers.getConfig(), m);",
                "                 if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "index abb61565c..3d7582842 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "@@ -269,3 +269,3 @@ public abstract class ReferenceTypeSerializer<T>",
                "-    protected boolean _useStatic(SerializerProvider provider, BeanProperty property,",
                "+    protected boolean _useStatic(SerializerProvider serializers, BeanProperty property,",
                "             JavaType referredType)",
                "@@ -285,3 +285,3 @@ public abstract class ReferenceTypeSerializer<T>",
                "         // if neither, maybe explicit annotation?",
                "-        AnnotationIntrospector intr = provider.getAnnotationIntrospector();",
                "+        AnnotationIntrospector intr = serializers.getAnnotationIntrospector();",
                "         if ((intr != null) && (property != null)) {",
                "@@ -289,3 +289,4 @@ public abstract class ReferenceTypeSerializer<T>",
                "             if (ann != null) {",
                "-                JsonSerialize.Typing t = intr.findSerializationTyping(property.getMember());",
                "+                JsonSerialize.Typing t = intr.findSerializationTyping(serializers.getConfig(),",
                "+                        property.getMember());",
                "                 if (t == JsonSerialize.Typing.STATIC) {",
                "@@ -299,3 +300,3 @@ public abstract class ReferenceTypeSerializer<T>",
                "         // and finally, may be forced by global static typing (unlikely...)",
                "-        return provider.isEnabled(MapperFeature.USE_STATIC_TYPING);",
                "+        return serializers.isEnabled(MapperFeature.USE_STATIC_TYPING);",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "index db48211d2..e68314ca2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "@@ -61,3 +61,3 @@ public abstract class StaticListSerializerBase<T extends Collection<?>>",
                "             if (m != null) {",
                "-                Object serDef = intr.findContentSerializer(m);",
                "+                Object serDef = intr.findContentSerializer(serializers.getConfig(), m);",
                "                 if (serDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "index 2ef2c7ab5..853317a56 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "@@ -453,3 +453,3 @@ public abstract class StdSerializer<T>",
                "             if (m != null) {",
                "-                Object serDef = intr.findContentSerializer(m);",
                "+                Object serDef = intr.findContentSerializer(serializers.getConfig(), m);",
                "                 if (serDef != null) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java, src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java, src/main/java/com/fasterxml/jackson/databind/BeanProperty.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java, src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java, src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java, src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java, src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java, src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java, src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java, src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java, src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: method",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "be109ac0b7e1937b0a90821e4a0226d3aedd46c0",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1519104711,
            "hunks": 13,
            "message": "add means for a module to change `InjectableValues`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index ec7988aa6..02a153085 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -3,2 +3,3 @@ package com.fasterxml.jackson.databind;",
                " import java.util.Collection;",
                "+import java.util.function.UnaryOperator;",
                "@@ -88,3 +89,3 @@ public abstract class Module",
                "          */",
                "-        ",
                "+",
                "         /**",
                "@@ -162,6 +163,6 @@ public abstract class Module",
                "         public MutableConfigOverride configOverride(Class<?> type);",
                "-        ",
                "+",
                "         /*",
                "         /**********************************************************",
                "-        /* Handler registration; serializers/deserializers",
                "+        /* Handler registration; deserializers, related",
                "         /**********************************************************",
                "@@ -172,3 +173,3 @@ public abstract class Module",
                "          * handling types.",
                "-         * ",
                "+         *",
                "          * @param d Object that can be called to find deserializer for types supported",
                "@@ -185,2 +186,26 @@ public abstract class Module",
                "+        /**",
                "+         * Method that module can use to register additional modifier objects to",
                "+         * customize configuration and construction of bean deserializers.",
                "+         *",
                "+         * @param mod Modifier to register",
                "+         */",
                "+        public SetupContext addDeserializerModifier(BeanDeserializerModifier mod);",
                "+",
                "+        /**",
                "+         * Method that module can use to register additional {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s,",
                "+         * by adding {@link ValueInstantiators} object that gets called when ",
                "+         * instantatiator is needed by a deserializer.",
                "+         * ",
                "+         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for",
                "+         *    constructing POJO values during deserialization",
                "+         */",
                "+        public SetupContext addValueInstantiators(ValueInstantiators instantiators);",
                "+",
                "+        /*",
                "+        /**********************************************************",
                "+        /* Handler registration; serializers, related",
                "+        /**********************************************************",
                "+         */",
                "+",
                "         /**",
                "@@ -188,3 +213,3 @@ public abstract class Module",
                "          * handling types.",
                "-         * ",
                "+         *",
                "          * @param s Object that can be called to find serializer for types supported",
                "@@ -201,2 +226,10 @@ public abstract class Module",
                "+        /**",
                "+         * Method that module can use to register additional modifier objects to",
                "+         * customize configuration and construction of bean serializers.",
                "+         *",
                "+         * @param mod Modifier to register",
                "+         */",
                "+        public SetupContext addSerializerModifier(BeanSerializerModifier mod);",
                "+",
                "         /*",
                "@@ -266,3 +299,3 @@ public abstract class Module",
                "         public SetupContext registerSubtypes(Collection<Class<?>> subtypes);",
                "-        ",
                "+ ",
                "         /*",
                "@@ -281,26 +314,8 @@ public abstract class Module",
                "         /**",
                "-         * Method that module can use to register additional modifier objects to",
                "-         * customize configuration and construction of bean deserializers.",
                "-         * ",
                "-         * @param mod Modifier to register",
                "-         */",
                "-        public SetupContext addDeserializerModifier(BeanDeserializerModifier mod);",
                "-",
                "-        /**",
                "-         * Method that module can use to register additional modifier objects to",
                "-         * customize configuration and construction of bean serializers.",
                "-         * ",
                "-         * @param mod Modifier to register",
                "-         */",
                "-        public SetupContext addSerializerModifier(BeanSerializerModifier mod);",
                "-",
                "-        /**",
                "-         * Method that module can use to register additional {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s,",
                "-         * by adding {@link ValueInstantiators} object that gets called when ",
                "-         * instantatiator is needed by a deserializer.",
                "-         * ",
                "-         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for",
                "-         *    constructing POJO values during deserialization",
                "+         * Replace default {@link InjectableValues} that have been configured to be",
                "+         * used for mapper being built.",
                "+         *",
                "+         * @since 3.0",
                "          */",
                "-        public SetupContext addValueInstantiators(ValueInstantiators instantiators);",
                "+        public SetupContext overrideInjectableValues(UnaryOperator<InjectableValues> v);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "index beef855e0..b9018c1cf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java",
                "@@ -3,2 +3,3 @@ package com.fasterxml.jackson.databind.cfg;",
                " import java.util.Collection;",
                "+import java.util.function.UnaryOperator;",
                "@@ -268,2 +269,12 @@ public class ModuleContextBase",
                "+    @Override",
                "+    public SetupContext overrideInjectableValues(UnaryOperator<InjectableValues> v) {",
                "+        InjectableValues oldV = _builder.injectableValues();",
                "+        InjectableValues newV = v.apply(oldV);",
                "+        if (newV != oldV) {",
                "+            _builder.injectableValues(newV);",
                "+        }",
                "+        return this;",
                "+    }",
                "+    ",
                "     @Override"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/cfg/ModuleContextBase.java, src/main/java/com/fasterxml/jackson/databind/Module.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "93da8549278b0165f2862e726ade56f6966a9591",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517701017,
            "hunks": 18,
            "message": "Fluentify Simple[De]Serializers",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index ffc32e697..04aad0985 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -460,4 +460,2 @@ public abstract class DeserializationContext",
                "      * that are enabled.",
                "-     *",
                "-     * @since 2.6",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
                "index 0a9f443b1..604cfb689 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
                "@@ -28,4 +28,2 @@ public class SimpleDeserializers",
                "      * Flag to help find \"generic\" enum deserializer, if one has been registered.",
                "-     * ",
                "-     * @since 2.3",
                "      */",
                "@@ -41,5 +39,2 @@ public class SimpleDeserializers",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "     public SimpleDeserializers(Map<Class<?>,JsonDeserializer<?>> desers) {",
                "@@ -48,3 +43,3 @@ public class SimpleDeserializers",
                "-    public <T> void addDeserializer(Class<T> forClass, JsonDeserializer<? extends T> deser)",
                "+    public <T> SimpleDeserializers addDeserializer(Class<T> forClass, JsonDeserializer<? extends T> deser)",
                "     {",
                "@@ -59,9 +54,7 @@ public class SimpleDeserializers",
                "         }",
                "+        return this;",
                "     }",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "     @SuppressWarnings(\"unchecked\")",
                "-    public void addDeserializers(Map<Class<?>,JsonDeserializer<?>> desers)",
                "+    public SimpleDeserializers addDeserializers(Map<Class<?>,JsonDeserializer<?>> desers)",
                "     {",
                "@@ -73,2 +66,3 @@ public class SimpleDeserializers",
                "         }",
                "+        return this;",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java",
                "index c893cb0f7..af11056c4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java",
                "@@ -30,3 +30,3 @@ public class SimpleSerializers",
                " {",
                "-    private static final long serialVersionUID = 8531646511998456779L;",
                "+    private static final long serialVersionUID = 3;",
                "@@ -45,4 +45,2 @@ public class SimpleSerializers",
                "      * Flag to help find \"generic\" enum serializer, if one has been registered.",
                "-     * ",
                "-     * @since 2.3",
                "      */",
                "@@ -58,5 +56,2 @@ public class SimpleSerializers",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "     public SimpleSerializers(List<JsonSerializer<?>> sers) {",
                "@@ -74,3 +69,3 @@ public class SimpleSerializers",
                "      */",
                "-    public void addSerializer(JsonSerializer<?> ser)",
                "+    public SimpleSerializers addSerializer(JsonSerializer<?> ser)",
                "     {",
                "@@ -84,13 +79,12 @@ public class SimpleSerializers",
                "         _addSerializer(cls, ser);",
                "+        return this;",
                "     }",
                "-    public <T> void addSerializer(Class<? extends T> type, JsonSerializer<T> ser)",
                "+    public <T> SimpleSerializers addSerializer(Class<? extends T> type, JsonSerializer<T> ser)",
                "     {",
                "         _addSerializer(type, ser);",
                "+        return this;",
                "     }",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "-    public void addSerializers(List<JsonSerializer<?>> sers) {",
                "+    public SimpleSerializers addSerializers(List<JsonSerializer<?>> sers) {",
                "         for (JsonSerializer<?> ser : sers) {",
                "@@ -98,4 +92,5 @@ public class SimpleSerializers",
                "         }",
                "+        return this;",
                "     }",
                "-    ",
                "+",
                "     /*"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
                "src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java, src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "299d6950eee0bce2fd04cef4629563b394d5d248",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517629038,
            "hunks": 9,
            "message": "Minor Java 9 fix for `StackTraceElement`, ignore \"format\" (but where does it come from?)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "index d452f782f..872f2bf33 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "@@ -31,10 +31,14 @@ public class StackTraceElementDeserializer",
                "                 String propName = p.currentName();",
                "-                // TODO: with Java 8, convert to switch",
                "-                if (\"className\".equals(propName)) {",
                "+",
                "+                switch (propName) {",
                "+                case \"className\":",
                "                     className = p.getText();",
                "-                } else if (\"classLoaderName\".equals(propName)) {",
                "+                    break;",
                "+                case \"classLoaderName\":",
                "                     classLoaderName = p.getText();",
                "-                } else if (\"fileName\".equals(propName)) {",
                "+                    break;",
                "+                case \"fileName\":",
                "                     fileName = p.getText();",
                "-                } else if (\"lineNumber\".equals(propName)) {",
                "+                    break;",
                "+                case \"lineNumber\":",
                "                     if (t.isNumeric()) {",
                "@@ -44,14 +48,24 @@ public class StackTraceElementDeserializer",
                "                     }",
                "-                } else if (\"methodName\".equals(propName)) {",
                "+                    break;",
                "+                case \"methodName\":",
                "                     methodName = p.getText();",
                "-                } else if (\"nativeMethod\".equals(propName)) {",
                "-                    // no setter, not passed via constructor: ignore",
                "-                } else if (\"moduleName\".equals(propName)) {",
                "+                    break;",
                "+                case \"moduleName\":",
                "                     moduleName = p.getText();",
                "-                } else if (\"moduleVersion\".equals(propName)) {",
                "+                    break;",
                "+                case \"moduleVersion\":",
                "                     moduleVersion = p.getText();",
                "-                } else if (\"declaringClass\".equals(propName)) {",
                "+                    break;",
                "+",
                "+                    // and then fluff we can't use:",
                "+                ",
                "+                case \"nativeMethod\":",
                "+                    // no setter, not passed via constructor: ignore",
                "+                case \"declaringClass\":",
                "                     // 01-Nov-2017: [databind#1794] Not sure if we should but... let's prune it for now",
                "-                    ;",
                "-                } else {",
                "+                case \"format\":",
                "+                    // 02-Feb-2018, tatu: Java 9 apparently adds \"format\" somehow...",
                "+                    break;",
                "+                ",
                "+                default:",
                "                     handleUnknownProperty(p, ctxt, _valueClass, propName);"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ff834690c1df3b90c2f89d362d5c77035820bc88",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517688446,
            "hunks": 1,
            "message": "Backporting minor Java 9 fix",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "index a87dff73a..fcfba1029 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                "@@ -52,3 +52,4 @@ public class StackTraceElementDeserializer",
                "                     moduleVersion = p.getText();",
                "-                } else if (\"declaringClass\".equals(propName)) {",
                "+                } else if (\"declaringClass\".equals(propName)",
                "+                        || \"format\".equals(propName)) {",
                "                     // 01-Nov-2017: [databind#1794] Not sure if we should but... let's prune it for now"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a21cebdf0d577ac9474d5a6c44bf1fc14db71b93",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518327468,
            "hunks": 23,
            "message": "Changes to AnnotationIntrospector",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "index 361bbfa6d..8804d43f1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "@@ -621,3 +621,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findSerializationConverter(Annotated a) {",
                "+    public Object findSerializationConverter(MapperConfig<?> config, Annotated a) {",
                "         return null;",
                "@@ -641,3 +641,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findSerializationContentConverter(AnnotatedMember a) {",
                "+    public Object findSerializationContentConverter(MapperConfig<?> config, AnnotatedMember a) {",
                "         return null;",
                "@@ -833,3 +833,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findDeserializationConverter(Annotated a) {",
                "+    public Object findDeserializationConverter(MapperConfig<?> config, Annotated a) {",
                "         return null;",
                "@@ -853,3 +853,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public Object findDeserializationContentConverter(AnnotatedMember a) {",
                "+    public Object findDeserializationContentConverter(MapperConfig<?> config, AnnotatedMember a) {",
                "         return null;",
                "@@ -867,3 +867,3 @@ public abstract class AnnotationIntrospector",
                "      */",
                "-    public JavaType refineDeserializationType(final MapperConfig<?> config,",
                "+    public JavaType refineDeserializationType(MapperConfig<?> config,",
                "             final Annotated a, final JavaType baseType) throws JsonMappingException",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index d00b801de..48d350d86 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@ -641,3 +641,3 @@ public abstract class BeanDeserializerBase",
                "         if (intr != null) {",
                "-            Object convDef = intr.findDeserializationConverter(prop.getMember());",
                "+            Object convDef = intr.findDeserializationConverter(ctxt.getConfig(), prop.getMember());",
                "             if (convDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "index 00c078c45..6593f54a1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "@@ -453,3 +453,3 @@ public final class DeserializerCache",
                "     {",
                "-        Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a);",
                "+        Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(ctxt.getConfig(), a);",
                "         if (convDef == null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "index 6122ce226..613d398f4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "@@ -941,4 +941,2 @@ public abstract class StdDeserializer<T>",
                "      *    serializer if one already exists.",
                "-     * ",
                "-     * @since 2.2",
                "      */",
                "@@ -952,3 +950,3 @@ public abstract class StdDeserializer<T>",
                "             if (member != null) {",
                "-                Object convDef = intr.findDeserializationContentConverter(member);",
                "+                Object convDef = intr.findDeserializationContentConverter(ctxt.getConfig(), member);",
                "                 if (convDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "index 17d19c60a..34f9134fe 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "@@ -340,5 +340,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findSerializationConverter(Annotated a) {",
                "-        Object r = _primary.findSerializationConverter(a);",
                "-        return (r == null) ? _secondary.findSerializationConverter(a) : r;",
                "+    public Object findSerializationConverter(MapperConfig<?> config, Annotated a) {",
                "+        Object r = _primary.findSerializationConverter(config, a);",
                "+        return (r == null) ? _secondary.findSerializationConverter(config, a) : r;",
                "     }",
                "@@ -346,5 +346,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findSerializationContentConverter(AnnotatedMember a) {",
                "-        Object r = _primary.findSerializationContentConverter(a);",
                "-        return (r == null) ? _secondary.findSerializationContentConverter(a) : r;",
                "+    public Object findSerializationContentConverter(MapperConfig<?> config, AnnotatedMember a) {",
                "+        Object r = _primary.findSerializationContentConverter(config, a);",
                "+        return (r == null) ? _secondary.findSerializationContentConverter(config, a) : r;",
                "     }",
                "@@ -578,5 +578,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findDeserializationConverter(Annotated a) {",
                "-        Object ob = _primary.findDeserializationConverter(a);",
                "-        return (ob == null) ? _secondary.findDeserializationConverter(a) : ob;",
                "+    public Object findDeserializationConverter(MapperConfig<?> config, Annotated a) {",
                "+        Object ob = _primary.findDeserializationConverter(config, a);",
                "+        return (ob == null) ? _secondary.findDeserializationConverter(config, a) : ob;",
                "     }",
                "@@ -584,5 +584,5 @@ public class AnnotationIntrospectorPair",
                "     @Override",
                "-    public Object findDeserializationContentConverter(AnnotatedMember a) {",
                "-        Object ob = _primary.findDeserializationContentConverter(a);",
                "-        return (ob == null) ? _secondary.findDeserializationContentConverter(a) : ob;",
                "+    public Object findDeserializationContentConverter(MapperConfig<?> config, AnnotatedMember a) {",
                "+        Object ob = _primary.findDeserializationContentConverter(config, a);",
                "+        return (ob == null) ? _secondary.findDeserializationContentConverter(config, a) : ob;",
                "     }",
                "@@ -591,3 +591,2 @@ public class AnnotationIntrospectorPair",
                "-    // since 2.7",
                "     @Override",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "index 89525686b..b2e11a8aa 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "@@ -408,3 +408,3 @@ anyField.getName()));",
                "         }",
                "-        return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));",
                "+        return _createConverter(_annotationIntrospector.findSerializationConverter(_config, _classInfo));",
                "     }",
                "@@ -605,3 +605,4 @@ anyField.getName()));",
                "         }",
                "-        return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));",
                "+        return _createConverter(_annotationIntrospector",
                "+                .findDeserializationConverter(_config, _classInfo));",
                "     }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "index 74bd494e0..2afec76f9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "@@ -690,3 +690,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findSerializationConverter(Annotated a) {",
                "+    public Object findSerializationConverter(MapperConfig<?> config, Annotated a) {",
                "         JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);",
                "@@ -696,3 +696,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findSerializationContentConverter(AnnotatedMember a) {",
                "+    public Object findSerializationContentConverter(MapperConfig<?> config, AnnotatedMember a) {",
                "         JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);",
                "@@ -1031,3 +1031,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findDeserializationConverter(Annotated a)",
                "+    public Object findDeserializationConverter(MapperConfig<?> config, Annotated a)",
                "     {",
                "@@ -1038,3 +1038,3 @@ public class JacksonAnnotationIntrospector",
                "     @Override",
                "-    public Object findDeserializationContentConverter(AnnotatedMember a)",
                "+    public Object findDeserializationContentConverter(MapperConfig<?> config, AnnotatedMember a)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "index fcf173d74..7113e064c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "@@ -532,3 +532,3 @@ public abstract class BasicSerializerFactory",
                "     {",
                "-        Object convDef = prov.getAnnotationIntrospector().findSerializationConverter(a);",
                "+        Object convDef = prov.getAnnotationIntrospector().findSerializationConverter(prov.getConfig(), a);",
                "         if (convDef == null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "index 9151a08f3..ce72aac0f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "@@ -359,3 +359,3 @@ public abstract class BeanSerializerBase",
                "             if (m != null) {",
                "-                Object convDef = intr.findSerializationConverter(m);",
                "+                Object convDef = intr.findSerializationConverter(provider.getConfig(), m);",
                "                 if (convDef != null) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "index 8801d7aa6..2ef2c7ab5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
                "@@ -362,3 +362,3 @@ public abstract class StdSerializer<T>",
                "             if (m != null) {",
                "-                Object convDef = intr.findSerializationContentConverter(m);",
                "+                Object convDef = intr.findSerializationContentConverter(provider.getConfig(), m);",
                "                 if (convDef != null) {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java, src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java, src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java, src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java, src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "29c3a1f374f6060c4ccadbdeedc394792c0722bf",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320315,
            "hunks": 2,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 59220f74a..3eb8a7c3b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <artifactId>jackson-databind</artifactId>",
                "-  <version>2.7.9.3</version>",
                "+  <version>2.7.9.4-SNAPSHOT</version>",
                "   <name>jackson-databind</name>",
                "@@ -23,3 +23,3 @@",
                "     <url>http://github.com/FasterXML/jackson-databind</url>",
                "-    <tag>jackson-databind-2.7.9.3</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9612972e4ed854f3f39406dc02110870c9af97dd"
                ]
            ],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.7.9.4",
                "jackson-databind-2.7.9.5",
                "jackson-databind-2.7.9.6",
                "jackson-databind-2.7.9.7",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: FasterXML",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "efb1370f160feced7a51dca3bf85f9e1949256f0",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320698,
            "hunks": 2,
            "message": "[maven-release-plugin] prepare release jackson-databind-2.8.11.1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f3b975f8d..cc066675c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <artifactId>jackson-databind</artifactId>",
                "-  <version>2.8.11.1-SNAPSHOT</version>",
                "+  <version>2.8.11.1</version>",
                "   <name>jackson-databind</name>",
                "@@ -23,3 +23,3 @@",
                "     <url>http://github.com/FasterXML/jackson-databind</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>jackson-databind-2.8.11.1</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5cacb069a16653844e4c04c2a53578666080c1bb"
                ]
            ],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: FasterXML",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e66c0a9d3c926ff1b63bf586c824ead1d02f2a3d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320083,
            "hunks": 2,
            "message": "Merge branch '2.8' into 2.9",
            "diff": [
                "diff --cc release-notes/VERSION-2.x",
                "index afe9a8bcd,2416d32b4..cda2b93fb",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@@ -6,204 -5,2 +6,205 @@@ Project: jackson-databin",
                " +2.9.5 (not released yet)",
                " +",
                " +#1911: Allow serialization of `BigDecimal` as String, using",
                " +  `@JsonFormat(shape=Shape.String)`, config overrides",
                " + (suggested by cen1@github)",
                " +#1912: `BeanDeserializerModifier.updateBuilder()` not work to set custom",
                " +  deserializer on a property (since 2.9.0)",
                " + (contributed by Deblock T)",
                "++#1931: Two more `c3p0` gadgets to exploit default typing issue",
                " +",
                " +2.9.4 (24-Jan-2018)",
                " +",
                " +#1382: `@JsonProperty(access=READ_ONLY)` unxepected behaviour with `Collections`",
                " + (reported by hexfaker@github)",
                " +#1673: Serialising generic value classes via Reference Types (like Optional) fails",
                " +  to include type information",
                " + (reported by Pier-Luc W)",
                " +#1729: Integer bounds verification when calling `TokenBuffer.getIntValue()`",
                " + (reported by Kevin G)",
                " +#1853: Deserialise from Object (using Creator methods) returns field name instead of value",
                " + (reported by Alexander S)",
                " +#1854: NPE deserializing collection with `@JsonCreator` and `ACCEPT_CASE_INSENSITIVE_PROPERTIES`",
                " + (reported by rue-jw@github)",
                " +#1855: Blacklist for more serialization gadgets (dbcp/tomcat, spring)",
                " +#1859: Issue handling unknown/unmapped Enum keys",
                " + (reported by remya11@github)",
                " +#1868: Class name handling for JDK unmodifiable Collection types changed",
                " +  (reported by Rob W)",
                " +#1870: Remove `final` on inherited methods in `BuilderBasedDeserializer` to allow",
                " +  overriding by subclasses",
                " +  (requested by Ville K)",
                " +#1878: `@JsonBackReference` property is always ignored when deserializing since 2.9.0",
                " + (reported by reda-alaoui@github)",
                " +#1895: Per-type config override \"JsonFormat.Shape.OBJECT\" for Map.Entry not working",
                " + (reported by mcortella@github)",
                " +#1899: Another two gadgets to exploit default typing issue in jackson-databind",
                " + (reported by OneSourceCat@github)",
                " +#1906: Add string format specifier for error message in `PropertyValueBuffer`",
                " + (reported by Joe S)",
                " +#1907: Remove `getClass()` from `_valueType` argument for error reporting",
                " + (reported by Joe S)",
                " +",
                " +2.9.3 (09-Dec-2017)",
                " +",
                " +#1604: Nested type arguments doesn't work with polymorphic types",
                " +#1794: `StackTraceElementDeserializer` not working if field visibility changed",
                " + (reported by dsingley@github)",
                " +#1799: Allow creation of custom sub-types of `NullNode`, `BooleanNode`, `MissingNode`",
                " +#1804: `ValueInstantiator.canInstantiate()` ignores `canCreateUsingArrayDelegate()`",
                " + (reported byb henryptung@github)",
                " +#1807: Jackson-databind caches plain map deserializer and use it even map has `@JsonDeserializer`",
                " + (reported by lexas2509@github)",
                " +#1823: ClassNameIdResolver doesn't handle resolve Collections$SingletonMap & Collections$SingletonSet",
                " + (reported by Peter J)",
                " +#1831: `ObjectReader.readValue(JsonNode)` does not work correctly with polymorphic types,",
                " +  value to update",
                " + (reported by basmastr@github)",
                " +#1835: ValueInjector break from 2.8.x to 2.9.x",
                " + (repoted by kinigitbyday@github)",
                " +#1842: `null` String for `Exception`s deserialized as String \"null\" instead of `null`",
                " + (reported by ZeleniJure@github)",
                " +#1843: Include name of unsettable property in exception from `SetterlessProperty.set()`",
                " + (suggested by andreh7@github)",
                " +#1844: Map \"deep\" merge only adds new items, but not override existing values",
                " + (reported by alinakovalenko@github)",
                " +",
                " +2.9.2 (14-Oct-2017)",
                " +",
                " +(possibly) #1756: Deserialization error with custom `AnnotationIntrospector`",
                " + (reported by Daniel N)",
                " +#1705: Non-generic interface method hides type resolution info from generic base class",
                " +  (reported by Tim B)",
                " + NOTE: was originally reported fixed in 2.9.1 -- turns out it wasn't.",
                " +#1767: Allow `DeserializationProblemHandler` to respond to primitive types",
                " + (reported by nhtzr@github)",
                " +#1768: Improve `TypeFactory.constructFromCanonical()` to work with",
                " +  `java.lang.reflect.Type.getTypeName()' format",
                " + (suggested by Lu\u00c3\u00ads C)",
                " +#1771: Pass missing argument for string formatting in `ObjectMapper`",
                " + (reported by Nils B)",
                " +#1788: `StdDateFormat._parseAsISO8601()` does not parse \"fractional\" timezone correctly",
                " +#1793: `java.lang.NullPointerException` in `ObjectArraySerializer.acceptJsonFormatVisitor()`",
                " +  for array value with `@JsonValue`",
                " + (reported by Vincent D)",
                " +",
                " +2.9.1 (07-Sep-2017)",
                " +",
                " +#1725: `NPE` In `TypeFactory. constructParametricType(...)`",
                " + (reported by ctytgat@github)",
                " +#1730: InvalidFormatException` for `JsonToken.VALUE_EMBEDDED_OBJECT`",
                " + (reported by zigzago@github)",
                " +#1744: StdDateFormat: add option to serialize timezone offset with a colon",
                " + (contributed by Bertrand R)",
                " +#1745: StdDateFormat: accept and truncate millis larger than 3 digits",
                " + (suggested by Bertrand R)",
                " +#1749: StdDateFormat: performance improvement of '_format(..)' method ",
                " + (contributed by Bertrand R)",
                " +#1759: Reuse `Calendar` instance during parsing by `StdDateFormat`",
                " + (contributed by Bertrand R)",
                " +- Fix `DelegatingDeserializer` constructor to pass `handledType()` (and",
                " +  not type of deserializer being delegated to!)",
                " +- Add `Automatic-Module-Name` (\"com.fasterxml.jackson.databind\") for JDK 9 module system",
                " +",
                " +2.9.0 (30-Jul-2017)",
                " +",
                " +#219: SqlDateSerializer does not obey SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS",
                " + (reported by BrentDouglas@github)",
                " +#265: Add descriptive exception for attempts to use `@JsonWrapped` via Creator parameter",
                " +#291: @JsonTypeInfo with As.EXTERNAL_PROPERTY doesn't work if external type property",
                " +  is referenced more than once",
                " + (reported by Starkom@github)",
                " +#357: StackOverflowError with contentConverter that returns array type",
                " + (reported by Florian S)",
                " +#383: Recursive `@JsonUnwrapped` (`child` with same type) fail: \"No _valueDeserializer assigned\"",
                " + (reported by tdavis@github)",
                " +#403: Make FAIL_ON_NULL_FOR_PRIMITIVES apply to primitive arrays and other types that wrap primitives",
                " + (reported by Harleen S)",
                " +#476: Allow \"Serialize as POJO\" using `@JsonFormat(shape=Shape.OBJECT)` class annotation",
                " +#507: Support for default `@JsonView` for a class",
                " + (suggested by Mark W)",
                " +#687: Exception deserializing a collection @JsonIdentityInfo and a property based creator",
                " +#865: `JsonFormat.Shape.OBJECT` ignored when class implements `Map.Entry`",
                " +#888: Allow specifying custom exclusion comparator via `@JsonInclude`,",
                " +  using `JsonInclude.Include.CUSTOM`",
                " +#994: `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS` only works for POJOs, Maps",
                " +#1029: Add a way to define property name aliases",
                " +#1035: `@JsonAnySetter` assumes key of `String`, does not consider declared type.",
                " + (reported by Michael F)",
                " +#1106: Add `MapperFeature.ALLOW_COERCION_OF_SCALARS` for enabling/disabling coercions",
                " +#1284: Make `StdKeySerializers` use new `JsonGenerator.writeFieldId()` for `int`/`long` keys",
                " +#1320: Add `ObjectNode.put(String, BigInteger)`",
                " + (proposed by Jan L)",
                " +#1341: `DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY`",
                " + (contributed by Connor K)",
                " +#1347: Extend `ObjectMapper.configOverrides()` to allow changing visibility rules",
                " +#1356: Differentiate between input and code exceptions on deserialization",
                " + (suggested by Nick B)",
                " +#1369: Improve `@JsonCreator` detection via `AnnotationIntrospector`",
                " + by passing `MappingConfig`",
                " +#1371: Add `MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES` to allow",
                " + disabling use of `@CreatorProperties` as explicit `@JsonCreator` equivalent",
                " +#1376: Add ability to disable JsonAnySetter/JsonAnyGetter via mixin",
                " + (suggested by brentryan@github)",
                " +#1399: Add support for `@JsonMerge` to allow \"deep update\"",
                " +#1402: Use `@JsonSetter(nulls=...)` to specify handling of `null` values during deserialization",
                " +#1406: `ObjectMapper.readTree()` methods do not return `null` on end-of-input",
                " + (reported by Fabrizio C)",
                " +#1407: `@JsonFormat.pattern` is ignored for `java.sql.Date` valued properties",
                " + (reported by sangpire@github)",
                " +#1415: Creating CollectionType for non generic collection class broken",
                " +#1428: Allow `@JsonValue` on a field, not just getter",
                " +#1434: Explicitly pass null on invoke calls with no arguments",
                " + (contributed by Emiliano C)",
                " +#1433: `ObjectMapper.convertValue()` with null does not consider null conversions",
                " +  (`JsonDeserializer.getNullValue()`)",
                " + (contributed by jdmichal@github)",
                " +#1440: Wrong `JsonStreamContext` in `DeserializationProblemHandler` when reading",
                " +  `TokenBuffer` content",
                " + (reported by Patrick G)",
                " +#1444: Change `ObjectMapper.setSerializationInclusion()` to apply to content inclusion too",
                " +#1450: `SimpleModule.addKeyDeserializer()' should throw `IllegalArgumentException` if `null`",
                " +  reference of `KeyDeserializer` passed",
                " + (suggested by PawelJagus@github)",
                " +#1454: Support `@JsonFormat.lenient` for `java.util.Date`, `java.util.Calendar`",
                " +#1474: Replace use of `Class.newInstance()` (deprecated in Java 9) with call via Constructor",
                " +#1480: Add support for serializing `boolean`/`Boolean` as number (0 or 1)",
                " + (suggested by jwilmoth@github)",
                " +#1520: Case insensitive enum deserialization with `MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS`",
                " + (contributed by Ana-Eliza B)",
                " +#1522: Global `@JsonInclude(Include.NON_NULL)` for all properties with a specific type",
                " + (contributed by Carsten W)",
                " +#1544: EnumMapDeserializer assumes a pure EnumMap and does not support EnumMap derived classes",
                " + (reported by Lyor G)",
                " +#1550: Unexpected behavior with `@JsonInclude(JsonInclude.Include.NON_EMPTY)` and",
                " + `java.util.Date` serialization",
                " +#1551: `JsonMappingException` with polymorphic type and `JsonIdentityInfo` when basic type is abstract",
                " + (reported by acm073@github)",
                " +#1552: Map key converted to byte array is not serialized as base64 string",
                " + (reported by nmatt@github)",
                " +#1554: Support deserialization of `Shape.OBJECT` (\"as POJO\") for `Map`s (and map-like types)",
                " +#1556: Add `ObjectMapper.updateValue()` method to update instance with given overrides",
                " + (suggested by syncer@github)",
                " +#1583: Add a `DeserializationFeature.FAIL_ON_TRAILING_TOKENS` to force reading of the",
                " +  whole input as single value",
                " +#1592: Add support for handling primitive/discrepancy problem with type refinements",
                " +#1605: Allow serialization of `InetAddress` as simple numeric host address",
                " + (requested by Jared J)",
                " +#1616: Extraneous type id mapping added for base type itself",
                " +#1619: By-pass annotation introspection for array types",
                " +#1637: `ObjectReader.at()` with `JsonPointer` stops after first collection",
                " + (reported by Chris P)",
                " +#1653: Convenience overload(s) for ObjectMapper#registerSubtypes",
                " +#1655: `@JsonAnyGetter` uses different `bean` parameter in `SimpleBeanPropertyFilter`",
                " + (reported by georgeflugq@github)",
                " +#1678: Rewrite `StdDateFormat` ISO-8601 handling functionality",
                " +#1684: Rewrite handling of type ids to let `JsonGenerator` handle (more of) details",
                " +#1688: Deserialization fails for `java.nio.file.Path` implementations when default typing",
                " +  enabled",
                " + (reported by Christian B)",
                " +#1690: Prevent use of quoted number (index) for Enum deserialization via",
                " +  `MapperFeature.ALLOW_COERCION_OF_SCALARS`",
                " + (requested by magdel@github)",
                " +",
                "  2.8.11.1 (not yet released)",
                "diff --cc src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
                "index da2256add,f7d1517ed..5ccb0fb78",
                "--- a/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
                "+++ b/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
                "@@@ -12,2 -12,5 +12,4 @@@ import com.fasterxml.jackson.databind.e",
                " -import java.util.ArrayList;",
                " -import java.util.List;",
                "++import com.mchange.v2.c3p0.jacksontest.ComboPooledDataSource;",
                "+ ",
                "  /**"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ObjectMapper, readValue",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8b7914cac0c9982abbe915d343be5a3d1fc4dd25",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517545869,
            "hunks": 0,
            "message": "Merge branch 'master' of github.com:FasterXML/jackson-databind",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4a2d8f462f5427a7ad6374533bebb1e4642ba30d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517797712,
            "hunks": 2,
            "message": "Update release notes wrt #1912",
            "diff": [
                "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x",
                "index 5dbb52303..7388752b3 100644",
                "--- a/release-notes/CREDITS-2.x",
                "+++ b/release-notes/CREDITS-2.x",
                "@@ -746 +746,6 @@ Joe Schafer (jschaf@github)",
                "    (2.9.4)",
                "+",
                "+Deblock Thomas (deblockt@github)",
                "+  * Reported, contributed fix for #1912: `BeanDeserializerModifier.updateBuilder()` does not",
                "+    work to set custom  deserializer on a property (since 2.9.0)",
                "+ (contributed by Deblock T)",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index b6af089a3..afe9a8bcd 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -11,2 +11,5 @@ Project: jackson-databind",
                "  (suggested by cen1@github)",
                "+#1912: `BeanDeserializerModifier.updateBuilder()` not work to set custom",
                "+  deserializer on a property (since 2.9.0)",
                "+ (contributed by Deblock T)"
            ],
            "changed_files": [
                "release-notes/CREDITS-2.x",
                "release-notes/VERSION-2.x"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1912": "Remove usage of _neitherNull on findProperty #1913 Remove usage of _neitherNull on findProperty #1918"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1912",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2edbf28a1d256bb4f6a766e47e14dcbaddd10054",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517686399,
            "hunks": 2,
            "message": "try to enable java 9 travis build",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 509c9590d..46e46302d 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -3,7 +3,5 @@ language: java",
                " # Jackson 3.x only compiles on Java 8 and above so...",
                "-# 06-Oct-2017, tatu: One test fails on Java 9, no time to figure out why,",
                "-#    comment it out for now",
                " jdk:",
                "   - openjdk8",
                "-#  - oraclejdk9",
                "+  - openjdk9"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "b03bf6d55f45c90194de73d779d185c44ed1e6a1",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518456512,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "49a3747d2ec18f95749ee787b66205cc3b006dfe",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320178,
            "hunks": 1,
            "message": "prepare for 2.7.9.3",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index b13ccfb78..9c0b3bd5c 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -6,3 +6,3 @@ Project: jackson-databind",
                "-2.7.9.3 (not yet released)",
                "+2.7.9.3 (11-Feb-2018)"
            ],
            "changed_files": [
                "release-notes/VERSION"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.7.9.3",
                "jackson-databind-2.7.9.4",
                "jackson-databind-2.7.9.5",
                "jackson-databind-2.7.9.6",
                "jackson-databind-2.7.9.7",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f356a4a6ffad3c928758c119e2789a95a371e913",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517633488,
            "hunks": 4,
            "message": "fix java 9 / powermock test problem",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fc91f755e..7ef3e5247 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -31,2 +31,4 @@",
                "+    <version.powermock>2.0.0-beta.5</version.powermock>",
                "+",
                "     <!-- Generate PackageVersion.java into this directory. -->",
                "@@ -59,2 +61,8 @@",
                "       -->",
                "+    <dependency>",
                "+      <groupId>org.powermock</groupId>",
                "+      <artifactId>powermock-core</artifactId>",
                "+      <version>${version.powermock}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "     <dependency>",
                "@@ -62,6 +70,3 @@",
                "       <artifactId>powermock-module-junit4</artifactId>",
                "-<!-- 02-Feb-2018, tatu: Ought to work. Does not. ",
                "-      <version>2.0.0-beta.5</version>",
                "--->",
                "-      <version>1.7.3</version>",
                "+      <version>${version.powermock}</version>",
                "       <scope>test</scope>",
                "@@ -70,4 +75,4 @@",
                "       <groupId>org.powermock</groupId>",
                "-      <artifactId>powermock-api-mockito</artifactId>",
                "-      <version>1.7.3</version>",
                "+      <artifactId>powermock-api-mockito2</artifactId>",
                "+      <version>${version.powermock}</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "2b35879cb614af3ea3d5e677eb7a2b83d9809341",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320536,
            "hunks": 1,
            "message": "prepare for 2.8.11.1",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 2416d32b4..65657871a 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -5,3 +5,3 @@ Project: jackson-databind",
                "-2.8.11.1 (not yet released)",
                "+2.8.11.1 (11-Feb-2018)"
            ],
            "changed_files": [
                "release-notes/VERSION"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9011cc6da297404b5f132294f9ca7c877bbdad0e",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517630988,
            "hunks": 1,
            "message": "try to make powermock work on Java 9",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4116bf9ba..4fc6f4f67 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -62,3 +62,3 @@",
                "       <artifactId>powermock-module-junit4</artifactId>",
                "-      <version>1.7.3</version>",
                "+      <version>2.0.0-beta.5</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "5e8b65756420cd90ae5083fc6eca75dd010d7305",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517629988,
            "hunks": 2,
            "message": "update powermock (still fails on java 9 but still)",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3e264f037..4116bf9ba 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -62,3 +62,3 @@",
                "       <artifactId>powermock-module-junit4</artifactId>",
                "-      <version>1.6.5</version>",
                "+      <version>1.7.3</version>",
                "       <scope>test</scope>",
                "@@ -68,3 +68,3 @@",
                "       <artifactId>powermock-api-mockito</artifactId>",
                "-      <version>1.6.5</version>",
                "+      <version>1.7.3</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "939e332d951822f451d307ac4fc394af659aa0c6",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517594997,
            "hunks": 2,
            "message": "try to fix travis build for jdk7",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 4248da626..7f8f00585 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -4,4 +4,4 @@ language: java",
                " jdk:",
                "-  - oraclejdk7",
                "-  - oraclejdk8",
                "+  - openjdk7",
                "+  - openjdk8",
                "@@ -16,3 +16,2 @@ branches:",
                "     - master",
                "-    - \"2.6\"",
                "     - \"2.7\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.7.9.3",
                "jackson-databind-2.7.9.4",
                "jackson-databind-2.7.9.5",
                "jackson-databind-2.7.9.6",
                "jackson-databind-2.7.9.7",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c921f0935d5e41bf206e702d8077a275ba1a6efc",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518319731,
            "hunks": 1,
            "message": "Merge branch '2.7' into 2.8",
            "diff": [
                "diff --cc release-notes/VERSION",
                "index e5c11b30c,b13ccfb78..2416d32b4",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@@ -10,4 -11,3 +10,5 @@@ Project: jackson-databin",
                "   (reported by Rob W)",
                " +#1899: Another two gadgets to exploit default typing issue in jackson-databind",
                " + (reported by OneSourceCat@github)",
                "+ #1931: Two more `c3p0` gadgets to exploit default typing issue"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2ca9129a90c38cae59a148ff80e6148df6d37e69",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517631854,
            "hunks": 2,
            "message": "Sigh. Stupid powermock, wrt java 9",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4fc6f4f67..fc91f755e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -62,3 +62,6 @@",
                "       <artifactId>powermock-module-junit4</artifactId>",
                "+<!-- 02-Feb-2018, tatu: Ought to work. Does not. ",
                "       <version>2.0.0-beta.5</version>",
                "+-->",
                "+      <version>1.7.3</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "83bbd37da3e4bd80b2f24974a04bd48bebcfda04",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517687414,
            "hunks": 1,
            "message": "java 9 travis build again",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 46e46302d..76cfc20a1 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -5,3 +5,3 @@ jdk:",
                "   - openjdk8",
                "-  - openjdk9",
                "+  - oraclejdk9"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "3b59fbe6ceb2e2e4f2e978a66e45e554ef2d5980",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1518320098,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "755c32c61238c6bc6535afc2d39945f19fbfdbbc",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517688479,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "cb0e111ee8f8d37c1f222778ab4a503fe6a41932",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517797958,
            "hunks": 3,
            "message": "Merge branch '2.9'",
            "diff": [
                "diff --cc src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index 593fa0486,cefa096e6..d00b801de",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@@ -1042,4 -1055,4 +1042,4 @@@ public abstract class BeanDeserializerB",
                "          SettableBeanProperty prop = (_beanProperties == null) ?",
                " -                null : _beanProperties.find(propertyName);",
                " +                null : _beanProperties.findDefinition(propertyName);",
                "-         if (_neitherNull(prop, _propertyBasedCreator)) {",
                "+         if (prop == null && _propertyBasedCreator != null) {",
                "              prop = _propertyBasedCreator.findCreatorProperty(propertyName);",
                "@@@ -1060,4 -1075,4 +1060,4 @@@",
                "          SettableBeanProperty prop = (_beanProperties == null) ?",
                " -                null : _beanProperties.find(propertyIndex);",
                " +                null : _beanProperties.findDefinition(propertyIndex);",
                "-         if (_neitherNull(prop, _propertyBasedCreator)) {",
                "+         if (prop == null && _propertyBasedCreator != null) {",
                "              prop = _propertyBasedCreator.findCreatorProperty(propertyIndex);",
                "@@@ -1066,3 -1081,3 +1066,3 @@@",
                "      }",
                "--    ",
                "++",
                "      /**"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        }
    ]
}
