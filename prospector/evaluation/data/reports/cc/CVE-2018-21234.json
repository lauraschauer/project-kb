{
    "advisory_record": {
        "cve_id": "CVE-2018-21234",
        "description": "Jodd before 5.0.4 performs Deserialization of Untrusted JSON Data when setClassMetadataName is set.",
        "reserved_timestamp": 1590019200,
        "published_timestamp": 1590099331,
        "updated_timestamp": 1628676394,
        "repository_url": null,
        "references": {
            "": 231,
            "commit::9bffc3913aeb8472c11bb543243004b4b4376f16": 12,
            "https://github.com/oblac/jodd/issues/628": 5,
            "commit::d246929d98b987f64ab6f5e37f459230bb60587c": 5,
            "commit::d17d0938a5cab741c805bbf623215f09b5f14ded": 5,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.com/oblac/jodd/compare/v5.0.3...v5.0.4": 2,
            "https://lists.apache.org/thread.html/rc23200043872384e0fc48a4a4502f4c6b4b5ddc79ba4076414150d59%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rf458683390d6650b26a2c8ba8ad396e038e520ad1cc3f3f1e20514d9%40%3Cdev.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r965503b27d67a2d934e34fc1d088c9547d51d927c43b8b9bd9b7e695%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r0bacc701ab7105500a0ab2769270d18f332cb379e6a62ec7553f3327%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r157d01c96a2c10e7ceb3e005f42c52cfe87b11dd018935e1c4277433%40%3Cgitbox.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r729bc1e0f367fe8a857ac8a14641dba284ac4cf5131edf483022cf59%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rdce006b282e56c5cc73cdf452c51c5097154d0503396d62f48abbeae%40%3Cgitbox.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rdbb99b43334b59d3d3478d360c87e3235ba22edb1de7d39019194347%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rc85b650b4ad2c77d7c39c69824488e40dce6d0ebbb4204777d094375%40%3Cgitbox.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rd575d9877424a2d8776f5c2ff33bf3dc3382cd83f031d483f29c11ab%40%3Cissues.hive.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r317aec95c436848233047af7ecb3ce04ce446eb6031f981aef50df0d%40%3Cdev.drill.apache.org%3E": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062": 2,
            "https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf": 2,
            "https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization#111-security-risks-using-global-default-typing": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-comparing-branches-in-pull-requests#three-dot-and-two-dot-git-diff-comparisons": 2,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/advisories/GHSA-jrg3-qq99-35g7": 1,
            "https://github.com/oblac/jodd/compare/oblac:2cd4c9c...oblac:9c891fc": 1,
            "https://github.com/oblac/jodd/issues/625": 1,
            "https://github.com/oblac/jodd/issues/627": 1
        },
        "affected_products": [
            "Jodd",
            "Data",
            "n/a",
            "Deserialization",
            "Untrusted",
            "JSON"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "JSON",
            "setClassMetadataName"
        ],
        "keywords": [
            "deserialization",
            "untrusted",
            "setclassmetadataname",
            "perform",
            "json",
            "jodd",
            "data"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "9bffc3913aeb8472c11bb543243004b4b4376f16",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534523540,
            "hunks": 6,
            "message": "Added `allowClass` (closes #628)",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonParser.java b/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "index 95ff9b848..dc6d408f2 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "@@ -38,2 +38,3 @@ import jodd.util.UnsafeUtil;",
                " import java.math.BigInteger;",
                "+import java.util.ArrayList;",
                " import java.util.Collection;",
                "@@ -309,2 +310,22 @@ public class JsonParser extends JsonParserBase {",
                "+\t/**",
                "+\t * Adds a {@link jodd.util.Wildcard wildcard} pattern for white-listing classes.",
                "+\t * @see #setClassMetadataName(String)",
                "+\t */",
                "+\tpublic JsonParser allowClass(final String classPattern) {",
                "+\t\tif (super.classnameWhitelist == null) {",
                "+\t\t\tsuper.classnameWhitelist = new ArrayList<>();",
                "+\t\t}",
                "+\t\tclassnameWhitelist.add(classPattern);",
                "+\t\treturn this;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Removes the whitelist of allowed classes.",
                "+\t * @see #setClassMetadataName(String)",
                "+\t */",
                "+\tpublic JsonParser allowAllClasses() {",
                "+\t\tclassnameWhitelist = null;",
                "+\t\treturn this;",
                "+\t}",
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonParserBase.java b/jodd-json/src/main/java/jodd/json/JsonParserBase.java",
                "index 5f9ba42bc..0a4cccda0 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonParserBase.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonParserBase.java",
                "@@ -57,2 +57,3 @@ public abstract class JsonParserBase {",
                " \tprotected Supplier<List> listSupplier = ARRAYLIST_SUPPLIER;",
                "+\tprotected List<String> classnameWhitelist;",
                "diff --git a/jodd-json/src/main/java/jodd/json/MapToBean.java b/jodd-json/src/main/java/jodd/json/MapToBean.java",
                "index d0472a5e4..dfd8bb2cf 100644",
                "--- a/jodd-json/src/main/java/jodd/json/MapToBean.java",
                "+++ b/jodd-json/src/main/java/jodd/json/MapToBean.java",
                "@@ -34,2 +34,3 @@ import jodd.util.ClassLoaderUtil;",
                " import jodd.util.ClassUtil;",
                "+import jodd.util.Wildcard;",
                "@@ -71,2 +72,4 @@ public class MapToBean {",
                " \t\telse {",
                "+\t\t\tcheckClassName(jsonParser.classnameWhitelist, className);",
                "+",
                " \t\t\ttry {",
                "@@ -147,2 +150,13 @@ public class MapToBean {",
                "+\tprivate void checkClassName(final List<String> classnameWhitelist, final String className) {",
                "+\t\tif (classnameWhitelist == null) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\tclassnameWhitelist.forEach(pattern -> {",
                "+\t\t\tif (!Wildcard.equalsOrMatch(className, pattern)) {",
                "+\t\t\t\tthrow new JsonException(\"Class can't be loaded as it is not whitelisted: \" + className);",
                "+\t\t\t}",
                "+\t\t});",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonParser.java",
                "jodd-json/src/main/java/jodd/json/JsonParserBase.java",
                "jodd-json/src/main/java/jodd/json/MapToBean.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "628": "HIVE:25054 Upgrade jodd-core dependency to get rid of CVE-2018-21234 apache/hive#2217"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "VULN_ID_IN_LINKED_ISSUE",
                    "message": "Issue 628 linked to the commit mentions the Vuln ID. ",
                    "relevance": 32
                },
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 628",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 12 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: setClassMetadataName",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/MapToBean.java, jodd-json/src/main/java/jodd/json/JsonParserBase.java, jodd-json/src/main/java/jodd/json/JsonParser.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 628",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d246929d98b987f64ab6f5e37f459230bb60587c",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534175858,
            "hunks": 9,
            "message": "Allow injection in private fields of supertypes (closes #625)",
            "diff": [
                "diff --git a/jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java b/jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java",
                "index b18b96ea4..b544781f7 100644",
                "--- a/jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java",
                "+++ b/jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java",
                "@@ -36,3 +36,5 @@ import java.util.ArrayList;",
                " import java.util.Collection;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Set;",
                "@@ -52,34 +54,47 @@ public class PropertyResolver {",
                " \t */",
                "-\tpublic PropertyInjectionPoint[] resolve(final Class type, final boolean autowire) {",
                "+\tpublic PropertyInjectionPoint[] resolve(Class type, final boolean autowire) {",
                "+\t\tfinal List<PropertyInjectionPoint> list = new ArrayList<>();",
                "+\t\tfinal Set<String> usedPropertyNames = new HashSet<>();",
                "+",
                " \t\t// lookup fields",
                "-\t\tClassDescriptor cd = ClassIntrospector.get().lookup(type);",
                "-\t\tList<PropertyInjectionPoint> list = new ArrayList<>();",
                "-\t\tPropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors();",
                "+\t\twhile (type != Object.class) {",
                "-\t\tfor (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) {",
                "+\t\t\tfinal ClassDescriptor cd = ClassIntrospector.get().lookup(type);",
                "+\t\t\tfinal PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors();",
                "-\t\t\tif (propertyDescriptor.isGetterOnly()) {",
                "-\t\t\t\tcontinue;",
                "-\t\t\t}",
                "+\t\t\tfor (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) {",
                "-\t\t\tClass propertyType = propertyDescriptor.getType();",
                "-\t\t\tif (ClassUtil.isTypeOf(propertyType, Collection.class)) {",
                "-\t\t\t\tcontinue;",
                "-\t\t\t}",
                "+\t\t\t\tif (propertyDescriptor.isGetterOnly()) {",
                "+\t\t\t\t\tcontinue;",
                "+\t\t\t\t}",
                "-\t\t\tBeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor);",
                "+\t\t\t\tif (usedPropertyNames.contains(propertyDescriptor.getName())) {",
                "+\t\t\t\t\tcontinue;",
                "+\t\t\t\t}",
                "-\t\t\tif (reference == null) {",
                "-\t\t\t\tif (!autowire) {",
                "+\t\t\t\tClass propertyType = propertyDescriptor.getType();",
                "+\t\t\t\tif (ClassUtil.isTypeOf(propertyType, Collection.class)) {",
                " \t\t\t\t\tcontinue;",
                " \t\t\t\t}",
                "-\t\t\t\telse {",
                "-\t\t\t\t\treference = referencesResolver.buildDefaultReference(propertyDescriptor);",
                "+",
                "+\t\t\t\tBeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor);",
                "+",
                "+\t\t\t\tif (reference == null) {",
                "+\t\t\t\t\tif (!autowire) {",
                "+\t\t\t\t\t\tcontinue;",
                "+\t\t\t\t\t} else {",
                "+\t\t\t\t\t\treference = referencesResolver.buildDefaultReference(propertyDescriptor);",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "+",
                "+\t\t\t\tlist.add(new PropertyInjectionPoint(propertyDescriptor, reference));",
                "+",
                "+\t\t\t\tusedPropertyNames.add(propertyDescriptor.getName());",
                " \t\t\t}",
                "-\t\t\tlist.add(new PropertyInjectionPoint(propertyDescriptor, reference));",
                "+\t\t\t// go to the supertype",
                "+\t\t\ttype = type.getSuperclass();",
                " \t\t}",
                "-\t\tPropertyInjectionPoint[] fields;",
                "+\t\tfinal PropertyInjectionPoint[] fields;",
                "diff --git a/jodd-petite/src/main/java/jodd/petite/resolver/ReferencesResolver.java b/jodd-petite/src/main/java/jodd/petite/resolver/ReferencesResolver.java",
                "index 5545393c5..d42403923 100644",
                "--- a/jodd-petite/src/main/java/jodd/petite/resolver/ReferencesResolver.java",
                "+++ b/jodd-petite/src/main/java/jodd/petite/resolver/ReferencesResolver.java",
                "@@ -127,2 +127,23 @@ public class ReferencesResolver {",
                "+\tpublic BeanReferences readReferenceFromAnnotation(final FieldDescriptor fieldDescriptor) {",
                "+\t\tfinal PetiteInject ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class);",
                "+",
                "+\t\tif (ref == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tBeanReferences reference = null;",
                "+",
                "+\t\tString name = ref.value().trim();",
                "+\t\tif (name.length() != 0) {",
                "+\t\t\treference = BeanReferences.of(name);",
                "+\t\t}",
                "+",
                "+\t\t//reference = updateReferencesWithDefaultsIfNeeded(propertyDescriptor, reference);",
                "+",
                "+\t\treference = reference.removeDuplicateNames();",
                "+",
                "+\t\treturn reference;",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java",
                "jodd-petite/src/main/java/jodd/petite/resolver/ReferencesResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "625": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 625",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: injection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 625",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d17d0938a5cab741c805bbf623215f09b5f14ded",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534411804,
            "hunks": 26,
            "message": "NaturalOrderComparator rules straightened a bit (fixes #627)",
            "diff": [
                "diff --git a/jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java b/jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java",
                "index b43da5ee9..3e7f2e503 100644",
                "--- a/jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java",
                "+++ b/jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java",
                "@@ -35,3 +35,3 @@ public class FileNameComparator implements Comparator<File>, Serializable {",
                " \tprotected final int order;",
                "-\tprotected NaturalOrderComparator<String> naturalOrderComparator = new NaturalOrderComparator<>(true, true);",
                "+\tprotected NaturalOrderComparator<String> naturalOrderComparator = new NaturalOrderComparator<>(true, true, true);",
                "diff --git a/jodd-core/src/main/java/jodd/util/NaturalOrderComparator.java b/jodd-core/src/main/java/jodd/util/NaturalOrderComparator.java",
                "index 3fb6009b4..63f71c7b9 100644",
                "--- a/jodd-core/src/main/java/jodd/util/NaturalOrderComparator.java",
                "+++ b/jodd-core/src/main/java/jodd/util/NaturalOrderComparator.java",
                "@@ -53,10 +53,12 @@ public class NaturalOrderComparator<T> implements Comparator<T>, Serializable {",
                " \tprotected final boolean ignoreAccents;",
                "+\tprotected final boolean skipSpaces;",
                " \tpublic NaturalOrderComparator() {",
                "-\t\tthis(false, true);",
                "+\t\tthis(false, true, true);",
                " \t}",
                "-\tpublic NaturalOrderComparator(final boolean ignoreCase, final boolean ignoreAccents) {",
                "+\tpublic NaturalOrderComparator(final boolean ignoreCase, final boolean ignoreAccents, final boolean skipSpaces) {",
                " \t\tthis.ignoreCase = ignoreCase;",
                " \t\tthis.ignoreAccents = ignoreAccents;",
                "+\t\tthis.skipSpaces = skipSpaces;",
                " \t}",
                "@@ -67,38 +69,63 @@ public class NaturalOrderComparator<T> implements Comparator<T>, Serializable {",
                " \t * value wins.",
                "+\t * @return if numbers are different, only 1 element is returned.",
                " \t */",
                "-\tprotected int compareDigits(final String str1, int ndx1, final String str2, int ndx2) {",
                "-\t\tint bias = 0;",
                "+\tprotected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) {",
                "+\t\t// iterate all digits in the first string",
                "-\t\twhile (true) {",
                "-\t\t\tchar char1 = charAt(str1, ndx1);",
                "-\t\t\tchar char2 = charAt(str2, ndx2);",
                "-",
                "-\t\t\tboolean isDigitChar1 = CharUtil.isDigit(char1);",
                "-\t\t\tboolean isDigitChar2 = CharUtil.isDigit(char2);",
                "+\t\tint zeroCount1 = 0;",
                "+\t\twhile (charAt(str1, ndx1) == '0') {",
                "+\t\t\tzeroCount1++;",
                "+\t\t\tndx1++;",
                "+\t\t}",
                "-\t\t\tif (!isDigitChar1 && !isDigitChar2) {",
                "-\t\t\t\treturn bias;",
                "-\t\t\t}",
                "+\t\tint len1 = 0;",
                "+\t\twhile (true) {",
                "+\t\t\tfinal char char1 = charAt(str1, ndx1);",
                "+\t\t\tfinal boolean isDigitChar1 = CharUtil.isDigit(char1);",
                " \t\t\tif (!isDigitChar1) {",
                "-\t\t\t\treturn -1;",
                "+\t\t\t\tbreak;",
                " \t\t\t}",
                "+\t\t\tlen1++;",
                "+\t\t\tndx1++;",
                "+\t\t}",
                "+",
                "+\t\t// iterate all digits in the second string and compare with the first",
                "+",
                "+\t\tint zeroCount2 = 0;",
                "+\t\twhile (charAt(str2, ndx2) == '0') {",
                "+\t\t\tzeroCount2++;",
                "+\t\t\tndx2++;",
                "+\t\t}",
                "+",
                "+\t\tint len2 = 0;",
                "+",
                "+\t\tint ndx1_new = ndx1 - len1;",
                "+\t\tint equalNumbers = 0;",
                "+",
                "+\t\twhile (true) {",
                "+\t\t\tfinal char char2 = charAt(str2, ndx2);",
                "+\t\t\tfinal boolean isDigitChar2 = CharUtil.isDigit(char2);",
                " \t\t\tif (!isDigitChar2) {",
                "-\t\t\t\treturn 1;",
                "+\t\t\t\tbreak;",
                " \t\t\t}",
                "-",
                "-\t\t\tif (char1 < char2) {",
                "-\t\t\t\tif (bias == 0) {",
                "-\t\t\t\t\tbias = -1;",
                "-\t\t\t\t}",
                "-\t\t\t} else if (char1 > char2) {",
                "-\t\t\t\tif (bias == 0) {",
                "-\t\t\t\t\tbias = 1;",
                "-\t\t\t\t}",
                "-\t\t\t} else if (char1 == 0 && char2 == 0) {",
                "-\t\t\t\treturn bias;",
                "+\t\t\tif (equalNumbers == 0 && (ndx1_new < ndx1)) {",
                "+\t\t\t\tequalNumbers = charAt(str1, ndx1_new++) - char2;",
                " \t\t\t}",
                "-",
                "-\t\t\tndx1++;",
                "+\t\t\tlen2++;",
                " \t\t\tndx2++;",
                " \t\t}",
                "+",
                "+\t\t// compare",
                "+",
                "+\t\tif (len1 != len2) {",
                "+\t\t\t// numbers are not equals size",
                "+\t\t\treturn new int[] {len1 - len2};",
                "+\t\t}",
                "+",
                "+\t\tif (equalNumbers != 0) {",
                "+\t\t\treturn new int[] {equalNumbers};",
                "+\t\t}",
                "+",
                "+\t\t// numbers are equal, but number of zeros is different",
                "+\t\treturn new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2};",
                " \t}",
                "@@ -122,13 +149,6 @@ public class NaturalOrderComparator<T> implements Comparator<T>, Serializable {",
                " \t\tint ndx1 = 0, ndx2 = 0;",
                "-\t\tint zeroCount1, zeroCount2;",
                "-\t\tint zerosDelta = 0;",
                "-\t\tint lastAllZerosResult = 0;",
                " \t\tchar char1, char2;",
                "-",
                "-\t\tint result;",
                "+\t\tint lastZeroDifference = 0;",
                " \t\twhile (true) {",
                "-\t\t\t// only count the number of zeroes leading the last number compared",
                "-\t\t\tzeroCount1 = zeroCount2 = 0;",
                "-",
                " \t\t\tchar1 = charAt(str1, ndx1);",
                "@@ -136,90 +156,43 @@ public class NaturalOrderComparator<T> implements Comparator<T>, Serializable {",
                "-\t\t\t// skip over leading spaces or zeros in both strings",
                "-",
                "-\t\t\twhile (Character.isSpaceChar(char1) || char1 == '0') {",
                "-\t\t\t\tif (char1 == '0') {",
                "-\t\t\t\t\tzeroCount1++;",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tzeroCount1 = 0;\t\t// counts only last 0 prefixes, space char interrupts the array of 0s",
                "+\t\t\t// skip over spaces in both strings",
                "+\t\t\tif (skipSpaces) {",
                "+\t\t\t\twhile (Character.isSpaceChar(char1)) {",
                "+\t\t\t\t\tndx1++;",
                "+\t\t\t\t\tchar1 = charAt(str1, ndx1);",
                " \t\t\t\t}",
                "-\t\t\t\tndx1++;",
                "-\t\t\t\tchar1 = charAt(str1, ndx1);",
                "-\t\t\t}",
                "-\t\t\twhile (Character.isSpaceChar(char2) || char2 == '0') {",
                "-\t\t\t\tif (char2 == '0') {",
                "-\t\t\t\t\tzeroCount2++;",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tzeroCount2 = 0;",
                "+\t\t\t\twhile (Character.isSpaceChar(char2)) {",
                "+\t\t\t\t\tndx2++;",
                "+\t\t\t\t\tchar2 = charAt(str2, ndx2);",
                " \t\t\t\t}",
                "-\t\t\t\tndx2++;",
                "-\t\t\t\tchar2 = charAt(str2, ndx2);",
                "-\t\t\t}",
                "-",
                "-\t\t\tif (zeroCount1 > 0 || zeroCount2 > 0) {",
                "-\t\t\t\tzerosDelta = zeroCount1 - zeroCount2;",
                " \t\t\t}",
                "-\t\t\t// process remaining digits",
                "+\t\t\t// check for numbers",
                "-\t\t\tboolean isDigitChar1 = CharUtil.isDigit(char1);",
                "-\t\t\tboolean isDigitChar2 = CharUtil.isDigit(char2);",
                "+\t\t\tfinal boolean isDigitChar1 = CharUtil.isDigit(char1);",
                "+\t\t\tfinal boolean isDigitChar2 = CharUtil.isDigit(char2);",
                " \t\t\tif (isDigitChar1 && isDigitChar2) {",
                "-\t\t\t\tresult = compareDigits(str1, ndx1, str2, ndx2);",
                "-\t\t\t\tif (result != 0) {",
                "+\t\t\t\t// numbers detected!",
                "+",
                "+\t\t\t\tfinal int[] result = compareDigits(str1, ndx1, str2, ndx2);",
                "+",
                "+\t\t\t\tif (result[0] != 0) {",
                " \t\t\t\t\t// not equals, return",
                "-\t\t\t\t\treturn result;",
                "-\t\t\t\t}",
                "-\t\t\t\t// if numbers are equal",
                "-\t\t\t\tif (zeroCount1 != zeroCount2) {",
                "-\t\t\t\t\treturn zerosDelta;",
                "+\t\t\t\t\treturn result[0];",
                " \t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif (char1 == 0 && char2 == 0) {",
                "-\t\t\t\t// both strings end; the strings are the same",
                "-\t\t\t\tif (lastAllZerosResult == 0) {",
                "-\t\t\t\t\treturn zerosDelta;",
                "+\t\t\t\t// equals, save zero difference if not already saved",
                "+\t\t\t\tif (lastZeroDifference == 0) {",
                "+\t\t\t\t\tlastZeroDifference = result[1];",
                " \t\t\t\t}",
                "-\t\t\t\treturn lastAllZerosResult;",
                "-\t\t\t}",
                "-\t\t\t// check when one of the numbers is just zeros; as the other",
                "-\t\t\t// string is still a number",
                "-\t\t\tif (isDigitChar1 || isDigitChar2) {",
                "-\t\t\t\tif (zeroCount1 > 0 && zeroCount2 > 0) {",
                "-\t\t\t\t\tif (zeroCount1 != zeroCount2) {",
                "-\t\t\t\t\t\treturn -zerosDelta;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "+\t\t\t\tndx1 = result[2];",
                "+\t\t\t\tndx2 = result[3];",
                "+\t\t\t\tcontinue;",
                " \t\t\t}",
                "-\t\t\t// check if both numbers are zeros",
                "-\t\t\tif (zerosDelta != 0) {",
                "-\t\t\t\t// so we really have both number with at least one zero?",
                "-\t\t\t\tif (zeroCount1 > 0 && zeroCount2 > 0) {",
                "-\t\t\t\t\tlastAllZerosResult = zerosDelta;",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\t// one of the number is empty strings",
                "-\t\t\t\t\t// the other char defines the order!",
                "-",
                "-",
                "-\t\t\t\t\tif (zeroCount1 > 0) {",
                "-\t\t\t\t\t\tif (char2 > '0') {",
                "-\t\t\t\t\t\t\treturn -zerosDelta;",
                "-\t\t\t\t\t\t} else {",
                "-\t\t\t\t\t\t\treturn zerosDelta;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t} else if (zeroCount2 > 0) {",
                "-\t\t\t\t\t\tif (char1 > '0') {",
                "-\t\t\t\t\t\t\treturn -zerosDelta;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\telse  {",
                "-\t\t\t\t\t\t\treturn zerosDelta;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\treturn 0;",
                "-\t\t\t\t}",
                "+\t\t\tif (char1 == 0 && char2 == 0) {",
                "+\t\t\t\t// both strings end; the strings are the same",
                "+\t\t\t\treturn lastZeroDifference;",
                " \t\t\t}",
                "@@ -254,3 +227,3 @@ public class NaturalOrderComparator<T> implements Comparator<T>, Serializable {",
                " \t\tfor (int i = 0; i < ACCENT_CHARS.length; i+=2) {",
                "-\t\t\tchar accentChar = ACCENT_CHARS[i];",
                "+\t\t\tfinal char accentChar = ACCENT_CHARS[i];",
                " \t\t\tif (accentChar == c) {"
            ],
            "changed_files": [
                "jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java",
                "jodd-core/src/main/java/jodd/util/NaturalOrderComparator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "627": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 627",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 627",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63c4eb0cc95e18f938acf0f9687543589218f053",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534515470,
            "hunks": 2,
            "message": "Add security concerns in the JavaDoc of json parser.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonParser.java b/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "index 8ccb27ba7..95ff9b848 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonParser.java",
                "@@ -280,2 +280,10 @@ public class JsonParser extends JsonParserBase {",
                " \t * Sets local class meta-data name.",
                "+\t * <p>",
                "+\t * Note that by using the class meta-data name you may expose a security hole in case untrusted source",
                "+\t * manages to specify a class that is accessible through class loader and exposes set of methods and/or fields,",
                "+\t * access of which opens an actual security hole. Such classes are known as \u00e2\u0080\u009cdeserialization gadget\u00e2\u0080\u009ds.",
                "+\t *",
                "+\t * Because of this, use of \"default typing\" is not encouraged in general, and in particular is recommended against",
                "+\t * if the source of content is not trusted. Conversely, default typing may be used for processing content in",
                "+\t * cases where both ends (sender and receiver) are controlled by same entity.",
                " \t */",
                "@@ -286,2 +294,7 @@ public class JsonParser extends JsonParserBase {",
                "+\t/**",
                "+\t * Sets usage of default class meta-data name.",
                "+\t * Using it may introduce a security hole, see {@link #setClassMetadataName(String)} for more details.",
                "+\t * @see #setClassMetadataName(String)",
                "+\t */",
                " \tpublic JsonParser withClassMetadata(final boolean useMetadata) {"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: setClassMetadataName",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/JsonParser.java",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: json",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "66ff03b5ba1c3fd3ef6fd9c6920fa1af6ca203d9",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534164025,
            "hunks": 16,
            "message": "Added `excludeEmpty` flag for JSON serializer.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonContext.java b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "index d4ac6f361..3dcba6bcd 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "@@ -50,2 +50,3 @@ public class JsonContext extends JsonWriter {",
                " \tprotected final boolean excludeNulls;",
                "+\tprotected final boolean excludeEmpty;",
                " \tprotected final Function<Object, TypeJsonSerializer> serializerResolver;",
                "@@ -58,2 +59,3 @@ public class JsonContext extends JsonWriter {",
                " \t\tthis.excludeNulls = jsonSerializer.excludeNulls;",
                "+\t\tthis.excludeEmpty = jsonSerializer.excludeEmpty;",
                " \t\tthis.serializerResolver = jsonSerializer.serializerResolver;",
                "@@ -75,2 +77,6 @@ public class JsonContext extends JsonWriter {",
                "+\tpublic boolean isExcludeEmpty() {",
                "+\t\treturn excludeEmpty;",
                "+\t}",
                "+",
                " \t// ---------------------------------------------------------------- path and value context",
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonSerializer.java b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "index 4a8a9e7dc..125e8c3dd 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "@@ -114,2 +114,3 @@ public class JsonSerializer {",
                " \tprotected boolean excludeNulls = false;",
                "+\tprotected boolean excludeEmpty = false;",
                " \tprotected Function<Object, TypeJsonSerializer> serializerResolver = null;",
                "@@ -269,2 +270,7 @@ public class JsonSerializer {",
                "+\tpublic JsonSerializer excludeEmpty(final boolean excludeEmpty) {",
                "+\t\tthis.excludeEmpty = excludeEmpty;",
                "+\t\treturn this;",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java",
                "index 0714b68f5..8f706e0eb 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java",
                "@@ -52,5 +52,10 @@ public class ArraysJsonSerializer<K> extends ValueJsonSerializer<Object> {",
                " \tpublic void serializeValue(final JsonContext jsonContext, final Object array) {",
                "+\t\tfinal int length = getLength((K[]) array);",
                "+",
                "+\t\tif (length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "-\t\tint length = getLength((K[]) array);",
                " \t\tint count = 0;",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java",
                "index 4e1251499..11d349596 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class BooleanArrayJsonSerializer implements TypeJsonSerializer<boolean[]>",
                " \tpublic boolean serialize(final JsonContext jsonContext, final boolean[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java",
                "index 546f46234..53060d7a3 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class ByteArrayJsonSerializer implements TypeJsonSerializer<byte[]> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final byte[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java",
                "index 305618cc0..cd0641284 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class DoubleArrayJsonSerializer implements TypeJsonSerializer<double[]> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final double[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java",
                "index a27bbc823..88905152f 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class FloatArrayJsonSerializer implements TypeJsonSerializer<float[]> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final float[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java",
                "index e4e57d5bc..92221a16f 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class IntArrayJsonSerializer implements TypeJsonSerializer<int[]> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final int[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\t",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java b/jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java",
                "index 9c126863b..7ecf26d46 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java",
                "@@ -35,5 +35,10 @@ public class JsonArraySerializer implements TypeJsonSerializer<JsonArray> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final JsonArray jsonArray) {",
                "+\t\tfinal int length = jsonArray.size();",
                "+",
                "+\t\tif (length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "-\t\tint length = jsonArray.size();",
                " \t\tint count = 0;",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java",
                "index d4f1bae40..bcd43f99a 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java",
                "@@ -37,2 +37,6 @@ public class LongArrayJsonSerializer implements TypeJsonSerializer<long[]> {",
                " \tpublic boolean serialize(final JsonContext jsonContext, final long[] array) {",
                "+\t\tif (array.length == 0 && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                " \t\tjsonContext.writeOpenArray();",
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java",
                "index 3c6f503e4..09ab0e3cc 100644",
                "--- a/jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java",
                "@@ -39,2 +39,5 @@ public class MapJsonSerializer extends KeyValueJsonSerializer<Map<?, ?>> {",
                " \tpublic void serializeValue(final JsonContext jsonContext, final Map<?, ?> map) {",
                "+\t\tif (map.isEmpty() && jsonContext.isExcludeEmpty()) {",
                "+\t\t\treturn;",
                "+\t\t}",
                " \t\tjsonContext.writeOpenObject();"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonContext.java",
                "jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java",
                "jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: JSON",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/impl/ByteArrayJsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/FloatArrayJsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/LongArrayJsonSerializer.java, jodd-json/src/main/java/jodd/json/JsonContext.java, jodd-json/src/main/java/jodd/json/impl/DoubleArrayJsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/JsonArraySerializer.java, jodd-json/src/main/java/jodd/json/impl/BooleanArrayJsonSerializer.java, jodd-json/src/main/java/jodd/json/JsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/ArraysJsonSerializer.java, jodd-json/src/main/java/jodd/json/impl/IntArrayJsonSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: json",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6ddb305a283accff9f65d23e7c12a1fe183d28c8",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534162352,
            "hunks": 1,
            "message": "Added EmptyJsonSerializer.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/impl/EmptyJsonSerializer.java b/jodd-json/src/main/java/jodd/json/impl/EmptyJsonSerializer.java",
                "new file mode 100644",
                "index 000000000..3fe98f263",
                "--- /dev/null",
                "+++ b/jodd-json/src/main/java/jodd/json/impl/EmptyJsonSerializer.java",
                "@@ -0,0 +1,38 @@",
                "+// Copyright (c) 2003-present, Jodd Team (http://jodd.org)",
                "+// All rights reserved.",
                "+//",
                "+// Redistribution and use in source and binary forms, with or without",
                "+// modification, are permitted provided that the following conditions are met:",
                "+//",
                "+// 1. Redistributions of source code must retain the above copyright notice,",
                "+// this list of conditions and the following disclaimer.",
                "+//",
                "+// 2. Redistributions in binary form must reproduce the above copyright",
                "+// notice, this list of conditions and the following disclaimer in the",
                "+// documentation and/or other materials provided with the distribution.",
                "+//",
                "+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+// POSSIBILITY OF SUCH DAMAGE.",
                "+",
                "+package jodd.json.impl;",
                "+",
                "+import jodd.json.JsonContext;",
                "+",
                "+/**",
                "+ * Not a serializer - simply ignores the value and outputs nothing.",
                "+ */",
                "+public class EmptyJsonSerializer extends ValueJsonSerializer {",
                "+",
                "+\t@Override",
                "+\tpublic void serializeValue(final JsonContext jsonContext, final Object value) {",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/impl/EmptyJsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/impl/EmptyJsonSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: json",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "53b7a708deda620a1c3ee48bfb8fe098b1eb8240",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534162804,
            "hunks": 8,
            "message": "Added onValue().",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonContext.java b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "index 8b47cef29..d4ac6f361 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "@@ -34,2 +34,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.function.Function;",
                "@@ -49,2 +50,3 @@ public class JsonContext extends JsonWriter {",
                " \tprotected final boolean excludeNulls;",
                "+\tprotected final Function<Object, TypeJsonSerializer> serializerResolver;",
                "@@ -56,2 +58,3 @@ public class JsonContext extends JsonWriter {",
                " \t\tthis.excludeNulls = jsonSerializer.excludeNulls;",
                "+\t\tthis.serializerResolver = jsonSerializer.serializerResolver;",
                " \t}",
                "@@ -174,20 +177,29 @@ public class JsonContext extends JsonWriter {",
                "-\t\t// + read paths map",
                "+\t\t// callback",
                "-\t\tif (jsonSerializer.pathSerializersMap != null) {",
                "-\t\t\ttypeJsonSerializer = jsonSerializer.pathSerializersMap.get(path);",
                "+\t\tif (serializerResolver != null) {",
                "+\t\t\ttypeJsonSerializer = serializerResolver.apply(object);",
                " \t\t}",
                "-\t\tClass type = object.getClass();",
                "+\t\tif (typeJsonSerializer == null) {",
                "-\t\t// + read types map",
                "+\t\t\t// + read paths map",
                "-\t\tif (jsonSerializer.typeSerializersMap != null) {",
                "-\t\t\ttypeJsonSerializer = jsonSerializer.typeSerializersMap.lookup(type);",
                "-\t\t}",
                "+\t\t\tif (jsonSerializer.pathSerializersMap != null) {",
                "+\t\t\t\ttypeJsonSerializer = jsonSerializer.pathSerializersMap.get(path);",
                "+\t\t\t}",
                "-\t\t// + globals",
                "+\t\t\tfinal Class type = object.getClass();",
                "-\t\tif (typeJsonSerializer == null) {",
                "-\t\t\ttypeJsonSerializer = TypeJsonSerializerMap.get().lookup(type);",
                "+\t\t\t// + read local types map",
                "+",
                "+\t\t\tif (jsonSerializer.typeSerializersMap != null) {",
                "+\t\t\t\ttypeJsonSerializer = jsonSerializer.typeSerializersMap.lookup(type);",
                "+\t\t\t}",
                "+",
                "+\t\t\t// + globals",
                "+",
                "+\t\t\tif (typeJsonSerializer == null) {",
                "+\t\t\t\ttypeJsonSerializer = TypeJsonSerializerMap.get().lookup(type);",
                "+\t\t\t}",
                " \t\t}",
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonSerializer.java b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "index 666da7569..4a8a9e7dc 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "@@ -33,2 +33,3 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "+import java.util.function.Function;",
                "@@ -113,2 +114,3 @@ public class JsonSerializer {",
                " \tprotected boolean excludeNulls = false;",
                "+\tprotected Function<Object, TypeJsonSerializer> serializerResolver = null;",
                "@@ -275,2 +277,11 @@ public class JsonSerializer {",
                "+\t/**",
                "+\t * Defines callback for value serialization. It defines the instance of {@link TypeJsonSerializer}",
                "+\t * to be used with the value. If {@code null} is returned, default serializer will be resolved.",
                "+\t */",
                "+\tpublic JsonSerializer onValue(final Function<Object, TypeJsonSerializer> function) {",
                "+\t\tthis.serializerResolver = function;",
                "+\t\treturn this;",
                "+\t}",
                "+",
                " \t// ---------------------------------------------------------------- serialize"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonContext.java",
                "jodd-json/src/main/java/jodd/json/JsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/JsonSerializer.java, jodd-json/src/main/java/jodd/json/JsonContext.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "525ecc6eabc0c4d15f686b4c8b5a6d4557568730",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534164061,
            "hunks": 1,
            "message": "Added javadoc.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonSerializer.java b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "index 125e8c3dd..4133c20a7 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "@@ -270,2 +270,5 @@ public class JsonSerializer {",
                "+\t/**",
                "+\t * Excludes empty maps and collections.",
                "+\t */",
                " \tpublic JsonSerializer excludeEmpty(final boolean excludeEmpty) {"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "184e59a2e735cc7529c87a50ff266f3875a99400",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534160126,
            "hunks": 6,
            "message": "Simplify the ctor.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonContext.java b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "index 7003a58dd..8b47cef29 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonContext.java",
                "@@ -50,4 +50,4 @@ public class JsonContext extends JsonWriter {",
                "-\tpublic JsonContext(final JsonSerializer jsonSerializer, final Appendable appendable, final boolean excludeNulls, final boolean strictStringEncoding) {",
                "-\t\tsuper(appendable, strictStringEncoding);",
                "+\tpublic JsonContext(final JsonSerializer jsonSerializer, final Appendable appendable) {",
                "+\t\tsuper(appendable, jsonSerializer.strictStringEncoding);",
                " \t\tthis.jsonSerializer = jsonSerializer;",
                "@@ -55,3 +55,3 @@ public class JsonContext extends JsonWriter {",
                " \t\tthis.path = new Path();",
                "-\t\tthis.excludeNulls = excludeNulls;",
                "+\t\tthis.excludeNulls = jsonSerializer.excludeNulls;",
                " \t}",
                "@@ -66,3 +66,3 @@ public class JsonContext extends JsonWriter {",
                " \t/**",
                "-\t * Returns <code>true</code> if null values have to be excluded.",
                "+\t * Returns <code>true</code> if <code>null</code> values have to be excluded.",
                " \t */",
                "diff --git a/jodd-json/src/main/java/jodd/json/JsonSerializer.java b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "index 400c08c55..666da7569 100644",
                "--- a/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/JsonSerializer.java",
                "@@ -27,5 +27,5 @@ package jodd.json;",
                "+import jodd.buffer.FastCharBuffer;",
                " import jodd.inex.InExRules;",
                " import jodd.util.ArraysUtil;",
                "-import jodd.buffer.FastCharBuffer;",
                "@@ -314,3 +314,3 @@ public class JsonSerializer {",
                " \tpublic JsonContext createJsonContext(final Appendable appendable) {",
                "-\t\treturn new JsonContext(this, appendable, excludeNulls, strictStringEncoding);",
                "+\t\treturn new JsonContext(this, appendable);",
                " \t}"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/JsonContext.java",
                "jodd-json/src/main/java/jodd/json/JsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/JsonSerializer.java, jodd-json/src/main/java/jodd/json/JsonContext.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "00736fb86b120b3586726796cd3eb09b14cf7fc8",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534162551,
            "hunks": 1,
            "message": "New ctor in action.",
            "diff": [
                "diff --git a/jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java b/jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java",
                "index 468003375..4b932d493 100644",
                "--- a/jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java",
                "+++ b/jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java",
                "@@ -71,3 +71,3 @@ public class PrettyJsonSerializer extends JsonSerializer {",
                " \tpublic JsonContext createJsonContext(final Appendable appendable) {",
                "-\t\treturn new JsonContext(this, appendable, excludeNulls, strictStringEncoding) {",
                "+\t\treturn new JsonContext(this, appendable) {",
                " \t\t\t@Override"
            ],
            "changed_files": [
                "jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: jodd-json/src/main/java/jodd/json/PrettyJsonSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: json",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b7d1df1b91ea0dc1e1aaeeae1a0c9433cc83dc56",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534327827,
            "hunks": 1,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [
                "diff --cc CHANGELOG.md",
                "index 1f8598387,9ea0861e4..d339400a9",
                "--- a/CHANGELOG.md",
                "+++ b/CHANGELOG.md",
                "@@@ -22,4 -20,5 +22,7 @@@ All notable changes to Jodd project ar",
                "  + **mail** - added custom properties.",
                " ++ **json** - added `onValue` callback for JSON serializer.",
                " ++ **json** - added `excludeEmpty` flag for JSON serializer.",
                "+ + **petite** - allow injection in the private fields of super types.",
                "+ ",
                "+ "
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSON",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "78bbc96cfaa63241c0a3f22b9406e8407859f9f7",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534101269,
            "hunks": 5,
            "message": "Use better security for the defaults.",
            "diff": [
                "diff --git a/jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java b/jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java",
                "index 910a9ba39..27bd19095 100644",
                "--- a/jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java",
                "+++ b/jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java",
                "@@ -52,3 +52,3 @@ public class SocketHttpConnectionProvider implements HttpConnectionProvider {",
                " \tprotected String secureEnabledProtocols = System.getProperty(\"https.protocols\");",
                "-\tprotected String sslProtocol = \"SSL\";",
                "+\tprotected String sslProtocol = \"TLSv1.1\";",
                "@@ -71,3 +71,3 @@ public class SocketHttpConnectionProvider implements HttpConnectionProvider {",
                " \t/**",
                "-\t * Returns current ssl protocol used",
                "+\t * Returns current SSL protocol used.",
                " \t */",
                "@@ -78,5 +78,5 @@ public class SocketHttpConnectionProvider implements HttpConnectionProvider {",
                " \t/**",
                "-\t * Sets default SSL protocol to use. One of \"SSL\", \"TLSv1.2\", \"TLSv1.1\", \"TLSv1\"",
                "+\t * Sets default SSL protocol to use. One of \"SSL\", \"TLSv1.2\", \"TLSv1.1\", \"TLSv1\".",
                " \t */",
                "-\tpublic SocketHttpConnectionProvider setSslProtocol(String sslProtocol) {",
                "+\tpublic SocketHttpConnectionProvider setSslProtocol(final String sslProtocol) {",
                " \t\tthis.sslProtocol = sslProtocol;",
                "@@ -92,3 +92,3 @@ public class SocketHttpConnectionProvider implements HttpConnectionProvider {",
                " \tpublic HttpConnection createHttpConnection(final HttpRequest httpRequest) throws IOException {",
                "-\t\tSocketHttpConnection httpConnection;",
                "+\t\tfinal SocketHttpConnection httpConnection;"
            ],
            "changed_files": [
                "jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6a061cdc10bacc5381c91239d6101ce2c0ff5114",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534955472,
            "hunks": 0,
            "message": "Merge pull request #629 from moh-sushi/patch-1 Update BENCHMARKS.md",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "629": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 629",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1bdb9d26b0560c23c5075c5c7b13c1bed3be75eb",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1535030325,
            "hunks": 10,
            "message": "FileUtil.mkdirs methods return create File",
            "diff": [
                "diff --git a/jodd-core/src/main/java/jodd/io/FileUtil.java b/jodd-core/src/main/java/jodd/io/FileUtil.java",
                "index 038c3b780..805c1af91 100644",
                "--- a/jodd-core/src/main/java/jodd/io/FileUtil.java",
                "+++ b/jodd-core/src/main/java/jodd/io/FileUtil.java",
                "@@ -180,4 +180,4 @@ public class FileUtil {",
                " \t */",
                "-\tpublic static void mkdirs(final String dirs) throws IOException {",
                "-\t\tmkdirs(file(dirs));",
                "+\tpublic static File mkdirs(final String dirs) throws IOException {",
                "+\t\treturn mkdirs(file(dirs));",
                " \t}",
                "@@ -190,8 +190,8 @@ public class FileUtil {",
                " \t */",
                "-\tpublic static void mkdirs(final File dirs) throws IOException {",
                "+\tpublic static File mkdirs(final File dirs) throws IOException {",
                " \t\tif (dirs.exists()) {",
                " \t\t\tcheckIsDirectory(dirs);",
                "-\t\t\treturn;",
                "+\t\t\treturn dirs;",
                " \t\t}",
                "-\t\tcheckCreateDirectory(dirs);",
                "+\t\treturn checkCreateDirectory(dirs);",
                " \t}",
                "@@ -201,4 +201,4 @@ public class FileUtil {",
                " \t */",
                "-\tpublic static void mkdir(final String dir) throws IOException {",
                "-\t\tmkdir(file(dir));",
                "+\tpublic static File mkdir(final String dir) throws IOException {",
                "+\t\treturn mkdir(file(dir));",
                " \t}",
                "@@ -210,8 +210,8 @@ public class FileUtil {",
                " \t */",
                "-\tpublic static void mkdir(final File dir) throws IOException {",
                "+\tpublic static File mkdir(final File dir) throws IOException {",
                " \t\tif (dir.exists()) {",
                " \t\t\tcheckIsDirectory(dir);",
                "-\t\t\treturn;",
                "+\t\t\treturn dir;",
                " \t\t}",
                "-\t\tcheckCreateDirectory(dir);",
                "+\t\treturn checkCreateDirectory(dir);",
                " \t}",
                "@@ -1611,3 +1611,3 @@ public class FileUtil {",
                " \t */",
                "-\tprivate static void checkCreateDirectory(final File dir) throws IOException {",
                "+\tprivate static File checkCreateDirectory(final File dir) throws IOException {",
                " \t\tif (!dir.mkdirs()) {",
                "@@ -1615,2 +1615,3 @@ public class FileUtil {",
                " \t\t}",
                "+\t\treturn dir;",
                " \t}"
            ],
            "changed_files": [
                "jodd-core/src/main/java/jodd/io/FileUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fd1adc3144a4d2b29f8d61f3c5ea0c7ece81698f",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1533933971,
            "hunks": 10,
            "message": "Added excluded jars",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index fc6ef9b52..851e07f83 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -35,4 +35,4 @@ description = '''",
                "-//version = '5.0.4-' + date()",
                "-version = '5.0.3'",
                "+version = '5.0.4-' + date()",
                "+//version = '5.0.3'",
                "diff --git a/jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java b/jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java",
                "index 769cb0587..dd73ef72f 100644",
                "--- a/jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java",
                "+++ b/jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java",
                "@@ -96,2 +96,4 @@ public class ClassScanner {",
                " \t\t\"**/org.eclipse.*\",",
                "+\t\t\"**/ant*\",",
                "+\t\t\"**/idea_rt.jar\",",
                " \t};",
                "diff --git a/jodd-joy/src/main/java/jodd/joy/JoyScanner.java b/jodd-joy/src/main/java/jodd/joy/JoyScanner.java",
                "index bfb0c52a3..658ad71e7 100644",
                "--- a/jodd-joy/src/main/java/jodd/joy/JoyScanner.java",
                "+++ b/jodd-joy/src/main/java/jodd/joy/JoyScanner.java",
                "@@ -54,2 +54,7 @@ public class JoyScanner extends JoyBase implements JoyScannerConfig {",
                "+\t/**",
                "+\t * Excluded jars.",
                "+\t */",
                "+\tprivate List<String> excludedJars = new ArrayList<>();",
                "+",
                " \t/**",
                "@@ -78,2 +83,9 @@ public class JoyScanner extends JoyBase implements JoyScannerConfig {",
                "+\t@Override",
                "+\tpublic JoyScanner setExcludedJars(final String... excludedJars) {",
                "+\t\trequireNotStarted(classScanner);",
                "+\t\tCollections.addAll(this.excludedJars, excludedJars);",
                "+\t\treturn this;",
                "+\t}",
                "+",
                " \t@Override",
                "@@ -148,2 +160,3 @@ public class JoyScanner extends JoyBase implements JoyScannerConfig {",
                " \t\t\tlog.debug(\"Scan jars: \" + Converter.get().toString(includedJars));",
                "+\t\t\tlog.debug(\"Scan exclude jars: \" + Converter.get().toString(excludedJars));",
                " \t\t\tlog.debug(\"Scan ignore exception: \" + ignoreExceptions);",
                "@@ -151,8 +164,12 @@ public class JoyScanner extends JoyBase implements JoyScannerConfig {",
                "+\t\tclassScanner.excludeCommonEntries();",
                "+\t\tclassScanner.excludeCommonJars();",
                "+\t\tclassScanner.excludeJars(excludedJars.toArray(new String[0]));",
                "+",
                " \t\tif (includedEntries.isEmpty() && includedJars.isEmpty()) {",
                "+\t\t\t// nothing was explicitly included",
                " \t\t\tclassScanner.excludeAllEntries(false);",
                "-\t\t\tclassScanner.excludeCommonEntries();",
                "-\t\t\tclassScanner.excludeCommonJars();",
                " \t\t}",
                " \t\telse {",
                "+\t\t\t// something was included by user",
                " \t\t\tclassScanner.excludeAllEntries(true);",
                "diff --git a/jodd-joy/src/main/java/jodd/joy/JoyScannerConfig.java b/jodd-joy/src/main/java/jodd/joy/JoyScannerConfig.java",
                "index 1786d8605..dbd3bb6fe 100644",
                "--- a/jodd-joy/src/main/java/jodd/joy/JoyScannerConfig.java",
                "+++ b/jodd-joy/src/main/java/jodd/joy/JoyScannerConfig.java",
                "@@ -33,2 +33,4 @@ public interface JoyScannerConfig {",
                "+\tJoyScannerConfig setExcludedJars(final String... includedJars);",
                "+",
                " \tJoyScannerConfig setIgnoreExceptions(final boolean ignoreExceptions);"
            ],
            "changed_files": [
                "build.gradle",
                "jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java",
                "jodd-joy/src/main/java/jodd/joy/JoyScanner.java",
                "jodd-joy/src/main/java/jodd/joy/JoyScannerConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "35ee9d32f7bf17d793278aba9d35d5c9980ad463",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534101334,
            "hunks": 0,
            "message": "Merge branch 'pr-623'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c891fc72e74779440ef1eeeaa70eab376818720",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534603242,
            "hunks": 1,
            "message": "Jodd v5.0.4",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 851e07f83..758f307e7 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -35,4 +35,4 @@ description = '''",
                "-version = '5.0.4-' + date()",
                "-//version = '5.0.3'",
                "+//version = '5.0.5-' + date()",
                "+version = '5.0.4'"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9d3c29d2e3fcb02aa4cb4763b547a61c8f7c3c8a",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534099756,
            "hunks": 56,
            "message": "Fixed issue with the debug and the timeout not being applied.",
            "diff": [
                "diff --git a/jodd-mail/src/main/java/jodd/mail/ImapServer.java b/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "index 767bf9126..1d2765d83 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "@@ -41,6 +41,2 @@ public class ImapServer extends MailServer<ReceiveMailSession> {",
                "-\tprotected static final String MAIL_IMAP_PORT = \"mail.imap.port\";",
                "-\tprotected static final String MAIL_IMAP_HOST = \"mail.imap.host\";",
                "-\tprotected static final String MAIL_IMAP_PARTIALFETCH = \"mail.imap.partialfetch\";",
                "-",
                " \tprotected static final String PROTOCOL_IMAP = \"imap\";",
                "@@ -52,4 +48,19 @@ public class ImapServer extends MailServer<ReceiveMailSession> {",
                "-\tpublic ImapServer(final String host, final int port, final Authenticator authenticator, final File attachmentStorage) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_IMAP_PORT : port, authenticator, attachmentStorage);",
                "+\tpublic ImapServer(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal File attachmentStorage,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debugMode) {",
                "+",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_IMAP_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebugMode);",
                " \t}",
                "@@ -58,6 +69,14 @@ public class ImapServer extends MailServer<ReceiveMailSession> {",
                " \tprotected Properties createSessionProperties() {",
                "-\t\tfinal Properties props = new Properties();",
                "-\t\tprops.setProperty(MAIL_IMAP_HOST, getHost());",
                "-\t\tprops.setProperty(MAIL_IMAP_PORT, String.valueOf(getPort()));",
                "+\t\tfinal Properties props = super.createSessionProperties();",
                "+",
                "+\t\tprops.setProperty(MAIL_IMAP_HOST, host);",
                "+\t\tprops.setProperty(MAIL_IMAP_PORT, String.valueOf(port));",
                " \t\tprops.setProperty(MAIL_IMAP_PARTIALFETCH, StringPool.FALSE);",
                "+",
                "+\t\tif (timeout > 0) {",
                "+\t\t\tfinal String timeoutValue = String.valueOf(timeout);",
                "+\t\t\tprops.put(MAIL_IMAP_CONNECTIONTIMEOUT, timeoutValue);",
                "+\t\t\tprops.put(MAIL_IMAP_TIMEOUT, timeoutValue);",
                "+\t\t}",
                "+",
                " \t\treturn props;",
                "@@ -82,3 +101,7 @@ public class ImapServer extends MailServer<ReceiveMailSession> {",
                " \tpublic ReceiveMailSession createSession() {",
                "-\t\treturn EmailUtil.createSession(PROTOCOL_IMAP, getSessionProperties(), getAuthenticator(), getAttachmentStorage());",
                "+\t\treturn EmailUtil.createSession(",
                "+\t\t\tPROTOCOL_IMAP,",
                "+\t\t\tcreateSessionProperties(),",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java b/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "index c47d96b3f..ab5637f38 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "@@ -42,6 +42,2 @@ public class ImapSslServer extends ImapServer {",
                "-\tprotected static final String MAIL_IMAP_SOCKET_FACTORY_PORT = \"mail.imap.socketFactory.port\";",
                "-\tprotected static final String MAIL_IMAP_SOCKET_FACTORY_CLASS = \"mail.imap.socketFactory.class\";",
                "-\tprotected static final String MAIL_IMAP_SOCKET_FACTORY_FALLBACK = \"mail.imap.socketFactory.fallback\";",
                "-",
                " \t/**",
                "@@ -51,4 +47,19 @@ public class ImapSslServer extends ImapServer {",
                "-\tpublic ImapSslServer(final String host, final int port, final Authenticator authenticator, final File attachmentStorage) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator, attachmentStorage);",
                "+\tpublic ImapSslServer(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal File attachmentStorage,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debugMode",
                "+\t) {",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebugMode);",
                " \t}",
                "@@ -58,5 +69,7 @@ public class ImapSslServer extends ImapServer {",
                " \t\tfinal Properties props = super.createSessionProperties();",
                "-\t\tprops.setProperty(MAIL_IMAP_SOCKET_FACTORY_PORT, String.valueOf(getPort()));",
                "+",
                "+\t\tprops.setProperty(MAIL_IMAP_SOCKET_FACTORY_PORT, String.valueOf(port));",
                " \t\tprops.setProperty(MAIL_IMAP_SOCKET_FACTORY_CLASS, \"javax.net.ssl.SSLSocketFactory\");",
                " \t\tprops.setProperty(MAIL_IMAP_SOCKET_FACTORY_FALLBACK, StringPool.FALSE);",
                "+",
                " \t\treturn props;",
                "@@ -72,3 +85,3 @@ public class ImapSslServer extends ImapServer {",
                " \tprotected IMAPSSLStore getStore(final Session session) {",
                "-\t\tSimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) getAuthenticator();",
                "+\t\tSimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator;",
                "@@ -79,3 +92,3 @@ public class ImapSslServer extends ImapServer {",
                " \t\t\t\tPROTOCOL_IMAP,",
                "-\t\t\t\tgetHost(), getPort(),",
                "+\t\t\t\thost, port,",
                " \t\t\t\tStringPool.EMPTY, null, null);",
                "@@ -86,3 +99,3 @@ public class ImapSslServer extends ImapServer {",
                " \t\t\t\tPROTOCOL_IMAP,",
                "-\t\t\t\tgetHost(), getPort(),",
                "+\t\t\t\thost, port,",
                " \t\t\t\tStringPool.EMPTY,",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/MailServer.java b/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "index 1d168e8e6..3083db46c 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "@@ -35,2 +35,41 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\tpublic static final String MAIL_HOST = \"mail.host\";",
                "+\tpublic static final String MAIL_SMTP_HOST = \"mail.smtp.host\";",
                "+\tpublic static final String MAIL_SMTP_PORT = \"mail.smtp.port\";",
                "+\tpublic static final String MAIL_SMTP_AUTH = \"mail.smtp.auth\";",
                "+\tpublic static final String MAIL_TRANSPORT_PROTOCOL = \"mail.transport.protocol\";",
                "+\tpublic static final String MAIL_SMTP_FROM = \"mail.smtp.from\";",
                "+",
                "+\tpublic static final String MAIL_SMTP_CONNECTIONTIMEOUT = \"mail.smtp.connectiontimeout\";",
                "+\tpublic static final String MAIL_SMTP_TIMEOUT = \"mail.smtp.timeout\";",
                "+\tpublic static final String MAIL_SMTP_WRITETIMEOUT = \"mail.smtp.writetimeout\";",
                "+\tpublic static final String MAIL_DEBUG = \"mail.debug\";",
                "+\tpublic static final String MAIL_MIME_ADDRESS_STRICT = \"mail.mime.address.strict\";",
                "+",
                "+\tpublic static final String MAIL_IMAP_CONNECTIONTIMEOUT = \"mail.imap.connectiontimeout\";",
                "+\tpublic static final String MAIL_IMAP_TIMEOUT = \"mail.imap.timeout\";",
                "+\tpublic static final String MAIL_IMAP_PORT = \"mail.imap.port\";",
                "+\tpublic static final String MAIL_IMAP_HOST = \"mail.imap.host\";",
                "+\tpublic static final String MAIL_IMAP_PARTIALFETCH = \"mail.imap.partialfetch\";",
                "+",
                "+\tpublic static final String MAIL_IMAP_SOCKET_FACTORY_PORT = \"mail.imap.socketFactory.port\";",
                "+\tpublic static final String MAIL_IMAP_SOCKET_FACTORY_CLASS = \"mail.imap.socketFactory.class\";",
                "+\tpublic static final String MAIL_IMAP_SOCKET_FACTORY_FALLBACK = \"mail.imap.socketFactory.fallback\";",
                "+",
                "+\tpublic static final String MAIL_SMTP_STARTTLS_REQUIRED = \"mail.smtp.starttls.required\";",
                "+\tpublic static final String MAIL_SMTP_STARTTLS_ENABLE = \"mail.smtp.starttls.enable\";",
                "+\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_PORT = \"mail.smtp.socketFactory.port\";",
                "+\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_CLASS = \"mail.smtp.socketFactory.class\";",
                "+\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_FALLBACK = \"mail.smtp.socketFactory.fallback\";",
                "+",
                "+\tpublic static final String MAIL_POP3_PORT = \"mail.pop3.port\";",
                "+\tpublic static final String MAIL_POP3_HOST = \"mail.pop3.host\";",
                "+\tpublic static final String MAIL_POP3_AUTH = \"mail.pop3.auth\";",
                "+\tpublic static final String MAIL_POP3_CONNECTIONTIMEOUT = \"mail.pop3.connectiontimeout\";",
                "+\tpublic static final String MAIL_POP3_TIMEOUT = \"mail.pop3.timeout\";",
                "+",
                "+\tpublic static final String MAIL_POP3_SOCKET_FACTORY_PORT = \"mail.pop3.socketFactory.port\";",
                "+\tpublic static final String MAIL_POP3_SOCKET_FACTORY_CLASS = \"mail.pop3.socketFactory.class\";",
                "+\tpublic static final String MAIL_POP3_SOCKET_FACTORY_FALLBACK = \"mail.pop3.socketFactory.fallback\";",
                "+",
                " \t/**",
                "@@ -38,3 +77,3 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t */",
                "-\tprivate final String host;",
                "+\tprotected final String host;",
                "@@ -43,3 +82,3 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t */",
                "-\tprivate final int port;",
                "+\tprotected final int port;",
                "@@ -48,10 +87,17 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t */",
                "-\tprivate final Authenticator authenticator;",
                "+\tprotected final Authenticator authenticator;",
                "+",
                "+\tprotected final File attachmentStorage;",
                "-\tprivate final File attachmentStorage;",
                "+\tprotected final boolean debugMode;",
                " \t/**",
                "-\t * The {@link MailSession} {@link Properties}.",
                "+\t * Whether strict address checking is turned on.",
                " \t */",
                "-\tprivate final Properties sessionProperties;",
                "+\tprotected final boolean strictAddress;",
                "+",
                "+\t/**",
                "+\t * Connection timeout.",
                "+\t */",
                "+\tprotected final int timeout;",
                "@@ -63,4 +109,15 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t * @param authenticator The {@link Authenticator} to use.",
                "+\t * @param attachmentStorage folder where to store attachments.",
                "+\t * @param timeout       Connection timeout, or 0 if not specified.",
                "+\t * @param debugMode     Debug mode.",
                " \t */",
                "-\tprotected MailServer(final String host, final int port, final Authenticator authenticator, final File attachmentStorage) {",
                "+\tprotected MailServer(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal File attachmentStorage,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debugMode",
                "+\t) {",
                " \t\tObjects.requireNonNull(host, \"Host cannot be null\");",
                "@@ -71,6 +128,7 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\tthis.attachmentStorage = attachmentStorage;",
                "-\t\tthis.sessionProperties = createSessionProperties();",
                "+\t\tthis.timeout = timeout;",
                "+\t\tthis.strictAddress = strictAddress;",
                "+\t\tthis.debugMode = debugMode;",
                " \t}",
                "-",
                " \t/**",
                "@@ -89,44 +147,14 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t */",
                "-\tprotected abstract Properties createSessionProperties();",
                "-",
                "-\t// ---------------------------------------------------------------- properties",
                "-",
                "-\t/**",
                "-\t * Returns the host.",
                "-\t *",
                "-\t * @return The host.",
                "-\t */",
                "-\tpublic String getHost() {",
                "-\t\treturn host;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the {@link Authenticator}.",
                "-\t *",
                "-\t * @return The current {@link Authenticator}.",
                "-\t */",
                "-\tpublic Authenticator getAuthenticator() {",
                "-\t\treturn authenticator;",
                "-\t}",
                "+\tprotected Properties createSessionProperties() {",
                "+\t\tfinal Properties props = new Properties();",
                "-\t/**",
                "-\t * Returns current port.",
                "-\t *",
                "-\t * @return The current port.",
                "-\t */",
                "-\tpublic int getPort() {",
                "-\t\treturn port;",
                "-\t}",
                "+\t\tif (debugMode) {",
                "+\t\t\tprops.put(MAIL_DEBUG, \"true\");",
                "+\t\t}",
                "-\t/**",
                "-\t * Returns {@link MailSession} {@link Properties}.",
                "-\t *",
                "-\t * @return The {@link MailSession} {@link Properties}.",
                "-\t */",
                "-\tpublic Properties getSessionProperties() {",
                "-\t\treturn sessionProperties;",
                "-\t}",
                "+\t\tif (!strictAddress) {",
                "+\t\t\tprops.put(MAIL_MIME_ADDRESS_STRICT, \"false\");",
                "+\t\t}",
                "-\tpublic File getAttachmentStorage() {",
                "-\t\treturn attachmentStorage;",
                "+\t\treturn props;",
                " \t}",
                "@@ -158,2 +186,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\tprivate File attachmentStorage;",
                "+\t\tprivate boolean debug;",
                "+\t\tprivate int timeout = 0;",
                "+\t\tprivate boolean strictAddress = true;",
                "@@ -164,3 +195,2 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t * @return this",
                "-\t\t *",
                " \t\t */",
                "@@ -194,2 +224,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\t\t/**",
                "+\t\t * Defines attachment storage, a folder where attachments will be saved.",
                "+\t\t */",
                " \t\tpublic Builder storeAttachmentsIn(final File attachmentStorage) {",
                "@@ -224,2 +257,36 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\t\t/**",
                "+\t\t * Enable or disable debug mode.",
                "+\t\t *",
                "+\t\t * @param debug {@code true} to turn on debugging. By default, this is {@code false}.",
                "+\t\t * @return this",
                "+\t\t */",
                "+\t\tpublic Builder debugMode(final boolean debug) {",
                "+\t\t\tthis.debug = debug;",
                "+\t\t\treturn this;",
                "+\t\t}",
                "+",
                "+",
                "+\t\t/**",
                "+\t\t * Defines timeout value in milliseconds for all mail-related operations.",
                "+\t\t *",
                "+\t\t * @param timeout timeout value in milliseconds.",
                "+\t\t * @return this",
                "+\t\t */",
                "+\t\tpublic Builder timeout(final int timeout) {",
                "+\t\t\tthis.timeout = timeout;",
                "+\t\t\treturn this;",
                "+\t\t}",
                "+",
                "+\t\t/**",
                "+\t\t * Disables the strict address.",
                "+\t\t *",
                "+\t\t * @param strictAddress {@code true} if strict address checking should be be turned on. By default, this is {@code true}.",
                "+\t\t * @return this",
                "+\t\t */",
                "+\t\tpublic Builder strictAddress(final boolean strictAddress) {",
                "+\t\t\tthis.strictAddress = strictAddress;",
                "+\t\t\treturn this;",
                "+\t\t}",
                "+",
                " \t\t// ---------------------------------------------------------------- build",
                "@@ -233,5 +300,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new ImapSslServer(host, port, authenticator, attachmentStorage);",
                "+\t\t\t\treturn new ImapSslServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                " \t\t\t}",
                "-\t\t\treturn new ImapServer(host, port, authenticator, attachmentStorage);",
                "+\t\t\treturn new ImapServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                " \t\t}",
                "@@ -246,5 +313,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new Pop3SslServer(host, port, authenticator, attachmentStorage);",
                "+\t\t\t\treturn new Pop3SslServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                " \t\t\t}",
                "-\t\t\treturn new Pop3Server(host, port, authenticator, attachmentStorage);",
                "+\t\t\treturn new Pop3Server(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                " \t\t}",
                "@@ -259,5 +326,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new SmtpSslServer(host, port, authenticator);",
                "+\t\t\t\treturn new SmtpSslServer(host, port, authenticator, timeout, strictAddress, debug);",
                " \t\t\t}",
                "-\t\t\treturn new SmtpServer(host, port, authenticator);",
                "+\t\t\treturn new SmtpServer(host, port, authenticator, timeout, strictAddress, debug);",
                " \t\t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/Pop3Server.java b/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "index 5fdb85003..29d4fd3e9 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "@@ -41,6 +41,2 @@ public class Pop3Server extends MailServer<ReceiveMailSession> {",
                "-\tprotected static final String MAIL_POP3_PORT = \"mail.pop3.port\";",
                "-\tprotected static final String MAIL_POP3_HOST = \"mail.pop3.host\";",
                "-\tprotected static final String MAIL_POP3_AUTH = \"mail.pop3.auth\";",
                "-",
                " \tprotected static final String PROTOCOL_POP3 = \"pop3\";",
                "@@ -52,4 +48,19 @@ public class Pop3Server extends MailServer<ReceiveMailSession> {",
                "-\tpublic Pop3Server(final String host, final int port, final Authenticator authenticator, final File attachmentStorage) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_POP3_PORT : port, authenticator, attachmentStorage);",
                "+\tpublic Pop3Server(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal File attachmentStorage,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debugMode",
                "+\t\t\t) {",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_POP3_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebugMode);",
                " \t}",
                "@@ -58,8 +69,17 @@ public class Pop3Server extends MailServer<ReceiveMailSession> {",
                " \tprotected Properties createSessionProperties() {",
                "-\t\tfinal Properties props = new Properties();",
                "-\t\tprops.setProperty(MAIL_POP3_HOST, getHost());",
                "-\t\tprops.setProperty(MAIL_POP3_PORT, String.valueOf(getPort()));",
                "-\t\tif (getAuthenticator() != null) {",
                "+\t\tfinal Properties props = super.createSessionProperties();",
                "+",
                "+\t\tprops.setProperty(MAIL_POP3_HOST, host);",
                "+\t\tprops.setProperty(MAIL_POP3_PORT, String.valueOf(port));",
                "+",
                "+\t\tif (authenticator != null) {",
                " \t\t\tprops.setProperty(MAIL_POP3_AUTH, TRUE);",
                " \t\t}",
                "+",
                "+\t\tif (timeout > 0) {",
                "+\t\t\tfinal String timeoutValue = String.valueOf(timeout);",
                "+\t\t\tprops.put(MAIL_POP3_CONNECTIONTIMEOUT, timeoutValue);",
                "+\t\t\tprops.put(MAIL_POP3_TIMEOUT, timeoutValue);",
                "+\t\t}",
                "+",
                " \t\treturn props;",
                "@@ -85,3 +105,7 @@ public class Pop3Server extends MailServer<ReceiveMailSession> {",
                " \tpublic ReceiveMailSession createSession() {",
                "-\t\treturn EmailUtil.createSession(PROTOCOL_POP3, getSessionProperties(), getAuthenticator(), getAttachmentStorage());",
                "+\t\treturn EmailUtil.createSession(",
                "+\t\t\tPROTOCOL_POP3,",
                "+\t\t\tcreateSessionProperties(),",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java b/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "index 46043aa15..d0c77def5 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "@@ -42,9 +42,21 @@ public class Pop3SslServer extends Pop3Server {",
                "-\tprotected static final String MAIL_POP3_SOCKET_FACTORY_PORT = \"mail.pop3.socketFactory.port\";",
                "-\tprotected static final String MAIL_POP3_SOCKET_FACTORY_CLASS = \"mail.pop3.socketFactory.class\";",
                "-\tprotected static final String MAIL_POP3_SOCKET_FACTORY_FALLBACK = \"mail.pop3.socketFactory.fallback\";",
                " \tprotected static final int DEFAULT_SSL_PORT = 995;",
                "-\tpublic Pop3SslServer(final String host, final int port, final Authenticator authenticator, final File attachmentStorage) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator, attachmentStorage);",
                "+\tpublic Pop3SslServer(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal File attachmentStorage,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debugMode) {",
                "+",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\tattachmentStorage,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebugMode);",
                " \t}",
                "@@ -54,5 +66,7 @@ public class Pop3SslServer extends Pop3Server {",
                " \t\tfinal Properties props = super.createSessionProperties();",
                "-\t\tprops.setProperty(MAIL_POP3_SOCKET_FACTORY_PORT, String.valueOf(getPort()));",
                "+",
                "+\t\tprops.setProperty(MAIL_POP3_SOCKET_FACTORY_PORT, String.valueOf(port));",
                " \t\tprops.setProperty(MAIL_POP3_SOCKET_FACTORY_CLASS, \"javax.net.ssl.SSLSocketFactory\");",
                " \t\tprops.setProperty(MAIL_POP3_SOCKET_FACTORY_FALLBACK, StringPool.FALSE);",
                "+",
                " \t\treturn props;",
                "@@ -68,3 +82,3 @@ public class Pop3SslServer extends Pop3Server {",
                " \tprotected POP3SSLStore getStore(final Session session) {",
                "-\t\tfinal SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) getAuthenticator();",
                "+\t\tfinal SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator;",
                " \t\tfinal URLName url;",
                "@@ -74,3 +88,3 @@ public class Pop3SslServer extends Pop3Server {",
                " \t\t\t\tPROTOCOL_POP3,",
                "-\t\t\t\tgetHost(), getPort(),",
                "+\t\t\t\thost, port,",
                " \t\t\t\tStringPool.EMPTY,",
                "@@ -82,3 +96,3 @@ public class Pop3SslServer extends Pop3Server {",
                " \t\t\t\tPROTOCOL_POP3,",
                "-\t\t\t\tgetHost(), getPort(),",
                "+\t\t\t\thost, port,",
                " \t\t\t\tStringPool.EMPTY,",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/SmtpServer.java b/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "index 1c3a4cdb2..af596ff5e 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "@@ -38,16 +38,3 @@ import static jodd.util.StringPool.TRUE;",
                "  */",
                "-public class SmtpServer<T extends SmtpServer<T>> extends MailServer<SendMailSession> {",
                "-",
                "-\tpublic static final String MAIL_HOST = \"mail.host\";",
                "-\tpublic static final String MAIL_SMTP_HOST = \"mail.smtp.host\";",
                "-\tpublic static final String MAIL_SMTP_PORT = \"mail.smtp.port\";",
                "-\tpublic static final String MAIL_SMTP_AUTH = \"mail.smtp.auth\";",
                "-\tpublic static final String MAIL_TRANSPORT_PROTOCOL = \"mail.transport.protocol\";",
                "-\tpublic static final String MAIL_SMTP_FROM = \"mail.smtp.from\";",
                "-",
                "-\tpublic static final String MAIL_SMTP_CONNECTIONTIMEOUT = \"mail.smtp.connectiontimeout\";",
                "-\tpublic static final String MAIL_SMTP_TIMEOUT = \"mail.smtp.timeout\";",
                "-\tpublic static final String MAIL_SMTP_WRITETIMEOUT = \"mail.smtp.writetimeout\";",
                "-\tpublic static final String MAIL_DEBUG = \"mail.debug\";",
                "-\tpublic static final String MAIL_MIME_ADDRESS_STRICT = \"mail.mime.address.strict\";",
                "+public class SmtpServer extends MailServer<SendMailSession> {",
                "@@ -60,62 +47,20 @@ public class SmtpServer<T extends SmtpServer<T>> extends MailServer<SendMailSess",
                "-\t/**",
                "-\t * Whether debug mode is enabled.",
                "-\t */",
                "-\tprotected boolean debug = false;",
                "-",
                "-\t/**",
                "-\t * Whether strict address checking is turned on.",
                "-\t */",
                "-\tprotected boolean strictAddress = true;",
                "-",
                "-\t/**",
                "-\t * Connection timeout.",
                "-\t */",
                "-\tprivate int timeout = 0;",
                "-",
                " \t// ---------------------------------------------------------------- create",
                "-\t@SuppressWarnings(\"unchecked\")",
                "-\tprotected T _this() {",
                "-\t\treturn (T) this;",
                "-\t}",
                "-",
                "-\tpublic SmtpServer(final String host, final int port, final Authenticator authenticator) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_SMTP_PORT : port, authenticator, null);",
                "-\t}",
                "-",
                "-\t// ---------------------------------------------------------------- builder",
                "-",
                "-\t/**",
                "-\t * Defines timeout value in milliseconds for all mail-related operations.",
                "-\t *",
                "-\t * @param timeout timeout value in milliseconds.",
                "-\t * @return this",
                "-\t */",
                "-\tpublic T timeout(final int timeout) {",
                "-\t\tthis.timeout = timeout;",
                "-\t\treturn _this();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Enable or disable debug mode.",
                "-\t *",
                "-\t * @param debug {@code true} to turn on debugging. By default, this is {@code false}.",
                "-\t * @return this",
                "-\t */",
                "-\tpublic T debugMode(final boolean debug) {",
                "-\t\tthis.debug = debug;",
                "-\t\treturn _this();",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * Disables the strict address.",
                "-\t *",
                "-\t * @param strictAddress {@code true} if strict address checking should be be turned on. By default, this is {@code true}.",
                "-\t * @return this",
                "-\t */",
                "-\tpublic T strictAddress(final boolean strictAddress) {",
                "-\t\tthis.strictAddress = strictAddress;",
                "-\t\treturn _this();",
                "+\tpublic SmtpServer(",
                "+\t\t\tfinal String host,",
                "+\t\t\tfinal int port,",
                "+\t\t\tfinal Authenticator authenticator,",
                "+\t\t\tfinal int timeout,",
                "+\t\t\tfinal boolean strictAddress,",
                "+\t\t\tfinal boolean debug) {",
                "+",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_SMTP_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\tnull,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebug);",
                " \t}",
                "@@ -126,10 +71,10 @@ public class SmtpServer<T extends SmtpServer<T>> extends MailServer<SendMailSess",
                " \tprotected Properties createSessionProperties() {",
                "-\t\tfinal Properties props = new Properties();",
                "+\t\tfinal Properties props = super.createSessionProperties();",
                " \t\tprops.setProperty(MAIL_TRANSPORT_PROTOCOL, PROTOCOL_SMTP);",
                "-\t\tprops.setProperty(MAIL_HOST, getHost());",
                "-\t\tprops.setProperty(MAIL_SMTP_HOST, getHost());",
                "-\t\tprops.setProperty(MAIL_SMTP_PORT, String.valueOf(getPort()));",
                "+\t\tprops.setProperty(MAIL_HOST, host);",
                "+\t\tprops.setProperty(MAIL_SMTP_HOST, host);",
                "+\t\tprops.setProperty(MAIL_SMTP_PORT, String.valueOf(port));",
                "-\t\tif (getAuthenticator() != null) {",
                "+\t\tif (authenticator != null) {",
                " \t\t\tprops.setProperty(MAIL_SMTP_AUTH, TRUE);",
                "@@ -144,10 +89,2 @@ public class SmtpServer<T extends SmtpServer<T>> extends MailServer<SendMailSess",
                "-\t\tif (debug) {",
                "-\t\t\tprops.put(MAIL_DEBUG, \"true\");",
                "-\t\t}",
                "-",
                "-\t\tif (!strictAddress) {",
                "-\t\t\tprops.put(MAIL_MIME_ADDRESS_STRICT, \"false\");",
                "-\t\t}",
                "-",
                " \t\treturn props;",
                "@@ -162,3 +99,3 @@ public class SmtpServer<T extends SmtpServer<T>> extends MailServer<SendMailSess",
                " \tpublic SendMailSession createSession() {",
                "-\t\tfinal Session session = Session.getInstance(getSessionProperties(), getAuthenticator());",
                "+\t\tfinal Session session = Session.getInstance(createSessionProperties(), authenticator);",
                " \t\tfinal Transport mailTransport;",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java b/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "index e0260d2c0..7f5b8f04f 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "@@ -35,9 +35,3 @@ import java.util.Properties;",
                "  */",
                "-public class SmtpSslServer extends SmtpServer<SmtpSslServer> {",
                "-",
                "-\tpublic static final String MAIL_SMTP_STARTTLS_REQUIRED = \"mail.smtp.starttls.required\";",
                "-\tpublic static final String MAIL_SMTP_STARTTLS_ENABLE = \"mail.smtp.starttls.enable\";",
                "-\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_PORT = \"mail.smtp.socketFactory.port\";",
                "-\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_CLASS = \"mail.smtp.socketFactory.class\";",
                "-\tpublic static final String MAIL_SMTP_SOCKET_FACTORY_FALLBACK = \"mail.smtp.socketFactory.fallback\";",
                "+public class SmtpSslServer extends SmtpServer {",
                "@@ -48,4 +42,17 @@ public class SmtpSslServer extends SmtpServer<SmtpSslServer> {",
                "-\tpublic SmtpSslServer(final String host, final int port, final Authenticator authenticator) {",
                "-\t\tsuper(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator);",
                "+\tpublic SmtpSslServer(final String host,",
                "+\t                     final int port,",
                "+\t\t\t\t\t\t final Authenticator authenticator,",
                "+\t\t\t\t\t\t final int timeout,",
                "+\t\t\t\t\t\t final boolean strictAddress,",
                "+\t\t\t\t\t\t final boolean debug",
                "+\t\t) {",
                "+",
                "+\t\tsuper(",
                "+\t\t\thost,",
                "+\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "+\t\t\tauthenticator,",
                "+\t\t\ttimeout,",
                "+\t\t\tstrictAddress,",
                "+\t\t\tdebug);",
                " \t}",
                "@@ -99,5 +106,5 @@ public class SmtpSslServer extends SmtpServer<SmtpSslServer> {",
                "-\t\tprops.setProperty(MAIL_SMTP_SOCKET_FACTORY_PORT, String.valueOf(getPort()));",
                "+\t\tprops.setProperty(MAIL_SMTP_SOCKET_FACTORY_PORT, String.valueOf(port));",
                "-\t\tprops.setProperty(MAIL_SMTP_PORT, String.valueOf(getPort()));",
                "+\t\tprops.setProperty(MAIL_SMTP_PORT, String.valueOf(port));",
                "@@ -108,3 +115,3 @@ public class SmtpSslServer extends SmtpServer<SmtpSslServer> {",
                " \t\tprops.setProperty(MAIL_SMTP_SOCKET_FACTORY_FALLBACK, StringPool.FALSE);",
                "-\t\tprops.setProperty(MAIL_HOST, getHost());",
                "+\t\tprops.setProperty(MAIL_HOST, host);"
            ],
            "changed_files": [
                "jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2573c0d5d20b9fd4d87ec02086738e4748d2d316",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1535030481,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master' into dev",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5b58c37c0bb91e5a0106de97e3adfdd49f421088",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534864793,
            "hunks": 2,
            "message": "Update Gradle to 4.9",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 758f307e7..0638ca7af 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -563,3 +563,3 @@ static def date() {",
                " wrapper {",
                "-\tgradleVersion = '4.8.1'",
                "+\tgradleVersion = '4.9'",
                " }",
                "diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar",
                "index 1948b9074..0d4a95168 100644",
                "Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ",
                "diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties",
                "index 8258a7a38..c7e45f1fd 100644",
                "--- a/gradle/wrapper/gradle-wrapper.properties",
                "+++ b/gradle/wrapper/gradle-wrapper.properties",
                "@@ -1,2 +1,2 @@",
                "-#Mon Jul 02 22:32:04 CEST 2018",
                "+#Tue Aug 21 14:50:35 CEST 2018",
                " distributionBase=GRADLE_USER_HOME"
            ],
            "changed_files": [
                "build.gradle",
                "gradle/wrapper/gradle-wrapper.jar",
                "gradle/wrapper/gradle-wrapper.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0d888213c1d474c1bdde0042eb28c9437e6da65a",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534328913,
            "hunks": 6,
            "message": "parseTo returns null when invalid.",
            "diff": [
                "diff --git a/jodd-joy/src/main/java/jodd/joy/vtor/constraint/EmailConstraint.java b/jodd-joy/src/main/java/jodd/joy/vtor/constraint/EmailConstraint.java",
                "index 800b75108..9037e5c3c 100644",
                "--- a/jodd-joy/src/main/java/jodd/joy/vtor/constraint/EmailConstraint.java",
                "+++ b/jodd-joy/src/main/java/jodd/joy/vtor/constraint/EmailConstraint.java",
                "@@ -36,2 +36,3 @@ public class EmailConstraint implements ValidationConstraint<Email> {",
                "+\t@Override",
                " \tpublic void configure(final Email annotation) {",
                "@@ -39,2 +40,3 @@ public class EmailConstraint implements ValidationConstraint<Email> {",
                "+\t@Override",
                " \tpublic boolean isValid(final ValidationConstraintContext vcc, final Object value) {",
                "@@ -46,3 +48,3 @@ public class EmailConstraint implements ValidationConstraint<Email> {",
                "-\t\tif (address == null) {",
                "+\t\tif (!address.isValid()) {",
                " \t\t\treturn false;",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/RFC2822AddressParser.java b/jodd-mail/src/main/java/jodd/mail/RFC2822AddressParser.java",
                "index 5140bd000..0bd66976c 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/RFC2822AddressParser.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/RFC2822AddressParser.java",
                "@@ -282,4 +282,3 @@ public class RFC2822AddressParser {",
                " \t/**",
                "-\t * Parses email address. Returns {@code null} if parsing fails for some reason.",
                "-\t * Returns {@link ParsedAddress parsed address}, that might be valid or note.",
                "+\t * Parses email address. Returns {@link ParsedAddress parsed address}, that might be valid or not.",
                " \t */",
                "@@ -329,3 +328,3 @@ public class RFC2822AddressParser {",
                "-\t\tif (parsedAddress == null) {",
                "+\t\tif (!parsedAddress.isValid()) {",
                " \t\t\treturn null;",
                "@@ -342,3 +341,3 @@ public class RFC2822AddressParser {",
                "-\t\tif (parsedAddress == null) {",
                "+\t\tif (!parsedAddress.isValid()) {",
                " \t\t\treturn null;"
            ],
            "changed_files": [
                "jodd-joy/src/main/java/jodd/joy/vtor/constraint/EmailConstraint.java",
                "jodd-mail/src/main/java/jodd/mail/RFC2822AddressParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "33489c5d185cff6477e200e2ee16a485fc7a0ae4",
            "repository": "https://github.com/oblac/jodd",
            "timestamp": 1534100685,
            "hunks": 28,
            "message": "Added custom mail properties and simplifies ctors of mail servers",
            "diff": [
                "diff --git a/jodd-mail/src/main/java/jodd/mail/ImapServer.java b/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "index 1d2765d83..21ee60508 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "@@ -29,3 +29,2 @@ import jodd.util.StringPool;",
                "-import javax.mail.Authenticator;",
                " import javax.mail.NoSuchProviderException;",
                "@@ -33,3 +32,2 @@ import javax.mail.Session;",
                " import javax.mail.Store;",
                "-import java.io.File;",
                " import java.util.Properties;",
                "@@ -48,20 +46,9 @@ public class ImapServer extends MailServer<ReceiveMailSession> {",
                "-\tpublic ImapServer(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal File attachmentStorage,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debugMode) {",
                "-",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_IMAP_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\tattachmentStorage,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebugMode);",
                "+\tpublic ImapServer(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_IMAP_PORT);",
                " \t}",
                "+\tprotected ImapServer(final Builder builder, final int defaultPort) {",
                "+\t\tsuper(builder, defaultPort);",
                "+\t}",
                "+",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java b/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "index ab5637f38..65e6a868b 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "@@ -30,3 +30,2 @@ import jodd.util.StringPool;",
                "-import javax.mail.Authenticator;",
                " import javax.mail.PasswordAuthentication;",
                "@@ -34,3 +33,2 @@ import javax.mail.Session;",
                " import javax.mail.URLName;",
                "-import java.io.File;",
                " import java.util.Properties;",
                "@@ -47,19 +45,4 @@ public class ImapSslServer extends ImapServer {",
                "-\tpublic ImapSslServer(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal File attachmentStorage,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debugMode",
                "-\t) {",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\tattachmentStorage,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebugMode);",
                "+\tpublic ImapSslServer(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_SSL_PORT);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/MailServer.java b/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "index 3083db46c..285dc5fec 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "@@ -40,3 +40,3 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \tpublic static final String MAIL_TRANSPORT_PROTOCOL = \"mail.transport.protocol\";",
                "-\tpublic static final String MAIL_SMTP_FROM = \"mail.smtp.from\";",
                "+\t//public static final String MAIL_SMTP_FROM = \"mail.smtp.from\";",
                "@@ -103,30 +103,18 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\tprotected final Properties customProperties;",
                "+",
                " \t/**",
                " \t * {@link MailServer} defined with its host, port and {@link Authenticator}.",
                "-\t *",
                "-\t * @param host          The host to use.",
                "-\t * @param port          The port to use.",
                "-\t * @param authenticator The {@link Authenticator} to use.",
                "-\t * @param attachmentStorage folder where to store attachments.",
                "-\t * @param timeout       Connection timeout, or 0 if not specified.",
                "-\t * @param debugMode     Debug mode.",
                " \t */",
                "-\tprotected MailServer(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal File attachmentStorage,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debugMode",
                "-\t) {",
                "-\t\tObjects.requireNonNull(host, \"Host cannot be null\");",
                "-",
                "-\t\tthis.host = host;",
                "-\t\tthis.port = port;",
                "-\t\tthis.authenticator = authenticator;",
                "-\t\tthis.attachmentStorage = attachmentStorage;",
                "-\t\tthis.timeout = timeout;",
                "-\t\tthis.strictAddress = strictAddress;",
                "-\t\tthis.debugMode = debugMode;",
                "+\tprotected MailServer(final Builder builder, final int defaultPort) {",
                "+\t\tObjects.requireNonNull(builder.host, \"Host cannot be null\");",
                "+",
                "+\t\tthis.host = builder.host;",
                "+\t\tthis.port = builder.port == -1 ? defaultPort : builder.port;",
                "+\t\tthis.authenticator = builder.authenticator;",
                "+\t\tthis.attachmentStorage = builder.attachmentStorage;",
                "+\t\tthis.timeout = builder.timeout;",
                "+\t\tthis.strictAddress = builder.strictAddress;",
                "+\t\tthis.debugMode = builder.debug;",
                "+\t\tthis.customProperties = builder.customProperties;",
                " \t}",
                "@@ -150,2 +138,4 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\t\tprops.putAll(customProperties);",
                "+",
                " \t\tif (debugMode) {",
                "@@ -189,2 +179,3 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\tprivate boolean strictAddress = true;",
                "+\t\tprivate Properties customProperties = new Properties();",
                "@@ -291,2 +282,7 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                "+\t\tpublic Builder property(final String name, final String value) {",
                "+\t\t\tthis.customProperties.put(name, value);",
                "+\t\t\treturn this;",
                "+\t\t}",
                "+",
                " \t\t// ---------------------------------------------------------------- build",
                "@@ -300,5 +296,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new ImapSslServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                "+\t\t\t\treturn new ImapSslServer(this);",
                " \t\t\t}",
                "-\t\t\treturn new ImapServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                "+\t\t\treturn new ImapServer(this);",
                " \t\t}",
                "@@ -313,5 +309,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new Pop3SslServer(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                "+\t\t\t\treturn new Pop3SslServer(this);",
                " \t\t\t}",
                "-\t\t\treturn new Pop3Server(host, port, authenticator, attachmentStorage, timeout, strictAddress, debug);",
                "+\t\t\treturn new Pop3Server(this);",
                " \t\t}",
                "@@ -326,5 +322,5 @@ public abstract class MailServer<MailSessionImpl extends MailSession> {",
                " \t\t\tif (ssl) {",
                "-\t\t\t\treturn new SmtpSslServer(host, port, authenticator, timeout, strictAddress, debug);",
                "+\t\t\t\treturn new SmtpSslServer(this);",
                " \t\t\t}",
                "-\t\t\treturn new SmtpServer(host, port, authenticator, timeout, strictAddress, debug);",
                "+\t\t\treturn new SmtpServer(this);",
                " \t\t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/Pop3Server.java b/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "index 29d4fd3e9..ae45d9ea0 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "@@ -48,19 +48,7 @@ public class Pop3Server extends MailServer<ReceiveMailSession> {",
                "-\tpublic Pop3Server(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal File attachmentStorage,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debugMode",
                "-\t\t\t) {",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_POP3_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\tattachmentStorage,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebugMode);",
                "+\tpublic Pop3Server(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_POP3_PORT);",
                "+\t}",
                "+\tprotected Pop3Server(final Builder builder, final int defaultPort) {",
                "+\t\tsuper(builder, defaultPort);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java b/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "index d0c77def5..04c078c02 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "@@ -30,3 +30,2 @@ import jodd.util.StringPool;",
                "-import javax.mail.Authenticator;",
                " import javax.mail.PasswordAuthentication;",
                "@@ -34,3 +33,2 @@ import javax.mail.Session;",
                " import javax.mail.URLName;",
                "-import java.io.File;",
                " import java.util.Properties;",
                "@@ -44,19 +42,4 @@ public class Pop3SslServer extends Pop3Server {",
                "-\tpublic Pop3SslServer(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal File attachmentStorage,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debugMode) {",
                "-",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\tattachmentStorage,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebugMode);",
                "+\tpublic Pop3SslServer(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_SSL_PORT);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/SmtpServer.java b/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "index af596ff5e..c1a39bb4f 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "@@ -27,3 +27,2 @@ package jodd.mail;",
                "-import javax.mail.Authenticator;",
                " import javax.mail.NoSuchProviderException;",
                "@@ -49,18 +48,7 @@ public class SmtpServer extends MailServer<SendMailSession> {",
                "-\tpublic SmtpServer(",
                "-\t\t\tfinal String host,",
                "-\t\t\tfinal int port,",
                "-\t\t\tfinal Authenticator authenticator,",
                "-\t\t\tfinal int timeout,",
                "-\t\t\tfinal boolean strictAddress,",
                "-\t\t\tfinal boolean debug) {",
                "-",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_SMTP_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\tnull,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebug);",
                "+\tpublic SmtpServer(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_SMTP_PORT);",
                "+\t}",
                "+\tprotected SmtpServer(final Builder builder, final int defaultPort) {",
                "+\t\tsuper(builder, defaultPort);",
                " \t}",
                "diff --git a/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java b/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "index 7f5b8f04f..4030a94bd 100644",
                "--- a/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "+++ b/jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java",
                "@@ -29,3 +29,2 @@ import jodd.util.StringPool;",
                "-import javax.mail.Authenticator;",
                " import java.util.Properties;",
                "@@ -42,17 +41,4 @@ public class SmtpSslServer extends SmtpServer {",
                "-\tpublic SmtpSslServer(final String host,",
                "-\t                     final int port,",
                "-\t\t\t\t\t\t final Authenticator authenticator,",
                "-\t\t\t\t\t\t final int timeout,",
                "-\t\t\t\t\t\t final boolean strictAddress,",
                "-\t\t\t\t\t\t final boolean debug",
                "-\t\t) {",
                "-",
                "-\t\tsuper(",
                "-\t\t\thost,",
                "-\t\t\tport == -1 ? DEFAULT_SSL_PORT : port,",
                "-\t\t\tauthenticator,",
                "-\t\t\ttimeout,",
                "-\t\t\tstrictAddress,",
                "-\t\t\tdebug);",
                "+\tpublic SmtpSslServer(final Builder builder) {",
                "+\t\tsuper(builder, DEFAULT_SSL_PORT);",
                " \t}"
            ],
            "changed_files": [
                "jodd-mail/src/main/java/jodd/mail/ImapServer.java",
                "jodd-mail/src/main/java/jodd/mail/ImapSslServer.java",
                "jodd-mail/src/main/java/jodd/mail/MailServer.java",
                "jodd-mail/src/main/java/jodd/mail/Pop3Server.java",
                "jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java",
                "jodd-mail/src/main/java/jodd/mail/SmtpServer.java",
                "jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10",
                "v5.0.11",
                "v5.0.12",
                "v5.0.13",
                "v5.0.4",
                "v5.0.5",
                "v5.0.6",
                "v5.0.7",
                "v5.0.8",
                "v5.0.9",
                "v5.1.0",
                "v5.1.2",
                "v5.1.3",
                "v5.1.4",
                "v5.1.5",
                "v5.1.6",
                "v5.3.0"
            ],
            "matched_rules": []
        }
    ]
}
