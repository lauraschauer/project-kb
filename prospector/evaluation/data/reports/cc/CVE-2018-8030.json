{
    "advisory_record": {
        "cve_id": "CVE-2018-8030",
        "description": "A Denial of Service vulnerability was found in Apache Qpid Broker-J versions 7.0.0-7.0.4 when AMQP protocols 0-8, 0-9 or 0-91 are used to publish messages with size greater than allowed maximum message size limit (100MB by default). The broker crashes due to the defect. AMQP protocols 0-10 and 1.0 are not affected.",
        "reserved_timestamp": 1520553600,
        "published_timestamp": 1529280000,
        "updated_timestamp": 1529488621,
        "repository_url": null,
        "references": {
            "": 3,
            "http://www.securitytracker.com/id/1041138": 2,
            "https://lists.apache.org/thread.html/1089a4f351a1bdca0618199e53bceeec59a10bf4e3008018d6949876%40%3Cusers.qpid.apache.org%3E": 2
        },
        "affected_products": [
            "Qpid",
            "Apache",
            "Service",
            "Apache Qpid Broker-J",
            "Broker",
            "Denial",
            "AMQP"
        ],
        "versions": {
            "status": "affected",
            "version": "7.0.0, 7.0.1, 7.0.2, 7.0.3"
        },
        "files": [
            "AMQP"
        ],
        "keywords": [
            "limit",
            "apache",
            "find",
            "affect",
            "message",
            "broker",
            "denial",
            "default",
            "protocol",
            "version",
            "service",
            "qpid",
            "defect",
            "size",
            "crash",
            "vulnerability",
            "allow",
            "publish",
            "amqp"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "24df0ac1f37d22a98d89303b95f44cd4d03be2d8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517932116,
            "hunks": 43,
            "message": "QPID-8091: [Broker-J] [AMQP 1.0] Add store transaction timeout feature (cherry picked from commit ffd5ad0d456532fb6c9b0ba4e28297c3452bf32c. Merge conflicts resolved manually.)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java b/broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java",
                "index 1b224f1026..d68592bad4 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java",
                "@@ -47,4 +47,2 @@ public interface AMQPSession<S extends org.apache.qpid.server.session.AMQPSessio",
                "-    void doTimeoutAction(String reason);",
                "-",
                "     void block(Queue<?> queue);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java b/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "index b68ed7f30b..6661de1d55 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "@@ -23,3 +23,2 @@ package org.apache.qpid.server.session;",
                " import java.security.AccessControlContext;",
                "-import java.util.ArrayList;",
                " import java.util.HashMap;",
                "@@ -34,3 +33,2 @@ import javax.security.auth.Subject;",
                "-import com.google.common.base.Supplier;",
                " import com.google.common.util.concurrent.Futures;",
                "@@ -53,3 +51,2 @@ import org.apache.qpid.server.model.Connection;",
                " import org.apache.qpid.server.model.LifetimePolicy;",
                "-import org.apache.qpid.server.model.NamedAddressSpace;",
                " import org.apache.qpid.server.model.Session;",
                "@@ -60,6 +57,4 @@ import org.apache.qpid.server.security.SecurityToken;",
                " import org.apache.qpid.server.transport.AMQPConnection;",
                "-import org.apache.qpid.server.transport.TransactionTimeoutTicker;",
                " import org.apache.qpid.server.transport.network.Ticker;",
                " import org.apache.qpid.server.util.Action;",
                "-import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "@@ -70,4 +65,2 @@ public abstract class AbstractAMQPSession<S extends AbstractAMQPSession<S, X>,",
                " {",
                "-    private static final String OPEN_TRANSACTION_TIMEOUT_ERROR = \"Open transaction timed out\";",
                "-    private static final String IDLE_TRANSACTION_TIMEOUT_ERROR = \"Idle transaction timed out\";",
                "     private final Action _deleteModelTask;",
                "@@ -145,9 +138,2 @@ public abstract class AbstractAMQPSession<S extends AbstractAMQPSession<S, X>,",
                "-    @Override",
                "-    protected void postResolveChildren()",
                "-    {",
                "-        super.postResolveChildren();",
                "-        registerTransactionTimeoutTickers(_connection);",
                "-    }",
                "-",
                "     @Override",
                "@@ -203,113 +189,2 @@ public abstract class AbstractAMQPSession<S extends AbstractAMQPSession<S, X>,",
                "-    private void registerTransactionTimeoutTickers(Connection<?> amqpConnection)",
                "-    {",
                "-        NamedAddressSpace addressSpace = amqpConnection.getAddressSpace();",
                "-        if (addressSpace instanceof QueueManagingVirtualHost)",
                "-        {",
                "-            final EventLogger eventLogger = getEventLogger();",
                "-            final QueueManagingVirtualHost<?> virtualhost = (QueueManagingVirtualHost<?>) addressSpace;",
                "-            final List<Ticker> tickers = new ArrayList<>(4);",
                "-",
                "-            final Supplier<Long> transactionStartTimeSupplier = new Supplier<Long>()",
                "-            {",
                "-                @Override",
                "-                public Long get()",
                "-                {",
                "-                    return getTransactionStartTimeLong();",
                "-                }",
                "-            };",
                "-            final Supplier<Long> transactionUpdateTimeSupplier = new Supplier<Long>()",
                "-            {",
                "-                @Override",
                "-                public Long get()",
                "-                {",
                "-                    return getTransactionUpdateTimeLong();",
                "-                }",
                "-            };",
                "-",
                "-            long notificationRepeatPeriod =",
                "-                    getContextValue(Long.class, Session.TRANSACTION_TIMEOUT_NOTIFICATION_REPEAT_PERIOD);",
                "-",
                "-            if (virtualhost.getStoreTransactionOpenTimeoutWarn() > 0)",
                "-            {",
                "-                tickers.add(new TransactionTimeoutTicker(",
                "-                        virtualhost.getStoreTransactionOpenTimeoutWarn(),",
                "-                        notificationRepeatPeriod, transactionStartTimeSupplier,",
                "-                        new Action<Long>()",
                "-                        {",
                "-                            @Override",
                "-                            public void performAction(Long age)",
                "-                            {",
                "-                                eventLogger.message(getLogSubject(), ChannelMessages.OPEN_TXN(age));",
                "-                            }",
                "-                        }",
                "-                ));",
                "-            }",
                "-            if (virtualhost.getStoreTransactionOpenTimeoutClose() > 0)",
                "-            {",
                "-                tickers.add(new TransactionTimeoutTicker(",
                "-                        virtualhost.getStoreTransactionOpenTimeoutClose(),",
                "-                        notificationRepeatPeriod, transactionStartTimeSupplier,",
                "-                        new Action<Long>()",
                "-                        {",
                "-                            @Override",
                "-                            public void performAction(Long age)",
                "-                            {",
                "-                                doTimeoutAction(OPEN_TRANSACTION_TIMEOUT_ERROR);",
                "-                            }",
                "-                        }",
                "-                ));",
                "-            }",
                "-            if (virtualhost.getStoreTransactionIdleTimeoutWarn() > 0)",
                "-            {",
                "-                tickers.add(new TransactionTimeoutTicker(",
                "-                        virtualhost.getStoreTransactionIdleTimeoutWarn(),",
                "-                        notificationRepeatPeriod, transactionUpdateTimeSupplier,",
                "-                        new Action<Long>()",
                "-                        {",
                "-                            @Override",
                "-                            public void performAction(Long age)",
                "-                            {",
                "-                                eventLogger.message(getLogSubject(), ChannelMessages.IDLE_TXN(age));",
                "-                            }",
                "-                        }",
                "-                ));",
                "-            }",
                "-            if (virtualhost.getStoreTransactionIdleTimeoutClose() > 0)",
                "-            {",
                "-                tickers.add(new TransactionTimeoutTicker(",
                "-                        virtualhost.getStoreTransactionIdleTimeoutClose(),",
                "-                        notificationRepeatPeriod, transactionUpdateTimeSupplier,",
                "-                        new Action<Long>()",
                "-                        {",
                "-                            @Override",
                "-                            public void performAction(Long age)",
                "-                            {",
                "-                                doTimeoutAction(IDLE_TRANSACTION_TIMEOUT_ERROR);",
                "-                            }",
                "-                        }",
                "-                ));",
                "-            }",
                "-",
                "-            for (Ticker ticker : tickers)",
                "-            {",
                "-                addTicker(ticker);",
                "-            }",
                "-",
                "-            Action deleteTickerTask = new Action()",
                "-            {",
                "-                @Override",
                "-                public void performAction(Object o)",
                "-                {",
                "-                    removeDeleteTask(this);",
                "-                    for (Ticker ticker : tickers)",
                "-                    {",
                "-                        removeTicker(ticker);",
                "-                    }",
                "-                }",
                "-            };",
                "-            addDeleteTask(deleteTickerTask);",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java b/broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java",
                "index 6da15b1efc..3b609f90ad 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java",
                "@@ -39,2 +39,3 @@ import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.Deletable;",
                "@@ -106,2 +107,7 @@ public interface AMQPConnection<C extends AMQPConnection<C>>",
                "+    void registerTransactionTickers(ServerTransaction serverTransaction,",
                "+                                    final Action<String> closeAction, final long notificationRepeatPeriod);",
                "+",
                "+    void unregisterTransactionTickers(ServerTransaction serverTransaction);",
                "+",
                "     enum CloseReason",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "index 059db39d97..944d3bc600 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "@@ -33,4 +33,7 @@ import java.util.HashMap;",
                " import java.util.Iterator;",
                "+import java.util.LinkedHashSet;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.CopyOnWriteArrayList;",
                "@@ -53,2 +56,3 @@ import org.apache.qpid.server.logging.EventLoggerProvider;",
                " import org.apache.qpid.server.logging.LogSubject;",
                "+import org.apache.qpid.server.logging.messages.ChannelMessages;",
                " import org.apache.qpid.server.logging.messages.ConnectionMessages;",
                "@@ -80,2 +84,3 @@ import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.FixedKeyMapCreator;",
                "+import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "@@ -87,2 +92,4 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "     public static final FixedKeyMapCreator PUBLISH_ACTION_MAP_CREATOR = new FixedKeyMapCreator(\"routingKey\", \"immediate\");",
                "+    private static final String OPEN_TRANSACTION_TIMEOUT_ERROR = \"Open transaction timed out\";",
                "+    private static final String IDLE_TRANSACTION_TIMEOUT_ERROR = \"Idle transaction timed out\";",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractAMQPConnection.class);",
                "@@ -137,2 +144,4 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "+    private final Map<ServerTransaction, Set<Ticker>> _transactionTickers = new ConcurrentHashMap<>();",
                "+",
                "     public AbstractAMQPConnection(Broker<?> broker,",
                "@@ -892,2 +901,69 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "+    @Override",
                "+    public void registerTransactionTickers(final ServerTransaction serverTransaction,",
                "+                                           final Action<String> closeAction, final long notificationRepeatPeriod)",
                "+    {",
                "+        NamedAddressSpace addressSpace = getAddressSpace();",
                "+        if (addressSpace instanceof QueueManagingVirtualHost)",
                "+        {",
                "+            final QueueManagingVirtualHost<?> virtualhost = (QueueManagingVirtualHost<?>) addressSpace;",
                "+",
                "+            EventLogger eventLogger = virtualhost.getEventLogger();",
                "+",
                "+            final Set<Ticker> tickers = new LinkedHashSet<>(4);",
                "+",
                "+            if (virtualhost.getStoreTransactionOpenTimeoutWarn() > 0)",
                "+            {",
                "+                tickers.add(new TransactionTimeoutTicker(",
                "+                        virtualhost.getStoreTransactionOpenTimeoutWarn(),",
                "+                        notificationRepeatPeriod, serverTransaction::getTransactionStartTime,",
                "+                        age -> eventLogger.message(getLogSubject(), ChannelMessages.OPEN_TXN(age))",
                "+                ));",
                "+            }",
                "+            if (virtualhost.getStoreTransactionOpenTimeoutClose() > 0)",
                "+            {",
                "+                tickers.add(new TransactionTimeoutTicker(",
                "+                        virtualhost.getStoreTransactionOpenTimeoutClose(),",
                "+                        notificationRepeatPeriod, serverTransaction::getTransactionStartTime,",
                "+                        age -> closeAction.performAction(OPEN_TRANSACTION_TIMEOUT_ERROR)));",
                "+            }",
                "+            if (virtualhost.getStoreTransactionIdleTimeoutWarn() > 0)",
                "+            {",
                "+                tickers.add(new TransactionTimeoutTicker(",
                "+                        virtualhost.getStoreTransactionIdleTimeoutWarn(),",
                "+                        notificationRepeatPeriod, serverTransaction::getTransactionUpdateTime,",
                "+                        age -> eventLogger.message(getLogSubject(), ChannelMessages.IDLE_TXN(age))",
                "+                ));",
                "+            }",
                "+            if (virtualhost.getStoreTransactionIdleTimeoutClose() > 0)",
                "+            {",
                "+                tickers.add(new TransactionTimeoutTicker(",
                "+                        virtualhost.getStoreTransactionIdleTimeoutClose(),",
                "+                        notificationRepeatPeriod, serverTransaction::getTransactionUpdateTime,",
                "+                        age -> closeAction.performAction(IDLE_TRANSACTION_TIMEOUT_ERROR)",
                "+                ));",
                "+            }",
                "+",
                "+            if (!tickers.isEmpty())",
                "+            {",
                "+                for (Ticker ticker : tickers)",
                "+                {",
                "+                    getAggregateTicker().addTicker(ticker);",
                "+                }",
                "+                notifyWork();",
                "+            }",
                "+            _transactionTickers.put(serverTransaction, tickers);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void unregisterTransactionTickers(final ServerTransaction serverTransaction)",
                "+    {",
                "+        NamedAddressSpace addressSpace = getAddressSpace();",
                "+        if (addressSpace instanceof QueueManagingVirtualHost)",
                "+        {",
                "+            _transactionTickers.remove(serverTransaction).forEach(t -> getAggregateTicker().removeTicker(t));",
                "+        }",
                "+    }",
                "+",
                "     private class SlowConnectionOpenTicker implements Ticker, SchedulingDelayNotificationListener",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index e2211dd690..015394eec2 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -70,2 +70,3 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.txn.AsyncCommand;",
                "@@ -1149,2 +1150,4 @@ public class ServerSession extends SessionInvoker",
                "             _transaction.rollback();",
                "+",
                "+            amqpConnection.unregisterTransactionTickers(_transaction);",
                "         }",
                "@@ -1242,3 +1245,17 @@ public class ServerSession extends SessionInvoker",
                "     {",
                "-        _transaction = getConnection().getAmqpConnection().createLocalTransaction();",
                "+        ServerTransaction txn = _transaction;",
                "+        AMQPConnection_0_10 amqpConnection = getAMQPConnection();",
                "+        if (txn instanceof LocalTransaction)",
                "+        {",
                "+            amqpConnection.unregisterTransactionTickers(_transaction);",
                "+        }",
                "+",
                "+        _transaction = amqpConnection.createLocalTransaction();",
                "+        long notificationRepeatPeriod =",
                "+                getModelObject().getContextValue(Long.class, Session.TRANSACTION_TIMEOUT_NOTIFICATION_REPEAT_PERIOD);",
                "+        amqpConnection.registerTransactionTickers(_transaction,",
                "+                                                  message -> amqpConnection.closeSessionAsync(_modelObject,",
                "+                                                                                              AMQPConnection.CloseReason.TRANSACTION_TIMEOUT,",
                "+                                                                                              (String) message),",
                "+                                                  notificationRepeatPeriod);",
                "     }",
                "@@ -1673,8 +1690,2 @@ public class ServerSession extends SessionInvoker",
                "-    public void doTimeoutAction(final String reason)",
                "-    {",
                "-        getAMQPConnection().closeSessionAsync(_modelObject,",
                "-                                              AMQPConnection.CloseReason.TRANSACTION_TIMEOUT, reason);",
                "-    }",
                "-",
                "     private class ResultFuture<T> implements Future<T>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java",
                "index 62e98faebc..dd6ca8053e 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java",
                "@@ -114,8 +114,2 @@ public class Session_0_10 extends AbstractAMQPSession<Session_0_10, ConsumerTarg",
                "-    @Override",
                "-    public void doTimeoutAction(final String idleTransactionTimeoutError)",
                "-    {",
                "-        _serverSession.doTimeoutAction(idleTransactionTimeoutError);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index e106a3f828..ffe2c8d738 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -236,8 +236,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    @Override",
                "-    public void doTimeoutAction(String reason)",
                "-    {",
                "-        _connection.sendConnectionCloseAsync(AMQPConnection.CloseReason.TRANSACTION_TIMEOUT, reason);",
                "-    }",
                "-",
                "     private void message(final LogMessage message)",
                "@@ -289,8 +283,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    /** Sets this channel to be part of a local transaction */",
                "-    private void setLocalTransactional()",
                "-    {",
                "-        _transaction = _connection.createLocalTransaction();",
                "-    }",
                "-",
                "     boolean isTransactional()",
                "@@ -764,2 +752,4 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 _connection.decrementTransactionOpenCounter();",
                "+",
                "+                _connection.unregisterTransactionTickers(_transaction);",
                "             }",
                "@@ -3284,3 +3274,15 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-        setLocalTransactional();",
                "+        ServerTransaction txn = _transaction;",
                "+        if (txn instanceof LocalTransaction)",
                "+        {",
                "+            getConnection().unregisterTransactionTickers(_transaction);",
                "+        }",
                "+",
                "+        _transaction = _connection.createLocalTransaction();",
                "+        long notificationRepeatPeriod = getContextValue(Long.class,",
                "+                                                 TRANSACTION_TIMEOUT_NOTIFICATION_REPEAT_PERIOD);",
                "+        getConnection().registerTransactionTickers(_transaction,",
                "+                                                   message -> _connection.sendConnectionCloseAsync(AMQPConnection.CloseReason.TRANSACTION_TIMEOUT,",
                "+                                                                                                   message),",
                "+                                                   notificationRepeatPeriod);",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "index 9091456f68..e4401874a8 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "@@ -52,2 +52,3 @@ import java.util.stream.StreamSupport;",
                "+import com.google.common.base.Supplier;",
                " import com.google.common.collect.Iterators;",
                "@@ -60,2 +61,4 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.logging.EventLogger;",
                "+import org.apache.qpid.server.logging.messages.ChannelMessages;",
                " import org.apache.qpid.server.logging.messages.ConnectionMessages;",
                "@@ -66,2 +69,3 @@ import org.apache.qpid.server.model.NamedAddressSpace;",
                " import org.apache.qpid.server.model.Protocol;",
                "+import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.Transport;",
                "@@ -126,2 +130,4 @@ import org.apache.qpid.server.transport.ProtocolEngine;",
                " import org.apache.qpid.server.transport.ServerNetworkConnection;",
                "+import org.apache.qpid.server.transport.TransactionTimeoutTicker;",
                "+import org.apache.qpid.server.transport.network.Ticker;",
                " import org.apache.qpid.server.transport.util.Functions;",
                "@@ -132,2 +138,3 @@ import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                " import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "+import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index 62045a6f56..aa7ea29bcf 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -1204,8 +1204,2 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "-    @Override",
                "-    public void doTimeoutAction(final String reason)",
                "-    {",
                "-        getAMQPConnection().closeSessionAsync(this, AMQPConnection.CloseReason.TRANSACTION_TIMEOUT, reason);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "index cf0ddf323a..1394d3a4c0 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "@@ -23,7 +23,8 @@ import java.util.Arrays;",
                " import java.util.Collections;",
                "-import java.util.LinkedHashMap;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "@@ -52,3 +53,3 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                " {",
                "-    private final LinkedHashMap<Integer, ServerTransaction> _createdTransactions = new LinkedHashMap<>();",
                "+    private final Map<Integer, ServerTransaction> _createdTransactions = new ConcurrentHashMap<>();",
                "@@ -89,3 +90,4 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "-                        session.getConnection().receivedComplete();",
                "+                        AMQPConnection_1_0<?> connection = session.getConnection();",
                "+                        connection.receivedComplete();",
                "@@ -93,4 +95,9 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "                         {",
                "-                            final IdentifiedTransaction txn = session.getConnection().createIdentifiedTransaction();",
                "+                            final IdentifiedTransaction txn = connection.createIdentifiedTransaction();",
                "                             _createdTransactions.put(txn.getId(), txn.getServerTransaction());",
                "+                            long notificationRepeatPeriod =",
                "+                                    getSession().getContextValue(Long.class, Session.TRANSACTION_TIMEOUT_NOTIFICATION_REPEAT_PERIOD);",
                "+                            connection.registerTransactionTickers(txn.getServerTransaction(),",
                "+                                                                  this::doTimeoutAction,",
                "+                                                                  notificationRepeatPeriod);",
                "@@ -190,2 +197,3 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "             _createdTransactions.remove(transactionId);",
                "+            connection.unregisterTransactionTickers(txn);",
                "             connection.removeTransaction(transactionId);",
                "@@ -206,10 +214,3 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "         // force rollback of open transactions",
                "-        for(Map.Entry<Integer, ServerTransaction> entry : _createdTransactions.entrySet())",
                "-        {",
                "-            entry.getValue().rollback();",
                "-            AMQPConnection_1_0<?> connection = getSession().getConnection();",
                "-            connection.decrementTransactionOpenCounter();",
                "-            connection.incrementTransactionRollbackCounter();",
                "-            connection.removeTransaction(entry.getKey());",
                "-        }",
                "+        rollbackOpenTransactions();",
                "         close();",
                "@@ -268,2 +269,22 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "     }",
                "+",
                "+    private void doTimeoutAction(final String message)",
                "+    {",
                "+        rollbackOpenTransactions();",
                "+        Error error = new Error(TransactionError.TRANSACTION_TIMEOUT, message);",
                "+        getSession().getConnection().close(error);",
                "+    }",
                "+",
                "+    private void rollbackOpenTransactions()",
                "+    {",
                "+        for(Map.Entry<Integer, ServerTransaction> entry : _createdTransactions.entrySet())",
                "+        {",
                "+            entry.getValue().rollback();",
                "+            AMQPConnection_1_0<?> connection = getSession().getConnection();",
                "+            connection.decrementTransactionOpenCounter();",
                "+            connection.incrementTransactionRollbackCounter();",
                "+            connection.removeTransaction(entry.getKey());",
                "+        }",
                "+        _createdTransactions.clear();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java",
                "broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ffd5ad0d456532fb6c9b0ba4e28297c3452bf32c"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java, broker-core/src/main/java/org/apache/qpid/server/session/AMQPSession.java, broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/Session_0_10.java, broker-core/src/main/java/org/apache/qpid/server/transport/AMQPConnection.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2495d194989110d383df7d2a44a92e90cb8c48bf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516277022,
            "hunks": 33,
            "message": "QPID-8062: [Broker-J][AMQP 1.0] Move responsibility to create outcome for received message from ReceivingDestination into a caller of ReceivingDestination#send() (cherry picked from commit b5a0d32806ed5d07853adc287537d53cd3a7791f)",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "index 806469be7b..00c058861c 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "@@ -24,3 +24,2 @@ import static org.apache.qpid.server.protocol.v1_0.Session_1_0.DELAYED_DELIVERY;",
                " import java.util.Arrays;",
                "-import java.util.Collections;",
                "@@ -32,13 +31,6 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.NamedAddressSpace;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Target;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.AmqpError;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "-import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -70,14 +62,5 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome[] getOutcomes()",
                "-    {",
                "-        return new Outcome[0];",
                "-    }",
                "-",
                "-    @Override",
                "-    public Outcome send(final ServerMessage<?> message,",
                "-                        final ServerTransaction txn,",
                "-                        final SecurityToken securityToken,",
                "-                        final boolean rejectedOutcomeSupportedBySource,",
                "-                        final boolean deliverySettled,",
                "-                        final Binary deliveryTag) throws AmqpErrorException",
                "+    public void send(final ServerMessage<?> message,",
                "+                     final ServerTransaction txn,",
                "+                     final SecurityToken securityToken) throws UnroutableMessageException",
                "     {",
                "@@ -100,3 +83,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "-        final Outcome outcome;",
                "         if (destination == null)",
                "@@ -106,3 +88,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "                 _eventLogger.message(ExchangeMessages.DISCARDMSG(\"\", routingAddress));",
                "-                outcome = new Accepted();",
                "             }",
                "@@ -110,27 +91,4 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "             {",
                "-                final Error notFoundError = new Error(AmqpError.NOT_FOUND,",
                "-                                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "-                notFoundError.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "-",
                "-                // If the source of the link does not support the rejected outcome,",
                "-                // or the message has already been settled by the sender,",
                "-                // then the routing node MUST detach the link with an error.",
                "-                // AMQP-140: When pre-settled messages are being sent within a transaction,",
                "-                // then the behaviour defined for transactions should take precedence",
                "-                // (essentially marking the transaction as rollback only).",
                "-                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "-                {",
                "-                    throw new AmqpErrorException(notFoundError);",
                "-                }",
                "-                else",
                "-                {",
                "-                    if (deliverySettled && txn instanceof LocalTransaction)",
                "-                    {",
                "-                        ((LocalTransaction) txn).setRollbackOnly();",
                "-                    }",
                "-",
                "-                    Rejected rejected = new Rejected();",
                "-                    rejected.setError(notFoundError);",
                "-                    outcome = rejected;",
                "-                }",
                "+                throw new UnroutableMessageException(AmqpError.NOT_FOUND,",
                "+                                                     String.format(\"Unknown destination '%s'\", routingAddress));",
                "             }",
                "@@ -139,10 +97,6 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "         {",
                "-            outcome = destination.send(message,",
                "-                                       txn,",
                "-                                       securityToken,",
                "-                                       rejectedOutcomeSupportedBySource,",
                "-                                       deliverySettled,",
                "-                                       deliveryTag);",
                "+            destination.send(message,",
                "+                             txn,",
                "+                             securityToken);",
                "         }",
                "-        return outcome;",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "index 6d5859f919..ee3839c1fe 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "@@ -36,8 +36,3 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.Exchange;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.TerminusDurability;",
                "@@ -45,5 +40,3 @@ import org.apache.qpid.server.protocol.v1_0.type.messaging.TerminusExpiryPolicy;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.AmqpError;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "-import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -52,5 +45,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                " {",
                "-    private static final Accepted ACCEPTED = new Accepted();",
                "-    private static final Rejected REJECTED = new Rejected();",
                "-    private static final Outcome[] OUTCOMES = { ACCEPTED, REJECTED};",
                "     private final boolean _discardUnroutable;",
                "@@ -92,14 +82,5 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome[] getOutcomes()",
                "-    {",
                "-        return OUTCOMES;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Outcome send(final ServerMessage<?> message,",
                "-                        final ServerTransaction txn,",
                "-                        final SecurityToken securityToken,",
                "-                        final boolean rejectedOutcomeSupportedBySource,",
                "-                        final boolean deliverySettled,",
                "-                        final Binary deliveryTag) throws AmqpErrorException",
                "+    public void send(final ServerMessage<?> message,",
                "+                     final ServerTransaction txn,",
                "+                     final SecurityToken securityToken) throws UnroutableMessageException",
                "     {",
                "@@ -138,6 +119,6 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "             {",
                "-                final Error error;",
                "+                final String errorMessage;",
                "+                final AmqpError errorCode;",
                "                 if (result.isRejected())",
                "                 {",
                "-                    AmqpError errorCode;",
                "                     if (result.containsReject(RejectType.LIMIT_EXCEEDED))",
                "@@ -154,14 +135,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     }",
                "-                    error = new Error(errorCode, result.getRejectReason());",
                "-                }",
                "-                else",
                "-                {",
                "-                    error = new Error(AmqpError.NOT_FOUND,",
                "-                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "-                }",
                "-                error.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "-",
                "-                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "-                {",
                "-                    throw new AmqpErrorException(error);",
                "+                    errorMessage = result.getRejectReason();",
                "                 }",
                "@@ -169,11 +139,6 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                 {",
                "-                    if (deliverySettled && txn instanceof LocalTransaction)",
                "-                    {",
                "-                        ((LocalTransaction) txn).setRollbackOnly();",
                "-                    }",
                "-",
                "-                    Rejected rejected = new Rejected();",
                "-                    rejected.setError(error);",
                "-                    return rejected;",
                "+                    errorCode = AmqpError.NOT_FOUND;",
                "+                    errorMessage = String.format(\"Unknown destination '%s'\", routingAddress);",
                "                 }",
                "+                throw new UnroutableMessageException(errorCode, errorMessage);",
                "             }",
                "@@ -184,3 +149,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "         }",
                "-        return ACCEPTED;",
                "     }",
                "@@ -201,10 +165,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "-    private Outcome createdRejectedOutcome(AmqpError errorCode, String errorMessage)",
                "-    {",
                "-        Rejected rejected = new Rejected();",
                "-        final Error notFoundError = new Error(errorCode, errorMessage);",
                "-        rejected.setError(notFoundError);",
                "-        return rejected;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "index 5abd825159..5c746bec0f 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "@@ -24,5 +24,2 @@ import org.apache.qpid.server.message.MessageDestination;",
                " import org.apache.qpid.server.message.ServerMessage;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "@@ -33,3 +30,2 @@ public interface ReceivingDestination",
                " {",
                "-    Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "     Symbol REJECT_UNROUTABLE = Symbol.valueOf(\"REJECT_UNROUTABLE\");",
                "@@ -39,10 +35,5 @@ public interface ReceivingDestination",
                "-    Outcome[] getOutcomes();",
                "-",
                "-    Outcome send(final ServerMessage<?> message,",
                "-                 final ServerTransaction txn,",
                "-                 final SecurityToken securityToken,",
                "-                 final boolean rejectedOutcomeSupportedBySource,",
                "-                 final boolean deliverySettled,",
                "-                 final Binary deliveryTag) throws AmqpErrorException;",
                "+    void send(final ServerMessage<?> message,",
                "+              final ServerTransaction txn,",
                "+              final SecurityToken securityToken) throws UnroutableMessageException;",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index a565f7ffde..aebff2eba1 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -56,2 +56,3 @@ import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                " import org.apache.qpid.server.protocol.v1_0.type.UnsignedInteger;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                "@@ -79,2 +80,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(StandardReceivingLinkEndpoint.class);",
                "+    private static final Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "+    private static final Accepted ACCEPTED = new Accepted();",
                "     private static final String LINK = \"link\";",
                "@@ -269,12 +272,33 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                         {",
                "-                            outcome = getReceivingDestination().send(serverMessage,",
                "-                                                                     transaction,",
                "-                                                                     session.getSecurityToken(),",
                "-                                                                     _rejectedOutcomeSupportedBySource,",
                "-                                                                     delivery.isSettled(),",
                "-                                                                     delivery.getDeliveryTag());",
                "+                            getReceivingDestination().send(serverMessage,",
                "+                                                           transaction,",
                "+                                                           session.getSecurityToken());",
                "+                            outcome = ACCEPTED;",
                "                         }",
                "-                        catch (AmqpErrorException e)",
                "+                        catch (UnroutableMessageException e)",
                "                         {",
                "-                            return e.getError();",
                "+                            final Error error = new Error();",
                "+                            error.setCondition(e.getErrorCondition());",
                "+                            error.setDescription(e.getMessage());",
                "+                            String targetAddress = getTarget().getAddress();",
                "+                            if (targetAddress == null || \"\".equals(targetAddress.trim()))",
                "+                            {",
                "+                                error.setInfo(Collections.singletonMap(DELIVERY_TAG, delivery.getDeliveryTag()));",
                "+                            }",
                "+                            if (!_rejectedOutcomeSupportedBySource ||",
                "+                                (delivery.isSettled() && !(transaction instanceof LocalTransaction)))",
                "+                            {",
                "+                                return error;",
                "+                            }",
                "+                            else",
                "+                            {",
                "+                                if (delivery.isSettled() && transaction instanceof LocalTransaction)",
                "+                                {",
                "+                                    ((LocalTransaction) transaction).setRollbackOnly();",
                "+                                }",
                "+",
                "+                                Rejected rejected = new Rejected();",
                "+                                rejected.setError(error);",
                "+                                outcome = rejected;",
                "+                            }",
                "                         }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java",
                "new file mode 100644",
                "index 0000000000..378b86cc0a",
                "--- /dev/null",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.protocol.v1_0;",
                "+",
                "+import org.apache.qpid.server.protocol.v1_0.type.ErrorCondition;",
                "+",
                "+public class UnroutableMessageException extends Exception",
                "+{",
                "+    private final ErrorCondition _errorCondition;",
                "+",
                "+    public UnroutableMessageException(final ErrorCondition errorCondition, final String message)",
                "+    {",
                "+        super(message);",
                "+        _errorCondition = errorCondition;",
                "+    }",
                "+",
                "+    public ErrorCondition getErrorCondition()",
                "+    {",
                "+        return _errorCondition;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8062": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b5a0d32806ed5d07853adc287537d53cd3a7791f"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8062",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bce2424df9c8fdef3d1714ff1f760f11859f298d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515771282,
            "hunks": 28,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Use asynchronous auto commit transaction for non-transactional transfers Currently each disposition returned singly.",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "index 53f47d1b3a..665ee0a400 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "@@ -86,2 +86,4 @@ public interface AMQPConnection_1_0<C extends AMQPConnection_1_0<C>> extends AMQ",
                "+    void receivedComplete();",
                "+",
                "     @DerivedAttribute(description = \"If true send a final SASL challenge using a SaslChallenge performative, rather than SaslOutcome.\")",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "index b2384bdaf3..9091456f68 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "@@ -1297,31 +1297,38 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "-                do",
                "+                try",
                "                 {",
                "-                    remaining = msg.remaining();",
                "-",
                "-                    switch (_connectionState)",
                "+                    do",
                "                     {",
                "-                        case AWAIT_AMQP_OR_SASL_HEADER:",
                "-                        case AWAIT_AMQP_HEADER:",
                "-                            if (remaining >= 8)",
                "-                            {",
                "-                                processProtocolHeader(msg);",
                "-                            }",
                "-                            break;",
                "-                        case AWAIT_SASL_INIT:",
                "-                        case AWAIT_SASL_RESPONSE:",
                "-                        case AWAIT_OPEN:",
                "-                        case OPENED:",
                "-                        case CLOSE_SENT:",
                "-                            _frameHandler.parse(msg);",
                "-                            break;",
                "-                        case CLOSE_RECEIVED:",
                "-                        case CLOSED:",
                "-                            // ignore;",
                "-                            break;",
                "-                    }",
                "+                        remaining = msg.remaining();",
                "+",
                "+                        switch (_connectionState)",
                "+                        {",
                "+                            case AWAIT_AMQP_OR_SASL_HEADER:",
                "+                            case AWAIT_AMQP_HEADER:",
                "+                                if (remaining >= 8)",
                "+                                {",
                "+                                    processProtocolHeader(msg);",
                "+                                }",
                "+                                break;",
                "+                            case AWAIT_SASL_INIT:",
                "+                            case AWAIT_SASL_RESPONSE:",
                "+                            case AWAIT_OPEN:",
                "+                            case OPENED:",
                "+                            case CLOSE_SENT:",
                "+                                _frameHandler.parse(msg);",
                "+                                break;",
                "+                            case CLOSE_RECEIVED:",
                "+                            case CLOSED:",
                "+                                // ignore;",
                "+                                break;",
                "+                        }",
                "+                    }",
                "+                    while (msg.remaining() != remaining);",
                "+                }",
                "+                finally",
                "+                {",
                "+                    receivedComplete();",
                "                 }",
                "-                while (msg.remaining() != remaining);",
                "             }",
                "@@ -1347,2 +1354,22 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "+    @Override",
                "+    public void receivedComplete()",
                "+    {",
                "+        if (_receivingSessions != null)",
                "+        {",
                "+            for (final Session_1_0 session : _receivingSessions)",
                "+            {",
                "+                if (session != null)",
                "+                {",
                "+                    final AccessControlContext context = session.getAccessControllerContext();",
                "+                    AccessController.doPrivileged((PrivilegedAction<Void>) () ->",
                "+                    {",
                "+                        session.receivedComplete();",
                "+                        return null;",
                "+                    }, context);",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private void processProtocolHeader(final QpidByteBuffer msg)",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index 15795739ad..aec18ad59e 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -293,5 +293,5 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "-    public void updateDisposition(final Binary deliveryTag,",
                "-                                  final DeliveryState state,",
                "-                                  final boolean settled)",
                "+    void updateDisposition(final Binary deliveryTag,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "     {",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "index 961244d427..1bd9604045 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "@@ -182,2 +182,6 @@ public class ErrantLinkEndpoint<S extends BaseSource, T extends BaseTarget> impl",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+    }",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "index 94e3b1ec7f..d73319d207 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "@@ -76,2 +76,4 @@ public interface LinkEndpoint<S extends BaseSource, T extends BaseTarget>",
                "     ReceiverSettleMode getReceivingSettlementMode();",
                "+",
                "+    void receiveComplete();",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index 23df75eedd..4c64e335f4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -611,3 +611,3 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "-    public void updateDisposition(final Binary deliveryTag, DeliveryState state, boolean settled)",
                "+    void updateDisposition(final Binary deliveryTag, DeliveryState state, boolean settled)",
                "     {",
                "@@ -901,2 +901,7 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+    }",
                "+",
                "     private static class OutgoingDelivery",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index e52452af30..50b681dfa5 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -184,2 +184,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         if(_sessionState == SessionState.ACTIVE)",
                "@@ -212,6 +213,6 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "-    void updateDisposition(final Role role,",
                "-                                  final UnsignedInteger first,",
                "-                                  final UnsignedInteger last,",
                "-                                  final DeliveryState state, final boolean settled)",
                "+    private void updateDisposition(final Role role,",
                "+                                   final UnsignedInteger first,",
                "+                                   final UnsignedInteger last,",
                "+                                   final DeliveryState state, final boolean settled)",
                "     {",
                "@@ -321,2 +322,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         switch (_sessionState)",
                "@@ -374,2 +376,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         final SequenceNumber flowNextIncomingId = new SequenceNumber(flow.getNextIncomingId() == null",
                "@@ -502,2 +505,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         UnsignedInteger handle = detach.getHandle();",
                "@@ -1283,2 +1287,7 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "+    void receivedComplete()",
                "+    {",
                "+        _associatedLinkEndpoints.forEach(linkedEnpoint -> linkedEnpoint.receiveComplete());",
                "+    }",
                "+",
                "     private class EndpointCreationCallback<T extends LinkEndpoint<? extends BaseSource, ? extends BaseTarget>> implements FutureCallback<T>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 7dcf31ac89..bc18bfb1cf 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -27,5 +27,9 @@ import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.LinkedList;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.ExecutionException;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                " import org.slf4j.Logger;",
                "@@ -62,2 +66,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.ReceiverSettleMode;",
                "+import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -65,4 +70,6 @@ import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint<Target>",
                "+        implements AsyncAutoCommitTransaction.FutureRecorder",
                " {",
                "@@ -73,2 +80,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<>();",
                "+",
                "     private final PublishingLink _publishingLink = new PublishingLink()",
                "@@ -223,3 +232,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                 {",
                "-                    transaction = new AutoCommitTransaction(getAddressSpace().getMessageStore());",
                "+                    transaction = new AsyncAutoCommitTransaction(getAddressSpace().getMessageStore(), this);",
                "                 }",
                "@@ -297,3 +306,28 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-                    updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                    if (transaction instanceof AsyncAutoCommitTransaction)",
                "+                    {",
                "+                        recordFuture(Futures.immediateFuture(null), new ServerTransaction.Action()",
                "+                        {",
                "+                            @Override",
                "+                            public void postCommit()",
                "+                            {",
                "+                                updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void onRollback()",
                "+                            {",
                "+                                //TODO: if reject is not supported, check spec behaviour",
                "+                                Rejected rejected = new Rejected();",
                "+                                rejected.setError(new Error(AmqpError.ILLEGAL_STATE, \"Store transaction unexpectedly rolled-back\"));",
                "+                                DeliveryState state = sourceSupportedOutcomes.contains(Rejected.REJECTED_SYMBOL) ? rejected : resultantState;",
                "+                                updateDisposition(delivery.getDeliveryTag(), state, settled);",
                "+                            }",
                "+                        });",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        getSession().receivedComplete();",
                "+                        updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                    }",
                "@@ -524,2 +558,73 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "     }",
                "+",
                "+    @Override",
                "+    public void recordFuture(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _unfinishedCommandsQueue.add(new AsyncCommand(future, action));",
                "+    }",
                "+",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+        AsyncCommand cmd;",
                "+        while((cmd = _unfinishedCommandsQueue.poll()) != null)",
                "+        {",
                "+            cmd.complete();",
                "+        }",
                "+    }",
                "+",
                "+    private static class AsyncCommand",
                "+    {",
                "+        private final ListenableFuture<Void> _future;",
                "+        private ServerTransaction.Action _action;",
                "+",
                "+        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+        {",
                "+            _future = future;",
                "+            _action = action;",
                "+        }",
                "+",
                "+        void complete()",
                "+        {",
                "+            boolean interrupted = false;",
                "+            try",
                "+            {",
                "+                while (true)",
                "+                {",
                "+                    try",
                "+                    {",
                "+                        _future.get();",
                "+                        break;",
                "+                    }",
                "+                    catch (InterruptedException e)",
                "+                    {",
                "+                        interrupted = true;",
                "+                    }",
                "+",
                "+                }",
                "+            }",
                "+            catch(ExecutionException e)",
                "+            {",
                "+                if(e.getCause() instanceof RuntimeException)",
                "+                {",
                "+                    throw (RuntimeException)e.getCause();",
                "+                }",
                "+                else if(e.getCause() instanceof java.lang.Error)",
                "+                {",
                "+                    throw (java.lang.Error) e.getCause();",
                "+                }",
                "+                else",
                "+                {",
                "+                    throw new ServerScopedRuntimeException(e.getCause());",
                "+                }",
                "+            }",
                "+            if(interrupted)",
                "+            {",
                "+                Thread.currentThread().interrupt();",
                "+            }",
                "+            _action.postCommit();",
                "+            _action = null;",
                "+        }",
                "+    }",
                "+",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "index 4535ea45d7..cf0ddf323a 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "@@ -88,2 +88,5 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "                         Session_1_0 session = getSession();",
                "+",
                "+                        session.getConnection().receivedComplete();",
                "+",
                "                         if (command instanceof Declare)",
                "@@ -260,2 +263,7 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf30e227b8e05787d6a95fcd138b879823fda455"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e84273b056abc9a38ec635c52cacbd19d0b45a99",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525451379,
            "hunks": 14,
            "message": "QPID-8181: [Broker-J] Add statistics for a total number of connections established on AMQP port",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "index 6474622e3d..914588960c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "@@ -165,3 +165,3 @@ public interface AmqpPort<X extends AmqpPort<X>> extends Port<X>",
                "-    @ManagedStatistic(statisticType = StatisticType.POINT_IN_TIME, units = StatisticUnit.COUNT, label = \"Connections\",",
                "+    @ManagedStatistic(statisticType = StatisticType.POINT_IN_TIME, units = StatisticUnit.COUNT, label = \"Open Connections\",",
                "                       description = \"Current number of connections made through this port\")",
                "@@ -169,2 +169,6 @@ public interface AmqpPort<X extends AmqpPort<X>> extends Port<X>",
                "+    @ManagedStatistic(statisticType = StatisticType.CUMULATIVE, units = StatisticUnit.COUNT, label = \"Total Connections\",",
                "+            description = \"Total number of connections made through this port\")",
                "+    long getTotalConnectionCount();",
                "+",
                "     @DerivedAttribute(description = \"Maximum time allowed for a new connection to send a protocol header.\"",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "index f2b1c2642e..4e4fc64f7d 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "@@ -35,2 +35,3 @@ import java.util.concurrent.atomic.AtomicBoolean;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "+import java.util.concurrent.atomic.AtomicLong;",
                "@@ -94,2 +95,3 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "     private final AtomicBoolean _connectionCountWarningGiven = new AtomicBoolean();",
                "+    private final AtomicLong _totalConnectionCount = new AtomicLong();",
                "@@ -533,2 +535,3 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "         int openConnections = _connectionCount.incrementAndGet();",
                "+        _totalConnectionCount.incrementAndGet();",
                "         int maxOpenConnections = getMaxOpenConnections();",
                "@@ -596,2 +599,8 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "+    @Override",
                "+    public long getTotalConnectionCount()",
                "+    {",
                "+        return _totalConnectionCount.get();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js",
                "index ed008f6633..153c3f7dd4 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js",
                "@@ -153,3 +153,2 @@ define([\"dojo/dom\",",
                "                         \"trustStoresValue\",",
                "-                        \"connectionCountValue\",",
                "                         \"maxOpenConnectionsValue\",",
                "@@ -202,4 +201,2 @@ define([\"dojo/dom\",",
                "                 this.portData[\"bindingAddress\"] ? entities.encode(String(this.portData[\"bindingAddress\"])) : \"\";",
                "-            this.connectionCountValue.innerHTML =",
                "-                this.portData[\"connectionCount\"] ? entities.encode(String(this.portData[\"connectionCount\"])) : \"0\";",
                "             this.maxOpenConnectionsValue.innerHTML =",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js",
                "index cba72eb568..aae7439dcc 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js",
                "@@ -27,3 +27,4 @@ define([\"dojo/query\",",
                "         \"qpid/management/addVirtualHostAlias\",",
                "-        \"dojo/domReady!\"], function (query, template, EnhancedGrid, registry, util, UpdatableStore, addVirtualHostAlias)",
                "+        \"qpid/common/StatisticsWidget\",",
                "+        \"dojo/domReady!\"], function (query, template, EnhancedGrid, registry, util, UpdatableStore, addVirtualHostAlias, StatisticsWidget)",
                " {",
                "@@ -43,2 +44,3 @@ define([\"dojo/query\",",
                "     {",
                "+        this.portStatisticsNode=query(\".portStatistics\", params.typeSpecificDetailsNode)[0]",
                "         var that = this;",
                "@@ -123,2 +125,17 @@ define([\"dojo/query\",",
                "         }",
                "+",
                "+        if (!this.portStatistics)",
                "+        {",
                "+            this.portStatistics = new StatisticsWidget({",
                "+                category: \"Port\",",
                "+                type: restData.type,",
                "+                management: this.management,",
                "+                defaultStatistics: [\"connectionCount\", \"totalConnectionCount\"]",
                "+            });",
                "+            this.portStatistics.placeAt(this.portStatisticsNode);",
                "+            this.portStatistics.allStatsToggle.domNode.style.display = 'none';",
                "+            this.portStatistics.startup();",
                "+        }",
                "+",
                "+        this.portStatistics.update(restData.statistics);",
                "     };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/port/amqp/show.html b/broker-plugins/management-http/src/main/java/resources/port/amqp/show.html",
                "index c27982fde1..7897e82c13 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/port/amqp/show.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/port/amqp/show.html",
                "@@ -21,2 +21,5 @@",
                " <div>",
                "+    <br/>",
                "+    <div class=\"portStatistics\"></div>",
                "+",
                "     <div data-dojo-type=\"dijit.TitlePane\" data-dojo-props=\"title: 'VirtualHost Aliases'\" class=\"clear virtualHostAliasesGridPanel\">",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/showPort.html b/broker-plugins/management-http/src/main/java/resources/showPort.html",
                "index 3435733514..883f3f9d8c 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/showPort.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/showPort.html",
                "@@ -34,11 +34,2 @@",
                "        </div>",
                "-        <div class=\"alignRight\">",
                "-            <div class=\"clear maxOpenConnections\">",
                "-                <div class=\"formLabel-labelCell\">Open connections (current/maximum):</div>",
                "-                <div class=\"formValue-valueCell\">",
                "-                    <span class=\"connectionCountValue\"></span><span>/</span><span class=\"maxOpenConnectionsValue\"></span>",
                "-                </div>",
                "-            </div>",
                "-        </div>",
                "-",
                "         <div class=\"clear state\">",
                "@@ -77,3 +68,6 @@",
                "         </div>",
                "-",
                "+        <div class=\"clear maxOpenConnections\">",
                "+            <div class=\"formLabel-labelCell\">Maximum number of connections:</div>",
                "+            <div class=\"formValue-valueCell maxOpenConnectionsValue\"></div>",
                "+        </div>",
                "         <div class=\"clear keyStore\">"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js",
                "broker-plugins/management-http/src/main/java/resources/port/amqp/show.html",
                "broker-plugins/management-http/src/main/java/resources/showPort.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8181": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ea3b655f026a02d7548a2abaadde471e6195dcf"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/management-http/src/main/java/resources/js/qpid/management/port/amqp/show.js, broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java, broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java, broker-plugins/management-http/src/main/java/resources/port/amqp/show.html",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8181",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4e746a4b76d7baac75c4bc04fdd93198f9fad20",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516207843,
            "hunks": 38,
            "message": "QPID-8062: [Broker-J][AMQP 1.0] Fix handling of routing errors when target destination cannot route received message * close the link on receipt of unroutable message when     the source of the link does not support the rejected outcome or     non-transactional message has already been settled by the sender * mark the publishing transaction as \"rollback only\" on receipt of     unroutable pre-settled message (cherry picked from commit 06b4213286305f6d05ce496ca278b73b566f24be)",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "index de7991c38e..806469be7b 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "@@ -24,2 +24,3 @@ import static org.apache.qpid.server.protocol.v1_0.Session_1_0.DELAYED_DELIVERY;",
                " import java.util.Arrays;",
                "+import java.util.Collections;",
                "@@ -31,2 +32,4 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.NamedAddressSpace;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -39,2 +42,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "+import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -72,3 +76,8 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken)",
                "+    public Outcome send(final ServerMessage<?> message,",
                "+                        final ServerTransaction txn,",
                "+                        final SecurityToken securityToken,",
                "+                        final boolean rejectedOutcomeSupportedBySource,",
                "+                        final boolean deliverySettled,",
                "+                        final Binary deliveryTag) throws AmqpErrorException",
                "     {",
                "@@ -101,3 +110,27 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "             {",
                "-                outcome = createdRejectedOutcome(AmqpError.NOT_FOUND, \"Unknown destination '\" + routingAddress + \"'\");",
                "+                final Error notFoundError = new Error(AmqpError.NOT_FOUND,",
                "+                                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                notFoundError.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "+",
                "+                // If the source of the link does not support the rejected outcome,",
                "+                // or the message has already been settled by the sender,",
                "+                // then the routing node MUST detach the link with an error.",
                "+                // AMQP-140: When pre-settled messages are being sent within a transaction,",
                "+                // then the behaviour defined for transactions should take precedence",
                "+                // (essentially marking the transaction as rollback only).",
                "+                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "+                {",
                "+                    throw new AmqpErrorException(notFoundError);",
                "+                }",
                "+                else",
                "+                {",
                "+                    if (deliverySettled && txn instanceof LocalTransaction)",
                "+                    {",
                "+                        ((LocalTransaction) txn).setRollbackOnly();",
                "+                    }",
                "+",
                "+                    Rejected rejected = new Rejected();",
                "+                    rejected.setError(notFoundError);",
                "+                    outcome = rejected;",
                "+                }",
                "             }",
                "@@ -106,3 +139,8 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "         {",
                "-            outcome = destination.send(message, txn, securityToken);",
                "+            outcome = destination.send(message,",
                "+                                       txn,",
                "+                                       securityToken,",
                "+                                       rejectedOutcomeSupportedBySource,",
                "+                                       deliverySettled,",
                "+                                       deliveryTag);",
                "         }",
                "@@ -129,10 +167,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     }",
                "-",
                "-    private Outcome createdRejectedOutcome(AmqpError errorCode, String errorMessage)",
                "-    {",
                "-        Rejected rejected = new Rejected();",
                "-        final Error notFoundError = new Error(errorCode, errorMessage);",
                "-        rejected.setError(notFoundError);",
                "-        return rejected;",
                "-    }",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "index 57ad962b87..6d5859f919 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "@@ -36,2 +36,4 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.Exchange;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -45,2 +47,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "+import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -50,3 +53,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     private static final Accepted ACCEPTED = new Accepted();",
                "-    public static final Rejected REJECTED = new Rejected();",
                "+    private static final Rejected REJECTED = new Rejected();",
                "     private static final Outcome[] OUTCOMES = { ACCEPTED, REJECTED};",
                "@@ -95,3 +98,8 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken)",
                "+    public Outcome send(final ServerMessage<?> message,",
                "+                        final ServerTransaction txn,",
                "+                        final SecurityToken securityToken,",
                "+                        final boolean rejectedOutcomeSupportedBySource,",
                "+                        final boolean deliverySettled,",
                "+                        final Binary deliveryTag) throws AmqpErrorException",
                "     {",
                "@@ -130,8 +138,9 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "             {",
                "+                final Error error;",
                "                 if (result.isRejected())",
                "                 {",
                "-                    AmqpError error;",
                "+                    AmqpError errorCode;",
                "                     if (result.containsReject(RejectType.LIMIT_EXCEEDED))",
                "                     {",
                "-                        error = AmqpError.RESOURCE_LIMIT_EXCEEDED;",
                "+                        errorCode = AmqpError.RESOURCE_LIMIT_EXCEEDED;",
                "                     }",
                "@@ -139,3 +148,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     {",
                "-                        error = AmqpError.PRECONDITION_FAILED;",
                "+                        errorCode = AmqpError.PRECONDITION_FAILED;",
                "                     }",
                "@@ -143,5 +152,5 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     {",
                "-                        error = AmqpError.ILLEGAL_STATE;",
                "+                        errorCode = AmqpError.ILLEGAL_STATE;",
                "                     }",
                "-                    return createdRejectedOutcome(error, result.getRejectReason());",
                "+                    error = new Error(errorCode, result.getRejectReason());",
                "                 }",
                "@@ -149,4 +158,21 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                 {",
                "-                    return createdRejectedOutcome(AmqpError.NOT_FOUND,",
                "-                                                  String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                    error = new Error(AmqpError.NOT_FOUND,",
                "+                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                }",
                "+                error.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "+",
                "+                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "+                {",
                "+                    throw new AmqpErrorException(error);",
                "+                }",
                "+                else",
                "+                {",
                "+                    if (deliverySettled && txn instanceof LocalTransaction)",
                "+                    {",
                "+                        ((LocalTransaction) txn).setRollbackOnly();",
                "+                    }",
                "+",
                "+                    Rejected rejected = new Rejected();",
                "+                    rejected.setError(error);",
                "+                    return rejected;",
                "                 }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "index a6a910ff9e..5abd825159 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "@@ -24,2 +24,4 @@ import org.apache.qpid.server.message.MessageDestination;",
                " import org.apache.qpid.server.message.ServerMessage;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -31,3 +33,3 @@ public interface ReceivingDestination",
                " {",
                "-",
                "+    Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "     Symbol REJECT_UNROUTABLE = Symbol.valueOf(\"REJECT_UNROUTABLE\");",
                "@@ -39,3 +41,8 @@ public interface ReceivingDestination",
                "-    Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken);",
                "+    Outcome send(final ServerMessage<?> message,",
                "+                 final ServerTransaction txn,",
                "+                 final SecurityToken securityToken,",
                "+                 final boolean rejectedOutcomeSupportedBySource,",
                "+                 final boolean deliverySettled,",
                "+                 final Binary deliveryTag) throws AmqpErrorException;",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index bc9dd573aa..a565f7ffde 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -56,3 +56,2 @@ import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                " import org.apache.qpid.server.protocol.v1_0.type.UnsignedInteger;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                "@@ -82,3 +81,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private ReceivingDestination _receivingDestination;",
                "+    private volatile ReceivingDestination _receivingDestination;",
                "+    private volatile boolean _rejectedOutcomeSupportedBySource;",
                "@@ -249,3 +249,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     Outcome outcome;",
                "-                    Source source = getSource();",
                "                     if (serverMessage.isPersistent() && !getAddressSpace().getMessageStore().isPersistent())",
                "@@ -254,4 +253,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                                                                         \"Non-durable message store cannot accept durable message.\");",
                "-                        if (source.getOutcomes() != null && Arrays.asList(source.getOutcomes())",
                "-                                                                  .contains(Rejected.REJECTED_SYMBOL))",
                "+                        if (_rejectedOutcomeSupportedBySource)",
                "                         {",
                "@@ -269,41 +267,31 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        outcome = getReceivingDestination().send(serverMessage, transaction,",
                "-                                                                 session.getSecurityToken());",
                "-                    }",
                "-",
                "-                    DeliveryState resultantState;",
                "-",
                "-                    final List<Symbol> sourceSupportedOutcomes = new ArrayList<>();",
                "-                    if (source.getOutcomes() != null)",
                "-                    {",
                "-                        sourceSupportedOutcomes.addAll(Arrays.asList(source.getOutcomes()));",
                "-                    }",
                "-                    else if (source.getDefaultOutcome() == null)",
                "-                    {",
                "-                        sourceSupportedOutcomes.add(Accepted.ACCEPTED_SYMBOL);",
                "-                    }",
                "-",
                "-                    boolean transacted = transactionId != null && transaction instanceof LocalTransaction;",
                "-                    if (sourceSupportedOutcomes.contains(outcome.getSymbol()))",
                "-                    {",
                "-                        if (transactionId == null)",
                "+                        try",
                "                         {",
                "-                            resultantState = outcome;",
                "+                            outcome = getReceivingDestination().send(serverMessage,",
                "+                                                                     transaction,",
                "+                                                                     session.getSecurityToken(),",
                "+                                                                     _rejectedOutcomeSupportedBySource,",
                "+                                                                     delivery.isSettled(),",
                "+                                                                     delivery.getDeliveryTag());",
                "                         }",
                "-                        else",
                "+                        catch (AmqpErrorException e)",
                "                         {",
                "-                            TransactionalState transactionalState = new TransactionalState();",
                "-                            transactionalState.setOutcome(outcome);",
                "-                            transactionalState.setTxnId(transactionId);",
                "-                            resultantState = transactionalState;",
                "+                            return e.getError();",
                "                         }",
                "                     }",
                "+",
                "+                    Outcome sourceDefaultOutcome = getSource().getDefaultOutcome();",
                "+                    boolean defaultOutcome = sourceDefaultOutcome != null &&",
                "+                                             sourceDefaultOutcome.getSymbol().equals(outcome.getSymbol());",
                "+                    DeliveryState resultantState;",
                "+                    if (transactionId == null)",
                "+                    {",
                "+                        resultantState = defaultOutcome ? null : outcome;",
                "+                    }",
                "                     else",
                "                     {",
                "-                        if(transacted && source.getDefaultOutcome() != null",
                "-                           && outcome.getSymbol() != source.getDefaultOutcome().getSymbol())",
                "-                        {",
                "-                            ((LocalTransaction) transaction).setRollbackOnly();",
                "-                        }",
                "-                        resultantState = null;",
                "+                        TransactionalState transactionalState = new TransactionalState();",
                "+                        transactionalState.setOutcome(defaultOutcome ? null : outcome);",
                "+                        transactionalState.setTxnId(transactionId);",
                "+                        resultantState = transactionalState;",
                "                     }",
                "@@ -314,3 +302,5 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(), resultantState, settled));",
                "+                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(),",
                "+                                                                              resultantState,",
                "+                                                                              settled));",
                "                     }",
                "@@ -323,3 +313,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     getSession().getAMQPConnection().registerMessageReceived(serverMessage.getSize());",
                "-                    if (transacted)",
                "+                    if (transactionId != null)",
                "                     {",
                "@@ -458,2 +448,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "         getLink().setTermini(source, target);",
                "+        _rejectedOutcomeSupportedBySource =",
                "+                source.getOutcomes() != null && Arrays.asList(source.getOutcomes()).contains(Rejected.REJECTED_SYMBOL);",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "index 37e327e355..084937613a 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "@@ -30,2 +30,3 @@ import org.apache.qpid.server.protocol.v1_0.type.messaging.EncodingRetainingSect",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Header;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.Properties;",
                "@@ -33,2 +34,3 @@ public class MessageEncoder",
                " {",
                "+    private Properties _properties;",
                "     private Header _header;",
                "@@ -46,2 +48,7 @@ public class MessageEncoder",
                "+    public void setProperties(final Properties properties)",
                "+    {",
                "+        _properties = properties;",
                "+    }",
                "+",
                "     public QpidByteBuffer getPayload()",
                "@@ -54,2 +61,7 @@ public class MessageEncoder",
                "+        if (_properties != null)",
                "+        {",
                "+            payload.add(_properties.createEncodingRetainingSection().getEncodedForm());",
                "+        }",
                "+",
                "         if (_data.isEmpty())"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8062": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "06b4213286305f6d05ce496ca278b73b566f24be"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: publish, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8062",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b92c3063ee213a9e4c4527acd139d40a4237d56",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516029243,
            "hunks": 22,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Coalesce the dispositions for non-transactional transfers",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index aec18ad59e..0872eae10b 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -24,4 +24,6 @@ package org.apache.qpid.server.protocol.v1_0;",
                " import java.util.Collections;",
                "+import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "@@ -297,3 +299,15 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "     {",
                "-        if (_unsettled.containsKey(deliveryTag))",
                "+        updateDispositions(Collections.singleton(deliveryTag), state, settled);",
                "+    }",
                "+",
                "+    void updateDispositions(final Set<Binary> deliveryTags,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "+    {",
                "+",
                "+        final Set<Binary> unsettledKeys = new HashSet<>(_unsettled.keySet());",
                "+        unsettledKeys.retainAll(deliveryTags);",
                "+        final int settledDeliveryCount = deliveryTags.size() - unsettledKeys.size();",
                "+",
                "+        if (!unsettledKeys.isEmpty())",
                "         {",
                "@@ -312,6 +326,9 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "             {",
                "-                if (!(_unsettled.get(deliveryTag) instanceof Outcome))",
                "+                for (final Binary deliveryTag : unsettledKeys)",
                "                 {",
                "-                    Object oldOutcome = _unsettled.put(deliveryTag, outcome);",
                "-                    outcomeUpdate = !outcome.equals(oldOutcome);",
                "+                    if (!(_unsettled.get(deliveryTag) instanceof Outcome))",
                "+                    {",
                "+                        Object oldOutcome = _unsettled.put(deliveryTag, outcome);",
                "+                        outcomeUpdate = outcomeUpdate || !outcome.equals(oldOutcome);",
                "+                    }",
                "                 }",
                "@@ -321,3 +338,3 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "             {",
                "-                getSession().updateDisposition(getRole(), deliveryTag, state, settled);",
                "+                getSession().updateDisposition(getRole(), unsettledKeys, state, settled);",
                "             }",
                "@@ -327,17 +344,27 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "-                if (settled(deliveryTag))",
                "+                int credit = 0;",
                "+                for (final Binary deliveryTag : unsettledKeys)",
                "                 {",
                "-                    if (!isDetached() && _creditWindow)",
                "+                    if (settled(deliveryTag))",
                "                     {",
                "-                        setLinkCredit(getLinkCredit().add(UnsignedInteger.ONE));",
                "-                        sendFlowConditional();",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        getSession().sendFlowConditional();",
                "+                        if (!isDetached() && _creditWindow)",
                "+                        {",
                "+                            credit++;",
                "+                        }",
                "                     }",
                "                 }",
                "+",
                "+                if (credit > 0)",
                "+                {",
                "+                    setLinkCredit(getLinkCredit().add(UnsignedInteger.valueOf(credit)));",
                "+                    sendFlowConditional();",
                "+                }",
                "+                else",
                "+                {",
                "+                    getSession().sendFlowConditional();",
                "+                }",
                "             }",
                "         }",
                "-        else if (_creditWindow)",
                "+",
                "+        if (settledDeliveryCount > 0 && _creditWindow)",
                "         {",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index 50b681dfa5..62045a6f56 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -35,2 +35,3 @@ import java.util.HashMap;",
                " import java.util.HashSet;",
                "+import java.util.Iterator;",
                " import java.util.List;",
                "@@ -38,2 +39,4 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.SortedSet;",
                "+import java.util.TreeSet;",
                " import java.util.UUID;",
                "@@ -41,2 +44,3 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "+import java.util.stream.Collectors;",
                "@@ -259,2 +263,35 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "+    void updateDisposition(final Role role,",
                "+                           final Set<Binary> deliveryTags,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "+    {",
                "+        final DeliveryRegistry deliveryRegistry = role == Role.RECEIVER ? _incomingDeliveryRegistry : _outgoingDeliveryRegistry;",
                "+        SortedSet<UnsignedInteger> deliveryIds = deliveryTags.stream()",
                "+                                                             .map(deliveryRegistry::getDeliveryIdByTag)",
                "+                                                             .collect(Collectors.toCollection(TreeSet::new));",
                "+",
                "+        final Iterator<UnsignedInteger> iterator = deliveryIds.iterator();",
                "+        if (iterator.hasNext())",
                "+        {",
                "+            UnsignedInteger begin = iterator.next();",
                "+            UnsignedInteger end = begin;",
                "+            while (iterator.hasNext())",
                "+            {",
                "+                final UnsignedInteger deliveryId = iterator.next();",
                "+                if (!end.add(UnsignedInteger.ONE).equals(deliveryId))",
                "+                {",
                "+                    updateDisposition(role, begin, end, state, settled);",
                "+                    begin = deliveryId;",
                "+                    end = begin;",
                "+                }",
                "+                else",
                "+                {",
                "+                    end = deliveryId;",
                "+                }",
                "+            }",
                "+            updateDisposition(role, begin, end, state, settled);",
                "+        }",
                "+    }",
                "+",
                "     public boolean hasCreditToSend()",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index bc18bfb1cf..fe5c4dbad4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -27,2 +27,5 @@ import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedHashSet;",
                " import java.util.LinkedList;",
                "@@ -30,5 +33,6 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Objects;",
                "+import java.util.Set;",
                " import java.util.concurrent.ExecutionException;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -82,2 +86,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final Set<PendingDispositionHolder> _pendingDispositions = new LinkedHashSet<>();",
                "+",
                "     private final PublishingLink _publishingLink = new PublishingLink()",
                "@@ -308,20 +314,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        recordFuture(Futures.immediateFuture(null), new ServerTransaction.Action()",
                "-                        {",
                "-                            @Override",
                "-                            public void postCommit()",
                "-                            {",
                "-                                updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "-                            }",
                "-",
                "-                            @Override",
                "-                            public void onRollback()",
                "-                            {",
                "-                                //TODO: if reject is not supported, check spec behaviour",
                "-                                Rejected rejected = new Rejected();",
                "-                                rejected.setError(new Error(AmqpError.ILLEGAL_STATE, \"Store transaction unexpectedly rolled-back\"));",
                "-                                DeliveryState state = sourceSupportedOutcomes.contains(Rejected.REJECTED_SYMBOL) ? rejected : resultantState;",
                "-                                updateDisposition(delivery.getDeliveryTag(), state, settled);",
                "-                            }",
                "-                        });",
                "+                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(), resultantState, settled));",
                "                     }",
                "@@ -573,2 +562,45 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "         }",
                "+",
                "+        processPendingDispositions();",
                "+    }",
                "+",
                "+    private void processPendingDispositions()",
                "+    {",
                "+        Iterator<PendingDispositionHolder> itr = _pendingDispositions.isEmpty() ? Collections.emptyIterator() : _pendingDispositions.iterator();",
                "+        if (itr.hasNext())",
                "+        {",
                "+            try",
                "+            {",
                "+                PendingDispositionHolder disposition = itr.next();",
                "+                PendingDispositionHolder current = disposition;",
                "+",
                "+                Set<Binary> deliveryTags = new HashSet<>();",
                "+                deliveryTags.add(disposition.getDeliveryTag());",
                "+",
                "+                while (itr.hasNext())",
                "+                {",
                "+                    disposition = itr.next();",
                "+",
                "+                    if (current.isSettled() == disposition.isSettled() &&",
                "+                        Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "+                    {",
                "+                        deliveryTags.add(disposition.getDeliveryTag());",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        updateDispositions(deliveryTags, current.getResultantState(), current.isSettled());",
                "+                        deliveryTags.clear();",
                "+                        current = disposition;",
                "+                    }",
                "+                }",
                "+                if (!deliveryTags.isEmpty())",
                "+                {",
                "+                    updateDispositions(deliveryTags, current.getResultantState(), current.isSettled());",
                "+                }",
                "+            }",
                "+            finally",
                "+            {",
                "+                _pendingDispositions.clear();",
                "+            }",
                "+        }",
                "     }",
                "@@ -629,2 +661,34 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private static class PendingDispositionHolder",
                "+    {",
                "+        private final Binary _deliveryTag;",
                "+        private final DeliveryState _resultantState;",
                "+        private final boolean _settled;",
                "+",
                "+        PendingDispositionHolder(final Binary deliveryTag,",
                "+                                 final DeliveryState resultantState,",
                "+                                 final boolean settled)",
                "+        {",
                "+            _deliveryTag = deliveryTag;",
                "+            _resultantState = resultantState;",
                "+            _settled = settled;",
                "+        }",
                "+",
                "+        Binary getDeliveryTag()",
                "+        {",
                "+            return _deliveryTag;",
                "+        }",
                "+",
                "+        DeliveryState getResultantState()",
                "+        {",
                "+            return _resultantState;",
                "+        }",
                "+",
                "+        boolean isSettled()",
                "+        {",
                "+            return _settled;",
                "+        }",
                "+",
                "+",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16beefd0d408461e472aaa5ad8fc32f1491172fe"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "53cf0201a3d363f3e5f18ef758fd8a6fc3d22b4c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518100802,
            "hunks": 22,
            "message": "QPID-8091: [Broker-J] Report connection close reason as part of operational log message",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "index 7708ce721b..6b2ef1136c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "@@ -213,3 +213,3 @@ public class ConnectionMessages",
                "      * Log a Connection message of the Format:",
                "-     * <pre>CON-1002 : Close</pre>",
                "+     * <pre>CON-1002 : Close[ : {0}]</pre>",
                "      * Optional values are contained in [square brackets] and are numbered",
                "@@ -218,7 +218,35 @@ public class ConnectionMessages",
                "      */",
                "-    public static LogMessage CLOSE()",
                "+    public static LogMessage CLOSE(String param1, boolean opt1)",
                "     {",
                "         String rawMessage = _messages.getString(\"CLOSE\");",
                "+        StringBuffer msg = new StringBuffer();",
                "-        final String message = rawMessage;",
                "+        // Split the formatted message up on the option values so we can",
                "+        // rebuild the message based on the configured options.",
                "+        String[] parts = rawMessage.split(\"\\\\[\");",
                "+        msg.append(parts[0]);",
                "+",
                "+        int end;",
                "+        if (parts.length > 1)",
                "+        {",
                "+",
                "+            // Add Option : : {0}.",
                "+            end = parts[1].indexOf(']');",
                "+            if (opt1)",
                "+            {",
                "+                msg.append(parts[1].substring(0, end));",
                "+            }",
                "+",
                "+            // Use 'end + 1' to remove the ']' from the output",
                "+            msg.append(parts[1].substring(end + 1));",
                "+        }",
                "+",
                "+        rawMessage = msg.toString();",
                "+",
                "+        final Object[] messageArguments = {param1};",
                "+        // Create a new MessageFormat to ensure thread safety.",
                "+        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "+        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "+",
                "+        final String message = formatter.format(messageArguments);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "index 5238559bec..f66a04ca2c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "@@ -21,3 +21,3 @@",
                " OPEN = CON-1001 : Open : Destination : {0}({1}) : Protocol Version : {2}[ : SSL][ : Client ID : {3}][ : Client Version : {4}][ : Client Product : {5}]",
                "-CLOSE = CON-1002 : Close",
                "+CLOSE = CON-1002 : Close[ : {0}]",
                " IDLE_CLOSE = CON-1003 : Closed due to inactivity [: {0}]",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "index 05b5f16172..ee3996ea2c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "@@ -730,4 +730,5 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "             {",
                "+                String closeCause = getCloseCause();",
                "                 getEventLogger().message(isOrderlyClose()",
                "-                                                 ? ConnectionMessages.CLOSE()",
                "+                                                 ? ConnectionMessages.CLOSE(closeCause, closeCause != null)",
                "                                                  : ConnectionMessages.DROPPED_CONNECTION());",
                "@@ -755,2 +756,4 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "+    protected abstract String getCloseCause();",
                "+",
                "     @Override",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "index e09b48af72..3c9fbd1dce 100755",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "@@ -74,2 +74,3 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "             Collections.newSetFromMap(new ConcurrentHashMap<AMQPSession<?,?>, Boolean>());",
                "+    private volatile String _closeCause;",
                "@@ -303,2 +304,3 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "     {",
                "+        _closeCause = description;",
                "         stopConnection();",
                "@@ -362,2 +364,8 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "+    @Override",
                "+    protected String getCloseCause()",
                "+    {",
                "+        return _closeCause;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java",
                "index 0a2e323813..eca6d8a842 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java",
                "@@ -165,2 +165,5 @@ public class AMQPConnection_0_8Impl",
                "     private volatile int _heartBeatDelay;",
                "+    private volatile String _closeCause;",
                "+    private volatile int _closeCauseCode;",
                "+",
                "@@ -488,3 +491,3 @@ public class AMQPConnection_0_8Impl",
                "                 {",
                "-                    channel.close();",
                "+                    channel.close(_closeCauseCode, _closeCause);",
                "                 }",
                "@@ -700,2 +703,12 @@ public class AMQPConnection_0_8Impl",
                "+    @Override",
                "+    protected String getCloseCause()",
                "+    {",
                "+        if (_closeCause == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+        return _closeCauseCode + \" - \" + _closeCause;",
                "+    }",
                "+",
                "     @Override",
                "@@ -796,2 +809,4 @@ public class AMQPConnection_0_8Impl",
                "         }",
                "+        _closeCauseCode = cause;",
                "+        _closeCause = description;",
                "         Action<AMQPConnection_0_8Impl> action = new Action<AMQPConnection_0_8Impl>()",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "index e4401874a8..03954b41af 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "@@ -52,3 +52,2 @@ import java.util.stream.StreamSupport;",
                "-import com.google.common.base.Supplier;",
                " import com.google.common.collect.Iterators;",
                "@@ -61,4 +60,2 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "-import org.apache.qpid.server.logging.EventLogger;",
                "-import org.apache.qpid.server.logging.messages.ChannelMessages;",
                " import org.apache.qpid.server.logging.messages.ConnectionMessages;",
                "@@ -69,3 +66,2 @@ import org.apache.qpid.server.model.NamedAddressSpace;",
                " import org.apache.qpid.server.model.Protocol;",
                "-import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.Transport;",
                "@@ -130,4 +126,2 @@ import org.apache.qpid.server.transport.ProtocolEngine;",
                " import org.apache.qpid.server.transport.ServerNetworkConnection;",
                "-import org.apache.qpid.server.transport.TransactionTimeoutTicker;",
                "-import org.apache.qpid.server.transport.network.Ticker;",
                " import org.apache.qpid.server.transport.util.Functions;",
                "@@ -138,3 +132,2 @@ import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                " import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "-import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -245,2 +238,3 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "     private volatile boolean _sendSaslFinalChallengeAsChallenge;",
                "+    private volatile String _closeCause;",
                "@@ -1174,2 +1168,3 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "     {",
                "+        _closeCause = error.getDescription();",
                "         Close close = new Close();",
                "@@ -1711,2 +1706,8 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "+    @Override",
                "+    protected String getCloseCause()",
                "+    {",
                "+        return _closeCause;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f84a341c9f05ad53c1a86a19dd55509e45423a51"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQPConnection_0_8Impl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a9667120ed7a64264a50c80a2938a6c73c3f93f2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518106068,
            "hunks": 7,
            "message": "QPID-8091: [Broker-J][AMQP 0-10] Close 0-10 connection on transaction timeout",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "index 3c9fbd1dce..055f93567f 100755",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "@@ -74,4 +74,2 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "             Collections.newSetFromMap(new ConcurrentHashMap<AMQPSession<?,?>, Boolean>());",
                "-    private volatile String _closeCause;",
                "-",
                "@@ -304,3 +302,3 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "     {",
                "-        _closeCause = description;",
                "+        _connection.setConnectionCloseCause(reason, description);",
                "         stopConnection();",
                "@@ -367,3 +365,8 @@ public class AMQPConnection_0_10Impl extends AbstractAMQPConnection<AMQPConnecti",
                "     {",
                "-        return _closeCause;",
                "+        String connectionCloseMessage = _connection.getConnectionCloseMessage();",
                "+        if (connectionCloseMessage == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+        return _connection.getConnectionCloseCode() + \" - \" + connectionCloseMessage;",
                "     }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "index 8032b3555c..1166058268 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "@@ -108,2 +108,4 @@ public class ServerConnection extends ConnectionInvoker",
                "     private int _heartBeatDelay;",
                "+    private volatile int _connectionCloseCode;",
                "+    private volatile String _connectionCloseMessage;",
                "@@ -876,2 +878,29 @@ public class ServerConnection extends ConnectionInvoker",
                "+    void setConnectionCloseCause(final AMQPConnection.CloseReason reason, final String description)",
                "+    {",
                "+        final int cause;",
                "+        switch (reason)",
                "+        {",
                "+            case MANAGEMENT:",
                "+                cause = ErrorCodes.CONNECTION_FORCED;",
                "+                break;",
                "+            case TRANSACTION_TIMEOUT:",
                "+                cause = ErrorCodes.RESOURCE_ERROR;",
                "+                break;",
                "+            default:",
                "+                cause = ErrorCodes.INTERNAL_ERROR;",
                "+        }",
                "+        _connectionCloseCode = cause;",
                "+        _connectionCloseMessage = description;",
                "+    }",
                "+",
                "+    int getConnectionCloseCode()",
                "+    {",
                "+        return _connectionCloseCode;",
                "+    }",
                "+",
                "+    String getConnectionCloseMessage()",
                "+    {",
                "+        return _connectionCloseMessage;",
                "+    }",
                " }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index 015394eec2..32a2474a7d 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -1170,2 +1170,7 @@ public class ServerSession extends SessionInvoker",
                "         LogMessage operationalLoggingMessage = _forcedCloseLogMessage.get();",
                "+        if (operationalLoggingMessage == null && getConnection().getConnectionCloseMessage() != null)",
                "+        {",
                "+            operationalLoggingMessage = ChannelMessages.CLOSE_FORCED(getConnection().getConnectionCloseCode(),",
                "+                                                                     getConnection().getConnectionCloseMessage());",
                "+        }",
                "         if (operationalLoggingMessage == null)",
                "@@ -1256,4 +1261,3 @@ public class ServerSession extends SessionInvoker",
                "         amqpConnection.registerTransactionTickers(_transaction,",
                "-                                                  message -> amqpConnection.closeSessionAsync(_modelObject,",
                "-                                                                                              AMQPConnection.CloseReason.TRANSACTION_TIMEOUT,",
                "+                                                  message -> amqpConnection.sendConnectionCloseAsync(AMQPConnection.CloseReason.TRANSACTION_TIMEOUT,",
                "                                                                                               (String) message),"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ee099a987562e9a98074fbd6aa4698af6796e49"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/AMQPConnection_0_10Impl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aea2d43c5ed6ab921b1b3eefe43ece96125c9d5b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516034536,
            "hunks": 1,
            "message": "QPID-7948: [Broker-J] [AMQP 0-9-1] [Publisher Confirms] Ensure that unroutable non-mandatory messages are acknowledged (cherry picked from commit fb98e76e86656799a9e16e6f09a6402b01bd2f2a)",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index ffe2c8d738..6418ea9a9d 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -463,2 +463,8 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                                 {",
                "+                                    if (_confirmOnPublish)",
                "+                                    {",
                "+                                        _connection.writeFrame(new AMQFrame(_channelId,",
                "+                                                                            new BasicAckBody(_confirmedMessageCounter,",
                "+                                                                                             false)));",
                "+                                    }",
                "                                     message(ExchangeMessages.DISCARDMSG(exchangeName, routingKey));"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7948": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fb98e76e86656799a9e16e6f09a6402b01bd2f2a"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: publish, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7948",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "876bcb7af979dbf6a4c128d762d2fc507e1580f2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518181001,
            "hunks": 14,
            "message": "QPID-8091: [Broker-J] Transaction timeout - move idle/open warning message from channel to connection",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ChannelMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ChannelMessages.java",
                "index 2acac26854..9907a4cb08 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ChannelMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ChannelMessages.java",
                "@@ -75,4 +75,2 @@ public class ChannelMessages",
                "     public static final String FLOW_REMOVED_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"channel.flow_removed\";",
                "-    public static final String IDLE_TXN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"channel.idle_txn\";",
                "-    public static final String OPEN_TXN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"channel.open_txn\";",
                "     public static final String OPERATION_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"channel.operation\";",
                "@@ -93,4 +91,2 @@ public class ChannelMessages",
                "         LoggerFactory.getLogger(FLOW_REMOVED_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(IDLE_TXN_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(OPEN_TXN_LOG_HIERARCHY);",
                "         LoggerFactory.getLogger(OPERATION_LOG_HIERARCHY);",
                "@@ -681,122 +677,2 @@ public class ChannelMessages",
                "-    /**",
                "-     * Log a Channel message of the Format:",
                "-     * <pre>CHN-1008 : Idle Transaction : {0,number} ms</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage IDLE_TXN(Number param1)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"IDLE_TXN\");",
                "-",
                "-        final Object[] messageArguments = {param1};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return IDLE_TXN_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "-    /**",
                "-     * Log a Channel message of the Format:",
                "-     * <pre>CHN-1007 : Open Transaction : {0,number} ms</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage OPEN_TXN(Number param1)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"OPEN_TXN\");",
                "-",
                "-        final Object[] messageArguments = {param1};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return OPEN_TXN_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "     /**",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Channel_logmessages.properties b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Channel_logmessages.properties",
                "index fda86b7852..cfef211880 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Channel_logmessages.properties",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Channel_logmessages.properties",
                "@@ -32,6 +32,2 @@ FLOW_ENFORCED = CHN-1005 : Flow Control Enforced (Queue {0})",
                " FLOW_REMOVED = CHN-1006 : Flow Control Removed",
                "-# Channel Transactions",
                "-# 0 - time in milliseconds",
                "-OPEN_TXN = CHN-1007 : Open Transaction : {0,number} ms",
                "-IDLE_TXN = CHN-1008 : Idle Transaction : {0,number} ms",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "index 6b2ef1136c..7b5d40483f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "@@ -70,2 +70,3 @@ public class ConnectionMessages",
                "     public static final String IDLE_CLOSE_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.idle_close\";",
                "+    public static final String IDLE_TXN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.idle_txn\";",
                "     public static final String LARGE_TRANSACTION_WARN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.large_transaction_warn\";",
                "@@ -73,2 +74,3 @@ public class ConnectionMessages",
                "     public static final String OPEN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.open\";",
                "+    public static final String OPEN_TXN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.open_txn\";",
                "     public static final String OPERATION_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"connection.operation\";",
                "@@ -83,2 +85,3 @@ public class ConnectionMessages",
                "         LoggerFactory.getLogger(IDLE_CLOSE_LOG_HIERARCHY);",
                "+        LoggerFactory.getLogger(IDLE_TXN_LOG_HIERARCHY);",
                "         LoggerFactory.getLogger(LARGE_TRANSACTION_WARN_LOG_HIERARCHY);",
                "@@ -86,2 +89,3 @@ public class ConnectionMessages",
                "         LoggerFactory.getLogger(OPEN_LOG_HIERARCHY);",
                "+        LoggerFactory.getLogger(OPEN_TXN_LOG_HIERARCHY);",
                "         LoggerFactory.getLogger(OPERATION_LOG_HIERARCHY);",
                "@@ -432,2 +436,62 @@ public class ConnectionMessages",
                "+    /**",
                "+     * Log a Connection message of the Format:",
                "+     * <pre>CHN-1011 : Idle Transaction : {0,number} ms</pre>",
                "+     * Optional values are contained in [square brackets] and are numbered",
                "+     * sequentially in the method call.",
                "+     *",
                "+     */",
                "+    public static LogMessage IDLE_TXN(Number param1)",
                "+    {",
                "+        String rawMessage = _messages.getString(\"IDLE_TXN\");",
                "+",
                "+        final Object[] messageArguments = {param1};",
                "+        // Create a new MessageFormat to ensure thread safety.",
                "+        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "+        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "+",
                "+        final String message = formatter.format(messageArguments);",
                "+",
                "+        return new LogMessage()",
                "+        {",
                "+            @Override",
                "+            public String toString()",
                "+            {",
                "+                return message;",
                "+            }",
                "+",
                "+            @Override",
                "+            public String getLogHierarchy()",
                "+            {",
                "+                return IDLE_TXN_LOG_HIERARCHY;",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean equals(final Object o)",
                "+            {",
                "+                if (this == o)",
                "+                {",
                "+                    return true;",
                "+                }",
                "+                if (o == null || getClass() != o.getClass())",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                final LogMessage that = (LogMessage) o;",
                "+",
                "+                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "+",
                "+            }",
                "+",
                "+            @Override",
                "+            public int hashCode()",
                "+            {",
                "+                int result = toString().hashCode();",
                "+                result = 31 * result + getLogHierarchy().hashCode();",
                "+                return result;",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "     /**",
                "@@ -660,2 +724,62 @@ public class ConnectionMessages",
                "+    /**",
                "+     * Log a Connection message of the Format:",
                "+     * <pre>CON-1010 : Open Transaction : {0,number} ms</pre>",
                "+     * Optional values are contained in [square brackets] and are numbered",
                "+     * sequentially in the method call.",
                "+     *",
                "+     */",
                "+    public static LogMessage OPEN_TXN(Number param1)",
                "+    {",
                "+        String rawMessage = _messages.getString(\"OPEN_TXN\");",
                "+",
                "+        final Object[] messageArguments = {param1};",
                "+        // Create a new MessageFormat to ensure thread safety.",
                "+        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "+        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "+",
                "+        final String message = formatter.format(messageArguments);",
                "+",
                "+        return new LogMessage()",
                "+        {",
                "+            @Override",
                "+            public String toString()",
                "+            {",
                "+                return message;",
                "+            }",
                "+",
                "+            @Override",
                "+            public String getLogHierarchy()",
                "+            {",
                "+                return OPEN_TXN_LOG_HIERARCHY;",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean equals(final Object o)",
                "+            {",
                "+                if (this == o)",
                "+                {",
                "+                    return true;",
                "+                }",
                "+                if (o == null || getClass() != o.getClass())",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                final LogMessage that = (LogMessage) o;",
                "+",
                "+                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "+",
                "+            }",
                "+",
                "+            @Override",
                "+            public int hashCode()",
                "+            {",
                "+                int result = toString().hashCode();",
                "+                result = 31 * result + getLogHierarchy().hashCode();",
                "+                return result;",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "     /**",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "index f66a04ca2c..a2c6e6a6cf 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "@@ -30,2 +30,3 @@ OPERATION = CON-1008 : Operation : {0}",
                " LARGE_TRANSACTION_WARN = CON-1009 : Uncommitted transaction(s) contains {0,number} bytes of incoming message data exceeding {1,number} bytes limit. Messages will be flowed to disk.",
                "-",
                "+OPEN_TXN = CON-1010 : Open Transaction : {0,number} ms",
                "+IDLE_TXN = CHN-1011 : Idle Transaction : {0,number} ms",
                "\\ No newline at end of file",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "index ee3996ea2c..5887a70f36 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "@@ -55,3 +55,2 @@ import org.apache.qpid.server.logging.EventLoggerProvider;",
                " import org.apache.qpid.server.logging.LogSubject;",
                "-import org.apache.qpid.server.logging.messages.ChannelMessages;",
                " import org.apache.qpid.server.logging.messages.ConnectionMessages;",
                "@@ -905,3 +904,3 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "                         notificationRepeatPeriod, serverTransaction::getTransactionStartTime,",
                "-                        age -> eventLogger.message(getLogSubject(), ChannelMessages.OPEN_TXN(age))",
                "+                        age -> eventLogger.message(getLogSubject(), ConnectionMessages.OPEN_TXN(age))",
                "                 ));",
                "@@ -920,3 +919,3 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "                         notificationRepeatPeriod, serverTransaction::getTransactionUpdateTime,",
                "-                        age -> eventLogger.message(getLogSubject(), ChannelMessages.IDLE_TXN(age))",
                "+                        age -> eventLogger.message(getLogSubject(), ConnectionMessages.IDLE_TXN(age))",
                "                 ));"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/ChannelMessages.java",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/Channel_logmessages.properties",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/ConnectionMessages.java",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/Connection_logmessages.properties",
                "broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2cd03738c4ff09f8306678e89ac061032012c26b"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f608040edb5089a3813f3cb116f59803cef4d171",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516716251,
            "hunks": 14,
            "message": "QPID-8032 : [Broker-J][AMQP 1.0] Use asynchronous auto commit transaction for non-transactional message dequeuing (cherry picked from commit a1ed9978f756268fc86de8af02e5d7fad13a65a2)",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "index fec4c6da1d..4798815200 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "@@ -60,3 +60,2 @@ import org.apache.qpid.server.transport.AMQPConnection;",
                " import org.apache.qpid.server.transport.ProtocolEngine;",
                "-import org.apache.qpid.server.txn.AutoCommitTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -429,3 +428,3 @@ class ConsumerTarget_1_0 extends AbstractConsumerTarget<ConsumerTarget_1_0>",
                "                 outcome = (Outcome) state;",
                "-                txn = new AutoCommitTransaction(getSession().getConnection().getAddressSpace().getMessageStore());",
                "+                txn = _linkEndpoint.getAsyncAutoCommitTransaction();",
                "             }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index ee1f800c02..4ab25a77eb 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -33,4 +33,6 @@ import java.util.Map;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                " import java.util.regex.Pattern;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                " import org.slf4j.Logger;",
                "@@ -78,2 +80,4 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Role;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -85,2 +89,3 @@ import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                " public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+        implements AsyncAutoCommitTransaction.FutureRecorder",
                " {",
                "@@ -93,2 +98,4 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "     private final Map<Binary, OutgoingDelivery> _unsettled = new ConcurrentHashMap<>();",
                "+    private final AsyncAutoCommitTransaction _asyncAutoCommitTransaction;",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();",
                "@@ -112,2 +119,4 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "         setCapabilities(Collections.singletonList(AMQPConnection_1_0.SHARED_SUBSCRIPTIONS));",
                "+        _asyncAutoCommitTransaction =",
                "+                new AsyncAutoCommitTransaction(getSession().getConnection().getAddressSpace().getMessageStore(), this);",
                "     }",
                "@@ -604,2 +613,7 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+    AsyncAutoCommitTransaction getAsyncAutoCommitTransaction()",
                "+    {",
                "+        return _asyncAutoCommitTransaction;",
                "+    }",
                "+",
                "     public boolean hasCreditToSend()",
                "@@ -911,2 +925,13 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "     {",
                "+        AsyncCommand cmd;",
                "+        while((cmd = _unfinishedCommandsQueue.poll()) != null)",
                "+        {",
                "+            cmd.complete();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void recordFuture(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _unfinishedCommandsQueue.add(new AsyncCommand(future, action));",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 2d2b2061c3..91ab75bafb 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -30,3 +30,2 @@ import java.util.Iterator;",
                " import java.util.LinkedHashSet;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -35,2 +34,3 @@ import java.util.Objects;",
                " import java.util.Set;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                "@@ -83,2 +83,6 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();",
                "+    private final Set<PendingDispositionHolder> _pendingDispositions =",
                "+            Collections.synchronizedSet(new LinkedHashSet<>());",
                "+",
                "     private volatile ReceivingDestination _receivingDestination;",
                "@@ -86,6 +90,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<>();",
                "-",
                "-    private final Set<PendingDispositionHolder> _pendingDispositions = new LinkedHashSet<>();",
                "-",
                "     private final PublishingLink _publishingLink = new PublishingLink()"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a1ed9978f756268fc86de8af02e5d7fad13a65a2"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9a762859553d50d0cc52cf308e3da199c0953698",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514389764,
            "hunks": 15,
            "message": "QPID-8060: [Broker-J][AMQP 0-8..0-10] Address review comments Cherry picked from master efb7ec0",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 1c071780da..6227384467 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -1057,5 +1057,3 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new UnknownAlternateBindingException(String.format(",
                "-                        \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                throw new UnknownAlternateBindingException(destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index ceb9610de9..09ec51c203 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -3537,5 +3537,3 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new UnknownAlternateBindingException(String.format(",
                "-                        \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                throw new UnknownAlternateBindingException(destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "index c3f88e6a1c..0d3e581d55 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "@@ -26,5 +26,13 @@ public class UnknownAlternateBindingException extends IllegalConfigurationExcept",
                " {",
                "-    public UnknownAlternateBindingException(final String message)",
                "+    private final String _alternateBindingName;",
                "+",
                "+    public UnknownAlternateBindingException(final String alternateBindingName)",
                "+    {",
                "+        super(String.format(\"Alternate binding destination '%s' is not found.\", alternateBindingName));",
                "+        _alternateBindingName = alternateBindingName;",
                "+    }",
                "+",
                "+    public String getAlternateBindingName()",
                "     {",
                "-        super(message);",
                "+        return _alternateBindingName;",
                "     }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index 5af1cef2d5..1ef431c7fc 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -954,7 +954,8 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch(UnknownAlternateBindingException e)",
                "+                catch (UnknownAlternateBindingException e)",
                "                 {",
                "-",
                "-                    exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                                                                \"Unknown alternate exchange \" + alternateExchangeName);",
                "+                    exception(session,",
                "+                              method,",
                "+                              ExecutionErrorCode.NOT_FOUND,",
                "+                              String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName()));",
                "                 }",
                "@@ -1542,4 +1543,2 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "         {",
                "-",
                "-            final String alternateExchangeName = method.getAlternateExchange();",
                "             try",
                "@@ -1548,3 +1547,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                                                                                                      method.getArguments());",
                "-",
                "+                final String alternateExchangeName = method.getAlternateExchange();",
                "                 if (method.hasAlternateExchange() && !nameNullOrEmpty(alternateExchangeName))",
                "@@ -1605,4 +1604,6 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             {",
                "-                exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                          \"Unknown alternate exchange \" + alternateExchangeName);",
                "+                exception(session,",
                "+                          method,",
                "+                          ExecutionErrorCode.NOT_FOUND,",
                "+                          String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName()));",
                "             }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index d942abd721..a12b483d6e 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -2644,3 +2644,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 String typeString = type == null ? null : type.toString();",
                "-                String alternateExchangeName = null;",
                "                 try",
                "@@ -2662,3 +2661,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                     {",
                "-                        alternateExchangeName = String.valueOf(alternateExchange);",
                "+                        String alternateExchangeName = String.valueOf(alternateExchange);",
                "                         validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "@@ -2726,3 +2725,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    final String message = String.format(\"Unknown alternate exchange '%s'\", alternateExchangeName);",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName());",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -3004,3 +3003,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-            String alternateExchangeName = null;",
                "             try",
                "@@ -3012,3 +3010,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    alternateExchangeName = String.valueOf(alternateExchange);",
                "+                    String alternateExchangeName = String.valueOf(alternateExchange);",
                "                     validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "@@ -3133,3 +3131,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             {",
                "-                final String message = String.format(\"Unknown alternate exchange: '%s'\", alternateExchangeName);",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getAlternateBindingName());",
                "                 _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89259c2de1aa1df1f582e0012c881cbb8cf61e00",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512642781,
            "hunks": 10,
            "message": "QPID-8061: [Broker-J] [AMQP 0-8..0-9-1] Handle unknown alternate exchange on exchange declaration Cherry picked from master 38c04f8.",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 897878ddc6..b3714e9667 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -73,2 +73,3 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "+import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.LinkModel;",
                "@@ -1056,5 +1057,5 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new IllegalConfigurationException(String.format(",
                "+                throw new UnknownConfiguredObjectException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "index f35a68a49c..f460df734b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "@@ -30,5 +30,7 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "+    public UnknownConfiguredObjectException(String exceptionMessage,",
                "+                                            final Class<? extends ConfiguredObject> category,",
                "+                                            final String name)",
                "     {",
                "-        super(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\");",
                "+        super(exceptionMessage);",
                "         _category = category;",
                "@@ -37,2 +39,9 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "+    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "+    {",
                "+        this(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\",",
                "+             category,",
                "+             name);",
                "+    }",
                "+",
                "     public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final UUID id)",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index ab5581c64c..9fd9b52b57 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -988,3 +988,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch (IllegalConfigurationException e)",
                "+                catch (IllegalArgumentException | IllegalConfigurationException e)",
                "                 {",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index d2f071e468..5eef2535d6 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -85,3 +85,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                "@@ -2725,7 +2724,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    // note - since 0-8/9/9-1 can't set the alt. exchange this exception should never occur",
                "-                    final String message = \"Unknown alternate exchange \"",
                "-                                           + (e.getName() != null",
                "-                            ? \"name: '\" + e.getName() + \"'\"",
                "-                            : \"id: \" + e.getId());",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getName());",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -2733,3 +2728,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 }",
                "-                catch (IllegalArgumentException e)",
                "+                catch (IllegalArgumentException | IllegalConfigurationException e)",
                "                 {"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8061": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8061",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51d30eac88826e444350cbbe23992f429376a67c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511284602,
            "hunks": 7,
            "message": "QPID-8038: [Broker-J] Cherry pick of the framework and AMQP 1.0 changes from ff2980e",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "index dd59757c52..219c423eb1 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "@@ -25,3 +25,5 @@ import java.net.InetSocketAddress;",
                "-public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "+",
                "+public class FrameTransport extends AbstractFrameTransport<Interaction>",
                " {",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 4aad6ee838..b2f8147af2 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -79,5 +79,6 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.SenderSettleMode;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                " import org.apache.qpid.tests.protocol.Response;",
                "-public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                "+public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "@@ -179,8 +180,2 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "-    @Override",
                "-    protected Interaction getInteraction()",
                "-    {",
                "-        return this;",
                "-    }",
                "-",
                "     //////////",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "new file mode 100644",
                "index 0000000000..cad8415d6b",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "@@ -0,0 +1,175 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.anyOf;",
                "+import static org.hamcrest.Matchers.instanceOf;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.hamcrest.Matchers.nullValue;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.util.concurrent.JdkFutureAdapters;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelInitializer;",
                "+import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.ChannelPromise;",
                "+import io.netty.channel.EventLoopGroup;",
                "+import io.netty.channel.nio.NioEventLoopGroup;",
                "+import io.netty.channel.socket.SocketChannel;",
                "+import io.netty.channel.socket.nio.NioSocketChannel;",
                "+",
                "+public abstract class AbstractFrameTransport<I extends AbstractInteraction<I>> implements AutoCloseable",
                "+{",
                "+    static final long RESPONSE_TIMEOUT =",
                "+            Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\", 6000);",
                "+    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "+",
                "+    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "+    private final EventLoopGroup _workerGroup;",
                "+    private final InetSocketAddress _brokerAddress;",
                "+    private final InputHandler _inputHandler;",
                "+    private final OutputHandler _outputHandler;",
                "+",
                "+    private volatile Channel _channel;",
                "+    private volatile boolean _channelClosedSeen = false;",
                "+",
                "+    public AbstractFrameTransport(final InetSocketAddress brokerAddress, InputDecoder inputDecoder, OutputEncoder outputEncoder)",
                "+    {",
                "+        _brokerAddress = brokerAddress;",
                "+        _inputHandler = new InputHandler(_queue, inputDecoder);",
                "+        _outputHandler = new OutputHandler(outputEncoder);",
                "+        _workerGroup = new NioEventLoopGroup();",
                "+    }",
                "+",
                "+    public InetSocketAddress getBrokerAddress()",
                "+    {",
                "+        return _brokerAddress;",
                "+    }",
                "+",
                "+    public AbstractFrameTransport<I> connect()",
                "+    {",
                "+        try",
                "+        {",
                "+            Bootstrap b = new Bootstrap();",
                "+            b.group(_workerGroup);",
                "+            b.channel(NioSocketChannel.class);",
                "+            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "+            b.handler(new ChannelInitializer<SocketChannel>()",
                "+            {",
                "+                @Override",
                "+                public void initChannel(SocketChannel ch) throws Exception",
                "+                {",
                "+                    ChannelPipeline pipeline = ch.pipeline();",
                "+                    buildInputOutputPipeline(pipeline);",
                "+                }",
                "+            });",
                "+",
                "+            _channel = b.connect(_brokerAddress).sync().channel();",
                "+            _channel.closeFuture().addListener(future ->",
                "+                                               {",
                "+                                                   _channelClosedSeen = true;",
                "+                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "+                                               });",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "+    {",
                "+        pipeline.addLast(_inputHandler).addLast(_outputHandler);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws Exception",
                "+    {",
                "+        try",
                "+        {",
                "+            if (_channel != null)",
                "+            {",
                "+                _channel.disconnect().sync();",
                "+                _channel.close().sync();",
                "+                _channel = null;",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "+        }",
                "+    }",
                "+",
                "+    ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(bytes);",
                "+        _channel.write(buffer, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendPerformative(final Object data) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        _channel.write(data, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    <T extends Response<?>> T getNextResponse() throws Exception",
                "+    {",
                "+        return (T) _queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+    }",
                "+",
                "+    public void assertNoMoreResponses() throws Exception",
                "+    {",
                "+        Response response = getNextResponse();",
                "+        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "+    }",
                "+",
                "+    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "+    {",
                "+        assertNoMoreResponses();",
                "+        assertThat(_channelClosedSeen, is(true));",
                "+    }",
                "+",
                "+    public void flush()",
                "+    {",
                "+        _channel.flush();",
                "+    }",
                "+",
                "+    public abstract byte[] getProtocolHeader();",
                "+",
                "+    public abstract I newInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "new file mode 100644",
                "index 0000000000..4b41ca9221",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "@@ -0,0 +1,150 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static com.google.common.util.concurrent.Futures.allAsList;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+public abstract class AbstractInteraction<I extends AbstractInteraction<I>>",
                "+{",
                "+    private final AbstractFrameTransport<I> _transport;",
                "+    private ListenableFuture<?> _latestFuture;",
                "+    private Response<?> _latestResponse;",
                "+",
                "+    public AbstractInteraction(final AbstractFrameTransport<I> frameTransport)",
                "+    {",
                "+        _transport = frameTransport;",
                "+    }",
                "+",
                "+    public I consumeResponse(final Class<?>... responseTypes) throws Exception",
                "+    {",
                "+        sync();",
                "+        _latestResponse = getNextResponse();",
                "+        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "+        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "+            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        {",
                "+            return getInteraction();",
                "+        }",
                "+        acceptableResponseClasses.remove(null);",
                "+        if (_latestResponse != null)",
                "+        {",
                "+            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            {",
                "+                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+                {",
                "+                    return getInteraction();",
                "+                }",
                "+            }",
                "+        }",
                "+        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "+                                                      acceptableResponseClasses,",
                "+                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "+    }",
                "+",
                "+    protected Response<?> getNextResponse() throws Exception",
                "+    {",
                "+        return _transport.getNextResponse();",
                "+    }",
                "+",
                "+    public I sync() throws InterruptedException, ExecutionException, TimeoutException",
                "+    {",
                "+        _transport.flush();",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture.get(AbstractFrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+            _latestFuture = null;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    public Response<?> getLatestResponse() throws Exception",
                "+    {",
                "+        return _latestResponse;",
                "+    }",
                "+",
                "+    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "+    {",
                "+        if (_latestResponse.getBody() == null)",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getClass()));",
                "+        }",
                "+",
                "+        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getBody()));",
                "+        }",
                "+",
                "+        return (T) _latestResponse.getBody();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody) throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return future;",
                "+    }",
                "+",
                "+    public I negotiateProtocol() throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendProtocolHeader(getProtocolHeader());",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    protected AbstractFrameTransport getTransport()",
                "+    {",
                "+        return _transport;",
                "+    }",
                "+",
                "+    protected abstract byte[] getProtocolHeader();",
                "+",
                "+    private I getInteraction()",
                "+    {",
                "+        return (I) this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "new file mode 100644",
                "index 0000000000..b7010232af",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+public class ChannelClosedResponse implements Response<ChannelClosedResponse>",
                "+{",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"ChannelClosed\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public ChannelClosedResponse getBody()",
                "+    {",
                "+        return this;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f03f718f98545f15859197f9a1f78f76a985e0a3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516033867,
            "hunks": 2,
            "message": "QPID-8076: [Broker-J] [AMQP 0-9-1] [Publisher Confirms] Delay sending publish confirms until underlying store transaction completes.",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index a12b483d6e..2c4e88a110 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -47,2 +47,3 @@ import com.google.common.base.Function;",
                " import com.google.common.collect.Collections2;",
                "+import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -484,5 +485,25 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                             {",
                "-                                BasicAckBody responseBody = _connection.getMethodRegistry()",
                "-                                                                       .createBasicAckBody(_confirmedMessageCounter, false);",
                "-                                _connection.writeFrame(responseBody.generateFrame(_channelId));",
                "+                                recordFuture(Futures.immediateFuture(null),",
                "+                                             new ServerTransaction.Action()",
                "+                                             {",
                "+                                                 private final long _deliveryTag = _confirmedMessageCounter;",
                "+",
                "+                                                 @Override",
                "+                                                 public void postCommit()",
                "+                                                 {",
                "+                                                     BasicAckBody body = _connection.getMethodRegistry()",
                "+                                                                                    .createBasicAckBody(",
                "+                                                                                            _deliveryTag, false);",
                "+                                                     _connection.writeFrame(body.generateFrame(_channelId));",
                "+                                                 }",
                "+",
                "+                                                 @Override",
                "+                                                 public void onRollback()",
                "+                                                 {",
                "+                                                     final BasicNackBody body = new BasicNackBody(_deliveryTag,",
                "+                                                                                                  false,",
                "+                                                                                                  false);",
                "+                                                     _connection.writeFrame(new AMQFrame(_channelId, body));",
                "+                                                 }",
                "+                                             });",
                "                             }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8076": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: publish, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8076",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ce345a7bb08a2c257155583e11055d1935db1e3d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512643062,
            "hunks": 4,
            "message": "QPID-8060: [Broker-J] [AMQP 0-8..0-9-1] Handle unknown alternate exchange on queue declaration Cherry picked from master 268f3fb",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index ad400494d0..39584d68b1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -3536,5 +3536,5 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new IllegalConfigurationException(String.format(",
                "+                throw new UnknownConfiguredObjectException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "             }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index 9fd9b52b57..ccaee39f7a 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -1605,3 +1605,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             }",
                "-            catch (IllegalConfigurationException e)",
                "+            catch (IllegalArgumentException | IllegalConfigurationException e)",
                "             {",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 5eef2535d6..07d0f918ba 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -3128,3 +3128,12 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             }",
                "-",
                "+            catch (UnknownConfiguredObjectException e)",
                "+            {",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getName());",
                "+                _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "+            }",
                "+            catch (IllegalArgumentException | IllegalConfigurationException e)",
                "+            {",
                "+                String message = String.format(\"Error creating queue '%s': %s\", queueName, e.getMessage());",
                "+                _connection.sendConnectionClose(ErrorCodes.COMMAND_INVALID, message, getChannelId());",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "deab4580b7a876cfe16d35fe40804ac19e277cfc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510968689,
            "hunks": 49,
            "message": "QPID-8038: [Broker-J][System Tests] Introduce new module 'protocol-tests-core' and move test common functionality into it Cherry picked from 06e53d7 with manual resolutions.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1262002623..1287501125 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -198,2 +198,3 @@",
                "     <module>systests/qpid-systests-jms_2.0</module>",
                "+    <module>systests/protocol-tests-core</module>",
                "     <module>systests/protocol-tests-amqp-1-0</module>",
                "@@ -409,2 +410,14 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-core</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-amqp-1-0</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 56fc1f7f39..c392cf77ed 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -56,2 +56,7 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>protocol-tests-core</artifactId>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "@@ -96,33 +101,4 @@",
                "             <scope>test</scope>",
                "-            <optional>true</optional>",
                "         </dependency>",
                "-        <dependency>",
                "-            <groupId>com.google.guava</groupId>",
                "-            <artifactId>guava</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-buffer</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-common</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-codec-http</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-handler</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-transport</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>org.hamcrest</groupId>",
                "-            <artifactId>hamcrest-core</artifactId>",
                "-        </dependency>",
                "         <dependency>",
                "@@ -135,2 +111,3 @@",
                "         </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "new file mode 100644",
                "index 0000000000..4dc06cbaa3",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -0,0 +1,276 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.List;",
                "+import java.util.Queue;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.ConnectionHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.codec.ValueHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.FrameHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.UnsignedShort;",
                "+import org.apache.qpid.server.protocol.v1_0.type.codec.AMQPDescribedTypeRegistry;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslChallenge;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslCode;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslInit;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslMechanisms;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslOutcome;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslResponse;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Attach;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Begin;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.ChannelFrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Close;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Detach;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Disposition;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.End;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Flow;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Open;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.HeaderResponse;",
                "+import org.apache.qpid.tests.protocol.InputDecoder;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class FrameDecoder implements InputDecoder",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(FrameDecoder.class);",
                "+    private static final AMQPDescribedTypeRegistry TYPE_REGISTRY = AMQPDescribedTypeRegistry.newInstance()",
                "+                                                                                            .registerTransportLayer()",
                "+                                                                                            .registerMessagingLayer()",
                "+                                                                                            .registerTransactionLayer()",
                "+                                                                                            .registerSecurityLayer()",
                "+                                                                                            .registerExtensionSoleconnLayer();",
                "+    private final MyConnectionHandler _connectionHandler;",
                "+    private volatile FrameHandler _frameHandler;",
                "+",
                "+    private enum ParsingState",
                "+    {",
                "+        HEADER,",
                "+        PERFORMATIVES;",
                "+    }",
                "+",
                "+    private final ValueHandler _valueHandler;",
                "+",
                "+    private volatile ParsingState _state = ParsingState.HEADER;",
                "+",
                "+    public FrameDecoder(final boolean isSasl)",
                "+    {",
                "+        _valueHandler = new ValueHandler(TYPE_REGISTRY);",
                "+        _connectionHandler = new MyConnectionHandler();",
                "+        _frameHandler = new FrameHandler(_valueHandler, _connectionHandler, isSasl);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<Response<?>> decode(final ByteBuffer inputBuffer)",
                "+    {",
                "+        List<Response<?>> responses = new ArrayList<>();",
                "+        QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(inputBuffer);",
                "+        switch(_state)",
                "+        {",
                "+            case HEADER:",
                "+                if (inputBuffer.remaining() >= 8)",
                "+                {",
                "+                    byte[] header = new byte[8];",
                "+                    inputBuffer.get(header);",
                "+                    responses.add(new HeaderResponse(header));",
                "+                    _state = ParsingState.PERFORMATIVES;",
                "+                    _frameHandler.parse(qpidByteBuffer);",
                "+                }",
                "+                break;",
                "+            case PERFORMATIVES:",
                "+                _frameHandler.parse(qpidByteBuffer);",
                "+                break;",
                "+            default:",
                "+                throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+        }",
                "+",
                "+        Response<?> r;",
                "+        while((r = _connectionHandler._responseQueue.poll())!=null)",
                "+        {",
                "+            responses.add(r);",
                "+        }",
                "+        return responses;",
                "+    }",
                "+",
                "+    private void resetInputHandlerAfterSaslOutcome()",
                "+    {",
                "+        _state = ParsingState.HEADER;",
                "+        _frameHandler = new FrameHandler(_valueHandler, _connectionHandler, false);",
                "+    }",
                "+",
                "+    private class MyConnectionHandler implements ConnectionHandler",
                "+    {",
                "+        private volatile int _frameSize = 512;",
                "+        private Queue<Response<?>> _responseQueue = new ConcurrentLinkedQueue<>();",
                "+",
                "+        @Override",
                "+        public void receiveOpen(final int channel, final Open close)",
                "+        {",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveClose(final int channel, final Close close)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveBegin(final int channel, final Begin begin)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveEnd(final int channel, final End end)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveAttach(final int channel, final Attach attach)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveDetach(final int channel, final Detach detach)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveTransfer(final int channel, final Transfer transfer)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveDisposition(final int channel, final Disposition disposition)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveFlow(final int channel, final Flow flow)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getMaxFrameSize()",
                "+        {",
                "+            return _frameSize;",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getChannelMax()",
                "+        {",
                "+            return UnsignedShort.MAX_VALUE.intValue();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void handleError(final Error parsingError)",
                "+        {",
                "+            LOGGER.error(\"Unexpected error {}\", parsingError);",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean closedForInput()",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receive(final List<ChannelFrameBody> channelFrameBodies)",
                "+        {",
                "+            for (final ChannelFrameBody channelFrameBody : channelFrameBodies)",
                "+            {",
                "+                Response response;",
                "+                Object val = channelFrameBody.getFrameBody();",
                "+                int channel = channelFrameBody.getChannel();",
                "+                if (val instanceof FrameBody)",
                "+                {",
                "+                    FrameBody frameBody = (FrameBody) val;",
                "+                    if (frameBody instanceof Open && ((Open) frameBody).getMaxFrameSize() != null)",
                "+                    {",
                "+                        _frameSize = ((Open) frameBody).getMaxFrameSize().intValue();",
                "+                    }",
                "+                    response = new PerformativeResponse((short) channel, frameBody);",
                "+                }",
                "+                else if (val instanceof SaslFrameBody)",
                "+                {",
                "+                    SaslFrameBody frameBody = (SaslFrameBody) val;",
                "+                    response = new SaslPerformativeResponse((short) channel, frameBody);",
                "+",
                "+                    if (frameBody instanceof SaslOutcome && ((SaslOutcome) frameBody).getCode().equals(SaslCode.OK))",
                "+                    {",
                "+                        resetInputHandlerAfterSaslOutcome();",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    throw new UnsupportedOperationException(\"Unexpected frame type : \" + val.getClass());",
                "+                }",
                "+",
                "+                _responseQueue.add(response);",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslInit(final SaslInit saslInit)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslMechanisms(final SaslMechanisms saslMechanisms)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslChallenge(final SaslChallenge saslChallenge)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslResponse(final SaslResponse saslResponse)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslOutcome(final SaslOutcome saslOutcome)",
                "+        {",
                "+",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "new file mode 100644",
                "index 0000000000..56d6e6f986",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "@@ -0,0 +1,93 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.codec.FrameWriter;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v1_0.type.codec.AMQPDescribedTypeRegistry;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+import org.apache.qpid.tests.protocol.OutputEncoder;",
                "+",
                "+public class FrameEncoder implements OutputEncoder",
                "+{",
                "+    private static final AMQPDescribedTypeRegistry TYPE_REGISTRY = AMQPDescribedTypeRegistry.newInstance()",
                "+                                                                                            .registerTransportLayer()",
                "+                                                                                            .registerMessagingLayer()",
                "+                                                                                            .registerTransactionLayer()",
                "+                                                                                            .registerSecurityLayer()",
                "+                                                                                            .registerExtensionSoleconnLayer();",
                "+",
                "+    @Override",
                "+    public ByteBuffer encode(final Object msg)",
                "+    {",
                "+        if (msg instanceof AMQFrame)",
                "+        {",
                "+            List<ByteBuffer> buffers = new ArrayList<>();",
                "+            FrameWriter _frameWriter = new FrameWriter(TYPE_REGISTRY, new ByteBufferSender()",
                "+            {",
                "+                @Override",
                "+                public boolean isDirectBufferPreferred()",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                @Override",
                "+                public void send(final QpidByteBuffer msg)",
                "+                {",
                "+                    byte[] data = new byte[msg.remaining()];",
                "+                    msg.get(data);",
                "+                    buffers.add(ByteBuffer.wrap(data));",
                "+                }",
                "+",
                "+                @Override",
                "+                public void flush()",
                "+                {",
                "+                }",
                "+",
                "+                @Override",
                "+                public void close()",
                "+                {",
                "+",
                "+                }",
                "+            });",
                "+            _frameWriter.send(((AMQFrame) msg));",
                "+",
                "+            int remaining = 0;",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                remaining += byteBuffer.remaining();",
                "+            }",
                "+            ByteBuffer result = ByteBuffer.allocate(remaining);",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                result.put(byteBuffer);",
                "+            }",
                "+            result.flip();",
                "+            return result;",
                "+        }",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "index 4d53751cad..dd59757c52 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "@@ -21,54 +21,8 @@ package org.apache.qpid.tests.protocol.v1_0;",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.anyOf;",
                "-import static org.hamcrest.Matchers.instanceOf;",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.nullValue;",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                " import java.net.InetSocketAddress;",
                "-import java.util.concurrent.ArrayBlockingQueue;",
                "-import java.util.concurrent.BlockingQueue;",
                "-import java.util.concurrent.TimeUnit;",
                "-import com.google.common.base.Preconditions;",
                "-import com.google.common.util.concurrent.JdkFutureAdapters;",
                "-import com.google.common.util.concurrent.ListenableFuture;",
                "-import com.google.common.util.concurrent.MoreExecutors;",
                "-import io.netty.bootstrap.Bootstrap;",
                "-import io.netty.buffer.ByteBuf;",
                "-import io.netty.buffer.ByteBufAllocator;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFuture;",
                "-import io.netty.channel.ChannelInitializer;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.ChannelPipeline;",
                "-import io.netty.channel.ChannelPromise;",
                "-import io.netty.channel.EventLoopGroup;",
                "-import io.netty.channel.nio.NioEventLoopGroup;",
                "-import io.netty.channel.socket.SocketChannel;",
                "-import io.netty.channel.socket.nio.NioSocketChannel;",
                "-",
                "-import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "-import org.apache.qpid.server.protocol.v1_0.framing.SASLFrame;",
                "-import org.apache.qpid.server.protocol.v1_0.framing.TransportFrame;",
                "-import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "-import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "-import org.apache.qpid.server.protocol.v1_0.type.UnsignedShort;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Close;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "-",
                "-public class FrameTransport implements AutoCloseable",
                "+public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                " {",
                "-    public static final long RESPONSE_TIMEOUT = Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\",6000);",
                "-    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "-",
                "-    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "-",
                "-    private final EventLoopGroup _workerGroup;",
                "-    private final InetSocketAddress _brokerAddress;",
                "-    private final boolean _isSasl;",
                "-",
                "-    private Channel _channel;",
                "-    private volatile boolean _channelClosedSeen = false;",
                "-",
                "     public FrameTransport(final InetSocketAddress brokerAddress)",
                "@@ -80,41 +34,9 @@ public class FrameTransport implements AutoCloseable",
                "     {",
                "-        _brokerAddress = brokerAddress;",
                "-        _isSasl = isSasl;",
                "-        _workerGroup = new NioEventLoopGroup();",
                "-    }",
                "-",
                "-    public InetSocketAddress getBrokerAddress()",
                "-    {",
                "-        return _brokerAddress;",
                "+        super(brokerAddress, new FrameDecoder(isSasl), new FrameEncoder());",
                "     }",
                "+    @Override",
                "     public FrameTransport connect()",
                "     {",
                "-        try",
                "-        {",
                "-            Bootstrap b = new Bootstrap();",
                "-            b.group(_workerGroup);",
                "-            b.channel(NioSocketChannel.class);",
                "-            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "-            b.handler(new ChannelInitializer<SocketChannel>()",
                "-            {",
                "-                @Override",
                "-                public void initChannel(SocketChannel ch) throws Exception",
                "-                {",
                "-                    ChannelPipeline pipeline = ch.pipeline();",
                "-                    buildInputOutputPipeline(pipeline);",
                "-                }",
                "-            });",
                "-",
                "-            _channel = b.connect(_brokerAddress).sync().channel();",
                "-            _channel.closeFuture().addListener(future ->",
                "-                                               {",
                "-                                                   _channelClosedSeen = true;",
                "-                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "-                                               });",
                "-        }",
                "-        catch (InterruptedException e)",
                "-        {",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        super.connect();",
                "         return this;",
                "@@ -122,119 +44,6 @@ public class FrameTransport implements AutoCloseable",
                "-    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "-    {",
                "-        pipeline.addLast(new InputHandler(_queue, _isSasl)).addLast(new OutputHandler());",
                "-    }",
                "-",
                "     @Override",
                "-    public void close() throws Exception",
                "-    {",
                "-        try",
                "-        {",
                "-            if (_channel != null)",
                "-            {",
                "-                _channel.disconnect().sync();",
                "-                _channel.close().sync();",
                "-                _channel = null;",
                "-            }",
                "-        }",
                "-        finally",
                "-        {",
                "-            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "-        }",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "-    {",
                "-        Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        ChannelPromise promise = _channel.newPromise();",
                "-        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "-        buffer.writeBytes(bytes);",
                "-        _channel.write(buffer, promise);",
                "-        _channel.flush();",
                "-        return JdkFutureAdapters.listenInPoolThread(promise);",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendPerformative(final FrameBody frameBody, UnsignedShort channel) throws Exception",
                "+    public byte[] getProtocolHeader()",
                "     {",
                "-        Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        ChannelPromise promise = _channel.newPromise();",
                "-        final TransportFrame transportFrame;",
                "-        try (QpidByteBuffer payload = frameBody instanceof Transfer ? ((Transfer) frameBody).getPayload() : null)",
                "-        {",
                "-            final QpidByteBuffer duplicate;",
                "-            if (payload == null)",
                "-            {",
                "-                duplicate = null;",
                "-            }",
                "-            else",
                "-            {",
                "-                duplicate = payload.duplicate();",
                "-            }",
                "-            transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "-            _channel.write(transportFrame, promise);",
                "-            _channel.flush();",
                "-            final ListenableFuture<Void> listenableFuture = JdkFutureAdapters.listenInPoolThread(promise);",
                "-            if (frameBody instanceof Transfer)",
                "-            {",
                "-                listenableFuture.addListener(() -> ((Transfer) frameBody).dispose(), MoreExecutors.directExecutor());",
                "-            }",
                "-            if (duplicate != null)",
                "-            {",
                "-                listenableFuture.addListener(() -> duplicate.dispose(), MoreExecutors.directExecutor());",
                "-            }",
                "-            return listenableFuture;",
                "-        }",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendPerformative(final SaslFrameBody frameBody) throws Exception",
                "-    {",
                "-        SASLFrame transportFrame = new SASLFrame(frameBody);",
                "-        ChannelFuture channelFuture = _channel.writeAndFlush(transportFrame);",
                "-        channelFuture.sync();",
                "-        return JdkFutureAdapters.listenInPoolThread(channelFuture);",
                "-    }",
                "-",
                "-    public <T extends Response<?>> T getNextResponse() throws Exception",
                "-    {",
                "-        return (T)_queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "-    }",
                "-",
                "-    public void doCloseConnection() throws Exception",
                "-    {",
                "-        Close close = new Close();",
                "-",
                "-        sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "-        PerformativeResponse response = getNextResponse();",
                "-        if (!(response.getBody() instanceof Close))",
                "-        {",
                "-            throw new IllegalStateException(String.format(",
                "-                    \"Unexpected response to connection Close. Expected Close got '%s'\", response.getBody()));",
                "-        }",
                "-    }",
                "-",
                "-    public void assertNoMoreResponses() throws Exception",
                "-    {",
                "-        Response response = getNextResponse();",
                "-        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "-    }",
                "-",
                "-    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "-    {",
                "-        assertNoMoreResponses();",
                "-        assertThat(_channelClosedSeen, is(true));",
                "-    }",
                "-",
                "-    private static class ChannelClosedResponse implements Response<Void>",
                "-    {",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return \"ChannelClosed\";",
                "-        }",
                "-",
                "-        @Override",
                "-        public Void getBody()",
                "-        {",
                "-            return null;",
                "-        }",
                "+        return \"AMQP\\0\\1\\0\\0\".getBytes(UTF_8);",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 52518ab2c3..7d73ce8b20 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -22,4 +22,2 @@ package org.apache.qpid.tests.protocol.v1_0;",
                "-import static com.google.common.util.concurrent.Futures.allAsList;",
                "-import static java.nio.charset.StandardCharsets.UTF_8;",
                " import static org.hamcrest.CoreMatchers.instanceOf;",
                "@@ -32,5 +30,3 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.Collections;",
                "-import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "@@ -40,9 +36,9 @@ import java.util.Set;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.concurrent.ExecutionException;",
                "-import java.util.concurrent.TimeUnit;",
                "-import java.util.concurrent.TimeoutException;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "+import com.google.common.util.concurrent.MoreExecutors;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.SASLFrame;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.TransportFrame;",
                " import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "@@ -83,4 +79,5 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.SenderSettleMode;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "-public class Interaction",
                "+public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                " {",
                "@@ -96,3 +93,2 @@ public class Interaction",
                "     private final Disposition _disposition;",
                "-    private final FrameTransport _transport;",
                "     private final SaslInit _saslInit;",
                "@@ -102,4 +98,2 @@ public class Interaction",
                "     private UnsignedShort _sessionChannel;",
                "-    private Response<?> _latestResponse;",
                "-    private ListenableFuture<?> _latestFuture;",
                "     private int _deliveryIdCounter;",
                "@@ -111,6 +105,6 @@ public class Interaction",
                "     {",
                "+        super(frameTransport);",
                "         final UnsignedInteger defaultLinkHandle = UnsignedInteger.ZERO;",
                "-        _transport = frameTransport;",
                "-        _protocolHeader = \"AMQP\\0\\1\\0\\0\".getBytes(UTF_8);",
                "+        _protocolHeader = frameTransport.getProtocolHeader();",
                "@@ -156,2 +150,15 @@ public class Interaction",
                "+    public void doCloseConnection() throws Exception",
                "+    {",
                "+        Close close = new Close();",
                "+",
                "+        sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "+        Response<?> response = getNextResponse();",
                "+        if (!(response.getBody() instanceof Close))",
                "+        {",
                "+            throw new IllegalStateException(String.format(",
                "+                    \"Unexpected response to connection Close. Expected Close got '%s'\", response.getBody()));",
                "+        }",
                "+    }",
                "+",
                "     /////////////////////////",
                "@@ -166,13 +173,11 @@ public class Interaction",
                "-    public Interaction negotiateProtocol() throws Exception",
                "+    @Override",
                "+    protected byte[] getProtocolHeader()",
                "+    {",
                "+        return _protocolHeader;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Interaction getInteraction()",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendProtocolHeader(_protocolHeader);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "         return this;",
                "@@ -979,11 +984,4 @@ public class Interaction",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "+        SASLFrame transportFrame = new SASLFrame(frameBody);",
                "+        sendPerformativeAndChainFuture(transportFrame, true);",
                "     }",
                "@@ -992,66 +990,25 @@ public class Interaction",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, channel);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "-    }",
                "-",
                "-    public Interaction consumeResponse(final Class<?>... responseTypes) throws Exception",
                "-    {",
                "-        sync();",
                "-        _latestResponse = _transport.getNextResponse();",
                "-        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "-        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "-            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        final TransportFrame transportFrame;",
                "+        try (QpidByteBuffer payload = frameBody instanceof Transfer ? ((Transfer) frameBody).getPayload() : null)",
                "         {",
                "-            return this;",
                "-        }",
                "-        acceptableResponseClasses.remove(null);",
                "-        if (_latestResponse != null)",
                "-        {",
                "-            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            final QpidByteBuffer duplicate;",
                "+            if (payload == null)",
                "             {",
                "-                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "-                {",
                "-                    return this;",
                "-                }",
                "+                duplicate = null;",
                "+            }",
                "+            else",
                "+            {",
                "+                duplicate = payload.duplicate();",
                "+            }",
                "+            transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "+            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame, false);",
                "+            if (frameBody instanceof Transfer)",
                "+            {",
                "+                listenableFuture.addListener(() -> ((Transfer) frameBody).dispose(), MoreExecutors.directExecutor());",
                "+            }",
                "+            if (duplicate != null)",
                "+            {",
                "+                listenableFuture.addListener(() -> duplicate.dispose(), MoreExecutors.directExecutor());",
                "             }",
                "         }",
                "-        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "-                                                      acceptableResponseClasses,",
                "-                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "-    }",
                "-",
                "-    public Interaction sync() throws InterruptedException, ExecutionException, TimeoutException",
                "-    {",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture.get(FrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "-            _latestFuture = null;",
                "-        }",
                "-        return this;",
                "-    }",
                "-",
                "-    public Response<?> getLatestResponse() throws Exception",
                "-    {",
                "-        sync();",
                "-        return _latestResponse;",
                "-    }",
                "-",
                "-    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "-    {",
                "-        sync();",
                "-        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "-        {",
                "-            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "-                                                          type.getSimpleName(),",
                "-                                                          _latestResponse.getBody()));",
                "-        }",
                "-",
                "-        return (T) _latestResponse.getBody();",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "index 06a64dc875..9e03a26150 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v1_0;",
                " import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "index 08893e0d7e..02ab3c9c5d 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "@@ -23,2 +23,3 @@ package org.apache.qpid.tests.protocol.v1_0;",
                " import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "new file mode 100644",
                "index 0000000000..8c3bc87d40",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -0,0 +1,75 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.0.1-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>protocol-tests-core</artifactId>",
                "+    <name>Apache Qpid Broker-J Protocol Tests Core</name>",
                "+    <description>Core classes for Apache Qpid protocol tests</description>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>com.google.guava</groupId>",
                "+            <artifactId>guava</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-buffer</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-common</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-codec-http</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-handler</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-transport</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-core</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+        </dependency>",
                "+    </dependencies>",
                "+",
                "+</project>",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "new file mode 100644",
                "index 0000000000..daf500db11",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "@@ -0,0 +1,198 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.anyOf;",
                "+import static org.hamcrest.Matchers.instanceOf;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.hamcrest.Matchers.nullValue;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import com.google.common.util.concurrent.JdkFutureAdapters;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelFuture;",
                "+import io.netty.channel.ChannelInitializer;",
                "+import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.ChannelPromise;",
                "+import io.netty.channel.EventLoopGroup;",
                "+import io.netty.channel.nio.NioEventLoopGroup;",
                "+import io.netty.channel.socket.SocketChannel;",
                "+import io.netty.channel.socket.nio.NioSocketChannel;",
                "+",
                "+public abstract class FrameTransport implements AutoCloseable",
                "+{",
                "+    public static final long RESPONSE_TIMEOUT =",
                "+            Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\", 6000);",
                "+    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "+",
                "+    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "+    private final EventLoopGroup _workerGroup;",
                "+    private final InetSocketAddress _brokerAddress;",
                "+    private final InputHandler _inputHandler;",
                "+    private final OutputHandler _outputHandler;",
                "+",
                "+    private volatile Channel _channel;",
                "+    private volatile boolean _channelClosedSeen = false;",
                "+",
                "+    public FrameTransport(final InetSocketAddress brokerAddress, InputDecoder inputDecoder, OutputEncoder outputEncoder)",
                "+    {",
                "+        _brokerAddress = brokerAddress;",
                "+        _inputHandler = new InputHandler(_queue, inputDecoder);",
                "+        _outputHandler = new OutputHandler(outputEncoder);",
                "+        _workerGroup = new NioEventLoopGroup();",
                "+    }",
                "+",
                "+    public InetSocketAddress getBrokerAddress()",
                "+    {",
                "+        return _brokerAddress;",
                "+    }",
                "+",
                "+    public FrameTransport connect()",
                "+    {",
                "+        try",
                "+        {",
                "+            Bootstrap b = new Bootstrap();",
                "+            b.group(_workerGroup);",
                "+            b.channel(NioSocketChannel.class);",
                "+            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "+            b.handler(new ChannelInitializer<SocketChannel>()",
                "+            {",
                "+                @Override",
                "+                public void initChannel(SocketChannel ch) throws Exception",
                "+                {",
                "+                    ChannelPipeline pipeline = ch.pipeline();",
                "+                    buildInputOutputPipeline(pipeline);",
                "+                }",
                "+            });",
                "+",
                "+            _channel = b.connect(_brokerAddress).sync().channel();",
                "+            _channel.closeFuture().addListener(future ->",
                "+                                               {",
                "+                                                   _channelClosedSeen = true;",
                "+                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "+                                               });",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "+    {",
                "+        pipeline.addLast(_inputHandler).addLast(_outputHandler);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws Exception",
                "+    {",
                "+        try",
                "+        {",
                "+            if (_channel != null)",
                "+            {",
                "+                _channel.disconnect().sync();",
                "+                _channel.close().sync();",
                "+                _channel = null;",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "+        }",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(bytes);",
                "+        _channel.write(buffer, promise);",
                "+        _channel.flush();",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendPerformative(final Object data, boolean sync) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        if (!sync)",
                "+        {",
                "+            ChannelPromise promise = _channel.newPromise();",
                "+            _channel.write(data, promise);",
                "+            _channel.flush();",
                "+            return JdkFutureAdapters.listenInPoolThread(promise);",
                "+        }",
                "+        else",
                "+        {",
                "+            ChannelFuture channelFuture = _channel.writeAndFlush(data);",
                "+            channelFuture.sync();",
                "+            return Futures.immediateFuture(null);",
                "+        }",
                "+    }",
                "+",
                "+    public <T extends Response<?>> T getNextResponse() throws Exception",
                "+    {",
                "+        return (T) _queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+    }",
                "+",
                "+    public void assertNoMoreResponses() throws Exception",
                "+    {",
                "+        Response response = getNextResponse();",
                "+        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "+    }",
                "+",
                "+    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "+    {",
                "+        assertNoMoreResponses();",
                "+        assertThat(_channelClosedSeen, is(true));",
                "+    }",
                "+",
                "+    private static class ChannelClosedResponse implements Response<Void>",
                "+    {",
                "+        @Override",
                "+        public String toString()",
                "+        {",
                "+            return \"ChannelClosed\";",
                "+        }",
                "+",
                "+        @Override",
                "+        public Void getBody()",
                "+        {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "+    public abstract byte[] getProtocolHeader();",
                "+",
                "+    protected abstract Interaction newInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "new file mode 100644",
                "index 0000000000..9767b40063",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+public class HeaderResponse implements Response<byte[]>",
                "+{",
                "+    private final byte[] _header;",
                "+",
                "+    public HeaderResponse(final byte[] header)",
                "+    {",
                "+        _header = header;",
                "+    }",
                "+",
                "+    @Override",
                "+    public byte[] getBody()",
                "+    {",
                "+        return _header;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"HeaderResponse{\" +",
                "+               \"_header=\" + Arrays.toString(_header) +",
                "+               '}';",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "new file mode 100644",
                "index 0000000000..369cfd1666",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.Collection;",
                "+",
                "+public interface InputDecoder",
                "+{",
                "+    Collection<Response<?>> decode(final ByteBuffer inputBuffer) throws Exception;",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "new file mode 100644",
                "index 0000000000..2d5fb45102",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.concurrent.BlockingQueue;",
                "+",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelInboundHandlerAdapter;",
                "+import io.netty.util.ReferenceCountUtil;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class InputHandler extends ChannelInboundHandlerAdapter",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(InputHandler.class);",
                "+",
                "+    private final BlockingQueue<Response<?>> _responseQueue;",
                "+    private final InputDecoder _inputDecoder;",
                "+",
                "+    private ByteBuffer _inputBuffer = ByteBuffer.allocate(0);",
                "+",
                "+    InputHandler(final BlockingQueue<Response<?>> queue, InputDecoder inputDecoder)",
                "+    {",
                "+        _responseQueue = queue;",
                "+        _inputDecoder = inputDecoder;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception",
                "+    {",
                "+        ByteBuf buf = (ByteBuf) msg;",
                "+        ByteBuffer byteBuffer = ByteBuffer.allocate(buf.readableBytes());",
                "+        byteBuffer.put(buf.nioBuffer());",
                "+        byteBuffer.flip();",
                "+        LOGGER.debug(\"Incoming {} byte(s)\", byteBuffer.remaining());",
                "+",
                "+        if (_inputBuffer.hasRemaining())",
                "+        {",
                "+            ByteBuffer old = _inputBuffer;",
                "+            _inputBuffer = ByteBuffer.allocate(_inputBuffer.remaining() + byteBuffer.remaining());",
                "+            _inputBuffer.put(old);",
                "+            _inputBuffer.put(byteBuffer);",
                "+            _inputBuffer.flip();",
                "+        }",
                "+        else",
                "+        {",
                "+            _inputBuffer = byteBuffer;",
                "+        }",
                "+",
                "+        _responseQueue.addAll(_inputDecoder.decode(_inputBuffer));",
                "+",
                "+        LOGGER.debug(\"After parsing, {} byte(s) remained\", _inputBuffer.remaining());",
                "+",
                "+        if (_inputBuffer.hasRemaining())",
                "+        {",
                "+            _inputBuffer.compact();",
                "+            _inputBuffer.flip();",
                "+        }",
                "+",
                "+        ReferenceCountUtil.release(msg);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "new file mode 100644",
                "index 0000000000..238c0a54a6",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -0,0 +1,141 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static com.google.common.util.concurrent.Futures.allAsList;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+public abstract class Interaction<I extends Interaction>",
                "+{",
                "+    private final FrameTransport _transport;",
                "+    private ListenableFuture<?> _latestFuture;",
                "+    private Response<?> _latestResponse;",
                "+",
                "+    public Interaction(final FrameTransport frameTransport)",
                "+    {",
                "+        _transport = frameTransport;",
                "+    }",
                "+",
                "+    public I consumeResponse(final Class<?>... responseTypes) throws Exception",
                "+    {",
                "+        sync();",
                "+        _latestResponse = getNextResponse();",
                "+        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "+        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "+            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        {",
                "+            return getInteraction();",
                "+        }",
                "+        acceptableResponseClasses.remove(null);",
                "+        if (_latestResponse != null)",
                "+        {",
                "+            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            {",
                "+                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+                {",
                "+                    return getInteraction();",
                "+                }",
                "+            }",
                "+        }",
                "+        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "+                                                      acceptableResponseClasses,",
                "+                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "+    }",
                "+",
                "+    protected Response<?> getNextResponse() throws Exception",
                "+    {",
                "+        return _transport.getNextResponse();",
                "+    }",
                "+",
                "+    public I sync() throws InterruptedException, ExecutionException, TimeoutException",
                "+    {",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture.get(FrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+            _latestFuture = null;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    public Response<?> getLatestResponse() throws Exception",
                "+    {",
                "+        sync();",
                "+        return _latestResponse;",
                "+    }",
                "+",
                "+    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "+    {",
                "+        sync();",
                "+        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getBody()));",
                "+        }",
                "+",
                "+        return (T) _latestResponse.getBody();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody, boolean sync) throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, sync);",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return future;",
                "+    }",
                "+",
                "+    public I negotiateProtocol() throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendProtocolHeader(getProtocolHeader());",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    protected FrameTransport getTransport()",
                "+    {",
                "+        return _transport;",
                "+    }",
                "+",
                "+    protected abstract byte[] getProtocolHeader();",
                "+",
                "+    protected abstract I getInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "new file mode 100644",
                "index 0000000000..292ae9ad74",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+import org.hamcrest.BaseMatcher;",
                "+import org.hamcrest.Description;",
                "+import org.hamcrest.Matcher;",
                "+",
                "+public class Matchers",
                "+{",
                "+    public static Matcher<Response> protocolHeader(byte[] expectedHeader)",
                "+    {",
                "+        return new BaseMatcher<Response>()",
                "+        {",
                "+            @Override",
                "+            public void describeTo(final Description description)",
                "+            {",
                "+                description.appendValue(new HeaderResponse(expectedHeader));",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean matches(final Object o)",
                "+            {",
                "+                if (o == null)",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                if (!(o instanceof HeaderResponse))",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                if (!Arrays.equals(expectedHeader, ((HeaderResponse) o).getBody()))",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                return true;",
                "+            }",
                "+        };",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "new file mode 100644",
                "index 0000000000..a6a4a47b17",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+public interface OutputEncoder",
                "+{",
                "+    ByteBuffer encode(Object msg);",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "new file mode 100644",
                "index 0000000000..40a2ca784f",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelOutboundHandlerAdapter;",
                "+import io.netty.channel.ChannelPromise;",
                "+",
                "+public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "+{",
                "+    private final OutputEncoder _outputEncoder;",
                "+",
                "+    OutputHandler(final OutputEncoder outputEncoder)",
                "+    {",
                "+        _outputEncoder = outputEncoder;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(final ChannelHandlerContext ctx, final Object msg, final ChannelPromise promise) throws Exception",
                "+    {",
                "+        ByteBuffer byteBuffer = _outputEncoder.encode(msg);",
                "+        if (byteBuffer != null)",
                "+        {",
                "+            send(ctx, byteBuffer, promise);",
                "+        }",
                "+        else",
                "+        {",
                "+            super.write(ctx, msg, promise);",
                "+        }",
                "+    }",
                "+",
                "+    private void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "+    {",
                "+        byte[] data = new byte[dataByteBuffer.remaining()];",
                "+        dataByteBuffer.get(data);",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(data);",
                "+        try",
                "+        {",
                "+            OutputHandler.super.write(ctx, buffer, promise);",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            promise.setFailure(e);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "new file mode 100644",
                "index 0000000000..debc06f19e",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+public interface Response<T>",
                "+{",
                "+    T getBody();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java",
                "new file mode 100644",
                "index 0000000000..db6d7a1383",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target(ElementType.METHOD)",
                "+public @interface SpecificationTest",
                "+{",
                "+    String section();",
                "+    String description();",
                "+}"
            ],
            "changed_files": [
                "pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "systests/protocol-tests-core/pom.xml",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java, systests/protocol-tests-amqp-1-0/pom.xml, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a3dfc883b7af756fbdf076665eaae4ad8202bf7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524735638,
            "hunks": 31,
            "message": "QPID-7830: [Broker-J] [AMQP 0-8..0-91] Mechanically refactor AMQPShortString introducing factory methods and hiding constructors",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AMQShortStringEncoding.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AMQShortStringEncoding.java",
                "index ce004b4033..8782f65dec 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AMQShortStringEncoding.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AMQShortStringEncoding.java",
                "@@ -44,3 +44,3 @@ public class AMQShortStringEncoding",
                "             tupleInput.readFast(stringBytes);",
                "-            return new AMQShortString(stringBytes);",
                "+            return AMQShortString.createAMQShortString(stringBytes);",
                "         }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java",
                "index 9cc604d6c2..b31008185f 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java",
                "@@ -309,3 +309,3 @@ public class UpgradeFrom4To5 extends AbstractStoreUpgrade",
                "             {",
                "-                AMQShortString queueNameAMQ = new AMQShortString(queueName);",
                "+                AMQShortString queueNameAMQ = AMQShortString.createAMQShortString(queueName);",
                "                 QueueRecord record = new QueueRecord(queueNameAMQ, null, false, null);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "index b5aa4d7136..41a43227a2 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "@@ -44,4 +44,2 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     public static final int MAX_LENGTH = 255;",
                "-    private static final byte MINUS = (byte)'-';",
                "-    private static final byte ZERO = (byte) '0';",
                "@@ -55,7 +53,6 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     private final int _length;",
                "-    private static final char[] EMPTY_CHAR_ARRAY = new char[0];",
                "-    public static final AMQShortString EMPTY_STRING = new AMQShortString((String)null);",
                "+    public static final AMQShortString EMPTY_STRING = createAMQShortString((String)null);",
                "-    public AMQShortString(byte[] data)",
                "+    private AMQShortString(byte[] data)",
                "     {",
                "@@ -74,3 +71,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-    public AMQShortString(String string)",
                "+    private AMQShortString(String string)",
                "     {",
                "@@ -98,27 +95,16 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-    public static AMQShortString readAMQShortString(ByteBuffer buffer)",
                "+    private AMQShortString(byte[] data, final int offset, final int length)",
                "     {",
                "-        int length = ((int) buffer.get()) & 0xff;",
                "-        if(length == 0)",
                "+        if (length > MAX_LENGTH)",
                "         {",
                "-            return null;",
                "+            throw new IllegalArgumentException(\"Cannot create AMQShortString with number of octets over 255!\");",
                "         }",
                "-        else",
                "+        if (data == null)",
                "         {",
                "-            if (length > MAX_LENGTH)",
                "-            {",
                "-                throw new IllegalArgumentException(\"Cannot create AMQShortString with number of octets over 255!\");",
                "-            }",
                "-            if(length > buffer.remaining())",
                "-            {",
                "-                throw new IllegalArgumentException(\"Cannot create AMQShortString with length \"",
                "-                                                   + length + \" from a ByteBuffer with only \"",
                "-                                                   + buffer.remaining()",
                "-                                                   + \" bytes.\");",
                "-",
                "-            }",
                "-            byte[] data = new byte[length];",
                "-            buffer.get(data);",
                "-            return new AMQShortString(data, 0, length);",
                "+            throw new NullPointerException(\"Cannot create AMQShortString with null data[]\");",
                "         }",
                "+",
                "+        _offset = offset;",
                "+        _length = length;",
                "+        _data = data;",
                "     }",
                "@@ -152,17 +138,10 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-",
                "-    public AMQShortString(byte[] data, final int offset, final int length)",
                "+    public static AMQShortString createAMQShortString(byte[] data)",
                "     {",
                "-        if (length > MAX_LENGTH)",
                "-        {",
                "-            throw new IllegalArgumentException(\"Cannot create AMQShortString with number of octets over 255!\");",
                "-        }",
                "-        if (data == null)",
                "-        {",
                "-            throw new NullPointerException(\"Cannot create AMQShortString with null data[]\");",
                "-        }",
                "+        return new AMQShortString(data);",
                "+    }",
                "-        _offset = offset;",
                "-        _length = length;",
                "-        _data = data;",
                "+    public static AMQShortString createAMQShortString(String string)",
                "+    {",
                "+        return new AMQShortString(string);",
                "     }",
                "@@ -350,33 +329,2 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-    public int toIntValue()",
                "-    {",
                "-        int pos = _offset;",
                "-        int val = 0;",
                "-",
                "-",
                "-        boolean isNegative = (_data[pos] == MINUS);",
                "-        if(isNegative)",
                "-        {",
                "-            pos++;",
                "-        }",
                "-",
                "-        final int end = _length + _offset;",
                "-",
                "-        while(pos < end)",
                "-        {",
                "-            int digit = (int) (_data[pos++] - ZERO);",
                "-            if((digit < 0) || (digit > 9))",
                "-            {",
                "-                throw new NumberFormatException(\"\\\"\"+toString()+\"\\\" is not a valid number\");",
                "-            }",
                "-            val = val * 10;",
                "-            val += digit;",
                "-        }",
                "-        if(isNegative)",
                "-        {",
                "-            val = val * -1;",
                "-        }",
                "-        return val;",
                "-    }",
                "-",
                "     public boolean contains(final byte b)",
                "@@ -424,3 +372,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "             }",
                "-            return new AMQShortString(bytes);",
                "+            return createAMQShortString(bytes);",
                "         }",
                "@@ -441,3 +389,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "         {",
                "-            return new AMQShortString(obj);",
                "+            return createAMQShortString(obj);",
                "         }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index c76d78f7c6..ce66c97d8c 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -178,3 +178,4 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "     private static final",
                "-    AMQShortString IMMEDIATE_DELIVERY_REPLY_TEXT = new AMQShortString(\"Immediate delivery is not possible.\");",
                "+    AMQShortString IMMEDIATE_DELIVERY_REPLY_TEXT =",
                "+            AMQShortString.createAMQShortString(\"Immediate delivery is not possible.\");",
                "@@ -587,3 +588,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-            tag = new AMQShortString(\"sgen_\" + getNextConsumerTag());",
                "+            tag = AMQShortString.createAMQShortString(\"sgen_\" + getNextConsumerTag());",
                "         }",
                "@@ -2561,3 +2562,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-            if (!new AMQShortString(ExchangeDefaults.DIRECT_EXCHANGE_CLASS).equals(type))",
                "+            if (!AMQShortString.createAMQShortString(ExchangeDefaults.DIRECT_EXCHANGE_CLASS).equals(type))",
                "             {",
                "@@ -2909,3 +2910,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-            queueName = new AMQShortString(\"tmp_\" + UUID.randomUUID());",
                "+            queueName = AMQShortString.createAMQShortString(\"tmp_\" + UUID.randomUUID());",
                "         }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "index 9b18a1e351..6d3a55e306 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "@@ -792,3 +792,3 @@ public class BasicContentHeaderProperties",
                "     {",
                "-        setMessageId(messageId == null ? null : new AMQShortString(messageId));",
                "+        setMessageId(messageId == null ? null : AMQShortString.createAMQShortString(messageId));",
                "     }",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java b/broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
                "index 7a2c82cfa3..ab23155c7f 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
                "@@ -101,3 +101,3 @@ public class MessageConverter_0_10_to_0_8 implements MessageConverter<MessageTra",
                "                 {",
                "-                    props.setAppId(new AMQShortString(messageProps.getAppId()));",
                "+                    props.setAppId(AMQShortString.createAMQShortString(messageProps.getAppId()));",
                "                 }",
                "@@ -116,3 +116,3 @@ public class MessageConverter_0_10_to_0_8 implements MessageConverter<MessageTra",
                "                 {",
                "-                    props.setCorrelationId(new AMQShortString(messageProps.getCorrelationId()));",
                "+                    props.setCorrelationId(AMQShortString.createAMQShortString(messageProps.getCorrelationId()));",
                "                 }",
                "@@ -167,3 +167,3 @@ public class MessageConverter_0_10_to_0_8 implements MessageConverter<MessageTra",
                "                 {",
                "-                    props.setUserId(new AMQShortString(messageProps.getUserId()));",
                "+                    props.setUserId(AMQShortString.createAMQShortString(messageProps.getUserId()));",
                "                 }",
                "@@ -321,6 +321,6 @@ public class MessageConverter_0_10_to_0_8 implements MessageConverter<MessageTra",
                "                                             ? null",
                "-                                            : new AMQShortString(delvProps.getExchange());",
                "+                                            : AMQShortString.createAMQShortString(delvProps.getExchange());",
                "         final AMQShortString routingKey = (delvProps == null || delvProps.getRoutingKey() == null)",
                "                                           ? null",
                "-                                          : new AMQShortString(delvProps.getRoutingKey());",
                "+                                          : AMQShortString.createAMQShortString(delvProps.getRoutingKey());",
                "         final boolean immediate = delvProps != null && delvProps.getImmediate();",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java b/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java",
                "index e8a02fdf8e..0576b3375b 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java",
                "@@ -298,3 +298,3 @@ public class MessageConverter_1_0_to_v0_8 implements MessageConverter<Message_1_",
                "             {",
                "-                return new AMQShortString(userId.getArray());",
                "+                return AMQShortString.createAMQShortString(userId.getArray());",
                "             }",
                "@@ -315,3 +315,3 @@ public class MessageConverter_1_0_to_v0_8 implements MessageConverter<Message_1_",
                "             {",
                "-                return new AMQShortString(((Binary) messageId).getArray());",
                "+                return AMQShortString.createAMQShortString(((Binary) messageId).getArray());",
                "             }",
                "@@ -319,3 +319,3 @@ public class MessageConverter_1_0_to_v0_8 implements MessageConverter<Message_1_",
                "             {",
                "-                return new AMQShortString(((byte[]) messageId));",
                "+                return AMQShortString.createAMQShortString(((byte[]) messageId));",
                "             }",
                "@@ -390,3 +390,3 @@ public class MessageConverter_1_0_to_v0_8 implements MessageConverter<Message_1_",
                "             {",
                "-                correlationId = new AMQShortString(((Binary) correlationIdObject).getArray());",
                "+                correlationId = AMQShortString.createAMQShortString(((Binary) correlationIdObject).getArray());",
                "             }",
                "@@ -394,3 +394,3 @@ public class MessageConverter_1_0_to_v0_8 implements MessageConverter<Message_1_",
                "             {",
                "-                correlationId = new AMQShortString(((byte[]) correlationIdObject));",
                "+                correlationId = AMQShortString.createAMQShortString(((byte[]) correlationIdObject));",
                "             }"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AMQShortStringEncoding.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java",
                "broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7830": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java, broker-plugins/amqp-msg-conv-0-8-to-0-10/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7830",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ebbd693624965dd24d3007c8b2a700badfc8121",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513185461,
            "hunks": 29,
            "message": "QPID-8060: [Broker-J] [AMQP 0-8..0-9-1] Address review comments Cherry picked from master 6e83977",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index b3714e9667..1c071780da 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -73,3 +73,2 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.LinkModel;",
                "@@ -87,2 +86,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -1057,5 +1057,5 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new UnknownConfiguredObjectException(String.format(",
                "+                throw new UnknownAlternateBindingException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "+                        getName(), destinationName));",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "index f460df734b..f35a68a49c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "@@ -30,7 +30,5 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(String exceptionMessage,",
                "-                                            final Class<? extends ConfiguredObject> category,",
                "-                                            final String name)",
                "+    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "     {",
                "-        super(exceptionMessage);",
                "+        super(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\");",
                "         _category = category;",
                "@@ -39,9 +37,2 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "-    {",
                "-        this(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\",",
                "-             category,",
                "-             name);",
                "-    }",
                "-",
                "     public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final UUID id)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index 39584d68b1..ceb9610de9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -122,2 +122,3 @@ import org.apache.qpid.server.virtualhost.MessageDestinationIsAlternateException",
                " import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -3536,5 +3537,5 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new UnknownConfiguredObjectException(String.format(",
                "+                throw new UnknownAlternateBindingException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "+                        getName(), destinationName));",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "new file mode 100644",
                "index 0000000000..c3f88e6a1c",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.virtualhost;",
                "+",
                "+import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                "+",
                "+public class UnknownAlternateBindingException extends IllegalConfigurationException",
                "+{",
                "+    public UnknownAlternateBindingException(final String message)",
                "+    {",
                "+        super(message);",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index ccaee39f7a..5af1cef2d5 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -64,3 +64,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.ErrorCodes;",
                "@@ -88,2 +87,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -954,3 +954,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch(UnknownConfiguredObjectException e)",
                "+                catch(UnknownAlternateBindingException e)",
                "                 {",
                "@@ -958,3 +958,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                     exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                                                                \"Unknown alternate exchange \" + e.getName());",
                "+                                                                \"Unknown alternate exchange \" + alternateExchangeName);",
                "                 }",
                "@@ -1543,7 +1543,5 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "+            final String alternateExchangeName = method.getAlternateExchange();",
                "             try",
                "             {",
                "-",
                "-                final String alternateExchangeName = method.getAlternateExchange();",
                "-",
                "                 final Map<String, Object> arguments = QueueArgumentsConverter.convertWireArgsToModel(queueName,",
                "@@ -1605,2 +1603,7 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             }",
                "+            catch (UnknownAlternateBindingException e)",
                "+            {",
                "+                exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "+                          \"Unknown alternate exchange \" + alternateExchangeName);",
                "+            }",
                "             catch (IllegalArgumentException | IllegalConfigurationException e)",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 07d0f918ba..d942abd721 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -85,3 +85,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.ErrorCodes;",
                "@@ -105,2 +104,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                "@@ -2644,2 +2644,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 String typeString = type == null ? null : type.toString();",
                "+                String alternateExchangeName = null;",
                "                 try",
                "@@ -2661,5 +2662,6 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                     {",
                "-                        validateAlternateExchangeIsNotQueue(virtualHost, String.valueOf(alternateExchange));",
                "+                        alternateExchangeName = String.valueOf(alternateExchange);",
                "+                        validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "                         attributes.put(Exchange.ALTERNATE_BINDING,",
                "-                                       Collections.singletonMap(AlternateBinding.DESTINATION, alternateExchange));",
                "+                                       Collections.singletonMap(AlternateBinding.DESTINATION, alternateExchangeName));",
                "                     }",
                "@@ -2722,5 +2724,5 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 }",
                "-                catch (UnknownConfiguredObjectException e)",
                "+                catch (UnknownAlternateBindingException e)",
                "                 {",
                "-                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getName());",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", alternateExchangeName);",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -3002,3 +3004,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-",
                "+            String alternateExchangeName = null;",
                "             try",
                "@@ -3010,3 +3012,4 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    validateAlternateExchangeIsNotQueue(virtualHost, String.valueOf(alternateExchange));",
                "+                    alternateExchangeName = String.valueOf(alternateExchange);",
                "+                    validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "                 }",
                "@@ -3128,5 +3131,5 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             }",
                "-            catch (UnknownConfiguredObjectException e)",
                "+            catch (UnknownAlternateBindingException e)",
                "             {",
                "-                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getName());",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", alternateExchangeName);",
                "                 _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c45aea4c41a7c389c58ede39e8cb8913b25cfab2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524086051,
            "hunks": 7,
            "message": "QPID-8164: Make sure that only own connection consumers can consume from JMS temporary destinations",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index ec875e1488..cd8eb83300 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -30,2 +30,3 @@ import java.text.MessageFormat;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -66,2 +67,3 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.Exchange;",
                "+import org.apache.qpid.server.model.ExclusivityPolicy;",
                " import org.apache.qpid.server.model.NamedAddressSpace;",
                "@@ -717,3 +719,6 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "         {",
                "-            MessageSource tempSource = createDynamicSource(link, source.getDynamicNodeProperties());",
                "+            final Set<Symbol> sourceCapabilities = source.getCapabilities() == null",
                "+                    ? Collections.emptySet()",
                "+                    : new HashSet<>(Arrays.asList(source.getCapabilities()));",
                "+            MessageSource tempSource = createDynamicSource(link, source.getDynamicNodeProperties(), sourceCapabilities);",
                "             if(tempSource != null)",
                "@@ -791,3 +796,5 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "-    private MessageSource createDynamicSource(final Link_1_0<?, ?> link, Map properties) throws AmqpErrorException",
                "+    private MessageSource createDynamicSource(final Link_1_0<?, ?> link,",
                "+                                              Map properties,",
                "+                                              final Set<Symbol> capabilities) throws AmqpErrorException",
                "     {",
                "@@ -799,2 +806,8 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "+            if (capabilities.contains(Symbol.valueOf(\"temporary-queue\"))",
                "+                || capabilities.contains(Symbol.valueOf(\"temporary-topic\")))",
                "+            {",
                "+                attributes.put(Queue.EXCLUSIVE, ExclusivityPolicy.CONNECTION);",
                "+            }",
                "+",
                "             return Subject.doAs(getSubjectWithAddedSystemRights(),",
                "@@ -831,2 +844,6 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "             }",
                "+            else if (capabilitySet.contains(Symbol.valueOf(\"temporary-queue\")))",
                "+            {",
                "+                attributes.put(Queue.EXCLUSIVE, ExclusivityPolicy.CONNECTION);",
                "+            }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 91ab75bafb..cc689b9f6d 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -441,2 +441,6 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "             }",
                "+            if (desiredCapabilities.contains(Symbol.valueOf(\"temporary-queue\")))",
                "+            {",
                "+                targetCapabilities.add(Symbol.valueOf(\"temporary-queue\"));",
                "+            }",
                "             if (desiredCapabilities.contains(Symbol.valueOf(\"topic\")))"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8164": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "73d435034dba9ab870e29a3277e6842f9519c551"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8164",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16d2ece75a5cbf286c9cae56741fb62af2a0cc0a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515774792,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Remove AMQP 0-x client specific AMQPEncodedMapMessageTest after moving test into client system tests",
            "diff": [
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 248aba9a6d..be9a0b985c 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -31,5 +31,2 @@ org.apache.qpid.client.HeartbeatTest#*",
                "-// This is a test of the MapMessage implementation for the 0-x client",
                "-org.apache.qpid.client.message.AMQPEncodedMapMessageTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent"
            ],
            "changed_files": [
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "851ca949ce36225107588d464acb32056c60a60f"
                ],
                [
                    "no-tag",
                    "cb36ee7b0cdc26416ef921a0f8e17cd0ef70bdec"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "02cf0ff16722cab8a6678f5af4472ee4b678f6bd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516103409,
            "hunks": 15,
            "message": "QPID-8079: [Broker-J] Ensure that actions associated with AsyncCommand are rolled back if the underlying future completes unsucessfully (cherry picked from commit 5fa398cfc2141d6ec090df3464f5bcbf63d7b023)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "index 1f65aa3962..32e3a6cf83 100755",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "@@ -214,3 +214,3 @@ public class AsyncAutoCommitTransaction implements ServerTransaction",
                "                 enqueueRecord = txn.enqueueMessage(queue, message);",
                "-                future = txn.commitTranAsync((Void) null);",
                "+                future = txn.commitTranAsync(null);",
                "                 txn = null;",
                "@@ -234,3 +234,3 @@ public class AsyncAutoCommitTransaction implements ServerTransaction",
                "                 {",
                "-                    underlying.postCommit(enqueueRecord);",
                "+                    underlying.onRollback();",
                "                 }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "new file mode 100644",
                "index 0000000000..29ce605360",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.server.txn;",
                "+",
                "+import java.util.concurrent.ExecutionException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "+",
                "+public class AsyncCommand",
                "+{",
                "+    private final ListenableFuture<Void> _future;",
                "+    private ServerTransaction.Action _action;",
                "+",
                "+    public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _future = future;",
                "+        _action = action;",
                "+    }",
                "+",
                "+    public void complete()",
                "+    {",
                "+        boolean interrupted = false;",
                "+        boolean success = false;",
                "+        try",
                "+        {",
                "+            while (true)",
                "+            {",
                "+                try",
                "+                {",
                "+                    _future.get();",
                "+                    break;",
                "+                }",
                "+                catch (InterruptedException e)",
                "+                {",
                "+                    interrupted = true;",
                "+                }",
                "+",
                "+            }",
                "+            success = true;",
                "+        }",
                "+        catch(ExecutionException e)",
                "+        {",
                "+            if(e.getCause() instanceof RuntimeException)",
                "+            {",
                "+                throw (RuntimeException)e.getCause();",
                "+            }",
                "+            else if(e.getCause() instanceof Error)",
                "+            {",
                "+                throw (Error) e.getCause();",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new ServerScopedRuntimeException(e.getCause());",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            if(interrupted)",
                "+            {",
                "+                Thread.currentThread().interrupt();",
                "+            }",
                "+            if (success)",
                "+            {",
                "+                _action.postCommit();",
                "+            }",
                "+            else",
                "+            {",
                "+                _action.onRollback();",
                "+            }",
                "+            _action = null;",
                "+        }",
                "+    }",
                "+",
                "+    public boolean isReadyForCompletion()",
                "+    {",
                "+        return _future.isDone();",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index f2bb0cc9ab..b224fa6352 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -58,3 +58,2 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.ConcurrentSkipListMap;",
                "-import java.util.concurrent.ExecutionException;",
                " import java.util.concurrent.Semaphore;",
                "@@ -70,2 +69,3 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.logging.LogMessage;",
                "@@ -99,3 +99,2 @@ import org.apache.qpid.server.txn.UnknownDtxBranchException;",
                " import org.apache.qpid.server.util.Action;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -1638,61 +1637,2 @@ public class ServerSession extends SessionInvoker",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof Error)",
                "-                {",
                "-                    throw (Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-",
                "-        boolean isReadyForCompletion()",
                "-        {",
                "-            return _future.isDone();",
                "-        }",
                "-    }",
                "-",
                "     public void setModelObject(final Session_0_10 session)",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index a12b483d6e..70de9ccdb0 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -40,3 +40,2 @@ import java.util.Set;",
                " import java.util.UUID;",
                "-import java.util.concurrent.ExecutionException;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -97,2 +96,3 @@ import org.apache.qpid.server.transport.AMQPConnection;",
                " import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.LocalTransaction;",
                "@@ -100,3 +100,2 @@ import org.apache.qpid.server.txn.ServerTransaction;",
                " import org.apache.qpid.server.util.Action;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " import org.apache.qpid.server.virtualhost.MessageDestinationIsAlternateException;",
                "@@ -1613,56 +1612,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof Error)",
                "-                {",
                "-                    throw (Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index aebff2eba1..2d2b2061c3 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -35,3 +35,2 @@ import java.util.Objects;",
                " import java.util.Set;",
                "-import java.util.concurrent.ExecutionException;",
                "@@ -71,2 +70,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.ReceiverSettleMode;",
                " import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -74,3 +74,2 @@ import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -620,56 +619,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof java.lang.Error)",
                "-                {",
                "-                    throw (java.lang.Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-    }",
                "-",
                "     private static class PendingDispositionHolder"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8079": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5fa398cfc2141d6ec090df3464f5bcbf63d7b023"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8079",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48fb97c6f99c615fea46e6f6506d78ce27184315",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515799967,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x HeartbeatTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 5c197e73b1..50fadaf67a 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -104,6 +104,2 @@ org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-// QPID-2796 : JMS client for AMQP 0-10 only sends heartbeats in response to heartbeats from the server, not timeout based",
                "-org.apache.qpid.client.HeartbeatTest#testUnidirectionalHeartbeating",
                "-org.apache.qpid.client.HeartbeatTest#testHeartbeatsEnabledBrokerSide",
                "-",
                " // CPP Broker does not timeout connections with no activity like the Qpid Broker-J",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index be9a0b985c..64957e3c89 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -28,5 +28,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// This test mainly covers the AMQP 0-x client's heartbeating implementation",
                "-org.apache.qpid.client.HeartbeatTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "588f2ca7fecc37a11e8671c9eb58beed9bfb129a"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "359b6ffd198ad11ddf7e7430755d7ddb053e57ba",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519849306,
            "hunks": 13,
            "message": "NO-JIRA: Add AMQP 1.0 protocol tests for source filter",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 0a9f882ba8..77f20d0ff1 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -59,2 +59,3 @@ import org.apache.qpid.server.protocol.v1_0.type.messaging.AmqpValue;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.AmqpValueSection;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.Filter;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                "@@ -113,2 +114,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     private UnsignedInteger _latestDeliveryId;",
                "+    private Map<String, Object> _latestDeliveryApplicationProperties;",
                "@@ -492,2 +494,11 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+",
                "+    public Interaction attachSourceFilter(final Map<Symbol, Filter> filters)",
                "+    {",
                "+        Source source = ((Source) _attach.getSource());",
                "+        source.setFilter(filters);",
                "+        _attach.setSource(source);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction attachTargetAddress(final String address)",
                "@@ -1073,2 +1084,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "         _decodedLatestDelivery = messageDecoder.getData();",
                "+        _latestDeliveryApplicationProperties = messageDecoder.getApplicationProperties();",
                "         _latestDelivery = null;",
                "@@ -1087,2 +1099,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public Map<String, Object> getLatestDeliveryApplicationProperties()",
                "+    {",
                "+        return _latestDeliveryApplicationProperties;",
                "+    }",
                "+",
                "     private List<Transfer> receiveAllTransfers(final Class<?>... ignore) throws Exception",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java",
                "index 1a513f7c9f..0df1abd6d1 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java",
                "@@ -26,2 +26,3 @@ import java.nio.ByteBuffer;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.Iterator;",
                "@@ -29,2 +30,3 @@ import java.util.LinkedList;",
                " import java.util.List;",
                "+import java.util.Map;",
                "@@ -203,2 +205,12 @@ public class MessageDecoder",
                "     }",
                "+",
                "+    public Map<String, Object> getApplicationProperties() throws AmqpErrorException",
                "+    {",
                "+        parse();",
                "+        if (_applicationPropertiesSection != null)",
                "+        {",
                "+            return _applicationPropertiesSection.getValue();",
                "+        }",
                "+        return Collections.emptyMap();",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "index 084937613a..28976613f9 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "@@ -25,2 +25,3 @@ import java.util.LinkedList;",
                " import java.util.List;",
                "+import java.util.Map;",
                "@@ -28,2 +29,3 @@ import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.AmqpValue;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.ApplicationProperties;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.EncodingRetainingSection;",
                "@@ -37,2 +39,3 @@ public class MessageEncoder",
                "     private List<String> _data = new LinkedList<>();",
                "+    private Map<String, Object> _applicationProperties;",
                "@@ -53,2 +56,7 @@ public class MessageEncoder",
                "+    public void setApplicationProperties(Map<String, Object> applicationProperties)",
                "+    {",
                "+        _applicationProperties = applicationProperties;",
                "+    }",
                "+",
                "     public QpidByteBuffer getPayload()",
                "@@ -66,2 +74,7 @@ public class MessageEncoder",
                "+        if (_applicationProperties != null)",
                "+        {",
                "+            payload.add(new ApplicationProperties(_applicationProperties).createEncodingRetainingSection().getEncodedForm());",
                "+        }",
                "+",
                "         if (_data.isEmpty())"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageDecoder.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "588c65f77406318c1884cf0aed37bf74f1f495ae",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516524495,
            "hunks": 11,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x client specific test failover to client suite",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index ba925a17f3..5636a05f29 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -62,7 +62,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                " org.apache.qpid.server.store.StoreOverfullTest#*",
                "-// 0-8/0-9/0-9-1 and/or Qpid Broker-J specific failover tests related to the above Producer Flow Control mechanisms",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "@@ -85,5 +80,2 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "@@ -100,4 +92,2 @@ org.apache.qpid.systest.rest.acl.*",
                "-// Exclude failover tests requiring virtual host functionality",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "diff --git a/test-profiles/ExternalBrokerTests b/test-profiles/ExternalBrokerTests",
                "index 1abe0e6d62..969b9272a7 100644",
                "--- a/test-profiles/ExternalBrokerTests",
                "+++ b/test-profiles/ExternalBrokerTests",
                "@@ -19,10 +19 @@",
                "-#These tests use external spawned brokers",
                "-",
                "-#=============================",
                "-# In the java-mms.0-10 profile",
                "-#=============================",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-org.apache.qpid.test.client.failover.FailoverTest#*",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index dace6ea3a8..30176f1119 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -23,5 +23,2 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsing",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "@@ -34,15 +31,4 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                "-// These tests test the behaviour of 0-8..-0-9-1 specific system property qpid.failover_method_timeout",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-",
                " org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091",
                "-// QPID-6722: Race client side means that session close can end in exception when failover is in progress.",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testConnectionCloseInterruptsFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testConnectionCloseInterruptsFailover",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index d52d70ec41..4b385c174e 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -22,8 +22,2 @@ org.apache.qpid.jndi.PropertiesFileInitialContextFactoryTest#*",
                "-// Exclude Address based tests",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent",
                "@@ -52,9 +46,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                "-// Failover tests are tests of the 0-x client behaviour",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-org.apache.qpid.test.client.failover.FailoverTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index c89f81221f..538a93ed1b 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -26,5 +26,2 @@ org.apache.qpid.test.client.message.JMSDestinationTest#testReceiveResend",
                "-// The new addressing based syntax is not supported for AMQP 0-8/0-9 versions",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-",
                " // Those tests are written against the 0.10 path",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index d4052deace..f397a12b05 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -36,5 +36 @@ org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualH",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.server.failover.FailoverMethodTest#testNoFailover",
                "-"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/ExternalBrokerTests",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "799247db22b5bb77001f09299ca3da698e2f9b5d"
                ],
                [
                    "no-tag",
                    "c793b7276c13a9a06e5269932480652bcfa68565"
                ],
                [
                    "no-tag",
                    "b6934dfcbc07c9f2ddd9c79e5a07c1d2245df3f4"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3a6893e464ec320a7bf4d8ab988c914be8b8f8d8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523458054,
            "hunks": 23,
            "message": "QPID-8158: [Broker-J] [System Tests] Refactor remaining system tests extending QpidBrokerTestCase",
            "diff": [
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index eefb5bc91a..b81f3b1d43 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -59,3 +59,8 @@",
                "       <artifactId>qpid-systests-spawn-admin</artifactId>",
                "-      <version>${project.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.qpid</groupId>",
                "+      <artifactId>qpid-systests-jms-core</artifactId>",
                "       <scope>test</scope>",
                "diff --git a/pom.xml b/pom.xml",
                "index 93ee99138d..5b56477779 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -462,2 +462,8 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-http</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index eec0c5dbb5..57b724f314 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -67,2 +67,8 @@",
                "+    <dependency>",
                "+      <groupId>org.apache.qpid</groupId>",
                "+      <artifactId>qpid-systests-http</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "   </dependencies>",
                "@@ -70,10 +76,2 @@",
                "   <build>",
                "-    <resources>",
                "-      <resource>",
                "-          <directory>src/main/resources</directory>",
                "-      </resource>",
                "-      <resource>",
                "-          <directory>${test.resource.directory}/test-profiles/test_resources</directory>",
                "-      </resource>",
                "-    </resources>",
                "     <testResources>",
                "@@ -88,2 +86,8 @@",
                "       </testResource>",
                "+      <testResource>",
                "+        <directory>${basedir}/../test-profiles/test_resources/ssl</directory>",
                "+        <includes>",
                "+          <include>*.jks</include>",
                "+        </includes>",
                "+      </testResource>",
                "     </testResources>",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index 91255ef184..04f37ea81e 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -44,2 +44,4 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                " {",
                "+    public static final String DEFAULT_BROKER_CONFIG = \"classpath:config-http-management-tests.json\";",
                "+",
                "     @Rule",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "index 5ac57cf15b..1d54210887 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "@@ -134,2 +134,9 @@ public class AmqpManagementFacade",
                "+        return receiveManagementResponse(consumer, replyToDestination, 201);",
                "+    }",
                "+",
                "+    private Map<String, Object> receiveManagementResponse(final MessageConsumer consumer,",
                "+                                                          final Destination replyToDestination,",
                "+                                                          final int responseStatus) throws JMSException",
                "+    {",
                "         Message response = consumer.receive(5000);",
                "@@ -140,3 +147,3 @@ public class AmqpManagementFacade",
                "                 int statusCode = response.getIntProperty(\"statusCode\");",
                "-                if (statusCode == 201)",
                "+                if (statusCode == responseStatus)",
                "                 {",
                "@@ -165,2 +172,6 @@ public class AmqpManagementFacade",
                "                     }",
                "+                    else",
                "+                    {",
                "+                        return Collections.emptyMap();",
                "+                    }",
                "                 }",
                "@@ -172,3 +183,3 @@ public class AmqpManagementFacade",
                "-            throw new IllegalArgumentException(\"Cannot parse the results from a management query\");",
                "+            throw new IllegalArgumentException(\"Cannot parse the results from a management response\");",
                "         }",
                "@@ -184,2 +195,30 @@ public class AmqpManagementFacade",
                "+    public Map<String,Object> updateEntityUsingAmqpManagementAndReceiveResponse(final String name,",
                "+                                                                  final String type,",
                "+                                                                  Map<String, Object> attributes,",
                "+                                                                  final Session session)",
                "+            throws JMSException",
                "+    {",
                "+",
                "+        Destination replyToDestination;",
                "+        Destination replyConsumerDestination;",
                "+        if (_protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            replyToDestination = session.createTemporaryQueue();",
                "+            replyConsumerDestination = replyToDestination;",
                "+        }",
                "+        else",
                "+        {",
                "+            replyToDestination = session.createQueue(AMQP_0_X_REPLY_TO_DESTINATION);",
                "+            replyConsumerDestination = session.createQueue(AMQP_0_X_CONSUMER_REPLY_DESTINATION);",
                "+        }",
                "+",
                "+        MessageConsumer consumer = session.createConsumer(replyConsumerDestination);",
                "+",
                "+        updateEntityUsingAmqpManagement(name, type, attributes, replyToDestination, session);",
                "+",
                "+        return receiveManagementResponse(consumer, replyToDestination, 200);",
                "+    }",
                "+",
                "+",
                "     public void updateEntityUsingAmqpManagement(final String name,",
                "@@ -189,2 +228,12 @@ public class AmqpManagementFacade",
                "             throws JMSException",
                "+    {",
                "+        updateEntityUsingAmqpManagement(name, type, attributes, null, session);",
                "+    }",
                "+",
                "+    private void updateEntityUsingAmqpManagement(final String name,",
                "+                                                 final String type,",
                "+                                                 Map<String, Object> attributes,",
                "+                                                 Destination replyToDestination,",
                "+                                                 final Session session)",
                "+            throws JMSException",
                "     {",
                "@@ -197,2 +246,3 @@ public class AmqpManagementFacade",
                "         createMessage.setStringProperty(\"key\", name);",
                "+        createMessage.setJMSReplyTo(replyToDestination);",
                "         for (Map.Entry<String, Object> entry : attributes.entrySet())",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 2fa7b16ab6..4f113b4178 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -69,2 +69,3 @@ public interface ConnectionBuilder",
                "     ConnectionFactory buildConnectionFactory() throws NamingException;",
                "+    String buildConnectionURL();",
                " }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index e654672f47..c264b6b86f 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -54,2 +54,4 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                " {",
                "+    public static final String DEFAULT_BROKER_CONFIG = \"classpath:config-jms-tests.json\";",
                "+",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(JmsTestBase.class);",
                "@@ -234,3 +236,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "         {",
                "-            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+            _managementFacade.updateEntityUsingAmqpManagementAndReceiveResponse(entityName, entityType, attributes, session);",
                "         }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 262d20ba10..b9590f655b 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -274,2 +274,23 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     public ConnectionFactory buildConnectionFactory() throws NamingException",
                "+    {",
                "+        String connectionUrl = buildConnectionURL();",
                "+",
                "+        final Hashtable<Object, Object> initialContextEnvironment = new Hashtable<>();",
                "+        initialContextEnvironment.put(Context.INITIAL_CONTEXT_FACTORY,",
                "+                                      \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\");",
                "+        final String factoryName = \"connectionFactory\";",
                "+        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, connectionUrl);",
                "+        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "+        try",
                "+        {",
                "+            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            initialContext.close();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public String buildConnectionURL()",
                "     {",
                "@@ -354,17 +375,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "         }",
                "-",
                "-        final Hashtable<Object, Object> initialContextEnvironment = new Hashtable<>();",
                "-        initialContextEnvironment.put(Context.INITIAL_CONTEXT_FACTORY,",
                "-                                      \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\");",
                "-        final String factoryName = \"connectionFactory\";",
                "-        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, cUrlBuilder.toString());",
                "-        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "-        try",
                "-        {",
                "-            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "-        }",
                "-        finally",
                "-        {",
                "-            initialContext.close();",
                "-        }",
                "+        return cUrlBuilder.toString();",
                "     }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index b5be7d247d..b5cb30429b 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -282,2 +282,21 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+        final String connectionUrl = buildConnectionURL();",
                "+",
                "+        final String factoryName = \"connection\";",
                "+        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, connectionUrl);",
                "+",
                "+        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "+        try",
                "+        {",
                "+            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            initialContext.close();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public String buildConnectionURL()",
                "+    {",
                "         final StringBuilder connectionUrlBuilder = new StringBuilder();",
                "@@ -346,15 +365,3 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "         }",
                "-",
                "-        final String factoryName = \"connection\";",
                "-        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, connectionUrlBuilder.toString());",
                "-",
                "-        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "-        try",
                "-        {",
                "-            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "-        }",
                "-        finally",
                "-        {",
                "-            initialContext.close();",
                "-        }",
                "+        return connectionUrlBuilder.toString();",
                "     }",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "index 16e26e29fd..350a43193b 100644",
                "--- a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "@@ -341,6 +341,7 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "         invokeManagementOperation(true, (amqpManagementFacade, session) -> {",
                "-            amqpManagementFacade.updateEntityUsingAmqpManagement(_virtualHostNodeName,",
                "-                                                                 session,",
                "-                                                                 AMQP_NODE_TYPE,",
                "-                                                                 Collections.singletonMap(\"desiredState\", \"ACTIVE\"));",
                "+            amqpManagementFacade.updateEntityUsingAmqpManagementAndReceiveResponse(_virtualHostNodeName,",
                "+                                                                                   AMQP_NODE_TYPE,",
                "+                                                                                   Collections.singletonMap(",
                "+                                                                                           \"desiredState\",",
                "+                                                                                           \"ACTIVE\"), session);",
                "             return null;",
                "@@ -356,6 +357,8 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "         invokeManagementOperation(true, (amqpManagementFacade, session) -> {",
                "-            amqpManagementFacade.updateEntityUsingAmqpManagement(_virtualHostNodeName,",
                "-                                                                 session,",
                "-                                                                 AMQP_NODE_TYPE,",
                "-                                                                 Collections.singletonMap(\"desiredState\", \"STOPPED\"));",
                "+            amqpManagementFacade.updateEntityUsingAmqpManagementAndReceiveResponse(_virtualHostNodeName,",
                "+                                                                                   AMQP_NODE_TYPE,",
                "+                                                                                   Collections.singletonMap(",
                "+                                                                                           \"desiredState\",",
                "+                                                                                           \"STOPPED\"),",
                "+                                                                                   session);",
                "             return null;",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json b/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "index 029457fea9..3d4df12a66 100644",
                "--- a/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "@@ -71,2 +71,5 @@",
                "       \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "     }, {"
            ],
            "changed_files": [
                "bdbstore/systests/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4e6c44d10d459b9dd0b55c2d4c0bb1347c014d5c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516800119,
            "hunks": 8,
            "message": "QPID-8032 : [Broker-J] Address review comments (cherry picked from commit c6cde241692c8840ad2c36e6ce4645be60d8adb7)",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index b224fa6352..e2211dd690 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -47,2 +47,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.Deque;",
                " import java.util.HashMap;",
                "@@ -50,3 +51,2 @@ import java.util.HashSet;",
                " import java.util.Iterator;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -57,2 +57,3 @@ import java.util.UUID;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentLinkedDeque;",
                " import java.util.concurrent.ConcurrentSkipListMap;",
                "@@ -111,2 +112,3 @@ public class ServerSession extends SessionInvoker",
                "     private final Set<Object> _blockingEntities = Collections.synchronizedSet(new HashSet<>());",
                "+    private final Deque<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedDeque<>();",
                "@@ -1598,4 +1600,2 @@ public class ServerSession extends SessionInvoker",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "-",
                "     public void completeAsyncCommands()",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 70de9ccdb0..e106a3f828 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -35,3 +35,2 @@ import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -40,2 +39,3 @@ import java.util.Set;",
                " import java.util.UUID;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -157,3 +157,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "54bc670f0dfa01980f823dbe009f70d1c15b0bd7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523545713,
            "hunks": 77,
            "message": "QPID-8158: [Broker-J] [System Tests] Clean-up maven building scripts",
            "diff": [
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 4c52564fc9..9a7c050e8e 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -31,8 +31,2 @@",
                "-  <properties>",
                "-    <test.working.directory>${basedir}/../..</test.working.directory>",
                "-    <test.resource.directory>${basedir}/../..</test.resource.directory>",
                "-    <test.systest.resource.directory>${basedir}/../../systests</test.systest.resource.directory>",
                "-  </properties>",
                "-",
                "   <dependencies>",
                "@@ -100,49 +94,2 @@",
                "       </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-resources-plugin</artifactId>",
                "-        <!--version specified in parent pluginManagement -->",
                "-        <executions>",
                "-          <!-- copy the bdbstore bin contents to where the tests expect them -->",
                "-          <execution>",
                "-            <id>copy-bdbstore-bin-resources</id>",
                "-            <phase>generate-resources</phase>",
                "-            <goals>",
                "-              <goal>copy-resources</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${qpid.home}</outputDirectory>",
                "-              <resources>",
                "-                <resource>",
                "-                  <directory>${basedir}/..</directory>",
                "-                  <includes>",
                "-                    <include>bin/</include>",
                "-                  </includes>",
                "-                </resource>",
                "-              </resources>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-      <plugin>",
                "-      <groupId>org.apache.maven.plugins</groupId>",
                "-      <artifactId>maven-antrun-plugin</artifactId>",
                "-        <executions>",
                "-          <!-- fix the fact that the maven-resources-plugin copy-resources doesn't maintain file permissions in unix -->",
                "-          <execution>",
                "-            <id>fix-bdb-script-permissions</id>",
                "-            <phase>package</phase>",
                "-            <configuration>",
                "-              <target>",
                "-                <chmod perm=\"755\">",
                "-                  <fileset dir=\"${qpid.home}\">",
                "-                    <include name=\"bin/**\" />",
                "-                  </fileset>",
                "-                </chmod>",
                "-              </target>",
                "-            </configuration>",
                "-            <goals><goal>run</goal></goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "     </plugins>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index b392064fc6..335068e369 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -31,6 +31,2 @@",
                "-  <properties>",
                "-    <qpid.home>${basedir}/../</qpid.home> <!-- override for broker tests -->",
                "-  </properties>",
                "-",
                "   <dependencies>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index 225a50ac71..7b84d7bbb1 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -31,6 +31,2 @@",
                "-  <properties>",
                "-    <qpid.home>${basedir}/../</qpid.home> <!-- override to allow the test exclusions to be found -->",
                "-  </properties>",
                "-",
                "   <dependencies>",
                "diff --git a/pom.xml b/pom.xml",
                "index a60b7e45b3..93930d323c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -82,2 +82,3 @@",
                "     <java.target>1.8</java.target>",
                "+    <skipTests>false</skipTests>",
                "@@ -89,4 +90,2 @@",
                "-    <!-- test profile properties and defaults-->",
                "-    <qpid.home>${basedir}</qpid.home> <!-- override for broker tests -->",
                "     <!-- Directory used for per test log file output -->",
                "@@ -95,17 +94,3 @@",
                "     <profile>java-mms.1-0</profile>",
                "-    <profile.broker.language>java</profile.broker.language>",
                "-    <profile.broker.type>internal</profile.broker.type>",
                "-    <profile.broker.stopped>Exception</profile.broker.stopped>",
                "-    <profile.broker.ready>BRK-1004</profile.broker.ready>",
                "-    <profile.broker.amqpTcpPortRegEx>BRK-1002 : Starting : Listening on TCP port (\\d+)</profile.broker.amqpTcpPortRegEx>",
                "-    <profile.broker.amqpTlsPortRegEx>BRK-1002 : Starting : Listening on SSL port (\\d+)</profile.broker.amqpTlsPortRegEx>",
                "-    <profile.broker.httpTcpPortRegEx>MNG-1002 : Starting : HTTP : Listening on TCP port (\\d+)</profile.broker.httpTcpPortRegEx>",
                "-    <profile.broker.httpTlsPortRegEx>MNG-1002 : Starting : HTTP : Listening on SSL port (\\d+)</profile.broker.httpTlsPortRegEx>",
                "-    <profile.broker.command>\"${qpid.home}${file.separator}bin${file.separator}qpid-server\" -sp \"${at.sign}STORE_PATH\" -st ${at.sign}STORE_TYPE -prop test.port=${at.sign}PORT -prop \"qpid.work_dir=${at.sign}QPID_WORK\"</profile.broker.command>",
                "-    <profile.broker.command.windows>\"${qpid.home}${file.separator}bin${file.separator}qpid-server.bat\" -sp \"${at.sign}STORE_PATH\" -st ${at.sign}STORE_TYPE -prop test.port=${at.sign}PORT -prop \"qpid.work_dir=${at.sign}QPID_WORK\"</profile.broker.command.windows>",
                "-    <profile.test.excludes>Excludes JavaExcludes ${profile}.excludes ${profile.specific.excludes}</profile.test.excludes>",
                "-    <profile.specific.excludes>JavaTransientExcludes Java010Excludes</profile.specific.excludes>",
                "     <profile.broker.version>1.0</profile.broker.version>",
                "-    <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-    <profile.broker.persistent>false</profile.broker.persistent>",
                "     <profile.virtualhostnode.type>Memory</profile.virtualhostnode.type>",
                "@@ -774,10 +759,3 @@",
                "                 <echo>[profile] ${profile}</echo>",
                "-                <echo>[profile.broker.language] ${profile.broker.language}</echo>",
                "-                <echo>[profile.broker.type] ${profile.broker.type}</echo>",
                "-                <echo>[profile.broker.command] ${profile.broker.command}</echo>",
                "-                <echo>[profile.specific.excludes] ${profile.specific.excludes}</echo>",
                "-                <echo>[profile.test.excludes] ${profile.test.excludes}</echo>",
                "                 <echo>[profile.broker.version] ${profile.broker.version}</echo>",
                "-                <echo>[profile.test.amqp_port_protocols] ${profile.test.amqp_port_protocols}</echo>",
                "-                <echo>[profile.broker.persistent] ${profile.broker.persistent}</echo>",
                "                 <echo>[profile.virtualhostnode.type] ${profile.virtualhostnode.type}</echo>",
                "@@ -801,5 +779,4 @@",
                "             <!-- Defaults -->",
                "-            <QPID_HOME>${qpid.home}</QPID_HOME>",
                "-            <broker.config>${qpid.home}${file.separator}etc${file.separator}config-systests.json</broker.config>",
                "             <qpid.dest_syntax>BURL</qpid.dest_syntax>",
                "+",
                "             <test.port>0</test.port>",
                "@@ -809,5 +786,2 @@",
                "             <test.port.alt.ssl>0</test.port.alt.ssl>",
                "-            <test.exclude>true</test.exclude>",
                "-            <test.mem>512M</test.mem>",
                "-            <profile.clustered>false</profile.clustered>",
                "@@ -815,16 +789,3 @@",
                "             <profile>${profile}</profile>",
                "-            <broker.language>${profile.broker.language}</broker.language>",
                "-            <broker.type>${profile.broker.type}</broker.type>",
                "-            <broker.stopped>${profile.broker.stopped}</broker.stopped>",
                "-            <broker.ready>${profile.broker.ready}</broker.ready>",
                "-            <broker.amqpTcpPortRegEx>${profile.broker.amqpTcpPortRegEx}</broker.amqpTcpPortRegEx>",
                "-            <broker.httpTcpPortRegEx>${profile.broker.httpTcpPortRegEx}</broker.httpTcpPortRegEx>",
                "-            <broker.amqpTlsPortRegEx>${profile.broker.amqpTlsPortRegEx}</broker.amqpTlsPortRegEx>",
                "-            <broker.httpTlsPortRegEx>${profile.broker.httpTlsPortRegEx}</broker.httpTlsPortRegEx>",
                "-            <broker.command>${profile.broker.command}</broker.command>",
                "-            <broker.command.windows>${profile.broker.command.windows}</broker.command.windows>",
                "-            <test.excludes>${profile.test.excludes}</test.excludes>",
                "             <broker.version>${profile.broker.version}</broker.version>",
                "-            <test.amqp_port_protocols>${profile.test.amqp_port_protocols}</test.amqp_port_protocols>",
                "-            <broker.persistent>${profile.broker.persistent}</broker.persistent>",
                "             <virtualhostnode.type>${profile.virtualhostnode.type}</virtualhostnode.type>",
                "@@ -1032,6 +993,3 @@",
                "         <profile>java-mms.0-10</profile>",
                "-        <profile.specific.excludes>JavaTransientExcludes Java010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>false</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>Memory</profile.virtualhostnode.type>",
                "@@ -1052,6 +1010,3 @@",
                "         <profile>java-mms.0-9-1</profile>",
                "-        <profile.specific.excludes>JavaTransientExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9-1</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>false</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>Memory</profile.virtualhostnode.type>",
                "@@ -1072,6 +1027,3 @@",
                "         <profile>java-mms.0-9</profile>",
                "-        <profile.specific.excludes>JavaTransientExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>false</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>Memory</profile.virtualhostnode.type>",
                "@@ -1092,6 +1044,3 @@",
                "         <profile>java-bdb.0-10</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes Java010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "         <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>BDB</profile.virtualhostnode.type>",
                "@@ -1111,6 +1060,3 @@",
                "         <profile>java-bdb.0-9-1</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes XAExcludes JavaPre010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9-1</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>BDB</profile.virtualhostnode.type>",
                "@@ -1130,6 +1076,3 @@",
                "         <profile>java-bdb.0-9</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes XAExcludes JavaPre010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>BDB</profile.virtualhostnode.type>",
                "@@ -1149,6 +1092,3 @@",
                "         <profile>java-dby-mem.0-10</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "@@ -1168,6 +1108,3 @@",
                "         <profile>java-dby-mem.0-9-1</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9-1</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "@@ -1187,6 +1124,3 @@",
                "         <profile>java-dby-mem.0-9</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "@@ -1206,6 +1140,3 @@",
                "         <profile>java-dby.0-10</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "@@ -1226,6 +1157,3 @@",
                "         <profile>java-dby.0-9-1</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9-1</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "@@ -1246,7 +1174,4 @@",
                "         <profile>java-dby.0-9</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "-        <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"ProvidedStore\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "@@ -1267,6 +1192,3 @@",
                "         <profile>java-mms.1-0</profile>",
                "-        <profile.specific.excludes>JavaTransientExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "         <profile.broker.version>1.0</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\",\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>false</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>Memory</profile.virtualhostnode.type>",
                "@@ -1287,6 +1209,3 @@",
                "         <profile>java-bdb.1-0</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaBDBExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "         <profile.broker.version>1.0</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>BDB</profile.virtualhostnode.type>",
                "@@ -1306,7 +1225,4 @@",
                "         <profile>java-dby.1-0</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "         <profile.broker.version>1.0</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "-        <profile.virtualhostnode.type>DERBY</profile.virtualhostnode.type>",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"ProvidedStore\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "@@ -1330,6 +1246,3 @@",
                "         <profile>java-json.1-0</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "         <profile.broker.version>1.0</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>JSON</profile.virtualhostnode.type>",
                "@@ -1348,6 +1261,3 @@",
                "         <profile>java-json.0-9-1</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-9-1</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>JSON</profile.virtualhostnode.type>",
                "@@ -1367,6 +1277,3 @@",
                "         <profile>java-json.0-10</profile>",
                "-        <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes Java010Excludes</profile.specific.excludes>",
                "         <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-        <profile.broker.persistent>true</profile.broker.persistent>",
                "         <profile.virtualhostnode.type>JSON</profile.virtualhostnode.type>",
                "@@ -1376,54 +1283,2 @@",
                "-    <profile>",
                "-      <id>cpp</id>",
                "-      <activation>",
                "-        <property>",
                "-          <name>profile</name>",
                "-          <value>cpp</value>",
                "-        </property>",
                "-      </activation>",
                "-      <properties>",
                "-        <profile>cpp</profile>",
                "-        <profile.broker.language>cpp</profile.broker.language>",
                "-        <profile.broker.type>spawned</profile.broker.type>",
                "-        <profile.broker.stopped>Exception constructed</profile.broker.stopped>",
                "-        <profile.broker.ready>Listening on TCP</profile.broker.ready>",
                "-        <profile.broker.amqpTcpPortRegEx>Listening on TCP/TCP6 port (\\d+)</profile.broker.amqpTcpPortRegEx>",
                "-        <profile.broker.amqpTlsPortRegEx>Listening for SSL connections on TCP/TCP6 port (\\d+)</profile.broker.amqpTlsPortRegEx>",
                "-        <profile.broker.httpTcpPortRegEx>x^</profile.broker.httpTcpPortRegEx>",
                "-        <profile.broker.httpTlsPortRegEx>x^</profile.broker.httpTlsPortRegEx>",
                "-        <profile.broker.command>\"${cpp-broker-dir}/qpidd\" -p ${at.sign}PORT --data-dir \"${at.sign}QPID_WORK\" -t --auth no --no-module-dir</profile.broker.command>",
                "-        <profile.broker.command.windows />",
                "-        <profile.test.excludes>Excludes CPPExcludes ${profile}.excludes ${profile.specific.excludes} cpp.excludes</profile.test.excludes>",
                "-        <profile.specific.excludes>CPPPrefetchExcludes CPPTransientExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>0-10</profile.broker.version>",
                "-        <profile.broker.persistent>false</profile.broker.persistent>",
                "-      </properties>",
                "-      <build>",
                "-        <plugins>",
                "-          <plugin>",
                "-            <groupId>org.apache.maven.plugins</groupId>",
                "-            <artifactId>maven-enforcer-plugin</artifactId>",
                "-            <executions>",
                "-              <execution>",
                "-                <id>enforce-cpp-broker-dir-defined</id>",
                "-                <goals>",
                "-                  <goal>enforce</goal>",
                "-                </goals>",
                "-                <configuration>",
                "-                  <rules>",
                "-                    <requireProperty>",
                "-                      <property>cpp-broker-dir</property>",
                "-                      <message>You must set a the CPP broker directory property for this profile. (e.g. -Dcpp-broker-dir=/somedir/cpp/src)</message>",
                "-                    </requireProperty>",
                "-                  </rules>",
                "-                  <fail>true</fail>",
                "-                </configuration>",
                "-              </execution>",
                "-            </executions>",
                "-          </plugin>",
                "-        </plugins>",
                "-      </build>",
                "-    </profile>",
                "-",
                "     <!-- Profile to update the Apache parent pom profile of the same name to prevent source assembly at java build level.-->",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 570292d201..afccd22fb9 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -31,6 +31,2 @@",
                "-  <properties>",
                "-    <test.systest.resource.directory>${basedir}/../systests</test.systest.resource.directory>",
                "-  </properties>",
                "-",
                "   <dependencies>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 2bc41b0693..4dade4ac17 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -33,9 +33,2 @@",
                "   <properties>",
                "-    <broker.home.dir>target${file.separator}qpid-broker${file.separator}${project.version}</broker.home.dir>",
                "-    <!-- test properties -->",
                "-    <qpid.home>${basedir}${file.separator}${broker.home.dir}</qpid.home>",
                "-",
                "-    <test.working.directory>${basedir}/..</test.working.directory>",
                "-    <test.resource.directory>${basedir}/..</test.resource.directory>",
                "-    <test.systest.resource.directory>${basedir}</test.systest.resource.directory>",
                "     <skip.systests>${skipTests}</skip.systests>",
                "@@ -78,3 +71,2 @@",
                "         <configuration>",
                "-          <workingDirectory>${test.working.directory}</workingDirectory>",
                "           <!-- Skip the default test phase, bind to the",
                "@@ -82,5 +74,2 @@",
                "           <skip>true</skip>",
                "-          <systemPropertyVariables>",
                "-            <test.output.dir>${test.output.dir}</test.output.dir>",
                "-          </systemPropertyVariables>",
                "           <skipTests>${skip.systests}</skipTests>",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "deleted file mode 100755",
                "index ba9a39e4c0..0000000000",
                "--- a/test-profiles/CPPExcludes",
                "+++ /dev/null",
                "@@ -1,112 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// the 0-10 c++ broker does not implement the extended LVQ semantics which the Qpid Broker-J does",
                "-org.apache.qpid.server.queue.ConflationQueueTest#*",
                "-",
                "-// InVM Broker tests",
                "-org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                "-",
                "-// QPID-1262, QPID-1119 : This test fails occasionally due to potential protocol issue.",
                "-org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-",
                "-// QPID-1727 , QPID-1726 :c++ broker does not support flow to disk on transient queues. Also it requries a persistent store impl. for Apache",
                "-org.apache.qpid.test.client.QueueBrowsingFlowToDiskTest#*",
                "-",
                "-// This test currently does not pick up the runtime location of the nonVm queueBacking store.",
                "-org.apache.qpid.test.unit.close.FlowToDiskBackingQueueDeleteTest#*",
                "-",
                "-// QPID-1730: the C++ server has a totally different logging mechanism. We should split this file differently",
                "-org.apache.qpid.server.AlertingTest#*",
                "-",
                "-// CPP Broker does not follow the same Logging convention as the Qpid Broker-J",
                "-org.apache.qpid.server.BrokerStartupTest#*",
                "-org.apache.qpid.server.logging.*",
                "-org.apache.qpid.server.logging.messages.*",
                "-org.apache.qpid.server.logging.subjects.*",
                "-org.apache.qpid.server.logging.actors.*",
                "-",
                "-// REST management is used in this test for validation",
                "-org.apache.qpid.server.queue.LiveQueueOperationsTest#*",
                "-",
                "-// QPID-2118 : JMS client for AMQP 0-10 has different error handling then 0-8 code path",
                "-org.apache.qpid.test.client.message.SelectorTest#testRuntimeSelectorError",
                "-",
                "-//QPID-3986 : Flow control invoked on total store disk usage",
                "-org.apache.qpid.server.store.StoreOverfullTest#*",
                "-",
                "-// Excluded because plugins from Qpid Broker-J are not used in CPP broker",
                "-org.apache.qpid.server.virtualhost.plugin.*",
                "-org.apache.qpid.info.test.*",
                "-org.apache.qpid.server.security.access.*",
                "-org.apache.qpid.server.security.access.plugins.*",
                "-org.apache.qpid.server.security.auth.manager.*",
                "-org.apache.qpid.server.security.acl.*",
                "-org.apache.qpid.server.configuration.*",
                "-org.apache.qpid.server.configuration.plugins.*",
                "-org.apache.qpid.server.security.firewall.FirewallConfigTest#*",
                "-org.apache.qpid.server.security.firewall.FirewallConfigurationTest#*",
                "-org.apache.qpid.server.plugins.PluginTest#*",
                "-",
                "-// Qpid Broker-J only",
                "-org.apache.qpid.server.SupportedProtocolVersionsTest#*",
                "-org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "-",
                "-// passwd script is a Qpid Broker-J specific command line tool",
                "-org.apache.qpid.scripts.QpidPasswdTest#*",
                "-",
                "-// QPID-3936: Exclude Performance Test Framework tests",
                "-org.apache.qpid.systest.disttest.*",
                "-org.apache.qpid.disttest.*",
                "-org.apache.qpid.systest.disttest.endtoend.*",
                "-",
                "-// Exclude REST API tests for Qpid Broker-J",
                "-org.apache.qpid.systest.rest.*",
                "-org.apache.qpid.systest.rest.acl.*",
                "-",
                "-",
                "-",
                "-org.apache.qpid.server.protocol.v0_8.*",
                "-",
                "-//Qpid Broker-J BDB System Tests",
                "-org.apache.qpid.server.store.berkeleydb.*",
                "-org.apache.qpid.server.store.berkeleydb.replication.*",
                "-org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-",
                "-// Qpid Broker-J Derby Tests",
                "-org.apache.qpid.server.store.derby.*",
                "-",
                "-# QPID-7156: Test requires a Broker with a virtualhost",
                "-org.apache.qpid.systests.jms_1_1.connection.BrokerClosesClientConnectionTest#testClientCloseOnVirtualHostStop",
                "-",
                "-#The C++ broker does not implement AMQP management",
                "-org.apache.qpid.systest.management.amqp.*",
                "-",
                "-# Exclude the JMS 2.0 test suite",
                "-org.apache.qpid.systests.jms_2_0.*",
                "-",
                "-# Exclude the AMQP 1.0 protocol test suite",
                "-org.apache.qpid.tests.protocol.v1_0.*",
                "-",
                "-# Tests require AMQP management",
                "-org.apache.qpid.server.queue.QueueDepthWithSelectorTest#test",
                "-org.apache.qpid.test.unit.message.UTF8Test#*",
                "-",
                "-",
                "-",
                "diff --git a/test-profiles/CPPNoPrefetchExcludes b/test-profiles/CPPNoPrefetchExcludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/CPPNoPrefetchExcludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/CPPPrefetchExcludes b/test-profiles/CPPPrefetchExcludes",
                "deleted file mode 100644",
                "index ca127edc05..0000000000",
                "--- a/test-profiles/CPPPrefetchExcludes",
                "+++ /dev/null",
                "@@ -1,22 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// those tests should be run with prefetch off",
                "-org.apache.qpid.client.SynchReceiveTest#testTwoConsumersInterleaved",
                "-org.apache.qpid.client.SynchReceiveTest#testIdleSecondConsumer",
                "diff --git a/test-profiles/CPPTransientExcludes b/test-profiles/CPPTransientExcludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/CPPTransientExcludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/Excludes b/test-profiles/Excludes",
                "deleted file mode 100644",
                "index 4a2bdfcc0c..0000000000",
                "--- a/test-profiles/Excludes",
                "+++ /dev/null",
                "@@ -1,18 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "diff --git a/test-profiles/ExternalBrokerTests b/test-profiles/ExternalBrokerTests",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/ExternalBrokerTests",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/IBMJDKExcludes b/test-profiles/IBMJDKExcludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/IBMJDKExcludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "deleted file mode 100755",
                "index aff6fb5d0f..0000000000",
                "--- a/test-profiles/Java010Excludes",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "-org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                "-",
                "-",
                "-# Exclude the JMS 2.0 test suite",
                "-org.apache.qpid.systests.jms_2_0.*",
                "-",
                "-// Exclude 1.0 protocol tests",
                "-org.apache.qpid.tests.protocol.v1_0.*",
                "-",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "deleted file mode 100644",
                "index 501ff3b923..0000000000",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ /dev/null",
                "@@ -1,25 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-//-----------------------------------------------------",
                "-// Tests which fail, indicating a potential issue or a missing feature",
                "-//-----------------------------------------------------",
                "-",
                "-",
                "-",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "deleted file mode 100644",
                "index 72d3d31da6..0000000000",
                "--- a/test-profiles/Java10Excludes",
                "+++ /dev/null",
                "@@ -1,31 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// Tests the interaction between the Broker's supported protocols and what the 0-x client agrees to",
                "-org.apache.qpid.server.SupportedProtocolVersionsTest#*",
                "-",
                "-// These tests assume names of queues backing durable subscriptions",
                "-org.apache.qpid.server.store.berkeleydb.BDBUpgradeTest#testConsumptionOfUpgradedMessages",
                "-org.apache.qpid.server.store.berkeleydb.BDBUpgradeTest#testDurableSubscriptionWithoutSelector",
                "-org.apache.qpid.server.store.berkeleydb.BDBUpgradeTest#testSelectorDurability",
                "-",
                "-// this test makes assumptions about the way the client uses sessions.",
                "-org.apache.qpid.systest.rest.SessionRestTest#*",
                "-",
                "-",
                "diff --git a/test-profiles/Java10UninvestigatedTestsExcludes b/test-profiles/Java10UninvestigatedTestsExcludes",
                "deleted file mode 100644",
                "index d436d43d23..0000000000",
                "--- a/test-profiles/Java10UninvestigatedTestsExcludes",
                "+++ /dev/null",
                "@@ -1,26 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// This file should eventually be removed as all the systests are moved to either",
                "-// working, defined as broken, or excluded as they test version specific functionality",
                "-",
                "-",
                "-",
                "-",
                "-",
                "diff --git a/test-profiles/JavaBDBExcludes b/test-profiles/JavaBDBExcludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/JavaBDBExcludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/JavaDerbyExcludes b/test-profiles/JavaDerbyExcludes",
                "deleted file mode 100644",
                "index 9411d0f4da..0000000000",
                "--- a/test-profiles/JavaDerbyExcludes",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-org.apache.qpid.server.store.berkeleydb.*",
                "-org.apache.qpid.server.store.berkeleydb.replication.*",
                "-org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-",
                "diff --git a/test-profiles/JavaExcludes b/test-profiles/JavaExcludes",
                "deleted file mode 100644",
                "index ba4eaf1408..0000000000",
                "--- a/test-profiles/JavaExcludes",
                "+++ /dev/null",
                "@@ -1,21 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-// Test runs for 2 minutes testing that subtraction works",
                "-org.apache.qpid.server.util.SerialTest#testCorollary1",
                "\\ No newline at end of file",
                "diff --git a/test-profiles/JavaJsonExcludes b/test-profiles/JavaJsonExcludes",
                "deleted file mode 100644",
                "index 9fbd8713b2..0000000000",
                "--- a/test-profiles/JavaJsonExcludes",
                "+++ /dev/null",
                "@@ -1,21 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-org.apache.qpid.server.store.berkeleydb.*",
                "-org.apache.qpid.server.store.berkeleydb.replication.*",
                "diff --git a/test-profiles/JavaPersistentExcludes b/test-profiles/JavaPersistentExcludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/JavaPersistentExcludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "deleted file mode 100644",
                "index 61616c677e..0000000000",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ /dev/null",
                "@@ -1,37 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-//======================================================================",
                "-//Exclude the following from brokers using the 0-8/0-9/0-9-1 protocols",
                "-//======================================================================",
                "-",
                "-// Those tests are written against the 0.10 path",
                "-org.apache.qpid.client.SynchReceiveTest#testReceiveNoWait",
                "-",
                "-# Exclude the JMS 2.0 test suite",
                "-org.apache.qpid.systests.jms_2_0.*",
                "-",
                "-// Exclude 1.0 protocol tests",
                "-org.apache.qpid.tests.protocol.v1_0.*",
                "-",
                "-// Test requires ability to address the $management node.  Fails for 0-9 only as client erroneously tries to declare an exchange",
                "-// Already fixed for next Qpid Client AMQP 0-x release (6.3.x)",
                "-org.apache.qpid.server.stats.StatisticsReportingTest#testBrokerStatistics",
                "-org.apache.qpid.server.stats.StatisticsReportingTest#testVirtualHostConnectionStatistics",
                "-",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "deleted file mode 100644",
                "index 436053abbd..0000000000",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ /dev/null",
                "@@ -1,24 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-org.apache.qpid.server.store.berkeleydb.*",
                "-org.apache.qpid.server.store.berkeleydb.replication.*",
                "-org.apache.qpid.server.store.berkeleydb.upgrade.*",
                "-org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-",
                "diff --git a/test-profiles/cpp.async.excludes b/test-profiles/cpp.async.excludes",
                "deleted file mode 100644",
                "index 969b9272a7..0000000000",
                "--- a/test-profiles/cpp.async.excludes",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "diff --git a/test-profiles/cpp.excludes b/test-profiles/cpp.excludes",
                "deleted file mode 100644",
                "index 0c6c80e75e..0000000000",
                "--- a/test-profiles/cpp.excludes",
                "+++ /dev/null",
                "@@ -1,27 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-//======================================================================",
                "-//Exclude the following tests when running all cpp test profilies",
                "-//======================================================================",
                "-",
                "-",
                "-//BDB System Tests",
                "-org.apache.qpid.server.store.berkeleydb.*",
                "-",
                "diff --git a/test-profiles/cpp.ssl.excludes b/test-profiles/cpp.ssl.excludes",
                "deleted file mode 100644",
                "index bfb2d309c7..0000000000",
                "--- a/test-profiles/cpp.ssl.excludes",
                "+++ /dev/null",
                "@@ -1,20 +0,0 @@",
                "-//",
                "-// Licensed to the Apache Software Foundation (ASF) under one",
                "-// or more contributor license agreements.  See the NOTICE file",
                "-// distributed with this work for additional information",
                "-// regarding copyright ownership.  The ASF licenses this file",
                "-// to you under the Apache License, Version 2.0 (the",
                "-// \"License\"); you may not use this file except in compliance",
                "-// with the License.  You may obtain a copy of the License at",
                "-//",
                "-//   http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing,",
                "-// software distributed under the License is distributed on an",
                "-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-// KIND, either express or implied.  See the License for the",
                "-// specific language governing permissions and limitations",
                "-// under the License.",
                "-//",
                "-",
                "-"
            ],
            "changed_files": [
                "bdbstore/systests/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "test-profiles/CPPExcludes",
                "test-profiles/CPPNoPrefetchExcludes",
                "test-profiles/CPPPrefetchExcludes",
                "test-profiles/CPPTransientExcludes",
                "test-profiles/Excludes",
                "test-profiles/ExternalBrokerTests",
                "test-profiles/IBMJDKExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10BrokenTestsExcludes",
                "test-profiles/Java10Excludes",
                "test-profiles/Java10UninvestigatedTestsExcludes",
                "test-profiles/JavaBDBExcludes",
                "test-profiles/JavaDerbyExcludes",
                "test-profiles/JavaExcludes",
                "test-profiles/JavaJsonExcludes",
                "test-profiles/JavaPersistentExcludes",
                "test-profiles/JavaPre010Excludes",
                "test-profiles/JavaTransientExcludes",
                "test-profiles/cpp.async.excludes",
                "test-profiles/cpp.excludes",
                "test-profiles/cpp.ssl.excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "88a12e8c5c9b7b912745e0382eb2661264003f19",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523321497,
            "hunks": 38,
            "message": "QPID-8158: [Broker-J] [System Tests] Refactor MultiNodeTest and TwoNodeTest to use QpidTestRunner and BrokerAdmin for running the tests",
            "diff": [
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 36207186b2..eefb5bc91a 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -55,2 +55,9 @@",
                "     </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.qpid</groupId>",
                "+      <artifactId>qpid-systests-spawn-admin</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "   </dependencies>",
                "@@ -66,2 +73,29 @@",
                "     <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>build-classpath</id>",
                "+            <phase>generate-sources</phase>",
                "+            <goals>",
                "+              <goal>build-classpath</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputFile>${project.build.directory}/qpid.build.classpath.txt</outputFile>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <systemPropertyVariables>",
                "+            <qpid.initialConfigurationLocation>classpath:spawn-broker.json</qpid.initialConfigurationLocation>",
                "+            <qpid.systests.build.classpath.file>${project.build.directory}/qpid.build.classpath.txt</qpid.systests.build.classpath.file>",
                "+            <qpid.amqp.version>${profile.broker.version}</qpid.amqp.version>",
                "+          </systemPropertyVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "       <plugin>",
                "diff --git a/pom.xml b/pom.xml",
                "index 2e8d62328d..7cd016a8e5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -203,2 +203,3 @@",
                "     <module>systests/protocol-tests-amqp-1-0</module>",
                "+    <module>systests/qpid-systests-spawn-admin</module>",
                "     <module>systests/end-to-end-conversion-tests</module>",
                "@@ -455,2 +456,8 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-spawn-admin</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index a41ee3998d..91255ef184 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -22,2 +22,4 @@ package org.apache.qpid.tests.http;",
                "+import static org.apache.qpid.systests.Utils.getJmsProvider;",
                "+",
                " import java.net.InetSocketAddress;",
                "@@ -34,7 +36,5 @@ import org.junit.rules.TestName;",
                " import org.apache.qpid.server.model.Protocol;",
                "-import org.apache.qpid.systests.AmqpManagementFacade;",
                " import org.apache.qpid.systests.ConnectionBuilder;",
                " import org.apache.qpid.systests.JmsProvider;",
                "-import org.apache.qpid.systests.QpidJmsClient0xProvider;",
                "-import org.apache.qpid.systests.QpidJmsClientProvider;",
                "+import org.apache.qpid.systests.Utils;",
                " import org.apache.qpid.tests.utils.BrokerAdmin;",
                "@@ -61,13 +61,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "-        Protocol protocol = getProtocol();",
                "-        AmqpManagementFacade managementFacade = new AmqpManagementFacade(protocol);",
                "-        if (protocol == Protocol.AMQP_1_0)",
                "-        {",
                "-            _jmsProvider = new QpidJmsClientProvider(managementFacade);",
                "-        }",
                "-        else",
                "-        {",
                "-            _jmsProvider = new QpidJmsClient0xProvider();",
                "-        }",
                "-",
                "+        _jmsProvider = getJmsProvider();",
                "     }",
                "@@ -123,3 +113,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+        return Utils.getReceiveTimeout();",
                "     }",
                "@@ -128,5 +118,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\")",
                "-                                                .replace('-', '_')",
                "-                                                .replace('.', '_'));",
                "+        return Utils.getProtocol();",
                "     }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "index 647d34a791..5ac57cf15b 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "@@ -494,6 +494,8 @@ public class AmqpManagementFacade",
                "             }",
                "-            throw new IllegalArgumentException(\"Management read failed : \"",
                "-                                               + response.getStringProperty(\"statusCode\")",
                "-                                               + \" - \"",
                "-                                               + response.getStringProperty(\"statusDescription\"));",
                "+            throw new AmqpManagementFacade.OperationUnsuccessfulException(\"Management read failed : \"",
                "+                                                                          + response.getStringProperty(\"statusCode\")",
                "+                                                                          + \" - \"",
                "+                                                                          + response.getStringProperty(",
                "+                    \"statusDescription\"),",
                "+                                                                          response.getIntProperty(\"statusCode\"));",
                "         }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index d465cb459f..e654672f47 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -22,2 +22,4 @@ package org.apache.qpid.systests;",
                "+import static org.apache.qpid.systests.Utils.getAmqpManagementFacade;",
                "+import static org.apache.qpid.systests.Utils.getJmsProvider;",
                " import static org.junit.Assert.assertNotNull;",
                "@@ -62,12 +64,4 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        Protocol protocol = getProtocol();",
                "-        _managementFacade = new AmqpManagementFacade(protocol);",
                "-        if (protocol == Protocol.AMQP_1_0)",
                "-        {",
                "-            _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "-        }",
                "-        else",
                "-        {",
                "-            _jmsProvider = new QpidJmsClient0xProvider();",
                "-        }",
                "+        _managementFacade = getAmqpManagementFacade();",
                "+        _jmsProvider = getJmsProvider();",
                "         LOGGER.debug(\"Test receive timeout is {} milliseconds\", getReceiveTimeout());",
                "@@ -129,3 +123,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+        return Utils.getReceiveTimeout();",
                "     }",
                "@@ -334,5 +328,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\")",
                "-                                                .replace('-', '_')",
                "-                                                .replace('.', '_'));",
                "+        return Utils.getProtocol();",
                "     }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "index 01e75f1776..f8f6df93df 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "@@ -29,2 +29,3 @@ import javax.jms.JMSException;",
                " import javax.jms.Message;",
                "+import javax.jms.MessageConsumer;",
                " import javax.jms.MessageProducer;",
                "@@ -33,2 +34,4 @@ import javax.jms.Session;",
                "+import org.apache.qpid.server.model.Protocol;",
                "+",
                " public class Utils",
                "@@ -111,2 +114,54 @@ public class Utils",
                "+    public static Protocol getProtocol()",
                "+    {",
                "+        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\")",
                "+                                                .replace('-', '_')",
                "+                                                .replace('.', '_'));",
                "+    }",
                "+",
                "+    public static JmsProvider getJmsProvider()",
                "+    {",
                "+        Protocol protocol = getProtocol();",
                "+        JmsProvider jmsProvider;",
                "+        if (protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            jmsProvider = new QpidJmsClientProvider(new AmqpManagementFacade(protocol));",
                "+        }",
                "+        else",
                "+        {",
                "+            jmsProvider = new QpidJmsClient0xProvider();",
                "+        }",
                "+        return jmsProvider;",
                "+    }",
                "+",
                "+    public static AmqpManagementFacade getAmqpManagementFacade()",
                "+    {",
                "+        return new AmqpManagementFacade(getProtocol());",
                "+    }",
                "+",
                "+    public static long getReceiveTimeout()",
                "+    {",
                "+        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+    }",
                "+",
                "+    public static boolean produceConsume(final Connection connection, final Destination destination) throws Exception",
                "+    {",
                "+        Session session = connection.createSession(true, Session.SESSION_TRANSACTED);",
                "+        try",
                "+        {",
                "+            MessageConsumer consumer = session.createConsumer(destination);",
                "+            sendMessages(session, destination, 1);",
                "+            session.commit();",
                "+            connection.start();",
                "+            Message message = consumer.receive(getReceiveTimeout());",
                "+            session.commit();",
                "+            return  message != null;",
                "+        }",
                "+        finally",
                "+        {",
                "+",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "     private static String createString(final int stringSize)",
                "diff --git a/systests/qpid-systests-spawn-admin/pom.xml b/systests/qpid-systests-spawn-admin/pom.xml",
                "new file mode 100644",
                "index 0000000000..e252b66c97",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-spawn-admin/pom.xml",
                "@@ -0,0 +1,123 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <artifactId>qpid-systests-spawn-admin</artifactId>",
                "+    <name>Apache Qpid Broker-J System Tests Spawn Broker Admin</name>",
                "+    <description>Implementation of Spawn Broker Admin for system tests</description>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.geronimo.specs</groupId>",
                "+            <artifactId>geronimo-jms_1.1_spec</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-jms-core</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker</artifactId>",
                "+        </dependency>",
                "+    </dependencies>",
                "+",
                "+    <profiles>",
                "+        <profile>",
                "+            <id>addQpidJmsClientIfNecessary</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>!enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-jms-client</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>addJms11IfNecessary</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-client</artifactId>",
                "+                </dependency>",
                "+                <dependency>",
                "+                    <groupId>org.apache.geronimo.specs</groupId>",
                "+                    <artifactId>geronimo-jms_1.1_spec</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "+    </profiles>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:spawn-broker.json</qpid.initialConfigurationLocation>",
                "+                        <qpid.systests.build.classpath.file>${project.build.directory}/qpid.build.classpath.txt</qpid.systests.build.classpath.file>",
                "+                        <qpid.amqp.version>${profile.broker.version}</qpid.amqp.version>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-dependency-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>build-classpath</id>",
                "+                        <phase>generate-sources</phase>",
                "+                        <goals>",
                "+                            <goal>build-classpath</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <outputFile>${project.build.directory}/qpid.build.classpath.txt</outputFile>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/BrokerAdminException.java b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/BrokerAdminException.java",
                "new file mode 100644",
                "index 0000000000..de1df527ff",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/BrokerAdminException.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests.admin;",
                "+",
                "+public class BrokerAdminException extends RuntimeException",
                "+{",
                "+    public BrokerAdminException(final String message)",
                "+    {",
                "+        super(message);",
                "+    }",
                "+",
                "+    public BrokerAdminException(final String message, final Throwable cause)",
                "+    {",
                "+        super(message, cause);",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "new file mode 100644",
                "index 0000000000..16e26e29fd",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "@@ -0,0 +1,1023 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests.admin;",
                "+",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                "+import static org.apache.qpid.systests.Utils.getAmqpManagementFacade;",
                "+import static org.apache.qpid.systests.Utils.getJmsProvider;",
                "+",
                "+import java.io.BufferedReader;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.Closeable;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InputStreamReader;",
                "+import java.io.OutputStream;",
                "+import java.lang.reflect.Method;",
                "+import java.net.InetSocketAddress;",
                "+import java.nio.file.Files;",
                "+import java.text.SimpleDateFormat;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Objects;",
                "+import java.util.UUID;",
                "+import java.util.concurrent.CountDownLatch;",
                "+import java.util.concurrent.ExecutorService;",
                "+import java.util.concurrent.Executors;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.atomic.AtomicLong;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Session;",
                "+import javax.naming.NamingException;",
                "+",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.google.common.io.ByteStreams;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.server.plugin.PluggableService;",
                "+import org.apache.qpid.server.util.FileUtils;",
                "+import org.apache.qpid.server.util.SystemUtils;",
                "+import org.apache.qpid.systests.AmqpManagementFacade;",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                "+import org.apache.qpid.tests.utils.ConfigItem;",
                "+",
                "+@SuppressWarnings(\"unused\")",
                "+@PluggableService",
                "+public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(SpawnBrokerAdmin.class);",
                "+",
                "+    public static final String SYSTEST_PROPERTY_SPAWN_BROKER_STARTUP_TIME = \"qpid.systests.broker_startup_time\";",
                "+    private static final String SYSTEST_PROPERTY_VIRTUALHOSTNODE_TYPE = \"virtualhostnode.type\";",
                "+    private static final String SYSTEST_PROPERTY_VIRTUALHOST_BLUEPRINT = \"virtualhostnode.context.blueprint\";",
                "+    private static final String SYSTEST_PROPERTY_INITIAL_CONFIGURATION_LOCATION = \"qpid.initialConfigurationLocation\";",
                "+    private static final String SYSTEST_PROPERTY_BUILD_CLASSPATH_FILE = \"qpid.systests.build.classpath.file\";",
                "+    private static final String AMQP_QUEUE_TYPE = \"org.apache.qpid.Queue\";",
                "+    private static final String AMQP_NODE_TYPE = \"org.apache.qpid.VirtualHostNode\";",
                "+    private static final String AMQP_VIRTUAL_HOST_TYPE = \"org.apache.qpid.VirtualHost\";",
                "+",
                "+    private static final AtomicLong COUNTER = new AtomicLong();",
                "+",
                "+    private String _currentWorkDirectory;",
                "+    private ExecutorService _executorService;",
                "+    private Process _process;",
                "+    private Integer _pid;",
                "+    private List<ListeningPort> _ports;",
                "+    private boolean _isPersistentStore;",
                "+    private String _virtualHostNodeName;",
                "+    private final long _id = COUNTER.incrementAndGet();",
                "+",
                "+    @Override",
                "+    public void beforeTestClass(final Class testClass)",
                "+    {",
                "+        startBroker(testClass);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void beforeTestMethod(final Class testClass, final Method method)",
                "+    {",
                "+        final String nodeType = System.getProperty(SYSTEST_PROPERTY_VIRTUALHOSTNODE_TYPE, \"JSON\");",
                "+        final String virtualHostNodeName = testClass.getSimpleName() + \"_\" + method.getName();",
                "+        final Map<String, Object> attributes = getNodeAttributes(virtualHostNodeName, nodeType);",
                "+",
                "+        beforeTestMethod(virtualHostNodeName, nodeType, attributes);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void afterTestMethod(final Class testClass, final Method method)",
                "+    {",
                "+        if (_virtualHostNodeName != null)",
                "+        {",
                "+            deleteVirtualHostNode(_virtualHostNodeName);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void afterTestClass(final Class testClass)",
                "+    {",
                "+        shutdownBroker();",
                "+    }",
                "+",
                "+    @Override",
                "+    public InetSocketAddress getBrokerAddress(final PortType portType)",
                "+    {",
                "+        if (_ports == null)",
                "+        {",
                "+            throw new IllegalArgumentException(\"Port information not present\");",
                "+        }",
                "+        Integer port = null;",
                "+        switch (portType)",
                "+        {",
                "+            case AMQP:",
                "+                for (ListeningPort p : _ports)",
                "+                {",
                "+                    if (p.getTransport().contains(\"TCP\"))",
                "+                    {",
                "+                        port = p.getPort();",
                "+                        break;",
                "+                    }",
                "+                }",
                "+                break;",
                "+            default:",
                "+                throw new IllegalArgumentException(String.format(\"Unknown port type '%s'\", portType));",
                "+        }",
                "+        if (port == null)",
                "+        {",
                "+            throw new IllegalArgumentException(String.format(\"Cannot find port of type '%s'\", portType));",
                "+        }",
                "+        return new InetSocketAddress(port);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void createQueue(final String queueName)",
                "+    {",
                "+        invokeManagementOperation(false, (amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.createEntityAndAssertResponse(queueName,",
                "+                                                               AMQP_QUEUE_TYPE,",
                "+                                                               Collections.emptyMap(),",
                "+                                                               session);",
                "+            return null;",
                "+        });",
                "+        invokeManagementOperation(false, (amqpManagementFacade, session) -> {",
                "+            // bind queue to direct exchange automatically",
                "+            Map<String, Object> arguments = new HashMap<>();",
                "+            arguments.put(\"destination\", queueName);",
                "+            arguments.put(\"bindingKey\", queueName);",
                "+            amqpManagementFacade.performOperationUsingAmqpManagement(\"amq.direct\",",
                "+                                                                     \"bind\",",
                "+                                                                     session,",
                "+                                                                     \"org.apache.qpid.DirectExchange\",",
                "+                                                                     arguments);",
                "+            return null;",
                "+        });",
                "+    }",
                "+",
                "+    @Override",
                "+    public void deleteQueue(final String queueName)",
                "+    {",
                "+        invokeManagementOperation(false, (amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.deleteEntityUsingAmqpManagement(queueName,",
                "+                                                                 session,",
                "+                                                                 AMQP_QUEUE_TYPE);",
                "+            return null;",
                "+        });",
                "+    }",
                "+",
                "+    @Override",
                "+    public void putMessageOnQueue(final String queueName, final String... messages)",
                "+    {",
                "+        for (String content : messages)",
                "+        {",
                "+            final Map<String, Object> message = new HashMap<>();",
                "+            message.put(\"content\", content);",
                "+            message.put(\"address\", queueName);",
                "+            message.put(\"mimeType\", \"text/plain\");",
                "+",
                "+            invokeManagementOperation(false, (amqpManagementFacade, session) -> {",
                "+                amqpManagementFacade.performOperationUsingAmqpManagement(_virtualHostNodeName,",
                "+                                                                         \"publishMessage\",",
                "+                                                                         session,",
                "+                                                                         AMQP_VIRTUAL_HOST_TYPE,",
                "+                                                                         Collections.singletonMap(\"message\",",
                "+                                                                                                  message));",
                "+                return null;",
                "+            });",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getQueueDepthMessages(final String testQueueName)",
                "+    {",
                "+        return invokeManagementOperation(false, (amqpManagementFacade, session) -> {",
                "+            Map<String, Object> arguments = Collections.singletonMap(\"statistics\",",
                "+                                                                     Collections.singletonList(\"queueDepthMessages\"));",
                "+            Object statistics = amqpManagementFacade.performOperationUsingAmqpManagement(testQueueName,",
                "+                                                                                         \"getStatistics\",",
                "+                                                                                         session,",
                "+                                                                                         AMQP_QUEUE_TYPE,",
                "+                                                                                         arguments);",
                "+",
                "+            @SuppressWarnings(\"unchecked\")",
                "+            Map<String, Object> stats = (Map<String, Object>) statistics;",
                "+            return ((Number) stats.get(\"queueDepthMessages\")).intValue();",
                "+        });",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean supportsRestart()",
                "+    {",
                "+        return _isPersistentStore;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListenableFuture<Void> restart()",
                "+    {",
                "+        stop();",
                "+        start();",
                "+        return Futures.immediateFuture(null);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isSASLSupported()",
                "+    {",
                "+        return true;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isSASLMechanismSupported(final String mechanismName)",
                "+    {",
                "+        return true;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isWebSocketSupported()",
                "+    {",
                "+        return false;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isQueueDepthSupported()",
                "+    {",
                "+        return true;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isManagementSupported()",
                "+    {",
                "+        return true;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValidUsername()",
                "+    {",
                "+        return \"admin\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValidPassword()",
                "+    {",
                "+        return \"admin\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getKind()",
                "+    {",
                "+        return KIND_BROKER_J;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getType()",
                "+    {",
                "+        return \"SPAWN_BROKER_PER_CLASS\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close()",
                "+    {",
                "+        shutdownBroker();",
                "+    }",
                "+",
                "+    public void beforeTestMethod(final String virtualHostNodeName,",
                "+                                 final String nodeType,",
                "+                                 final Map<String, Object> attributes)",
                "+    {",
                "+        _isPersistentStore = !\"Memory\".equals(nodeType);",
                "+        _virtualHostNodeName = virtualHostNodeName;",
                "+",
                "+        if (!attributes.containsKey(\"qpid-type\"))",
                "+        {",
                "+            attributes.put(\"qpid-type\", nodeType);",
                "+        }",
                "+",
                "+        invokeManagementOperation(true, ((amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.createEntityAndAssertResponse(virtualHostNodeName,",
                "+                                                               AMQP_NODE_TYPE,",
                "+                                                               attributes,",
                "+                                                               session);",
                "+            return null;",
                "+        }));",
                "+    }",
                "+",
                "+    public void start()",
                "+    {",
                "+        if (_virtualHostNodeName == null)",
                "+        {",
                "+            throw new BrokerAdminException(\"Virtual host is not created\");",
                "+        }",
                "+        invokeManagementOperation(true, (amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.updateEntityUsingAmqpManagement(_virtualHostNodeName,",
                "+                                                                 session,",
                "+                                                                 AMQP_NODE_TYPE,",
                "+                                                                 Collections.singletonMap(\"desiredState\", \"ACTIVE\"));",
                "+            return null;",
                "+        });",
                "+    }",
                "+",
                "+    public void stop()",
                "+    {",
                "+        if (_virtualHostNodeName == null)",
                "+        {",
                "+            throw new BrokerAdminException(\"Virtual host is not created\");",
                "+        }",
                "+        invokeManagementOperation(true, (amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.updateEntityUsingAmqpManagement(_virtualHostNodeName,",
                "+                                                                 session,",
                "+                                                                 AMQP_NODE_TYPE,",
                "+                                                                 Collections.singletonMap(\"desiredState\", \"STOPPED\"));",
                "+            return null;",
                "+        });",
                "+    }",
                "+",
                "+    public Object awaitAttributeValue(long timeLimitMilliseconds,",
                "+                                      boolean isBrokerManagement,",
                "+                                      String name,",
                "+                                      String type,",
                "+                                      String attributeName,",
                "+                                      Object... attributeValue)",
                "+    {",
                "+        Object value;",
                "+        long limit = System.currentTimeMillis() + timeLimitMilliseconds;",
                "+",
                "+        do",
                "+        {",
                "+            value = invokeManagementOperation(isBrokerManagement, ((amqpManagementFacade, session) -> {",
                "+",
                "+                Map<String, Object> object = null;",
                "+                try",
                "+                {",
                "+                    object = amqpManagementFacade.readEntityUsingAmqpManagement(session, type, name, false);",
                "+                }",
                "+                catch (AmqpManagementFacade.OperationUnsuccessfulException e)",
                "+                {",
                "+                    if (e.getStatusCode() != 404)",
                "+                    {",
                "+                        throw e;",
                "+                    }",
                "+                }",
                "+                return object == null ? null : object.get(attributeName);",
                "+            }));",
                "+",
                "+            final Object lookup = value;",
                "+            if (Arrays.stream(attributeValue).anyMatch(v -> v.equals(lookup)))",
                "+            {",
                "+                break;",
                "+            }",
                "+            else",
                "+            {",
                "+                try",
                "+                {",
                "+                    Thread.sleep(50);",
                "+                }",
                "+                catch (InterruptedException e)",
                "+                {",
                "+                    Thread.interrupted();",
                "+                    break;",
                "+                }",
                "+            }",
                "+        }",
                "+        while (System.currentTimeMillis() < limit);",
                "+        return value;",
                "+    }",
                "+",
                "+    public String getVirtualHostName()",
                "+    {",
                "+        return _virtualHostNodeName;",
                "+    }",
                "+",
                "+    public void update(final boolean brokerManagement,",
                "+                       final String name,",
                "+                       final String type,",
                "+                       final Map<String, Object> attributes)",
                "+    {",
                "+        invokeManagementOperation(brokerManagement, (amqpManagementFacade, session) -> {",
                "+            amqpManagementFacade.updateEntityUsingAmqpManagement(name,",
                "+                                                                 session,",
                "+                                                                 type,",
                "+                                                                 attributes);",
                "+            return null;",
                "+        });",
                "+    }",
                "+",
                "+    public Map<String, Object> getAttributes(final boolean brokerManagement, final String name, final String type)",
                "+    {",
                "+        return invokeManagementOperation(brokerManagement,",
                "+                                         (amqpManagementFacade, session) -> amqpManagementFacade.readEntityUsingAmqpManagement(",
                "+                                                 session,",
                "+                                                 type,",
                "+                                                 name,",
                "+                                                 false));",
                "+    }",
                "+",
                "+    public String dumpThreads()",
                "+    {",
                "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "+        try",
                "+        {",
                "+            Process process = Runtime.getRuntime().exec(\"jstack \" + _pid);",
                "+            InputStream is = process.getInputStream();",
                "+            byte[] buffer = new byte[1024];",
                "+            int length;",
                "+            while ((length = is.read(buffer)) != -1)",
                "+            {",
                "+                baos.write(buffer, 0, length);",
                "+            }",
                "+            return new String(baos.toByteArray());",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            LOGGER.error(\"Error whilst collecting thread dump for \" + _pid, e);",
                "+            return \"\";",
                "+        }",
                "+        finally",
                "+        {",
                "+            try",
                "+            {",
                "+                baos.close();",
                "+            }",
                "+            catch (IOException e)",
                "+            {",
                "+                // ignore",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private Map<String, Object> getNodeAttributes(final String virtualHostNodeName, final String nodeType)",
                "+    {",
                "+        String storeDir;",
                "+        if (System.getProperty(\"profile\", \"\").startsWith(\"java-dby-mem\"))",
                "+        {",
                "+            storeDir = \":memory:\";",
                "+        }",
                "+        else",
                "+        {",
                "+            storeDir = \"${qpid.work_dir}\" + File.separator + virtualHostNodeName;",
                "+        }",
                "+        Map<String, Object> attributes = new HashMap<>();",
                "+        String blueprint =",
                "+                System.getProperty(SYSTEST_PROPERTY_VIRTUALHOST_BLUEPRINT, \"{\\\"type\\\":\\\"ProvidedStore\\\"}\");",
                "+        LOGGER.debug(\"Creating Virtual host {} from blueprint: {}\", virtualHostNodeName, blueprint);",
                "+",
                "+        attributes.put(\"name\", virtualHostNodeName);",
                "+        attributes.put(\"type\", nodeType);",
                "+        attributes.put(\"qpid-type\", nodeType);",
                "+        String contextAsString;",
                "+        try",
                "+        {",
                "+            contextAsString =",
                "+                    new ObjectMapper().writeValueAsString(Collections.singletonMap(\"virtualhostBlueprint\",",
                "+                                                                                   blueprint));",
                "+        }",
                "+        catch (JsonProcessingException e)",
                "+        {",
                "+            throw new BrokerAdminException(\"Cannot create virtual host as context serialization failed\", e);",
                "+        }",
                "+        attributes.put(\"context\", contextAsString);",
                "+        attributes.put(\"defaultVirtualHostNode\", true);",
                "+        attributes.put(\"virtualHostInitialConfiguration\", blueprint);",
                "+        attributes.put(\"storePath\", storeDir);",
                "+        return attributes;",
                "+    }",
                "+",
                "+    private void deleteVirtualHostNode(final String virtualHostNodeName)",
                "+    {",
                "+        invokeManagementOperation(true,",
                "+                                  (amqpManagementFacade, session) -> {",
                "+                                      amqpManagementFacade.deleteEntityUsingAmqpManagement(virtualHostNodeName,",
                "+                                                                                           session,",
                "+                                                                                           AMQP_NODE_TYPE);",
                "+                                      _virtualHostNodeName = null;",
                "+                                      return null;",
                "+                                  });",
                "+    }",
                "+",
                "+    private <T> T invokeManagementOperation(boolean isBrokerOperation, AmqpManagementOperation<T> operation)",
                "+    {",
                "+        try",
                "+        {",
                "+            InetSocketAddress brokerAddress = getBrokerAddress(BrokerAdmin.PortType.AMQP);",
                "+",
                "+            final Connection connection = getJmsProvider().getConnectionBuilder()",
                "+                                                          .setVirtualHost(isBrokerOperation",
                "+                                                                                  ? \"$management\"",
                "+                                                                                  : getVirtualHostName())",
                "+                                                          .setClientId(\"admin-\" + UUID.randomUUID().toString())",
                "+                                                          .setHost(brokerAddress.getHostName())",
                "+                                                          .setPort(brokerAddress.getPort())",
                "+                                                          .setFailover(false)",
                "+                                                          .build();",
                "+            try",
                "+            {",
                "+                connection.start();",
                "+                final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+                try",
                "+                {",
                "+                    return operation.invoke(getAmqpManagementFacade(), session);",
                "+                }",
                "+                catch (AmqpManagementFacade.OperationUnsuccessfulException | JMSException e)",
                "+                {",
                "+                    throw new BrokerAdminException(\"Cannot perform operation\", e);",
                "+                }",
                "+                finally",
                "+                {",
                "+                    session.close();",
                "+                }",
                "+            }",
                "+            finally",
                "+            {",
                "+                connection.close();",
                "+            }",
                "+        }",
                "+        catch (JMSException | NamingException e)",
                "+        {",
                "+            throw new BrokerAdminException(\"Cannot create connection to broker\", e);",
                "+        }",
                "+    }",
                "+",
                "+    private void startBroker(final Class testClass)",
                "+    {",
                "+        String timestamp = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date(System.currentTimeMillis()));",
                "+        boolean brokerStarted = false;",
                "+        try",
                "+        {",
                "+            _currentWorkDirectory =",
                "+                    Files.createTempDirectory(String.format(\"qpid-work-%d-%s-%s-\",",
                "+                                                            _id,",
                "+                                                            testClass.getSimpleName(),",
                "+                                                            timestamp))",
                "+                         .toString();",
                "+",
                "+            String readyLogPattern = \"BRK-1004 : Qpid Broker Ready\";",
                "+",
                "+            LOGGER.debug(\"Spawning broker working folder: {}\", _currentWorkDirectory);",
                "+",
                "+            int startUpTime = Integer.getInteger(SYSTEST_PROPERTY_SPAWN_BROKER_STARTUP_TIME, 30000);",
                "+",
                "+            LOGGER.debug(\"Spawning broker permitted start-up time: {}\", startUpTime);",
                "+",
                "+            ProcessBuilder processBuilder = createBrokerProcessBuilder(_currentWorkDirectory, testClass);",
                "+            processBuilder.redirectErrorStream(true);",
                "+",
                "+            Map<String, String> processEnvironment = processBuilder.environment();",
                "+            processEnvironment.put(\"QPID_PNAME\", String.format(\"-DPNAME=QPBRKR -DTNAME=\\\"%s\\\"\", testClass.getName()));",
                "+",
                "+            CountDownLatch readyLatch = new CountDownLatch(1);",
                "+            long startTime = System.currentTimeMillis();",
                "+",
                "+            LOGGER.debug(\"Starting broker process\");",
                "+            _process = processBuilder.start();",
                "+",
                "+            BrokerSystemOutputHandler brokerSystemOutputHandler =",
                "+                    new BrokerSystemOutputHandler(_process.getInputStream(),",
                "+                                                  readyLatch",
                "+                    );",
                "+",
                "+            _executorService = Executors.newFixedThreadPool(1, r -> {",
                "+                Thread t = new Thread(r, \"SPAWN-\" + _id);",
                "+                t.setDaemon(false);",
                "+                return t;",
                "+            });",
                "+",
                "+            _executorService.submit(brokerSystemOutputHandler);",
                "+            if (!readyLatch.await(startUpTime, TimeUnit.MILLISECONDS))",
                "+            {",
                "+                LOGGER.warn(\"Spawned broker failed to become ready within {} ms. Ready line '{}'\",",
                "+                            startUpTime, readyLogPattern);",
                "+                throw new BrokerAdminException(String.format(",
                "+                        \"Broker failed to become ready within %d ms. Stop line : %s\",",
                "+                        startUpTime,",
                "+                        readyLogPattern));",
                "+            }",
                "+",
                "+            _pid = brokerSystemOutputHandler.getPID();",
                "+            _ports = brokerSystemOutputHandler.getAmqpPorts();",
                "+",
                "+            if (_pid == -1)",
                "+            {",
                "+                throw new BrokerAdminException(\"Broker PID is not detected\");",
                "+            }",
                "+",
                "+            if (_ports.size() == 0)",
                "+            {",
                "+                throw new BrokerAdminException(\"Broker port is not detected\");",
                "+            }",
                "+",
                "+            try",
                "+            {",
                "+                int exit = _process.exitValue();",
                "+                LOGGER.info(\"broker aborted: {}\", exit);",
                "+                throw new BrokerAdminException(\"broker aborted: \" + exit);",
                "+            }",
                "+            catch (IllegalThreadStateException e)",
                "+            {",
                "+                // ignore",
                "+            }",
                "+",
                "+            LOGGER.info(\"Broker was started successfully within {} milliseconds, broker PID {}\",",
                "+                        System.currentTimeMillis() - startTime,",
                "+                        _pid);",
                "+            LOGGER.info(\"Broker ports: {}\", _ports);",
                "+            brokerStarted = true;",
                "+        }",
                "+        catch (RuntimeException e)",
                "+        {",
                "+            throw e;",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            Thread.interrupted();",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new BrokerAdminException(String.format(\"Unexpected exception on broker startup: %s\", e), e);",
                "+        }",
                "+        finally",
                "+        {",
                "+            if (!brokerStarted)",
                "+            {",
                "+                LOGGER.warn(\"Broker failed to start\");",
                "+                if (_process != null)",
                "+                {",
                "+                    _process.destroy();",
                "+                    _process = null;",
                "+                }",
                "+                if (_executorService != null)",
                "+                {",
                "+                    _executorService.shutdown();",
                "+                    _executorService = null;",
                "+                }",
                "+                _ports = null;",
                "+                _pid = null;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    private ProcessBuilder createBrokerProcessBuilder(String currentWorkDirectory, Class testClass) throws IOException",
                "+    {",
                "+        String initialConfiguration = System.getProperty(SYSTEST_PROPERTY_INITIAL_CONFIGURATION_LOCATION);",
                "+        if (initialConfiguration == null)",
                "+        {",
                "+            throw new BrokerAdminException(",
                "+                    String.format(\"No initial configuration is found: JVM property '%s' is not set.\",",
                "+                                  SYSTEST_PROPERTY_INITIAL_CONFIGURATION_LOCATION));",
                "+        }",
                "+",
                "+        File testInitialConfiguration = new File(currentWorkDirectory, \"initial-configuration.json\");",
                "+        if (!testInitialConfiguration.createNewFile())",
                "+        {",
                "+            throw new BrokerAdminException(\"Failed to create a file for a copy of initial configuration\");",
                "+        }",
                "+        if (initialConfiguration.startsWith(\"classpath:\"))",
                "+        {",
                "+            String config = initialConfiguration.substring(\"classpath:\".length());",
                "+            try (InputStream is = getClass().getClassLoader().getResourceAsStream(config);",
                "+                 OutputStream os = new FileOutputStream(testInitialConfiguration))",
                "+            {",
                "+                ByteStreams.copy(is, os);",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            Files.copy(new File(initialConfiguration).toPath(), testInitialConfiguration.toPath());",
                "+        }",
                "+",
                "+        String classpath;",
                "+        File file = new File(System.getProperty(SYSTEST_PROPERTY_BUILD_CLASSPATH_FILE));",
                "+        if (!file.exists())",
                "+        {",
                "+            throw new BrokerAdminException(String.format(\"Cannot find file with classpath: %s\",",
                "+                                                         file.getAbsoluteFile()));",
                "+        }",
                "+        else",
                "+        {",
                "+            classpath = new String(Files.readAllBytes(file.toPath()), UTF_8);",
                "+        }",
                "+",
                "+        List<String> jvmArguments = new ArrayList<>();",
                "+        jvmArguments.add(\"java\");",
                "+        jvmArguments.add(\"-cp\");",
                "+        jvmArguments.add(classpath);",
                "+        jvmArguments.add(\"-Djava.io.tmpdir=\" + escape(System.getProperty(\"java.io.tmpdir\")));",
                "+        jvmArguments.add(\"-Dqpid.tests.mms.messagestore.persistence=true\");",
                "+        jvmArguments.add(\"org.apache.qpid.server.Main\");",
                "+        jvmArguments.add(\"--store-type\");",
                "+        jvmArguments.add(\"JSON\");",
                "+        jvmArguments.add(\"--initial-config-path\");",
                "+        jvmArguments.add(escape(testInitialConfiguration.toString()));",
                "+",
                "+        Map<String, String> context = new HashMap<>();",
                "+        context.put(\"qpid.work_dir\", escape(currentWorkDirectory));",
                "+        context.put(\"qpid.port.protocol_handshake_timeout\", \"1000000\");",
                "+        context.put(\"qpid.amqp_port\", \"0\");",
                "+",
                "+        System.getProperties()",
                "+              .stringPropertyNames()",
                "+              .stream()",
                "+              .filter(n -> n.startsWith(\"qpid.\"))",
                "+              .forEach(n -> context.put(n, System.getProperty(n)));",
                "+",
                "+        context.putAll(Arrays.stream((ConfigItem[]) testClass.getAnnotationsByType(ConfigItem.class))",
                "+                             .collect(Collectors.toMap(ConfigItem::name,",
                "+                                                       ConfigItem::value,",
                "+                                                       (name, value) -> value)));",
                "+",
                "+        context.forEach((key, value) -> jvmArguments.addAll(Arrays.asList(\"-prop\",",
                "+                                                                          String.format(\"%s=%s\", key, value))));",
                "+",
                "+        LOGGER.debug(\"Spawning broker JVM :\", jvmArguments);",
                "+        String[] cmd = jvmArguments.toArray(new String[jvmArguments.size()]);",
                "+",
                "+        LOGGER.debug(\"command line:\" + String.join(\" \", jvmArguments));",
                "+        return new ProcessBuilder(cmd);",
                "+    }",
                "+",
                "+    private String escape(String value)",
                "+    {",
                "+        if (SystemUtils.isWindows() && value.contains(\"\\\"\") && !value.startsWith(\"\\\"\"))",
                "+        {",
                "+            return \"\\\"\" + value.replaceAll(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";",
                "+        }",
                "+        else",
                "+        {",
                "+            return value;",
                "+        }",
                "+    }",
                "+",
                "+    private void shutdownBroker()",
                "+    {",
                "+        try",
                "+        {",
                "+            if (SystemUtils.isWindows())",
                "+            {",
                "+                doWindowsKill();",
                "+            }",
                "+",
                "+            if (_process != null)",
                "+            {",
                "+                LOGGER.info(\"Destroying broker process\");",
                "+                _process.destroy();",
                "+",
                "+                reapChildProcess();",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            if (_executorService != null)",
                "+            {",
                "+                _executorService.shutdown();",
                "+                _executorService = null;",
                "+            }",
                "+            if (_ports != null)",
                "+            {",
                "+                _ports.clear();",
                "+                _ports = null;",
                "+            }",
                "+            _pid = null;",
                "+            _process = null;",
                "+            if (_currentWorkDirectory != null && Boolean.getBoolean(\"broker.clean.between.tests\"))",
                "+            {",
                "+                if (FileUtils.delete(new File(_currentWorkDirectory), true))",
                "+                {",
                "+                    _currentWorkDirectory = null;",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void doWindowsKill()",
                "+    {",
                "+        try",
                "+        {",
                "+",
                "+            Process p;",
                "+            p = Runtime.getRuntime().exec(new String[]{\"taskkill\", \"/PID\", Integer.toString(_pid), \"/T\", \"/F\"});",
                "+            consumeAllOutput(p);",
                "+        }",
                "+        catch (IOException e)",
                "+        {",
                "+            LOGGER.error(\"Error whilst killing process \" + _pid, e);",
                "+        }",
                "+    }",
                "+",
                "+    private static void consumeAllOutput(Process p) throws IOException",
                "+    {",
                "+        try (InputStreamReader inputStreamReader = new InputStreamReader(p.getInputStream()))",
                "+        {",
                "+            try (BufferedReader reader = new BufferedReader(inputStreamReader))",
                "+            {",
                "+                String line;",
                "+                while ((line = reader.readLine()) != null)",
                "+                {",
                "+                    LOGGER.debug(\"Consuming output: {}\", line);",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void reapChildProcess()",
                "+    {",
                "+        try",
                "+        {",
                "+            _process.waitFor();",
                "+            LOGGER.info(\"broker exited: \" + _process.exitValue());",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            LOGGER.error(\"Interrupted whilst waiting for process shutdown\");",
                "+            Thread.currentThread().interrupt();",
                "+        }",
                "+        finally",
                "+        {",
                "+            try",
                "+            {",
                "+                _process.getInputStream().close();",
                "+                _process.getErrorStream().close();",
                "+                _process.getOutputStream().close();",
                "+            }",
                "+            catch (IOException ignored)",
                "+            {",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private final class BrokerSystemOutputHandler implements Runnable",
                "+    {",
                "+        private final Logger LOGGER = LoggerFactory.getLogger(BrokerSystemOutputHandler.class);",
                "+",
                "+        private final BufferedReader _in;",
                "+        private final List<ListeningPort> _amqpPorts;",
                "+        private final Pattern _readyPattern;",
                "+        private final Pattern _stoppedPattern;",
                "+        private final Pattern _pidPattern;",
                "+        private final Pattern _amqpPortPattern;",
                "+        private final CountDownLatch _readyLatch;",
                "+",
                "+        private volatile boolean _seenReady;",
                "+        private volatile int _pid;",
                "+",
                "+        private BrokerSystemOutputHandler(InputStream in, CountDownLatch readyLatch)",
                "+        {",
                "+            _amqpPorts = new ArrayList<>();",
                "+            _seenReady = false;",
                "+            _in = new BufferedReader(new InputStreamReader(in));",
                "+",
                "+            _readyPattern = Pattern.compile(\"BRK-1004 : Qpid Broker Ready\");",
                "+            _stoppedPattern = Pattern.compile(\"BRK-1005 : Stopped\");",
                "+            _amqpPortPattern = Pattern.compile(\"BRK-1002 : Starting : Listening on (\\\\w*) port ([0-9]+)\");",
                "+            _pidPattern = Pattern.compile(\"BRK-1017 : Process : PID : ([0-9]+)\");",
                "+            _readyLatch = readyLatch;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void run()",
                "+        {",
                "+            try",
                "+            {",
                "+                String line;",
                "+                while ((line = _in.readLine()) != null)",
                "+                {",
                "+                    LOGGER.info(line);",
                "+",
                "+                    if (!_seenReady)",
                "+                    {",
                "+                        checkPortListeningLog(line, _amqpPortPattern, _amqpPorts);",
                "+",
                "+                        Matcher pidMatcher = _pidPattern.matcher(line);",
                "+                        if (pidMatcher.find())",
                "+                        {",
                "+                            if (pidMatcher.groupCount() > 0)",
                "+                            {",
                "+                                _pid = Integer.parseInt(pidMatcher.group(1));",
                "+                            }",
                "+                        }",
                "+",
                "+                        Matcher readyMatcher = _readyPattern.matcher(line);",
                "+                        if (readyMatcher.find())",
                "+                        {",
                "+                            _seenReady = true;",
                "+                            _readyLatch.countDown();",
                "+                        }",
                "+                    }",
                "+",
                "+                    Matcher stopMatcher = _stoppedPattern.matcher(line);",
                "+                    if (stopMatcher.find())",
                "+                    {",
                "+                        break;",
                "+                    }",
                "+",
                "+                    if (line.contains(\"Error:\"))",
                "+                    {",
                "+                        break;",
                "+                    }",
                "+                }",
                "+            }",
                "+            catch (IOException e)",
                "+            {",
                "+                LOGGER.warn(e.getMessage()",
                "+                            + \" : Broker stream from unexpectedly closed; last log lines written by Broker may be lost.\");",
                "+            }",
                "+        }",
                "+",
                "+        private void checkPortListeningLog(final String line,",
                "+                                           final Pattern portPattern,",
                "+                                           final List<ListeningPort> ports)",
                "+        {",
                "+            Matcher portMatcher = portPattern.matcher(line);",
                "+            if (portMatcher.find())",
                "+            {",
                "+                ports.add(new ListeningPort(portMatcher.group(1),",
                "+                                            Integer.parseInt(portMatcher.group(2))));",
                "+            }",
                "+        }",
                "+",
                "+        int getPID()",
                "+        {",
                "+            return _pid;",
                "+        }",
                "+",
                "+        List<ListeningPort> getAmqpPorts()",
                "+        {",
                "+            return _amqpPorts;",
                "+        }",
                "+    }",
                "+",
                "+    private static class ListeningPort",
                "+    {",
                "+        private String _transport;",
                "+        private int _port;",
                "+",
                "+        ListeningPort(final String transport, final int port)",
                "+        {",
                "+            _transport = transport;",
                "+            _port = port;",
                "+        }",
                "+",
                "+        String getTransport()",
                "+        {",
                "+            return _transport;",
                "+        }",
                "+",
                "+        int getPort()",
                "+        {",
                "+            return _port;",
                "+        }",
                "+",
                "+        @Override",
                "+        public String toString()",
                "+        {",
                "+            return \"ListeningPort{\" +",
                "+                   \", _transport='\" + _transport + '\\'' +",
                "+                   \", _port=\" + _port +",
                "+                   '}';",
                "+        }",
                "+    }",
                "+",
                "+    private interface AmqpManagementOperation<T>",
                "+    {",
                "+        T invoke(AmqpManagementFacade amqpManagementFacade, Session session) throws JMSException;",
                "+",
                "+        default <V> AmqpManagementOperation<V> andThen(AmqpManagementOperation<V> after)",
                "+        {",
                "+            Objects.requireNonNull(after);",
                "+",
                "+            return (amqpManagementFacade, session) -> {",
                "+                invoke(amqpManagementFacade, session);",
                "+                return after.invoke(amqpManagementFacade, session);",
                "+            };",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json b/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "new file mode 100644",
                "index 0000000000..029457fea9",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"brokerloggers\" : [ {",
                "+    \"name\" : \"logsocket\",",
                "+    \"type\" : \"Console\",",
                "+    \"brokerloginclusionrules\" : [ {",
                "+      \"name\" : \"Root\",",
                "+      \"type\" : \"NameAndLevel\",",
                "+      \"level\" : \"INFO\",",
                "+      \"loggerName\" : \"ROOT\"",
                "+    }, {",
                "+      \"name\" : \"Qpid\",",
                "+      \"type\" : \"NameAndLevel\",",
                "+      \"level\" : \"DEBUG\",",
                "+      \"loggerName\" : \"org.apache.qpid.*\"",
                "+    }, {",
                "+      \"name\" : \"Operational\",",
                "+      \"type\" : \"NameAndLevel\",",
                "+      \"level\" : \"INFO\",",
                "+      \"loggerName\" : \"qpid.message.*\"",
                "+    }, {",
                "+      \"name\" : \"Statistics\",",
                "+      \"type\" : \"NameAndLevel\",",
                "+      \"level\" : \"INFO\",",
                "+      \"loggerName\" : \"qpid.statistics.*\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"${qpid.amqp_port}\",",
                "+    \"allowConfidentialOperationsOnInsecureChannels\": true,",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index bc45318093..22021b3603 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -37,6 +37,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Set;",
                "-import java.util.concurrent.ExecutionException;",
                "-import java.util.concurrent.TimeUnit;",
                "-import java.util.concurrent.TimeoutException;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -46,3 +42,2 @@ import javax.security.auth.Subject;",
                "-import ch.qos.logback.classic.LoggerContext;",
                " import com.google.common.util.concurrent.Futures;",
                "@@ -71,3 +66,2 @@ import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                " import org.apache.qpid.server.virtualhostnode.JsonVirtualHostNode;",
                "-import org.apache.qpid.test.utils.LogbackPropertyValueDiscriminator;",
                "@@ -89,4 +83,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     {",
                "-        setClassQualifiedTestName(testClass.getName());",
                "-        LOGGER.info(\"========================= starting broker for test class : \" + testClass.getSimpleName());",
                "         try",
                "@@ -134,4 +126,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     {",
                "-        LOGGER.info(\"========================= prepare test environment for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "-",
                "         final String virtualHostNodeName = testClass.getSimpleName() + \"_\" + method.getName();",
                "@@ -165,5 +155,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "-        LOGGER.info(\"========================= executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "-        setClassQualifiedTestName(testClass.getName() + \".\" + method.getName());",
                "-        LOGGER.info(\"========================= start executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "     }",
                "@@ -173,6 +160,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     {",
                "-        LOGGER.info(\"========================= stop executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "-        setClassQualifiedTestName(testClass.getName());",
                "-        LOGGER.info(\"========================= cleaning up test environment for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "-",
                "         Subject deleteSubject = new Subject(true,",
                "@@ -194,5 +177,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "         });",
                "-",
                "-        setClassQualifiedTestName(testClass.getName());",
                "-        LOGGER.info(\"========================= cleaning done for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "     }",
                "@@ -202,3 +182,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     {",
                "-        LOGGER.info(\"========================= stopping broker for test class: \" + testClass.getSimpleName());",
                "         _systemLauncher.shutdown();",
                "@@ -209,4 +188,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "         }",
                "-        LOGGER.info(\"========================= stopping broker done for test class : \" + testClass.getSimpleName());",
                "-        setClassQualifiedTestName(null);",
                "     }",
                "@@ -434,8 +411,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "-    private void setClassQualifiedTestName(final String name)",
                "-    {",
                "-        final LoggerContext loggerContext = ((ch.qos.logback.classic.Logger) LOGGER).getLoggerContext();",
                "-        loggerContext.putProperty(LogbackPropertyValueDiscriminator.CLASS_QUALIFIED_TEST_NAME, name);",
                "-    }",
                "-",
                "     private class PortExtractingLauncherListener implements SystemLauncherListener",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/LoggingBrokerAdminDecorator.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/LoggingBrokerAdminDecorator.java",
                "new file mode 100644",
                "index 0000000000..f27df58b22",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/LoggingBrokerAdminDecorator.java",
                "@@ -0,0 +1,188 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.utils;",
                "+",
                "+import java.lang.reflect.Method;",
                "+import java.net.InetSocketAddress;",
                "+",
                "+import ch.qos.logback.classic.LoggerContext;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.test.utils.LogbackPropertyValueDiscriminator;",
                "+",
                "+public class LoggingBrokerAdminDecorator implements BrokerAdmin",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(LoggingBrokerAdminDecorator.class);",
                "+    private BrokerAdmin _delegate;",
                "+",
                "+    public LoggingBrokerAdminDecorator(final BrokerAdmin delegate)",
                "+    {",
                "+        _delegate = delegate;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void beforeTestClass(final Class testClass)",
                "+    {",
                "+        setClassQualifiedTestName(testClass.getName());",
                "+        LOGGER.info(\"========================= starting broker for test class : \" + testClass.getSimpleName());",
                "+        _delegate.beforeTestClass(testClass);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void beforeTestMethod(final Class testClass, final Method method)",
                "+    {",
                "+        LOGGER.info(\"========================= prepare test environment for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+",
                "+        _delegate.beforeTestMethod(testClass, method);",
                "+",
                "+        LOGGER.info(\"========================= executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+        setClassQualifiedTestName(testClass.getName() + \".\" + method.getName());",
                "+        LOGGER.info(\"========================= start executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+    }",
                "+",
                "+    @Override",
                "+    public void afterTestMethod(final Class testClass, final Method method)",
                "+    {",
                "+        LOGGER.info(\"========================= stop executing test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+        setClassQualifiedTestName(testClass.getName());",
                "+        LOGGER.info(\"========================= cleaning up test environment for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+",
                "+        _delegate.afterTestMethod(testClass, method);",
                "+",
                "+        setClassQualifiedTestName(testClass.getName());",
                "+        LOGGER.info(\"========================= cleaning done for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "+    }",
                "+",
                "+    @Override",
                "+    public void afterTestClass(final Class testClass)",
                "+    {",
                "+        LOGGER.info(\"========================= stopping broker for test class: \" + testClass.getSimpleName());",
                "+",
                "+        _delegate.afterTestClass(testClass);",
                "+",
                "+        LOGGER.info(\"========================= stopping broker done for test class : \" + testClass.getSimpleName());",
                "+        setClassQualifiedTestName(null);",
                "+    }",
                "+",
                "+    @Override",
                "+    public InetSocketAddress getBrokerAddress(final PortType portType)",
                "+    {",
                "+        return _delegate.getBrokerAddress(portType);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void createQueue(final String queueName)",
                "+    {",
                "+        _delegate.createQueue(queueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void deleteQueue(final String queueName)",
                "+    {",
                "+        _delegate.deleteQueue(queueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void putMessageOnQueue(final String queueName, final String... messages)",
                "+    {",
                "+        _delegate.putMessageOnQueue(queueName, messages);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getQueueDepthMessages(final String testQueueName)",
                "+    {",
                "+        return _delegate.getQueueDepthMessages(testQueueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean supportsRestart()",
                "+    {",
                "+        return _delegate.supportsRestart();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListenableFuture<Void> restart()",
                "+    {",
                "+        return _delegate.restart();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isSASLSupported()",
                "+    {",
                "+        return _delegate.isSASLSupported();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isSASLMechanismSupported(final String mechanismName)",
                "+    {",
                "+        return _delegate.isSASLMechanismSupported(mechanismName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isWebSocketSupported()",
                "+    {",
                "+        return _delegate.isWebSocketSupported();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isQueueDepthSupported()",
                "+    {",
                "+        return _delegate.isQueueDepthSupported();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isManagementSupported()",
                "+    {",
                "+        return _delegate.isManagementSupported();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValidUsername()",
                "+    {",
                "+        return _delegate.getValidUsername();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValidPassword()",
                "+    {",
                "+        return _delegate.getValidPassword();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getKind()",
                "+    {",
                "+        return _delegate.getKind();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getType()",
                "+    {",
                "+        return _delegate.getType();",
                "+    }",
                "+",
                "+    private void setClassQualifiedTestName(final String name)",
                "+    {",
                "+        final LoggerContext loggerContext = ((ch.qos.logback.classic.Logger) LOGGER).getLoggerContext();",
                "+        loggerContext.putProperty(LogbackPropertyValueDiscriminator.CLASS_QUALIFIED_TEST_NAME, name);",
                "+    }",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "index a03c129e96..443ba77ab4 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "@@ -30,2 +30,3 @@ public class QpidTestRunner extends BlockJUnit4ClassRunner",
                "     private final BrokerAdmin _brokerAdmin;",
                "+    private final BrokerAdmin _original;",
                "     private final Class _testClass;",
                "@@ -36,3 +37,6 @@ public class QpidTestRunner extends BlockJUnit4ClassRunner",
                "         _testClass = klass;",
                "-        _brokerAdmin = (new BrokerAdminFactory()).createInstance(\"EMBEDDED_BROKER_PER_CLASS\");",
                "+        RunBrokerAdmin runBrokerAdmin = (RunBrokerAdmin) _testClass.getAnnotation(RunBrokerAdmin.class);",
                "+        String type = runBrokerAdmin == null ? \"EMBEDDED_BROKER_PER_CLASS\" : runBrokerAdmin.type();",
                "+        _original = new BrokerAdminFactory().createInstance(type);",
                "+        _brokerAdmin = new LoggingBrokerAdminDecorator(_original);",
                "     }",
                "@@ -44,3 +48,3 @@ public class QpidTestRunner extends BlockJUnit4ClassRunner",
                "         BrokerAdminUsingTestBase qpidTest = ((BrokerAdminUsingTestBase) test);",
                "-        qpidTest.init(_brokerAdmin);",
                "+        qpidTest.init(_original);",
                "         return test;",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/RunBrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/RunBrokerAdmin.java",
                "new file mode 100644",
                "index 0000000000..ef8b05a968",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/RunBrokerAdmin.java",
                "@@ -0,0 +1,32 @@",
                "+package org.apache.qpid.tests.utils;/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target({ElementType.TYPE})",
                "+public @interface RunBrokerAdmin",
                "+{",
                "+    String type() default \"\";",
                "+}"
            ],
            "changed_files": [
                "bdbstore/systests/pom.xml",
                "pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "systests/qpid-systests-spawn-admin/pom.xml",
                "systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/BrokerAdminException.java",
                "systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "systests/qpid-systests-spawn-admin/src/main/resources/spawn-broker.json",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/LoggingBrokerAdminDecorator.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/RunBrokerAdmin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c6cde241692c8840ad2c36e6ce4645be60d8adb7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516800119,
            "hunks": 8,
            "message": "QPID-8032 : [Broker-J] Address review comments",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index b224fa6352..e2211dd690 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -47,2 +47,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.Deque;",
                " import java.util.HashMap;",
                "@@ -50,3 +51,2 @@ import java.util.HashSet;",
                " import java.util.Iterator;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -57,2 +57,3 @@ import java.util.UUID;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentLinkedDeque;",
                " import java.util.concurrent.ConcurrentSkipListMap;",
                "@@ -111,2 +112,3 @@ public class ServerSession extends SessionInvoker",
                "     private final Set<Object> _blockingEntities = Collections.synchronizedSet(new HashSet<>());",
                "+    private final Deque<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedDeque<>();",
                "@@ -1598,4 +1600,2 @@ public class ServerSession extends SessionInvoker",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "-",
                "     public void completeAsyncCommands()",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index c0e33894b7..d0597c1d7b 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -35,3 +35,2 @@ import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -40,2 +39,3 @@ import java.util.Set;",
                " import java.util.UUID;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -158,3 +158,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "96a4e13194095ba5cf08e1b8f886afb6c8b0adf2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516796708,
            "hunks": 153,
            "message": "QPID-8066: [Model] Refactor object delete so that an object's children delete themselves too",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "index d19cb4873e..9afb79556b 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "@@ -32,4 +32,4 @@ import java.util.concurrent.TimeoutException;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "+import com.google.common.util.concurrent.SettableFuture;",
                " import org.slf4j.Logger;",
                "@@ -47,3 +47,2 @@ import org.apache.qpid.server.model.ManagedAttributeField;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.StateTransition;",
                " import org.apache.qpid.server.store.berkeleydb.replication.ReplicatedEnvironmentFacade;",
                "@@ -71,2 +70,3 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "     private volatile NodeRole _lastKnownRole;",
                "+    private volatile  boolean _nodeLeft = false;",
                "@@ -118,8 +118,2 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "-    @Override",
                "-    public void deleted()",
                "-    {",
                "-        super.deleted();",
                "-    }",
                "-",
                "     @Override",
                "@@ -131,27 +125,40 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "-    @StateTransition(currentState = {State.ACTIVE, State.UNAVAILABLE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        String nodeName = getName();",
                "+        if (!_nodeLeft)",
                "+        {",
                "+            SettableFuture<Void> future = SettableFuture.create();",
                "-        getEventLogger().message(_virtualHostNodeLogSubject, HighAvailabilityMessages.DELETED());",
                "+            String nodeName = getName();",
                "-        boolean deletionAllowed;",
                "-        try",
                "-        {",
                "-            deletionAllowed = _replicatedEnvironmentFacade.removeNodeFromGroup(nodeName);",
                "-        }",
                "-        catch (ServerScopedRuntimeException e)",
                "-        {",
                "-            throw e;",
                "-        }",
                "-        catch (RuntimeException e)",
                "-        {",
                "-            throw new IllegalStateTransitionException(\"Unexpected exception on node '\" + nodeName + \"' deletion\", e);",
                "-        }",
                "+            boolean deletionAllowed;",
                "+            try",
                "+            {",
                "+                getEventLogger().message(_virtualHostNodeLogSubject, HighAvailabilityMessages.DELETED());",
                "+                deletionAllowed = _replicatedEnvironmentFacade.removeNodeFromGroup(nodeName);",
                "+                if (deletionAllowed)",
                "+                {",
                "+                    future.set(null);",
                "+                }",
                "+                else",
                "+                {",
                "+                    future.setException(new IllegalStateTransitionException(String.format(",
                "+                            \"Node '%s' cannot be deleted when role is a master\",",
                "+                            nodeName)));",
                "+                }",
                "+            }",
                "+            catch (ServerScopedRuntimeException e)",
                "+            {",
                "+                future.setException(e);",
                "+                throw e;",
                "+            }",
                "+            catch (RuntimeException e)",
                "+            {",
                "+                future.setException(new IllegalStateTransitionException(String.format(",
                "+                        \"Unexpected exception on node '%s' deletion\",",
                "+                        nodeName), e));",
                "+            }",
                "-        if (deletionAllowed)",
                "-        {",
                "-            setState(State.DELETED);",
                "-            deleted();",
                "+            return future;",
                "         }",
                "@@ -159,8 +166,7 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "         {",
                "-            throw new IllegalStateTransitionException(\"Node '\" + nodeName + \"' cannot be deleted when role is a master\");",
                "+            return super.onDelete();",
                "         }",
                "-",
                "-        return Futures.immediateFuture(null);",
                "     }",
                "+    @SuppressWarnings(\"unchecked\")",
                "     protected void afterSetRole()",
                "@@ -272,2 +278,13 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "     }",
                "+",
                "+    void setNodeLeft(final boolean nodeLeft)",
                "+    {",
                "+        _nodeLeft = nodeLeft;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> deleteNoChecks()",
                "+    {",
                "+        return super.deleteNoChecks();",
                "+    }",
                " }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "index 97565dfe24..3680db5634 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "@@ -155,3 +155,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "-    private boolean _isClosed;",
                "+    private volatile boolean _isClosedOrDeleted;",
                "@@ -437,50 +437,41 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "     @Override",
                "-    @StateTransition( currentState = { State.ACTIVE, State.STOPPED, State.ERRORED}, desiredState = State.DELETED )",
                "-    protected ListenableFuture<Void> doDelete()",
                "+    protected ListenableFuture<Void> beforeDelete()",
                "     {",
                "+        _isClosedOrDeleted = true;",
                "+        return super.beforeDelete();",
                "+    }",
                "-        // get helpers before close. on close all children are closed and not available anymore",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "         final Set<InetSocketAddress> helpers = getRemoteNodeAddresses();",
                "-        return doAfter(super.doDelete(),new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                    if (getConfigurationStore() != null)",
                "-                    {",
                "-                        getEventLogger().message(getVirtualHostNodeLogSubject(), HighAvailabilityMessages.DELETED());",
                "-                    }",
                "-",
                "-                    if (getState() == State.DELETED && !helpers.isEmpty())",
                "-                    {",
                "-                        try",
                "-                        {",
                "-                            new ReplicationGroupAdmin(_groupName, helpers).removeMember(getName());",
                "-                        }",
                "-                        catch(DatabaseException e)",
                "-                        {",
                "-                            LOGGER.warn(\"The deletion of node \" + this + \" on remote nodes failed due to: \" + e.getMessage()",
                "-                                        + \". To finish deletion a removal of the node from any of remote nodes (\" + helpers + \") is required.\");",
                "-                        }",
                "-                    }",
                "-            }",
                "-        });",
                "+        return doAfterAlways(closeVirtualHostIfExists(),",
                "+                             () -> {",
                "+                                 closeEnvironment();",
                "-    }",
                "+                                 DurableConfigurationStore configurationStore = getConfigurationStore();",
                "+                                 if (configurationStore != null)",
                "+                                 {",
                "+                                     configurationStore.closeConfigurationStore();",
                "+                                     configurationStore.onDelete(BDBHAVirtualHostNodeImpl.this);",
                "+                                     getEventLogger().message(getVirtualHostNodeLogSubject(), HighAvailabilityMessages.DELETED());",
                "+                                 }",
                "-    @Override",
                "-    protected ListenableFuture<Void> deleteVirtualHostIfExists()",
                "-    {",
                "-        ReplicatedEnvironmentFacade replicatedEnvironmentFacade = getReplicatedEnvironmentFacade();",
                "-        if (replicatedEnvironmentFacade != null && replicatedEnvironmentFacade.isMaster()",
                "-                && replicatedEnvironmentFacade.getNumberOfElectableGroupMembers() == 1)",
                "-        {",
                "-            return super.deleteVirtualHostIfExists();",
                "-        }",
                "-        else",
                "-        {",
                "-            return closeVirtualHostIfExist();",
                "-        }",
                "+                                 if (!helpers.isEmpty())",
                "+                                 {",
                "+                                     try",
                "+                                     {",
                "+                                         new ReplicationGroupAdmin(_groupName, helpers).removeMember(getName());",
                "+                                     }",
                "+                                     catch(DatabaseException e)",
                "+                                     {",
                "+                                         LOGGER.warn(String.format(",
                "+                                                 \"The deletion of node %s on remote nodes failed due to: %s. To finish deletion a \"",
                "+                                                 + \"removal of the node from any of remote nodes (%s) is required.\",",
                "+                                                 this, e.getMessage(), helpers));",
                "+                                     }",
                "+                                 }",
                "+                             });",
                "     }",
                "@@ -761,3 +752,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "     {",
                "-        _isClosed = true;",
                "+        _isClosedOrDeleted = true;",
                "         return super.beforeClose();",
                "@@ -786,3 +777,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "         {",
                "-            if (_isClosed)",
                "+            if (_isClosedOrDeleted)",
                "             {",
                "@@ -799,3 +790,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "                     // Ignore exception when VHN is closed or closing",
                "-                    if (!_isClosed)",
                "+                    if (!_isClosedOrDeleted)",
                "                     {",
                "@@ -1120,4 +1111,7 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "             {",
                "-                remoteNode.deleted();",
                "-                getEventLogger().message(getGroupLogSubject(), HighAvailabilityMessages.REMOVED(remoteNode.getName(), remoteNode.getAddress()));",
                "+                remoteNode.setNodeLeft(true);",
                "+                doAfter(remoteNode.deleteNoChecks(),",
                "+                        () -> getEventLogger().message(getGroupLogSubject(),",
                "+                                                 HighAvailabilityMessages.REMOVED(remoteNode.getName(),",
                "+                                                                                  remoteNode.getAddress())));",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 6227384467..1645f32dc8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -170,2 +170,8 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "         validateOrCreateAlternateBinding(((Exchange<?>) proxyForValidation), false);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            doChecks();",
                "+        }",
                "+",
                "     }",
                "@@ -293,14 +299,4 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "-    private void deleteWithChecks()",
                "+    private void performDelete()",
                "     {",
                "-        if(hasReferrers())",
                "-        {",
                "-            throw new MessageDestinationIsAlternateException(getName());",
                "-        }",
                "-",
                "-        if(isReservedExchangeName(getName()))",
                "-        {",
                "-            throw new RequiredExchangeException(getName());",
                "-        }",
                "-",
                "         if(_closed.compareAndSet(false,true))",
                "@@ -328,10 +324,15 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             getEventLogger().message(_logSubject, ExchangeMessages.DELETED());",
                "+        }",
                "+    }",
                "-            deleted();",
                "-",
                "-",
                "+    private void doChecks()",
                "+    {",
                "+        if(hasReferrers())",
                "+        {",
                "+            throw new MessageDestinationIsAlternateException(getName());",
                "         }",
                "-        else",
                "+",
                "+        if(isReservedExchangeName(getName()))",
                "         {",
                "-            deleted();",
                "+            throw new RequiredExchangeException(getName());",
                "         }",
                "@@ -908,28 +909,11 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "-    @SuppressWarnings(\"unused\")",
                "-    @StateTransition(currentState = State.UNINITIALIZED, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void>  doDeleteBeforeInitialize()",
                "-    {",
                "-        preSetAlternateBinding();",
                "-        setState(State.DELETED);",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                "-    @SuppressWarnings(\"unused\")",
                "-    @StateTransition(currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        try",
                "-        {",
                "-            deleteWithChecks();",
                "-            preSetAlternateBinding();",
                "-            setState(State.DELETED);",
                "-            return Futures.immediateFuture(null);",
                "-        }",
                "-        catch(MessageDestinationIsAlternateException | RequiredExchangeException e)",
                "+        if (getState() != State.UNINITIALIZED)",
                "         {",
                "-            // let management know about constraint violations",
                "-            // in order to report error back to caller",
                "-            return Futures.immediateFailedFuture(e);",
                "+            performDelete();",
                "         }",
                "+        preSetAlternateBinding();",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index 3b01324c2d..f6bbb7829c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -1699,42 +1699,5 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                 {",
                "-                    Map<String, Object> attributes = Collections.singletonMap(ConfiguredObject.DESIRED_STATE, desiredState);",
                "-                    ConfiguredObject<?> proxyForValidation = createProxyForValidation(attributes);",
                "-                    authoriseSetAttributes(proxyForValidation, attributes);",
                "-                    validateChange(proxyForValidation, attributes.keySet());",
                "-",
                "                     if (desiredState == State.DELETED)",
                "                     {",
                "-                        // for DELETED state we should invoke transition method first to make sure that object can be deleted.",
                "-                        // If method results in exception being thrown due to various integrity violations",
                "-                        // then object cannot be deleted without prior resolving of integrity violations.",
                "-                        // The state transition should be disallowed.",
                "-                        if (desiredState != currentDesiredState)",
                "-                        {",
                "-                            if(_parent instanceof AbstractConfiguredObject)",
                "-                            {",
                "-                                ((AbstractConfiguredObject<?>)_parent).validateChildDelete(AbstractConfiguredObject.this);",
                "-                            }",
                "-                            else if (_parent instanceof AbstractConfiguredObjectProxy)",
                "-                            {",
                "-                                ((AbstractConfiguredObjectProxy)_parent).validateChildDelete(AbstractConfiguredObject.this);",
                "-                            }",
                "-",
                "-",
                "-                            return doAfter(attainState(desiredState), new Runnable()",
                "-                            {",
                "-                                @Override",
                "-                                public void run()",
                "-                                {",
                "-                                    // state transition notification should be already issued.",
                "-                                    // changing attribute value and notifying listeners about attribute change",
                "-                                    // in case when any listener relies on attribute change rather then on state change",
                "-                                    changeAttribute(ConfiguredObject.DESIRED_STATE, desiredState);",
                "-                                    attributeSet(ConfiguredObject.DESIRED_STATE, currentDesiredState, desiredState);",
                "-                                }",
                "-                            });",
                "-                        }",
                "-                        else",
                "-                        {",
                "-                            return Futures.immediateFuture(null);",
                "-                        }",
                "+                        return deleteAsync();",
                "                     }",
                "@@ -1742,2 +1705,7 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                     {",
                "+                        Map<String, Object> attributes = Collections.singletonMap(ConfiguredObject.DESIRED_STATE, desiredState);",
                "+                        ConfiguredObject<?> proxyForValidation = createProxyForValidation(attributes);",
                "+                        authoriseSetAttributes(proxyForValidation, attributes);",
                "+                        validateChange(proxyForValidation, attributes.keySet());",
                "+",
                "                         if (changeAttribute(ConfiguredObject.DESIRED_STATE, desiredState))",
                "@@ -2248,3 +2216,129 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "     {",
                "-        return setDesiredState(State.DELETED);",
                "+        final State currentDesiredState = getDesiredState();",
                "+",
                "+        if (currentDesiredState == State.DELETED)",
                "+        {",
                "+            return Futures.immediateFuture(null);",
                "+        }",
                "+",
                "+        Map<String, Object> attributes = Collections.singletonMap(ConfiguredObject.DESIRED_STATE, State.DELETED);",
                "+        ConfiguredObject<?> proxyForValidation = createProxyForValidation(attributes);",
                "+        authoriseSetAttributes(proxyForValidation, attributes);",
                "+        validateChange(proxyForValidation, attributes.keySet());",
                "+",
                "+        // for DELETED state we should invoke transition method first to make sure that object can be deleted.",
                "+        // If method results in exception being thrown due to various integrity violations",
                "+        // then object cannot be deleted without prior resolving of integrity violations.",
                "+        // The state transition should be disallowed.",
                "+",
                "+        if(_parent instanceof AbstractConfiguredObject<?>)",
                "+        {",
                "+            ((AbstractConfiguredObject<?>)_parent).validateChildDelete(AbstractConfiguredObject.this);",
                "+        }",
                "+        else if (_parent instanceof AbstractConfiguredObjectProxy)",
                "+        {",
                "+            ((AbstractConfiguredObjectProxy)_parent).validateChildDelete(AbstractConfiguredObject.this);",
                "+        }",
                "+",
                "+        return deleteNoChecks();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> deleteNoChecks()",
                "+    {",
                "+        final String simpleClassName = AbstractConfiguredObject.this.getClass().getSimpleName();",
                "+        final SettableFuture<Void> returnFuture = SettableFuture.create();",
                "+        final State currentDesiredState = getDesiredState();",
                "+",
                "+        final ChainedListenableFuture<Void> future =",
                "+                doAfter(beforeDelete(), this::deleteChildren).then(this::onDelete)",
                "+                                                             .then(() -> {",
                "+                                                                 final State currentState = getState();",
                "+                                                                 setState(State.DELETED);",
                "+                                                                 notifyStateChanged(currentState, State.DELETED);",
                "+                                                                 changeAttribute(ConfiguredObject.DESIRED_STATE, State.DELETED);",
                "+                                                                 attributeSet(ConfiguredObject.DESIRED_STATE, currentDesiredState, State.DELETED);",
                "+                                                                 unregister(true);",
                "+",
                "+                                                                 LOGGER.debug(\"Delete {} : {}\",",
                "+                                                                              simpleClassName,",
                "+                                                                              getName());",
                "+                                                                 return Futures.immediateFuture(null);",
                "+                                                                       });",
                "+        addFutureCallback(future, new FutureCallback<Void>()",
                "+        {",
                "+            @Override",
                "+            public void onSuccess(final Void result)",
                "+            {",
                "+                returnFuture.set(null);",
                "+            }",
                "+",
                "+            @Override",
                "+            public void onFailure(final Throwable t)",
                "+            {",
                "+                returnFuture.setException(t);",
                "+            }",
                "+        }, MoreExecutors.directExecutor());",
                "+",
                "+        return returnFuture;",
                "+    }",
                "+",
                "+    protected final ListenableFuture<Void> deleteChildren()",
                "+    {",
                "+        // If this object manages its own child-storage then don't propagate the delete.  The rationale",
                "+        // is that deleting the object will delete the storage that contains the children.  Telling each",
                "+        // child and their children to delete themselves would generate unnecessary 'delete' work in the",
                "+        // child-storage (which also might fail).",
                "+        if (managesChildStorage())",
                "+        {",
                "+            return Futures.immediateFuture(null);",
                "+        }",
                "+",
                "+        final List<ListenableFuture<Void>> childDeleteFutures = new ArrayList<>();",
                "+",
                "+        applyToChildren(child -> {",
                "+",
                "+            final ListenableFuture<Void> childDeleteFuture;",
                "+            if (child instanceof AbstractConfiguredObject<?>)",
                "+            {",
                "+                 childDeleteFuture = ((AbstractConfiguredObject<?>) child).deleteNoChecks();",
                "+            }",
                "+            else if (child instanceof AbstractConfiguredObjectProxy)",
                "+            {",
                "+                childDeleteFuture = ((AbstractConfiguredObjectProxy) child).deleteNoChecks();",
                "+            }",
                "+            else",
                "+            {",
                "+                childDeleteFuture = Futures.immediateFuture(null);",
                "+            }",
                "+",
                "+            addFutureCallback(childDeleteFuture, new FutureCallback<Void>()",
                "+            {",
                "+                @Override",
                "+                public void onSuccess(final Void result)",
                "+                {",
                "+                }",
                "+",
                "+                @Override",
                "+                public void onFailure(final Throwable t)",
                "+                {",
                "+                    LOGGER.error(\"Exception occurred while deleting {} : {}\",",
                "+                                 child.getClass().getSimpleName(), child.getName(), t);",
                "+                }",
                "+            }, getTaskExecutor());",
                "+            childDeleteFutures.add(childDeleteFuture);",
                "+        });",
                "+",
                "+        ListenableFuture<List<Void>> combinedFuture = Futures.allAsList(childDeleteFutures);",
                "+",
                "+        return Futures.transform(combinedFuture, input -> null, getTaskExecutor());",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> beforeDelete()",
                "+    {",
                "+        return Futures.immediateFuture(null);",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "+        return Futures.immediateFuture(null);",
                "     }",
                "@@ -2261,4 +2355,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-",
                "-    protected void deleted()",
                "+    private void deleted()",
                "     {",
                "@@ -3679,3 +3772,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         {",
                "-            if(source instanceof AbstractConfiguredObject)",
                "+            if(source instanceof AbstractConfiguredObject<?>)",
                "             {",
                "@@ -3712,3 +3805,15 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                     // TODO - RG - This isn't right :-(",
                "-                    source.deleteAsync();",
                "+                    if (source instanceof AbstractConfiguredObject)",
                "+                    {",
                "+                        ((AbstractConfiguredObject) source).deleteNoChecks();",
                "+                    }",
                "+                    else if (source instanceof AbstractConfiguredObjectProxy)",
                "+                    {",
                "+                        ((AbstractConfiguredObjectProxy) source).deleteNoChecks();",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        source.deleteAsync();",
                "+                    }",
                "+",
                "                 }",
                "@@ -3762,2 +3867,4 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         void forceUpdateAllSecureAttributes();",
                "+",
                "+        ListenableFuture<Void> deleteNoChecks();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "index ad11a7b957..7119d00a61 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "@@ -232,4 +232,4 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "         {",
                "-            deleted();",
                "-            throw new IllegalConfigurationException(\"Broker \" + Broker.MODEL_VERSION + \" must be specified\");",
                "+            deleteNoChecks();",
                "+            throw new IllegalConfigurationException(String.format(\"Broker %s must be specified\", Broker.MODEL_VERSION));",
                "         }",
                "@@ -238,5 +238,6 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "         {",
                "-            deleted();",
                "-            throw new IllegalConfigurationException(\"Broker \" + Broker.MODEL_VERSION + \" is specified in incorrect format: \"",
                "-                                                    + modelVersion);",
                "+            deleteNoChecks();",
                "+            throw new IllegalConfigurationException(String.format(\"Broker %s is specified in incorrect format: %s\",",
                "+                                                                  Broker.MODEL_VERSION,",
                "+                                                                  modelVersion));",
                "         }",
                "@@ -250,5 +251,7 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "         {",
                "-            deleted();",
                "-            throw new IllegalConfigurationException(\"The model version '\" + modelVersion",
                "-                                                    + \"' in configuration is incompatible with the broker model version '\" + BrokerModel.MODEL_VERSION + \"'\");",
                "+            deleteNoChecks();",
                "+            throw new IllegalConfigurationException(String.format(",
                "+                    \"The model version '%s' in configuration is incompatible with the broker model version '%s'\",",
                "+                    modelVersion,",
                "+                    BrokerModel.MODEL_VERSION));",
                "         }",
                "@@ -257,4 +260,4 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "         {",
                "-            deleted();",
                "-            throw new IllegalArgumentException(getClass().getSimpleName() + \" must be durable\");",
                "+            deleteNoChecks();",
                "+            throw new IllegalArgumentException(String.format(\"%s must be durable\", getClass().getSimpleName()));",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java",
                "index 60eeb57639..f592c761bf 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java",
                "@@ -266,24 +266,19 @@ public class FileBasedGroupProviderImpl",
                "-    @StateTransition( currentState = { State.QUIESCED, State.ACTIVE, State.ERRORED}, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(),",
                "-                new Runnable()",
                "-                {",
                "-                    @Override",
                "-                    public void run()",
                "-                    {",
                "-                        File file = new File(getPath());",
                "-                        if (file.exists())",
                "-                        {",
                "-                            if (!file.delete())",
                "-                            {",
                "-                                throw new IllegalConfigurationException(\"Cannot delete group file\");",
                "-                            }",
                "-                        }",
                "-",
                "-                        deleted();",
                "-                        setState(State.DELETED);",
                "-                    }",
                "-                });",
                "+        // We manage the storage children so we close (so they may free any resources) them rather than deleting them",
                "+        return doAfterAlways(closeChildren(),",
                "+                             () -> {",
                "+                                 File file = new File(getPath());",
                "+                                 if (file.exists())",
                "+                                 {",
                "+                                     if (!file.delete())",
                "+                                     {",
                "+                                         throw new IllegalConfigurationException(String.format(",
                "+                                                 \"Cannot delete group file '%s'\",",
                "+                                                 file));",
                "+                                     }",
                "+                                 }",
                "+                             });",
                "     }",
                "@@ -384,9 +379,8 @@ public class FileBasedGroupProviderImpl",
                "-        @StateTransition( currentState = State.ACTIVE, desiredState = State.DELETED )",
                "-        private ListenableFuture<Void> doDelete()",
                "+        @Override",
                "+        protected ListenableFuture<Void> onDelete()",
                "         {",
                "             _groupDatabase.removeGroup(getName());",
                "-            deleted();",
                "-            setState(State.DELETED);",
                "-            return Futures.immediateFuture(null);",
                "+            return super.onDelete();",
                "+",
                "         }",
                "@@ -426,9 +420,7 @@ public class FileBasedGroupProviderImpl",
                "-            @StateTransition(currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-            private ListenableFuture<Void> doDelete()",
                "+            @Override",
                "+            protected ListenableFuture<Void> onDelete()",
                "             {",
                "                 _groupDatabase.removeUserFromGroup(getName(), GroupAdapter.this.getName());",
                "-                deleted();",
                "-                setState(State.DELETED);",
                "-                return Futures.immediateFuture(null);",
                "+                return super.onDelete();",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "index c77611eec2..45efb41970 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "@@ -370,15 +370,7 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "-    @StateTransition(currentState = { State.ACTIVE, State.QUIESCED, State.ERRORED}, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                deleted();",
                "-                setState(State.DELETED);",
                "-                _eventLogger.message(PortMessages.DELETE(getType(), getName()));",
                "-            }",
                "-        });",
                "+        _eventLogger.message(PortMessages.DELETE(getType(), getName()));",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "index 4a9eb02e5a..f2b1c2642e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "@@ -72,3 +72,2 @@ import org.apache.qpid.server.transport.TransportProvider;",
                " import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "-import org.apache.qpid.server.util.PortUtil;",
                " import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -97,3 +96,3 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "     private final Container<?> _container;",
                "-    private final AtomicBoolean _closing = new AtomicBoolean();",
                "+    private final AtomicBoolean _closingOrDeleting = new AtomicBoolean();",
                "@@ -278,3 +277,3 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "     {",
                "-        _closing.set(true);",
                "+        _closingOrDeleting.set(true);",
                "         return Futures.immediateFuture(null);",
                "@@ -284,2 +283,22 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "     protected ListenableFuture<Void> onClose()",
                "+    {",
                "+        closeTransport();",
                "+        return Futures.immediateFuture(null);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> beforeDelete()",
                "+    {",
                "+        _closingOrDeleting.set(true);",
                "+        return super.beforeDelete();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "+        closeTransport();",
                "+        return super.onDelete();",
                "+    }",
                "+",
                "+    private void closeTransport()",
                "     {",
                "@@ -294,3 +313,2 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "         }",
                "-        return Futures.immediateFuture(null);",
                "     }",
                "@@ -553,3 +571,3 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "         String addressString = remoteSocketAddress.toString();",
                "-        if (_closing.get())",
                "+        if (_closingOrDeleting.get())",
                "         {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index 09ec51c203..d8c2c8920c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -198,3 +198,3 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "     private final AtomicBoolean _deleted = new AtomicBoolean(false);",
                "-    private final SettableFuture<Integer> _deleteFuture = SettableFuture.create();",
                "+    private final SettableFuture<Integer> _deleteQueueDepthFuture = SettableFuture.create();",
                "@@ -1789,12 +1789,16 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "     {",
                "-        // Check access",
                "-        authorise(Operation.DELETE);",
                "-",
                "-        if(hasReferrers())",
                "-        {",
                "-            throw new MessageDestinationIsAlternateException(getName());",
                "-        }",
                "+        return Futures.transformAsync(deleteAsync(), v -> _deleteQueueDepthFuture, getTaskExecutor());",
                "+    }",
                "+    private ListenableFuture<Integer> performDelete()",
                "+    {",
                "         if (_deleted.compareAndSet(false, true))",
                "         {",
                "+            if (getState() == State.UNINITIALIZED)",
                "+            {",
                "+                preSetAlternateBinding();",
                "+                _deleteQueueDepthFuture.set(0);",
                "+                return _deleteQueueDepthFuture;",
                "+            }",
                "+",
                "             final int queueDepthMessages = getQueueDepthMessages();",
                "@@ -1831,3 +1835,2 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "                 performQueueDeleteTasks();",
                "-                deleted();",
                "@@ -1835,5 +1838,3 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "                 getEventLogger().message(_logSubject, QueueMessages.DELETED(getId().toString()));",
                "-",
                "-                _deleteFuture.set(queueDepthMessages);",
                "-                setState(State.DELETED);",
                "+                _deleteQueueDepthFuture.set(queueDepthMessages);",
                "             }",
                "@@ -1841,7 +1842,6 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                _deleteFuture.setException(e);",
                "+                _deleteQueueDepthFuture.setException(e);",
                "             }",
                "-",
                "         }",
                "-        return _deleteFuture;",
                "+        return _deleteQueueDepthFuture;",
                "     }",
                "@@ -2960,26 +2960,8 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "-    @StateTransition(currentState = State.UNINITIALIZED, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDeleteBeforeInitialize()",
                "-    {",
                "-        preSetAlternateBinding();",
                "-        setState(State.DELETED);",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                "-    @StateTransition(currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        ListenableFuture<Integer> removeFuture = deleteAndReturnCountAsync();",
                "-        return doAfter(removeFuture, new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-",
                "-            }",
                "-        });",
                "-",
                "+        return Futures.transform(performDelete(), i -> null, getTaskExecutor());",
                "     }",
                "-",
                "     @Override",
                "@@ -3118,2 +3100,10 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "         }",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            if(hasReferrers())",
                "+            {",
                "+                throw new MessageDestinationIsAlternateException(getName());",
                "+            }",
                "+        }",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/QueueConsumerImpl.java b/broker-core/src/main/java/org/apache/qpid/server/queue/QueueConsumerImpl.java",
                "index 0972a1a069..e6974e7d93 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/QueueConsumerImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/QueueConsumerImpl.java",
                "@@ -39,3 +39,2 @@ import org.slf4j.LoggerFactory;",
                "-import org.apache.qpid.server.filter.SelectorParsingException;",
                " import org.apache.qpid.server.consumer.ConsumerOption;",
                "@@ -46,2 +45,3 @@ import org.apache.qpid.server.filter.JMSSelectorFilter;",
                " import org.apache.qpid.server.filter.MessageFilter;",
                "+import org.apache.qpid.server.filter.SelectorParsingException;",
                " import org.apache.qpid.server.logging.EventLogger;",
                "@@ -244,12 +244,5 @@ class QueueConsumerImpl<T extends ConsumerTarget>",
                "             return doAfter(_target.consumerRemoved(this),",
                "-                           new Runnable()",
                "-                           {",
                "-                               @Override",
                "-                               public void run()",
                "-                               {",
                "-                                   _queue.unregisterConsumer(QueueConsumerImpl.this);",
                "-",
                "-                                   deleted();",
                "-                               }",
                "-                           });",
                "+                           () -> {",
                "+                               _queue.unregisterConsumer(QueueConsumerImpl.this);",
                "+                           }).then(this::deleteNoChecks);",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "index 21a956411c..453399ade0 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "@@ -29,2 +29,3 @@ import java.util.Date;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.concurrent.ScheduledFuture;",
                "@@ -80,2 +81,27 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            // verify that it is not in use",
                "+            String storeName = getName();",
                "+",
                "+            Collection<Port> ports = new ArrayList<>(getBroker().getPorts());",
                "+            for (Port port : ports)",
                "+            {",
                "+                if (port.getKeyStore() == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(",
                "+                            \"Key store '%s' can't be deleted as it is in use by a port: %s\",",
                "+                            storeName,",
                "+                            port.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+    }",
                "+",
                "     @Override",
                "@@ -131,21 +157,2 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "-    protected final ListenableFuture<Void> deleteIfNotInUse()",
                "-    {",
                "-        // verify that it is not in use",
                "-        String storeName = getName();",
                "-",
                "-        Collection<Port> ports = new ArrayList<>(getBroker().getPorts());",
                "-        for (Port port : ports)",
                "-        {",
                "-            if (port.getKeyStore() == this)",
                "-            {",
                "-                throw new IntegrityViolationException(\"Key store '\" + storeName + \"' can't be deleted as it is in use by a port:\" + port.getName());",
                "-            }",
                "-        }",
                "-        deleted();",
                "-        setState(State.DELETED);",
                "-        getEventLogger().message(KeyStoreMessages.DELETE(getName()));",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                "     protected abstract void checkCertificateExpiry();",
                "@@ -179,2 +186,9 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "+        getEventLogger().message(KeyStoreMessages.DELETE(getName()));",
                "+        return super.onDelete();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "index 2530e55cb5..fe4655a05f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "@@ -109,2 +109,58 @@ public abstract class AbstractTrustStore<X extends AbstractTrustStore<X>>",
                "+",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE)",
                "+            && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            // verify that it is not in use",
                "+            String storeName = getName();",
                "+",
                "+            Collection<Port<?>> ports = new ArrayList<>(_broker.getPorts());",
                "+            for (Port<?> port : ports)",
                "+            {",
                "+                Collection<TrustStore> trustStores = port.getTrustStores();",
                "+                if (trustStores != null)",
                "+                {",
                "+                    for (TrustStore store : trustStores)",
                "+                    {",
                "+                        if (storeName.equals(store.getAttribute(TrustStore.NAME)))",
                "+                        {",
                "+                            throw new IntegrityViolationException(String.format(",
                "+                                    \"Trust store '%s' can't be deleted as it is in use by a port: %s\",",
                "+                                    storeName,",
                "+                                    port.getName()));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            Collection<AuthenticationProvider> authenticationProviders =",
                "+                    new ArrayList<>(_broker.getAuthenticationProviders());",
                "+            for (AuthenticationProvider authProvider : authenticationProviders)",
                "+            {",
                "+                TrustStore otherTrustStore = null;",
                "+                if (authProvider instanceof SimpleLDAPAuthenticationManager)",
                "+                {",
                "+                    otherTrustStore = ((SimpleLDAPAuthenticationManager) authProvider).getTrustStore();",
                "+                }",
                "+                else if (authProvider instanceof OAuth2AuthenticationProvider)",
                "+                {",
                "+                    otherTrustStore = ((OAuth2AuthenticationProvider) authProvider).getTrustStore();",
                "+                }",
                "+",
                "+                if (otherTrustStore == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(",
                "+                            \"Trust store '%s' can't be deleted as it is in use by an authentication manager: '%s'\",",
                "+                            getName(),",
                "+                            authProvider.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -154,51 +210,7 @@ public abstract class AbstractTrustStore<X extends AbstractTrustStore<X>>",
                "-    final ListenableFuture<Void> deleteIfNotInUse()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        // verify that it is not in use",
                "-        String storeName = getName();",
                "-",
                "-        Collection<Port<?>> ports = new ArrayList<>(_broker.getPorts());",
                "-        for (Port<?> port : ports)",
                "-        {",
                "-            Collection<TrustStore> trustStores = port.getTrustStores();",
                "-            if(trustStores != null)",
                "-            {",
                "-                for (TrustStore store : trustStores)",
                "-                {",
                "-                    if(storeName.equals(store.getAttribute(TrustStore.NAME)))",
                "-                    {",
                "-                        throw new IntegrityViolationException(\"Trust store '\"",
                "-                                                              + storeName",
                "-                                                              + \"' can't be deleted as it is in use by a port: \"",
                "-                                                              + port.getName());",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        Collection<AuthenticationProvider> authenticationProviders = new ArrayList<>(_broker.getAuthenticationProviders());",
                "-        for (AuthenticationProvider authProvider : authenticationProviders)",
                "-        {",
                "-            TrustStore otherTrustStore = null;",
                "-            if (authProvider instanceof SimpleLDAPAuthenticationManager)",
                "-            {",
                "-                otherTrustStore = ((SimpleLDAPAuthenticationManager) authProvider).getTrustStore();",
                "-            }",
                "-            else if (authProvider instanceof OAuth2AuthenticationProvider)",
                "-            {",
                "-                otherTrustStore = ((OAuth2AuthenticationProvider) authProvider).getTrustStore();",
                "-            }",
                "-",
                "-            if (otherTrustStore == this)",
                "-            {",
                "-                throw new IntegrityViolationException(String.format(",
                "-                        \"Trust store '%s' can't be deleted as it is in use by an authentication manager: '%s'\",",
                "-                        getName(),",
                "-                        authProvider.getName()));",
                "-            }",
                "-        }",
                "-        deleted();",
                "-        setState(State.DELETED);",
                "         _eventLogger.message(TrustStoreMessages.DELETE(getName()));",
                "-        return Futures.immediateFuture(null);",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AllowAllAccessControlProviderImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/AllowAllAccessControlProviderImpl.java",
                "index 2ce0179849..02237c8e4a 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AllowAllAccessControlProviderImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AllowAllAccessControlProviderImpl.java",
                "@@ -86,17 +86,7 @@ public class AllowAllAccessControlProviderImpl extends AbstractConfiguredObject<",
                "-    @StateTransition(currentState = {State.ACTIVE, State.QUIESCED, State.ERRORED}, desiredState = State.DELETED)",
                "-    @SuppressWarnings(\"unused\")",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(),",
                "-                             new Runnable()",
                "-                             {",
                "-                                 @Override",
                "-                                 public void run()",
                "-                                 {",
                "-                                     setState(State.DELETED);",
                "-                                     deleted();",
                "-                                     _broker.getEventLogger().message(AccessControlMessages.DELETE(getName()));",
                "-                                 }",
                "-                             });",
                "+        _broker.getEventLogger().message(AccessControlMessages.DELETE(getName()));",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "index 4757904dd7..244d8026c4 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "@@ -44,6 +44,4 @@ import java.security.cert.X509Certificate;",
                " import java.security.spec.InvalidKeySpecException;",
                "-import java.util.ArrayList;",
                " import java.util.Arrays;",
                " import java.util.Calendar;",
                "-import java.util.Collection;",
                " import java.util.Collections;",
                "@@ -67,6 +65,4 @@ import org.apache.qpid.server.model.Content;",
                " import org.apache.qpid.server.model.CustomRestHeaders;",
                "-import org.apache.qpid.server.model.IntegrityViolationException;",
                " import org.apache.qpid.server.model.ManagedAttributeField;",
                " import org.apache.qpid.server.model.ManagedObjectFactoryConstructor;",
                "-import org.apache.qpid.server.model.Port;",
                " import org.apache.qpid.server.model.RestContentHeader;",
                "@@ -247,25 +243,2 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "-    @StateTransition(currentState = {State.UNINITIALIZED, State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        // verify that it is not in use",
                "-        String storeName = getName();",
                "-",
                "-        Collection<Port> ports = new ArrayList<>(_broker.getPorts());",
                "-        for (Port port : ports)",
                "-        {",
                "-            if (port.getKeyStore() == this)",
                "-            {",
                "-                throw new IntegrityViolationException(\"Key store '\"",
                "-                                                      + storeName",
                "-                                                      + \"' can't be deleted as it is in use by a port:\"",
                "-                                                      + port.getName());",
                "-            }",
                "-        }",
                "-        deleted();",
                "-        setState(State.DELETED);",
                "-        _eventLogger.message(KeyStoreMessages.DELETE(getName()));",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                "     private void generatePrivateKeyAndCertificate()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "index 33090d0353..0912e0fe56 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "@@ -100,8 +100,2 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "index 527b66803d..7c2be9748e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "@@ -99,8 +99,2 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStoreImpl.java",
                "index 8e02d327b9..5361ba0d96 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStoreImpl.java",
                "@@ -93,8 +93,2 @@ public class ManagedPeerCertificateTrustStoreImpl",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStoreImpl.java",
                "index ff84694fd4..8beaf19104 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStoreImpl.java",
                "@@ -168,8 +168,2 @@ public class NonJavaKeyStoreImpl extends AbstractKeyStore<NonJavaKeyStoreImpl> i",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaTrustStoreImpl.java",
                "index 287ca582c9..be0836e2aa 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaTrustStoreImpl.java",
                "@@ -112,8 +112,2 @@ public class NonJavaTrustStoreImpl",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java",
                "index 952c74eab1..09029dee95 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java",
                "@@ -166,8 +166,2 @@ public class SiteSpecificTrustStoreImpl",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return deleteIfNotInUse();",
                "-    }",
                "-",
                "     @StateTransition(currentState = {State.UNINITIALIZED, State.ERRORED}, desiredState = State.ACTIVE)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/access/AbstractAccessControlProvider.java b/broker-core/src/main/java/org/apache/qpid/server/security/access/AbstractAccessControlProvider.java",
                "index ca0dca2098..95ffa7054a 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/access/AbstractAccessControlProvider.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/access/AbstractAccessControlProvider.java",
                "@@ -37,3 +37,2 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "-import org.apache.qpid.server.security.AccessControl;",
                "@@ -84,20 +83,9 @@ public abstract class AbstractAccessControlProvider<X extends AbstractAccessCont",
                "-    @StateTransition(currentState = {State.ACTIVE, State.QUIESCED, State.ERRORED}, desiredState = State.DELETED)",
                "-    @SuppressWarnings(\"unused\")",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(),",
                "-                             new Runnable()",
                "-                             {",
                "-                                 @Override",
                "-                                 public void run()",
                "-                                 {",
                "-                                     setState(State.DELETED);",
                "-                                     deleted();",
                "-                                     getEventLogger().message(AccessControlMessages.DELETE(getName()));",
                "-                                 }",
                "-                             });",
                "+        getEventLogger().message(AccessControlMessages.DELETE(getName()));",
                "+        return super.onDelete();",
                "     }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "index d4bbe7635a..5b8b219668 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "@@ -29,6 +29,4 @@ import java.util.Set;",
                "-import com.google.common.util.concurrent.FutureCallback;",
                " import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "-import com.google.common.util.concurrent.SettableFuture;",
                " import org.slf4j.Logger;",
                "@@ -40,2 +38,3 @@ import org.apache.qpid.server.model.AbstractConfiguredObject;",
                " import org.apache.qpid.server.model.AuthenticationProvider;",
                "+import org.apache.qpid.server.model.ConfiguredObject;",
                " import org.apache.qpid.server.model.Container;",
                "@@ -83,2 +82,24 @@ public abstract class AbstractAuthenticationManager<T extends AbstractAuthentica",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            String providerName = getName();",
                "+            // verify that provider is not in use",
                "+            Collection<Port> ports = new ArrayList<>(_container.getChildren(Port.class));",
                "+            for (Port<?> port : ports)",
                "+            {",
                "+                if (port.getAuthenticationProvider() == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(\"Authentication provider '%s' is set on port %s\",",
                "+                                                                        providerName,",
                "+                                                                        port.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -132,62 +153,7 @@ public abstract class AbstractAuthenticationManager<T extends AbstractAuthentica",
                "-    @StateTransition( currentState = { State.ACTIVE, State.QUIESCED, State.ERRORED}, desiredState = State.DELETED)",
                "-    protected ListenableFuture<Void> doDelete()",
                "-    {",
                "-",
                "-        String providerName = getName();",
                "-",
                "-        // verify that provider is not in use",
                "-        Collection<Port> ports = new ArrayList<>(_container.getChildren(Port.class));",
                "-        for (Port<?> port : ports)",
                "-        {",
                "-            if(port.getAuthenticationProvider() == this)",
                "-            {",
                "-                throw new IntegrityViolationException(\"Authentication provider '\" + providerName + \"' is set on port \" + port.getName());",
                "-            }",
                "-        }",
                "-",
                "-        return performDelete();",
                "-    }",
                "-",
                "-    private ListenableFuture<Void> performDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        final SettableFuture<Void> futureResult = SettableFuture.create();",
                "-        addFutureCallback(closeAsync(), new FutureCallback<Void>()",
                "-        {",
                "-            @Override",
                "-            public void onSuccess(final Void result)",
                "-            {",
                "-                try",
                "-                {",
                "-                    tidyUp();",
                "-                    futureResult.set(null);",
                "-                }",
                "-                catch (Exception e)",
                "-                {",
                "-                    futureResult.setException(e);",
                "-                }",
                "-            }",
                "-",
                "-            @Override",
                "-            public void onFailure(final Throwable t)",
                "-            {",
                "-                try",
                "-                {",
                "-                    tidyUp();",
                "-                }",
                "-                finally",
                "-                {",
                "-                    futureResult.setException(t);",
                "-                }",
                "-            }",
                "-",
                "-            private void tidyUp()",
                "-            {",
                "-                deleted();",
                "-                setState(State.DELETED);",
                "-                _eventLogger.message(AuthenticationProviderMessages.DELETE(getName()));",
                "-            }",
                "-        }, getTaskExecutor());",
                "-",
                "-        return futureResult;",
                "+        _eventLogger.message(AuthenticationProviderMessages.DELETE(getName()));",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ManagedUser.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ManagedUser.java",
                "index b00edd90c7..d7987f350f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ManagedUser.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ManagedUser.java",
                "@@ -26,5 +26,2 @@ import java.util.Map;",
                "-import javax.security.auth.login.AccountNotFoundException;",
                "-",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -38,3 +35,2 @@ import org.apache.qpid.server.model.ManagedObjectFactoryConstructor;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.StateTransition;",
                " import org.apache.qpid.server.model.User;",
                "@@ -77,8 +73,7 @@ class ManagedUser extends AbstractConfiguredObject<ManagedUser> implements User<",
                "-    @StateTransition(currentState = {State.ACTIVE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "         _authenticationManager.getUserMap().remove(getName());",
                "-        deleted();",
                "-        return Futures.immediateFuture(null);",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "index 9716d33445..af1affcfc3 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "@@ -235,13 +235,13 @@ public abstract class PrincipalDatabaseAuthenticationManager<T extends Principal",
                "     @Override",
                "-    @StateTransition( currentState = { State.ACTIVE, State.QUIESCED, State.ERRORED, State.UNINITIALIZED}, desiredState = State.DELETED)",
                "-    public ListenableFuture<Void> doDelete()",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        File file = new File(_path);",
                "-        if (file.exists() && file.isFile())",
                "-        {",
                "-            file.delete();",
                "-        }",
                "-        deleted();",
                "-        setState(State.DELETED);",
                "-        return Futures.immediateFuture(null);",
                "+        // We manage the storage children so we close (so they may free any resources) them rather than deleting them",
                "+        return doAfterAlways(closeChildren(),",
                "+                             () -> {",
                "+                                 File file = new File(_path);",
                "+                                 if (file.exists() && file.isFile())",
                "+                                 {",
                "+                                     file.delete();",
                "+                                 }",
                "+                             });",
                "     }",
                "@@ -333,3 +333,3 @@ public abstract class PrincipalDatabaseAuthenticationManager<T extends Principal",
                "             {",
                "-                principalAdapter.deleteAsync();",
                "+                principalAdapter.deleteNoChecks();",
                "                 throw e;",
                "@@ -452,4 +452,4 @@ public abstract class PrincipalDatabaseAuthenticationManager<T extends Principal",
                "-        @StateTransition(currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-        private ListenableFuture<Void> doDelete()",
                "+        @Override",
                "+        protected ListenableFuture<Void> onDelete()",
                "         {",
                "@@ -464,5 +464,9 @@ public abstract class PrincipalDatabaseAuthenticationManager<T extends Principal",
                "             }",
                "-            deleted();",
                "-            setState(State.DELETED);",
                "-            return Futures.immediateFuture(null);",
                "+            return super.onDelete();",
                "+        }",
                "+",
                "+        @Override",
                "+        protected ListenableFuture<Void> deleteNoChecks()",
                "+        {",
                "+            return super.deleteNoChecks();",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupImpl.java",
                "index dc35562076..218f712948 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupImpl.java",
                "@@ -54,11 +54,2 @@ public class GroupImpl extends AbstractConfiguredObject<GroupImpl> implements Gr",
                "     }",
                "-",
                "-",
                "-    @StateTransition(currentState = {State.ACTIVE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        deleted();",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupMemberImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupMemberImpl.java",
                "index c0d0c92892..f5f99a6d35 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupMemberImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupMemberImpl.java",
                "@@ -53,11 +53,2 @@ public class GroupMemberImpl extends AbstractConfiguredObject<GroupMemberImpl> i",
                "     }",
                "-",
                "-",
                "-    @StateTransition(currentState = {State.ACTIVE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        deleted();",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupProviderImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupProviderImpl.java",
                "index 891bf7c984..dfd55da14f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupProviderImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/group/GroupProviderImpl.java",
                "@@ -98,11 +98,2 @@ public class GroupProviderImpl extends AbstractConfiguredObject<GroupProviderImp",
                "     }",
                "-",
                "-",
                "-    @StateTransition(currentState = {State.ACTIVE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        deleted();",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/group/cloudfoundry/CloudFoundryDashboardManagementGroupProviderImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/group/cloudfoundry/CloudFoundryDashboardManagementGroupProviderImpl.java",
                "index 6a6130ece5..88659b59a3 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/group/cloudfoundry/CloudFoundryDashboardManagementGroupProviderImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/group/cloudfoundry/CloudFoundryDashboardManagementGroupProviderImpl.java",
                "@@ -273,9 +273,2 @@ public class CloudFoundryDashboardManagementGroupProviderImpl extends AbstractCo",
                "-    @StateTransition(currentState = {State.ACTIVE}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        deleted();",
                "-        return Futures.immediateFuture(null);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java b/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "index b68ed7f30b..6ca5e5e344 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "@@ -35,3 +35,2 @@ import javax.security.auth.Subject;",
                " import com.google.common.base.Supplier;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -56,3 +55,2 @@ import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.StateTransition;",
                " import org.apache.qpid.server.protocol.PublishAuthorisationCache;",
                "@@ -101,3 +99,3 @@ public abstract class AbstractAMQPSession<S extends AbstractAMQPSession<S, X>,",
                "                 removeDeleteTask(this);",
                "-                deleteAsync();",
                "+                deleteNoChecks();",
                "             }",
                "@@ -188,9 +186,7 @@ public abstract class AbstractAMQPSession<S extends AbstractAMQPSession<S, X>,",
                "-    @StateTransition(currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        deleted();",
                "-        setState(State.DELETED);",
                "         removeDeleteTask(_deleteModelTask);",
                "-        return Futures.immediateFuture(null);",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java b/broker-core/src/main/java/org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java",
                "index 0bf0aefac1..988f49239b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java",
                "@@ -1142,3 +1142,2 @@ public class VirtualHostStoreUpgraderAndRecoverer extends AbstractConfigurationS",
                "                         child.removeChangeListener(configChangeListener);",
                "-                        removeVirtualHostConfiguration((VirtualHost<?>) child, durableConfigurationStore);",
                "                     }",
                "@@ -1155,23 +1154,2 @@ public class VirtualHostStoreUpgraderAndRecoverer extends AbstractConfigurationS",
                "     }",
                "-",
                "-    private void removeVirtualHostConfiguration(final VirtualHost<?> virtualHost,",
                "-                                                final DurableConfigurationStore durableConfigurationStore)",
                "-    {",
                "-        Set<ConfiguredObjectRecord> records = new HashSet<>();",
                "-        applyRecursively(virtualHost, new RecursiveAction<ConfiguredObject<?>>()",
                "-        {",
                "-            @Override",
                "-            public boolean applyToChildren(final ConfiguredObject<?> object)",
                "-            {",
                "-                return object.isDurable();",
                "-            }",
                "-",
                "-            @Override",
                "-            public void performAction(final ConfiguredObject<?> object)",
                "-            {",
                "-                records.add(object.asObjectRecord());",
                "-            }",
                "-        });",
                "-        durableConfigurationStore.remove(records.toArray(new ConfiguredObjectRecord[records.size()]));",
                "-    }",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "index 059db39d97..1049b8bfde 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "@@ -36,3 +36,2 @@ import java.util.Map;",
                " import java.util.concurrent.CopyOnWriteArrayList;",
                "-import java.util.concurrent.atomic.AtomicBoolean;",
                " import java.util.concurrent.atomic.AtomicLong;",
                "@@ -65,3 +64,2 @@ import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.StateTransition;",
                " import org.apache.qpid.server.model.TaskExecutorProvider;",
                "@@ -121,4 +119,3 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "     private final SettableFuture<Void> _transportClosedFuture = SettableFuture.create();",
                "-    private final SettableFuture<Void> _modelClosedFuture = SettableFuture.create();",
                "-    private final AtomicBoolean _modelClosing = new AtomicBoolean();",
                "+    private final SettableFuture<Void> _modelTransportRendezvousFuture = SettableFuture.create();",
                "     private volatile NamedAddressSpace _addressSpace;",
                "@@ -162,18 +159,5 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "         _transportClosedFuture.addListener(",
                "-                new Runnable()",
                "-                {",
                "-                    @Override",
                "-                    public void run()",
                "-                    {",
                "-                        try",
                "-                        {",
                "-                            deleted();",
                "-                            setState(State.DELETED);",
                "-                            logConnectionClose();",
                "-                        }",
                "-                        finally",
                "-                        {",
                "-                            _modelClosedFuture.set(null);",
                "-                        }",
                "-                    }",
                "+                () -> {",
                "+                    _modelTransportRendezvousFuture.set(null);",
                "+                    doAfter(closeAsync(), this::logConnectionClose);",
                "                 }, getTaskExecutor());",
                "@@ -603,5 +587,4 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "-    @SuppressWarnings(\"unused\")",
                "-    @StateTransition( currentState = State.ACTIVE, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "@@ -629,3 +612,3 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "     {",
                "-        if (_modelClosing.compareAndSet(false, true))",
                "+        if (!_modelTransportRendezvousFuture.isDone())",
                "         {",
                "@@ -633,3 +616,3 @@ public abstract class AbstractAMQPConnection<C extends AbstractAMQPConnection<C,",
                "         }",
                "-        return _modelClosedFuture;",
                "+        return _modelTransportRendezvousFuture;",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "index e4ca989381..44ebe3f418 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "@@ -1549,2 +1549,26 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "     protected ListenableFuture<Void> beforeClose()",
                "+    {",
                "+        return beforeDeleteOrClose();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> onClose()",
                "+    {",
                "+        return onCloseOrDelete();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> beforeDelete()",
                "+    {",
                "+        return beforeDeleteOrClose();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "+        _deleteRequested  = true;",
                "+        return onCloseOrDelete();",
                "+    }",
                "+",
                "+    private ListenableFuture<Void> beforeDeleteOrClose()",
                "     {",
                "@@ -1556,4 +1580,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "-    @Override",
                "-    protected ListenableFuture<Void> onClose()",
                "+    private ListenableFuture<Void> onCloseOrDelete()",
                "     {",
                "@@ -2327,16 +2350,2 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "-    @SuppressWarnings(\"ignore\")",
                "-    @StateTransition( currentState = { State.ACTIVE, State.ERRORED }, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        _deleteRequested = true;",
                "-",
                "-        return doAfterAlways(closeAsync(),",
                "-                             () ->",
                "-                             {",
                "-                                 setState(State.DELETED);",
                "-                                 deleted();",
                "-                             });",
                "-    }",
                "-",
                "     private void deleteLinkRegistry()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/AbstractVirtualHostAlias.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/AbstractVirtualHostAlias.java",
                "index c032781967..bea4573dab 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/AbstractVirtualHostAlias.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/AbstractVirtualHostAlias.java",
                "@@ -25,4 +25,2 @@ import java.util.Map;",
                "-import com.google.common.util.concurrent.ListenableFuture;",
                "-",
                " import org.apache.qpid.server.model.AbstractConfiguredObject;",
                "@@ -32,3 +30,2 @@ import org.apache.qpid.server.model.Port;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.StateTransition;",
                " import org.apache.qpid.server.model.VirtualHostAlias;",
                "@@ -59,17 +56,2 @@ abstract class AbstractVirtualHostAlias<X extends AbstractVirtualHostAlias<X>>",
                "     }",
                "-",
                "-    @StateTransition(currentState = {State.ACTIVE, State.ERRORED}, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                deleted();",
                "-                setState(State.DELETED);",
                "-            }",
                "-        });",
                "-    }",
                "-",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "index aa9ee9c3e2..d7de6fddeb 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "@@ -46,2 +46,3 @@ import org.apache.qpid.server.store.ConfiguredObjectRecordImpl;",
                " import org.apache.qpid.server.store.DurableConfigurationStore;",
                "+import org.apache.qpid.server.store.MessageStore;",
                " import org.apache.qpid.server.store.VirtualHostStoreUpgraderAndRecoverer;",
                "@@ -123,2 +124,25 @@ public abstract class AbstractStandardVirtualHostNode<X extends AbstractStandard",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "+    {",
                "+        final VirtualHost<?> virtualHost = getVirtualHost();",
                "+        final MessageStore messageStore = virtualHost == null ? null : virtualHost.getMessageStore();",
                "+",
                "+        return doAfterAlways(closeVirtualHostIfExists(),",
                "+                             () -> {",
                "+                                 if (messageStore != null)",
                "+                                 {",
                "+                                     messageStore.closeMessageStore();",
                "+                                     messageStore.onDelete(virtualHost);",
                "+                                 }",
                "+",
                "+                                 DurableConfigurationStore configurationStore = getConfigurationStore();",
                "+                                 if (configurationStore != null)",
                "+                                 {",
                "+                                     configurationStore.closeConfigurationStore();",
                "+                                     configurationStore.onDelete(AbstractStandardVirtualHostNode.this);",
                "+                                 }",
                "+                             });",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "index 0ba7df0266..fb58433dd0 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "@@ -286,71 +286,14 @@ public abstract class AbstractVirtualHostNode<X extends AbstractVirtualHostNode<",
                "-    @StateTransition( currentState = { State.ACTIVE, State.STOPPED, State.ERRORED}, desiredState = State.DELETED )",
                "-    protected ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        final SettableFuture<Void> futureResult = SettableFuture.create();",
                "-",
                "-        // Delete the node only if deletion of the virtualhost succeeds.",
                "-        addFutureCallback(deleteVirtualHostIfExists(), new FutureCallback<Void>()",
                "-        {",
                "-            @Override",
                "-            public void onSuccess(final Void result)",
                "-            {",
                "-                addFutureCallback(closeAsync(), new FutureCallback<Void>()",
                "-                {",
                "-                    @Override",
                "-                    public void onSuccess(final Void result)",
                "-                    {",
                "-                        try",
                "-                        {",
                "-                            delete();",
                "-                            futureResult.set(null);",
                "-                        }",
                "-                        catch (Throwable t)",
                "-                        {",
                "-                            futureResult.setException(t);",
                "-                        }",
                "-                    }",
                "-",
                "-                    @Override",
                "-                    public void onFailure(final Throwable t)",
                "-                    {",
                "-                        try",
                "-                        {",
                "-                            delete();",
                "-                        }",
                "-                        finally",
                "-                        {",
                "-                            futureResult.setException(t);",
                "-                        }",
                "-                    }",
                "-",
                "-                    private void delete()",
                "-                    {",
                "-                        deleted();",
                "-                        setState(State.DELETED);",
                "-                        DurableConfigurationStore configurationStore = getConfigurationStore();",
                "-                        if (configurationStore != null)",
                "-                        {",
                "-                            configurationStore.onDelete(AbstractVirtualHostNode.this);",
                "-                        }",
                "-                    }",
                "-                }, getTaskExecutor());",
                "-            }",
                "-",
                "-            @Override",
                "-            public void onFailure(final Throwable t)",
                "-            {",
                "-                futureResult.setException(t);",
                "-            }",
                "-        }, getTaskExecutor());",
                "-",
                "-        return futureResult;",
                "+        throw new UnsupportedOperationException(\"Sub-classes must override\");",
                "     }",
                "-    protected ListenableFuture<Void> deleteVirtualHostIfExists()",
                "+    protected ListenableFuture<Void> closeVirtualHostIfExists()",
                "     {",
                "-        VirtualHost<?> virtualHost = getVirtualHost();",
                "+        final VirtualHost<?> virtualHost = getVirtualHost();",
                "         if (virtualHost != null)",
                "         {",
                "-            return virtualHost.deleteAsync();",
                "+            return virtualHost.closeAsync();",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/RedirectingVirtualHostNodeImpl.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/RedirectingVirtualHostNodeImpl.java",
                "index 84217b40ea..bc08e7913b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/RedirectingVirtualHostNodeImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/RedirectingVirtualHostNodeImpl.java",
                "@@ -121,29 +121,2 @@ public class RedirectingVirtualHostNodeImpl",
                "-    @StateTransition( currentState = { State.ACTIVE, State.STOPPED, State.ERRORED}, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "-    {",
                "-        final ListenableFuture<Void> future = Futures.immediateFuture(null);",
                "-        final RedirectingVirtualHostImpl virtualHost = _virtualHost;",
                "-        if (virtualHost != null)",
                "-        {",
                "-            return doAfter(virtualHost.closeAsync(), new Callable<ListenableFuture<Void>>()",
                "-            {",
                "-                @Override",
                "-                public ListenableFuture<Void> call() throws Exception",
                "-                {",
                "-                    _virtualHost = null;",
                "-                    deleted();",
                "-                    setState(State.DELETED);",
                "-                    return future;",
                "-                }",
                "-            });",
                "-        }",
                "-        else",
                "-        {",
                "-            setState(State.DELETED);",
                "-            deleted();",
                "-            return future;",
                "-        }",
                "-    }",
                "-",
                "     @StateTransition( currentState = { State.ACTIVE, State.ERRORED, State.UNINITIALIZED }, desiredState = State.STOPPED )",
                "@@ -177,2 +150,14 @@ public class RedirectingVirtualHostNodeImpl",
                "         final ListenableFuture<Void> superFuture = super.beforeClose();",
                "+        return closeVirtualHost(superFuture);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ListenableFuture<Void> beforeDelete()",
                "+    {",
                "+        final ListenableFuture<Void> superFuture = super.beforeDelete();",
                "+        return closeVirtualHost(superFuture);",
                "+    }",
                "+",
                "+    private ListenableFuture<Void> closeVirtualHost(final ListenableFuture<Void> superFuture)",
                "+    {",
                "         final RedirectingVirtualHostImpl virtualHost = _virtualHost;",
                "@@ -180,10 +165,5 @@ public class RedirectingVirtualHostNodeImpl",
                "         {",
                "-            return doAfter(virtualHost.closeAsync(), new Callable<ListenableFuture<Void>>()",
                "-            {",
                "-                @Override",
                "-                public ListenableFuture<Void> call() throws Exception",
                "-                {",
                "-                    _virtualHost = null;",
                "-                    return superFuture;",
                "-                }",
                "+            return doAfter(virtualHost.closeAsync(), () -> {",
                "+                _virtualHost = null;",
                "+                return superFuture;",
                "             });",
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "index 2bed26df98..90296da10f 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "@@ -110,15 +110,7 @@ public abstract class AbstractLogger<X extends AbstractLogger<X>> extends Abstra",
                "-    @StateTransition(currentState = {State.ACTIVE, State.UNINITIALIZED, State.ERRORED, State.STOPPED}, desiredState = State.DELETED)",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                deleted();",
                "-                setState(State.DELETED);",
                "-                stopLogging();",
                "-            }",
                "-        });",
                "+        stopLogging();",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractNameAndLevelLogInclusionRule.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractNameAndLevelLogInclusionRule.java",
                "index b27bf94aa3..f10cea794b 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractNameAndLevelLogInclusionRule.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractNameAndLevelLogInclusionRule.java",
                "@@ -70,2 +70,3 @@ public abstract class AbstractNameAndLevelLogInclusionRule<X extends AbstractNam",
                "+    @SuppressWarnings(\"unused\")",
                "     private void logLevelAfterSet()",
                "@@ -84,16 +85,7 @@ public abstract class AbstractNameAndLevelLogInclusionRule<X extends AbstractNam",
                "-    @StateTransition( currentState = { State.ACTIVE, State.ERRORED, State.UNINITIALIZED }, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                deleted();",
                "-                QpidLoggerTurboFilter.filterRemovedFromRootContext(_filter);",
                "-                setState(State.DELETED);",
                "-",
                "-            }",
                "-        });",
                "+        QpidLoggerTurboFilter.filterRemovedFromRootContext(_filter);",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractPredicateLogInclusionRule.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractPredicateLogInclusionRule.java",
                "index 3430f87d1d..da02286136 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractPredicateLogInclusionRule.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractPredicateLogInclusionRule.java",
                "@@ -88,17 +88,7 @@ public abstract class AbstractPredicateLogInclusionRule<X extends AbstractPredic",
                "-    @SuppressWarnings(\"unused\")",
                "-    @StateTransition( currentState = { State.ACTIVE, State.ERRORED, State.UNINITIALIZED }, desiredState = State.DELETED )",
                "-    private ListenableFuture<Void> doDelete()",
                "+    @Override",
                "+    protected ListenableFuture<Void> onDelete()",
                "     {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "-        {",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                deleted();",
                "-                QpidLoggerTurboFilter.filterRemovedFromRootContext(_filter);",
                "-                setState(State.DELETED);",
                "-",
                "-            }",
                "-        });",
                "+        QpidLoggerTurboFilter.filterRemovedFromRootContext(_filter);",
                "+        return super.onDelete();",
                "     }",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index d053dc8e02..e565ae98a4 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -33,2 +33,3 @@ org.apache.qpid.systest.rest.VirtualHostRestTest#testMutateStateOfVirtualHostWit",
                " org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualHostNode",
                "+org.apache.qpid.systest.rest.VirtualHostLoggerRestTest#testDeleteVirtualHostLoggerAndRule_QPID_8066"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/QueueConsumerImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AllowAllAccessControlProviderImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/NonJavaTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/access/AbstractAccessControlProvider.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ManagedUser.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/group/GroupImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/group/GroupMemberImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/group/GroupProviderImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/group/cloudfoundry/CloudFoundryDashboardManagementGroupProviderImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java",
                "broker-core/src/main/java/org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/AbstractVirtualHostAlias.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/RedirectingVirtualHostNodeImpl.java",
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractNameAndLevelLogInclusionRule.java",
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractPredicateLogInclusionRule.java",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8066": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/transport/AbstractAMQPConnection.java, broker-core/src/main/java/org/apache/qpid/server/session/AbstractAMQPSession.java, broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: allow, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8066",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e65b7367306eab3c76dc4cd4e3b7f9fb3cd69736",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515604224,
            "hunks": 8,
            "message": "QPID-6933: [System Tests] Remove JMS AMQP 0-x client specific tests moved into client system test module",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f89b2425ea..6f037e82a6 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -19,12 +19,2 @@",
                "-// QPID-3391: the C++ broker does not currently validate the exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithNonsenseArgs",
                "-",
                "-// QPID-3576: JMS client issue. MessageConsumer#close() time-out.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testDeleteOptions",
                "-",
                "-// Those tests are testing 0.8 specific semantics",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                "-",
                " // the 0-10 c++ broker does not implement the extended LVQ semantics which the Qpid Broker-J does",
                "@@ -46,5 +36,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                " org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-",
                "-// c++ broker doesn't support message bouncing",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index e95fbee7d8..555c25b328 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -20,9 +20,4 @@",
                " // Those tests are testing 0.8..-0-9-1 specific semantics",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-",
                "-// 0-10 protocol doesn't support message bouncing",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "@@ -36,6 +31,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// QPID-3392: the Qpid Broker-J does not yet implement exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithArgs",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testSessionCreateTopicWithExchangeArgs",
                "-",
                " // QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 40670d2e77..d9c92f902e 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -24,8 +24,4 @@ org.apache.qpid.jndi.PropertiesFileInitialContextFactoryTest#*",
                " org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#*",
                " // Exclude tests of AMQP 0-x features",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.server.queue.ModelTest#*",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 1b423a4e51..26548162c6 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -26,15 +26,2 @@ org.apache.qpid.test.client.message.JMSDestinationTest#testReceiveResend",
                "-//QPID-3422: test fails because ring queue is not implemented on Apache Qpid Broker-J",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testBrowseMode",
                "-//QPID-3392: the Apache Qpid Broker-J does not yet implement exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithArgs",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testSessionCreateTopicWithExchangeArgs",
                "-//QPID-3678: zero capacity not supported in 0-9-1",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testZeroCapacityForSynchronousReceive",
                "-//QPID-6037: the 0-9-1 client takes the view that if you don't specify the node type but you ask for a JMS Topic",
                "-//           you want a topic behaviour.  The 0-10 client thinks you must want a queue.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSTopicIsTreatedAsQueueIn0_10",
                "-// QPID-7692: Receiving a message sent using a destination which has no subject fails when client is in BURL dest syntax mode.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSDestination_DestinationWithoutSubject",
                "-",
                " // The new addressing based syntax is not supported for AMQP 0-8/0-9 versions"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fa471435e76f21d3687ee964ba144f4e5dffb506",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522452613,
            "hunks": 12,
            "message": "QPID-8150 : Prevent test failures due to slow initialisation of hostname resolution in HostnameAliasImpl",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "index a3b100d1a5..16a904b469 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.virtualhostalias;",
                "+import java.net.Inet4Address;",
                " import java.net.InetAddress;",
                "@@ -29,2 +30,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.Comparator;",
                " import java.util.HashSet;",
                "@@ -32,2 +34,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.TreeSet;",
                " import java.util.concurrent.CopyOnWriteArraySet;",
                "@@ -81,2 +84,6 @@ public class HostNameAliasImpl",
                "     {",
                "+        if(_localAddressNames.contains(host))",
                "+        {",
                "+            return true;",
                "+        }",
                "         while(!_addressesComputed.get())",
                "@@ -168,3 +175,3 @@ public class HostNameAliasImpl",
                "         {",
                "-            Set<InetAddress> addresses = new HashSet<>();",
                "+            Set<InetAddress> addresses = new TreeSet<>(HostNameAliasImpl::compareAddresses);",
                "             for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces()))",
                "@@ -184,2 +191,48 @@ public class HostNameAliasImpl",
                "     }",
                "+",
                "+    private static int compareAddresses(final InetAddress left, final InetAddress right)",
                "+    {",
                "+        byte[] leftBytes;",
                "+        byte[] rightBytes;",
                "+        if(left.isLoopbackAddress() != right.isLoopbackAddress())",
                "+        {",
                "+            return left.isLoopbackAddress() ? -1 : 1;",
                "+        }",
                "+        else if(left.isSiteLocalAddress() != right.isSiteLocalAddress())",
                "+        {",
                "+            return left.isSiteLocalAddress() ? -1 : 1;",
                "+        }",
                "+        else if(left.isLinkLocalAddress() != right.isLinkLocalAddress())",
                "+        {",
                "+            return left.isLinkLocalAddress() ? 1 : -1;",
                "+        }",
                "+        else if(left.isMulticastAddress() != right.isMulticastAddress())",
                "+        {",
                "+            return left.isMulticastAddress() ? 1 : -1;",
                "+        }",
                "+        else if(left instanceof Inet4Address && !(right instanceof Inet4Address))",
                "+        {",
                "+            return -1;",
                "+        }",
                "+        else if(right instanceof Inet4Address && !(left instanceof Inet4Address))",
                "+        {",
                "+            return 1;",
                "+        }",
                "+        else if((leftBytes = left.getAddress()).length == (rightBytes = right.getAddress()).length)",
                "+        {",
                "+            for(int i = 0; i < left.getAddress().length; i++)",
                "+            {",
                "+                int compare = Byte.compare(leftBytes[i], rightBytes[i]);",
                "+                if(compare != 0)",
                "+                {",
                "+                    return compare;",
                "+                }",
                "+            }",
                "+            return 0;",
                "+        }",
                "+        else",
                "+        {",
                "+            return Integer.compare(left.getAddress().length, right.getAddress().length);",
                "+        }",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json b/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "index d3738c98b0..791d9ef324 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "@@ -45,2 +45,3 @@",
                "     \"port\" : \"0\",",
                "+    \"bindingAddresss\" : \"127.0.0.1\",",
                "     \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\" ],",
                "@@ -49,5 +50,2 @@",
                "       \"type\" : \"defaultAlias\"",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\"",
                "     }, {",
                "@@ -66,6 +64,2 @@",
                "       \"durable\" : true",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\",",
                "-      \"durable\" : true",
                "     }, {",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json b/systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json",
                "index 764ff891a4..ca54cc45ef 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json",
                "@@ -49,5 +49,2 @@",
                "       \"type\" : \"defaultAlias\"",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\"",
                "     }, {",
                "@@ -66,6 +63,2 @@",
                "       \"durable\" : true",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\",",
                "-      \"durable\" : true",
                "     }, {",
                "@@ -86,6 +79,2 @@",
                "       \"durable\" : true",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\",",
                "-      \"durable\" : true",
                "     }, {"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8150": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json, systests/protocol-tests-amqp-1-0/src/main/resources/config-protocol-tests.json",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8150",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e26dd33212dc34aad22aa66b97d7e8b388c857c8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517225887,
            "hunks": 19,
            "message": "QPID-8088: [Broker-J] Pull-up bindingAddress to port",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/Port.java b/broker-core/src/main/java/org/apache/qpid/server/model/Port.java",
                "index 003caf7a26..3850afd6f1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/Port.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/Port.java",
                "@@ -55,2 +55,3 @@ public interface Port<X extends Port<X>> extends ConfiguredObject<X>",
                "+    String DEFAULT_BINDING_ADDRESS = \"*\";",
                "@@ -101,2 +102,7 @@ public interface Port<X extends Port<X>> extends ConfiguredObject<X>",
                "+    @ManagedAttribute(defaultValue = \"*\",",
                "+                      description = \"The network interface this port binds to expressed as an IP address or a\"",
                "+                                    + \"hostname.  If null or * then bind to all interfaces.\")",
                "+    String getBindingAddress();",
                "+",
                "     @ManagedAttribute",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "index 8349092d7d..c77611eec2 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "@@ -43,2 +43,3 @@ import org.apache.qpid.server.security.SubjectCreator;",
                " import org.apache.qpid.server.util.ParameterizedTypes;",
                "+import org.apache.qpid.server.util.PortUtil;",
                "@@ -81,2 +82,5 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "+    @ManagedAttributeField",
                "+    private String _bindingAddress;",
                "+",
                "     private List<String> _tlsProtocolBlackList;",
                "@@ -97,2 +101,8 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "+    @Override",
                "+    public String getBindingAddress()",
                "+    {",
                "+        return _bindingAddress;",
                "+    }",
                "+",
                "     @Override",
                "@@ -107,2 +117,14 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "+    @Override",
                "+    public void validateOnCreate()",
                "+    {",
                "+        super.validateOnCreate();",
                "+        String bindingAddress = getBindingAddress();",
                "+        if (!PortUtil.isPortAvailable(bindingAddress, getPort()))",
                "+        {",
                "+            throw new IllegalConfigurationException(String.format(\"Cannot bind to port %d and binding address '%s'. Port is already is use.\",",
                "+                    getPort(), bindingAddress == null || \"\".equals(bindingAddress) ? \"*\" : bindingAddress));",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "index 295367df8d..6474622e3d 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "@@ -136,5 +136,2 @@ public interface AmqpPort<X extends AmqpPort<X>> extends Port<X>",
                "-    @ManagedAttribute(defaultValue = \"*\")",
                "-    String getBindingAddress();",
                "-",
                "     @ManagedAttribute( defaultValue = AmqpPort.DEFAULT_AMQP_TCP_NO_DELAY )",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "index dc66d6e145..4a9eb02e5a 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "@@ -80,4 +80,2 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "-    public static final String DEFAULT_BINDING_ADDRESS = \"*\";",
                "-",
                "@@ -86,5 +84,2 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "-    @ManagedAttributeField",
                "-    private String _bindingAddress;",
                "-",
                "     @ManagedAttributeField",
                "@@ -142,8 +137,2 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "-    @Override",
                "-    public String getBindingAddress()",
                "-    {",
                "-        return _bindingAddress;",
                "-    }",
                "-",
                "     @Override",
                "@@ -326,14 +315,2 @@ public class AmqpPortImpl extends AbstractPort<AmqpPortImpl> implements AmqpPort",
                "-    @Override",
                "-    public void validateOnCreate()",
                "-    {",
                "-        super.validateOnCreate();",
                "-        String bindingAddress = getBindingAddress();",
                "-        if (!PortUtil.isPortAvailable(bindingAddress, getPort()))",
                "-        {",
                "-            throw new IllegalConfigurationException(String.format(\"Cannot bind to port %d and binding address '%s'. Port is already is use.\",",
                "-                    getPort(), bindingAddress == null || \"\".equals(bindingAddress) ? \"*\" : bindingAddress));",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPort.java",
                "index 131afa3ea4..e491be37a8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPort.java",
                "@@ -74,5 +74,2 @@ public interface HttpPort<X extends HttpPort<X>> extends Port<X>",
                "-    @ManagedAttribute(defaultValue = \"*\")",
                "-    String getBindingAddress();",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "index 8a655ad4fd..eb9f6d2e03 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "@@ -31,3 +31,2 @@ import org.apache.qpid.server.model.ManagedObjectFactoryConstructor;",
                " import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.util.PortUtil;",
                "@@ -37,5 +36,2 @@ public class HttpPortImpl extends AbstractPort<HttpPortImpl> implements HttpPort",
                "-    @ManagedAttributeField",
                "-    private String _bindingAddress;",
                "-",
                "     @ManagedAttributeField",
                "@@ -75,8 +71,2 @@ public class HttpPortImpl extends AbstractPort<HttpPortImpl> implements HttpPort",
                "-    @Override",
                "-    public String getBindingAddress()",
                "-    {",
                "-        return _bindingAddress;",
                "-    }",
                "-",
                "     @Override",
                "@@ -182,14 +172,2 @@ public class HttpPortImpl extends AbstractPort<HttpPortImpl> implements HttpPort",
                "-    @Override",
                "-    public void validateOnCreate()",
                "-    {",
                "-        super.validateOnCreate();",
                "-        String bindingAddress = getBindingAddress();",
                "-        if (!PortUtil.isPortAvailable(bindingAddress, getPort()))",
                "-        {",
                "-            throw new IllegalConfigurationException(String.format(\"Cannot bind to port %d and binding address '%s'. Port is already is use.\",",
                "-                    getPort(), bindingAddress == null || \"\".equals(bindingAddress) ? \"*\" : bindingAddress));",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "index ab6b930bf9..a3b100d1a5 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java",
                "@@ -43,3 +43,2 @@ import org.apache.qpid.server.model.ManagedObjectFactoryConstructor;",
                " import org.apache.qpid.server.model.Port;",
                "-import org.apache.qpid.server.model.port.AmqpPort;",
                "@@ -68,3 +67,3 @@ public class HostNameAliasImpl",
                "         super.onOpen();",
                "-        String bindingAddress = ((AmqpPort) getPort()).getBindingAddress();",
                "+        String bindingAddress = getPort().getBindingAddress();",
                "         Thread thread = new Thread(new NetworkAddressResolver(),",
                "@@ -123,3 +122,3 @@ public class HostNameAliasImpl",
                "             lock.lock();",
                "-            String bindingAddress = ((AmqpPort<?>)getPort()).getBindingAddress();",
                "+            String bindingAddress = getPort().getBindingAddress();",
                "             try"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/Port.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostalias/HostNameAliasImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8088": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPort.java, broker-core/src/main/java/org/apache/qpid/server/model/port/AmqpPortImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8088",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "667609be6186841d43af43fd88eb6172299667f8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516986003,
            "hunks": 4,
            "message": "QPID-8085: [Broker-J] Send flow in response to drain request even when credit is 0",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index 0872eae10b..3b922e4a75 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -288,2 +288,7 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "         setDeliveryCount(new SequenceNumber(flow.getDeliveryCount().intValue()));",
                "+",
                "+        if (Boolean.TRUE.equals(flow.getEcho()))",
                "+        {",
                "+            sendFlow();",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index b3131344b5..ab95a3275d 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -496,4 +496,13 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "         }",
                "+",
                "+        // send flow when echo=true or drain=true but link credit is zero",
                "+        boolean sendFlow = Boolean.TRUE.equals(flow.getEcho()) ||",
                "+                ( Boolean.TRUE.equals(flow.getDrain()) && getLinkCredit().equals(UnsignedInteger.ZERO));",
                "+",
                "         flowStateChanged();",
                "+        if (sendFlow)",
                "+        {",
                "+            sendFlow();",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index 62045a6f56..9f4f0648ca 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -448,7 +448,2 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "                     endpoint.receiveFlow(flow);",
                "-",
                "-                    if (Boolean.TRUE.equals(flow.getEcho()))",
                "-                    {",
                "-                        endpoint.sendFlow();",
                "-                    }",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8085": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8085",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c24f1b737d5735c9caeddcb114f6eda999afc28c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516745834,
            "hunks": 9,
            "message": "QPID-8032 : [Broker-J][AMQP 1.0] Add protocol tests for receiving of multiple messages (cherry picked from commit a627b2742a893c9873483dee7c4ad1cb7d8428cd)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 5898cf6782..0a9f882ba8 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -30,3 +30,5 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collections;",
                "+import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "@@ -874,2 +876,9 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+",
                "+    public Interaction dispositionLast(final UnsignedInteger last)",
                "+    {",
                "+        _disposition.setLast(last);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction dispositionFirstFromLatestDelivery()",
                "@@ -1042,6 +1051,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "-    public Interaction receiveDelivery() throws Exception",
                "+    public Interaction receiveDelivery(Class<?>... ignore) throws Exception",
                "     {",
                "         sync();",
                "-        _latestDelivery = receiveAllTransfers();",
                "+        _latestDelivery = receiveAllTransfers(ignore);",
                "         _latestDeliveryId = _latestDelivery.size() > 0 ? _latestDelivery.get(0).getDeliveryId() : null;",
                "@@ -1050,2 +1059,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public UnsignedInteger getLatestDeliveryId()",
                "+    {",
                "+        return _latestDeliveryId;",
                "+    }",
                "+",
                "     public Interaction decodeLatestDelivery() throws AmqpErrorException",
                "@@ -1073,11 +1087,18 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "-    private List<Transfer> receiveAllTransfers() throws Exception",
                "+    private List<Transfer> receiveAllTransfers(final Class<?>... ignore) throws Exception",
                "     {",
                "         List<Transfer> transfers = new ArrayList<>();",
                "-        boolean hasMore;",
                "+        boolean hasMore = true;",
                "         do",
                "         {",
                "-            Transfer responseTransfer = consumeResponse().getLatestResponse(Transfer.class);",
                "-            hasMore = Boolean.TRUE.equals(responseTransfer.getMore());",
                "-            transfers.add(responseTransfer);",
                "+            Set<Class<?>> responseTypesSet = new HashSet<>(Arrays.asList(ignore));",
                "+            responseTypesSet.add(Transfer.class);",
                "+            Class<?>[] responseTypes = responseTypesSet.toArray(new Class<?>[responseTypesSet.size()]);",
                "+            Response<?> latestResponse = consumeResponse(responseTypes).getLatestResponse();",
                "+            if (latestResponse.getBody() instanceof Transfer)",
                "+            {",
                "+                Transfer responseTransfer = (Transfer) latestResponse.getBody();",
                "+                hasMore = Boolean.TRUE.equals(responseTransfer.getMore());",
                "+                transfers.add(responseTransfer);",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a627b2742a893c9873483dee7c4ad1cb7d8428cd"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63c315f07553dcdf32e2de1888f1cb9749e15d5c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518184597,
            "hunks": 5,
            "message": "QPID-8091: [Broker-J] Update transaction timeout chapter in docbook * Remove note regarding AMQP 1.0 * Generalise from 'producer transaction timeout' to 'transaction timeout'.  The former was only true when using the Qpid JMS AMQP 0-x client   (which delayed acking the messages until the application called commit). * Update the operational log messages",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "index bf4460b0d7..5cb314b8b5 100644",
                "--- a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "+++ b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "@@ -822,2 +822,25 @@",
                "         </row>",
                "+        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CHN-1010\">",
                "+          <entry morerows=\"1\">CON-1010</entry>",
                "+          <entry>Open Transaction : <replaceable>time</replaceable> ms</entry>",
                "+        </row>",
                "+        <row>",
                "+          <entry>",
                "+            <para>Indicates that a messaging transaction has been open for longer than that",
                "+              permitted. See <xref linkend=\"Java-Broker-Runtime-Transaction-Timeout\"/> for",
                "+              more details.</para>",
                "+          </entry>",
                "+        </row>",
                "+        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CON-1011\">",
                "+          <entry morerows=\"1\">CON-1011</entry>",
                "+          <entry>Idle Transaction : <replaceable>time</replaceable> ms</entry>",
                "+        </row>",
                "+        <row>",
                "+          <entry>",
                "+            <para>Indicates that a messaging transaction has been idle for longer than that",
                "+              permitted. See <xref linkend=\"Java-Broker-Runtime-Transaction-Timeout\"/> for",
                "+              more details.</para>",
                "+          </entry>",
                "+        </row>",
                "+",
                "@@ -898,24 +921,2 @@",
                "         </row>",
                "-        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CHN-1007\">",
                "-          <entry morerows=\"1\">CHN-1007</entry>",
                "-          <entry>Open Transaction : <replaceable>time</replaceable> ms</entry>",
                "-        </row>",
                "-        <row>",
                "-          <entry>",
                "-            <para>Indicates that a producer transaction has been open for longer than that",
                "-              permitted. See <xref linkend=\"Java-Broker-Runtime-Producer-Transaction-Timeout\"/> for",
                "-              more details.</para>",
                "-          </entry>",
                "-        </row>",
                "-        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CHN-1008\">",
                "-          <entry morerows=\"1\">CHN-1008</entry>",
                "-          <entry>Idle Transaction : <replaceable>time</replaceable> ms</entry>",
                "-        </row>",
                "-        <row>",
                "-          <entry>",
                "-            <para>Indicates that a producer transaction has been idle for longer than that",
                "-              permitted. See <xref linkend=\"Java-Broker-Runtime-Producer-Transaction-Timeout\"/> for",
                "-              more details.</para>",
                "-          </entry>",
                "-        </row>",
                "         <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CHN-1009\">",
                "diff --git a/doc/java-broker/src/docbkx/Java-Broker-Runtime.xml b/doc/java-broker/src/docbkx/Java-Broker-Runtime.xml",
                "index 08e4250cc3..1f56d61c17 100644",
                "--- a/doc/java-broker/src/docbkx/Java-Broker-Runtime.xml",
                "+++ b/doc/java-broker/src/docbkx/Java-Broker-Runtime.xml",
                "@@ -26,3 +26,3 @@",
                "   <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"runtime/Java-Broker-Runtime-Disk-Space-Management.xml\"/>",
                "-  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"runtime/Java-Broker-Runtime-Producer-Transaction-Timeout.xml\"/>",
                "+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"runtime/Java-Broker-Runtime-Transaction-Timeout.xml\"/>",
                "   <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"runtime/Java-Broker-Runtime-Handling-Undeliverable-Messages.xml\"/>",
                "diff --git a/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Virtualhosts.xml b/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Virtualhosts.xml",
                "index 7b25425f7f..ba8178ca59 100644",
                "--- a/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Virtualhosts.xml",
                "+++ b/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Virtualhosts.xml",
                "@@ -97,3 +97,3 @@",
                "           <para><emphasis>Store transaction timeouts</emphasis>. Warns of long running producer",
                "-            transactions. See <xref linkend=\"Java-Broker-Runtime-Producer-Transaction-Timeout\"/></para>",
                "+            transactions. See <xref linkend=\"Java-Broker-Runtime-Transaction-Timeout\"/></para>",
                "         </listitem>",
                "diff --git a/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml b/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml",
                "new file mode 100644",
                "index 0000000000..f250364146",
                "--- /dev/null",
                "+++ b/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml",
                "@@ -0,0 +1,111 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+",
                "+ Licensed to the Apache Software Foundation (ASF) under one",
                "+ or more contributor license agreements.  See the NOTICE file",
                "+ distributed with this work for additional information",
                "+ regarding copyright ownership.  The ASF licenses this file",
                "+ to you under the Apache License, Version 2.0 (the",
                "+ \"License\"); you may not use this file except in compliance",
                "+ with the License.  You may obtain a copy of the License at",
                "+",
                "+   http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+ Unless required by applicable law or agreed to in writing,",
                "+ software distributed under the License is distributed on an",
                "+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ KIND, either express or implied.  See the License for the",
                "+ specific language governing permissions and limitations",
                "+ under the License.",
                "+",
                "+-->",
                "+",
                "+<section xmlns=\"http://docbook.org/ns/docbook\" version=\"5.0\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout\">",
                "+ <title>Transaction Timeout</title>",
                "+ <section role=\"h2\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-GeneralInformation\">",
                "+  <title>General Information</title>",
                "+  <para> The transaction timeout mechanism is used to control broker resources when clients",
                "+   using transactions hang, become unresponsive, or simply (due to programming error)",
                "+   begin a transaction and keep using it without ever calling committing or rolling back.</para>",
                "+  <para>Users can choose to configure an idleWarn or openWarn threshold, after which the identified",
                "+   transaction should be logged as a WARN level alert as well as (more importantly) an idleClose or",
                "+   openClose threshold after which the transaction and the connection it applies to will be",
                "+   closed.</para>",
                "+  <para>This feature is particularly useful in environments where the owner of the broker does not",
                "+   have full control over the implementation of clients, such as in a shared services",
                "+   deployment.</para>",
                "+  <para>The following section provide more details on this feature and its use.</para>",
                "+ </section>",
                "+ <section role=\"h2\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Purpose\">",
                "+  <title>Purpose</title>",
                "+  <para> This feature has been introduced to address the scenario where an open transaction on the",
                "+   broker holds an open transaction on the persistent store. This can have undesirable consequences",
                "+   if the store does not time out or close long-running transactions, such as with BDB. This can can",
                "+   result in a rapid increase in disk usage size, bounded only by available space, due to growth of",
                "+   the transaction log. </para>",
                "+ </section>",
                "+ <section role=\"h2\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Effect\">",
                "+  <title>Effect</title>",
                "+  <para>Full details of configuration options are provided in the sections that follow. This section",
                "+   gives a brief overview of what the Transaction Timeout feature can do.</para>",
                "+  <section role=\"h3\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Effect-Broker-Side\">",
                "+   <title>Broker Logging and Connection Close</title>",
                "+   <para>When the openWarn or idleWarn specified threshold is exceeded, the broker will log a WARN",
                "+    level alert with details of the connection on which the threshold has been exceeded,",
                "+    along with the age of the transaction.</para>",
                "+   <para>When the openClose or idleClose specified threshold value is exceeded, the broker will",
                "+    throw an exception back to the client connection via the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"${oracleJeeDocUrl}javax/jms/ExceptionListener.html\">ExceptionListener</link>, log the",
                "+    action and then close the connection.</para>",
                "+   <para>The example broker log output shown below is where the idleWarn threshold specified is",
                "+    lower than the idleClose threshold and the broker therefore logs the idle transaction 3 times",
                "+    before the close threshold is triggered and the connection closed out.</para>",
                "+   <screen>",
                "+CON-1011 : Idle Transaction : 13,116 ms",
                "+CON-1011 : Idle Transaction : 14,116 ms",
                "+CON-1011 : Idle Transaction : 15,118 ms",
                "+CON-1002 : Close : Idle transaction timed out",
                "+   </screen>",
                "+   <para>The second example broker log output shown below illustrates the same mechanism operating",
                "+    on an open transaction.</para>",
                "+   <screen>",
                "+CON-1010 : Open Transaction : 12,406 ms",
                "+CON-1010 : Open Transaction : 13,406 ms",
                "+CON-1010 : Open Transaction : 14,406 ms",
                "+CON-1002 : Close : Open transaction timed out",
                "+   </screen>",
                "+  </section>",
                "+  <section role=\"h3\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Effect-Client-Side\">",
                "+   <title>Client Side Effect</title>",
                "+   <para>After a Close threshold has been exceeded, the Broker will close the client's connection.",
                "+    The application must reconnect itself in order to continue work.  If the",
                "+    client is a JMS client, the application will be notified by the",
                "+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"${oracleJeeDocUrl}javax/jms/ExceptionListener.html\">exception",
                "+     listener.</link></para>",
                "+  </section>",
                "+ </section>",
                "+ <section role=\"h2\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Configuration\">",
                "+  <title>Configuration</title>",
                "+  <section role=\"h3\" xml:id=\"Java-Broker-Runtime-Transaction-Timeout-Configuration-Overview\">",
                "+   <title>Configuration</title>",
                "+   <para>The transaction timeouts can be specified when a new virtualhost is created or an exiting",
                "+    virtualhost is edited.</para>",
                "+   <para>We would recommend that only warnings are configured at first, which should allow broker",
                "+    administrators to obtain an idea of the distribution of transaction lengths on their systems,",
                "+    and configure production settings appropriately for both warning and closure. Ideally",
                "+    establishing thresholds should be achieved in a representative UAT environment, with clients and",
                "+    broker running, prior to any production deployment.</para>",
                "+   <para>It is impossible to give suggested values, due to the large variation in usage depending on",
                "+    the applications using a broker. However, clearly transactions should not span the expected",
                "+    lifetime of any client application as this would indicate a hung client.</para>",
                "+   <para>When configuring warning and closure timeouts, it should be noted that these only apply to",
                "+    message producers that are connected to the broker, but that a timeout will cause the connection",
                "+    to be closed - this disconnecting all producers and consumers created on that connection.</para>",
                "+   <para>This should not be an issue for environments using Mule or Spring, where connection",
                "+    factories can be configured appropriately to manage a single MessageProducer object per JMS",
                "+    Session and Connection. Clients that use the JMS API directly should be aware that sessions",
                "+    managing both consumers and producers, or multiple producers, will be affected by a single",
                "+    producer hanging or leaving a transaction idle or open, and closed, and must take appropriate",
                "+    action to handle that scenario.</para>",
                "+  </section>",
                "+ </section>",
                "+</section>"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "doc/java-broker/src/docbkx/Java-Broker-Runtime.xml",
                "doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Virtualhosts.xml",
                "doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a5a15fc3bcb277cb94a8ccc4536cb2eef70d27a2"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1e4b502fb4589df92ae8abbe4fa5580fff474932",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523483157,
            "hunks": 1,
            "message": "QPID-8160: [Broker-J] Ensure that AccessControlException during sending link creation is reported with an amqp:unauthorized-access (cherry picked from commit 0ec8be159935b6f84675845965b184f1cfa3e8aa)",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index 4ab25a77eb..6f55ee1d16 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -254,2 +254,6 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "         }",
                "+        catch (AccessControlException e)",
                "+        {",
                "+            throw new AmqpErrorException(new Error(AmqpError.UNAUTHORIZED_ACCESS, e.getMessage()));",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8160": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0ec8be159935b6f84675845965b184f1cfa3e8aa"
                ]
            ],
            "tags": [
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8160",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8df4ff38b30e7277706976defdfefb6680d029df",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519850270,
            "hunks": 1,
            "message": "QPID-8115: [Broker-J][AMQP 1.0] Fix symbolic descriptor for 'no local filter'",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java",
                "index 86052c5d5b..2774cde770 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java",
                "@@ -35,3 +35,6 @@ public class NoLocalFilterConstructor extends AbstractDescribedTypeConstructor<N",
                "     {",
                "-            Symbol.valueOf(\"apache.org:jms-no-local-filter:list\"), UnsignedLong.valueOf(0x0000468C00000003L)",
                "+            Symbol.valueOf(\"apache.org:no-local-filter:list\"),",
                "+            UnsignedLong.valueOf(0x0000468C00000003L),",
                "+            // This incorrect value was originally specified here - retaining solely for backwards compatibility",
                "+            Symbol.valueOf(\"apache.org:jms-no-local-filter:list\")",
                "     };"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8115": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ce05c23a52ccfe539d75d05ab45f1bff0f668ef8"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8115",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "46c49cf206d776af883610352381219a8431ffb4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518047237,
            "hunks": 3,
            "message": "QPID-8091: [Broker-J] [AMQP 0-10] Invoke 0-10 session on close operations only once",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index 1ef431c7fc..4e6e97f839 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -32,2 +32,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -93,2 +94,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(ServerSessionDelegate.class);",
                "+    private final AtomicBoolean _closed = new AtomicBoolean();",
                "@@ -1805,6 +1807,8 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "     {",
                "-",
                "-        session.stopSubscriptions();",
                "-        session.onClose();",
                "-        session.unregisterSubscriptions();",
                "+        if (_closed.compareAndSet(false, true))",
                "+        {",
                "+            session.stopSubscriptions();",
                "+            session.onClose();",
                "+            session.unregisterSubscriptions();",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5b8587a021c58c233b631d161a80e291dff441bf"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "041674ddbf2b1ae693f51d7e2cd9f9025a268632",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515585351,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J] [AMQP 1.0]  Add SASL protocol test ensuring that empty SASL frames are rejected (cherry picked from commit 7d5a86962837103a7a75f92dca5e35220cb89668)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 832ad4d139..fc84389d43 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -88,2 +88,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    private static final SaslFrameBody SASL_EMPTY_FRAME = (channel, conn) -> {",
                "+        throw new UnsupportedOperationException();",
                "+    };",
                "+",
                "     private static final Set<String> CONTAINER_IDS = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "@@ -206,2 +210,8 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public Interaction saslEmptyFrame() throws Exception",
                "+    {",
                "+        sendPerformative(SASL_EMPTY_FRAME);",
                "+        return this;",
                "+    }",
                "+",
                "     private SaslInit copySaslInit(final SaslInit saslInit)",
                "@@ -1091,3 +1101,2 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d5a86962837103a7a75f92dca5e35220cb89668"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "562714536e68e06c01827a3e9217eb31ce0964ae",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516273588,
            "hunks": 2,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Fix defect in coalescing loop",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index d6518b6535..a36a2764e4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -574,8 +574,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-                    if (current.isSettled() == disposition.isSettled() &&",
                "-                        Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "-                    {",
                "-                        deliveryTags.add(disposition.getDeliveryTag());",
                "-                    }",
                "-                    else",
                "+                    if (current.isSettled() != disposition.isSettled() ||",
                "+                        !Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "                     {",
                "@@ -585,2 +581,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     }",
                "+                    deliveryTags.add(disposition.getDeliveryTag());",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae36d9018e5062e351a1fa5fe47b8d7436d8641c"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: defect, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6408e156a717e8e91aa95e3220ed300c71c52bd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518623442,
            "hunks": 13,
            "message": "QPID-8098: [Broker-J] [AMQP 0-10] No longer unconditionally increment deliveryCount when MessageAcquireMode.NOT_ACQUIRED",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java",
                "index 21156de0be..8d42d2b1a4 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java",
                "@@ -307,2 +307,9 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "         _postIdSettingAction.setXfr(xfr);",
                "+        _postIdSettingAction.setAction(null);",
                "+",
                "+        if (_acquireMode == MessageAcquireMode.PRE_ACQUIRED)",
                "+        {",
                "+            entry.incrementDeliveryCount();",
                "+        }",
                "+",
                "         if(_acceptMode == MessageAcceptMode.EXPLICIT)",
                "@@ -315,7 +322,2 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "         }",
                "-        else",
                "-        {",
                "-            _postIdSettingAction.setAction(null);",
                "-        }",
                "-",
                "@@ -330,3 +332,2 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "-        entry.incrementDeliveryCount();",
                "         if(_acceptMode == MessageAcceptMode.NONE && _acquireMode == MessageAcquireMode.PRE_ACQUIRED)",
                "@@ -405,3 +406,2 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "     {",
                "-        entry.setRedelivered();",
                "         if (entry.makeAcquisitionUnstealable(consumer))",
                "@@ -412,16 +412,4 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "-    void release(final MessageInstanceConsumer consumer,",
                "-                 final MessageInstance entry,",
                "-                 final boolean setRedelivered)",
                "+    void release(final MessageInstanceConsumer consumer, final MessageInstance entry)",
                "     {",
                "-        if (setRedelivered)",
                "-        {",
                "-            entry.setRedelivered();",
                "-        }",
                "-",
                "-        if (getSession().isClosing() || !setRedelivered)",
                "-        {",
                "-            entry.decrementDeliveryCount();",
                "-        }",
                "-",
                "         if (isMaxDeliveryLimitReached(entry))",
                "@@ -436,3 +424,3 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "-    protected void sendToDLQOrDiscard(final MessageInstanceConsumer consumer, MessageInstance entry)",
                "+    private void sendToDLQOrDiscard(final MessageInstanceConsumer consumer, MessageInstance entry)",
                "     {",
                "@@ -627,2 +615,100 @@ public class ConsumerTarget_0_10 extends AbstractConsumerTarget<ConsumerTarget_0",
                "+    static abstract class AbstractDispositionChangeListener implements ServerSession.MessageDispositionChangeListener",
                "+    {",
                "+        final MessageInstance _entry;",
                "+        final ConsumerTarget_0_10 _target;",
                "+        final MessageInstanceConsumer _consumer;",
                "+",
                "+        AbstractDispositionChangeListener(final MessageInstance entry,",
                "+                                          final ConsumerTarget_0_10 target,",
                "+                                          final MessageInstanceConsumer consumer)",
                "+        {",
                "+            _entry = entry;",
                "+            _target = target;",
                "+            _consumer = consumer;",
                "+        }",
                "+",
                "+        @Override",
                "+        public final void onRelease(boolean setRedelivered, final boolean closing)",
                "+        {",
                "+            _target.release(_consumer, _entry);",
                "+",
                "+            if (setRedelivered)",
                "+            {",
                "+                _entry.setRedelivered();",
                "+            }",
                "+",
                "+            if (closing || !setRedelivered)",
                "+            {",
                "+                _entry.decrementDeliveryCount();",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public final void onReject()",
                "+        {",
                "+            _entry.setRedelivered();",
                "+            _target.reject(_consumer, _entry);",
                "+        }",
                "+    }",
                "+",
                "+    static class ImplicitAcceptDispositionChangeListener extends AbstractDispositionChangeListener",
                "+    {",
                "+",
                "+        private static final Logger LOGGER = LoggerFactory.getLogger(ImplicitAcceptDispositionChangeListener.class);",
                "+",
                "+",
                "+        ImplicitAcceptDispositionChangeListener(final MessageInstance entry,",
                "+                                                final ConsumerTarget_0_10 target,",
                "+                                                final MessageInstanceConsumer consumer)",
                "+        {",
                "+            super(entry, target, consumer);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void onAccept()",
                "+        {",
                "+            LOGGER.warn(\"MessageAccept received for message which is using NONE as the accept mode (likely client error)\");",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean acquire()",
                "+        {",
                "+            boolean acquired = _entry.acquire(_consumer);",
                "+            if(acquired)",
                "+            {",
                "+                _entry.incrementDeliveryCount();",
                "+                _target.addUnacknowledgedMessage(_entry);",
                "+            }",
                "+            return acquired;",
                "+        }",
                "+    }",
                "+",
                "+    static class ExplicitAcceptDispositionChangeListener extends AbstractDispositionChangeListener",
                "+    {",
                "+",
                "+        ExplicitAcceptDispositionChangeListener(MessageInstance entry,",
                "+                                                ConsumerTarget_0_10 target,",
                "+                                                final MessageInstanceConsumer consumer)",
                "+        {",
                "+            super(entry, target, consumer);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void onAccept()",
                "+        {",
                "+            _target.acknowledge(_consumer, _entry);",
                "+        }",
                "+        @Override",
                "+        public boolean acquire()",
                "+        {",
                "+            final boolean acquired = _entry.acquire(_consumer);",
                "+            if (acquired)",
                "+            {",
                "+                _entry.incrementDeliveryCount();",
                "+            }",
                "+            return acquired;",
                "+        }",
                "+",
                "+    }",
                " }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ExplicitAcceptDispositionChangeListener.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ExplicitAcceptDispositionChangeListener.java",
                "deleted file mode 100755",
                "index 427355b135..0000000000",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ExplicitAcceptDispositionChangeListener.java",
                "+++ /dev/null",
                "@@ -1,73 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-package org.apache.qpid.server.protocol.v0_10;",
                "-",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import org.apache.qpid.server.message.MessageInstance;",
                "-import org.apache.qpid.server.message.MessageInstanceConsumer;",
                "-",
                "-",
                "-class ExplicitAcceptDispositionChangeListener implements ServerSession.MessageDispositionChangeListener",
                "-{",
                "-    private static final Logger LOGGER = LoggerFactory.getLogger(ExplicitAcceptDispositionChangeListener.class);",
                "-",
                "-",
                "-    private final MessageInstance _entry;",
                "-    private final ConsumerTarget_0_10 _target;",
                "-    private final MessageInstanceConsumer _consumer;",
                "-",
                "-    public ExplicitAcceptDispositionChangeListener(MessageInstance entry,",
                "-                                                   ConsumerTarget_0_10 target,",
                "-                                                   final MessageInstanceConsumer consumer)",
                "-    {",
                "-        _entry = entry;",
                "-        _target = target;",
                "-        _consumer = consumer;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onAccept()",
                "-    {",
                "-        _target.acknowledge(_consumer, _entry);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onRelease(boolean setRedelivered)",
                "-    {",
                "-        _target.release(_consumer, _entry, setRedelivered);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onReject()",
                "-    {",
                "-        _target.reject(_consumer, _entry);",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean acquire()",
                "-    {",
                "-        return _entry.acquire(_consumer);",
                "-    }",
                "-",
                "-",
                "-}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ImplicitAcceptDispositionChangeListener.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ImplicitAcceptDispositionChangeListener.java",
                "deleted file mode 100755",
                "index bcfa205588..0000000000",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ImplicitAcceptDispositionChangeListener.java",
                "+++ /dev/null",
                "@@ -1,80 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-package org.apache.qpid.server.protocol.v0_10;",
                "-",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import org.apache.qpid.server.message.MessageInstance;",
                "-import org.apache.qpid.server.message.MessageInstanceConsumer;",
                "-",
                "-class ImplicitAcceptDispositionChangeListener implements ServerSession.MessageDispositionChangeListener",
                "-{",
                "-    private static final Logger LOGGER = LoggerFactory.getLogger(ImplicitAcceptDispositionChangeListener.class);",
                "-",
                "-",
                "-    private final MessageInstance _entry;",
                "-    private final ConsumerTarget_0_10 _target;",
                "-    private final MessageInstanceConsumer _consumer;",
                "-",
                "-    public ImplicitAcceptDispositionChangeListener(MessageInstance entry,",
                "-                                                   ConsumerTarget_0_10 target,",
                "-                                                   final MessageInstanceConsumer consumer)",
                "-    {",
                "-        _entry = entry;",
                "-        _target = target;",
                "-        _consumer = consumer;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onAccept()",
                "-    {",
                "-        LOGGER.warn(\"MessageAccept received for message which is using NONE as the accept mode (likely client error)\");",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onRelease(boolean setRedelivered)",
                "-    {",
                "-        _target.release(_consumer, _entry, setRedelivered);",
                "-",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onReject()",
                "-    {",
                "-        _target.reject(_consumer, _entry);",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean acquire()",
                "-    {",
                "-        boolean acquired = _entry.acquire(_consumer);",
                "-        if(acquired)",
                "-        {",
                "-            _target.addUnacknowledgedMessage(_entry);",
                "-        }",
                "-        return acquired;",
                "-",
                "-    }",
                "-",
                "-",
                "-",
                "-}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index 32a2474a7d..22d539b389 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -862,3 +862,3 @@ public class ServerSession extends SessionInvoker",
                "-        void onRelease(boolean setRedelivered);",
                "+        void onRelease(boolean setRedelivered, final boolean closing);",
                "@@ -1014,3 +1014,3 @@ public class ServerSession extends SessionInvoker",
                "                                           {",
                "-                                              listener.onRelease(setRedelivered);",
                "+                                              listener.onRelease(setRedelivered, false);",
                "                                           }",
                "@@ -1160,3 +1160,3 @@ public class ServerSession extends SessionInvoker",
                "         {",
                "-            listener.onRelease(true);",
                "+            listener.onRelease(true, true);",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ExplicitAcceptDispositionChangeListener.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ImplicitAcceptDispositionChangeListener.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8098": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eff7b5dd1a70b653103329c7c2de8422435525b0"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ImplicitAcceptDispositionChangeListener.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ExplicitAcceptDispositionChangeListener.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8098",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d57815f89427781bb3cf3d5f6c70b3b13a8604ff",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518192267,
            "hunks": 13,
            "message": "QPID-8091: [Broker-J] Move transaction timeout protocol test to separate packages - this features is Broker-J specific. Also refactored the new test broker configuration mechanism so that the configuration of the whole broker can be adjusted, rather than just the virtualhost.",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "index d7b661ffe2..bc3bc243ff 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "@@ -27,2 +27,3 @@ import java.util.Map;",
                " import org.apache.qpid.server.protocol.ErrorCodes;",
                "+import org.apache.qpid.server.protocol.ProtocolVersion;",
                " import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "@@ -30,2 +31,3 @@ import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseOkBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ConnectionOpenBody;",
                "@@ -38,2 +40,3 @@ public class ConnectionInteraction",
                "     private final Interaction _interaction;",
                "+    private final ConnectionCloseOkBody _closeOkBody;",
                "@@ -57,2 +60,5 @@ public class ConnectionInteraction",
                "         _interaction = interaction;",
                "+        _closeOkBody = interaction.getProtocolVersion() == ProtocolVersion.v0_8",
                "+                ? ConnectionCloseOkBody.CONNECTION_CLOSE_OK_0_8",
                "+                : ConnectionCloseOkBody.CONNECTION_CLOSE_OK_0_9;",
                "     }",
                "@@ -131,2 +137,7 @@ public class ConnectionInteraction",
                "     }",
                "+",
                "+    public Interaction closeOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_closeOkBody);",
                "+    }",
                " }",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "index da6790bf0b..5c4f974654 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "@@ -61,5 +61,2 @@ public interface BrokerAdmin extends Pluggable",
                "-    void configure(String settingName, Object settingValue);",
                "-",
                "-",
                "     enum PortType",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItem.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItem.java",
                "new file mode 100644",
                "index 0000000000..493f865276",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItem.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.utils;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Repeatable;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Repeatable(ConfigItems.class)",
                "+@Target({ElementType.TYPE})",
                "+public @interface ConfigItem",
                "+{",
                "+    String name();",
                "+    String value();",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItems.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItems.java",
                "new file mode 100644",
                "index 0000000000..9f761805e6",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItems.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.utils;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target({ElementType.TYPE})",
                "+public @interface ConfigItems",
                "+{",
                "+    ConfigItem[] value();",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 9fab318e6e..5333c7a2a5 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -38,2 +38,3 @@ import java.util.Map;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "+import java.util.stream.Collectors;",
                "@@ -90,3 +91,7 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "-            Map<String,String> context = new HashMap<>();",
                "+            Map<String, String> context = new HashMap<>();",
                "+            context.putAll(Arrays.stream((ConfigItem[]) testClass.getAnnotationsByType(ConfigItem.class))",
                "+                                 .collect(Collectors.toMap(ConfigItem::name,",
                "+                                                           ConfigItem::value,",
                "+                                                           (name, value) -> value)));",
                "             context.put(\"qpid.work_dir\", _currentWorkDirectory);",
                "@@ -405,8 +410,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "-    @Override",
                "-    public void configure(final String settingName, final Object settingValue)",
                "-    {",
                "-        _currentVirtualHostNode.getVirtualHost().setAttributes(Collections.singletonMap(settingName, settingValue));",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "index 5f245460c8..5c3e1cca43 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "@@ -163,8 +163,2 @@ public class ExternalQpidBrokerAdminImpl implements BrokerAdmin",
                "-    @Override",
                "-    public void configure(final String settingName, final Object settingValue)",
                "-    {",
                "-        throw new UnsupportedOperationException(\"External Qpid Broker does not support configuring\");",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "index d3c9be6726..a03c129e96 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "@@ -66,2 +66,6 @@ public class QpidTestRunner extends BlockJUnit4ClassRunner",
                "         BrokerSpecific brokerSpecific = method.getAnnotation(BrokerSpecific.class);",
                "+        if (brokerSpecific == null)",
                "+        {",
                "+            brokerSpecific = method.getClass().getAnnotation(BrokerSpecific.class);",
                "+        }",
                "         if (brokerSpecific != null && !brokerSpecific.kind().equalsIgnoreCase(_brokerAdmin.getKind()))"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItem.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ConfigItems.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ba4344f67ea06e6f87367e00ce42cac56a70860e"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "229b7e5491083a8c55ed55d66521117be975e260",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518716378,
            "hunks": 4,
            "message": "QPID-8100: [Broker-J] [AMQP 0-10] Ensure that in error cases, session.detach is sent on the same channel as arrived the incoming frame. (cherry picked from commit 1911d163b2fe21e6630ccf16730d30917ca888c9)",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "index 1166058268..6cc8fe863a 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "@@ -138,3 +138,6 @@ public class ServerConnection extends ConnectionInvoker",
                "     {",
                "-        method.setChannel(0);",
                "+        if (method.isConnectionControl())",
                "+        {",
                "+            method.setChannel(0);",
                "+        }",
                "         send(method);",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "index 43c3bf1c34..227c48da5a 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "@@ -403,10 +403,3 @@ public class ServerConnectionDelegate extends MethodDelegate<ServerConnection> i",
                "-        ServerSessionDelegate serverSessionDelegate = new ServerSessionDelegate();",
                "-",
                "-        final ServerSession serverSession =",
                "-                new ServerSession(serverConnection, serverSessionDelegate, new Binary(atc.getName()), 0);",
                "-        final Session_0_10 session = new Session_0_10(serverConnection.getAmqpConnection(), atc.getChannel(),",
                "-                                                      serverSession);",
                "-        session.create();",
                "-        serverSession.setModelObject(session);",
                "+        // We ignore the force flag",
                "@@ -414,2 +407,11 @@ public class ServerConnectionDelegate extends MethodDelegate<ServerConnection> i",
                "         {",
                "+            ServerSessionDelegate serverSessionDelegate = new ServerSessionDelegate();",
                "+",
                "+            final ServerSession serverSession =",
                "+                    new ServerSession(serverConnection, serverSessionDelegate, new Binary(atc.getName()), 0);",
                "+            final Session_0_10 session = new Session_0_10(serverConnection.getAmqpConnection(), atc.getChannel(),",
                "+                                                          serverSession);",
                "+            session.create();",
                "+            serverSession.setModelObject(session);",
                "+",
                "             serverConnection.map(serverSession, atc.getChannel());",
                "@@ -421,4 +423,5 @@ public class ServerConnectionDelegate extends MethodDelegate<ServerConnection> i",
                "         {",
                "-            serverSession.invoke(new SessionDetached(atc.getName(), SessionDetachCode.SESSION_BUSY));",
                "-            serverSession.closed();",
                "+            final SessionDetached detached = new SessionDetached(atc.getName(), SessionDetachCode.SESSION_BUSY);",
                "+            detached.setChannel(atc.getChannel());",
                "+            serverConnection.invoke(detached);",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8100": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1911d163b2fe21e6630ccf16730d30917ca888c9"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8100",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7d7b50824ad9f2a99b7de034ef36a529129b00ac",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524744705,
            "hunks": 31,
            "message": "QPID-7830: [Broker-J] [AMQP 0-8..0-91] Cache AMQPShortStrings that relate to exchanges/routing keys and header values (that are usually drawn from a small domain) in a time/size bound cache. Intent is to reduce the amount of tenured garbage produced when messages are repeatedly sent to same destination. This should reduce frequency and length of GC pauses.",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "index 41a43227a2..0ee98c382f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "@@ -26,3 +26,6 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.Arrays;",
                "+import java.util.concurrent.TimeUnit;",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheBuilder;",
                " import org.slf4j.Logger;",
                "@@ -47,4 +50,11 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "+    // Unfortunately CacheBuilder does not yet support keyEquivalence, so we have to wrap the keys in ByteBuffers",
                "+    // rather than using the byte arrays as keys.",
                "+    private static ThreadLocal<Cache<ByteBuffer, AMQShortString>> CACHE =",
                "+            ThreadLocal.withInitial(() -> CacheBuilder.newBuilder()",
                "+                                                      .maximumSize(100)",
                "+                                                      .expireAfterAccess(300, TimeUnit.SECONDS)",
                "+                                                      .build());",
                "+",
                "     private final byte[] _data;",
                "-    private final int _offset;",
                "     private int _hashCode;",
                "@@ -52,6 +62,5 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-    private final int _length;",
                "-",
                "     public static final AMQShortString EMPTY_STRING = createAMQShortString((String)null);",
                "+",
                "     private AMQShortString(byte[] data)",
                "@@ -66,44 +75,2 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "         }",
                "-        _data = data.clone();",
                "-        _length = data.length;",
                "-        _offset = 0;",
                "-    }",
                "-",
                "-    private AMQShortString(String string)",
                "-    {",
                "-        final byte[] data = EncodingUtils.asUTF8Bytes(string);",
                "-        final int length = data.length;",
                "-        if (data.length> MAX_LENGTH)",
                "-        {",
                "-            throw new IllegalArgumentException(\"Cannot create AMQShortString with number of octets over 255!\");",
                "-        }",
                "-",
                "-        int hash = 0;",
                "-        for (int i = 0; i < length; i++)",
                "-        {",
                "-            data[i] = (byte) (0xFF & data[i]);",
                "-            hash = (31 * hash) + data[i];",
                "-        }",
                "-        _hashCode = hash;",
                "-        _data = data;",
                "-",
                "-        _length = length;",
                "-        _offset = 0;",
                "-",
                "-        _asString = string == null ? \"\" : string;",
                "-    }",
                "-",
                "-    private AMQShortString(byte[] data, final int offset, final int length)",
                "-    {",
                "-        if (length > MAX_LENGTH)",
                "-        {",
                "-            throw new IllegalArgumentException(\"Cannot create AMQShortString with number of octets over 255!\");",
                "-        }",
                "-        if (data == null)",
                "-        {",
                "-            throw new NullPointerException(\"Cannot create AMQShortString with null data[]\");",
                "-        }",
                "-",
                "-        _offset = offset;",
                "-        _length = length;",
                "         _data = data;",
                "@@ -134,3 +101,5 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "             buffer.get(data);",
                "-            return new AMQShortString(data, 0, length);",
                "+",
                "+            final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+            return cached != null ? cached : new AMQShortString(data);",
                "         }",
                "@@ -140,3 +109,9 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        return new AMQShortString(data);",
                "+        if (data == null)",
                "+        {",
                "+            throw new NullPointerException(\"Cannot create AMQShortString with null data[]\");",
                "+        }",
                "+",
                "+        final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+        return cached != null ? cached : new AMQShortString(data);",
                "     }",
                "@@ -145,3 +120,23 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        return new AMQShortString(string);",
                "+        final byte[] data = EncodingUtils.asUTF8Bytes(string);",
                "+",
                "+        final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+        if (cached != null)",
                "+        {",
                "+            return cached;",
                "+        }",
                "+        else",
                "+        {",
                "+            final AMQShortString shortString = new AMQShortString(data);",
                "+",
                "+            int hash = 0;",
                "+            for (int i = 0; i < data.length; i++)",
                "+            {",
                "+                data[i] = (byte) (0xFF & data[i]);",
                "+                hash = (31 * hash) + data[i];",
                "+            }",
                "+            shortString._hashCode = hash;",
                "+            shortString._asString = string;",
                "+            return  shortString;",
                "+        }",
                "     }",
                "@@ -154,3 +149,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        return _length;",
                "+        return _data.length;",
                "     }",
                "@@ -159,4 +154,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-",
                "-        return (char) _data[_offset + index];",
                "+        return (char) _data[index];",
                "@@ -166,12 +160,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        if(_offset == 0 && _length == _data.length)",
                "-        {",
                "-            return _data.clone();",
                "-        }",
                "-        else",
                "-        {",
                "-            byte[] data = new byte[_length];",
                "-            System.arraycopy(_data,_offset,data,0,_length);",
                "-            return data;",
                "-        }",
                "+        return _data.clone();",
                "     }",
                "@@ -180,5 +165,5 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        final int size = length();",
                "-        buffer.put((byte)size);",
                "-        buffer.put(_data, _offset, size);",
                "+        final short size = (short) length();",
                "+        buffer.putUnsignedByte(size);",
                "+        buffer.put(_data, 0, size);",
                "     }",
                "@@ -225,5 +210,5 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-        final int length = _length;",
                "+        final int length = _data.length;",
                "-        if(length != otherString._length)",
                "+        if(length != otherString._data.length)",
                "         {",
                "@@ -232,29 +217,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-",
                "-        final byte[] data = _data;",
                "-",
                "-        final byte[] otherData = otherString._data;",
                "-",
                "-        final int offset = _offset;",
                "-",
                "-        final int otherOffset = otherString._offset;",
                "-",
                "-        if(offset == 0 && otherOffset == 0 && length == data.length && length == otherData.length)",
                "-        {",
                "-            return Arrays.equals(data, otherData);",
                "-        }",
                "-        else",
                "-        {",
                "-            int thisIdx = offset;",
                "-            int otherIdx = otherOffset;",
                "-            for(int i = length;  i-- != 0; )",
                "-            {",
                "-                if(!(data[thisIdx++] == otherData[otherIdx++]))",
                "-                {",
                "-                    return false;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return true;",
                "+        return Arrays.equals(_data, otherString._data);",
                "@@ -272,3 +231,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "             {",
                "-                hash = (31 * hash) + _data[i+_offset];",
                "+                hash = (31 * hash) + _data[i];",
                "             }",
                "@@ -286,3 +245,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "         {",
                "-            _asString = new String(_data, _offset, _length, StandardCharsets.UTF_8);",
                "+            _asString = new String(_data, StandardCharsets.UTF_8);",
                "         }",
                "@@ -312,4 +271,4 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "             {",
                "-                final byte d = _data[i+_offset];",
                "-                final byte n = name._data[i+name._offset];",
                "+                final byte d = _data[i];",
                "+                final byte n = name._data[i];",
                "                 if (d < n)",
                "@@ -331,4 +290,4 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        final int end = _length + _offset;",
                "-        for(int i = _offset; i < end; i++)",
                "+        final int end = _data.length;",
                "+        for(int i = 0; i < end; i++)",
                "         {",
                "@@ -342,2 +301,7 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "+    public void intern()",
                "+    {",
                "+        CACHE.get().put(ByteBuffer.wrap(_data), this);",
                "+    }",
                "+",
                "     public static AMQShortString validValueOf(Object obj)",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java",
                "index b182c8d77a..2ad8511ec9 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java",
                "@@ -166,3 +166,11 @@ public class MessageMetaData implements StorableMessageMetaData",
                "                 final AMQShortString exchange = AMQShortString.readAMQShortString(buf);",
                "+                if (exchange != null)",
                "+                {",
                "+                    exchange.intern();",
                "+                }",
                "                 final AMQShortString routingKey = AMQShortString.readAMQShortString(buf);",
                "+                if (routingKey != null)",
                "+                {",
                "+                    routingKey.intern();",
                "+                }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "index 6d3a55e306..52183fcea9 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "@@ -324,140 +324,2 @@ public class BasicContentHeaderProperties",
                "-    public int read(QpidByteBuffer input)",
                "-    {",
                "-",
                "-        _propertyFlags = input.getUnsignedShort();",
                "-        int length = 2;",
                "-        if ((_propertyFlags & (CONTENT_TYPE_MASK)) != 0)",
                "-        {",
                "-            length++;",
                "-            _contentType = AMQShortString.readAMQShortString(input);",
                "-            if(_contentType != null)",
                "-            {",
                "-                length += _contentType.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & ENCODING_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _encoding = AMQShortString.readAMQShortString(input);",
                "-            if(_encoding != null)",
                "-            {",
                "-                length += _encoding.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & HEADERS_MASK) != 0)",
                "-        {",
                "-            int fieldTableLength = input.getInt();",
                "-",
                "-            _headers = new FieldTable(input, fieldTableLength);",
                "-",
                "-            length += 4;",
                "-            length += fieldTableLength;",
                "-        }",
                "-",
                "-        if ((_propertyFlags & DELIVERY_MODE_MASK) != 0)",
                "-        {",
                "-            _deliveryMode = input.get();",
                "-            length++;",
                "-        }",
                "-",
                "-        if ((_propertyFlags & PRIORITY_MASK) != 0)",
                "-        {",
                "-            _priority = input.get();",
                "-            length++;",
                "-        }",
                "-",
                "-        if ((_propertyFlags & CORRELATION_ID_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _correlationId = AMQShortString.readAMQShortString(input);",
                "-            if(_correlationId != null)",
                "-            {",
                "-                length += _correlationId.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & REPLY_TO_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _replyTo = AMQShortString.readAMQShortString(input);",
                "-            if(_replyTo != null)",
                "-            {",
                "-                length += _replyTo.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & EXPIRATION_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            AMQShortString expiration = AMQShortString.readAMQShortString(input);",
                "-            if(expiration != null)",
                "-            {",
                "-                length += expiration.length();",
                "-                _expiration = Long.parseLong(expiration.toString());",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & MESSAGE_ID_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _messageId = AMQShortString.readAMQShortString(input);",
                "-            if(_messageId != null)",
                "-            {",
                "-                length += _messageId.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & TIMESTAMP_MASK) != 0)",
                "-        {",
                "-            _timestamp = input.getLong();",
                "-            length += 8;",
                "-        }",
                "-",
                "-        if ((_propertyFlags & TYPE_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _type = AMQShortString.readAMQShortString(input);",
                "-            if(_type != null)",
                "-            {",
                "-                length += _type.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & USER_ID_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _userId = AMQShortString.readAMQShortString(input);",
                "-            if(_userId != null)",
                "-            {",
                "-                length += _userId.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & APPLICATION_ID_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _appId = AMQShortString.readAMQShortString(input);",
                "-            if(_appId != null)",
                "-            {",
                "-                length += _appId.length();",
                "-            }",
                "-        }",
                "-",
                "-        if ((_propertyFlags & CLUSTER_ID_MASK) != 0)",
                "-        {",
                "-            length++;",
                "-            _clusterId = AMQShortString.readAMQShortString(input);",
                "-            if(_clusterId != null)",
                "-            {",
                "-                length += _clusterId.length();",
                "-            }",
                "-        }",
                "-",
                "-        return length;",
                "-    }",
                "-",
                "-",
                "     public synchronized long writePropertyListPayload(final ByteBufferSender sender)",
                "@@ -514,2 +376,6 @@ public class BasicContentHeaderProperties",
                "             _contentType = AMQShortString.readAMQShortString(buffer);",
                "+            if (_contentType != null)",
                "+            {",
                "+                _contentType.intern();",
                "+            }",
                "         }",
                "@@ -519,2 +385,6 @@ public class BasicContentHeaderProperties",
                "             _encoding = AMQShortString.readAMQShortString(buffer);",
                "+            if (_encoding != null)",
                "+            {",
                "+                _encoding.intern();",
                "+            }",
                "         }",
                "@@ -550,2 +420,6 @@ public class BasicContentHeaderProperties",
                "             _replyTo = AMQShortString.readAMQShortString(buffer);",
                "+            if (_replyTo != null)",
                "+            {",
                "+                _replyTo.intern();",
                "+            }",
                "         }",
                "@@ -575,2 +449,6 @@ public class BasicContentHeaderProperties",
                "             _userId = AMQShortString.readAMQShortString(buffer);",
                "+            if (_userId != null)",
                "+            {",
                "+                _userId.intern();",
                "+            }",
                "         }",
                "@@ -580,2 +458,6 @@ public class BasicContentHeaderProperties",
                "             _appId = AMQShortString.readAMQShortString(buffer);",
                "+            if (_appId != null)",
                "+            {",
                "+                _appId.intern();",
                "+            }",
                "         }",
                "@@ -585,2 +467,6 @@ public class BasicContentHeaderProperties",
                "             _clusterId = AMQShortString.readAMQShortString(buffer);",
                "+            if (_clusterId != null)",
                "+            {",
                "+                _clusterId.intern();",
                "+            }",
                "         }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java",
                "index 9821383b5c..a8243ea57a 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java",
                "@@ -154,3 +154,11 @@ public class BasicPublishBody extends AMQMethodBodyImpl implements EncodableAMQD",
                "         AMQShortString exchange = AMQShortString.readAMQShortString(buffer);",
                "+        if (exchange != null)",
                "+        {",
                "+            exchange.intern();",
                "+        }",
                "         AMQShortString routingKey = AMQShortString.readAMQShortString(buffer);",
                "+        if (routingKey != null)",
                "+        {",
                "+            routingKey.intern();",
                "+        }",
                "         byte bitfield = buffer.get();"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7830": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicPublishBody.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/MessageMetaData.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/transport/BasicContentHeaderProperties.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: size, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, publish, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7830",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b91ddb20ecd3b3178072ef39c08f47cf5ceb7e29",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523572071,
            "hunks": 14,
            "message": "QPID-8158: [Broker-J] [System Tests] Run protocol tests as part of unit tests",
            "diff": [
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 6fb8b0d5b5..3045799b02 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -33,3 +33,3 @@",
                "   <properties>",
                "-    <skipITs>true</skipITs>",
                "+    <skipITs>${skipTests}</skipITs>",
                "   </properties>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index 3979fa49c2..76da773147 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -84,3 +84,2 @@",
                "                 <configuration>",
                "-                    <skipTests>${skipITs}</skipTests>",
                "                     <workingDirectory>${project.basedir}</workingDirectory>",
                "@@ -96,2 +95,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -111,2 +111,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -126,2 +127,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -141,2 +143,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -156,2 +159,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -171,2 +175,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "diff --git a/systests/protocol-tests-amqp-0-10/pom.xml b/systests/protocol-tests-amqp-0-10/pom.xml",
                "index 53b049e8bb..0d0cfe04c0 100644",
                "--- a/systests/protocol-tests-amqp-0-10/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-10/pom.xml",
                "@@ -103,2 +103,3 @@",
                "                     </systemPropertyVariables>",
                "+                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -112,3 +113,3 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipTests}</skipTests>",
                "+                            <skipTests>true</skipTests>",
                "                         </configuration>",
                "diff --git a/systests/protocol-tests-amqp-0-8/pom.xml b/systests/protocol-tests-amqp-0-8/pom.xml",
                "index 4a994493dc..afe51e5367 100644",
                "--- a/systests/protocol-tests-amqp-0-8/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-8/pom.xml",
                "@@ -103,2 +103,3 @@",
                "                     </systemPropertyVariables>",
                "+                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -112,3 +113,3 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipTests}</skipTests>",
                "+                            <skipTests>true</skipTests>",
                "                         </configuration>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 5cc7856b57..8cbaff9b73 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -123,2 +123,3 @@",
                "                     </systemPropertyVariables>",
                "+                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -132,3 +133,3 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipTests}</skipTests>",
                "+                            <skipTests>true</skipTests>",
                "                         </configuration>"
            ],
            "changed_files": [
                "qpid-systests-parent/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/protocol-tests-amqp-0-10/pom.xml",
                "systests/protocol-tests-amqp-0-8/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/pom.xml, systests/protocol-tests-amqp-0-8/pom.xml, systests/protocol-tests-amqp-0-10/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c49dc0f473c6e727caa1143cb155774607bc23a2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516985754,
            "hunks": 1,
            "message": "QPID-8085: [Broker-J][AMQP 1.0] Optimize the sending of flow performatives from broker sending link endpoint",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "index 4798815200..ebcaa60810 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "@@ -472,3 +472,2 @@ class ConsumerTarget_1_0 extends AbstractConsumerTarget<ConsumerTarget_1_0>",
                "                             }",
                "-                            _linkEndpoint.sendFlowConditional();",
                "                         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8085": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8085",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c89667b1d83a1cac022c86885cc6f806862afcc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523551147,
            "hunks": 13,
            "message": "QPID-8158: [Broker-J] [System Tests] Skip running non-protocol integration tests by default",
            "diff": [
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 4dade4ac17..6fb8b0d5b5 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -33,3 +33,3 @@",
                "   <properties>",
                "-    <skip.systests>${skipTests}</skip.systests>",
                "+    <skipITs>true</skipITs>",
                "   </properties>",
                "@@ -73,4 +73,3 @@",
                "                integration-test phase below instead -->",
                "-          <skip>true</skip>",
                "-          <skipTests>${skip.systests}</skipTests>",
                "+          <skipTests>true</skipTests>",
                "         </configuration>",
                "@@ -84,3 +83,3 @@",
                "             <configuration>",
                "-              <skip>false</skip>",
                "+              <skipTests>${skipITs}</skipTests>",
                "             </configuration>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index 2c44210961..3979fa49c2 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -84,3 +84,3 @@",
                "                 <configuration>",
                "-                    <skipTests>${skipTests}</skipTests>",
                "+                    <skipTests>${skipITs}</skipTests>",
                "                     <workingDirectory>${project.basedir}</workingDirectory>",
                "@@ -96,3 +96,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "@@ -112,3 +111,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "@@ -128,3 +126,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "@@ -144,3 +141,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "@@ -160,3 +156,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "@@ -176,3 +171,2 @@",
                "                         <configuration>",
                "-                            <skip>false</skip>",
                "                             <systemPropertyVariables>",
                "diff --git a/systests/protocol-tests-amqp-0-10/pom.xml b/systests/protocol-tests-amqp-0-10/pom.xml",
                "index 3acf129d4c..53b049e8bb 100644",
                "--- a/systests/protocol-tests-amqp-0-10/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-10/pom.xml",
                "@@ -104,2 +104,14 @@",
                "                 </configuration>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>integration-test</id>",
                "+                        <phase>integration-test</phase>",
                "+                        <goals>",
                "+                            <goal>test</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "             </plugin>",
                "diff --git a/systests/protocol-tests-amqp-0-8/pom.xml b/systests/protocol-tests-amqp-0-8/pom.xml",
                "index 3f788db17f..4a994493dc 100644",
                "--- a/systests/protocol-tests-amqp-0-8/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-8/pom.xml",
                "@@ -104,2 +104,14 @@",
                "                 </configuration>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>integration-test</id>",
                "+                        <phase>integration-test</phase>",
                "+                        <goals>",
                "+                            <goal>test</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "             </plugin>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index ee5bd9f367..5cc7856b57 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -124,2 +124,14 @@",
                "                 </configuration>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>integration-test</id>",
                "+                        <phase>integration-test</phase>",
                "+                        <goals>",
                "+                            <goal>test</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "             </plugin>"
            ],
            "changed_files": [
                "qpid-systests-parent/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/protocol-tests-amqp-0-10/pom.xml",
                "systests/protocol-tests-amqp-0-8/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/pom.xml, systests/protocol-tests-amqp-0-8/pom.xml, systests/protocol-tests-amqp-0-10/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "da92ba96d4fd0b048623ed3e1a28f67222bbad46",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514986310,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add tests related to protocol negotiation and oevrsized frames. (cherry picked from commit a9e61c16b742d266a9b75d54c18c76fcd9341c8a)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index fc84389d43..5898cf6782 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -176,2 +176,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    @Override",
                "     public Interaction protocolHeader(byte[] header)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "index cad8415d6b..91b0454b97 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "@@ -132,2 +132,7 @@ public abstract class AbstractFrameTransport<I extends AbstractInteraction<I>> i",
                "     ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        return sendBytes(bytes);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendBytes(final byte[] bytes)",
                "     {",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "index 4b41ca9221..2c977f3788 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "@@ -143,2 +143,4 @@ public abstract class AbstractInteraction<I extends AbstractInteraction<I>>",
                "+    public abstract I protocolHeader(final byte[] header);",
                "+",
                "     protected abstract byte[] getProtocolHeader();"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, size, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d1a6ca216637907315de91575058e7b6d56e1011",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511196939,
            "hunks": 22,
            "message": "QPID-8042: [System Tests] Improve pipe-lining of frames in protocol tests Cherry picked from 2cbb629",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 7d73ce8b20..4aad6ee838 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -155,3 +155,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "-        Response<?> response = getNextResponse();",
                "+        Response<?> response = consumeResponse().getLatestResponse();",
                "         if (!(response.getBody() instanceof Close))",
                "@@ -985,3 +985,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         SASLFrame transportFrame = new SASLFrame(frameBody);",
                "-        sendPerformativeAndChainFuture(transportFrame, true);",
                "+        sendPerformativeAndChainFuture(transportFrame);",
                "     }",
                "@@ -1003,3 +1003,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "             transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "-            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame, false);",
                "+            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame);",
                "             if (frameBody instanceof Transfer)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "index daf500db11..28dc02eba7 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "@@ -33,3 +33,2 @@ import java.util.concurrent.TimeUnit;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.JdkFutureAdapters;",
                "@@ -40,3 +39,2 @@ import io.netty.buffer.ByteBufAllocator;",
                " import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFuture;",
                " import io.netty.channel.ChannelInitializer;",
                "@@ -140,3 +138,2 @@ public abstract class FrameTransport implements AutoCloseable",
                "         _channel.write(buffer, promise);",
                "-        _channel.flush();",
                "         return JdkFutureAdapters.listenInPoolThread(promise);",
                "@@ -144,18 +141,8 @@ public abstract class FrameTransport implements AutoCloseable",
                "-    public ListenableFuture<Void> sendPerformative(final Object data, boolean sync) throws Exception",
                "+    public ListenableFuture<Void> sendPerformative(final Object data) throws Exception",
                "     {",
                "         Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        if (!sync)",
                "-        {",
                "-            ChannelPromise promise = _channel.newPromise();",
                "-            _channel.write(data, promise);",
                "-            _channel.flush();",
                "-            return JdkFutureAdapters.listenInPoolThread(promise);",
                "-        }",
                "-        else",
                "-        {",
                "-            ChannelFuture channelFuture = _channel.writeAndFlush(data);",
                "-            channelFuture.sync();",
                "-            return Futures.immediateFuture(null);",
                "-        }",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        _channel.write(data, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "     }",
                "@@ -179,2 +166,7 @@ public abstract class FrameTransport implements AutoCloseable",
                "+    public void flush()",
                "+    {",
                "+        _channel.flush();",
                "+    }",
                "+",
                "     private static class ChannelClosedResponse implements Response<Void>",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "index 2390227f75..b6e631d023 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -77,2 +77,3 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "+        _transport.flush();",
                "         if (_latestFuture != null)",
                "@@ -87,3 +88,2 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "-        sync();",
                "         return _latestResponse;",
                "@@ -93,4 +93,2 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "-        sync();",
                "-",
                "         if (_latestResponse.getBody() == null)",
                "@@ -112,5 +110,5 @@ public abstract class Interaction<I extends Interaction>",
                "-    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody, boolean sync) throws Exception",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody) throws Exception",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, sync);",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "         if (_latestFuture != null)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "index 40a2ca784f..5d40447085 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.tests.protocol;",
                " import java.nio.ByteBuffer;",
                "+import java.util.LinkedList;",
                "+import java.util.Queue;",
                "@@ -33,2 +35,4 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "     private final OutputEncoder _outputEncoder;",
                "+    private Queue<ByteBufferPromisePair> _cachedEncodedFramePromisePairs;",
                "+    private int _encodedSize;",
                "@@ -37,2 +41,4 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         _outputEncoder = outputEncoder;",
                "+        _cachedEncodedFramePromisePairs = new LinkedList<>();",
                "+        _encodedSize = 0;",
                "     }",
                "@@ -53,8 +59,40 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "-    private void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "+    private synchronized void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "     {",
                "-        byte[] data = new byte[dataByteBuffer.remaining()];",
                "-        dataByteBuffer.get(data);",
                "+        _cachedEncodedFramePromisePairs.add(new ByteBufferPromisePair(dataByteBuffer, promise));",
                "+        _encodedSize += dataByteBuffer.remaining();",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public synchronized void flush(final ChannelHandlerContext ctx) throws Exception",
                "+    {",
                "+        final ChannelPromise promise = ctx.channel().newPromise();",
                "+        byte[] data  = new byte[_encodedSize];",
                "+",
                "+        int offset = 0;",
                "+        while(offset < _encodedSize)",
                "+        {",
                "+            ByteBufferPromisePair currentPair = _cachedEncodedFramePromisePairs.poll();",
                "+            int remaining = currentPair.byteBuffer.remaining();",
                "+            currentPair.byteBuffer.get(data, offset, remaining) ;",
                "+            offset += remaining;",
                "+",
                "+            promise.addListener(future -> {",
                "+                if (future.isSuccess())",
                "+                {",
                "+                    currentPair.channelPromise.setSuccess();",
                "+                }",
                "+                else",
                "+                {",
                "+                    currentPair.channelPromise.setFailure(future.cause());",
                "+                }",
                "+            });",
                "+        }",
                "+",
                "+        _encodedSize = 0;",
                "+",
                "         ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "         buffer.writeBytes(data);",
                "+",
                "         try",
                "@@ -67,3 +105,18 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         }",
                "+",
                "+        super.flush(ctx);",
                "+    }",
                "+",
                "+    class ByteBufferPromisePair",
                "+    {",
                "+        private ByteBuffer byteBuffer;",
                "+        private ChannelPromise channelPromise;",
                "+",
                "+        ByteBufferPromisePair(final ByteBuffer byteBuffer, final ChannelPromise channelPromise)",
                "+        {",
                "+            this.byteBuffer = byteBuffer;",
                "+            this.channelPromise = channelPromise;",
                "+        }",
                "     }",
                "+",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66faf8edd1fa0bc4be657747e5e1bb07afa91aa7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510164929,
            "hunks": 1,
            "message": "QPID-8025 : [Java Broker] Improve detach error message on unsubscribing from JMS shared subs Cherry picked from master e3aa40d",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index c4b4dd6418..095062d469 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -844,3 +844,19 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "                 {",
                "-                    closingError = new Error(AmqpError.RESOURCE_LOCKED, e.getMessage());",
                "+                    String message;",
                "+                    if(sourceCapabilities.contains(Session_1_0.SHARED_CAPABILITY)",
                "+                       && sourceCapabilities.contains(ExchangeSendingDestination.TOPIC_CAPABILITY))",
                "+                    {",
                "+                        String subscriptionName = getLinkName();",
                "+                        int separator = subscriptionName.indexOf(\"|\");",
                "+                        if (separator > 0)",
                "+                        {",
                "+                            subscriptionName = subscriptionName.substring(0, separator);",
                "+                        }",
                "+                        message = \"There are active consumers on the shared subscription '\"+subscriptionName+\"'\";",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        message = e.getMessage();",
                "+                    }",
                "+                    closingError = new Error(AmqpError.RESOURCE_LOCKED, message);",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8025": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8025",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "33cb908e42bd09cbde3e663e686d95481fe6911e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512754380,
            "hunks": 8,
            "message": "QPID-8042: [Broker-J][AMQP 1.0] Process SASL frames first before parsing the remaining part of incoming byte buffer Cherry picked from 89e01ec",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "index f7e402999e..23d08c3dd9 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "@@ -204,2 +204,7 @@ public class FrameHandler implements ProtocolHandler",
                "                     });",
                "+",
                "+                    if (_isSasl)",
                "+                    {",
                "+                        break;",
                "+                    }",
                "                 }",
                "@@ -210,3 +215,2 @@ public class FrameHandler implements ProtocolHandler",
                "             }",
                "-            _connectionHandler.receive(channelFrameBodies);",
                "@@ -216,3 +220,6 @@ public class FrameHandler implements ProtocolHandler",
                "                 _errored = true;",
                "-",
                "+            }",
                "+            else",
                "+            {",
                "+                _connectionHandler.receive(channelFrameBodies);",
                "             }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "index 4dc06cbaa3..0c94ad73a7 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -92,23 +92,30 @@ public class FrameDecoder implements InputDecoder",
                "     {",
                "-        List<Response<?>> responses = new ArrayList<>();",
                "+",
                "         QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(inputBuffer);",
                "-        switch(_state)",
                "+        int remaining;",
                "+",
                "+        do",
                "         {",
                "-            case HEADER:",
                "-                if (inputBuffer.remaining() >= 8)",
                "-                {",
                "-                    byte[] header = new byte[8];",
                "-                    inputBuffer.get(header);",
                "-                    responses.add(new HeaderResponse(header));",
                "-                    _state = ParsingState.PERFORMATIVES;",
                "+            remaining = qpidByteBuffer.remaining();",
                "+            switch(_state)",
                "+            {",
                "+                case HEADER:",
                "+                    if (inputBuffer.remaining() >= 8)",
                "+                    {",
                "+                        byte[] header = new byte[8];",
                "+                        inputBuffer.get(header);",
                "+                        _connectionHandler._responseQueue.add(new HeaderResponse(header));",
                "+                        _state = ParsingState.PERFORMATIVES;",
                "+                    }",
                "+                    break;",
                "+                case PERFORMATIVES:",
                "                     _frameHandler.parse(qpidByteBuffer);",
                "-                }",
                "-                break;",
                "-            case PERFORMATIVES:",
                "-                _frameHandler.parse(qpidByteBuffer);",
                "-                break;",
                "-            default:",
                "-                throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+                    break;",
                "+                default:",
                "+                    throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+            }",
                "         }",
                "+        while (qpidByteBuffer.remaining() != remaining);",
                "+        List<Response<?>> responses = new ArrayList<>();",
                "         Response<?> r;"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a827841b24b22cd21f0ca6523da00093f2a26669",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518623600,
            "hunks": 4,
            "message": "QPID-8038: [Broker-J] [AMQP 0-10] Add a protocol test supporting explicit message acquision",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "index 54ecf50f23..43bd2ec1c7 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "@@ -27,2 +27,3 @@ import org.apache.qpid.server.protocol.v0_10.transport.MessageAccept;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageAcceptMode;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageAcquire;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageAcquireMode;",
                "@@ -44,2 +45,3 @@ public class MessageInteraction",
                "     private MessageAccept _accept;",
                "+    private MessageAcquire _acquire;",
                "@@ -53,2 +55,3 @@ public class MessageInteraction",
                "         _accept = new MessageAccept();",
                "+        _acquire = new MessageAcquire();",
                "     }",
                "@@ -201,2 +204,19 @@ public class MessageInteraction",
                "     }",
                "+",
                "+    public Interaction acquire() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_acquire);",
                "+    }",
                "+",
                "+    public MessageInteraction acquireId(final int id)",
                "+    {",
                "+        _acquire.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction acquireTransfers(final RangeSet transfers)",
                "+    {",
                "+        _acquire.setTransfers(transfers);",
                "+        return this;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c39cf075f6641466b263e7f4a0b06f97d449703e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515060809,
            "hunks": 5,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x/1.0]  Add heartbeating/idle tests to protocol suites (cherry picked from commit 99fa51f01cbd03e5712821bcdd782e59584c175f)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "new file mode 100644",
                "index 0000000000..c233e2854a",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class EmptyResponse implements Response<EmptyResponse>",
                "+{",
                "+    @Override",
                "+    public EmptyResponse getBody()",
                "+    {",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "index 0c94ad73a7..a8ab32eb52 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -243,2 +243,6 @@ public class FrameDecoder implements InputDecoder",
                "                 }",
                "+                else if (val == null)",
                "+                {",
                "+                    response = new EmptyResponse();",
                "+                }",
                "                 else",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index b2f8147af2..832ad4d139 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -84,2 +84,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "+    private static final FrameBody EMPTY_FRAME = (channel, conn) -> {",
                "+        throw new UnsupportedOperationException();",
                "+    };",
                "+",
                "     private static final Set<String> CONTAINER_IDS = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "@@ -270,2 +274,8 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public Interaction openIdleTimeOut(final int idleTimeOut)",
                "+    {",
                "+        _open.setIdleTimeOut(UnsignedInteger.valueOf(idleTimeOut));",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction openProperties(final Map<Symbol, Object> properties)",
                "@@ -1072,2 +1082,12 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    ///////////",
                "+    // Empty //",
                "+    ///////////",
                "+",
                "+    public Interaction emptyFrame() throws Exception",
                "+    {",
                "+        sendPerformative(EMPTY_FRAME, UnsignedShort.ZERO);",
                "+        return this;",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bc671f5fded7da402d3fdbe8af3f911aa303baa9",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523614848,
            "hunks": 14,
            "message": "Revert \"QPID-8158: [Broker-J] [System Tests] Run protocol tests as part of unit tests\" This reverts commit b91ddb20ecd3b3178072ef39c08f47cf5ceb7e29.",
            "diff": [
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 3045799b02..6fb8b0d5b5 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -33,3 +33,3 @@",
                "   <properties>",
                "-    <skipITs>${skipTests}</skipITs>",
                "+    <skipITs>true</skipITs>",
                "   </properties>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index 76da773147..3979fa49c2 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -84,2 +84,3 @@",
                "                 <configuration>",
                "+                    <skipTests>${skipITs}</skipTests>",
                "                     <workingDirectory>${project.basedir}</workingDirectory>",
                "@@ -95,3 +96,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -111,3 +111,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -127,3 +126,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -143,3 +141,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -159,3 +156,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -175,3 +171,2 @@",
                "                         <configuration>",
                "-                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "diff --git a/systests/protocol-tests-amqp-0-10/pom.xml b/systests/protocol-tests-amqp-0-10/pom.xml",
                "index 0d0cfe04c0..53b049e8bb 100644",
                "--- a/systests/protocol-tests-amqp-0-10/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-10/pom.xml",
                "@@ -103,3 +103,2 @@",
                "                     </systemPropertyVariables>",
                "-                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -113,3 +112,3 @@",
                "                         <configuration>",
                "-                            <skipTests>true</skipTests>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "                         </configuration>",
                "diff --git a/systests/protocol-tests-amqp-0-8/pom.xml b/systests/protocol-tests-amqp-0-8/pom.xml",
                "index afe51e5367..4a994493dc 100644",
                "--- a/systests/protocol-tests-amqp-0-8/pom.xml",
                "+++ b/systests/protocol-tests-amqp-0-8/pom.xml",
                "@@ -103,3 +103,2 @@",
                "                     </systemPropertyVariables>",
                "-                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -113,3 +112,3 @@",
                "                         <configuration>",
                "-                            <skipTests>true</skipTests>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "                         </configuration>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 8cbaff9b73..5cc7856b57 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -123,3 +123,2 @@",
                "                     </systemPropertyVariables>",
                "-                    <skipTests>${skipTests}</skipTests>",
                "                 </configuration>",
                "@@ -133,3 +132,3 @@",
                "                         <configuration>",
                "-                            <skipTests>true</skipTests>",
                "+                            <skipTests>${skipTests}</skipTests>",
                "                         </configuration>"
            ],
            "changed_files": [
                "qpid-systests-parent/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/protocol-tests-amqp-0-10/pom.xml",
                "systests/protocol-tests-amqp-0-8/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/pom.xml, systests/protocol-tests-amqp-0-8/pom.xml, systests/protocol-tests-amqp-0-10/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8dd9bd6cc25d2672d6353e8021986597918ed312",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519825371,
            "hunks": 2,
            "message": "QPID-8113 : Incorrect symbolic descriptor used for (JMS) selector filter",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java",
                "index a5a1227b59..96ea0082c4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java",
                "@@ -37,4 +37,6 @@ public class JMSSelectorFilterConstructor extends AbstractDescribedTypeConstruct",
                "     {",
                "-            Symbol.valueOf(\"apache.org:jms-selector-filter:string\"),",
                "-            UnsignedLong.valueOf(0x0000468C00000004L)",
                "+            Symbol.valueOf(\"apache.org:selector-filter:string\"),",
                "+            UnsignedLong.valueOf(0x0000468C00000004L),",
                "+            // This incorrect value was originally specified here - retaining solely for backwards compatibility",
                "+            Symbol.valueOf(\"apache.org:jms-selector-filter:string\")",
                "     };",
                "@@ -62,3 +64,3 @@ public class JMSSelectorFilterConstructor extends AbstractDescribedTypeConstruct",
                "         {",
                "-            final String msg = String.format(\"Cannot decode 'apache.org:jms-selector-filter' from '%s'\",",
                "+            final String msg = String.format(\"Cannot decode 'apache.org:selector-filter' from '%s'\",",
                "                                              underlying == null ? null : underlying.getClass().getSimpleName());"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8113": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1b860ff935b0384fd36d7b366e9a0b901f66dcf2"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/JMSSelectorFilterConstructor.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8113",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cda28e59d44b8a8b8ebd9419883d4cb114c2ad73",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522413859,
            "hunks": 1,
            "message": "QPID-8147: [Broker-J] Incorporate changes into documentation",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "index ebd6166146..23ecce6bdd 100644",
                "--- a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "+++ b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "@@ -1498,3 +1498,3 @@",
                "           <entry morerows=\"1\">PRT-1007</entry>",
                "-          <entry>Unsupported protocol header received, replying with <replaceable>AMQP version</replaceable></entry>",
                "+          <entry>Unsupported protocol header received <replaceable>header bytes</replaceable>, replying with <replaceable>AMQP version</replaceable></entry>",
                "         </row>"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8147": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8293a4746731c11888cf1733e3d33d481de005e6"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8147",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66eec20ff896f264d4bbf0ff16e7916a0bf49f97",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515887085,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x ExceptionListenerTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f79d0a97b9..61a5e8a8cb 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -31,3 +31,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index d390a9fd81..6df36fddc4 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -20,3 +20,2 @@",
                " // Those tests are testing 0.8..-0-9-1 specific semantics",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 7ddb2293b5..efb7b9705d 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -54,6 +54,2 @@ org.apache.qpid.test.client.failover.FailoverTest#*",
                "-",
                "-// Tests the issue of connection exceptions being generated for unroutable messages in the 0-x client",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                "-",
                " // Message encryption not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "179cf52d54ac3f77934323c32cae7f6e08838da6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517579163,
            "hunks": 43,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/apache-qpid-broker-j/pom.xml b/apache-qpid-broker-j/pom.xml",
                "index 8cedb01ef4..eb74a9cb8a 100644",
                "--- a/apache-qpid-broker-j/pom.xml",
                "+++ b/apache-qpid-broker-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 8a209b29d3..e16afd102e 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 5e4f9d5dc4..72c2eac9ae 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index de4e7e4840..f1b1e453e2 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 919cd2affa..6ca8c545e9 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index f6e95bff6a..cc870f3a98 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index 922c2ebee5..f9de812eb2 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index e111e2719e..7dd1c7451f 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-bdb-store/pom.xml b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "index 9e9480b2e2..e95fc23df3 100644",
                "--- a/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-jdbc-store/pom.xml b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "index 89f1e64061..46881a0243 100644",
                "--- a/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 713a4784d6..36f8bfb32c 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 8e6ba1dc67..0f560a5a55 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index 6bd3fdf2fa..a8e3a447e8 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index 0abd592bf1..accca6d80a 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index daf00adab7..5d9c7289eb 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index 8791fab4bc..9922c21bfd 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 152eebd49b..48e9497ae9 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index e8b30cba5a..bb746b403d 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 88c6efa302..305e7b0905 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index 02b7bd613e..f4ce5934ee 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index ace3608c65..0cbb46d017 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index f7c9d39c01..1e40130f38 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index 4ddb5d8d9d..041f0563f3 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index a1116d42db..31b6ed9dac 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index c57daef356..5b89e5376d 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 7a2d755f46..2592ca8d62 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index 711d112a23..fabbccddcd 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 244c722a93..7824adaad0 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index 2a41a7c121..e875e20eea 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index b54ce4268d..9dde784065 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-broker-parent</artifactId>",
                "-  <version>7.0.1</version>",
                "+  <version>7.0.2-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>7.0.1</tag>",
                "+    <tag>7.0.x</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 0f98455397..c0ed0b3116 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 97d6913638..4c5b66fe5f 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>7.0.1</version>",
                "+  <version>7.0.2-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index 0e3be94e4b..e2860be2d9 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index 64631ff916..cd662c8efc 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 01dfc4c0cf..bc2380035c 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 6956927bce..13e40ebfa8 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "index 772d8b3e5b..fe82bc4019 100644",
                "--- a/systests/protocol-tests-core/pom.xml",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index 2d17e7536a..cee6d2d7fc 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -22,3 +22,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/systests-utils/pom.xml b/systests/systests-utils/pom.xml",
                "index 0f2ff26a64..73ebaa38b5 100644",
                "--- a/systests/systests-utils/pom.xml",
                "+++ b/systests/systests-utils/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 48e85faae2..65efea9cec 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1</version>",
                "+        <version>7.0.2-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 1b05a0f157..a1a668eb88 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1</version>",
                "+    <version>7.0.2-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-broker-j/pom.xml",
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-core/pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/systests-utils/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c271e45737305089077c0ddceba87f8637fa960c"
                ],
                [
                    "no-tag",
                    "33a653380db5916220f16500ac57ce555408e76d"
                ],
                [
                    "no-tag",
                    "4bac233803400281127fd1a17a94782e817360a9"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-jdbc-store/pom.xml, systests/protocol-tests-amqp-1-0/pom.xml, broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-1-0-bdb-store/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fa7a17d235dc2269a1723ca7df0d4417f9889b1f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519148526,
            "hunks": 26,
            "message": "QPID-8089: [Broker-J][HTTP Management] Activate dynamically added HTTP ports",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java b/broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java",
                "index 1d63aa6795..92b1bac0dc 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java",
                "@@ -25,3 +25,2 @@ import java.util.UUID;",
                " import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "-import org.apache.qpid.server.model.Port;",
                " import org.apache.qpid.server.security.auth.SocketConnectionMetaData;",
                "@@ -32,3 +31,2 @@ public interface AmqpConnectionMetaData extends SocketConnectionMetaData",
                "     UUID getConnectionId();",
                "-    Port getPort();",
                "     String getClientId();",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "index eb9f6d2e03..21b4c26d8f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "@@ -147,3 +147,3 @@ public class HttpPortImpl extends AbstractPort<HttpPortImpl> implements HttpPort",
                "     {",
                "-        if(_portManager != null && _portManager.isActivationAllowed(this))",
                "+        if(_portManager != null)",
                "         {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/PortManager.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/PortManager.java",
                "index ed5827001b..b535a8b54b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/PortManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/PortManager.java",
                "@@ -22,8 +22,4 @@ package org.apache.qpid.server.model.port;",
                "-import org.apache.qpid.server.model.Port;",
                "-",
                " public interface PortManager",
                " {",
                "-    boolean isActivationAllowed(Port<?> port);",
                "-",
                "     int getBoundPort(HttpPort httpPort);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/SocketConnectionMetaData.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/SocketConnectionMetaData.java",
                "index 038bdcdb24..abd1a24cdc 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/SocketConnectionMetaData.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/SocketConnectionMetaData.java",
                "@@ -24,2 +24,3 @@ import org.apache.qpid.server.model.ManagedAttributeValue;",
                " import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "+import org.apache.qpid.server.model.Port;",
                " import org.apache.qpid.server.model.Protocol;",
                "@@ -30,2 +31,3 @@ public interface SocketConnectionMetaData extends ManagedAttributeValue",
                " {",
                "+    Port getPort();",
                "     String getLocalAddress();",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "index 4e4d081c01..b263c69569 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "@@ -31,3 +31,2 @@ import java.util.Collections;",
                " import java.util.EnumSet;",
                "-import java.util.HashMap;",
                " import java.util.HashSet;",
                "@@ -36,2 +35,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.ExecutorService;",
                "@@ -39,2 +39,3 @@ import java.util.concurrent.Executors;",
                " import java.util.concurrent.ThreadFactory;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -98,2 +99,3 @@ import org.apache.qpid.server.management.plugin.servlet.rest.TimeZoneServlet;",
                " import org.apache.qpid.server.management.plugin.servlet.rest.VirtualHostQueryServlet;",
                "+import org.apache.qpid.server.model.AbstractConfigurationChangeListener;",
                " import org.apache.qpid.server.model.AuthenticationProvider;",
                "@@ -176,4 +178,4 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "-    private boolean _allowPortActivation;",
                "-    private Map<HttpPort<?>, ServerConnector> _portConnectorMap = new HashMap<>();",
                "+    private final Map<HttpPort<?>, ServerConnector> _portConnectorMap = new ConcurrentHashMap<>();",
                "+    private final BrokerChangeListener _brokerChangeListener = new BrokerChangeListener();",
                "@@ -195,2 +197,3 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "         _saslExchangeExpiry = getContextValue(Long.class, SASL_EXCHANGE_EXPIRY_CONTEXT_NAME);",
                "+        getBroker().addChangeListener(_brokerChangeListener);",
                "     }",
                "@@ -236,2 +239,3 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "     {",
                "+        getBroker().removeChangeListener(_brokerChangeListener);",
                "         if (_server != null)",
                "@@ -290,3 +294,2 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "         LOGGER.debug(\"Starting up web server on {}\", ports);",
                "-        _allowPortActivation = true;",
                "@@ -303,4 +306,2 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "-        _allowPortActivation = false;",
                "-",
                "         ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);",
                "@@ -714,9 +715,14 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "             NetworkConnector connector = portConnector.getValue();",
                "-            Set<Transport> transports = port.getTransports();",
                "-            for (Transport transport: transports)",
                "-            {",
                "-                getBroker().getEventLogger().message(ManagementConsoleMessages.LISTENING(Protocol.HTTP.name(),",
                "-                                                                                         transport.name(),",
                "-                                                                                         connector.getLocalPort()));",
                "-            }",
                "+            logOperationalListenMessages(port, connector.getLocalPort());",
                "+        }",
                "+    }",
                "+",
                "+    private void logOperationalListenMessages(final HttpPort<?> port, final int localPort)",
                "+    {",
                "+        Set<Transport> transports = port.getTransports();",
                "+        for (Transport transport: transports)",
                "+        {",
                "+            getBroker().getEventLogger().message(ManagementConsoleMessages.LISTENING(Protocol.HTTP.name(),",
                "+                                                                                     transport.name(),",
                "+                                                                                     localPort));",
                "         }",
                "@@ -728,3 +734,3 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "         {",
                "-            getBroker().getEventLogger().message(ManagementConsoleMessages.SHUTTING_DOWN(Protocol.HTTP.name(), connector.getLocalPort()));",
                "+            logOperationalShutdownMessage(connector.getLocalPort());",
                "         }",
                "@@ -732,2 +738,8 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "+    private void logOperationalShutdownMessage(final int localPort)",
                "+    {",
                "+        getBroker().getEventLogger().message(ManagementConsoleMessages.SHUTTING_DOWN(Protocol.HTTP.name(),",
                "+                                                                                     localPort));",
                "+    }",
                "+",
                "     private Collection<HttpPort<?>> getEligibleHttpPorts(Collection<Port<?>> ports)",
                "@@ -747,8 +759,2 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "-    @Override",
                "-    public boolean isActivationAllowed(final Port<?> port)",
                "-    {",
                "-        return _allowPortActivation;",
                "-    }",
                "-",
                "     @Override",
                "@@ -878,2 +884,77 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "     }",
                "+",
                "+    private class BrokerChangeListener extends AbstractConfigurationChangeListener",
                "+    {",
                "+        @Override",
                "+        public void childAdded(final ConfiguredObject<?> object, final ConfiguredObject<?> child)",
                "+        {",
                "+            if (child instanceof HttpPort)",
                "+            {",
                "+                final HttpPort<?> port = (HttpPort<?>) child;",
                "+                Server server = _server;",
                "+                if (server != null)",
                "+                {",
                "+                    ServerConnector connector = null;",
                "+                    try",
                "+                    {",
                "+                        connector = createConnector(port, server);",
                "+                        server.addConnector(connector);",
                "+                        connector.start();",
                "+                        _portConnectorMap.put(port, connector);",
                "+                        logOperationalListenMessages(port, connector.getLocalPort());",
                "+                    }",
                "+                    catch (Exception e)",
                "+                    {",
                "+                        if (connector != null)",
                "+                        {",
                "+                            server.removeConnector(connector);",
                "+                        }",
                "+                        LOGGER.warn(\"HTTP management connector creation failed for http port {}\", port, e);",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void childRemoved(final ConfiguredObject<?> object, final ConfiguredObject<?> child)",
                "+        {",
                "+            if (child instanceof HttpPort)",
                "+            {",
                "+                final HttpPort<?> port = (HttpPort<?>) child;",
                "+                Server server = _server;",
                "+                if (server != null)",
                "+                {",
                "+                    ServerConnector connector = _portConnectorMap.remove(port);",
                "+                    if (connector != null)",
                "+                    {",
                "+                        int localPort = connector.getLocalPort();",
                "+                        try",
                "+                        {",
                "+                            connector.close();",
                "+                        }",
                "+                        catch (Exception e)",
                "+                        {",
                "+                            LOGGER.warn(\"Failed to close connector for http port {}\", port, e);",
                "+                        }",
                "+                        getBroker().scheduleTask(0, TimeUnit.SECONDS, () -> {",
                "+                            LOGGER.debug(\"Stopping connector for http port {}\", localPort);",
                "+                            try",
                "+                            {",
                "+                                connector.stop();",
                "+                            }",
                "+                            catch (Exception e)",
                "+                            {",
                "+                                LOGGER.warn(\"Failed to stop connector for http port {}\", localPort, e);",
                "+                            }",
                "+                            finally",
                "+                            {",
                "+                                logOperationalShutdownMessage(localPort);",
                "+                                _server.removeConnector(connector);",
                "+                            }",
                "+                        });",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                " }",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/ServletConnectionPrincipal.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/ServletConnectionPrincipal.java",
                "index 1c48318bd3..6d442a8a45 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/ServletConnectionPrincipal.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/ServletConnectionPrincipal.java",
                "@@ -33,2 +33,4 @@ import javax.xml.bind.DatatypeConverter;",
                "+import org.apache.qpid.server.management.plugin.HttpManagementUtil;",
                "+import org.apache.qpid.server.model.Port;",
                " import org.apache.qpid.server.model.Protocol;",
                "@@ -142,2 +144,8 @@ public class ServletConnectionPrincipal implements ManagementConnectionPrincipal",
                "+        @Override",
                "+        public Port getPort()",
                "+        {",
                "+            return HttpManagementUtil.getPort(_request);",
                "+        }",
                "+",
                "         @Override",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index 4bc2526f16..a41ee3998d 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -133,2 +133,7 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "+    protected String getTestName()",
                "+    {",
                "+        return _testName.getMethodName();",
                "+    }",
                "+",
                " }",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index 5fcb62d722..6561504c72 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -88,5 +88,10 @@ public class HttpTestHelper",
                "     public HttpTestHelper(BrokerAdmin admin, final String requestHostName)",
                "+    {",
                "+        this(admin, requestHostName, admin.getBrokerAddress(BrokerAdmin.PortType.HTTP).getPort());",
                "+    }",
                "+",
                "+    public HttpTestHelper(BrokerAdmin admin, final String requestHostName, final int httpPort)",
                "     {",
                "         _admin = admin;",
                "-        _httpPort = _admin.getBrokerAddress(BrokerAdmin.PortType.HTTP).getPort();",
                "+        _httpPort = httpPort;",
                "         _username = admin.getValidUsername();"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/HttpPortImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/PortManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/SocketConnectionMetaData.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/ServletConnectionPrincipal.java",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8089": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/connection/AmqpConnectionMetaData.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8089",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "59bd08a3103495ae0e8602c3e23b222a02a97bdf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518690262,
            "hunks": 5,
            "message": "QPID-8098: [Broker-J] Add supporting test case relating to browsing and delivery counts",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "index 7f789c635a..647d34a791 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "@@ -36,2 +36,3 @@ import javax.jms.Message;",
                " import javax.jms.MessageConsumer;",
                "+import javax.jms.MessageEOFException;",
                " import javax.jms.MessageProducer;",
                "@@ -40,2 +41,3 @@ import javax.jms.Queue;",
                " import javax.jms.Session;",
                "+import javax.jms.StreamMessage;",
                " import javax.jms.TemporaryQueue;",
                "@@ -266,3 +268,3 @@ public class AmqpManagementFacade",
                "                 ObjectMapper objectMapper = new ObjectMapper();",
                "-                String jsonifiedValue = null;",
                "+                String jsonifiedValue;",
                "                 try",
                "@@ -295,3 +297,23 @@ public class AmqpManagementFacade",
                "             }",
                "-            if (response instanceof MapMessage)",
                "+            if (response instanceof StreamMessage)",
                "+            {",
                "+                StreamMessage bodyStream = (StreamMessage) response;",
                "+                List<Object> result = new ArrayList<>();",
                "+                boolean done = false;",
                "+                do",
                "+                {",
                "+                    try",
                "+                    {",
                "+                        result.add(bodyStream.readObject());",
                "+                    }",
                "+                    catch (MessageEOFException mfe)",
                "+                    {",
                "+                        // Expected - end of stream",
                "+                        done = true;",
                "+                    }",
                "+                }",
                "+                while (!done);",
                "+                return result;",
                "+            }",
                "+            else if (response instanceof MapMessage)",
                "             {",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index b5c908ecf6..1897cc9ab2 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -67,2 +67,8 @@",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "     </dependencies>"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "systests/qpid-systests-jms_1.1/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8098": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8098",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "073f27ee7bf88847efa1062273b1b7d63b8c0bcf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520875094,
            "hunks": 9,
            "message": "QPID-8123: [Broker-J] [System Tests] Remove remaining compile time references from test code to the Qpid JMS AMQP 0-x client (mainly Strings and FileUtils)",
            "diff": [
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 14d17c281d..92d5250c5e 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -78,8 +78,2 @@",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-client</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "   </dependencies>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 85041f82df..6e132d2a68 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -43,8 +43,2 @@",
                "-    <!-- Many systests have a compile/runtime dependency on qpid-client -->",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-client</artifactId>",
                "-    </dependency>",
                "-",
                "     <!-- broker deps -->",
                "@@ -200,2 +194,6 @@",
                "       <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.qpid</groupId>",
                "+          <artifactId>qpid-client</artifactId>",
                "+        </dependency>",
                "         <dependency>",
                "diff --git a/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java b/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "index 4ba8687b69..368f1160bb 100644",
                "--- a/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "+++ b/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "@@ -33,4 +33,2 @@ import java.net.URL;",
                " import java.net.URLEncoder;",
                "-import java.security.GeneralSecurityException;",
                "-import java.security.KeyStore;",
                " import java.util.Collections;",
                "@@ -42,9 +40,2 @@ import java.util.function.Predicate;",
                "-import javax.net.ssl.HttpsURLConnection;",
                "-import javax.net.ssl.KeyManager;",
                "-import javax.net.ssl.KeyManagerFactory;",
                "-import javax.net.ssl.SSLContext;",
                "-import javax.net.ssl.SSLSocketFactory;",
                "-import javax.net.ssl.TrustManager;",
                "-import javax.net.ssl.TrustManagerFactory;",
                " import javax.servlet.http.HttpServletResponse;",
                "@@ -60,6 +51,4 @@ import org.apache.qpid.server.model.Queue;",
                " import org.apache.qpid.server.model.SystemConfig;",
                "-import org.apache.qpid.ssl.SSLContextFactory;",
                " import org.apache.qpid.test.utils.QpidBrokerTestCase;",
                " import org.apache.qpid.test.utils.TestBrokerConfiguration;",
                "-import org.apache.qpid.transport.network.security.ssl.SSLUtil;",
                "@@ -160,76 +149,2 @@ public class RestTestHelper",
                "-        if(_useSslAuth)",
                "-        {",
                "-            try",
                "-            {",
                "-                // We have to use a SSLSocketFactory from a new SSLContext so that we don't re-use",
                "-                // the JVM's defaults that may have been initialised in previous tests.",
                "-",
                "-                final TrustManager[] trustManagers;",
                "-                final KeyManager[] keyManagers;",
                "-",
                "-                trustManagers =",
                "-                        SSLContextFactory.getTrustManagers(_truststore,",
                "-                                                           _truststorePassword,",
                "-                                                           KeyStore.getDefaultType(),",
                "-                                                           TrustManagerFactory.getDefaultAlgorithm());",
                "-",
                "-                if (_keystore == null)",
                "-                {",
                "-                    throw new IllegalStateException(\"Cannot use SSL client auth without providing a keystore\");",
                "-                }",
                "-",
                "-                keyManagers =",
                "-                        SSLContextFactory.getKeyManagers(_keystore,",
                "-                                                         _keystorePassword,",
                "-                                                         KeyStore.getDefaultType(),",
                "-                                                         KeyManagerFactory.getDefaultAlgorithm(),",
                "-                                                         _clientAuthAlias);",
                "-",
                "-                final SSLContext sslContext = SSLUtil.tryGetSSLContext();",
                "-",
                "-                sslContext.init(keyManagers, trustManagers, null);",
                "-",
                "-                SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();",
                "-",
                "-                ((HttpsURLConnection) httpCon).setSSLSocketFactory(sslSocketFactory);",
                "-            }",
                "-            catch (GeneralSecurityException e)",
                "-            {",
                "-                throw new RuntimeException(e);",
                "-            }",
                "-        }",
                "-        else if (_useSsl)",
                "-        {",
                "-            try",
                "-            {",
                "-                // We have to use a SSLSocketFactory from a new SSLContext so that we don't re-use",
                "-                // the JVM's defaults that may have been initialised in previous tests.",
                "-",
                "-                final TrustManager[] trustManagers;",
                "-                final KeyManager[] keyManagers;",
                "-",
                "-                trustManagers =",
                "-                        SSLContextFactory.getTrustManagers(_truststore,",
                "-                                                           _truststorePassword,",
                "-                                                           KeyStore.getDefaultType(),",
                "-                                                           TrustManagerFactory.getDefaultAlgorithm());",
                "-",
                "-                keyManagers =",
                "-                        SSLContextFactory.getKeyManagers(null, null, null, null, null);",
                "-",
                "-                final SSLContext sslContext = SSLUtil.tryGetSSLContext();",
                "-",
                "-                sslContext.init(keyManagers, trustManagers, null);",
                "-",
                "-                SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();",
                "-",
                "-                ((HttpsURLConnection) httpCon).setSSLSocketFactory(sslSocketFactory);",
                "-            }",
                "-            catch (GeneralSecurityException e)",
                "-            {",
                "-                throw new RuntimeException(e);",
                "-            }",
                "-        }",
                "-",
                "         if(_username != null)",
                "@@ -533,7 +448,2 @@ public class RestTestHelper",
                "-    public void setUseSsl(boolean useSsl)",
                "-    {",
                "-        _useSsl = useSsl;",
                "-    }",
                "-",
                "     public void setUsernameAndPassword(String username, String password)"
            ],
            "changed_files": [
                "bdbstore/pom.xml",
                "systests/pom.xml",
                "systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8123": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8123",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8312b9ffacf642f5cb83ce4edf56c91ea2e42de3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515678792,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Remove ModelTest - tested the ability to explicitly declare durable/exclusive queues using Qpid specific extension to the JMS API.  Server side concerns now covered by 0-9/0-10 protocol tests.",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 6f037e82a6..2d10c6c8b7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -60,3 +60,2 @@ org.apache.qpid.server.logging.actors.*",
                " // REST management is used in this test for validation",
                "-org.apache.qpid.server.queue.ModelTest#*",
                " org.apache.qpid.server.queue.LiveQueueOperationsTest#*",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index d9c92f902e..2c5f14785f 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-// Exclude tests of AMQP 0-x features",
                "-org.apache.qpid.server.queue.ModelTest#*",
                "-",
                " // Exclude tests of connection URL failover method property"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "884fbc4aa17a5f141887af15d0aadfdf289b251e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515885166,
            "hunks": 5,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x ExistingSocketTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 50fadaf67a..f79d0a97b9 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -86,5 +86,2 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 555c25b328..d390a9fd81 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -28,5 +28,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartConsumerFlowSt",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 64957e3c89..1743d07525 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent",
                "@@ -91,5 +88,2 @@ org.apache.qpid.server.store.berkeleydb.replication.TwoNodeTest#*",
                "-// Qpid JMS Client does not support the use of preestablished socket",
                "-org.apache.qpid.client.connection.ExistingSocketTest#*",
                "-",
                " // These tests assume names of queues backing durable subscriptions",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index d4052deace..3193b59b33 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -38,3 +38,2 @@ org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOn",
                " org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.server.failover.FailoverMethodTest#testNoFailover"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c09a9a316fdadcf3b8af21661fbc5ccb3e1baa0a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520640277,
            "hunks": 46,
            "message": "QPID-8123: [Broker-J] [BDB System Tests] Refactor MultiNodeTest and TwoNodeTest to remove knowledge of Qpid JMS AMQP 0-x client (code dependency and format of failover url).",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 6e64fd2a81..34a7f62b47 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -36,3 +36,6 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setPort(int port);",
                "+",
                "+    @Deprecated",
                "     ConnectionBuilder setSslPort(int port);",
                "+",
                "     ConnectionBuilder setPrefetch(int prefetch);",
                "@@ -43,3 +46,5 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setFailover(boolean enableFailover);",
                "+    ConnectionBuilder addFailoverPort(int port);",
                "     ConnectionBuilder setFailoverReconnectAttempts(int reconnectAttempts);",
                "+    ConnectionBuilder setFailoverReconnectDelay(int connectDelay);",
                "     ConnectionBuilder setTls(boolean enableTls);",
                "@@ -58,5 +63,6 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setSaslMechanisms(String... mechanism);",
                "-    ConnectionBuilder setCompress(boolean compress);",
                "+    ConnectionBuilder setCompress(boolean compress);",
                "     Connection build() throws NamingException, JMSException;",
                "+",
                "     ConnectionFactory buildConnectionFactory() throws NamingException;",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/GenericConnectionListener.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/GenericConnectionListener.java",
                "new file mode 100644",
                "index 0000000000..0d55d8a986",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/GenericConnectionListener.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.net.URI;",
                "+",
                "+public interface GenericConnectionListener",
                "+{",
                "+    void onConnectionRestored(URI uri);",
                "+    void onConnectionInterrupted(URI uri);",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "index beece1132a..7980d17f75 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.systests;",
                "+import java.net.URI;",
                " import java.net.URISyntaxException;",
                "@@ -51,2 +52,6 @@ public interface JmsProvider",
                "     ConnectionBuilder getConnectionBuilder();",
                "+",
                "+    void addGenericConnectionListener(Connection connection, GenericConnectionListener genericConnectionListener);",
                "+",
                "+    URI getConnectedURI(Connection connection);",
                " }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 95e6134dbe..262d20ba10 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -25,5 +25,8 @@ import java.net.URLEncoder;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.ArrayList;",
                " import java.util.Hashtable;",
                "+import java.util.List;",
                " import java.util.Map;",
                " import java.util.TreeMap;",
                "+import java.util.stream.Collectors;",
                "@@ -38,2 +41,4 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                " {",
                "+    private final List<Integer> _failoverPorts = new ArrayList<>();",
                "+",
                "     private String _clientId = \"clientid\";",
                "@@ -46,2 +51,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     private int _reconnectAttempts = 20;",
                "+    private int _connectdelay;",
                "     private String _host = \"localhost\";",
                "@@ -71,2 +77,9 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder addFailoverPort(final int port)",
                "+    {",
                "+        _failoverPorts.add(port);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -127,2 +140,9 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setFailoverReconnectDelay(final int connectDelay)",
                "+    {",
                "+        _connectdelay = connectDelay;",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -287,42 +307,20 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "         }",
                "+        cUrlBuilder.append(\"?\");",
                "-        cUrlBuilder.append(\"?brokerlist='tcp://\").append(_host).append(\":\");",
                "-        if (_enableTls)",
                "-        {",
                "-            cUrlBuilder.append(_sslPort).append(\"?ssl='true'\");",
                "-            if (_keyStoreLocation != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&key_store='\").append(encodeBrokerOption(_keyStoreLocation)).append('\\'');",
                "-            }",
                "-            if (_keyStorePassword != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&key_store_password='\").append(_keyStorePassword).append('\\'');",
                "-            }",
                "-            if (_trustStoreLocation != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&trust_store='\").append(encodeBrokerOption(_trustStoreLocation)).append('\\'');",
                "-            }",
                "-            if (_trustStorePassword != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&trust_store_password='\").append(_trustStorePassword).append('\\'');",
                "-            }",
                "-            if (_verifyHostName != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&ssl_verify_hostname='\").append(_verifyHostName).append('\\'');",
                "-            }",
                "-            if (_keyAlias != null)",
                "-            {",
                "-                cUrlBuilder.append(\"&ssl_cert_alias='\").append(_keyAlias).append('\\'');",
                "-            }",
                "-        }",
                "-        else",
                "-        {",
                "-            cUrlBuilder.append(_port);",
                "-        }",
                "+        final List<Integer> copy = new ArrayList<>(_failoverPorts.size() + 1);",
                "+        copy.add(_enableTls ? _sslPort : _port);",
                "-        if (_saslMechanisms != null)",
                "+        if (_enableFailover)",
                "         {",
                "-            if (_enableTls)",
                "+            if (_failoverPorts.isEmpty())",
                "             {",
                "-                cUrlBuilder.append(\"&\");",
                "+                Integer testPortAlt;",
                "+                if ((testPortAlt = Integer.getInteger(\"test.port.alt\")) != null)",
                "+                {",
                "+                    copy.add(testPortAlt);",
                "+                }",
                "+                else if (_enableTls && (testPortAlt = Integer.getInteger(\"test.port.alt.ssl\")) != null)",
                "+                {",
                "+                    copy.add(testPortAlt);",
                "+                }",
                "             }",
                "@@ -330,26 +328,22 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             {",
                "-                cUrlBuilder.append(\"?\");",
                "+                copy.addAll(_failoverPorts);",
                "             }",
                "-            cUrlBuilder.append(\"sasl_mechs='\").append(_saslMechanisms).append('\\'');",
                "         }",
                "+        final String transportQuery = buildTransportQuery();",
                "+        final String brokerlist = copy.stream()",
                "+                                    .map(port -> String.format(\"tcp://%s:%d%s\", _host, port, transportQuery))",
                "+                                    .collect(Collectors.joining(\";\", \"brokerlist='\", \"'\"));",
                "+        cUrlBuilder.append(brokerlist);",
                "+",
                "         if (_enableFailover)",
                "         {",
                "-            cUrlBuilder.append(\";tcp://\").append(_host).append(\":\");",
                "-            if (_enableTls)",
                "-            {",
                "-                cUrlBuilder.append(System.getProperty(\"test.port.alt.ssl\")).append(\"?ssl='true'\");",
                "-            }",
                "-            else",
                "-            {",
                "-                cUrlBuilder.append(System.getProperty(\"test.port.alt\"));",
                "-            }",
                "-            cUrlBuilder.append(\"'\")",
                "-                       .append(\"&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='\")",
                "-                       .append(_reconnectAttempts)",
                "-                       .append(\"''\");",
                "+            cUrlBuilder.append(\"&sync_ack='true'&sync_publish='all'\");",
                "+            cUrlBuilder.append(String.format(\"&failover='roundrobin?cyclecount='%d''\", _reconnectAttempts));",
                "         }",
                "-        else",
                "+",
                "+        if (_saslMechanisms != null)",
                "         {",
                "-            cUrlBuilder.append(\"'\");",
                "+            cUrlBuilder.append(\"&\");",
                "+            cUrlBuilder.append(\"sasl_mechs='\").append(_saslMechanisms).append('\\'');",
                "         }",
                "@@ -377,2 +371,43 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    private String buildTransportQuery()",
                "+    {",
                "+        final StringBuilder builder = new StringBuilder();",
                "+",
                "+        if (_enableTls)",
                "+        {",
                "+            builder.append(\"?ssl='true'\");",
                "+            if (_keyStoreLocation != null)",
                "+            {",
                "+                builder.append(\"&key_store='\").append(encodeBrokerOption(_keyStoreLocation)).append('\\'');",
                "+            }",
                "+            if (_keyStorePassword != null)",
                "+            {",
                "+                builder.append(\"&key_store_password='\").append(_keyStorePassword).append('\\'');",
                "+            }",
                "+            if (_trustStoreLocation != null)",
                "+            {",
                "+                builder.append(\"&trust_store='\").append(encodeBrokerOption(_trustStoreLocation)).append('\\'');",
                "+            }",
                "+            if (_trustStorePassword != null)",
                "+            {",
                "+                builder.append(\"&trust_store_password='\").append(_trustStorePassword).append('\\'');",
                "+            }",
                "+            if (_verifyHostName != null)",
                "+            {",
                "+                builder.append(\"&ssl_verify_hostname='\").append(_verifyHostName).append('\\'');",
                "+            }",
                "+            if (_keyAlias != null)",
                "+            {",
                "+                builder.append(\"&ssl_cert_alias='\").append(_keyAlias).append('\\'');",
                "+            }",
                "+        }",
                "+        if (_connectdelay > 0)",
                "+        {",
                "+            final char initial = builder.length() == 0 ? '?' : '&';",
                "+            builder.append(String.format(\"%cconnectdelay='%d'\", initial, _connectdelay));",
                "+        }",
                "+",
                "+        return builder.toString();",
                "+    }",
                "+",
                "     private String encodeBrokerOption(final String canonicalPath)",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "index 89de60a9a1..733b650050 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "@@ -24,2 +24,5 @@ import java.lang.reflect.Constructor;",
                " import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.lang.reflect.Proxy;",
                "+import java.net.URI;",
                " import java.net.URISyntaxException;",
                "@@ -27,2 +30,3 @@ import java.security.AccessControlException;",
                " import java.util.Hashtable;",
                "+import java.util.Objects;",
                "@@ -75,3 +79,3 @@ public class QpidJmsClient0xProvider implements JmsProvider",
                "-        Queue amqQueue = null;",
                "+        Queue amqQueue;",
                "         try",
                "@@ -150,2 +154,71 @@ public class QpidJmsClient0xProvider implements JmsProvider",
                "     }",
                "+",
                "+    @Override",
                "+    public void addGenericConnectionListener(final Connection connection,",
                "+                                             final GenericConnectionListener listener)",
                "+    {",
                "+        try",
                "+        {",
                "+            final Class<?> iface = Class.forName(\"org.apache.qpid.jms.ConnectionListener\");",
                "+            final Object listenerProxy = Proxy.newProxyInstance(iface.getClassLoader(),",
                "+                                                                new Class[]{iface},",
                "+                                                                (proxy, method, args) -> {",
                "+                                                                    final String methodName = method.getName();",
                "+                                                                    switch (methodName)",
                "+                                                                    {",
                "+                                                                        case \"preFailover\":",
                "+                                                                        {",
                "+                                                                            URI uri = getConnectedURI(connection);",
                "+                                                                            listener.onConnectionInterrupted(uri);",
                "+                                                                            return true;",
                "+                                                                        }",
                "+                                                                        case \"preResubscribe\":",
                "+                                                                            return true;",
                "+                                                                        case \"failoverComplete\":",
                "+                                                                        {",
                "+                                                                            URI uri = getConnectedURI(connection);",
                "+                                                                            listener.onConnectionRestored(uri);",
                "+                                                                            break;",
                "+                                                                        }",
                "+                                                                        case \"toString\":",
                "+                                                                        return String.format(\"[Proxy %s]\",",
                "+                                                                                                 listener.toString());",
                "+                                                                        case \"equals\":",
                "+                                                                            Object other = args[0];",
                "+                                                                            return Objects.equals(this, other);",
                "+                                                                        case \"hashCode\":",
                "+                                                                            return Objects.hashCode(this);",
                "+                                                                    }",
                "+                                                                    return null;",
                "+                                                                });",
                "+",
                "+            final Method setConnectionListener = connection.getClass().getMethod(\"setConnectionListener\", iface);",
                "+            setConnectionListener.invoke(connection, listenerProxy);",
                "+        }",
                "+        catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e)",
                "+        {",
                "+            throw new RuntimeException(\"Unable to reflectively add listener\", e);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public URI getConnectedURI(final Connection connection)",
                "+    {",
                "+        try",
                "+        {",
                "+            final Method brokerDetailsMethod = connection.getClass().getMethod(\"getActiveBrokerDetails\");",
                "+            Object abd =  brokerDetailsMethod.invoke(connection);",
                "+            final Method getHostMethod = abd.getClass().getMethod(\"getHost\");",
                "+            final Method getPortMethod = abd.getClass().getMethod(\"getPort\");",
                "+            final Method getTransportMethod = abd.getClass().getMethod(\"getTransport\");",
                "+            String host = (String) getHostMethod.invoke(abd);",
                "+            int port = (Integer) getPortMethod.invoke(abd);",
                "+            String transport = (String) getTransportMethod.invoke(abd);",
                "+            return URI.create(String.format(\"%s://%s:%d\", transport, host, port));",
                "+        }",
                "+        catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e)",
                "+        {",
                "+            throw new RuntimeException(\"Unable to reflectively get connected URI\", e);",
                "+        }",
                "+    }",
                " }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 76e3a7656a..263ff9c341 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -24,6 +24,11 @@ import java.io.UnsupportedEncodingException;",
                " import java.net.URLEncoder;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                " import java.util.Hashtable;",
                "+import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.TreeMap;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "+import java.util.stream.Collectors;",
                "@@ -45,2 +50,3 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "     private boolean _enableFailover;",
                "+    private final List<Integer> _failoverPorts = new ArrayList<>();",
                "@@ -69,2 +75,9 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder addFailoverPort(final int port)",
                "+    {",
                "+        _failoverPorts.add(port);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -146,2 +159,9 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setFailoverReconnectDelay(final int connectDelay)",
                "+    {",
                "+        _options.put(\"failover.reconnectDelay\", connectDelay);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -272,9 +292,39 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "             }",
                "-            connectionUrlBuilder.append(\"failover:(amqp://\")",
                "-                    .append(_host)",
                "-                    .append(\":\")",
                "-                    .append(_port)",
                "-                    .append(\",amqp://localhost:\")",
                "-                    .append(System.getProperty(\"test.port.alt\"))",
                "-                    .append(\")\");",
                "+",
                "+            final Set<String> transportKeys = options.keySet()",
                "+                                                     .stream()",
                "+                                                     .filter(key -> key.startsWith(\"amqp.\") || key.startsWith(",
                "+                                                             \"transport.\"))",
                "+                                                     .collect(Collectors.toSet());",
                "+",
                "+",
                "+            final Map<String, Object> transportOptions = new HashMap<>(options);",
                "+            transportOptions.keySet().retainAll(transportKeys);",
                "+            options.keySet().removeAll(transportKeys);",
                "+",
                "+            final StringBuilder transportQueryBuilder = new StringBuilder();",
                "+            appendOptions(transportOptions, transportQueryBuilder);",
                "+            final String transportQuery = transportQueryBuilder.toString();",
                "+",
                "+            final List<Integer> copy = new ArrayList<>(_failoverPorts.size() + 1);",
                "+            copy.add(_enableTls ? _sslPort : _port);",
                "+",
                "+            if (_failoverPorts.isEmpty())",
                "+            {",
                "+                Integer testPortAlt;",
                "+                if ((testPortAlt = Integer.getInteger(\"test.port.alt\")) != null)",
                "+                {",
                "+                    copy.add(testPortAlt);",
                "+                }",
                "+                else if (_enableTls && (testPortAlt = Integer.getInteger(\"test.port.alt.ssl\")) != null)",
                "+                {",
                "+                    copy.add(testPortAlt);",
                "+                }",
                "+            }",
                "+            copy.addAll(_failoverPorts);",
                "+",
                "+            final String failover = copy.stream()",
                "+                                        .map(port -> String.format(\"amqp://%s:%d%s\", _host, port, transportQuery))",
                "+                                        .collect(Collectors.joining(\",\", \"failover:(\", \")\"));",
                "+            connectionUrlBuilder.append(failover);",
                "             appendOptions(options, connectionUrlBuilder);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "index d8af7f6ee8..d450e11747 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "@@ -22,3 +22,8 @@ package org.apache.qpid.systests;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.lang.reflect.Proxy;",
                "+import java.net.URI;",
                " import java.net.URISyntaxException;",
                "+import java.util.Objects;",
                " import java.util.Properties;",
                "@@ -122,2 +127,61 @@ public class QpidJmsClientProvider implements JmsProvider",
                "     }",
                "+",
                "+    @Override",
                "+    public void addGenericConnectionListener(final Connection connection, final GenericConnectionListener listener)",
                "+    {",
                "+        try",
                "+        {",
                "+            final Class<?> iface = Class.forName(\"org.apache.qpid.jms.JmsConnectionListener\");",
                "+            final Object listenerProxy = Proxy.newProxyInstance(iface.getClassLoader(),",
                "+                                                                       new Class[]{iface},",
                "+                                                                       (proxy, method, args) -> {",
                "+                                                                           final String methodName = method.getName();",
                "+                                                                           switch (methodName)",
                "+                                                                           {",
                "+                                                                               case \"onConnectionRestored\":",
                "+                                                                                   listener.onConnectionRestored(",
                "+",
                "+                                                                                           ((URI) args[0]));",
                "+                                                                                   break;",
                "+                                                                               case \"onConnectionInterrupted\":",
                "+                                                                                   listener.onConnectionInterrupted(",
                "+",
                "+                                                                                           ((URI) args[0]));",
                "+                                                                                   break;",
                "+                                                                               case \"toString\":",
                "+                                                                                   return String.format(\"[Proxy %s]\",",
                "+                                                                                                        listener.toString());",
                "+                                                                               case \"equals\":",
                "+                                                                                   Object other = args[0];",
                "+                                                                                   return Objects.equals(this, other);",
                "+                                                                               case \"hashCode\":",
                "+                                                                                   return Objects.hashCode(this);",
                "+                                                                           }",
                "+                                                                           return null;",
                "+                                                                       });",
                "+",
                "+            final Method addConnectionListener = connection.getClass().getMethod(\"addConnectionListener\", iface);",
                "+            addConnectionListener.invoke(connection, listenerProxy);",
                "+        }",
                "+        catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e)",
                "+        {",
                "+            throw new RuntimeException(\"Unable to reflectively add listener\", e);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public URI getConnectedURI(final Connection connection)",
                "+    {",
                "+        final Method connectedURI;",
                "+        try",
                "+        {",
                "+            connectedURI = connection.getClass().getMethod(\"getConnectedURI\", new Class[] {});",
                "+            return (URI) connectedURI.invoke(connection, null);",
                "+        }",
                "+        catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e)",
                "+        {",
                "+            throw new RuntimeException(\"Unable to reflectively get connected URI\", e);",
                "+        }",
                "+    }",
                "+",
                " }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index d8ae4d7de9..ba9a39e4c0 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -84,4 +84,2 @@ org.apache.qpid.systest.rest.acl.*",
                "-org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091",
                "-",
                " org.apache.qpid.server.protocol.v0_8.*",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 3557644c91..e72790cd54 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -27,4 +27,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                "-org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091",
                "-",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 611c6b98aa..3265d94fcc 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -19,5 +19,2 @@",
                "-// Exclude client test of initial context factory, as the 1.0 profile uses the 1.0 context factory",
                "-org.apache.qpid.jndi.PropertiesFileInitialContextFactoryTest#*",
                "-",
                " // The binding logging tests focus on the behaviour of the old client with regard to creating (and binding) queues on",
                "@@ -32,5 +29,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQu",
                "-// This test is checking features of the 0-x client specific implementation of Session",
                "-org.apache.qpid.test.unit.client.AMQSessionTest#*",
                "-",
                " // Tests the interaction between the Broker's supported protocols and what the 0-x client agrees to",
                "@@ -42,6 +36,2 @@ org.apache.qpid.server.logging.ConsumerLoggingTest#testSubscriptionCreateDurable",
                "-// Tests assume BURL and/or Connection URL formats",
                "-org.apache.qpid.server.store.berkeleydb.replication.MultiNodeTest#*",
                "-org.apache.qpid.server.store.berkeleydb.replication.TwoNodeTest#*",
                "-",
                " // These tests assume names of queues backing durable subscriptions"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/GenericConnectionListener.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8123": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8123",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5b6dfcd94ef64544040de53d38e2463d327ebcb1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525710638,
            "hunks": 19,
            "message": "QPID-7830: [Broker-J] Cache encoded and decoded values for 0-10 str8",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "index 6d17f8e498..d0cf60451b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "@@ -25,7 +25,4 @@ import java.nio.ByteBuffer;",
                " import java.nio.charset.StandardCharsets;",
                "-import java.security.AccessController;",
                " import java.util.Arrays;",
                "-import javax.security.auth.Subject;",
                "-",
                " import com.google.common.cache.Cache;",
                "@@ -35,6 +32,4 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "-import org.apache.qpid.server.security.QpidPrincipal;",
                "-import org.apache.qpid.server.virtualhost.CacheProvider;",
                "+import org.apache.qpid.server.virtualhost.CacheFactory;",
                " import org.apache.qpid.server.virtualhost.NullCache;",
                "-import org.apache.qpid.server.virtualhost.VirtualHostPrincipal;",
                "@@ -58,3 +53,4 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     // rather than using the byte arrays as keys.",
                "-    private static ThreadLocal<Cache<ByteBuffer, AMQShortString>> CACHE = new ThreadLocal<>();",
                "+    private static final ThreadLocal<Cache<ByteBuffer, AMQShortString>> CACHE =",
                "+            ThreadLocal.withInitial(() -> CacheFactory.getCache(\"amqShortStringCache\", NULL_CACHE));",
                "@@ -367,20 +363,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        Cache<ByteBuffer, AMQShortString> cache = CACHE.get();",
                "-        if (cache == null)",
                "-        {",
                "-            cache = NULL_CACHE;",
                "-            Subject subject = Subject.getSubject(AccessController.getContext());",
                "-            if (subject != null)",
                "-            {",
                "-                VirtualHostPrincipal principal = QpidPrincipal.getSingletonPrincipal(subject, true, VirtualHostPrincipal.class);",
                "-",
                "-                if (principal != null && principal.getVirtualHost() instanceof CacheProvider)",
                "-                {",
                "-                    CacheProvider cacheProvider = (CacheProvider) principal.getVirtualHost();",
                "-                    cache = cacheProvider.getNamedCache(\"amqShortStringCache\");",
                "-                }",
                "-            }",
                "-            CACHE.set(cache);",
                "-        }",
                "-        return cache;",
                "+        return CACHE.get();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheFactory.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheFactory.java",
                "new file mode 100644",
                "index 0000000000..3c110ab206",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheFactory.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.virtualhost;",
                "+",
                "+import java.security.AccessController;",
                "+",
                "+import javax.security.auth.Subject;",
                "+",
                "+import com.google.common.cache.Cache;",
                "+",
                "+import org.apache.qpid.server.security.QpidPrincipal;",
                "+",
                "+public class CacheFactory",
                "+{",
                "+",
                "+    public static <K, V> Cache<K, V> getCache(final String cacheName, final Cache<K, V> defaultCache)",
                "+    {",
                "+        Cache<K, V> cache = defaultCache;",
                "+        Subject subject = Subject.getSubject(AccessController.getContext());",
                "+        if (subject != null)",
                "+        {",
                "+            VirtualHostPrincipal",
                "+                    principal = QpidPrincipal.getSingletonPrincipal(subject, true, VirtualHostPrincipal.class);",
                "+",
                "+            if (principal != null && principal.getVirtualHost() instanceof CacheProvider)",
                "+            {",
                "+                CacheProvider cacheProvider = (CacheProvider) principal.getVirtualHost();",
                "+                cache = cacheProvider.getNamedCache(cacheName);",
                "+            }",
                "+        }",
                "+        return cache;",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java",
                "index 6aa3cd70e6..9b8d31f857 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java",
                "@@ -32,2 +32,7 @@ import java.util.UUID;",
                "+import com.google.common.cache.Cache;",
                "+",
                "+import org.apache.qpid.server.virtualhost.CacheFactory;",
                "+import org.apache.qpid.server.virtualhost.NullCache;",
                "+",
                "@@ -41,10 +46,5 @@ public abstract class AbstractDecoder implements Decoder",
                " {",
                "-",
                "-    private final Map<Binary,String> str8cache = new LinkedHashMap<Binary,String>()",
                "-    {",
                "-        @Override protected boolean removeEldestEntry(Map.Entry<Binary,String> me)",
                "-        {",
                "-            return size() > 4*1024;",
                "-        }",
                "-    };",
                "+    private static final NullCache<Binary, String> NULL_CACHE = new NullCache<>();",
                "+    private static final ThreadLocal<Cache<Binary, String>> CACHE =",
                "+            ThreadLocal.withInitial(() -> CacheFactory.getCache(\"str8Cache\", NULL_CACHE));",
                "@@ -128,3 +128,3 @@ public abstract class AbstractDecoder implements Decoder",
                "         Binary bin = get(size);",
                "-        String str = str8cache.get(bin);",
                "+        String str = getStringCache().getIfPresent(bin);",
                "@@ -135,8 +135,5 @@ public abstract class AbstractDecoder implements Decoder",
                "             {",
                "-                str8cache.put(bin.copy(), str);",
                "-            }",
                "-            else",
                "-            {",
                "-                str8cache.put(bin, str);",
                "+                bin = bin.copy();",
                "             }",
                "+            getStringCache().put(bin, str);",
                "         }",
                "@@ -480,2 +477,12 @@ public abstract class AbstractDecoder implements Decoder",
                "+    private static Cache<Binary, String> getStringCache()",
                "+    {",
                "+        return CACHE.get();",
                "+    }",
                "+",
                "+    /** Unit testing only */",
                "+    static void setStringCache(final Cache<Binary, String> cache)",
                "+    {",
                "+        CACHE.set(cache);",
                "+    }",
                " }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java",
                "index ff9bdb270c..8f6a631594 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java",
                "@@ -28,3 +28,2 @@ import java.nio.charset.StandardCharsets;",
                " import java.nio.charset.UnsupportedCharsetException;",
                "-import java.util.LinkedHashMap;",
                " import java.util.List;",
                "@@ -33,2 +32,7 @@ import java.util.UUID;",
                "+import com.google.common.cache.Cache;",
                "+",
                "+import org.apache.qpid.server.virtualhost.CacheFactory;",
                "+import org.apache.qpid.server.virtualhost.NullCache;",
                "+",
                "@@ -43,10 +47,5 @@ public abstract class AbstractEncoder implements Encoder",
                "-",
                "-    private final Map<String,byte[]> str8cache = new LinkedHashMap<String,byte[]>()",
                "-    {",
                "-        @Override protected boolean removeEldestEntry(Map.Entry<String,byte[]> me)",
                "-        {",
                "-            return size() > 4*1024;",
                "-        }",
                "-    };",
                "+    private static final NullCache<String, byte[]> NULL_CACHE = new NullCache<>();",
                "+    private static final ThreadLocal<Cache<String, byte[]>> CACHE =",
                "+            ThreadLocal.withInitial(() -> CacheFactory.getCache(\"encodedStr8BytesCache\", NULL_CACHE));",
                "@@ -138,3 +137,3 @@ public abstract class AbstractEncoder implements Encoder",
                "-        byte[] bytes = str8cache.get(s);",
                "+        byte[] bytes = getEncodedStringCache().getIfPresent(s);",
                "         if (bytes == null)",
                "@@ -146,3 +145,3 @@ public abstract class AbstractEncoder implements Encoder",
                "             }",
                "-            str8cache.put(s, bytes);",
                "+            getEncodedStringCache().put(s, bytes);",
                "         }",
                "@@ -572,2 +571,12 @@ public abstract class AbstractEncoder implements Encoder",
                "+    private static Cache<String, byte[]> getEncodedStringCache()",
                "+    {",
                "+        return CACHE.get();",
                "+    }",
                "+",
                "+    /** Unit testing only */",
                "+    static void setEncodedStringCache(final Cache<String, byte[]> cache)",
                "+    {",
                "+        CACHE.set(cache);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheFactory.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7830": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractDecoder.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/transport/AbstractEncoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7830",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bc46f8b37eef8db31779acaf59225e8001f7a479",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520344109,
            "hunks": 37,
            "message": "QPID-7873: [Broker-J] Make sure that link store structure and preferences store structure are deleted on deletion of the virtual host node",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "index d7de6fddeb..aaa436b4f6 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "@@ -48,2 +48,4 @@ import org.apache.qpid.server.store.MessageStore;",
                " import org.apache.qpid.server.store.VirtualHostStoreUpgraderAndRecoverer;",
                "+import org.apache.qpid.server.store.preferences.PreferenceStore;",
                "+import org.apache.qpid.server.store.preferences.PreferenceStoreProvider;",
                " import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "@@ -138,2 +140,11 @@ public abstract class AbstractStandardVirtualHostNode<X extends AbstractStandard",
                "+                                 if (AbstractStandardVirtualHostNode.this instanceof PreferenceStoreProvider)",
                "+                                 {",
                "+                                     PreferenceStore preferenceStore =",
                "+                                             ((PreferenceStoreProvider) AbstractStandardVirtualHostNode.this).getPreferenceStore();",
                "+                                     if (preferenceStore != null)",
                "+                                     {",
                "+                                         preferenceStore.onDelete();",
                "+                                     }",
                "+                                 }",
                "                                  DurableConfigurationStore configurationStore = getConfigurationStore();",
                "diff --git a/broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java b/broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java",
                "index 94de03c07f..4441d6a210 100644",
                "--- a/broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java",
                "+++ b/broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java",
                "@@ -38,2 +38,3 @@ import java.sql.Statement;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Base64;",
                "@@ -64,2 +65,3 @@ import org.apache.qpid.server.store.jdbc.JDBCDetails;",
                " import org.apache.qpid.server.store.jdbc.JdbcUtils;",
                "+import org.apache.qpid.server.util.Action;",
                "@@ -74,2 +76,3 @@ public class JDBCLinkStore extends AbstractLinkStore",
                "     private final boolean _isUseBytesMethodsForBlob;",
                "+    private final Action<Connection> _cleanUpAction;",
                "@@ -82,2 +85,4 @@ public class JDBCLinkStore extends AbstractLinkStore",
                "         _isUseBytesMethodsForBlob = jdbcDetails.isUseBytesMethodsForBlob();",
                "+        _cleanUpAction = this::cleanUp;",
                "+        jdbcContainer.addDeleteAction(_cleanUpAction);",
                "     }",
                "@@ -188,8 +193,6 @@ public class JDBCLinkStore extends AbstractLinkStore",
                "     {",
                "-        try (Connection connection = getConnection();",
                "-             Statement dropLinksStatement = connection.createStatement();",
                "-             Statement dropVersionsStatement = connection.createStatement())",
                "+        _jdbcContainer.removeDeleteAction(_cleanUpAction);",
                "+        try (Connection connection = getConnection())",
                "         {",
                "-            dropLinksStatement.execute(String.format(\"DROP TABLE %s\", getLinksTableName()));",
                "-            dropVersionsStatement.execute(String.format(\"DROP TABLE %s\", getVersionTableName()));",
                "+            cleanUp(connection);",
                "         }",
                "@@ -205,2 +208,7 @@ public class JDBCLinkStore extends AbstractLinkStore",
                "+    private void cleanUp(final Connection connection)",
                "+    {",
                "+        JdbcUtils.dropTables(connection, LOGGER, Arrays.asList(getLinksTableName(), getVersionTableName()));",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhost/derby/DerbyVirtualHostImpl.java b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhost/derby/DerbyVirtualHostImpl.java",
                "index 39085c86a9..5985f51513 100644",
                "--- a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhost/derby/DerbyVirtualHostImpl.java",
                "+++ b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhost/derby/DerbyVirtualHostImpl.java",
                "@@ -35,2 +35,3 @@ import org.apache.qpid.server.store.jdbc.JDBCContainer;",
                " import org.apache.qpid.server.store.jdbc.JDBCDetails;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                "@@ -124,2 +125,14 @@ public class DerbyVirtualHostImpl extends AbstractVirtualHost<DerbyVirtualHostIm",
                "     }",
                "+",
                "+    @Override",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        ((DerbyMessageStore) getMessageStore()).addDeleteAction(action);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        ((DerbyMessageStore) getMessageStore()).removeDeleteAction(action);",
                "+    }",
                " }",
                "diff --git a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhostnode/derby/DerbyVirtualHostNodeImpl.java b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhostnode/derby/DerbyVirtualHostNodeImpl.java",
                "index 8eba861aec..cdd90e8341 100644",
                "--- a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhostnode/derby/DerbyVirtualHostNodeImpl.java",
                "+++ b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhostnode/derby/DerbyVirtualHostNodeImpl.java",
                "@@ -42,2 +42,3 @@ import org.apache.qpid.server.store.jdbc.JDBCDetails;",
                " import org.apache.qpid.server.store.preferences.PreferenceStore;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                "@@ -110,3 +111,3 @@ public class DerbyVirtualHostNodeImpl extends AbstractStandardVirtualHostNode<De",
                "     {",
                "-        return ((DerbyConfigurationStore)getConfigurationStore()).getPreferenceStore();",
                "+        return getStore().getPreferenceStore();",
                "     }",
                "@@ -124,3 +125,3 @@ public class DerbyVirtualHostNodeImpl extends AbstractStandardVirtualHostNode<De",
                "         {",
                "-            return ((DerbyConfigurationStore) getConfigurationStore()).getConnection();",
                "+            return getStore().getConnection();",
                "         }",
                "@@ -139,2 +140,19 @@ public class DerbyVirtualHostNodeImpl extends AbstractStandardVirtualHostNode<De",
                "     }",
                "+",
                "+    @Override",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().addDeleteAction(action);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().removeDeleteAction(action);",
                "+    }",
                "+",
                "+    private DerbyConfigurationStore getStore()",
                "+    {",
                "+        return (DerbyConfigurationStore) getConfigurationStore();",
                "+    }",
                " }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "index 1aac9c73a3..c87d719939 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "@@ -40,3 +40,5 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.UUID;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "@@ -53,2 +55,3 @@ import org.apache.qpid.server.store.StoreException;",
                " import org.apache.qpid.server.store.handler.ConfiguredObjectRecordHandler;",
                "+import org.apache.qpid.server.util.Action;",
                "@@ -61,3 +64,3 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "     private static final int DEFAULT_CONFIG_VERSION = 0;",
                "-",
                "+    private final Set<Action<Connection>> _deleteActions = Collections.newSetFromMap(new ConcurrentHashMap<>());;",
                "@@ -80,2 +83,3 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "         changeState(CONFIGURED, OPEN);",
                "+        _deleteActions.clear();",
                "         try",
                "@@ -736,2 +740,12 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        _deleteActions.add(action);",
                "+    }",
                "+",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        _deleteActions.remove(action);",
                "+    }",
                "+",
                "     private void updateConfiguredObject(ConfiguredObjectRecord configuredObject,",
                "@@ -821,7 +835,19 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "-    void onDelete(final Connection conn) throws SQLException",
                "+    void onDelete(final Connection conn)",
                "     {",
                "-        JdbcUtils.dropTables(conn,",
                "-                             getLogger(),",
                "-                             Arrays.asList(getConfiguredObjectsTableName(), getConfiguredObjectHierarchyTableName()));",
                "+        try",
                "+        {",
                "+            for (Action<Connection> deleteAction : _deleteActions)",
                "+            {",
                "+                deleteAction.performAction(conn);",
                "+            }",
                "+            _deleteActions.clear();",
                "+        }",
                "+        finally",
                "+        {",
                "+            JdbcUtils.dropTables(conn,",
                "+                                 getLogger(),",
                "+                                 Arrays.asList(getConfiguredObjectsTableName(),",
                "+                                               getConfiguredObjectHierarchyTableName()));",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "index c12e2233ee..0ad638c2bb 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "@@ -69,2 +69,3 @@ import org.apache.qpid.server.store.handler.MessageInstanceHandler;",
                " import org.apache.qpid.server.txn.Xid;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.CachingUUIDFactory;",
                "@@ -92,2 +93,3 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "     private final Set<MessageDeleteListener> _messageDeleteListeners = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "+    private final Set<Action<Connection>> _deleteActions = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "@@ -249,2 +251,3 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "     {",
                "+        _deleteActions.clear();",
                "         try(Connection conn =  newAutoCommitConnection())",
                "@@ -737,2 +740,12 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        _deleteActions.add(action);",
                "+    }",
                "+",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        _deleteActions.remove(action);",
                "+    }",
                "+",
                "     private static final class ConnectionWrapper",
                "@@ -1818,3 +1831,14 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "     {",
                "-        JdbcUtils.dropTables(conn, getLogger(), getTableNames());",
                "+        try",
                "+        {",
                "+            for (Action<Connection> deleteAction: _deleteActions)",
                "+            {",
                "+                deleteAction.performAction(conn);",
                "+            }",
                "+            _deleteActions.clear();",
                "+        }",
                "+        finally",
                "+        {",
                "+            JdbcUtils.dropTables(conn, getLogger(), getTableNames());",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JDBCContainer.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JDBCContainer.java",
                "index 2634a14937..1566f3fb68 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JDBCContainer.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JDBCContainer.java",
                "@@ -23,2 +23,4 @@ import java.sql.Connection;",
                "+import org.apache.qpid.server.util.Action;",
                "+",
                " public interface JDBCContainer",
                "@@ -30,2 +32,5 @@ public interface JDBCContainer",
                "     String getTableNamePrefix();",
                "+",
                "+    void addDeleteAction(Action<Connection> action);",
                "+    void removeDeleteAction(Action<Connection> action);",
                " }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "index b6d9f226ca..d3df9aee1c 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "@@ -121,3 +121,3 @@ public class JdbcUtils",
                "-    static void dropTables(final Connection connection, final Logger logger, Collection<String> tableNames)",
                "+    public static void dropTables(final Connection connection, final Logger logger, Collection<String> tableNames)",
                "     {",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhost/jdbc/JDBCVirtualHostImpl.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhost/jdbc/JDBCVirtualHostImpl.java",
                "index 497f1ebc32..33ff8992d2 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhost/jdbc/JDBCVirtualHostImpl.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhost/jdbc/JDBCVirtualHostImpl.java",
                "@@ -35,2 +35,3 @@ import org.apache.qpid.server.store.jdbc.JDBCContainer;",
                " import org.apache.qpid.server.store.jdbc.JDBCDetails;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                "@@ -113,3 +114,3 @@ public class JDBCVirtualHostImpl extends AbstractVirtualHost<JDBCVirtualHostImpl",
                "         {",
                "-            return ((AbstractJDBCMessageStore) getMessageStore()).getConnection();",
                "+            return getStore().getConnection();",
                "         }",
                "@@ -131,2 +132,19 @@ public class JDBCVirtualHostImpl extends AbstractVirtualHost<JDBCVirtualHostImpl",
                "     }",
                "+",
                "+    @Override",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().addDeleteAction(action);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().removeDeleteAction(action);",
                "+    }",
                "+",
                "+    private AbstractJDBCMessageStore getStore()",
                "+    {",
                "+        return (AbstractJDBCMessageStore) getMessageStore();",
                "+    }",
                " }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhostnode/jdbc/JDBCVirtualHostNodeImpl.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhostnode/jdbc/JDBCVirtualHostNodeImpl.java",
                "index 77f20f4c49..7c4efd4ea0 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhostnode/jdbc/JDBCVirtualHostNodeImpl.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhostnode/jdbc/JDBCVirtualHostNodeImpl.java",
                "@@ -38,2 +38,3 @@ import org.apache.qpid.server.store.jdbc.JDBCDetails;",
                " import org.apache.qpid.server.store.preferences.PreferenceStore;",
                "+import org.apache.qpid.server.util.Action;",
                " import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                "@@ -121,3 +122,3 @@ public class JDBCVirtualHostNodeImpl extends AbstractStandardVirtualHostNode<JDB",
                "         {",
                "-            return ((GenericJDBCConfigurationStore) getConfigurationStore()).getConnection();",
                "+            return getStore().getConnection();",
                "         }",
                "@@ -149,3 +150,20 @@ public class JDBCVirtualHostNodeImpl extends AbstractStandardVirtualHostNode<JDB",
                "     {",
                "-        return ((GenericJDBCConfigurationStore) getConfigurationStore()).getPreferenceStore();",
                "+        return getStore().getPreferenceStore();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().addDeleteAction(action);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeDeleteAction(final Action<Connection> action)",
                "+    {",
                "+        getStore().removeDeleteAction(action);",
                "+    }",
                "+",
                "+    private GenericJDBCConfigurationStore getStore()",
                "+    {",
                "+        return (GenericJDBCConfigurationStore) getConfigurationStore();",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java",
                "broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java",
                "broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhost/derby/DerbyVirtualHostImpl.java",
                "broker-plugins/derby-store/src/main/java/org/apache/qpid/server/virtualhostnode/derby/DerbyVirtualHostNodeImpl.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JDBCContainer.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhost/jdbc/JDBCVirtualHostImpl.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/virtualhostnode/jdbc/JDBCVirtualHostNodeImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7873": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-jdbc-store/src/main/java/org/apache/qpid/server/protocol/v1_0/store/jdbc/JDBCLinkStore.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7873",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bd1f90985703a5dedc37935ad833bece1f650ccd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517814540,
            "hunks": 25,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Add end to end message test",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/pom.xml b/systests/qpid-systests-http-management/pom.xml",
                "index 8ea2625f50..71356298e8 100644",
                "--- a/systests/qpid-systests-http-management/pom.xml",
                "+++ b/systests/qpid-systests-http-management/pom.xml",
                "@@ -85,2 +85,7 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-jms-core</artifactId>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "@@ -119,3 +124,54 @@",
                "+    <profiles>",
                "+        <profile>",
                "+            <id>addQpidJmsClientIfNecessary</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>!enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-jms-client</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>addJms11IfNecessary</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-client</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "+    </profiles>",
                "+",
                "     <build>",
                "+        <testResources>",
                "+            <testResource>",
                "+                <directory>${basedir}/src/test/java</directory>",
                "+                <excludes>",
                "+                    <exclude>**/*.java/</exclude>",
                "+                </excludes>",
                "+            </testResource>",
                "+            <testResource>",
                "+                <directory>${basedir}/src/test/resources</directory>",
                "+            </testResource>",
                "+            <testResource>",
                "+                <directory>${basedir}/../../test-profiles/test_resources/ssl</directory>",
                "+                <includes>",
                "+                    <include>*.jks</include>",
                "+                </includes>",
                "+            </testResource>",
                "+        </testResources>",
                "+",
                "+",
                "         <plugins>",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index 32100fa930..72304009ef 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -22,2 +22,8 @@ package org.apache.qpid.tests.http;",
                "+import java.net.InetSocketAddress;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.JMSException;",
                "+import javax.naming.NamingException;",
                "+",
                " import org.junit.After;",
                "@@ -25,6 +31,11 @@ import org.junit.Before;",
                " import org.junit.Rule;",
                "-import org.junit.internal.runners.TestMethod;",
                "-import org.junit.rules.MethodRule;",
                " import org.junit.rules.TestName;",
                "+import org.apache.qpid.server.model.Protocol;",
                "+import org.apache.qpid.systests.AmqpManagementFacade;",
                "+import org.apache.qpid.systests.ConnectionBuilder;",
                "+import org.apache.qpid.systests.JmsProvider;",
                "+import org.apache.qpid.systests.QpidJmsClient0xProvider;",
                "+import org.apache.qpid.systests.QpidJmsClientProvider;",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                " import org.apache.qpid.tests.utils.BrokerAdminUsingTestBase;",
                "@@ -38,2 +49,4 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "+    private JmsProvider _jmsProvider;",
                "+",
                "     @Before",
                "@@ -47,2 +60,14 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "                                      config != null && config.useVirtualHostAsHost() ? getVirtualHost() : null);",
                "+",
                "+        Protocol protocol = getProtocol();",
                "+        AmqpManagementFacade managementFacade = new AmqpManagementFacade(protocol);",
                "+        if (protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            _jmsProvider = new QpidJmsClientProvider(managementFacade);",
                "+        }",
                "+        else",
                "+        {",
                "+            _jmsProvider = new QpidJmsClient0xProvider();",
                "+        }",
                "+",
                "     }",
                "@@ -65,2 +90,17 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "+    protected Connection getConnection() throws JMSException, NamingException",
                "+    {",
                "+        return getConnectionBuilder().build();",
                "+    }",
                "+",
                "+    protected ConnectionBuilder getConnectionBuilder()",
                "+    {",
                "+        InetSocketAddress brokerAddress = getBrokerAdmin().getBrokerAddress(BrokerAdmin.PortType.AMQP);",
                "+        return _jmsProvider.getConnectionBuilder()",
                "+                           .setHost(brokerAddress.getHostName())",
                "+                           .setPort(brokerAddress.getPort())",
                "+                           .setUsername(getBrokerAdmin().getValidUsername())",
                "+                           .setPassword(getBrokerAdmin().getValidPassword());",
                "+    }",
                "+",
                "     private HttpRequestConfig getHttpRequestConfig() throws Exception",
                "@@ -75,2 +115,15 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    protected static long getReceiveTimeout()",
                "+    {",
                "+        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+    }",
                "+",
                "+    protected static Protocol getProtocol()",
                "+    {",
                "+        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\")",
                "+                                                .replace('-', '_')",
                "+                                                .replace('.', '_'));",
                "+    }",
                "+",
                " }",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index 3fc6c78c3e..5fcb62d722 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -34,2 +34,5 @@ import java.net.URL;",
                " import java.net.URLEncoder;",
                "+import java.security.KeyManagementException;",
                "+import java.security.NoSuchAlgorithmException;",
                "+import java.security.cert.X509Certificate;",
                " import java.util.HashMap;",
                "@@ -39,2 +42,8 @@ import java.util.Map;",
                "+import javax.net.ssl.HostnameVerifier;",
                "+import javax.net.ssl.HttpsURLConnection;",
                "+import javax.net.ssl.SSLContext;",
                "+import javax.net.ssl.SSLSession;",
                "+import javax.net.ssl.TrustManager;",
                "+import javax.net.ssl.X509TrustManager;",
                " import javax.xml.bind.DatatypeConverter;",
                "@@ -71,3 +80,3 @@ public class HttpTestHelper",
                "     private String _acceptEncoding;",
                "-    private boolean _useSsl = false;",
                "+    private boolean _tls = false;",
                "@@ -87,23 +96,23 @@ public class HttpTestHelper",
                "-    public int getHttpPort()",
                "+    public void setTls(final boolean tls)",
                "     {",
                "-        return _httpPort;",
                "+        _tls = tls;",
                "     }",
                "-    private String getHostName()",
                "+    private int getHttpPort()",
                "     {",
                "-        return \"localhost\";",
                "+        return _httpPort;",
                "     }",
                "-    private String getProtocol()",
                "+    private String getHostName()",
                "     {",
                "-        return _useSsl ? \"https\" : \"http\";",
                "+        return \"localhost\";",
                "     }",
                "-    public String getManagementURL()",
                "+    private String getManagementURL()",
                "     {",
                "-        return getProtocol() + \"://\" + getHostName() + \":\" + getHttpPort();",
                "+        return (_tls ? \"https\" : \"http\") + \"://\" + getHostName() + \":\" + getHttpPort();",
                "     }",
                "-    public URL getManagementURL(String path) throws MalformedURLException",
                "+    private URL getManagementURL(String path) throws MalformedURLException",
                "     {",
                "@@ -120,2 +129,38 @@ public class HttpTestHelper",
                "         HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();",
                "+        if (httpCon instanceof HttpsURLConnection)",
                "+        {",
                "+            HttpsURLConnection httpsCon = (HttpsURLConnection) httpCon;",
                "+            try",
                "+            {",
                "+                SSLContext sslContext = SSLContext.getInstance(\"TLS\");",
                "+                TrustManager[] trustAllCerts = new TrustManager[] {",
                "+                        new X509TrustManager()",
                "+                        {",
                "+                            public X509Certificate[] getAcceptedIssuers()",
                "+                            {",
                "+                                X509Certificate[] issuers = new X509Certificate[0];",
                "+                                return issuers;",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void checkClientTrusted(X509Certificate[] certs, String authType)",
                "+                            {",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void checkServerTrusted(X509Certificate[] certs, String authType)",
                "+                            {",
                "+                            }",
                "+                        }",
                "+                };",
                "+",
                "+                sslContext.init(null, trustAllCerts, null);",
                "+                httpsCon.setSSLSocketFactory(sslContext.getSocketFactory());",
                "+                httpsCon.setHostnameVerifier((s, sslSession) -> true);",
                "+            }",
                "+            catch (KeyManagementException | NoSuchAlgorithmException e)",
                "+            {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "+        }",
                "         httpCon.setConnectTimeout(_connectTimeout);",
                "@@ -390,2 +435,3 @@ public class HttpTestHelper",
                "     }",
                "+",
                " }",
                "diff --git a/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "index 84310f92ae..356c4bb128 100644",
                "--- a/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "+++ b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "@@ -21,73 +21,105 @@",
                " {",
                "-  \"name\" : \"${broker.name}\",",
                "-  \"modelVersion\" : \"7.0\",",
                "-  \"authenticationproviders\" : [ {",
                "-    \"name\" : \"anon\",",
                "-    \"type\" : \"Anonymous\"",
                "-  }, {",
                "-    \"name\" : \"plain\",",
                "-    \"type\" : \"Plain\",",
                "-    \"secureOnlyMechanisms\" : [],",
                "-    \"users\" : [ {",
                "-      \"name\" : \"admin\",",
                "-      \"type\" : \"managed\",",
                "-      \"password\" : \"admin\"",
                "-    }, {",
                "-      \"name\" : \"guest\",",
                "-      \"type\" : \"managed\",",
                "-      \"password\" : \"guest\"",
                "-    } ]",
                "-  } ],",
                "-  \"ports\" : [ {",
                "-    \"name\" : \"AMQP\",",
                "-    \"type\" : \"AMQP\",",
                "-    \"authenticationProvider\" : \"plain\",",
                "-    \"port\" : \"0\",",
                "-    \"virtualhostaliases\" : [ {",
                "-      \"name\" : \"defaultAlias\",",
                "-      \"type\" : \"defaultAlias\"",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\"",
                "-    }, {",
                "-      \"name\" : \"nameAlias\",",
                "-      \"type\" : \"nameAlias\"",
                "-    } ]",
                "-  }, {",
                "-    \"name\" : \"ANONYMOUS_AMQP\",",
                "-    \"type\" : \"AMQP\",",
                "-    \"authenticationProvider\" : \"anon\",",
                "-    \"port\" : \"0\",",
                "-    \"virtualhostaliases\" : [ {",
                "-      \"name\" : \"defaultAlias\",",
                "-      \"type\" : \"defaultAlias\",",
                "-      \"durable\" : true",
                "-    }, {",
                "-      \"name\" : \"hostnameAlias\",",
                "-      \"type\" : \"hostnameAlias\",",
                "-      \"durable\" : true",
                "-    }, {",
                "-      \"name\" : \"nameAlias\",",
                "-      \"type\" : \"nameAlias\",",
                "-      \"durable\" : true",
                "-    } ]",
                "-  }, {",
                "-    \"name\": \"HTTP\",",
                "-    \"authenticationProvider\": \"plain\",",
                "-    \"port\": \"0\",",
                "-    \"protocols\": [",
                "-      \"HTTP\"",
                "-    ],",
                "-    \"virtualhostaliases\" : [ {",
                "-      \"name\" : \"nameAlias\",",
                "-      \"type\" : \"nameAlias\"",
                "-    } ]",
                "-",
                "-  }],",
                "-  \"plugins\" : [ {",
                "-    \"type\" : \"MANAGEMENT-HTTP\",",
                "-    \"name\" : \"httpManagement\",",
                "-    \"httpBasicAuthenticationEnabled\" : true",
                "-  } ],",
                "-  \"virtualhostnodes\" : []",
                "+  \"name\": \"${broker.name}\",",
                "+  \"modelVersion\": \"7.0\",",
                "+  \"keystores\": [",
                "+    {",
                "+      \"name\": \"systestsKeyStore\",",
                "+      \"storeUrl\": \"classpath:java_broker_keystore.jks\",",
                "+      \"password\": \"password\"",
                "+    }",
                "+  ],",
                "+  \"authenticationproviders\": [",
                "+    {",
                "+      \"name\": \"anon\",",
                "+      \"type\": \"Anonymous\"",
                "+    },",
                "+    {",
                "+      \"name\": \"plain\",",
                "+      \"type\": \"Plain\",",
                "+      \"secureOnlyMechanisms\": [],",
                "+      \"users\": [",
                "+        {",
                "+          \"name\": \"admin\",",
                "+          \"type\": \"managed\",",
                "+          \"password\": \"admin\"",
                "+        },",
                "+        {",
                "+          \"name\": \"guest\",",
                "+          \"type\": \"managed\",",
                "+          \"password\": \"guest\"",
                "+        }",
                "+      ]",
                "+    }",
                "+  ],",
                "+  \"ports\": [",
                "+    {",
                "+      \"name\": \"AMQP\",",
                "+      \"type\": \"AMQP\",",
                "+      \"authenticationProvider\": \"plain\",",
                "+      \"port\": \"0\",",
                "+      \"virtualhostaliases\": [",
                "+        {",
                "+          \"name\": \"defaultAlias\",",
                "+          \"type\": \"defaultAlias\"",
                "+        },",
                "+        {",
                "+          \"name\": \"hostnameAlias\",",
                "+          \"type\": \"hostnameAlias\"",
                "+        },",
                "+        {",
                "+          \"name\": \"nameAlias\",",
                "+          \"type\": \"nameAlias\"",
                "+        }",
                "+      ]",
                "+    },",
                "+    {",
                "+      \"name\": \"ANONYMOUS_AMQP\",",
                "+      \"type\": \"AMQP\",",
                "+      \"authenticationProvider\": \"anon\",",
                "+      \"port\": \"0\",",
                "+      \"virtualhostaliases\": [",
                "+        {",
                "+          \"name\": \"defaultAlias\",",
                "+          \"type\": \"defaultAlias\",",
                "+          \"durable\": true",
                "+        },",
                "+        {",
                "+          \"name\": \"hostnameAlias\",",
                "+          \"type\": \"hostnameAlias\",",
                "+          \"durable\": true",
                "+        },",
                "+        {",
                "+          \"name\": \"nameAlias\",",
                "+          \"type\": \"nameAlias\",",
                "+          \"durable\": true",
                "+        }",
                "+      ]",
                "+    },",
                "+    {",
                "+      \"name\": \"HTTP\",",
                "+      \"authenticationProvider\": \"plain\",",
                "+      \"keyStore\": \"systestsKeyStore\",",
                "+      \"port\": \"0\",",
                "+      \"protocols\": [",
                "+        \"HTTP\"",
                "+      ],",
                "+      \"transports\": [",
                "+        \"TCP\", \"SSL\"",
                "+      ],",
                "+      \"virtualhostaliases\": [",
                "+        {",
                "+          \"name\": \"nameAlias\",",
                "+          \"type\": \"nameAlias\"",
                "+        }",
                "+      ]",
                "+    }",
                "+  ],",
                "+  \"plugins\": [",
                "+    {",
                "+      \"type\": \"MANAGEMENT-HTTP\",",
                "+      \"name\": \"httpManagement\",",
                "+      \"httpBasicAuthenticationEnabled\": true",
                "+    }",
                "+  ],",
                "+  \"virtualhostnodes\": []",
                " }"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "04870bed255c16e025cfd7f398f64ba44f575b04",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515945145,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor BrokerClosesClientConnectionTest Fixed bug in ManagementNode that prevents the querying of a associated configured object by id.",
            "diff": [
                "diff --git a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "index 045c66fdc4..c9c067a427 100644",
                "--- a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "+++ b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "@@ -932,12 +932,14 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "             {",
                "-                if(ancestorCategories.contains(entry.getKey()))",
                "+                @SuppressWarnings(\"unchecked\")",
                "+                ConfiguredObjectOperation<ConfiguredObject<?>> operation =",
                "+                        (ConfiguredObjectOperation<ConfiguredObject<?>>) entry.getValue();",
                "+",
                "+                final Class<?> returnType = operation.getReturnType();",
                "+                if (clazz.isAssignableFrom(returnType) || ancestorCategories.contains(returnType))",
                "                 {",
                "                     @SuppressWarnings(\"unchecked\")",
                "-                    ConfiguredObjectOperation<ConfiguredObject<?>> operation =",
                "-                            (ConfiguredObjectOperation<ConfiguredObject<?>>) entry.getValue();",
                "-                    @SuppressWarnings(\"unchecked\")",
                "                     Collection<? extends ConfiguredObject> associated =",
                "                             (Collection<? extends ConfiguredObject>) operation",
                "-                                                                          .perform(_managedObject,",
                "-                                                                                   Collections.<String, Object>emptyMap());",
                "+                                    .perform(_managedObject,",
                "+                                             Collections.emptyMap());",
                "                     ConfiguredObject<?> object = findDescendantById(clazz, id,",
                "@@ -945,3 +947,3 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "                                                                     associated);",
                "-                    if(object != null)",
                "+                    if (object != null)",
                "                     {",
                "@@ -950,2 +952,25 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "                 }",
                "+                else if (returnsCollectionOfConfiguredObjects(operation))",
                "+                {",
                "+                    @SuppressWarnings(\"unchecked\")",
                "+                    Class<? extends ConfiguredObject> associatedChildCategory =",
                "+                            getCollectionMemberType((ParameterizedType) operation.getGenericReturnType());",
                "+",
                "+                    if (clazz.isAssignableFrom(associatedChildCategory)",
                "+                        || ancestorCategories.contains(associatedChildCategory))",
                "+                    {",
                "+                        @SuppressWarnings(\"unchecked\")",
                "+                        Collection<? extends ConfiguredObject> associated =",
                "+                                (Collection<? extends ConfiguredObject>) operation",
                "+                                        .perform(_managedObject,",
                "+                                                 Collections.emptyMap());",
                "+                        ConfiguredObject<?> object = findDescendantById(clazz, id,",
                "+                                                                        entry.getKey(),",
                "+                                                                        associated);",
                "+                        if (object != null)",
                "+                        {",
                "+                            return object;",
                "+                        }",
                "+                    }",
                "+                }",
                "             }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 821fe48be7..78511ee4c7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -85,2 +85,5 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "+// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+",
                " // passwd script is a Qpid Broker-J specific command line tool"
            ],
            "changed_files": [
                "broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "440824f39d6bab4aa90706db0cceb25ddc7252da",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523622949,
            "hunks": 4,
            "message": "QPID-8158: [Broker-J] [System Tests] Fix issue with creation of folder test.output.dir_UNDEFINED by logback when variable test.output.dir is not defined",
            "diff": [
                "diff --git a/qpid-test-utils/src/main/resources/logback.xml b/qpid-test-utils/src/main/resources/logback.xml",
                "index 9e188f53b2..c311b2ae22 100644",
                "--- a/qpid-test-utils/src/main/resources/logback.xml",
                "+++ b/qpid-test-utils/src/main/resources/logback.xml",
                "@@ -31,3 +31,3 @@",
                "             <appender name=\"FILE-${classQualifiedTestName}\" class=\"ch.qos.logback.core.FileAppender\">",
                "-                <File>${test.output.dir}${file.separator}TEST-${classQualifiedTestName}.txt</File>",
                "+                <File>${test.output.dir:-target${file.separator}surefire-reports}${file.separator}TEST-${classQualifiedTestName}.txt</File>",
                "                 <Append>False</Append>",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "index 350a43193b..353dd0e9e8 100644",
                "--- a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "@@ -87,3 +87,3 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "     private static final String SYSTEST_PROPERTY_INITIAL_CONFIGURATION_LOCATION = \"qpid.initialConfigurationLocation\";",
                "-    private static final String SYSTEST_PROPERTY_BUILD_CLASSPATH_FILE = \"qpid.systests.build.classpath.file\";",
                "+    static final String SYSTEST_PROPERTY_BUILD_CLASSPATH_FILE = \"qpid.systests.build.classpath.file\";",
                "     private static final String AMQP_QUEUE_TYPE = \"org.apache.qpid.Queue\";",
                "@@ -737,2 +737,3 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "         jvmArguments.add(\"-Djava.io.tmpdir=\" + escape(System.getProperty(\"java.io.tmpdir\")));",
                "+        jvmArguments.add(\"-Dlogback.configurationFile=default-broker-logback.xml\");",
                "         jvmArguments.add(\"-Dqpid.tests.mms.messagestore.persistence=true\");",
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/resources/default-broker-logback.xml b/systests/qpid-systests-spawn-admin/src/main/resources/default-broker-logback.xml",
                "new file mode 100644",
                "index 0000000000..e489e546cd",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/resources/default-broker-logback.xml",
                "@@ -0,0 +1,24 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<configuration off=\"true\">",
                "+    <statusListener class=\"ch.qos.logback.core.status.OnConsoleStatusListener\" />",
                "+    <root level=\"off\"/>",
                "+</configuration>"
            ],
            "changed_files": [
                "qpid-test-utils/src/main/resources/logback.xml",
                "systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "systests/qpid-systests-spawn-admin/src/main/resources/default-broker-logback.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: default",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "91eb1cb224e3cbff8646aa81e08114f01fa1e936",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518443698,
            "hunks": 10,
            "message": "QPID-8038: [Broker-J] Add AMQP 1.0 idle and protocol header timeout protocol tests, eliminating the old systems tests built using pieces of the old client",
            "diff": [
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 5333c7a2a5..bc45318093 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -37,2 +37,6 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -51,4 +55,4 @@ import org.apache.qpid.server.SystemLauncherListener;",
                " import org.apache.qpid.server.logging.logback.LogbackLoggingSystemLauncherListener;",
                "+import org.apache.qpid.server.model.Broker;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "-import org.apache.qpid.server.model.Container;",
                " import org.apache.qpid.server.model.Exchange;",
                "@@ -76,3 +80,3 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     private SystemLauncher _systemLauncher;",
                "-    private Container<?> _broker;",
                "+    private Broker<?> _broker;",
                "     private VirtualHostNode<?> _currentVirtualHostNode;",
                "@@ -80,2 +84,3 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "     private boolean _isPersistentStore;",
                "+    private Map<String, String> _preservedContext;",
                "@@ -92,2 +97,4 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "             Map<String, String> context = new HashMap<>();",
                "+            context.put(\"qpid.work_dir\", _currentWorkDirectory);",
                "+            context.put(\"qpid.port.protocol_handshake_timeout\", \"1000000\");",
                "             context.putAll(Arrays.stream((ConfigItem[]) testClass.getAnnotationsByType(ConfigItem.class))",
                "@@ -96,4 +103,2 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "                                                            (name, value) -> value)));",
                "-            context.put(\"qpid.work_dir\", _currentWorkDirectory);",
                "-            context.put(\"qpid.port.protocol_handshake_timeout\", \"1000000\");",
                "@@ -460,3 +465,3 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "-            _broker = _systemConfig.getContainer();",
                "+            _broker = (Broker<?>) _systemConfig.getContainer();",
                "             Collection<Port> ports = _broker.getChildren(Port.class);",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f63c003e36..2d24142f62 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -83,6 +83,2 @@ org.apache.qpid.systest.rest.acl.*",
                "-// CPP Broker does not timeout connections with no activity like the Qpid Broker-J",
                "-org.apache.qpid.transport.ProtocolNegotiationTest#testNoProtocolHeaderSent_BrokerClosesConnection",
                "-org.apache.qpid.transport.ProtocolNegotiationTest#testNoConnectionOpenSent_BrokerClosesConnection",
                "-",
                " // QPID-6000 : Tests Qpid Broker-J specific message compression functionality, and uses the REST API to test it",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 56679639e7..3128524f9c 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -35,5 +35,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#*",
                "-// This test is concerned with the 0-x client establishing a connection to a supported version",
                "-org.apache.qpid.transport.ProtocolNegotiationTest#testProtocolNegotiationFromUnsupportedVersion",
                "-",
                " // Message compression not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "17d4b5607f3fe73b9a37c53d38b7db980cf0b245",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516038608,
            "hunks": 1,
            "message": "QPID-8070:[Broker-J][JDBC Store] Instantiate asynchronous commits executor on open of JDBC message store",
            "diff": [
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "index 5aba1f8ff2..cef4f79499 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "@@ -45,2 +45,3 @@ public abstract class GenericAbstractJDBCMessageStore extends AbstractJDBCMessag",
                "             super.setTablePrefix(getTablePrefix(parent));",
                "+            initMessageStore(parent);",
                "             doOpen(parent);"
            ],
            "changed_files": [
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8070": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "14a53f619628570426466655ef2aa1edac9085a3"
                ],
                [
                    "no-tag",
                    "31d81ffe24b7c928bc855186258f74a8cf890a9a"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8070",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35301e9237d0f99592735ed4342bceaa3a8b163c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522421790,
            "hunks": 42,
            "message": "[maven-release-plugin] prepare release 6.1.6",
            "diff": [
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 81c01a8d1e..c23da1d5ec 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index c3d192cdd4..c573c7f258 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index 09c4d63ea7..d5b7fa7daa 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 98fa487ae7..60c9429e22 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index 34f1487138..573d6661ae 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index 86ca707b6b..48bc954fcb 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index 5b34f92094..388d5c2a4c 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index d201c87639..fa97f70400 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 8d3ff9cad9..59714eb94f 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index 084c4303f7..e0d10756ce 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index 80450ddfc8..850e9b1c71 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index fefdf65779..9bedcd6f9d 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index 02ac3453ba..8ecf959c89 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 371bf42afe..1e98ed1e67 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index e9803c78aa..a5c9caeb52 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index ca072c2219..a0497413a5 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index 7e5a6a475a..c6d72f1481 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index 93297957be..99fd7d13b9 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index e48af755e8..1e5eb703c3 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index dffd08b8ae..d1d1750a65 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/client/example/pom.xml b/client/example/pom.xml",
                "index f317274f70..fb6f67d9c3 100644",
                "--- a/client/example/pom.xml",
                "+++ b/client/example/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 44d979d6cf..0e40348e71 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 9e1089072b..cf592aa698 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index 2ea7490a23..f610cf27f4 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index 2238522ed1..3c057f637b 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-10/pom.xml b/doc/jms-client-0-10/pom.xml",
                "index e67f33ac6f..8fc7236526 100644",
                "--- a/doc/jms-client-0-10/pom.xml",
                "+++ b/doc/jms-client-0-10/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-8/pom.xml b/doc/jms-client-0-8/pom.xml",
                "index c3aceb8dc7..b78ba43015 100644",
                "--- a/doc/jms-client-0-8/pom.xml",
                "+++ b/doc/jms-client-0-8/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 0834d82c7d..222da953a7 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/jca/pom.xml b/jca/pom.xml",
                "index 0c1cb45402..405112a605 100644",
                "--- a/jca/pom.xml",
                "+++ b/jca/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/jca/rar/pom.xml b/jca/rar/pom.xml",
                "index 3e7821c7ea..10f050c1d1 100644",
                "--- a/jca/rar/pom.xml",
                "+++ b/jca/rar/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index 0a39ce39f5..1b6d468384 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index fa0ee858fd..fa55ea6528 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index b08f94c8fa..f42ae160c1 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index a4a8e6ef05..c83415697f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-java-build</artifactId>",
                "-  <version>6.1.6-SNAPSHOT</version>",
                "+  <version>6.1.6</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>6.1.6</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index ed9ffa3512..781e3f7774 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index f8b4aef640..d76b8bc791 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>6.1.6-SNAPSHOT</version>",
                "+  <version>6.1.6</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index 215289d362..6d0c14e6fe 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 897f31b993..b1ea09ef4f 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index b7737774b5..9c5a211ffe 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.6-SNAPSHOT</version>",
                "+        <version>6.1.6</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 4dd7883b3c..dd84badef2 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.6-SNAPSHOT</version>",
                "+    <version>6.1.6</version>",
                "   </parent>"
            ],
            "changed_files": [
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "client/example/pom.xml",
                "client/pom.xml",
                "common/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/jms-client-0-10/pom.xml",
                "doc/jms-client-0-8/pom.xml",
                "doc/pom.xml",
                "jca/pom.xml",
                "jca/rar/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1a28080d0872c2ff9c52f3ef915d83e33fbf4de0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518686750,
            "hunks": 4,
            "message": "QPID-8099: [Broker-J] Make MessageInfo and LogRecord implement ManagedAttributeValue.",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/message/MessageInfo.java b/broker-core/src/main/java/org/apache/qpid/server/message/MessageInfo.java",
                "index 0ad3df0507..055ec231f3 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/message/MessageInfo.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/message/MessageInfo.java",
                "@@ -25,2 +25,3 @@ import java.util.Map;",
                "+import org.apache.qpid.server.model.ManagedAttributeValue;",
                " import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "@@ -28,3 +29,3 @@ import org.apache.qpid.server.model.ManagedAttributeValueType;",
                " @ManagedAttributeValueType",
                "-public interface MessageInfo",
                "+public interface MessageInfo extends ManagedAttributeValue",
                " {",
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "index 0010a0a9d2..8356c20ce8 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.server.logging.logback;",
                " import ch.qos.logback.classic.spi.ILoggingEvent;",
                "+",
                "+import org.apache.qpid.server.model.ManagedAttributeValue;",
                " import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "@@ -26,3 +28,3 @@ import org.apache.qpid.server.model.ManagedAttributeValueType;",
                " @ManagedAttributeValueType",
                "-public class LogRecord",
                "+public class LogRecord implements ManagedAttributeValue",
                " {"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/message/MessageInfo.java",
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8099": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cc65384e0cf0ce88e2ab1ee741cbb1afd8675778"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8099",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5389495771620ea112ad7daad01dd3f4f0ae446c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517579083,
            "hunks": 43,
            "message": "[maven-release-plugin] prepare release 7.0.1",
            "diff": [
                "diff --git a/apache-qpid-broker-j/pom.xml b/apache-qpid-broker-j/pom.xml",
                "index 4dbd615211..8cedb01ef4 100644",
                "--- a/apache-qpid-broker-j/pom.xml",
                "+++ b/apache-qpid-broker-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index d758583b66..8a209b29d3 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 84e06bc964..5e4f9d5dc4 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index 9c46e2de50..de4e7e4840 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 185806c7fb..919cd2affa 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index 4cbd3dfcb0..f6e95bff6a 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index e8400f3f4a..922c2ebee5 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index 62dd588ef0..e111e2719e 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-bdb-store/pom.xml b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "index 89f2a06919..9e9480b2e2 100644",
                "--- a/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-jdbc-store/pom.xml b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "index dc4fe0996a..89f1e64061 100644",
                "--- a/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 7f06e94c32..713a4784d6 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 73d8a319c4..8e6ba1dc67 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index c73c1b20d5..6bd3fdf2fa 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index d284c296db..0abd592bf1 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index 8f44eb7773..daf00adab7 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index d287e0bad7..8791fab4bc 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 8989330750..152eebd49b 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index eff97455f0..e8b30cba5a 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 5ce398c5d0..88c6efa302 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index f75448c46f..02b7bd613e 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index d6b0669ccc..ace3608c65 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index 0da15cc00a..f7c9d39c01 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index cb39235e38..4ddb5d8d9d 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index f16df521da..a1116d42db 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index 1fd556213b..c57daef356 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index b4b2e81d46..7a2d755f46 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "     </parent>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index 53013ce17e..711d112a23 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 738d3a1953..244c722a93 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index 7aca17cdd8..2a41a7c121 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 1287501125..b54ce4268d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-broker-parent</artifactId>",
                "-  <version>7.0.1-SNAPSHOT</version>",
                "+  <version>7.0.1</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>7.0.x</tag>",
                "+    <tag>7.0.1</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 01c208b5ca..0f98455397 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 49fa558808..97d6913638 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>7.0.1-SNAPSHOT</version>",
                "+  <version>7.0.1</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index 923954d48b..0e3be94e4b 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index c213fbd275..64631ff916 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index a41c73bff7..01dfc4c0cf 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index c392cf77ed..6956927bce 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "index 8c3bc87d40..772d8b3e5b 100644",
                "--- a/systests/protocol-tests-core/pom.xml",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index 5b31990fb8..2d17e7536a 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -22,3 +22,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/systests-utils/pom.xml b/systests/systests-utils/pom.xml",
                "index 8022192a93..0f2ff26a64 100644",
                "--- a/systests/systests-utils/pom.xml",
                "+++ b/systests/systests-utils/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 4b988f6fba..48e85faae2 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.1-SNAPSHOT</version>",
                "+        <version>7.0.1</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 19d59cc8e0..1b05a0f157 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.1-SNAPSHOT</version>",
                "+    <version>7.0.1</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-broker-j/pom.xml",
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-core/pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/systests-utils/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-jdbc-store/pom.xml, systests/protocol-tests-amqp-1-0/pom.xml, broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-1-0-bdb-store/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "62d7ae692b47746c42949c2e646f33a966e6a1a1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522417855,
            "hunks": 43,
            "message": "[maven-release-plugin] prepare release 7.0.3",
            "diff": [
                "diff --git a/apache-qpid-broker-j/pom.xml b/apache-qpid-broker-j/pom.xml",
                "index da976ce860..514a2d37de 100644",
                "--- a/apache-qpid-broker-j/pom.xml",
                "+++ b/apache-qpid-broker-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 7d3d26755b..0c0d82196d 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 2a4a2ccf45..8e02b276d3 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index 65abb65f96..edacf99d97 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 510235a49d..ff30ea0e4e 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index a0e296f420..68bf584a9c 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index c98b2a8292..85cbd46162 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index 6ed89e23eb..52a704dfde 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-bdb-store/pom.xml b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "index e0b3245d59..beaca92cc7 100644",
                "--- a/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-jdbc-store/pom.xml b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "index feb0011538..f4bfb85a40 100644",
                "--- a/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 475720691d..3d22b33699 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index c49ecdd138..5f352f01f0 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index 569756df4e..94fa2a40b7 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index c8152e5ac4..bca4a5ae3a 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index ef23126af2..a7b180169e 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index 9e3c366c1c..c2f8ad90f5 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 8b4f8b4381..01e660d557 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index 1dd30de8d4..d0669d7a6d 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 6d7c6ac7cd..83db87a3ab 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index cb80f145b2..e7a0d92646 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index 9fe1be276a..edd6d58998 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index 67665b61cd..2d4c9ffb8e 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index eb328d0d58..a5b71e679e 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index 01ec0b573e..bbc41f66e7 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index b57e14ef9f..1bb2c79721 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 90164281c7..3692e41d99 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "     </parent>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index 376a146547..28e7a65383 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 3838a63fd7..f2da851632 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index 0ea1da5566..e99bdc263b 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 23169dfa09..614dc3875e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-broker-parent</artifactId>",
                "-  <version>7.0.3-SNAPSHOT</version>",
                "+  <version>7.0.3</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>7.0.x</tag>",
                "+    <tag>7.0.3</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 167a5956bd..ca19fa166c 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index d6bc417e1b..8c9a9965fe 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>7.0.3-SNAPSHOT</version>",
                "+  <version>7.0.3</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index ddcc470a96..f01eb0a007 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index b77e6b040a..c3e0d24e12 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 73f9a0ef0b..e04efb17c6 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index d34d65444f..c99582435e 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "index 7a15fad5b5..885cd1280b 100644",
                "--- a/systests/protocol-tests-core/pom.xml",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index fe94956823..770b0271c4 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -22,3 +22,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/systests-utils/pom.xml b/systests/systests-utils/pom.xml",
                "index 8c525745ea..3879a99c21 100644",
                "--- a/systests/systests-utils/pom.xml",
                "+++ b/systests/systests-utils/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 3ac7b79833..33bf330315 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.3-SNAPSHOT</version>",
                "+        <version>7.0.3</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 7e3b4b85f8..761eac6274 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.3-SNAPSHOT</version>",
                "+    <version>7.0.3</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-broker-j/pom.xml",
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-core/pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/systests-utils/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-jdbc-store/pom.xml, systests/protocol-tests-amqp-1-0/pom.xml, broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-1-0-bdb-store/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "963a94da64e6babfe94eca0873f2a13debe6b0fc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519736429,
            "hunks": 43,
            "message": "[maven-release-plugin] prepare release 7.0.2",
            "diff": [
                "diff --git a/apache-qpid-broker-j/pom.xml b/apache-qpid-broker-j/pom.xml",
                "index eb74a9cb8a..436d328a36 100644",
                "--- a/apache-qpid-broker-j/pom.xml",
                "+++ b/apache-qpid-broker-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index e16afd102e..1c55291bb0 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 72c2eac9ae..140f1b1620 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index f1b1e453e2..b1ce564b8d 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 6ca8c545e9..2a4e8e4c01 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index cc870f3a98..d132e11e5a 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index f9de812eb2..2321f322af 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index 7dd1c7451f..eb96609829 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-bdb-store/pom.xml b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "index e95fc23df3..fa2c338387 100644",
                "--- a/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-jdbc-store/pom.xml b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "index 46881a0243..1eed3ee8dd 100644",
                "--- a/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../..</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 36f8bfb32c..7f50de81a3 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 0f560a5a55..6f4c79d298 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index a8e3a447e8..5853251acd 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index accca6d80a..f9a61a6ef8 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index 5d9c7289eb..10fe947140 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index 9922c21bfd..354e80de01 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 48e9497ae9..b3e9e17ea0 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index bb746b403d..319ea9030d 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 305e7b0905..56125cec64 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index f4ce5934ee..77c26a5222 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index 0cbb46d017..8798ece02b 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index 1e40130f38..8a9d89be63 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index 041f0563f3..1957e28eaa 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index 31b6ed9dac..54f8a12f00 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index 5b89e5376d..14389c945b 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 2592ca8d62..ba0fb14d08 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-broker-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "     </parent>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index fabbccddcd..6657dc78f1 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 7824adaad0..f1a6073a8d 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index e875e20eea..836a8315cf 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 9dde784065..e470eecf6a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-broker-parent</artifactId>",
                "-  <version>7.0.2-SNAPSHOT</version>",
                "+  <version>7.0.2</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>7.0.x</tag>",
                "+    <tag>7.0.2</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index c0ed0b3116..e044a5609f 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 4c5b66fe5f..6765cc27ce 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>7.0.2-SNAPSHOT</version>",
                "+  <version>7.0.2</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index e2860be2d9..f741b35665 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index cd662c8efc..833483b589 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index bc2380035c..b2a0635f83 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 13e40ebfa8..5a9c577efe 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "index fe82bc4019..151083725c 100644",
                "--- a/systests/protocol-tests-core/pom.xml",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index cee6d2d7fc..7ef5fb421d 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -22,3 +22,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/systests/systests-utils/pom.xml b/systests/systests-utils/pom.xml",
                "index 73ebaa38b5..a9fab54631 100644",
                "--- a/systests/systests-utils/pom.xml",
                "+++ b/systests/systests-utils/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <artifactId>qpid-systests-parent</artifactId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "         <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 65efea9cec..c987f8cb37 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>7.0.2-SNAPSHOT</version>",
                "+        <version>7.0.2</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index a1a668eb88..b047106b57 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-broker-parent</artifactId>",
                "-    <version>7.0.2-SNAPSHOT</version>",
                "+    <version>7.0.2</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-broker-j/pom.xml",
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-bdb-store/pom.xml",
                "broker-plugins/amqp-1-0-jdbc-store/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-core/pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/systests-utils/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-jdbc-store/pom.xml, systests/protocol-tests-amqp-1-0/pom.xml, broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-1-0-bdb-store/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, amqp",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "912ac84dcf0bc3df877b45e626242becb25d00cb",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522411331,
            "hunks": 9,
            "message": "QPID-8147: [Broker-J] Report received bytes as part of operational log message for unsupported protocol header",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/PortMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/PortMessages.java",
                "index c331c8fd61..a3add218cf 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/PortMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/PortMessages.java",
                "@@ -625,3 +625,3 @@ public class PortMessages",
                "      * Log a Port message of the Format:",
                "-     * <pre>PRT-1007 : Unsupported protocol header received, replying with {0}</pre>",
                "+     * <pre>PRT-1007 : Unsupported protocol header received {0}, replying with {1}</pre>",
                "      * Optional values are contained in [square brackets] and are numbered",
                "@@ -630,3 +630,3 @@ public class PortMessages",
                "      */",
                "-    public static LogMessage UNSUPPORTED_PROTOCOL_HEADER(String param1)",
                "+    public static LogMessage UNSUPPORTED_PROTOCOL_HEADER(String param1, String param2)",
                "     {",
                "@@ -634,3 +634,3 @@ public class PortMessages",
                "-        final Object[] messageArguments = {param1};",
                "+        final Object[] messageArguments = {param1, param2};",
                "         // Create a new MessageFormat to ensure thread safety.",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Port_logmessages.properties b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Port_logmessages.properties",
                "index 6d338a7f14..043721fcdd 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Port_logmessages.properties",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Port_logmessages.properties",
                "@@ -28,3 +28,3 @@ DELETE = PRT-1006 : Delete {0} Port \"{1}\"",
                "-UNSUPPORTED_PROTOCOL_HEADER = PRT-1007 : Unsupported protocol header received, replying with {0}",
                "+UNSUPPORTED_PROTOCOL_HEADER = PRT-1007 : Unsupported protocol header received {0}, replying with {1}",
                " CONNECTION_REJECTED_CLOSED = PRT-1008 : Connection from {0} rejected. Port closed.",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/MultiVersionProtocolEngine.java b/broker-core/src/main/java/org/apache/qpid/server/transport/MultiVersionProtocolEngine.java",
                "index 25337770f4..56a0fa6f66 100755",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/MultiVersionProtocolEngine.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/MultiVersionProtocolEngine.java",
                "@@ -48,2 +48,3 @@ import org.apache.qpid.server.security.ManagedPeerCertificateTrustStore;",
                " import org.apache.qpid.server.transport.network.Ticker;",
                "+import org.apache.qpid.server.transport.util.Functions;",
                " import org.apache.qpid.server.util.Action;",
                "@@ -464,3 +465,4 @@ public class MultiVersionProtocolEngine implements ProtocolEngine",
                "                     _broker.getEventLogger().message(new PortLogSubject(_port),",
                "-                                                     PortMessages.UNSUPPORTED_PROTOCOL_HEADER(supportedReplyVersion.toString()));",
                "+                                                     PortMessages.UNSUPPORTED_PROTOCOL_HEADER(Functions.str(headerBytes),",
                "+                                                                                              supportedReplyVersion.toString()));",
                "diff --git a/broker-core/src/velocity/java/org/apache/qpid/server/logging/GenerateLogMessages.java b/broker-core/src/velocity/java/org/apache/qpid/server/logging/GenerateLogMessages.java",
                "index 3df084c72a..ad0f6e9acc 100644",
                "--- a/broker-core/src/velocity/java/org/apache/qpid/server/logging/GenerateLogMessages.java",
                "+++ b/broker-core/src/velocity/java/org/apache/qpid/server/logging/GenerateLogMessages.java",
                "@@ -470,3 +470,3 @@ public class GenerateLogMessages",
                "                 int typeIndex = parametersString[index].indexOf(\",\");",
                "-",
                "+                int typeIndexEnd = parametersString[index].indexOf(\"}\", typeIndex);",
                "                 // The parameter type",
                "@@ -475,3 +475,3 @@ public class GenerateLogMessages",
                "                 //Be default all types are Strings",
                "-                if (typeIndex == -1)",
                "+                if (typeIndex == -1 || typeIndexEnd == -1)",
                "                 {",
                "@@ -485,3 +485,2 @@ public class GenerateLogMessages",
                "                     // Only check the text inside the braces '{}'",
                "-                    int typeIndexEnd = parametersString[index].indexOf(\"}\", typeIndex);",
                "                     String typeString = parametersString[index].substring(typeIndex, typeIndexEnd);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/PortMessages.java",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/Port_logmessages.properties",
                "broker-core/src/main/java/org/apache/qpid/server/transport/MultiVersionProtocolEngine.java",
                "broker-core/src/velocity/java/org/apache/qpid/server/logging/GenerateLogMessages.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8147": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e09d58b9b680cd85111cf2d3ae6e273c87406b89"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, version, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8147",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c382bed0265b459cbc3d6f1f0dc3fa4c50cee2a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515582169,
            "hunks": 1,
            "message": "QPID-8042: Fix defect that prevents pipelining with header within protocol tests Revert saslSuccessfulAuthenticationWithPipelinedFrames to a readable style.",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "index 5d40447085..fae1ce4f52 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -53,2 +53,11 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         }",
                "+        else if (msg instanceof ByteBuf)",
                "+        {",
                "+            ByteBuf buf = (ByteBuf) msg;",
                "+            final ByteBuffer bytes = ByteBuffer.allocate(buf.readableBytes());",
                "+            buf.readBytes(bytes.array());",
                "+            buf.release();",
                "+",
                "+            send(ctx, bytes, promise);",
                "+        }",
                "         else"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d8391ff7f5946e46c5c3840c628d80debe9e433"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, defect",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "88fd1245c6b4ef4fc47314079f24329f5fd0646e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511176782,
            "hunks": 1,
            "message": "QPID-8042: [Broker-J][AMQP 1.0] Add protocol test for pipelined connection open Cherry picked from 9daed1e",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "index 238c0a54a6..2390227f75 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -94,2 +94,10 @@ public abstract class Interaction<I extends Interaction>",
                "         sync();",
                "+",
                "+        if (_latestResponse.getBody() == null)",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getClass()));",
                "+        }",
                "+",
                "         if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1322a6589a886a2c8378c5148f6f811af4e89c4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516545026,
            "hunks": 5,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Create empty HTTP system test suite",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index aa82bf00f8..dadc1c6cfc 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -198,2 +198,3 @@",
                "     <module>systests/qpid-systests-jms_2.0</module>",
                "+    <module>systests/qpid-systests-http-management</module>",
                "     <module>systests/protocol-tests-core</module>",
                "diff --git a/systests/qpid-systests-http-management/pom.xml b/systests/qpid-systests-http-management/pom.xml",
                "new file mode 100644",
                "index 0000000000..c0e29bb2c8",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/pom.xml",
                "@@ -0,0 +1,127 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>qpid-systests-http</artifactId>",
                "+    <name>Apache Qpid Broker-J HTTP system tests</name>",
                "+    <description>Apache Qpid Broker-J HTTP system tests</description>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-8-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-10-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-test-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-logging-logback</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-memory-store</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-management-http</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "+            <optional>true</optional>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+       <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>test</scope>",
                "+       </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-http-management-tests.json</qpid.initialConfigurationLocation>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "new file mode 100644",
                "index 0000000000..e71da8678b",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "@@ -0,0 +1,362 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.rest;",
                "+",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.HttpURLConnection;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.net.URLEncoder;",
                "+import java.util.HashMap;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import javax.xml.bind.DatatypeConverter;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import org.junit.Assert;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                "+",
                "+public class RestTestHelper",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(RestTestHelper.class);",
                "+",
                "+    private static final TypeReference<List<LinkedHashMap<String, Object>>> TYPE_LIST_OF_LINKED_HASH_MAPS = new TypeReference<List<LinkedHashMap<String, Object>>>()",
                "+    {",
                "+    };",
                "+    private static final TypeReference<LinkedHashMap<String, Object>> TYPE_LINKED_HASH_MAPS = new TypeReference<LinkedHashMap<String, Object>>()",
                "+    {",
                "+    };",
                "+",
                "+    private static final String API_BASE = \"/api/latest/\";",
                "+    private final BrokerAdmin _admin;",
                "+    private final int _httpPort;",
                "+    private final String _username;",
                "+    private final String _password;",
                "+",
                "+    private final int _connectTimeout = Integer.getInteger(\"qpid.resttest_connection_timeout\", 30000);",
                "+",
                "+    private String _acceptEncoding;",
                "+    private boolean _useSsl = false;",
                "+",
                "+    public RestTestHelper(BrokerAdmin admin)",
                "+    {",
                "+        _admin = admin;",
                "+        _httpPort = _admin.getBrokerAddress(BrokerAdmin.PortType.HTTP).getPort();",
                "+        _username = admin.getValidUsername();",
                "+        _password = admin.getValidPassword();",
                "+    }",
                "+",
                "+    public int getHttpPort()",
                "+    {",
                "+        return _httpPort;",
                "+    }",
                "+",
                "+    private String getHostName()",
                "+    {",
                "+        return \"localhost\";",
                "+    }",
                "+",
                "+    private String getProtocol()",
                "+    {",
                "+        return _useSsl ? \"https\" : \"http\";",
                "+    }",
                "+",
                "+    public String getManagementURL()",
                "+    {",
                "+        return getProtocol() + \"://\" + getHostName() + \":\" + getHttpPort();",
                "+    }",
                "+",
                "+    public URL getManagementURL(String path) throws MalformedURLException",
                "+    {",
                "+        return new URL(getManagementURL() + path);",
                "+    }",
                "+",
                "+    public HttpURLConnection openManagementConnection(String path, String method) throws IOException",
                "+    {",
                "+        if (!path.startsWith(\"/\"))",
                "+        {",
                "+            path = API_BASE + path;",
                "+        }",
                "+        URL url = getManagementURL(path);",
                "+        HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();",
                "+        httpCon.setConnectTimeout(_connectTimeout);",
                "+",
                "+",
                "+        if(_username != null)",
                "+        {",
                "+            String encoded = DatatypeConverter.printBase64Binary((_username + \":\" + _password).getBytes(UTF_8));",
                "+            httpCon.setRequestProperty(\"Authorization\", \"Basic \" + encoded);",
                "+        }",
                "+",
                "+        if (_acceptEncoding != null && !\"\".equals(_acceptEncoding))",
                "+        {",
                "+            httpCon.setRequestProperty(\"Accept-Encoding\", _acceptEncoding);",
                "+        }",
                "+",
                "+        httpCon.setDoOutput(true);",
                "+        httpCon.setRequestMethod(method);",
                "+        return httpCon;",
                "+    }",
                "+",
                "+    public List<Map<String, Object>> readJsonResponseAsList(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        List<Map<String, Object>> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LIST_OF_LINKED_HASH_MAPS);",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public Map<String, Object> readJsonResponseAsMap(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        Map<String, Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LINKED_HASH_MAPS);",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public <T> T readJsonResponse(HttpURLConnection connection, Class<T> valueType) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+",
                "+        return mapper.readValue(new ByteArrayInputStream(data), valueType);",
                "+    }",
                "+",
                "+    private byte[] readConnectionInputStream(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        InputStream is = connection.getInputStream();",
                "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "+        byte[] buffer = new byte[1024];",
                "+        int len = -1;",
                "+        while ((len = is.read(buffer)) != -1)",
                "+        {",
                "+            baos.write(buffer, 0, len);",
                "+        }",
                "+        if (LOGGER.isTraceEnabled())",
                "+        {",
                "+            LOGGER.trace(\"RESPONSE:\" + new String(baos.toByteArray(), UTF_8));",
                "+        }",
                "+        return baos.toByteArray();",
                "+    }",
                "+",
                "+    private void writeJsonRequest(HttpURLConnection connection, Object data) throws IOException",
                "+    {",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        mapper.writeValue(connection.getOutputStream(), data);",
                "+    }",
                "+",
                "+    public Map<String, Object> find(String name, Object value, List<Map<String, Object>> data)",
                "+    {",
                "+        if (data == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        for (Map<String, Object> map : data)",
                "+        {",
                "+            Object mapValue = map.get(name);",
                "+            if (value.equals(mapValue))",
                "+            {",
                "+                return map;",
                "+            }",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public Map<String, Object> find(Map<String, Object> searchAttributes, List<Map<String, Object>> data)",
                "+    {",
                "+        for (Map<String, Object> map : data)",
                "+        {",
                "+            boolean equals = true;",
                "+            for (Map.Entry<String, Object> entry : searchAttributes.entrySet())",
                "+            {",
                "+                Object mapValue = map.get(entry.getKey());",
                "+                if (!entry.getValue().equals(mapValue))",
                "+                {",
                "+                    equals = false;",
                "+                    break;",
                "+                }",
                "+            }",
                "+            if (equals)",
                "+            {",
                "+                return map;",
                "+            }",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public Map<String, Object> getJsonAsSingletonList(String path) throws IOException",
                "+    {",
                "+        List<Map<String, Object>> response = getJsonAsList(path);",
                "+",
                "+        Assert.assertNotNull(\"Response cannot be null\", response);",
                "+        Assert.assertEquals(\"Unexpected response from \" + path, 1, response.size());",
                "+        return response.get(0);",
                "+    }",
                "+",
                "+    public Map<String, Object> postDataToPathAndGetObject(String path, Map<String, Object> data) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "+        connection.connect();",
                "+        writeJsonRequest(connection, data);",
                "+        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public List<Map<String, Object>> getJsonAsList(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        List<Map<String, Object>> response = readJsonResponseAsList(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public List<Object> getJsonAsSimpleList(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        List<Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), new TypeReference<List<Object>>()",
                "+        {",
                "+        });",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public Map<String, Object> getJsonAsMap(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public <T> T getJson(String path, final Class<T> valueType) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        return readJsonResponse(connection, valueType);",
                "+    }",
                "+",
                "+    public <T> T postJson(String path, final Object data , final Class<T> valueType) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "+        connection.connect();",
                "+        writeJsonRequest(connection, data);",
                "+        return readJsonResponse(connection, valueType);",
                "+    }",
                "+",
                "+",
                "+    public int submitRequest(String url, String method, Object data) throws IOException",
                "+    {",
                "+        return submitRequest(url, method, data, null);",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method, Object data, Map<String, List<String>> responseHeadersToCapture) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(url, method);",
                "+        if (data != null)",
                "+        {",
                "+            writeJsonRequest(connection, data);",
                "+        }",
                "+        int responseCode = connection.getResponseCode();",
                "+        if (responseHeadersToCapture!= null)",
                "+        {",
                "+            responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+        }",
                "+        connection.disconnect();",
                "+        return responseCode;",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method) throws IOException",
                "+    {",
                "+        return submitRequest(url, method, (byte[])null);",
                "+    }",
                "+",
                "+    public void submitRequest(String url, String method, Object data, int expectedResponseCode) throws IOException",
                "+    {",
                "+        Map<String, List<String>> headers = new HashMap<>();",
                "+        int responseCode = submitRequest(url, method, data, headers);",
                "+        Assert.assertEquals(\"Unexpected response code from \" + method + \" \" + url , expectedResponseCode, responseCode);",
                "+        if (expectedResponseCode == 201)",
                "+        {",
                "+            List<String> location = headers.get(\"Location\");",
                "+            Assert.assertTrue(\"Location is not returned by REST create request\", location != null && location.size() == 1);",
                "+        }",
                "+    }",
                "+",
                "+    public void submitRequest(String url, String method, int expectedResponseCode) throws IOException",
                "+    {",
                "+        submitRequest(url, method, null, expectedResponseCode);",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method, byte[] parameters) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(url, method);",
                "+        if (parameters != null)",
                "+        {",
                "+            OutputStream os = connection.getOutputStream();",
                "+            os.write(parameters);",
                "+            os.flush();",
                "+        }",
                "+        int responseCode = connection.getResponseCode();",
                "+        connection.disconnect();",
                "+        return responseCode;",
                "+    }",
                "+",
                "+    public byte[] getBytes(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        return readConnectionInputStream(connection);",
                "+    }",
                "+",
                "+    public String encode(String value, String encoding) throws UnsupportedEncodingException",
                "+    {",
                "+        return URLEncoder.encode(value, encoding).replace(\"+\", \"%20\");",
                "+    }",
                "+",
                "+    public String getAcceptEncoding()",
                "+    {",
                "+        return _acceptEncoding;",
                "+    }",
                "+",
                "+    public void setAcceptEncoding(String acceptEncoding)",
                "+    {",
                "+        _acceptEncoding = acceptEncoding;",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "new file mode 100644",
                "index 0000000000..ca8922d73e",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "@@ -0,0 +1,88 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  }, {",
                "+    \"name\": \"HTTP\",",
                "+    \"authenticationProvider\": \"plain\",",
                "+    \"port\": \"0\",",
                "+    \"protocols\": [",
                "+      \"HTTP\"",
                "+    ]",
                "+    }],",
                "+  \"plugins\" : [ {",
                "+    \"type\" : \"MANAGEMENT-HTTP\",",
                "+    \"name\" : \"httpManagement\",",
                "+    \"httpBasicAuthenticationEnabled\" : true",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "index 3b57431178..3ec35adc76 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "@@ -64,3 +64,4 @@ public interface BrokerAdmin extends Pluggable",
                "         ANONYMOUS_AMQPWS,",
                "-        AMQP",
                "+        AMQP,",
                "+        HTTP",
                "     }"
            ],
            "changed_files": [
                "pom.xml",
                "systests/qpid-systests-http-management/pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d20599e222727ce1c58e11fd9c398a9a22ddf250",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522320295,
            "hunks": 26,
            "message": "QPID-8143 : Properly validate @ManagedAttributeValueTypes, and allow for factory methods",
            "diff": [
                "diff --git a/broker-codegen/src/main/java/org/apache/qpid/server/model/validation/ManagedAttributeValueTypeValidator.java b/broker-codegen/src/main/java/org/apache/qpid/server/model/validation/ManagedAttributeValueTypeValidator.java",
                "index 9c692e1646..c0272ebd3c 100644",
                "--- a/broker-codegen/src/main/java/org/apache/qpid/server/model/validation/ManagedAttributeValueTypeValidator.java",
                "+++ b/broker-codegen/src/main/java/org/apache/qpid/server/model/validation/ManagedAttributeValueTypeValidator.java",
                "@@ -25,2 +25,3 @@ import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Set;",
                "@@ -31,2 +32,4 @@ import javax.annotation.processing.SupportedAnnotationTypes;",
                " import javax.lang.model.SourceVersion;",
                "+import javax.lang.model.element.AnnotationMirror;",
                "+import javax.lang.model.element.AnnotationValue;",
                " import javax.lang.model.element.Element;",
                "@@ -34,2 +37,3 @@ import javax.lang.model.element.ElementKind;",
                " import javax.lang.model.element.ExecutableElement;",
                "+import javax.lang.model.element.Modifier;",
                " import javax.lang.model.element.Name;",
                "@@ -64,4 +68,11 @@ public class ManagedAttributeValueTypeValidator extends AbstractProcessor",
                "         {",
                "-            checkAnnotationIsOnInterface(annotationElement, e);",
                "-            checkAllMethodsAreAccessors(e);",
                "+            boolean isAbstract = isAbstract(annotationElement, e);",
                "+            if(!isAbstract)",
                "+            {",
                "+                checkAnnotationIsOnInterface(annotationElement, e);",
                "+            }",
                "+            if(!isContent(e))",
                "+            {",
                "+                checkAllMethodsAreAccessors(e, isAbstract);",
                "+            }",
                "         }",
                "@@ -70,8 +81,13 @@ public class ManagedAttributeValueTypeValidator extends AbstractProcessor",
                "-    private void checkAllMethodsAreAccessors(final Element e)",
                "+    private boolean isContent(final Element e)",
                "     {",
                "-        checkAllMethodsAreAccessors(e, new HashSet<Element>());",
                "+        return e.equals(processingEnv.getElementUtils().getTypeElement(\"org.apache.qpid.server.model.Content\"));",
                "     }",
                "-    private void checkAllMethodsAreAccessors(final Element e, Set<Element> checked)",
                "+    private void checkAllMethodsAreAccessors(final Element e, final boolean isAbstract)",
                "+    {",
                "+        checkAllMethodsAreAccessors(e, new HashSet<Element>(), isAbstract);",
                "+    }",
                "+",
                "+    private void checkAllMethodsAreAccessors(final Element e, Set<Element> checked, final boolean isAbstract)",
                "     {",
                "@@ -93,8 +109,5 @@ public class ManagedAttributeValueTypeValidator extends AbstractProcessor",
                "                 AttributeAnnotationValidator.isValidType(processingEnv, methodElement.getReturnType(), false);",
                "-                String methodName = methodElement.getSimpleName().toString();",
                "-",
                "-                if (methodName.length() < 3",
                "-                    || (methodName.length() < 4 && !methodName.startsWith(\"is\"))",
                "-                    || !(methodName.startsWith(\"is\") || methodName.startsWith(\"get\") || methodName.startsWith(\"has\"))",
                "-                    || !methodElement.getTypeParameters().isEmpty() )",
                "+                if(isNotAccessorMethod(methodElement)",
                "+                   && !isValidFactoryMethod(methodElement, e, isAbstract)",
                "+                   && methodElement.getKind() != ElementKind.CONSTRUCTOR)",
                "                 {",
                "@@ -112,7 +125,42 @@ public class ManagedAttributeValueTypeValidator extends AbstractProcessor",
                "         {",
                "-            checkAllMethodsAreAccessors(processingEnv.getTypeUtils().asElement(mirror), checked);",
                "+            checkAllMethodsAreAccessors(processingEnv.getTypeUtils().asElement(mirror), checked, isAbstract);",
                "+        }",
                "+    }",
                "+",
                "+    private boolean isNotAccessorMethod(final ExecutableElement methodElement)",
                "+    {",
                "+        String methodName = methodElement.getSimpleName().toString();",
                "+        return methodName.length() < 3",
                "+                || (methodName.length() < 4 && !methodName.startsWith(\"is\"))",
                "+                || !(methodName.startsWith(\"is\") || methodName.startsWith(\"get\") || methodName.startsWith(\"has\"))",
                "+                || !methodElement.getTypeParameters().isEmpty();",
                "+    }",
                "+",
                "+    private boolean isValidFactoryMethod(final ExecutableElement methodElement,",
                "+                                         final Element typeElement,",
                "+                                         final boolean isAbstract)",
                "+    {",
                "+",
                "+        if (!isAbstract",
                "+            && methodElement.getSimpleName().toString().equals(\"newInstance\")",
                "+            && methodElement.getModifiers().contains(Modifier.STATIC)",
                "+            && processingEnv.getTypeUtils().asElement(methodElement.getReturnType()) != null",
                "+            && processingEnv.getTypeUtils().asElement(methodElement.getReturnType()).equals(typeElement)",
                "+            && methodElement.getParameters().size() == 1",
                "+            && processingEnv.getTypeUtils()",
                "+                            .asElement(methodElement.getParameters().iterator().next().asType())",
                "+                            .equals(typeElement))",
                "+        {",
                "+            TypeElement annotationElement = processingEnv.getElementUtils()",
                "+                                                         .getTypeElement(\"org.apache.qpid.server.model.ManagedAttributeValueTypeFactoryMethod\");",
                "+",
                "+            return methodElement.getAnnotationMirrors()",
                "+                                .stream()",
                "+                                .anyMatch(a -> processingEnv.getTypeUtils().isSameType(a.getAnnotationType(),",
                "+                                                                                       annotationElement.asType()));",
                "         }",
                "+        return false;",
                "     }",
                "-    public void checkAnnotationIsOnInterface(final TypeElement annotationElement, final Element e)",
                "+    private void checkAnnotationIsOnInterface(final TypeElement annotationElement, final Element e)",
                "     {",
                "@@ -121,21 +169,47 @@ public class ManagedAttributeValueTypeValidator extends AbstractProcessor",
                "             processingEnv.getMessager()",
                "-                    .printMessage(Diagnostic.Kind.ERROR,",
                "-                                  \"@\"",
                "-                                  + annotationElement.getSimpleName()",
                "-                                  + \" can only be applied to an interface\",",
                "-                                  e",
                "-                                 );",
                "+                         .printMessage(Diagnostic.Kind.ERROR,",
                "+                                       \"@\"",
                "+                                       + annotationElement.getSimpleName()",
                "+                                       + \" can only be applied to an interface\",",
                "+                                       e",
                "+                                      );",
                "         }",
                "-        if(!processingEnv.getTypeUtils().isAssignable(e.asType(), processingEnv.getElementUtils().getTypeElement(MANAGED_ATTRIBUTE_VALUE_CLASS_NAME).asType()))",
                "+        if (!processingEnv.getTypeUtils()",
                "+                          .isAssignable(e.asType(),",
                "+                                        processingEnv.getElementUtils()",
                "+                                                     .getTypeElement(MANAGED_ATTRIBUTE_VALUE_CLASS_NAME)",
                "+                                                     .asType()))",
                "         {",
                "             processingEnv.getMessager()",
                "-                    .printMessage(Diagnostic.Kind.ERROR,",
                "-                                  \"@\"",
                "-                                  + annotationElement.getSimpleName()",
                "-                                  + \" can only be applied to an interface\",",
                "-                                  e",
                "-                                 );",
                "+                         .printMessage(Diagnostic.Kind.ERROR,",
                "+                                       \"@\"",
                "+                                       + annotationElement.getSimpleName()",
                "+                                       + \" can only be applied to an interface which extends \" + MANAGED_ATTRIBUTE_VALUE_CLASS_NAME,",
                "+                                       e",
                "+                                      );",
                "         }",
                "+",
                "     }",
                "+    private boolean isAbstract(final TypeElement annotationElement, final Element typeElement)",
                "+    {",
                "+        for (AnnotationMirror annotation : typeElement.getAnnotationMirrors())",
                "+        {",
                "+            if (annotation.getAnnotationType().asElement().equals(annotationElement))",
                "+            {",
                "+",
                "+                Map<? extends ExecutableElement, ? extends AnnotationValue> annotationValues =",
                "+                        processingEnv.getElementUtils().getElementValuesWithDefaults(annotation);",
                "+                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> element : annotationValues.entrySet())",
                "+                {",
                "+                    if (\"isAbstract\".contentEquals(element.getKey().getSimpleName()))",
                "+                    {",
                "+                        return element.getValue().getValue().equals(Boolean.TRUE);",
                "+                    }",
                "+                }",
                "+                break;",
                "+            }",
                "+        }",
                "+        return false;",
                "+    }",
                " }",
                "diff --git a/broker-codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/broker-codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor",
                "index 8e295cf516..bfc50183b1 100644",
                "--- a/broker-codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor",
                "+++ b/broker-codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor",
                "@@ -27,2 +27,3 @@ org.apache.qpid.server.model.validation.OperationAnnotationValidator",
                " org.apache.qpid.server.model.validation.ContentHeaderAnnotationValidator",
                "+org.apache.qpid.server.model.validation.ManagedAttributeValueTypeValidator",
                " org.apache.qpid.server.protocol.v1_0.CompositeTypeConstructorGenerator",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/LogFileDetails.java b/broker-core/src/main/java/org/apache/qpid/server/logging/LogFileDetails.java",
                "index b5a54809b2..013eed0fb5 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/LogFileDetails.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/LogFileDetails.java",
                "@@ -25,3 +25,3 @@ import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "-@ManagedAttributeValueType",
                "+@ManagedAttributeValueType(isAbstract = true)",
                " public class LogFileDetails implements ManagedAttributeValue",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AttributeValueConverter.java b/broker-core/src/main/java/org/apache/qpid/server/model/AttributeValueConverter.java",
                "index c8a91772ab..a335fd12e1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AttributeValueConverter.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AttributeValueConverter.java",
                "@@ -27,2 +27,3 @@ import java.lang.reflect.InvocationTargetException;",
                " import java.lang.reflect.Method;",
                "+import java.lang.reflect.Modifier;",
                " import java.lang.reflect.ParameterizedType;",
                "@@ -1207,2 +1208,3 @@ abstract class AttributeValueConverter<T>",
                "         private final Map<Method, ValueMethod<X>> _derivedValueMethod = new HashMap<>();",
                "+        private Method _factoryMethod;",
                "@@ -1260,2 +1262,12 @@ abstract class AttributeValueConverter<T>",
                "                 }",
                "+",
                "+                if(method.getName().equals(\"newInstance\")",
                "+                   && Modifier.isStatic(method.getModifiers())",
                "+                   && Modifier.isPublic(method.getModifiers())",
                "+                   && method.getReturnType().equals(klazz)",
                "+                   && method.getParameterCount()==1",
                "+                   && method.getParameterTypes()[0].equals(klazz))",
                "+                {",
                "+                    _factoryMethod = method;",
                "+                }",
                "             }",
                "@@ -1278,3 +1290,3 @@ abstract class AttributeValueConverter<T>",
                "                 @SuppressWarnings(\"unchecked\")",
                "-                final X proxyObject =",
                "+                X proxyObject =",
                "                         (X) Proxy.newProxyInstance(_klazz.getClassLoader(), new Class[]{_klazz}, new InvocationHandler()",
                "@@ -1349,3 +1361,20 @@ abstract class AttributeValueConverter<T>",
                "                         });",
                "-                return proxyObject;",
                "+                if(_factoryMethod != null)",
                "+                {",
                "+                    try",
                "+                    {",
                "+                        @SuppressWarnings(\"unchecked\")",
                "+                        X createdObject = (X) _factoryMethod.invoke(null, proxyObject);",
                "+                        return createdObject;",
                "+                    }",
                "+                    catch (IllegalAccessException | InvocationTargetException e)",
                "+                    {",
                "+                        throw new IllegalArgumentException(\"Cannot convert to \" + _klazz.getName() + \" due to error invoking factory method\", e);",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    return proxyObject;",
                "+                }",
                "+",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/Content.java b/broker-core/src/main/java/org/apache/qpid/server/model/Content.java",
                "index 4a4b4e440e..70653022a1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/Content.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/Content.java",
                "@@ -25,3 +25,3 @@ import java.io.OutputStream;",
                "-@ManagedAttributeValueType",
                "+@ManagedAttributeValueType(isAbstract = true)",
                " public interface Content",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/ManagedAttributeValueTypeFactoryMethod.java b/broker-core/src/main/java/org/apache/qpid/server/model/ManagedAttributeValueTypeFactoryMethod.java",
                "new file mode 100644",
                "index 0000000000..a797524eb2",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/ManagedAttributeValueTypeFactoryMethod.java",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.model;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target(ElementType.METHOD)",
                "+public @interface ManagedAttributeValueTypeFactoryMethod",
                "+{",
                "+}",
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "index 8356c20ce8..59a7acbd90 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java",
                "@@ -27,3 +27,3 @@ import org.apache.qpid.server.model.ManagedAttributeValueType;",
                "-@ManagedAttributeValueType",
                "+@ManagedAttributeValueType(isAbstract = true)",
                " public class LogRecord implements ManagedAttributeValue"
            ],
            "changed_files": [
                "broker-codegen/src/main/java/org/apache/qpid/server/model/validation/ManagedAttributeValueTypeValidator.java",
                "broker-codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor",
                "broker-core/src/main/java/org/apache/qpid/server/logging/LogFileDetails.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/AttributeValueConverter.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/Content.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/ManagedAttributeValueTypeFactoryMethod.java",
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/LogRecord.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8143": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8143",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ce54800d597ad6438876ff04383386b0bb6732a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520860114,
            "hunks": 1,
            "message": "QPID-7873: [Broker-J] Do not clean-up delete actions on opening of message store",
            "diff": [
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "index 0ad638c2bb..4ad0fe6eb8 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "@@ -251,3 +251,2 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "     {",
                "-        _deleteActions.clear();",
                "         try(Connection conn =  newAutoCommitConnection())"
            ],
            "changed_files": [
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7873": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7873",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d293206d72989f1004f8fa3577f36d2da104f615",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525675167,
            "hunks": 47,
            "message": "QPID-8182: [End to End Conversion Tests] Extend test mechanism to allow testing of JMS provider assigned message ids.  Add test cases too.",
            "diff": [
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/ClientInstructionBuilder.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/ClientInstructionBuilder.java",
                "index 35596933c2..2d208f4f1a 100644",
                "--- a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/ClientInstructionBuilder.java",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/ClientInstructionBuilder.java",
                "@@ -27,2 +27,3 @@ import java.util.Map;",
                "+import org.apache.qpid.systests.end_to_end_conversion.client.AugumentConnectionUrl;",
                " import org.apache.qpid.systests.end_to_end_conversion.client.ClientInstruction;",
                "@@ -37,2 +38,8 @@ public class ClientInstructionBuilder",
                "+    public ClientInstructionBuilder configureConnectionUrl(final Map<String, String> connectionUrlConfig)",
                "+    {",
                "+        _clientInstructions.add(new AugumentConnectionUrl(connectionUrlConfig));",
                "+        return this;",
                "+    }",
                "+",
                "     public ClientInstructionBuilder publishMessage(final String destinationJndiName)",
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/EndToEndConversionTestBase.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/EndToEndConversionTestBase.java",
                "index 66e601a91c..1e5215268f 100644",
                "--- a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/EndToEndConversionTestBase.java",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/EndToEndConversionTestBase.java",
                "@@ -50,2 +50,3 @@ import org.slf4j.event.Level;",
                " import org.apache.qpid.server.model.Protocol;",
                "+import org.apache.qpid.systests.end_to_end_conversion.client.AugumentConnectionUrl;",
                " import org.apache.qpid.systests.end_to_end_conversion.client.Client;",
                "@@ -96,3 +97,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "-    protected ListenableFuture<?> runPublisher(final List<ClientInstruction> clientInstructions)",
                "+    protected ListenableFuture<ClientResult> runPublisher(final List<ClientInstruction> clientInstructions)",
                "     {",
                "@@ -107,3 +108,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "             Thread.currentThread().setName(\"Publisher\");",
                "-            runClient(gavs, additionalJavaArgs, clientInstructions);",
                "+            return runClient(gavs, additionalJavaArgs, clientInstructions);",
                "         });",
                "@@ -111,3 +112,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "-    protected ListenableFuture<?> runSubscriber(final List<ClientInstruction> clientInstructions)",
                "+    protected ListenableFuture<ClientResult> runSubscriber(final List<ClientInstruction> clientInstructions)",
                "     {",
                "@@ -123,3 +124,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "             Thread.currentThread().setName(\"Subscriber\");",
                "-            runClient(gavs, additionalJavaArgs, clientInstructions);",
                "+            return runClient(gavs, additionalJavaArgs, clientInstructions);",
                "         });",
                "@@ -127,3 +128,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "-    private List<ClientInstruction> amendClientInstructions(final List<ClientInstruction> clientInstructions,",
                "+    private List<ClientInstruction> amendClientInstructions(List<ClientInstruction> clientInstructions,",
                "                                                             final boolean amqp0xClient)",
                "@@ -148,2 +149,7 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "+        List<AugumentConnectionUrl> configUrls = clientInstructions.stream()",
                "+                                                                   .filter(AugumentConnectionUrl.class::isInstance)",
                "+                                                                   .map(AugumentConnectionUrl.class::cast)",
                "+                                                                   .collect(Collectors.toList());",
                "+",
                "         final String contextFactory;",
                "@@ -153,3 +159,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "             contextFactory = getAmqp0xContextFactory();",
                "-            connectionUrl = getAmqp0xConnectionUrl();",
                "+            connectionUrl = getAmqp0xConnectionUrl(configUrls);",
                "         }",
                "@@ -158,4 +164,8 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "             contextFactory = getAmqp10ContextFactory();",
                "-            connectionUrl = getAmqp10ConnectionUrl();",
                "+            connectionUrl = getAmqp10ConnectionUrl(configUrls);",
                "         }",
                "+",
                "+        clientInstructions = new ArrayList<>(clientInstructions);",
                "+        clientInstructions.removeAll(configUrls);",
                "+",
                "         ConfigureJndiContext jndiContext = new ConfigureJndiContext(contextFactory, connectionUrl);",
                "@@ -211,8 +221,9 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "         }",
                "-        throw new RuntimeException(\"Unable to determine client protocol version\");",
                "+        throw new RuntimeException(String.format(\"Unable to determine client protocol version. Addition args are : \"",
                "+                                                 + \"[%s]\", additionalArgs));",
                "     }",
                "-    private void runClient(final Collection<String> clientGavs,",
                "-                           final List<String> additionalJavaArguments,",
                "-                           final List<ClientInstruction> jmsInstructions)",
                "+    private ClientResult runClient(final Collection<String> clientGavs,",
                "+                                   final List<String> additionalJavaArguments,",
                "+                                   final List<ClientInstruction> jmsInstructions)",
                "     {",
                "@@ -254,7 +265,8 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "                     {",
                "-                        final ClientResult publisherResult = (ClientResult) result;",
                "-                        if (publisherResult.getException() != null)",
                "+                        final ClientResult clientResult = (ClientResult) result;",
                "+                        if (clientResult.getException() != null)",
                "                         {",
                "-                            throw publisherResult.getException();",
                "+                            throw clientResult.getException();",
                "                         }",
                "+                        return clientResult;",
                "                     }",
                "@@ -271,6 +283,5 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "                     loggingThread.stop();",
                "+                    LOGGER.debug(\"client process finished exit value: {}\", p.exitValue());",
                "                 }",
                "             }",
                "-",
                "-            LOGGER.debug(\"client process finished exit value: {}\", p.exitValue());",
                "         }",
                "@@ -297,3 +308,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "-    private String getAmqp0xConnectionUrl()",
                "+    private String getAmqp0xConnectionUrl(final List<AugumentConnectionUrl> configUrls)",
                "     {",
                "@@ -302,2 +313,13 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "         String hostString = \"localhost\";",
                "+",
                "+        if (!configUrls.isEmpty())",
                "+        {",
                "+            for (final AugumentConnectionUrl configUrl : configUrls)",
                "+            {",
                "+                if (!configUrl.getConnectionUrlConfig().isEmpty())",
                "+                {",
                "+                    throw new UnsupportedOperationException(\"Not implemented\");",
                "+                }",
                "+            }",
                "+        }",
                "         return String.format(\"amqp://clientid/?brokerlist='tcp://%s:%d'\", hostString, port);",
                "@@ -310,3 +332,3 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "-    private String getAmqp10ConnectionUrl()",
                "+    private String getAmqp10ConnectionUrl(final List<AugumentConnectionUrl> configUrls)",
                "     {",
                "@@ -316,3 +338,10 @@ public class EndToEndConversionTestBase extends BrokerAdminUsingTestBase",
                "         int connectTimeout = 30000;",
                "-        return String.format(\"amqp://%s:%d?jms.connectTimeout=%d\", hostString, port, connectTimeout);",
                "+",
                "+        String additional = configUrls.stream()",
                "+                                      .map(i -> i.getConnectionUrlConfig().entrySet())",
                "+                                      .flatMap(Collection::stream)",
                "+                                      .map(e -> String.format(\"%s=%s\", e.getKey(), e.getValue()))",
                "+                                      .collect(Collectors.joining(\"&\", \"&\", \"\"));",
                "+",
                "+        return String.format(\"amqp://%s:%d?jms.connectTimeout=%d%s\", hostString, port, connectTimeout, additional);",
                "     }",
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/AugumentConnectionUrl.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/AugumentConnectionUrl.java",
                "new file mode 100644",
                "index 0000000000..df7137ed06",
                "--- /dev/null",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/AugumentConnectionUrl.java",
                "@@ -0,0 +1,42 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests.end_to_end_conversion.client;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+public class AugumentConnectionUrl implements ClientInstruction",
                "+{",
                "+    private Map<String, String> _connectionUrlConfig;",
                "+",
                "+    public AugumentConnectionUrl(final Map<String, String> connectionUrlConfig)",
                "+    {",
                "+",
                "+        _connectionUrlConfig = new HashMap<>(connectionUrlConfig);",
                "+    }",
                "+",
                "+",
                "+    public Map<String, String> getConnectionUrlConfig()",
                "+    {",
                "+        return Collections.unmodifiableMap(_connectionUrlConfig);",
                "+    }",
                "+}",
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/Client.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/Client.java",
                "index b6ad152acb..91f849b639 100644",
                "--- a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/Client.java",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/Client.java",
                "@@ -28,2 +28,3 @@ import java.io.StringWriter;",
                " import java.net.Socket;",
                "+import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -85,2 +86,3 @@ public class Client",
                "+                List<ClientMessage> clientMessages = new ArrayList<>();",
                "                 if (!instructions.isEmpty())",
                "@@ -113,3 +115,8 @@ public class Client",
                "                                 connection.start();",
                "-                                handleInstructions(context, connection, instructions.subList(i, instructions.size()));",
                "+                                List<ClientMessage> messages = handleInstructions(context,",
                "+                                                                                  connection,",
                "+                                                                                  instructions.subList(i,",
                "+                                                                                                       instructions",
                "+                                                                                                               .size()));",
                "+                                clientMessages.addAll(messages);",
                "                             }",
                "@@ -124,3 +131,3 @@ public class Client",
                "                 System.out.println(\"Finished successfully\");",
                "-                objectOutputStream.writeObject(new ClientResult());",
                "+                objectOutputStream.writeObject(new ClientResult(clientMessages));",
                "             }",
                "@@ -155,6 +162,7 @@ public class Client",
                "-    private void handleInstructions(final Context context,",
                "-                                    final Connection connection,",
                "-                                    final List<ClientInstruction> instructions) throws Exception",
                "+    private List<ClientMessage> handleInstructions(final Context context,",
                "+                                                   final Connection connection,",
                "+                                                   final List<ClientInstruction> instructions) throws Exception",
                "     {",
                "+        List<ClientMessage> clientMessages = new ArrayList<>(instructions.size());",
                "         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "@@ -165,2 +173,3 @@ public class Client",
                "                 System.out.println(String.format(\"Process instruction: %s\", instruction));",
                "+                final ClientMessage clientMessage;",
                "                 if (instruction instanceof MessagingInstruction.PublishMessage)",
                "@@ -169,3 +178,3 @@ public class Client",
                "                             (MessagingInstruction.PublishMessage) instruction;",
                "-                    publishMessage(context, session, publishInstruction);",
                "+                    clientMessage = publishMessage(context, session, publishInstruction);",
                "                 }",
                "@@ -178,3 +187,3 @@ public class Client",
                "                     final MessageDescription messageDescription = receiveInstruction.getMessageDescription();",
                "-                    receiveMessage(session, destination, messageDescription);",
                "+                    clientMessage = receiveMessage(session, destination, messageDescription);",
                "                 }",
                "@@ -185,2 +194,3 @@ public class Client",
                "                 }",
                "+                clientMessages.add(clientMessage);",
                "             }",
                "@@ -191,7 +201,8 @@ public class Client",
                "         }",
                "+        return clientMessages;",
                "     }",
                "-    private void receiveMessage(final Session session,",
                "-                                final Destination queue,",
                "-                                final MessageDescription messageDescription) throws Exception",
                "+    private ClientMessage receiveMessage(final Session session,",
                "+                                         final Destination queue,",
                "+                                         final MessageDescription messageDescription) throws Exception",
                "     {",
                "@@ -217,7 +228,10 @@ public class Client",
                "         }",
                "+",
                "+        return buildClientMessage(message);",
                "     }",
                "-    private void publishMessage(final Context context,",
                "-                                final Session session,",
                "-                                final MessagingInstruction.PublishMessage publishMessageInstruction) throws Exception",
                "+    private ClientMessage publishMessage(final Context context,",
                "+                                         final Session session,",
                "+                                         final MessagingInstruction.PublishMessage publishMessageInstruction)",
                "+            throws Exception",
                "     {",
                "@@ -288,2 +302,5 @@ public class Client",
                "         }",
                "+",
                "+        return buildClientMessage(message);",
                "+",
                "     }",
                "@@ -340,2 +357,119 @@ public class Client",
                "     }",
                "+",
                "+    private ClientMessage buildClientMessage(final Message message) throws JMSException",
                "+    {",
                "+        String jmsMessageID = message.getJMSMessageID();",
                "+        String jmsCorrelationID = message.getJMSCorrelationID();",
                "+        byte[] jmsCorrelationIDAsBytes;",
                "+        try",
                "+        {",
                "+            jmsCorrelationIDAsBytes = message.getJMSCorrelationIDAsBytes();",
                "+        }",
                "+        catch (JMSException e)",
                "+        {",
                "+            jmsCorrelationIDAsBytes = null;",
                "+        }",
                "+        long jmsTimestamp = message.getJMSTimestamp();",
                "+        int jmsDeliveryMode = message.getJMSDeliveryMode();",
                "+        boolean jmsRedelivered = message.getJMSRedelivered();",
                "+        String jmsType = message.getJMSType();",
                "+        long jmsExpiration = message.getJMSExpiration();",
                "+        int jmsPriority = message.getJMSPriority();",
                "+",
                "+        return new JMSMessageAdaptor(jmsMessageID,",
                "+                                     jmsTimestamp,",
                "+                                     jmsCorrelationID,",
                "+                                     jmsCorrelationIDAsBytes,",
                "+                                     jmsDeliveryMode,",
                "+                                     jmsRedelivered,",
                "+                                     jmsType,",
                "+                                     jmsExpiration,",
                "+                                     jmsPriority);",
                "+    }",
                "+",
                "+    private static class JMSMessageAdaptor implements ClientMessage",
                "+    {",
                "+        private final String _jmsMessageID;",
                "+        private final long _jmsTimestamp;",
                "+        private final String _jmsCorrelationID;",
                "+        private final byte[] _jmsCorrelationIDAsBytes;",
                "+        private final int _jmsDeliveryMode;",
                "+        private final boolean _jmsRedelivered;",
                "+        private final String _jmsType;",
                "+        private final long _jmsExpiration;",
                "+        private final int _jmsPriority;",
                "+",
                "+        JMSMessageAdaptor(final String jmsMessageID,",
                "+                          final long jmsTimestamp,",
                "+                          final String jmsCorrelationID,",
                "+                          final byte[] jmsCorrelationIDAsBytes,",
                "+                          final int jmsDeliveryMode,",
                "+                          final boolean jmsRedelivered,",
                "+                          final String jmsType, final long jmsExpiration, final int jmsPriority)",
                "+        {",
                "+            _jmsMessageID = jmsMessageID;",
                "+            _jmsTimestamp = jmsTimestamp;",
                "+            _jmsCorrelationID = jmsCorrelationID;",
                "+            _jmsCorrelationIDAsBytes = jmsCorrelationIDAsBytes;",
                "+            _jmsDeliveryMode = jmsDeliveryMode;",
                "+            _jmsRedelivered = jmsRedelivered;",
                "+            _jmsType = jmsType;",
                "+            _jmsExpiration = jmsExpiration;",
                "+            _jmsPriority = jmsPriority;",
                "+        }",
                "+",
                "+        @Override",
                "+        public String getJMSMessageID()",
                "+        {",
                "+            return _jmsMessageID;",
                "+        }",
                "+",
                "+        @Override",
                "+        public long getJMSTimestamp()",
                "+        {",
                "+            return _jmsTimestamp;",
                "+        }",
                "+",
                "+        @Override",
                "+        public String getJMSCorrelationID()",
                "+        {",
                "+            return _jmsCorrelationID;",
                "+        }",
                "+",
                "+        @Override",
                "+        public byte[] getJMSCorrelationIDAsBytes()",
                "+        {",
                "+            return _jmsCorrelationIDAsBytes;",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getJMSDeliveryMode()",
                "+        {",
                "+            return _jmsDeliveryMode;",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean getJMSRedelivered()",
                "+        {",
                "+            return _jmsRedelivered;",
                "+        }",
                "+",
                "+        @Override",
                "+        public String getJMSType()",
                "+        {",
                "+            return _jmsType;",
                "+        }",
                "+",
                "+        @Override",
                "+        public long getJMSExpiration()",
                "+        {",
                "+            return _jmsExpiration;",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getJMSPriority()",
                "+        {",
                "+            return _jmsPriority;",
                "+        }",
                "+    }",
                " }",
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientMessage.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientMessage.java",
                "new file mode 100644",
                "index 0000000000..d3eb146e58",
                "--- /dev/null",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientMessage.java",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests.end_to_end_conversion.client;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public interface ClientMessage extends Serializable",
                "+{",
                "+    String getJMSMessageID();",
                "+    long getJMSTimestamp();",
                "+    String getJMSCorrelationID();",
                "+    byte[] getJMSCorrelationIDAsBytes();",
                "+    int getJMSDeliveryMode();",
                "+    boolean getJMSRedelivered();",
                "+    String getJMSType();",
                "+    long getJMSExpiration();",
                "+    int getJMSPriority();",
                "+}",
                "diff --git a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientResult.java b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientResult.java",
                "index f8eef68018..ff917800ee 100644",
                "--- a/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientResult.java",
                "+++ b/systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientResult.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.systests.end_to_end_conversion.client;",
                " import java.io.Serializable;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "@@ -27,11 +29,14 @@ public class ClientResult implements Serializable",
                "     private final Exception _exception;",
                "+    private final List<ClientMessage> _clientMessages;",
                "-    public ClientResult()",
                "+    public ClientResult(final Exception exception)",
                "     {",
                "-        this(null);",
                "+        _exception = exception;",
                "+        _clientMessages = Collections.emptyList();",
                "     }",
                "-    public ClientResult(final Exception exception)",
                "+    public ClientResult(final List<ClientMessage> clientMessages)",
                "     {",
                "-        _exception = exception;",
                "+        _exception = null;",
                "+        _clientMessages = clientMessages;",
                "     }",
                "@@ -42,2 +47,7 @@ public class ClientResult implements Serializable",
                "     }",
                "+",
                "+    public List<ClientMessage> getClientMessages()",
                "+    {",
                "+        return Collections.unmodifiableList(_clientMessages);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/ClientInstructionBuilder.java",
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/EndToEndConversionTestBase.java",
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/AugumentConnectionUrl.java",
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/Client.java",
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientMessage.java",
                "systests/end-to-end-conversion-tests/src/main/java/org/apache/qpid/systests/end_to_end_conversion/client/ClientResult.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8182": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, version, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version, message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8182",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8efe5624d5459a45bd10a887dfaa97ee55f9069",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521032820,
            "hunks": 44,
            "message": "QPID-7873: [Broker-J] Further tighten the onDelete contract by consistently ensuring that the message store is closed. Also fixed a defect that meant that the messages belonging to a deleted Provided BDB Store would remain on disk.",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "index 10906ce368..2e148e6104 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "@@ -32,2 +32,3 @@ import java.util.UUID;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.atomic.AtomicBoolean;",
                " import java.util.concurrent.atomic.AtomicLong;",
                "@@ -39,2 +40,3 @@ import com.sleepycat.je.Database;",
                " import com.sleepycat.je.DatabaseEntry;",
                "+import com.sleepycat.je.DatabaseNotFoundException;",
                " import com.sleepycat.je.LockConflictException;",
                "@@ -56,2 +58,3 @@ import org.apache.qpid.server.store.MessageHandle;",
                " import org.apache.qpid.server.store.MessageStore;",
                "+import org.apache.qpid.server.store.SizeMonitoringSettings;",
                " import org.apache.qpid.server.store.StorableMessageMetaData;",
                "@@ -87,2 +90,3 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "     private static final String XID_DB_NAME = \"XIDS\";",
                "+    private final AtomicBoolean _messageStoreOpen = new AtomicBoolean();",
                "@@ -98,2 +102,5 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "             setCacheSize(100000);",
                "+    protected ConfiguredObject<?> _parent;",
                "+    protected long _persistentSizeLowThreshold;",
                "+    protected long _persistentSizeHighThreshold;",
                "@@ -107,2 +114,42 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "+    @Override",
                "+    public void openMessageStore(final ConfiguredObject<?> parent)",
                "+    {",
                "+        if (_messageStoreOpen.compareAndSet(false, true))",
                "+        {",
                "+            _parent = parent;",
                "+",
                "+            final SizeMonitoringSettings sizeMonitorSettings = (SizeMonitoringSettings) parent;",
                "+            _persistentSizeHighThreshold = sizeMonitorSettings.getStoreOverfullSize();",
                "+            _persistentSizeLowThreshold = sizeMonitorSettings.getStoreUnderfullSize();",
                "+",
                "+            if (_persistentSizeLowThreshold > _persistentSizeHighThreshold || _persistentSizeLowThreshold < 0L)",
                "+            {",
                "+                _persistentSizeLowThreshold = _persistentSizeHighThreshold;",
                "+            }",
                "+",
                "+            doOpen(parent);",
                "+        }",
                "+    }",
                "+",
                "+    protected abstract void doOpen(final ConfiguredObject<?> parent);",
                "+",
                "+    @Override",
                "+    public void closeMessageStore()",
                "+    {",
                "+        if (_messageStoreOpen.compareAndSet(true, false))",
                "+        {",
                "+            for (StoredBDBMessage<?> message : _messages)",
                "+            {",
                "+                message.clear();",
                "+            }",
                "+            _messages.clear();",
                "+            _inMemorySize.set(0);",
                "+            _bytesEvacuatedFromMemory.set(0);",
                "+            doClose();",
                "+        }",
                "+    }",
                "+",
                "+    protected abstract void doClose();",
                "+",
                "     @Override",
                "@@ -123,2 +170,33 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "+    protected void deleteMessageStoreDatabases()",
                "+    {",
                "+        try",
                "+        {",
                "+            for (String db : Arrays.asList(MESSAGE_META_DATA_DB_NAME,",
                "+                                          MESSAGE_META_DATA_SEQ_DB_NAME,",
                "+                                          MESSAGE_CONTENT_DB_NAME,",
                "+                                          DELIVERY_DB_NAME,",
                "+                                          XID_DB_NAME))",
                "+            {",
                "+                try",
                "+                {",
                "+",
                "+                    getEnvironmentFacade().deleteDatabase(db);",
                "+                }",
                "+                catch (DatabaseNotFoundException ignore)",
                "+                {",
                "+                }",
                "+",
                "+            }",
                "+        }",
                "+        catch (IllegalStateException e)",
                "+        {",
                "+            getLogger().warn(\"Could not delete message store databases: {}\", e.getMessage());",
                "+        }",
                "+        catch (RuntimeException e)",
                "+        {",
                "+            getEnvironmentFacade().handleDatabaseException(\"Deletion of message store databases failed\", e);",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -194,14 +272,2 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    @Override",
                "-    public void closeMessageStore()",
                "-    {",
                "-        for (StoredBDBMessage<?> message : _messages)",
                "-        {",
                "-            message.clear();",
                "-        }",
                "-        _messages.clear();",
                "-        _inMemorySize.set(0);",
                "-        _bytesEvacuatedFromMemory.set(0);",
                "-    }",
                "-",
                "     @Override",
                "@@ -845,3 +911,14 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected abstract void checkMessageStoreOpen();",
                "+    protected void checkMessageStoreOpen()",
                "+    {",
                "+        if (!_messageStoreOpen.get())",
                "+        {",
                "+            throw new IllegalStateException(\"Message store is not open\");",
                "+        }",
                "+    }",
                "+",
                "+    protected boolean isMessageStoreOpen()",
                "+    {",
                "+        return _messageStoreOpen.get();",
                "+    }",
                "@@ -851,5 +928,11 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected abstract long getPersistentSizeLowThreshold();",
                "+    protected long getPersistentSizeLowThreshold()",
                "+    {",
                "+        return _persistentSizeLowThreshold;",
                "+    }",
                "-    protected abstract long getPersistentSizeHighThreshold();",
                "+    protected long getPersistentSizeHighThreshold()",
                "+    {",
                "+        return _persistentSizeHighThreshold;",
                "+    }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "index ca7b4ddf18..f4a1e83cd5 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "@@ -35,3 +35,2 @@ import java.util.Map;",
                " import java.util.UUID;",
                "-import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -52,3 +51,2 @@ import org.apache.qpid.server.store.MessageStore;",
                " import org.apache.qpid.server.store.MessageStoreProvider;",
                "-import org.apache.qpid.server.store.SizeMonitoringSettings;",
                " import org.apache.qpid.server.store.StoreException;",
                "@@ -76,3 +74,3 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "-    enum State { CLOSED, CONFIGURED, OPEN };",
                "+    enum State { CLOSED, CONFIGURED, OPEN }",
                "     private State _state = State.CLOSED;",
                "@@ -346,3 +344,3 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "-            Collection<UUID> removed = new ArrayList<UUID>(objects.length);",
                "+            Collection<UUID> removed = new ArrayList<>(objects.length);",
                "             for(ConfiguredObjectRecord record : objects)",
                "@@ -561,30 +559,5 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "     {",
                "-        private final AtomicBoolean _messageStoreOpen = new AtomicBoolean();",
                "-",
                "-        private long _persistentSizeLowThreshold;",
                "-        private long _persistentSizeHighThreshold;",
                "-",
                "-        private ConfiguredObject<?> _parent;",
                "-",
                "         @Override",
                "-        public void openMessageStore(final ConfiguredObject<?> parent)",
                "+        protected void doOpen(final ConfiguredObject<?> parent)",
                "         {",
                "-            if (_messageStoreOpen.compareAndSet(false, true))",
                "-            {",
                "-                _parent = parent;",
                "-",
                "-                final SizeMonitoringSettings sizeMonitorSettings = (SizeMonitoringSettings) parent;",
                "-                _persistentSizeHighThreshold = sizeMonitorSettings.getStoreOverfullSize();",
                "-                _persistentSizeLowThreshold = sizeMonitorSettings.getStoreUnderfullSize();",
                "-",
                "-                if (_persistentSizeLowThreshold > _persistentSizeHighThreshold || _persistentSizeLowThreshold < 0l)",
                "-                {",
                "-                    _persistentSizeLowThreshold = _persistentSizeHighThreshold;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        public boolean isMessageStoreOpen()",
                "-        {",
                "-            return _messageStoreOpen.get();",
                "         }",
                "@@ -592,6 +565,4 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "         @Override",
                "-        public void closeMessageStore()",
                "+        protected void doClose()",
                "         {",
                "-            super.closeMessageStore();",
                "-            _messageStoreOpen.set(false);",
                "         }",
                "@@ -607,3 +578,8 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "         {",
                "-            // Nothing to do, message store will be deleted when configuration store is deleted",
                "+            if (isMessageStoreOpen())",
                "+            {",
                "+                throw new IllegalStateException(\"Cannot delete the store as store is still open\");",
                "+            }",
                "+",
                "+            deleteMessageStoreDatabases();",
                "         }",
                "@@ -640,11 +616,2 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "-        @Override",
                "-        protected void checkMessageStoreOpen()",
                "-        {",
                "-            if (!_messageStoreOpen.get())",
                "-            {",
                "-                throw new IllegalStateException(\"Message store is not open\");",
                "-            }",
                "-        }",
                "-",
                "         @Override",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "index 83df5aac45..c3e41333f6 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "@@ -43,11 +43,4 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "-    private final AtomicBoolean _messageStoreOpen = new AtomicBoolean();",
                "-",
                "     private EnvironmentFacade _environmentFacade;",
                "-    private ConfiguredObject<?> _parent;",
                "-",
                "-    private long _persistentSizeLowThreshold;",
                "-    private long _persistentSizeHighThreshold;",
                "-",
                "     public BDBMessageStore()",
                "@@ -63,19 +56,5 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "     @Override",
                "-    public void openMessageStore(final ConfiguredObject<?> parent)",
                "+    protected void doOpen(final ConfiguredObject<?> parent)",
                "     {",
                "-        if (_messageStoreOpen.compareAndSet(false, true))",
                "-        {",
                "-            _parent = parent;",
                "-",
                "-            final SizeMonitoringSettings sizeMonitorSettings = (SizeMonitoringSettings) parent;",
                "-            _persistentSizeHighThreshold = sizeMonitorSettings.getStoreOverfullSize();",
                "-            _persistentSizeLowThreshold = sizeMonitorSettings.getStoreUnderfullSize();",
                "-",
                "-            if (_persistentSizeLowThreshold > _persistentSizeHighThreshold || _persistentSizeLowThreshold < 0l)",
                "-            {",
                "-                _persistentSizeLowThreshold = _persistentSizeHighThreshold;",
                "-            }",
                "-",
                "-            _environmentFacade = _environmentFacadeFactory.createEnvironmentFacade(parent);",
                "-        }",
                "+        _environmentFacade = _environmentFacadeFactory.createEnvironmentFacade(parent);",
                "     }",
                "@@ -83,18 +62,14 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "     @Override",
                "-    public void closeMessageStore()",
                "+    protected void doClose()",
                "     {",
                "-        super.closeMessageStore();",
                "-        if (_messageStoreOpen.compareAndSet(true, false))",
                "+        if (_environmentFacade != null)",
                "         {",
                "-            if (_environmentFacade != null)",
                "+            try",
                "             {",
                "-                try",
                "-                {",
                "-                    _environmentFacade.close();",
                "-                    _environmentFacade = null;",
                "-                }",
                "-                catch (RuntimeException e)",
                "-                {",
                "-                    throw new StoreException(\"Exception occurred on message store close\", e);",
                "-                }",
                "+                _environmentFacade.close();",
                "+                _environmentFacade = null;",
                "+            }",
                "+            catch (RuntimeException e)",
                "+            {",
                "+                throw new StoreException(\"Exception occurred on message store close\", e);",
                "             }",
                "@@ -106,2 +81,7 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "     {",
                "+        if (isMessageStoreOpen())",
                "+        {",
                "+            throw new IllegalStateException(\"Cannot delete the store as store is still open\");",
                "+        }",
                "+",
                "         FileBasedSettings fileBasedSettings = (FileBasedSettings)parent;",
                "@@ -113,3 +93,3 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "             {",
                "-                LOGGER.debug(\"Deleting store \" + storePath);",
                "+                LOGGER.debug(\"Deleting store : {}\", storePath);",
                "             }",
                "@@ -119,3 +99,3 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "             {",
                "-                LOGGER.info(\"Failed to delete the store at location \" + storePath);",
                "+                LOGGER.info(\"Failed to delete the store at location : {} \", storePath);",
                "             }",
                "@@ -130,14 +110,2 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "-    @Override",
                "-    protected long getPersistentSizeLowThreshold()",
                "-    {",
                "-        return _persistentSizeLowThreshold;",
                "-    }",
                "-",
                "-    @Override",
                "-    protected long getPersistentSizeHighThreshold()",
                "-    {",
                "-        return _persistentSizeHighThreshold;",
                "-    }",
                "-",
                "     @Override",
                "@@ -148,10 +116,2 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "-    @Override",
                "-    protected void checkMessageStoreOpen()",
                "-    {",
                "-        if (!_messageStoreOpen.get())",
                "-        {",
                "-            throw new IllegalStateException(\"Message store is not open\");",
                "-        }",
                "-    }",
                "diff --git a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "index ee6c8a22cb..222306a519 100644",
                "--- a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "+++ b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "@@ -56,3 +56,3 @@ public class DerbyConfigurationStore extends AbstractJDBCConfigurationStore",
                "-    private final ProvidedMessageStore _providedMessageStore = new ProvidedMessageStore();",
                "+    private final ProvidedDerbyMessageStore _providedMessageStore = new ProvidedDerbyMessageStore();",
                "     private final ProvidedPreferenceStore _providedPreferenceStore = new ProvidedPreferenceStore();",
                "@@ -199,3 +199,3 @@ public class DerbyConfigurationStore extends AbstractJDBCConfigurationStore",
                "-    private class ProvidedMessageStore extends AbstractDerbyMessageStore",
                "+    private class ProvidedDerbyMessageStore extends AbstractDerbyMessageStore",
                "     {",
                "@@ -235,2 +235,7 @@ public class DerbyConfigurationStore extends AbstractJDBCConfigurationStore",
                "         {",
                "+            if (isMessageStoreOpen())",
                "+            {",
                "+                throw new IllegalStateException(\"Cannot delete the store as store is still open\");",
                "+            }",
                "+",
                "             try(Connection connection = DerbyConfigurationStore.this.getConnection())",
                "diff --git a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyMessageStore.java b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyMessageStore.java",
                "index 43b38da457..a56cf2a921 100644",
                "--- a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyMessageStore.java",
                "+++ b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyMessageStore.java",
                "@@ -78,3 +78,3 @@ public class DerbyMessageStore extends AbstractDerbyMessageStore",
                "         {",
                "-            throw new IllegalStateException(\"Cannot delete the store as the provided message store is still open\");",
                "+            throw new IllegalStateException(\"Cannot delete the store as store is still open\");",
                "         }",
                "@@ -86,3 +86,3 @@ public class DerbyMessageStore extends AbstractDerbyMessageStore",
                "         {",
                "-            LOGGER.debug(\"Deleting store {}\", storePath);",
                "+            LOGGER.debug(\"Deleting store : {}\", storePath);",
                "@@ -91,3 +91,3 @@ public class DerbyMessageStore extends AbstractDerbyMessageStore",
                "             {",
                "-                LOGGER.info(\"Failed to delete the store at location \" + storePath);",
                "+                LOGGER.info(\"Failed to delete the store at location : {}\", storePath);",
                "             }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "index af378e74a6..e2a67bec0e 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "@@ -52,3 +52,3 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "-    private final MessageStore _providedMessageStore = new ProvidedMessageStore();",
                "+    private final MessageStore _providedMessageStore = new ProvidedJDBCMessageStore();",
                "     private final ProvidedPreferenceStore _providedPreferenceStore = new ProvidedPreferenceStore();",
                "@@ -231,3 +231,3 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "-    private class ProvidedMessageStore extends GenericAbstractJDBCMessageStore",
                "+    private class ProvidedJDBCMessageStore extends GenericAbstractJDBCMessageStore",
                "     {",
                "@@ -272,2 +272,7 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "         {",
                "+            if (isMessageStoreOpen())",
                "+            {",
                "+                throw new IllegalStateException(\"Cannot delete the store as the provided store is still open\");",
                "+            }",
                "+",
                "             try(Connection connection = GenericJDBCConfigurationStore.this.getConnection())",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "index 422b5df7e7..9b13da32a5 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "@@ -163,3 +163,3 @@ public class GenericJDBCMessageStore extends GenericAbstractJDBCMessageStore",
                "         {",
                "-            throw new IllegalStateException(\"Cannot delete the store as the provided message store is still open\");",
                "+            throw new IllegalStateException(\"Cannot delete the store as the store is still open\");",
                "         }"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyMessageStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7873": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: defect, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7873",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89c69e7f08e9fdd606a7cbab4d18aef0f1132f1e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521225529,
            "hunks": 5,
            "message": "QPID-8133: [Broker-J] Refresh Commons-CLI dependency (1.4)",
            "diff": [
                "diff --git a/broker/src/main/java/org/apache/qpid/server/Main.java b/broker/src/main/java/org/apache/qpid/server/Main.java",
                "index 23ca469300..31241e337f 100644",
                "--- a/broker/src/main/java/org/apache/qpid/server/Main.java",
                "+++ b/broker/src/main/java/org/apache/qpid/server/Main.java",
                "@@ -36,3 +36,2 @@ import org.apache.commons.cli.HelpFormatter;",
                " import org.apache.commons.cli.Option;",
                "-import org.apache.commons.cli.OptionBuilder;",
                " import org.apache.commons.cli.Options;",
                "@@ -52,4 +51,4 @@ import org.apache.qpid.server.plugin.ProtocolEngineCreator;",
                " import org.apache.qpid.server.plugin.QpidServiceLoader;",
                "-import org.apache.qpid.server.util.StringUtil;",
                " import org.apache.qpid.server.util.FileUtils;",
                "+import org.apache.qpid.server.util.StringUtil;",
                "@@ -72,34 +71,90 @@ public class Main",
                "-    private static final Option OPTION_HELP = new Option(\"h\", \"help\", false, \"print this message\");",
                "-",
                "-    private static final Option OPTION_VERSION = new Option(\"v\", \"version\", false, \"print the version information and exit\");",
                "-",
                "-    private static final Option OPTION_CONFIGURATION_STORE_PATH = OptionBuilder.withArgName(\"path\").hasArg()",
                "-            .withDescription(\"use given configuration store location\").withLongOpt(\"store-path\").create(\"sp\");",
                "-",
                "-    private static final Option OPTION_CONFIGURATION_STORE_TYPE = OptionBuilder.withArgName(\"type\").hasArg()",
                "-            .withDescription(\"use given broker configuration store type\").withLongOpt(\"store-type\").create(\"st\");",
                "-",
                "-    private static final Option OPTION_INITIAL_CONFIGURATION_PATH = OptionBuilder.withArgName(\"path\").hasArg()",
                "-            .withDescription(\"set the location of initial JSON config to use when creating/overwriting a broker configuration store\").withLongOpt(\"initial-config-path\").create(\"icp\");",
                "-",
                "-    private static final Option OPTION_CREATE_INITIAL_CONFIG = OptionBuilder.withArgName(\"path\").hasOptionalArg().withDescription(\"create a copy of the initial config file, either to an\" +",
                "-            \" optionally specified file path, or as \" + SystemConfig.DEFAULT_INITIAL_CONFIG_NAME + \" in the current directory\")",
                "-            .withLongOpt(\"create-initial-config\").create(\"cic\");",
                "-",
                "-    private static final Option OPTION_CONFIGURATION_PROPERTY = OptionBuilder.withArgName(\"name=value\").hasArg()",
                "-            .withDescription(\"set a configuration property to use when resolving variables in the broker configuration store, with format \\\"name=value\\\"\")",
                "-            .withLongOpt(\"config-property\").create(\"prop\");",
                "-",
                "-    private static final Option OPTION_MANAGEMENT_MODE = OptionBuilder.withDescription(\"start broker in management mode, disabling the AMQP ports\")",
                "-            .withLongOpt(\"management-mode\").create(\"mm\");",
                "-    private static final Option OPTION_MM_QUIESCE_VHOST = OptionBuilder.withDescription(\"make virtualhosts stay in the quiesced state during management mode.\")",
                "-            .withLongOpt(\"management-mode-quiesce-virtualhosts\").create(\"mmqv\");",
                "-    private static final Option OPTION_MM_HTTP_PORT = OptionBuilder.withArgName(\"port\").hasArg()",
                "-            .withDescription(\"override http management port in management mode\").withLongOpt(\"management-mode-http-port\").create(\"mmhttp\");",
                "-    private static final Option OPTION_MM_PASSWORD = OptionBuilder.withArgName(\"password\").hasArg()",
                "-                                                                  .withDescription(\"Set the password for the management mode user \" + SystemConfig.MANAGEMENT_MODE_USER_NAME).withLongOpt(\"management-mode-password\").create(\"mmpass\");",
                "-",
                "-    private static final Option OPTION_INITIAL_SYSTEM_PROPERTIES = OptionBuilder.withArgName(\"path\").hasArg()",
                "-            .withDescription(\"set the location of initial properties file to set otherwise unset system properties\").withLongOpt(\"system-properties-file\").create(\"props\");",
                "+    private static final Option OPTION_HELP = Option.builder(\"h\")",
                "+                                                    .desc(\"print this message\")",
                "+                                                    .longOpt(\"help\")",
                "+                                                    .build();",
                "+",
                "+    private static final Option OPTION_VERSION = Option.builder(\"v\")",
                "+                                                       .desc(\"print the version information and exit\")",
                "+                                                       .longOpt(\"version\")",
                "+                                                       .build();",
                "+",
                "+    private static final Option OPTION_CONFIGURATION_STORE_PATH = Option.builder(\"sp\")",
                "+                                                                        .argName(\"path\")",
                "+                                                                        .hasArg()",
                "+                                                                        .desc(\"use given configuration store location\")",
                "+                                                                        .longOpt(\"store-path\")",
                "+                                                                        .build();",
                "+",
                "+    private static final Option OPTION_CONFIGURATION_STORE_TYPE = Option.builder(\"st\")",
                "+                                                                        .argName(\"type\")",
                "+                                                                        .hasArg()",
                "+                                                                        .desc(\"use given broker configuration store \"",
                "+                                                                              + \"type\")",
                "+                                                                        .longOpt(\"store-type\")",
                "+                                                                        .build();",
                "+",
                "+    private static final Option OPTION_INITIAL_CONFIGURATION_PATH = Option.builder(\"icp\")",
                "+                                                                          .argName(\"path\")",
                "+                                                                          .hasArg()",
                "+                                                                          .desc(\"set the location of initial JSON \"",
                "+                                                                                + \"config to use when \"",
                "+                                                                                + \"creating/overwriting a broker \"",
                "+                                                                                + \"configuration store\")",
                "+                                                                          .longOpt(\"initial-config-path\")",
                "+                                                                          .build();",
                "+",
                "+    private static final Option OPTION_CREATE_INITIAL_CONFIG = Option.builder(\"cic\")",
                "+                                                                     .argName(\"path\")",
                "+                                                                     .optionalArg(true)",
                "+                                                                     .desc(\"create a copy of the initial config file,\"",
                "+                                                                           + \" either to an\"",
                "+                                                                           +",
                "+                                                                           \" optionally specified file path, or as \"",
                "+                                                                           + SystemConfig.DEFAULT_INITIAL_CONFIG_NAME",
                "+                                                                           + \" in the current directory\")",
                "+                                                                     .longOpt(\"create-initial-config\")",
                "+                                                                     .build();",
                "+",
                "+    private static final Option OPTION_CONFIGURATION_PROPERTY = Option.builder(\"prop\")",
                "+                                                                      .argName(\"name=value\").hasArg()",
                "+                                                                      .desc(\"set a configuration property to use when\"",
                "+                                                                            + \" resolving variables in the broker \"",
                "+                                                                            + \"configuration store, with format \"",
                "+                                                                            + \"\\\"name=value\\\"\")",
                "+                                                                      .longOpt(\"config-property\")",
                "+                                                                      .build();",
                "+",
                "+    private static final Option OPTION_MANAGEMENT_MODE = Option.builder(\"mm\")",
                "+                                                               .desc(\"start broker in management mode, disabling the \"",
                "+                                                                     + \"AMQP ports\")",
                "+                                                               .longOpt(\"management-mode\")",
                "+                                                               .build();",
                "+",
                "+    private static final Option OPTION_MM_QUIESCE_VHOST = Option.builder(\"mmqv\")",
                "+                                                                .desc(\"make virtualhosts stay in the quiesced state during management mode.\")",
                "+                                                                .longOpt(\"management-mode-quiesce-virtualhosts\")",
                "+                                                                .build();",
                "+",
                "+    private static final Option OPTION_MM_HTTP_PORT = Option.builder(\"mmhttp\")",
                "+                                                            .argName(\"port\")",
                "+                                                            .hasArg()",
                "+                                                            .desc(\"override http management port in management mode\")",
                "+                                                            .longOpt(\"management-mode-http-port\")",
                "+                                                            .build();",
                "+",
                "+    private static final Option OPTION_MM_PASSWORD = Option.builder(\"mmpass\")",
                "+                                                           .argName(\"password\")",
                "+                                                           .hasArg()",
                "+                                                           .desc(\"Set the password for the management mode user \"",
                "+                                                                 + SystemConfig.MANAGEMENT_MODE_USER_NAME)",
                "+                                                           .longOpt(\"management-mode-password\")",
                "+                                                           .build();",
                "+",
                "+    private static final Option OPTION_INITIAL_SYSTEM_PROPERTIES = Option.builder(\"props\")",
                "+                                                                         .argName(\"path\")",
                "+                                                                         .hasArg()",
                "+                                                                         .desc(\"set the location of initial properties file to set otherwise unset system properties\")",
                "+                                                                         .longOpt(\"system-properties-file\")",
                "+                                                                         .build();",
                "diff --git a/pom.xml b/pom.xml",
                "index 7affd1ffc1..eeb3e419b2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -128,3 +128,3 @@",
                "     <bonecp-version>0.7.1.RELEASE</bonecp-version>",
                "-    <commons-cli-version>1.2</commons-cli-version>",
                "+    <commons-cli-version>1.4</commons-cli-version>"
            ],
            "changed_files": [
                "broker/src/main/java/org/apache/qpid/server/Main.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8133": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8133",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8f6800248d8949bf353ac4787492f4404db519ca",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515278055,
            "hunks": 1,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add connection protocol tests related to SASL. (cherry picked from commit cd13129adff47932b2e26e4a33a9bcba27c661ce)",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java",
                "new file mode 100644",
                "index 0000000000..5833599bc0",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.charset.StandardCharsets;",
                "+",
                "+import javax.crypto.Mac;",
                "+import javax.crypto.spec.SecretKeySpec;",
                "+import javax.xml.bind.DatatypeConverter;",
                "+",
                "+public class SaslUtils",
                "+{",
                "+    public static byte[] generateCramMD5ClientResponse(String userName, String userPassword, byte[] challengeBytes)",
                "+            throws Exception",
                "+    {",
                "+        String macAlgorithm = \"HmacMD5\";",
                "+        Mac mac = Mac.getInstance(macAlgorithm);",
                "+        mac.init(new SecretKeySpec(userPassword.getBytes(StandardCharsets.UTF_8), macAlgorithm));",
                "+        final byte[] messageAuthenticationCode = mac.doFinal(challengeBytes);",
                "+        String responseAsString = userName + \" \" + DatatypeConverter.printHexBinary(messageAuthenticationCode)",
                "+                                                                    .toLowerCase();",
                "+        return responseAsString.getBytes();",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4ba6158f3fc9f86b07cf1dd24f2e778fbc182fc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516528501,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Remove DurableSubscriptionTest - redundant/poorly focused",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 5636a05f29..68acca29d4 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -30,3 +30,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                " org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/CPPNoPrefetchExcludes b/test-profiles/CPPNoPrefetchExcludes",
                "index ddfba4d8a6..969b9272a7 100644",
                "--- a/test-profiles/CPPNoPrefetchExcludes",
                "+++ b/test-profiles/CPPNoPrefetchExcludes",
                "@@ -19,3 +19 @@",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurabilityNOACK",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurabilityNOACKSessionPerConnection",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 30176f1119..327c14649d 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -21,3 +21,2 @@",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 6edd58ba65..5686325e92 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -32,4 +32,2 @@ org.apache.qpid.test.unit.basic.BytesMessageTest#testModificationAfterSend",
                "-// Test uses AMQP 0-x ack modes and assumes the name of the queues backing subscriptions",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/CPPNoPrefetchExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ddc519a551061c682877784068e755677e2c6313",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524830041,
            "hunks": 24,
            "message": "QPID-7830: [Broker-J] [AMQP 0-8..0-91] Move caching responsubility to virtualhost",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "index 0ee98c382f..6d17f8e498 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "@@ -25,7 +25,8 @@ import java.nio.ByteBuffer;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.security.AccessController;",
                " import java.util.Arrays;",
                "-import java.util.concurrent.TimeUnit;",
                "+",
                "+import javax.security.auth.Subject;",
                " import com.google.common.cache.Cache;",
                "-import com.google.common.cache.CacheBuilder;",
                " import org.slf4j.Logger;",
                "@@ -34,2 +35,6 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.security.QpidPrincipal;",
                "+import org.apache.qpid.server.virtualhost.CacheProvider;",
                "+import org.apache.qpid.server.virtualhost.NullCache;",
                "+import org.apache.qpid.server.virtualhost.VirtualHostPrincipal;",
                "@@ -49,2 +54,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(AMQShortString.class);",
                "+    private static final NullCache<ByteBuffer, AMQShortString> NULL_CACHE = new NullCache<>();",
                "@@ -52,7 +58,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     // rather than using the byte arrays as keys.",
                "-    private static ThreadLocal<Cache<ByteBuffer, AMQShortString>> CACHE =",
                "-            ThreadLocal.withInitial(() -> CacheBuilder.newBuilder()",
                "-                                                      .maximumSize(100)",
                "-                                                      .expireAfterAccess(300, TimeUnit.SECONDS)",
                "-                                                      .build());",
                "+    private static ThreadLocal<Cache<ByteBuffer, AMQShortString>> CACHE = new ThreadLocal<>();",
                "@@ -102,3 +104,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-            final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+            final AMQShortString cached = getShortStringCache().getIfPresent(ByteBuffer.wrap(data));",
                "             return cached != null ? cached : new AMQShortString(data);",
                "@@ -114,3 +116,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-        final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+        final AMQShortString cached = getShortStringCache().getIfPresent(ByteBuffer.wrap(data));",
                "         return cached != null ? cached : new AMQShortString(data);",
                "@@ -122,3 +124,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "-        final AMQShortString cached = CACHE.get().getIfPresent(ByteBuffer.wrap(data));",
                "+        final AMQShortString cached = getShortStringCache().getIfPresent(ByteBuffer.wrap(data));",
                "         if (cached != null)",
                "@@ -303,3 +305,3 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "     {",
                "-        CACHE.get().put(ByteBuffer.wrap(_data), this);",
                "+        getShortStringCache().put(ByteBuffer.wrap(_data), this);",
                "     }",
                "@@ -363,2 +365,29 @@ public final class AMQShortString implements Comparable<AMQShortString>",
                "+    private static Cache<ByteBuffer, AMQShortString> getShortStringCache()",
                "+    {",
                "+        Cache<ByteBuffer, AMQShortString> cache = CACHE.get();",
                "+        if (cache == null)",
                "+        {",
                "+            cache = NULL_CACHE;",
                "+            Subject subject = Subject.getSubject(AccessController.getContext());",
                "+            if (subject != null)",
                "+            {",
                "+                VirtualHostPrincipal principal = QpidPrincipal.getSingletonPrincipal(subject, true, VirtualHostPrincipal.class);",
                "+",
                "+                if (principal != null && principal.getVirtualHost() instanceof CacheProvider)",
                "+                {",
                "+                    CacheProvider cacheProvider = (CacheProvider) principal.getVirtualHost();",
                "+                    cache = cacheProvider.getNamedCache(\"amqShortStringCache\");",
                "+                }",
                "+            }",
                "+            CACHE.set(cache);",
                "+        }",
                "+        return cache;",
                "+    }",
                "+",
                "+    /** Unit testing only */",
                "+    static void setCache(final Cache<ByteBuffer, AMQShortString> cache)",
                "+    {",
                "+        CACHE.set(cache);",
                "+    }",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/QpidPrincipal.java b/broker-core/src/main/java/org/apache/qpid/server/security/QpidPrincipal.java",
                "index 46c717fa2c..382fea8eb6 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/QpidPrincipal.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/QpidPrincipal.java",
                "@@ -23,2 +23,5 @@ import java.io.Serializable;",
                " import java.security.Principal;",
                "+import java.util.Set;",
                "+",
                "+import javax.security.auth.Subject;",
                "@@ -29,3 +32,38 @@ public interface QpidPrincipal extends Principal, Serializable",
                " {",
                "+    static <P extends Principal> P getSingletonPrincipal(final Subject authSubject,",
                "+                                                         final boolean isPrincipalOptional,",
                "+                                                         final Class<P> principalClazz)",
                "+    {",
                "+        if (authSubject == null)",
                "+        {",
                "+            throw new IllegalArgumentException(\"No authenticated subject.\");",
                "+        }",
                "+",
                "+        final Set<P> principals = authSubject.getPrincipals(principalClazz);",
                "+        int numberOfAuthenticatedPrincipals = principals.size();",
                "+",
                "+        if(numberOfAuthenticatedPrincipals == 0 && isPrincipalOptional)",
                "+        {",
                "+            return null;",
                "+        }",
                "+        else",
                "+        {",
                "+            if (numberOfAuthenticatedPrincipals != 1)",
                "+            {",
                "+                throw new IllegalArgumentException(",
                "+                        String.format(",
                "+                                \"Can't find single %s in the authenticated subject. There were %d \"",
                "+                                + \"%s principals out of a total number of principals of: %s\",",
                "+                                principalClazz.getSimpleName(),",
                "+                                principalClazz.getSimpleName(),",
                "+                                numberOfAuthenticatedPrincipals,",
                "+                                authSubject.getPrincipals()));",
                "+            }",
                "+            return principals.iterator().next();",
                "+        }",
                "+    }",
                "+",
                "     ConfiguredObject<?> getOrigin();",
                "+",
                "+",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java",
                "index 3e4d688b43..3ead31cabc 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java",
                "@@ -128,25 +128,3 @@ public final class AuthenticatedPrincipal implements QpidPrincipal",
                "     {",
                "-        if (authSubject == null)",
                "-        {",
                "-            throw new IllegalArgumentException(\"No authenticated subject.\");",
                "-        }",
                "-",
                "-        final Set<AuthenticatedPrincipal> principals = authSubject.getPrincipals(AuthenticatedPrincipal.class);",
                "-        int numberOfAuthenticatedPrincipals = principals.size();",
                "-",
                "-        if(numberOfAuthenticatedPrincipals == 0 && isPrincipalOptional)",
                "-        {",
                "-            return null;",
                "-        }",
                "-        else",
                "-        {",
                "-            if (numberOfAuthenticatedPrincipals != 1)",
                "-            {",
                "-                throw new IllegalArgumentException(",
                "-                        \"Can't find single AuthenticatedPrincipal in authenticated subject. There were \"",
                "-                                + numberOfAuthenticatedPrincipals",
                "-                                + \" authenticated principals out of a total number of principals of: \" + authSubject.getPrincipals());",
                "-            }",
                "-            return principals.iterator().next();",
                "-        }",
                "+        return QpidPrincipal.getSingletonPrincipal(authSubject, isPrincipalOptional, AuthenticatedPrincipal.class);",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "index 966f9ac2aa..ff81b078f5 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "@@ -55,2 +55,3 @@ import java.util.concurrent.Callable;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentMap;",
                " import java.util.concurrent.Future;",
                "@@ -67,2 +68,4 @@ import javax.security.auth.Subject;",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheBuilder;",
                " import com.google.common.util.concurrent.FutureCallback;",
                "@@ -158,2 +161,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "     private volatile boolean _deleteRequested;",
                "+    private final ConcurrentMap<String, Cache> _caches = new ConcurrentHashMap<>();",
                "@@ -3021,2 +3025,17 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "+    @Override",
                "+    public <K, V> Cache<K, V> getNamedCache(final String cacheName)",
                "+    {",
                "+        final String maxSizeContextVarName = String.format(NAMED_CACHE_MAXIMUM_SIZE_FORMAT, cacheName);",
                "+        final String expirationContextVarName = String.format(NAMED_CACHE_EXPIRATION_FORMAT, cacheName);",
                "+        Set<String> contextKeys = getContextKeys(false);",
                "+        int maxSize = contextKeys.contains(maxSizeContextVarName) ? getContextValue(Integer.class, maxSizeContextVarName) : getContextValue(Integer.class, NAMED_CACHE_MAXIMUM_SIZE);",
                "+        long expiration = contextKeys.contains(expirationContextVarName) ? getContextValue(Long.class, expirationContextVarName) : getContextValue(Long.class, NAMED_CACHE_EXPIRATION);",
                "+",
                "+        return _caches.computeIfAbsent(cacheName, (k) -> CacheBuilder.<K, V>newBuilder()",
                "+                .maximumSize(maxSize)",
                "+                .expireAfterAccess(expiration, TimeUnit.MILLISECONDS)",
                "+                .build());",
                "+    }",
                "+",
                "     private boolean hasDifferentBindings(final Exchange<?> exchange,",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheProvider.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheProvider.java",
                "new file mode 100644",
                "index 0000000000..64a6233457",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheProvider.java",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.server.virtualhost;",
                "+",
                "+import com.google.common.cache.Cache;",
                "+",
                "+public interface CacheProvider",
                "+{",
                "+    <K, V> Cache<K, V> getNamedCache(String cacheName);",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/NullCache.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/NullCache.java",
                "new file mode 100644",
                "index 0000000000..3d2ef6f40a",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/NullCache.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.server.virtualhost;",
                "+",
                "+import java.util.Map;",
                "+import java.util.concurrent.Callable;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentMap;",
                "+import java.util.concurrent.ExecutionException;",
                "+",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheStats;",
                "+import com.google.common.collect.ImmutableMap;",
                "+",
                "+public class NullCache<K, V> implements Cache<K, V>",
                "+{",
                "+    @Override",
                "+    public V getIfPresent(final Object key)",
                "+    {",
                "+        return null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public V get(final K key, final Callable<? extends V> loader) throws ExecutionException",
                "+    {",
                "+        try",
                "+        {",
                "+            return loader.call();",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new ExecutionException(e);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableMap<K, V> getAllPresent(final Iterable<?> keys)",
                "+    {",
                "+        return ImmutableMap.of();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void put(final K key, final V value)",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void putAll(final Map<? extends K, ? extends V> m)",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void invalidate(final Object key)",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void invalidateAll(final Iterable<?> keys)",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void invalidateAll()",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public long size()",
                "+    {",
                "+        return 0;",
                "+    }",
                "+",
                "+    @Override",
                "+    public CacheStats stats()",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConcurrentMap<K, V> asMap()",
                "+    {",
                "+        return new ConcurrentHashMap<>();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void cleanUp()",
                "+    {",
                "+    }",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/QueueManagingVirtualHost.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/QueueManagingVirtualHost.java",
                "index b30373a7e6..93883040e8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/QueueManagingVirtualHost.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/QueueManagingVirtualHost.java",
                "@@ -59,3 +59,4 @@ public interface QueueManagingVirtualHost<X extends QueueManagingVirtualHost<X>>",
                "                                                                                          UserPreferencesCreator,",
                "-                                                                                         EventLoggerProvider",
                "+                                                                                         EventLoggerProvider,",
                "+                                                                                         CacheProvider",
                " {",
                "@@ -165,2 +166,14 @@ public interface QueueManagingVirtualHost<X extends QueueManagingVirtualHost<X>>",
                "+    String NAMED_CACHE_MAXIMUM_SIZE = \"virtualhost.namedCache.maximumSize\";",
                "+    @SuppressWarnings(\"unused\")",
                "+    @ManagedContextDefault(name = NAMED_CACHE_MAXIMUM_SIZE, description = \"Maximum number of entries within the named cached\")",
                "+    int DEFAULT_NAMED_CACHE_SIZE = 100;",
                "+    String NAMED_CACHE_MAXIMUM_SIZE_FORMAT = \"virtualhost.namedCache.%s.maximumSize\";",
                "+",
                "+    String NAMED_CACHE_EXPIRATION = \"virtualhost.namedCache.expiration\";",
                "+    @SuppressWarnings(\"unused\")",
                "+    @ManagedContextDefault(name = NAMED_CACHE_EXPIRATION, description = \"Expiration time (in millis) applied to cached values within the named cache\")",
                "+    long DEFAULT_NAMED_CACHE_EXPIRATION = 300 * 1000;",
                "+    String NAMED_CACHE_EXPIRATION_FORMAT = \"virtualhost.namedCache.%s.expiration\";",
                "+",
                "     @ManagedAttribute( defaultValue = \"${\" + QueueManagingVirtualHost.VIRTUALHOST_CONNECTION_THREAD_POOL_NUMBER_OF_SELECTORS + \"}\")",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostPrincipal.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostPrincipal.java",
                "index b3d7374848..14fd8cc326 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostPrincipal.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostPrincipal.java",
                "@@ -46,2 +46,7 @@ public class VirtualHostPrincipal implements Principal, Serializable",
                "+    public VirtualHost<?> getVirtualHost()",
                "+    {",
                "+        return _virtualHost;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQShortString.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/QpidPrincipal.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/CacheProvider.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/NullCache.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/QueueManagingVirtualHost.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostPrincipal.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7830": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7830",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "98a9d1cff26a249c997e4abe4e49efe963402300",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515774495,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor TransactionTimeoutTest as JMS 1.1 extension test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index a6e6ee338c..5c197e73b1 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -82,7 +82,2 @@ org.apache.qpid.server.plugins.PluginTest#*",
                "-// Transacion timeouts not implemented in CPP broker",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutDisabledTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutConfigurationTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutTest#*",
                "-",
                " // Qpid Broker-J only",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 295f452248..6edd58ba65 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -25,6 +25,2 @@",
                "-// AMQP 1.0 allows more than one txn per session, so our mechanism of installing transaction timeout tickers will need to change",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutDisabledTest#*",
                "-",
                " // the received message is being treated as an object message (because it lacks the necessary JMS annotation?)"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b21a8f564e9d914a41564fa0041f7355340cacaf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520864233,
            "hunks": 6,
            "message": "NO-JIRA: [Broker-J] [System Tests] Remove logging tests",
            "diff": [
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index e72790cd54..aff6fb5d0f 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -19,6 +19,2 @@",
                "-// 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartsFlowStopped",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartConsumerFlowStarted",
                "-",
                " // QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 3265d94fcc..72d3d31da6 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -19,12 +19,2 @@",
                "-// The binding logging tests focus on the behaviour of the old client with regard to creating (and binding) queues on",
                "-// the creation of consumers.",
                "-org.apache.qpid.server.logging.BindingLoggingTest#*",
                "-",
                "-// These tests are 0-8/9/9-1 specific and are also excluded in the 0-10 profile",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartsFlowStopped",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartConsumerFlowStarted",
                "-// This test is testing AMQP 0-x specific behaviour",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQueueDeclaredOnDifferentSession",
                "-",
                " // Tests the interaction between the Broker's supported protocols and what the 0-x client agrees to",
                "@@ -32,6 +22,2 @@ org.apache.qpid.server.SupportedProtocolVersionsTest#*",
                "-// Durable topic subscriptions will be reimplemented with the shared topic subscriptions (QPID-7569)",
                "-org.apache.qpid.server.logging.ConsumerLoggingTest#testSubscriptionCreateDurable",
                "-org.apache.qpid.server.logging.ConsumerLoggingTest#testSubscriptionCreateDurableWithArguments",
                "-",
                " // These tests assume names of queues backing durable subscriptions",
                "@@ -44,7 +30,2 @@ org.apache.qpid.systest.rest.SessionRestTest#*",
                "-// Tests verify the 0-x client's ability to create queues and that the server logs creation/deletion faithfully",
                "-org.apache.qpid.server.logging.DurableQueueLoggingTest#*",
                "-org.apache.qpid.server.logging.QueueLoggingTest#*",
                "-org.apache.qpid.server.logging.TransientQueueLoggingTest#*",
                "-",
                "diff --git a/test-profiles/JavaPersistentExcludes b/test-profiles/JavaPersistentExcludes",
                "index 240f6dc330..969b9272a7 100644",
                "--- a/test-profiles/JavaPersistentExcludes",
                "+++ b/test-profiles/JavaPersistentExcludes",
                "@@ -19,3 +19 @@",
                "-//These tests require the MemoryMessageStore",
                "-org.apache.qpid.server.logging.MemoryMessageStoreLoggingTest#*",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 7d3925e810..61616c677e 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -25,3 +25,2 @@",
                " org.apache.qpid.client.SynchReceiveTest#testReceiveNoWait",
                "-org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQueueDeclaredOnDifferentSession"
            ],
            "changed_files": [
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPersistentExcludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "62bb19866d48b5513f56c43751e79d4405d09517",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522415143,
            "hunks": 2,
            "message": "QPID-7925: [Broker-J] Fix passing initial data and add indication that \"Default result\" is a mandatory field (cherry picked from commit 818cd7d3ea7849e64364729d5d55c533c4fab609)",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "index 671a81a81e..c7b27c449e 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "@@ -21,3 +21,3 @@",
                "     <div class=\"clear\">",
                "-        <div class=\"formLabel-labelCell tableContainer-labelCell\">Default Result:</div>",
                "+        <div class=\"formLabel-labelCell tableContainer-labelCell\">Default Result*:</div>",
                "         <input type=\"text\" id=\"addAccessControlProvider.ruleBased.defaultResult\"",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "index dd5a2fa117..bfdd804157 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "@@ -165,3 +165,3 @@ define([\"dojo/_base/lang\",",
                "                             parent: that,",
                "-                            data: that.initialData,",
                "+                            initialData: that.initialData || {},",
                "                             effectiveData: that.effectiveData,"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7925": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "818cd7d3ea7849e64364729d5d55c533c4fab609"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7925",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "069ad67338d0d4979ab2c756a2c7220f81bfa9f2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521633951,
            "hunks": 23,
            "message": "QPID-7197: [Broker-J] Address review comments * allow deletion of sub-tree where two or more of the nodes within the sub-tree being deleted have references to each other. * respect the model discontinuities when traversing the tree",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index 4ed5865ef7..447fc59359 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -2229,3 +2229,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         validateChange(proxyForValidation, attributes.keySet());",
                "-        checkReferencesToObjectAndItsChildren(getHierarchyRoot(this), this);",
                "+        checkReferencesOnDelete(getHierarchyRoot(this), this);",
                "@@ -2248,10 +2248,11 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private void checkReferencesToObjectAndItsChildren(final ConfiguredObject<?> root,",
                "-                                                       final ConfiguredObject<?> lookupReference)",
                "+    private void checkReferencesOnDelete(final ConfiguredObject<?> referee, final ConfiguredObject<?> referrer)",
                "     {",
                "-        getModel().getChildTypes(lookupReference.getCategoryClass())",
                "-                  .forEach(childClass -> lookupReference.getChildren(childClass)",
                "-                                                        .forEach(child -> checkReferencesToObjectAndItsChildren(root,",
                "-                                                                                                                child)));",
                "-        checkReferences(root, lookupReference);",
                "+        if (!managesChildren(referrer))",
                "+        {",
                "+            getModel().getChildTypes(referrer.getCategoryClass())",
                "+                      .forEach(childClass -> referrer.getChildren(childClass)",
                "+                                                     .forEach(child -> checkReferencesOnDelete(referee, child)));",
                "+        }",
                "+        checkReferences(referee, referrer);",
                "     }",
                "@@ -2279,19 +2280,20 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private void checkReferences(final ConfiguredObject<?> object,",
                "-                                 final ConfiguredObject<?> lookupReference)",
                "+    private void checkReferences(final ConfiguredObject<?> referee, final ConfiguredObject<?> referrer)",
                "     {",
                "-        if (hasReference(object, lookupReference))",
                "+        if (hasReference(referee, referrer))",
                "         {",
                "             throw new IntegrityViolationException(String.format(\"%s '%s' is in use by %s '%s'\",",
                "-                                                                lookupReference.getCategoryClass().getSimpleName(),",
                "-                                                                lookupReference.getName(),",
                "-                                                                object.getCategoryClass().getSimpleName(),",
                "-                                                                object.getName()));",
                "+                                                                referrer.getCategoryClass().getSimpleName(),",
                "+                                                                referrer.getName(),",
                "+                                                                referee.getCategoryClass().getSimpleName(),",
                "+                                                                referee.getName()));",
                "         }",
                "-        if (!managesChildren(object))",
                "+        if (!managesChildren(referee))",
                "         {",
                "-            getModel().getChildTypes(object.getCategoryClass())",
                "-                      .forEach(childClass -> object.getChildren(childClass)",
                "-                                                   .forEach(child -> checkReferences(child, lookupReference)));",
                "+            getModel().getChildTypes(referee.getCategoryClass())",
                "+                      .forEach(childClass -> referee.getChildren(childClass)",
                "+                                                    .stream()",
                "+                                                    .filter(child -> child != this)",
                "+                                                    .forEach(child -> checkReferences(child, referrer)));",
                "         }",
                "@@ -2299,9 +2301,9 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private boolean hasReference(final ConfiguredObject<?> object,",
                "-                                 final ConfiguredObject<?> lookupReference)",
                "+    private boolean hasReference(final ConfiguredObject<?> referee,",
                "+                                 final ConfiguredObject<?> referrer)",
                "     {",
                "-        if (object instanceof AbstractConfiguredObject)",
                "+        if (referee instanceof AbstractConfiguredObject)",
                "         {",
                "             return getModel().getTypeRegistry()",
                "-                             .getAttributes(object.getClass())",
                "+                             .getAttributes(referee.getClass())",
                "                              .stream()",
                "@@ -2310,3 +2312,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                  Type genericType = attribute.getGenericType();",
                "-                                 return isReferred(lookupReference, type,",
                "+                                 return isReferred(referrer, type,",
                "                                                    genericType,",
                "@@ -2315,3 +2317,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                                        Object value =",
                "-                                                               ((ConfiguredObjectAttribute) attribute).getValue(object);",
                "+                                                               ((ConfiguredObjectAttribute) attribute).getValue(referee);",
                "                                                        return value;",
                "@@ -2322,8 +2324,8 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         {",
                "-            return object.getAttributeNames().stream().anyMatch(name -> {",
                "-                Object value = object.getAttribute(name);",
                "+            return referee.getAttributeNames().stream().anyMatch(name -> {",
                "+                Object value = referee.getAttribute(name);",
                "                 if (value != null)",
                "                 {",
                "-                   Class<?> type = value.getClass();",
                "-                   return isReferred(lookupReference, type, type, () -> value);",
                "+                    Class<?> type = value.getClass();",
                "+                    return isReferred(referrer, type, type, () -> value);",
                "                 }",
                "@@ -2332,6 +2334,5 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         }",
                "-",
                "     }",
                "-    private boolean isReferred(final ConfiguredObject<?> lookupReference,",
                "+    private boolean isReferred(final ConfiguredObject<?> referrer,",
                "                                final Class<?> attributeValueType,",
                "@@ -2340,8 +2341,8 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "     {",
                "-        final Class<? extends ConfiguredObject> lookupCategory = lookupReference.getCategoryClass();",
                "-        if (lookupCategory.isAssignableFrom(attributeValueType))",
                "+        final Class<? extends ConfiguredObject> referrerCategory = referrer.getCategoryClass();",
                "+        if (referrerCategory.isAssignableFrom(attributeValueType))",
                "         {",
                "-            return attributeValue.get() == lookupReference;",
                "+            return attributeValue.get() == referrer;",
                "         }",
                "-        else if (hasParameterOfType(attributeGenericType, lookupCategory))",
                "+        else if (hasParameterOfType(attributeGenericType, referrerCategory))",
                "         {",
                "@@ -2350,3 +2351,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "             {",
                "-                return ((Collection<?>) value).stream().anyMatch(m -> m == lookupReference);",
                "+                return ((Collection<?>) value).stream().anyMatch(m -> m == referrer);",
                "             }",
                "@@ -2354,3 +2355,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "             {",
                "-                return Arrays.stream((Object[]) value).anyMatch(m -> m == lookupReference);",
                "+                return Arrays.stream((Object[]) value).anyMatch(m -> m == referrer);",
                "             }",
                "@@ -2360,4 +2361,4 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                           .stream()",
                "-                                          .anyMatch(e -> e.getKey() == lookupReference",
                "-                                                         || e.getValue() == lookupReference);",
                "+                                          .anyMatch(e -> e.getKey() == referrer",
                "+                                                         || e.getValue() == referrer);",
                "             }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bad76bc362ec2d272e8cb1b5136a7d0d21909536"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c531ca0ac28e5fd457b4b114674867b3bd2ee093",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518047285,
            "hunks": 9,
            "message": "QPID-8091: [Broker-J] Add protocol tests for transaction timeout feature",
            "diff": [
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "index 3ec35adc76..da6790bf0b 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "@@ -31,2 +31,3 @@ public interface BrokerAdmin extends Pluggable",
                " {",
                "+    String KIND_BROKER_J = \"broker-j\";",
                "     String TEST_QUEUE_NAME = \"testQueue\";",
                "@@ -58,2 +59,5 @@ public interface BrokerAdmin extends Pluggable",
                "+    String getKind();",
                "+",
                "+    void configure(String settingName, Object settingValue);",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 6016f5617c..9fab318e6e 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -26,3 +26,2 @@ import java.net.InetSocketAddress;",
                " import java.nio.file.Files;",
                "-import java.security.Principal;",
                " import java.security.PrivilegedAction;",
                "@@ -400,2 +399,14 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "+    @Override",
                "+    public String getKind()",
                "+    {",
                "+        return KIND_BROKER_J;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void configure(final String settingName, final Object settingValue)",
                "+    {",
                "+        _currentVirtualHostNode.getVirtualHost().setAttributes(Collections.singletonMap(settingName, settingValue));",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "index f359053366..5f245460c8 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "@@ -157,2 +157,14 @@ public class ExternalQpidBrokerAdminImpl implements BrokerAdmin",
                "+    @Override",
                "+    public String getKind()",
                "+    {",
                "+        return KIND_BROKER_J;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void configure(final String settingName, final Object settingValue)",
                "+    {",
                "+        throw new UnsupportedOperationException(\"External Qpid Broker does not support configuring\");",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "index 02cec34df5..d3c9be6726 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java",
                "@@ -65,10 +65,18 @@ public class QpidTestRunner extends BlockJUnit4ClassRunner",
                "     {",
                "-        _brokerAdmin.beforeTestMethod(_testClass, method.getMethod());",
                "-        try",
                "+        BrokerSpecific brokerSpecific = method.getAnnotation(BrokerSpecific.class);",
                "+        if (brokerSpecific != null && !brokerSpecific.kind().equalsIgnoreCase(_brokerAdmin.getKind()))",
                "         {",
                "-            super.runChild(method, notifier);",
                "+            notifier.fireTestIgnored(describeChild(method));",
                "         }",
                "-        finally",
                "+        else",
                "         {",
                "-            _brokerAdmin.afterTestMethod(_testClass, method.getMethod());",
                "+            _brokerAdmin.beforeTestMethod(_testClass, method.getMethod());",
                "+            try",
                "+            {",
                "+                super.runChild(method, notifier);",
                "+            }",
                "+            finally",
                "+            {",
                "+                _brokerAdmin.afterTestMethod(_testClass, method.getMethod());",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/QpidTestRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f649224bff05bbd65d7256d932c136d99159b411"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5e1ae2dd6e059cf464cb7e7fa3373d656102bd37",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517482560,
            "hunks": 1,
            "message": "QPID-8067: [Broker-J] Fix an evaluation of start time for queue default arrival time filter",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java b/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "index 382a3ace9d..fc965dbafe 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "@@ -38,6 +38,4 @@ public final class ArrivalTimeFilterFactory implements MessageFilterFactory",
                "         }",
                "-        String arg = arguments.get(0);",
                "-        long startingFrom= Long.parseLong(arg);",
                "-",
                "-        return new ArrivalTimeFilter(System.currentTimeMillis() + startingFrom, startingFrom==0l);",
                "+        long periodInSeconds = Long.parseLong(arguments.get(0));",
                "+        return new ArrivalTimeFilter(System.currentTimeMillis() - periodInSeconds * 1000L, periodInSeconds == 0L);",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8067": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e5dce3c10fc96278a89661d490cdff9e506fbd01"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c04fdc9046e58ac5aff43b40288cb1deb141bfb",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515678904,
            "hunks": 31,
            "message": "QPID-8017: [Broker-J] [BDB] Add context variable that allows the JUL logging level of JUL loggers to be overridden. Cherry picked from 835efa5",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "index aa00932e33..ce4790c8fe 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                " import java.io.File;",
                "+import java.lang.reflect.Type;",
                " import java.util.Collection;",
                "@@ -78,5 +79,14 @@ public class BDBPreferenceStore extends AbstractBDBPreferenceStore",
                "                     @Override",
                "-                    public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+                    public <T> T getFacadeParameter(final Class<T> paremeterClass, final String parameterName, final T defaultValue)",
                "                     {",
                "-                        return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                        return BDBUtils.getContextValue(parent, paremeterClass, parameterName, defaultValue);",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public <T> T getFacadeParameter(final Class<T> paremeterClass,",
                "+                                                    final Type type,",
                "+                                                    final String parameterName,",
                "+                                                    final T defaultValue)",
                "+                    {",
                "+                        return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "                     }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "index 98fc2b3564..4b87636a24 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "@@ -21,2 +21,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Collections;",
                "@@ -28,3 +29,2 @@ import com.sleepycat.je.CacheMode;",
                " import com.sleepycat.je.CheckpointConfig;",
                "-import com.sleepycat.je.Cursor;",
                " import com.sleepycat.je.DatabaseConfig;",
                "@@ -37,3 +37,2 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "-import org.apache.qpid.server.store.StoreException;",
                " import org.apache.qpid.server.virtualhost.berkeleydb.BDBVirtualHost;",
                "@@ -162,3 +161,3 @@ public class BDBUtils",
                "     public static <T> T getContextValue(final ConfiguredObject<?> parent,",
                "-                                        Class<T> paremeterClass,",
                "+                                        final Class<T> paremeterClass,",
                "                                         final String parameterName,",
                "@@ -175,2 +174,18 @@ public class BDBUtils",
                "     }",
                "+",
                "+    public static <T> T getContextValue(final ConfiguredObject<?> parent,",
                "+                                        final Class<T> paremeterClass,",
                "+                                        final Type type,",
                "+                                        final String parameterName,",
                "+                                        final T defaultValue)",
                "+    {",
                "+        if (parent.getContextKeys(false).contains(parameterName))",
                "+        {",
                "+            return parent.getContextValue(paremeterClass, type, parameterName);",
                "+        }",
                "+        else",
                "+        {",
                "+            return defaultValue;",
                "+        }",
                "+    }",
                " }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "index 7a54b8b853..fcf6d78d93 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "@@ -56,2 +56,3 @@ public interface EnvironmentFacade",
                "     int DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT = 10;",
                "+    String JUL_LOGGER_LEVEL_OVERRIDE = \"qpid.bdb.je.jul_logger_level_override\";",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "index 38fe055fc1..c906d41160 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "@@ -21,2 +21,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -32,3 +33,6 @@ public interface StandardEnvironmentConfiguration",
                "-    int getFacadeParameter(String parameterName, int defaultValue);",
                "+    <T> T getFacadeParameter(final Class<T> paremeterClass, String parameterName, T defaultValue);",
                "+",
                "+    <T> T getFacadeParameter(Class<T> paremeterClass, Type type, String parameterName, T defaultValue);",
                "+",
                " }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "index 460d656518..271c54cb36 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "@@ -110,6 +110,3 @@ public class StandardEnvironmentFacade implements EnvironmentFacade",
                "         envConfig.setCacheMode(configuration.getCacheMode());",
                "-        int logHandlerCleanerProtectedFilesLimit = configuration.getFacadeParameter(LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "-                                                                                    DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "-        envConfig.setLoggingHandler(new Slf4jLoggingHandler(\"[\" + configuration.getName() + \"]\",",
                "-                                                            logHandlerCleanerProtectedFilesLimit));",
                "+        envConfig.setLoggingHandler(new Slf4jLoggingHandler(configuration));",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "index 9d8eab9689..08aabe2ff0 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -75,5 +76,11 @@ public class StandardEnvironmentFacadeFactory implements EnvironmentFacadeFactor",
                "             @Override",
                "-            public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+            public <T> T getFacadeParameter(final Class<T> clazz, final String parameterName, final T defaultValue)",
                "             {",
                "-                return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                return BDBUtils.getContextValue(parent, clazz, parameterName, defaultValue);",
                "+            }",
                "+",
                "+            @Override",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass, final Type type, final String parameterName, final T defaultValue)",
                "+            {",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "             }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "index 4848346a4e..e05dd7dbb4 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "@@ -22,5 +22,12 @@ package org.apache.qpid.server.store.berkeleydb.logging;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.JUL_LOGGER_LEVEL_OVERRIDE;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME;",
                "+import static org.apache.qpid.server.util.ParameterizedTypes.MAP_OF_STRING_STRING;",
                "+",
                " import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "@@ -39,2 +46,4 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.store.berkeleydb.StandardEnvironmentConfiguration;",
                "+",
                "@@ -42,2 +51,4 @@ public class Slf4jLoggingHandler extends Handler",
                " {",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(Slf4jLoggingHandler.class);",
                "+",
                "     private static Pattern NOT_DELETED_DUE_TO_PROTECTION = Pattern.compile(\"Cleaner has ([0-9]+) files not deleted because they are protected.*\");",
                "@@ -46,5 +57,8 @@ public class Slf4jLoggingHandler extends Handler",
                "     private final int _logHandlerCleanerProtectedFilesLimit;",
                "+    private final String _prefix;",
                "+    private final Set<java.util.logging.Logger> _overridedenLoggers = new HashSet<>();",
                "-    public Slf4jLoggingHandler(final String prefix, final int logHandlerCleanerProtectedFilesLimit)",
                "+    public Slf4jLoggingHandler(final StandardEnvironmentConfiguration configuration)",
                "     {",
                "+        _prefix = configuration.getName();",
                "         setFormatter(new Formatter()",
                "@@ -54,6 +68,46 @@ public class Slf4jLoggingHandler extends Handler",
                "             {",
                "-                return prefix + \" \" + formatMessage(record);",
                "+                return _prefix + \" \" + formatMessage(record);",
                "+            }",
                "+        });",
                "+",
                "+        _logHandlerCleanerProtectedFilesLimit = configuration.getFacadeParameter(Integer.class,",
                "+                                                                                 LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "+                                                                                 DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "+",
                "+        final Map<String, String> levelOverrides = configuration.getFacadeParameter(Map.class,",
                "+                                                                                    MAP_OF_STRING_STRING,",
                "+                                                                                    JUL_LOGGER_LEVEL_OVERRIDE,",
                "+                                                                                    Collections.emptyMap());",
                "+        applyJulLoggerLevelOverrides(levelOverrides);",
                "+    }",
                "+",
                "+    private void applyJulLoggerLevelOverrides(final Map<String, String> julLoggerLevelOverrides)",
                "+    {",
                "+        julLoggerLevelOverrides.forEach((julLoggerName, julDesiredLevelString) -> {",
                "+            Level julDesiredLevel;",
                "+            try",
                "+            {",
                "+                julDesiredLevel = Level.parse(julDesiredLevelString);",
                "+            }",
                "+            catch (IllegalArgumentException e)",
                "+            {",
                "+                julDesiredLevel = null;",
                "+                LOGGER.warn(\"Unrecognised JUL level name '{}' in JUL override for logger name '{}'\",",
                "+                            julDesiredLevelString, julLoggerName);",
                "+            }",
                "+",
                "+            if (julDesiredLevel != null)",
                "+            {",
                "+                java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(julLoggerName);",
                "+                if (julLogger.getLevel() == null || !julLogger.isLoggable(julDesiredLevel))",
                "+                {",
                "+                    _overridedenLoggers.add(julLogger);  // Retain reference in case logger is not yet held by the class",
                "+                    julLogger.setLevel(julDesiredLevel);",
                "+",
                "+                    LOGGER.warn(\"JUL logger {} overridden to level {}\",",
                "+                                julLogger.getName(),",
                "+                                julLogger.getLevel());",
                "+                }",
                "             }",
                "         });",
                "-        _logHandlerCleanerProtectedFilesLimit = logHandlerCleanerProtectedFilesLimit;",
                "     }",
                "@@ -269,2 +323,3 @@ public class Slf4jLoggingHandler extends Handler",
                "     {",
                "+        _overridedenLoggers.clear();",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "index 24d2382e50..c5fe0d9250 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "@@ -255,9 +255,18 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "-        _masterTransferTimeout = configuration.getFacadeParameter(MASTER_TRANSFER_TIMEOUT_PROPERTY_NAME, DEFAULT_MASTER_TRANSFER_TIMEOUT);",
                "-        _dbPingSocketTimeout = configuration.getFacadeParameter(DB_PING_SOCKET_TIMEOUT_PROPERTY_NAME, DEFAULT_DB_PING_SOCKET_TIMEOUT);",
                "-        _remoteNodeMonitorInterval = configuration.getFacadeParameter(REMOTE_NODE_MONITOR_INTERVAL_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_INTERVAL);",
                "-        _remoteNodeMonitorTimeout = configuration.getFacadeParameter(REMOTE_NODE_MONITOR_TIMEOUT_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_TIMEOUT);",
                "-        _environmentRestartRetryLimit = configuration.getFacadeParameter(ENVIRONMENT_RESTART_RETRY_LIMIT_PROPERTY_NAME, DEFAULT_ENVIRONMENT_RESTART_RETRY_LIMIT);",
                "-        _executorShutdownTimeout = configuration.getFacadeParameter(EXECUTOR_SHUTDOWN_TIMEOUT_PROPERTY_NAME, DEFAULT_EXECUTOR_SHUTDOWN_TIMEOUT);",
                "-        _logHandlerCleanerProtectedFilesLimit = _configuration.getFacadeParameter(LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "+        _masterTransferTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                  MASTER_TRANSFER_TIMEOUT_PROPERTY_NAME,",
                "+                                                                  DEFAULT_MASTER_TRANSFER_TIMEOUT);",
                "+        _dbPingSocketTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                DB_PING_SOCKET_TIMEOUT_PROPERTY_NAME, DEFAULT_DB_PING_SOCKET_TIMEOUT);",
                "+        _remoteNodeMonitorInterval = configuration.getFacadeParameter(Integer.class,",
                "+                                                                      REMOTE_NODE_MONITOR_INTERVAL_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_INTERVAL);",
                "+        _remoteNodeMonitorTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                     REMOTE_NODE_MONITOR_TIMEOUT_PROPERTY_NAME,",
                "+                                                                     DEFAULT_REMOTE_NODE_MONITOR_TIMEOUT);",
                "+        _environmentRestartRetryLimit = configuration.getFacadeParameter(Integer.class,",
                "+                                                                         ENVIRONMENT_RESTART_RETRY_LIMIT_PROPERTY_NAME, DEFAULT_ENVIRONMENT_RESTART_RETRY_LIMIT);",
                "+        _executorShutdownTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                    EXECUTOR_SHUTDOWN_TIMEOUT_PROPERTY_NAME, DEFAULT_EXECUTOR_SHUTDOWN_TIMEOUT);",
                "+        _logHandlerCleanerProtectedFilesLimit = _configuration.getFacadeParameter(Integer.class,",
                "+                                                                                  LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "                                                                                   DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "@@ -1487,3 +1496,3 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "-        envConfig.setLoggingHandler(new Slf4jLoggingHandler(\"[\" + _configuration.getName() + \"]\", _logHandlerCleanerProtectedFilesLimit));",
                "+        envConfig.setLoggingHandler(new Slf4jLoggingHandler(_configuration));",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "index 1e7c6072b1..d6f6ea43b7 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb.replication;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -114,7 +115,15 @@ public class ReplicatedEnvironmentFacadeFactory implements EnvironmentFacadeFact",
                "             @Override",
                "-            public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass, final String parameterName, final T defaultValue)",
                "             {",
                "-                return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, parameterName, defaultValue);",
                "             }",
                "+            @Override",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass,",
                "+                                            final Type type,",
                "+                                            final String parameterName,",
                "+                                            final T defaultValue)",
                "+            {",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "+            }",
                "         };"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8017": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "835efa54b82d9780d4f59a2363919d302b68a10d"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8017",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cec889db6d0df6624d45a84fe5e23721a33c83f5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520869515,
            "hunks": 5,
            "message": "NO-JIRA: [Broker-J] [System Tests] Remove Rest ACL Tests",
            "diff": [
                "diff --git a/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java b/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "index c0cc77e85e..be0dd542ff 100644",
                "--- a/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "+++ b/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "@@ -22,31 +22,7 @@ package org.apache.qpid.systest.rest;",
                "-import static org.junit.Assert.assertEquals;",
                "-import static org.junit.Assert.assertNotNull;",
                "-",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.HashSet;",
                " import java.util.Map;",
                "-import javax.jms.JMSException;",
                "-",
                " import junit.framework.TestCase;",
                "-import org.apache.qpid.server.model.Broker;",
                "-import org.apache.qpid.server.model.BrokerModel;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "-import org.apache.qpid.server.model.Connection;",
                "-import org.apache.qpid.server.model.Exchange;",
                "-import org.apache.qpid.server.model.ExclusivityPolicy;",
                "-import org.apache.qpid.server.model.LifetimePolicy;",
                "-import org.apache.qpid.server.model.Port;",
                "-import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.State;",
                "-import org.apache.qpid.server.model.VirtualHost;",
                "-import org.apache.qpid.server.model.VirtualHostNode;",
                "-import org.apache.qpid.server.queue.LastValueQueue;",
                "-import org.apache.qpid.server.queue.PriorityQueue;",
                "-import org.apache.qpid.server.queue.SortedQueue;",
                "-import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "-import org.apache.qpid.test.utils.TestBrokerConfiguration;",
                "@@ -56,312 +32,2 @@ public class Asserts",
                "-    public static void assertVirtualHostNode(final String nodeName, final Map<String, Object> node)",
                "-    {",
                "-        assertNotNull(\"Virtualhostnode \" + nodeName + \" data is not found\", node);",
                "-        assertEquals(\"Unexpected value of attribute \" + VirtualHostNode.NAME,",
                "-                     nodeName,",
                "-                     node.get(VirtualHostNode.NAME));",
                "-    }",
                "-",
                "-    public static void assertVirtualHost(String virtualHostName, Map<String, Object> virtualHost)",
                "-    {",
                "-        assertNotNull(\"Virtualhost \" + virtualHostName + \" data are not found\", virtualHost);",
                "-        assertAttributesPresent(virtualHost,",
                "-                                BrokerModel.getInstance().getTypeRegistry().getAttributeNames(VirtualHost.class),",
                "-                                ConfiguredObject.CREATED_BY,",
                "-                                ConfiguredObject.CREATED_TIME,",
                "-                                ConfiguredObject.LAST_UPDATED_BY,",
                "-                                ConfiguredObject.LAST_UPDATED_TIME,",
                "-                                ConfiguredObject.DESCRIPTION,",
                "-                                ConfiguredObject.CONTEXT,",
                "-                                ConfiguredObject.DESIRED_STATE,",
                "-                                QueueManagingVirtualHost.ENABLED_CONNECTION_VALIDATORS,",
                "-                                QueueManagingVirtualHost.DISABLED_CONNECTION_VALIDATORS,",
                "-                                QueueManagingVirtualHost.GLOBAL_ADDRESS_DOMAINS,",
                "-                                VirtualHost.TYPE,",
                "-                                VirtualHost.PREFERENCE_STORE_ATTRIBUTES);",
                "-",
                "-        assertEquals(\"Unexpected value of attribute \" + VirtualHost.NAME,",
                "-                     virtualHostName,",
                "-                     virtualHost.get(VirtualHost.NAME));",
                "-        assertNotNull(\"Unexpected value of attribute \" + VirtualHost.ID, virtualHost.get(VirtualHost.ID));",
                "-        assertEquals(\"Unexpected value of attribute \" + VirtualHost.STATE, State.ACTIVE.name(),",
                "-                     virtualHost.get(VirtualHost.STATE));",
                "-        assertEquals(\"Unexpected value of attribute \" + VirtualHost.DURABLE, Boolean.TRUE,",
                "-                     virtualHost.get(VirtualHost.DURABLE));",
                "-        assertEquals(\"Unexpected value of attribute \" + VirtualHost.LIFETIME_POLICY, LifetimePolicy.PERMANENT.name(),",
                "-                     virtualHost.get(VirtualHost.LIFETIME_POLICY));",
                "-",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Map<String, Object> statistics = (Map<String, Object>) virtualHost.get(STATISTICS_ATTRIBUTE);",
                "-        Asserts.assertAttributesPresent(statistics,",
                "-                                        \"queueCount\",\"exchangeCount\",\"bytesIn\",\"bytesOut\",\"messagesIn\", \"messagesOut\");",
                "-",
                "-    }",
                "-",
                "-    public static void assertQueue(String queueName, String queueType, Map<String, Object> queueData)",
                "-    {",
                "-        assertQueue(queueName, queueType, queueData, null);",
                "-    }",
                "-",
                "-    public static void assertQueue(String queueName,",
                "-                                   String queueType,",
                "-                                   Map<String, Object> queueData,",
                "-                                   Map<String, Object> expectedAttributes)",
                "-    {",
                "-        assertNotNull(\"Queue \" + queueName + \" is not found!\", queueData);",
                "-        Asserts.assertAttributesPresent(queueData,",
                "-                                        BrokerModel.getInstance().getTypeRegistry().getAttributeNames(Queue.class),",
                "-                                        Queue.CREATED_BY,",
                "-                                        Queue.CREATED_TIME,",
                "-                                        Queue.LAST_UPDATED_BY,",
                "-                                        Queue.LAST_UPDATED_TIME,",
                "-                                        Queue.TYPE,",
                "-                                        Queue.DESCRIPTION,",
                "-                                        Queue.ALTERNATE_BINDING,",
                "-                                        Queue.OWNER,",
                "-                                        Queue.NO_LOCAL,",
                "-                                        LastValueQueue.LVQ_KEY,",
                "-                                        SortedQueue.SORT_KEY,",
                "-                                        Queue.MESSAGE_GROUP_KEY_OVERRIDE,",
                "-                                        Queue.MESSAGE_GROUP_TYPE,",
                "-                                        PriorityQueue.PRIORITIES,",
                "-                                        ConfiguredObject.CONTEXT,",
                "-                                        ConfiguredObject.DESIRED_STATE,",
                "-                                        Queue.DEFAULT_FILTERS,",
                "-                                        Queue.ENSURE_NONDESTRUCTIVE_CONSUMERS,",
                "-                                        Queue.CREATING_LINK_INFO);",
                "-",
                "-        assertEquals(\"Unexpected value of queue attribute \" + Queue.NAME, queueName, queueData.get(Queue.NAME));",
                "-        assertNotNull(\"Unexpected value of queue attribute \" + Queue.ID, queueData.get(Queue.ID));",
                "-        assertEquals(\"Unexpected value of queue attribute \" + Queue.STATE,",
                "-                     State.ACTIVE.name(),",
                "-                     queueData.get(Queue.STATE));",
                "-        assertEquals(\"Unexpected value of queue attribute \" + Queue.LIFETIME_POLICY, LifetimePolicy.PERMANENT.name(),",
                "-                     queueData.get(Queue.LIFETIME_POLICY));",
                "-        assertEquals(\"Unexpected value of queue attribute \" + Queue.TYPE,",
                "-                     queueType,",
                "-                     queueData.get(Queue.TYPE));",
                "-        if (expectedAttributes == null)",
                "-        {",
                "-            assertEquals(\"Unexpected value of queue attribute \" + Queue.EXCLUSIVE,",
                "-                         ExclusivityPolicy.NONE.name(), queueData.get(Queue.EXCLUSIVE));",
                "-            assertEquals(\"Unexpected value of queue attribute \" + Queue.MAXIMUM_DELIVERY_ATTEMPTS, 0,",
                "-                         queueData.get(Queue.MAXIMUM_DELIVERY_ATTEMPTS));",
                "-            assertEquals(\"Unexpected value of queue attribute \" + Queue.MAXIMUM_QUEUE_DEPTH_MESSAGES, -1,",
                "-                         queueData.get(Queue.MAXIMUM_QUEUE_DEPTH_MESSAGES));",
                "-            assertEquals(\"Unexpected value of queue attribute \" + Queue.QUEUE_FLOW_STOPPED, Boolean.FALSE,",
                "-                         queueData.get(Queue.QUEUE_FLOW_STOPPED));",
                "-        }",
                "-        else",
                "-        {",
                "-            for (Map.Entry<String, Object> attribute : expectedAttributes.entrySet())",
                "-            {",
                "-                assertEquals(\"Unexpected value of \" + queueName + \" queue attribute \" + attribute.getKey(),",
                "-                             attribute.getValue(), queueData.get(attribute.getKey()));",
                "-            }",
                "-        }",
                "-",
                "-        assertNotNull(\"Unexpected value of queue attribute statistics\", queueData.get(Asserts.STATISTICS_ATTRIBUTE));",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Map<String, Object> statistics = (Map<String, Object>) queueData.get(Asserts.STATISTICS_ATTRIBUTE);",
                "-",
                "-        Asserts.assertAttributesPresent(statistics,",
                "-                                        \"bindingCount\",",
                "-                                        \"consumerCount\",",
                "-                                        \"consumerCountWithCredit\",",
                "-                                        \"persistentDequeuedBytes\",",
                "-                                        \"persistentDequeuedMessages\",",
                "-                                        \"persistentEnqueuedBytes\",",
                "-                                        \"persistentEnqueuedMessages\",",
                "-                                        \"queueDepthBytes\",",
                "-                                        \"queueDepthMessages\",",
                "-                                        \"totalDequeuedBytes\",",
                "-                                        \"totalDequeuedMessages\",",
                "-                                        \"totalEnqueuedBytes\",",
                "-                                        \"totalEnqueuedMessages\",",
                "-                                        \"unacknowledgedBytes\",",
                "-                                        \"unacknowledgedMessages\");",
                "-    }",
                "-",
                "-    public static void assertAttributesPresent(Map<String, Object> data, String... attributes)",
                "-    {",
                "-        for (String name : attributes)",
                "-        {",
                "-            assertNotNull(\"Attribute \" + name + \" is not present\", data.get(name));",
                "-        }",
                "-    }",
                "-",
                "-    public static void assertAttributesPresent(Map<String, Object> data, Collection<String> attributes,",
                "-                                               String... unsupportedAttributes)",
                "-    {",
                "-        for (String name : attributes)",
                "-        {",
                "-            boolean unsupported = false;",
                "-            for (String unsupportedAttribute : unsupportedAttributes)",
                "-            {",
                "-                if (unsupportedAttribute.equals(name))",
                "-                {",
                "-                    unsupported = true;",
                "-                    break;",
                "-                }",
                "-            }",
                "-            if (unsupported)",
                "-            {",
                "-                continue;",
                "-            }",
                "-            assertNotNull(\"Attribute \" + name + \" is not present\", data.get(name));",
                "-        }",
                "-    }",
                "-",
                "-    public static void assertConnection(Map<String, Object> connectionData, final int sessions)",
                "-            throws JMSException",
                "-    {",
                "-        assertNotNull(\"Unexpected connection data\", connectionData);",
                "-        assertAttributesPresent(connectionData,",
                "-                                BrokerModel.getInstance().getTypeRegistry().getAttributeNames(Connection.class),",
                "-                                Connection.STATE,",
                "-                                Connection.DURABLE,",
                "-                                Connection.LIFETIME_POLICY,",
                "-                                Connection.INCOMING,",
                "-                                Connection.REMOTE_PROCESS_NAME,",
                "-                                Connection.REMOTE_PROCESS_PID,",
                "-                                Connection.LOCAL_ADDRESS,",
                "-                                Connection.PROPERTIES,",
                "-                                ConfiguredObject.TYPE,",
                "-                                ConfiguredObject.CREATED_BY,",
                "-                                ConfiguredObject.CREATED_TIME,",
                "-                                ConfiguredObject.LAST_UPDATED_BY,",
                "-                                ConfiguredObject.LAST_UPDATED_TIME,",
                "-                                ConfiguredObject.DESCRIPTION,",
                "-                                ConfiguredObject.CONTEXT,",
                "-                                ConfiguredObject.DESIRED_STATE);",
                "-",
                "-        assertEquals(\"Unexpected value for connection attribute \" + Connection.PORT,",
                "-                     TestBrokerConfiguration.ENTRY_NAME_AMQP_PORT, connectionData.get(Connection.PORT));",
                "-        assertEquals(\"Unexpected value of connection attribute \" + Connection.PRINCIPAL, \"guest\",",
                "-                     connectionData.get(Connection.PRINCIPAL));",
                "-",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Map<String, Object> statistics = (Map<String, Object>) connectionData.get(STATISTICS_ATTRIBUTE);",
                "-",
                "-",
                "-        assertAttributesPresent(statistics,",
                "-                                \"bytesIn\",",
                "-                                \"bytesOut\",",
                "-                                \"lastIoTime\",",
                "-                                \"messagesIn\",",
                "-                                \"messagesOut\",",
                "-                                \"sessionCount\");",
                "-        assertEquals(\"Unexpected value of connection statistics attribute sessionCount \", sessions,",
                "-                     statistics.get(\"sessionCount\"));",
                "-    }",
                "-",
                "-    public static void assertPortAttributes(Map<String, Object> port)",
                "-    {",
                "-        assertPortAttributes(port, State.ACTIVE);",
                "-    }",
                "-",
                "-    public static void assertPortAttributes(Map<String, Object> port, State state)",
                "-    {",
                "-        assertNotNull(\"Unexpected value of attribute \" + Port.ID, port.get(Port.ID));",
                "-        assertEquals(\"Unexpected value of attribute \" + Port.DURABLE, Boolean.TRUE, port.get(Port.DURABLE));",
                "-        assertEquals(\"Unexpected value of attribute \" + Port.LIFETIME_POLICY, LifetimePolicy.PERMANENT.name(),",
                "-                     port.get(Broker.LIFETIME_POLICY));",
                "-        assertEquals(\"Unexpected value of attribute \" + Port.STATE, state.name(), port.get(Port.STATE));",
                "-",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Collection<String> protocols = (Collection<String>) port.get(Port.PROTOCOLS);",
                "-",
                "-        if (\"AMQP\".equals(port.get(ConfiguredObject.TYPE)))",
                "-        {",
                "-            assertAttributesPresent(port,",
                "-                                    BrokerModel.getInstance().getTypeRegistry().getAttributeNames(Port.class),",
                "-                                    ConfiguredObject.TYPE,",
                "-                                    ConfiguredObject.CREATED_BY,",
                "-                                    ConfiguredObject.CREATED_TIME,",
                "-                                    ConfiguredObject.LAST_UPDATED_BY,",
                "-                                    ConfiguredObject.LAST_UPDATED_TIME,",
                "-                                    ConfiguredObject.DESCRIPTION,",
                "-                                    ConfiguredObject.CONTEXT,",
                "-                                    ConfiguredObject.DESIRED_STATE,",
                "-                                    Port.AUTHENTICATION_PROVIDER,",
                "-                                    Port.KEY_STORE,",
                "-                                    Port.TRUST_STORES,",
                "-                                    Port.PROTOCOLS,",
                "-                                    Port.CLIENT_CERT_RECORDER);",
                "-            assertNotNull(\"Unexpected value of attribute \" + Port.BINDING_ADDRESS, port.get(Port.BINDING_ADDRESS));",
                "-        }",
                "-        else",
                "-        {",
                "-            assertAttributesPresent(port,",
                "-                                    BrokerModel.getInstance().getTypeRegistry().getAttributeNames(Port.class),",
                "-                                    ConfiguredObject.TYPE,",
                "-                                    ConfiguredObject.CREATED_BY,",
                "-                                    ConfiguredObject.CREATED_TIME,",
                "-                                    ConfiguredObject.LAST_UPDATED_BY,",
                "-                                    ConfiguredObject.LAST_UPDATED_TIME,",
                "-                                    ConfiguredObject.DESCRIPTION,",
                "-                                    ConfiguredObject.CONTEXT,",
                "-                                    ConfiguredObject.DESIRED_STATE,",
                "-                                    Port.AUTHENTICATION_PROVIDER,",
                "-                                    Port.BINDING_ADDRESS,",
                "-                                    Port.TCP_NO_DELAY,",
                "-                                    Port.NEED_CLIENT_AUTH,",
                "-                                    Port.WANT_CLIENT_AUTH,",
                "-                                    Port.KEY_STORE,",
                "-                                    Port.TRUST_STORES,",
                "-                                    Port.PROTOCOLS,",
                "-                                    Port.CLIENT_CERT_RECORDER);",
                "-        }",
                "-",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Collection<String> transports = (Collection<String>) port.get(Port.TRANSPORTS);",
                "-        assertEquals(\"Unexpected value of attribute \" + Port.TRANSPORTS, new HashSet<String>(Arrays.asList(\"TCP\")),",
                "-                     new HashSet<String>(transports));",
                "-    }",
                "-",
                "-    public static void assertDurableExchange(String exchangeName, String type, Map<String, Object> exchangeData)",
                "-    {",
                "-        assertExchange(exchangeName, type, exchangeData);",
                "-",
                "-        assertEquals(\"Unexpected value of exchange attribute \" + Exchange.DURABLE, Boolean.TRUE,",
                "-                     exchangeData.get(Exchange.DURABLE));",
                "-    }",
                "-",
                "-    public static void assertExchange(String exchangeName, String type, Map<String, Object> exchangeData)",
                "-    {",
                "-        assertNotNull(\"Exchange \" + exchangeName + \" is not found!\", exchangeData);",
                "-        assertAttributesPresent(exchangeData, BrokerModel.getInstance().getTypeRegistry().getAttributeNames(Exchange.class),",
                "-                                Exchange.ALTERNATE_BINDING,",
                "-                                ConfiguredObject.CREATED_BY,",
                "-                                ConfiguredObject.CREATED_TIME,",
                "-                                ConfiguredObject.LAST_UPDATED_BY,",
                "-                                ConfiguredObject.LAST_UPDATED_TIME,",
                "-                                ConfiguredObject.DESCRIPTION,",
                "-                                ConfiguredObject.CONTEXT,",
                "-                                ConfiguredObject.DESIRED_STATE,",
                "-                                Exchange.CREATING_LINK_INFO);",
                "-",
                "-        assertEquals(\"Unexpected value of exchange attribute \" + Exchange.NAME, exchangeName,",
                "-                     exchangeData.get(Exchange.NAME));",
                "-        assertNotNull(\"Unexpected value of exchange attribute \" + Exchange.ID, exchangeData.get(VirtualHost.ID));",
                "-        assertEquals(\"Unexpected value of exchange attribute \" + Exchange.STATE, State.ACTIVE.name(),",
                "-                     exchangeData.get(Exchange.STATE));",
                "-",
                "-        assertEquals(\"Unexpected value of exchange attribute \" + Exchange.LIFETIME_POLICY,",
                "-                     LifetimePolicy.PERMANENT.name(),",
                "-                     exchangeData.get(Exchange.LIFETIME_POLICY));",
                "-        assertEquals(\"Unexpected value of exchange attribute \" + Exchange.TYPE, type, exchangeData.get(Exchange.TYPE));",
                "-        assertNotNull(\"Unexpected value of exchange attribute statistics\", exchangeData.get(STATISTICS_ATTRIBUTE));",
                "-",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        Map<String, Object> statistics = (Map<String, Object>) exchangeData.get(STATISTICS_ATTRIBUTE);",
                "-",
                "-        assertAttributesPresent(statistics,\"bindingCount\",",
                "-                                \"bytesDropped\",",
                "-                                \"bytesIn\",",
                "-                                \"messagesDropped\",",
                "-                                \"messagesIn\");",
                "-    }",
                "-"
            ],
            "changed_files": [
                "systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "59048193c5df0e74302024b3776c0b84ed13eec0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516226476,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move broker system test MessageCompressionTest into MessageContentCompressionRestTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 78511ee4c7..ba925a17f3 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -108,3 +108,3 @@ org.apache.qpid.transport.ProtocolNegotiationTest#testNoConnectionOpenSent_Broke",
                " // QPID-6000 : Tests Qpid Broker-J specific message compression functionality, and uses the REST API to test it",
                "-org.apache.qpid.systest.MessageCompressionTest#*",
                "+org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 570e0ba63d..d52d70ec41 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -63,3 +63,3 @@ org.apache.qpid.systest.messageencryption.MessageEncryptionTest#*",
                " // Message compression not currently supported by the 1.0 client",
                "-org.apache.qpid.systest.MessageCompressionTest#*",
                "+org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c8593eb3615b739c9efbca3275f9f61de535a77d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524560441,
            "hunks": 1,
            "message": "QPID-8171: [Broker-J] Failed to start broker under Windows when QPID_JAVA_GC is set This closes #6     https://github.com/apache/qpid-broker-j/pull/6 The patch was supplied Cyril MICOUD <cmicoud@vitechnology.com> (cherry picked from commit 78fe397ad6d5f148682232d1a1e56a293b7d4c08)",
            "diff": [
                "diff --git a/broker/bin/qpid-server.bat b/broker/bin/qpid-server.bat",
                "index a323ac2093..1350d68ef1 100755",
                "--- a/broker/bin/qpid-server.bat",
                "+++ b/broker/bin/qpid-server.bat",
                "@@ -173,3 +173,3 @@ set JAVA_GC=%QPID_JAVA_GC%",
                " echo Using QPID_JAVA_GC setting: %QPID_JAVA_GC%",
                "-goto afteQpidJavaGC",
                "+goto afterQpidJavaGC"
            ],
            "changed_files": [
                "broker/bin/qpid-server.bat"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8171": ""
            },
            "ghissue_refs": {
                "6": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "78fe397ad6d5f148682232d1a1e56a293b7d4c08"
                ]
            ],
            "tags": [
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8171",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 6",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bce93dfb642ef30a87227377d71c588b084d7d04",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517407383,
            "hunks": 20,
            "message": "QPID-8066: [Broker-J] Fix jdbc store deletion on removal of Virtual Host Node or/and Virtual Host",
            "diff": [
                "diff --git a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "index 1b6a2b4a7e..ee6c8a22cb 100644",
                "--- a/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "+++ b/broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "@@ -232,2 +232,15 @@ public class DerbyConfigurationStore extends AbstractJDBCConfigurationStore",
                "+        @Override",
                "+        public void onDelete(final ConfiguredObject<?> parent)",
                "+        {",
                "+            try(Connection connection = DerbyConfigurationStore.this.getConnection())",
                "+            {",
                "+                onDelete(connection);",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                throw new StoreException(\"Cannot get connection to perform deletion\", e);",
                "+            }",
                "+        }",
                "+",
                "         @Override",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "index e10935ad48..1aac9c73a3 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "@@ -141,3 +141,3 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "-    private String getConfiguredObjectsTableName()",
                "+    String getConfiguredObjectsTableName()",
                "     {",
                "@@ -146,3 +146,3 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "-    private String getConfiguredObjectHierarchyTableName()",
                "+    String getConfiguredObjectHierarchyTableName()",
                "     {",
                "@@ -821,40 +821,7 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "-    @Override",
                "-    public void onDelete(ConfiguredObject<?> parent)",
                "+    void onDelete(final Connection conn) throws SQLException",
                "     {",
                "-        // TODO should probably check we are closed",
                "-        try",
                "-        {",
                "-            Connection conn = newAutoCommitConnection();",
                "-            try",
                "-            {",
                "-",
                "-                for (String tableName : Arrays.asList(",
                "-                        getConfiguredObjectsTableName(),",
                "-                        getConfiguredObjectHierarchyTableName()))",
                "-                {",
                "-                    Statement stmt = conn.createStatement();",
                "-                    try",
                "-                    {",
                "-                        stmt.execute(\"DROP TABLE \" +  tableName);",
                "-                    }",
                "-                    catch(SQLException e)",
                "-                    {",
                "-                        getLogger().warn(\"Failed to drop table '\" + tableName + \"' :\" + e);",
                "-                    }",
                "-                    finally",
                "-                    {",
                "-                        stmt.close();",
                "-                    }",
                "-                }",
                "-            }",
                "-            finally",
                "-            {",
                "-                conn.close();",
                "-            }",
                "-        }",
                "-        catch(SQLException e)",
                "-        {",
                "-            getLogger().error(\"Exception while deleting store tables\", e);",
                "-        }",
                "+        JdbcUtils.dropTables(conn,",
                "+                             getLogger(),",
                "+                             Arrays.asList(getConfiguredObjectsTableName(), getConfiguredObjectHierarchyTableName()));",
                "     }",
                "@@ -915,3 +882,3 @@ public abstract class AbstractJDBCConfigurationStore implements MessageStoreProv",
                "-    private final void assertState(State state)",
                "+    protected final void assertState(State state)",
                "     {",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "index aeff70e7c2..c12e2233ee 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "@@ -702,6 +702,2 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "-    public void onOpen(final ConfiguredObject<?> parent)",
                "-    {",
                "-    }",
                "-",
                "     protected void setTablePrefix(final String tablePrefix)",
                "@@ -1820,25 +1816,5 @@ public abstract class AbstractJDBCMessageStore implements MessageStore",
                "-    @Override",
                "-    public void onDelete(ConfiguredObject<?> parent)",
                "+    protected void onDelete(final Connection conn)",
                "     {",
                "-        // TODO should probably check we are closed",
                "-        try (Connection conn = newAutoCommitConnection())",
                "-        {",
                "-",
                "-            for (String tableName : getTableNames())",
                "-            {",
                "-                try (Statement stmt = conn.createStatement())",
                "-                {",
                "-                    stmt.execute(\"DROP TABLE \" + tableName);",
                "-                }",
                "-                catch (SQLException e)",
                "-                {",
                "-                    getLogger().warn(\"Failed to drop table '{}'\", tableName, e);",
                "-                }",
                "-            }",
                "-        }",
                "-        catch (SQLException e)",
                "-        {",
                "-            getLogger().error(\"Exception while deleting store tables\", e);",
                "-        }",
                "+        JdbcUtils.dropTables(conn, getLogger(), getTableNames());",
                "     }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "index a4d537f3f6..a5f5fe1789 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "@@ -32,6 +32,2 @@ import java.sql.ResultSet;",
                " import java.sql.SQLException;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "@@ -98,39 +94,3 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "-        String connectionPoolType = settings.getConnectionPoolType() == null",
                "-                ? DefaultConnectionProviderFactory.TYPE",
                "-                : settings.getConnectionPoolType();",
                "-",
                "-        JDBCConnectionProviderFactory connectionProviderFactory =",
                "-                JDBCConnectionProviderFactory.FACTORIES.get(connectionPoolType);",
                "-        if (connectionProviderFactory == null)",
                "-        {",
                "-            LOGGER.warn(\"Unknown connection pool type: \"",
                "-                        + connectionPoolType",
                "-                        + \".  no connection pooling will be used\");",
                "-            connectionProviderFactory = new DefaultConnectionProviderFactory();",
                "-        }",
                "-",
                "-        try",
                "-        {",
                "-            Map<String, String> providerAttributes = new HashMap<>();",
                "-            Set<String> providerAttributeNames =",
                "-                    new HashSet<String>(connectionProviderFactory.getProviderAttributeNames());",
                "-            providerAttributeNames.retainAll(parent.getContextKeys(false));",
                "-            for (String attr : providerAttributeNames)",
                "-            {",
                "-                providerAttributes.put(attr, parent.getContextValue(String.class, attr));",
                "-            }",
                "-",
                "-            _connectionProvider = connectionProviderFactory.getConnectionProvider(_connectionURL,",
                "-                                                                                  settings.getUsername(),",
                "-                                                                                  settings.getPassword(),",
                "-                                                                                  providerAttributes);",
                "-        }",
                "-        catch (SQLException e)",
                "-        {",
                "-            throw new StoreException(String.format(",
                "-                    \"Failed to create connection provider for connectionUrl: '%s' and username: '%s'\",",
                "-                    _connectionURL,",
                "-                    settings.getUsername()), e);",
                "-        }",
                "+        _connectionProvider = JdbcUtils.createConnectionProvider(parent, LOGGER);",
                "         _blobType = details.getBlobType();",
                "@@ -170,2 +130,32 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "+    @Override",
                "+    public void onDelete(final ConfiguredObject<?> parent)",
                "+    {",
                "+        assertState(CLOSED);",
                "+        ConnectionProvider connectionProvider = JdbcUtils.createConnectionProvider(parent, LOGGER);",
                "+        try",
                "+        {",
                "+            try (Connection conn = connectionProvider.getConnection())",
                "+            {",
                "+                conn.setAutoCommit(true);",
                "+                onDelete(conn);",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                getLogger().error(\"Exception while deleting store tables\", e);",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            try",
                "+            {",
                "+                connectionProvider.close();",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                LOGGER.warn(\"Unable to close connection provider \", e);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -278,2 +268,15 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "+        @Override",
                "+        public void onDelete(final ConfiguredObject<?> parent)",
                "+        {",
                "+            try(Connection connection = GenericJDBCConfigurationStore.this.getConnection())",
                "+            {",
                "+                onDelete(connection);",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                throw new StoreException(\"Cannot get connection to perform deletion\", e);",
                "+            }",
                "+        }",
                "+",
                "         @Override",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "index 8ac3cec908..422b5df7e7 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.server.store.jdbc;",
                "+import static org.apache.qpid.server.store.jdbc.JdbcUtils.createConnectionProvider;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -30,6 +32,2 @@ import java.sql.ResultSet;",
                " import java.sql.SQLException;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "@@ -80,36 +78,3 @@ public class GenericJDBCMessageStore extends GenericAbstractJDBCMessageStore",
                "         _bigIntType = details.getBigintType();",
                "-",
                "-        String connectionPoolType = settings.getConnectionPoolType() == null ? DefaultConnectionProviderFactory.TYPE : settings.getConnectionPoolType();",
                "-",
                "-        JDBCConnectionProviderFactory connectionProviderFactory =",
                "-                JDBCConnectionProviderFactory.FACTORIES.get(connectionPoolType);",
                "-        if(connectionProviderFactory == null)",
                "-        {",
                "-            LOGGER.warn(\"Unknown connection pool type: \" + connectionPoolType + \".  No connection pooling will be used\");",
                "-            connectionProviderFactory = new DefaultConnectionProviderFactory();",
                "-        }",
                "-",
                "-        try",
                "-        {",
                "-            Map<String, String> providerAttributes = new HashMap<>();",
                "-            Set<String> providerAttributeNames = new HashSet<>(connectionProviderFactory.getProviderAttributeNames());",
                "-            providerAttributeNames.retainAll(parent.getContextKeys(false));",
                "-            for(String attr : providerAttributeNames)",
                "-            {",
                "-                providerAttributes.put(attr, parent.getContextValue(String.class, attr));",
                "-            }",
                "-",
                "-            _connectionProvider = connectionProviderFactory.getConnectionProvider(_connectionURL,",
                "-                                                                                  settings.getUsername(),",
                "-                                                                                  settings.getPassword(),",
                "-                                                                                  providerAttributes);",
                "-        }",
                "-        catch (SQLException e)",
                "-        {",
                "-            throw new StoreException(String.format(",
                "-                    \"Failed to create connection provider for connectionUrl: '%s' and username: '%s'\",",
                "-                    _connectionURL,",
                "-                    settings.getUsername()), e);",
                "-        }",
                "-",
                "+        _connectionProvider = createConnectionProvider(parent, LOGGER);",
                "     }",
                "@@ -193,2 +158,35 @@ public class GenericJDBCMessageStore extends GenericAbstractJDBCMessageStore",
                "+    @Override",
                "+    public void onDelete(final ConfiguredObject<?> parent)",
                "+    {",
                "+        if (isMessageStoreOpen())",
                "+        {",
                "+            throw new IllegalStateException(\"Cannot delete the store as the provided message store is still open\");",
                "+        }",
                "+",
                "+        ConnectionProvider connectionProvider = JdbcUtils.createConnectionProvider(parent, LOGGER);",
                "+        try",
                "+        {",
                "+            try (Connection conn = connectionProvider.getConnection())",
                "+            {",
                "+                conn.setAutoCommit(true);",
                "+                onDelete(conn);",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                getLogger().error(\"Exception while deleting store tables\", e);",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            try",
                "+            {",
                "+                connectionProvider.close();",
                "+            }",
                "+            catch (SQLException e)",
                "+            {",
                "+                LOGGER.warn(\"Unable to close connection provider \", e);",
                "+            }",
                "+        }",
                "+    }",
                " }",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "index 9e7710ce56..b6d9f226ca 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java",
                "@@ -26,2 +26,8 @@ import java.sql.ResultSet;",
                " import java.sql.SQLException;",
                "+import java.sql.Statement;",
                "+import java.util.Collection;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "@@ -29,2 +35,5 @@ import org.slf4j.Logger;",
                "+import org.apache.qpid.server.model.ConfiguredObject;",
                "+import org.apache.qpid.server.store.StoreException;",
                "+",
                " public class JdbcUtils",
                "@@ -73,2 +82,55 @@ public class JdbcUtils",
                "+    static ConnectionProvider createConnectionProvider(final ConfiguredObject<?> parent, final Logger logger)",
                "+    {",
                "+        JDBCSettings settings = (JDBCSettings) parent;",
                "+        String connectionPoolType = settings.getConnectionPoolType() == null",
                "+                ? DefaultConnectionProviderFactory.TYPE",
                "+                : settings.getConnectionPoolType();",
                "+",
                "+        JDBCConnectionProviderFactory connectionProviderFactory =",
                "+                JDBCConnectionProviderFactory.FACTORIES.get(connectionPoolType);",
                "+        if (connectionProviderFactory == null)",
                "+        {",
                "+            logger.warn(\"Unknown connection pool type: {}.  No connection pooling will be used\", connectionPoolType);",
                "+            connectionProviderFactory = new DefaultConnectionProviderFactory();",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            Map<String, String> providerAttributes = new HashMap<>();",
                "+            Set<String> providerAttributeNames = new HashSet<>(connectionProviderFactory.getProviderAttributeNames());",
                "+            providerAttributeNames.retainAll(parent.getContextKeys(false));",
                "+            for (String attr : providerAttributeNames)",
                "+            {",
                "+                providerAttributes.put(attr, parent.getContextValue(String.class, attr));",
                "+            }",
                "+",
                "+            return connectionProviderFactory.getConnectionProvider(settings.getConnectionUrl(),",
                "+                                                                   settings.getUsername(),",
                "+                                                                   settings.getPassword(),",
                "+                                                                   providerAttributes);",
                "+        }",
                "+        catch (SQLException e)",
                "+        {",
                "+            throw new StoreException(String.format(",
                "+                    \"Failed to create connection provider for connectionUrl: '%s' and username: '%s'\",",
                "+                    settings.getConnectionUrl(),",
                "+                    settings.getUsername()), e);",
                "+        }",
                "+    }",
                "+",
                "+    static void dropTables(final Connection connection, final Logger logger, Collection<String> tableNames)",
                "+    {",
                "+        for (String tableName : tableNames)",
                "+        {",
                "+            try(Statement statement = connection.createStatement())",
                "+            {",
                "+                statement.execute(String.format(\"DROP TABLE %s\",  tableName));",
                "+            }",
                "+            catch(SQLException e)",
                "+            {",
                "+                logger.warn(\"Failed to drop table '\" + tableName + \"' :\" + e);",
                "+            }",
                "+        }",
                "+    }",
                "     private static boolean tableExistsCase(final String tableName, final DatabaseMetaData metaData) throws SQLException"
            ],
            "changed_files": [
                "broker-plugins/derby-store/src/main/java/org/apache/qpid/server/store/derby/DerbyConfigurationStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCConfigurationStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCMessageStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/JdbcUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8066": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8066",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dfebfa23ba4ac30cecc8d1ac74819449b650f248",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517841340,
            "hunks": 2,
            "message": "QPID-8096: [Broker-J] Fix defect that prevent a PUT preference end with NullPointerException",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/preferences/UserPreferencesImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/preferences/UserPreferencesImpl.java",
                "index 2acedb37de..cb907aa180 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/preferences/UserPreferencesImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/preferences/UserPreferencesImpl.java",
                "@@ -279,5 +279,5 @@ public class UserPreferencesImpl implements UserPreferences",
                "-        _preferenceStore.replace(Collections.singleton(existingPreferenceId),",
                "+        _preferenceStore.replace(existingPreferenceId != null ? Collections.singleton(existingPreferenceId) : Collections.emptyList(),",
                "                                  augmentedPreference == null",
                "-                                         ? Collections.<PreferenceRecord>emptyList()",
                "+                                         ? Collections.emptyList()",
                "                                          : Collections.singleton(PreferenceRecordImpl.fromPreference(augmentedPreference)));"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/preferences/UserPreferencesImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8096": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: defect",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8096",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "de509dd955229a395c086a7cca874dc55306648a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511276450,
            "hunks": 14,
            "message": "QPID-8046: [Broker-J] Allow SASL mechanisms PLAIN and XOAUTH2 to not require initial response Cherry picked from 4eb2ea6",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "index 955136c3cb..db2f262833 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "@@ -33,2 +33,8 @@ public class OAuth2Negotiator implements SaslNegotiator",
                " {",
                "+    enum State",
                "+    {",
                "+        INITIAL,",
                "+        CHALLENGE_SENT,",
                "+        COMPLETE",
                "+    }",
                "@@ -38,3 +44,3 @@ public class OAuth2Negotiator implements SaslNegotiator",
                "     private OAuth2AuthenticationProvider<?> _authenticationProvider;",
                "-    private volatile boolean _isComplete;",
                "+    private volatile State _state = State.INITIAL;",
                "@@ -50,12 +56,20 @@ public class OAuth2Negotiator implements SaslNegotiator",
                "     {",
                "-        if (_isComplete)",
                "+        if (_state == State.COMPLETE)",
                "         {",
                "             return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "-                                            new IllegalStateException(",
                "-                                                    \"Multiple Authentications not permitted.\"));",
                "+                                            new IllegalStateException(\"Multiple Authentications not permitted.\"));",
                "         }",
                "-        else",
                "+        else if (_state == State.INITIAL && (response == null || response.length == 0))",
                "+        {",
                "+            _state = State.CHALLENGE_SENT;",
                "+            return new AuthenticationResult(new byte[0], AuthenticationResult.AuthenticationStatus.CONTINUE);",
                "+        }",
                "+",
                "+        _state = State.COMPLETE;",
                "+        if (response == null || response.length == 0)",
                "         {",
                "-            _isComplete = true;",
                "+            return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "+                                            new IllegalArgumentException(\"Invalid OAuth2 client response.\"));",
                "         }",
                "+",
                "         Map<String, String> responsePairs = splitResponse(response);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "index 065080f9bc..e56f8cae2e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "@@ -31,2 +31,9 @@ public class PlainNegotiator implements SaslNegotiator",
                " {",
                "+    enum State",
                "+    {",
                "+        INITIAL,",
                "+        CHALLENGE_SENT,",
                "+        COMPLETE",
                "+    }",
                "+",
                "     public static final String MECHANISM = \"PLAIN\";",
                "@@ -35,3 +42,3 @@ public class PlainNegotiator implements SaslNegotiator",
                "     private UsernamePasswordAuthenticationProvider _usernamePasswordAuthenticationProvider;",
                "-    private volatile boolean _isComplete;",
                "+    private volatile State _state = State.INITIAL;",
                "     private volatile String _username;",
                "@@ -46,12 +53,21 @@ public class PlainNegotiator implements SaslNegotiator",
                "     {",
                "-        if (_isComplete)",
                "+        if (_state == State.COMPLETE)",
                "         {",
                "             return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "-                                            new IllegalStateException(",
                "-                                                    \"Multiple Authentications not permitted.\"));",
                "+                                            new IllegalStateException(\"Multiple Authentications not permitted.\"));",
                "+        }",
                "+        else if (_state == State.INITIAL && (response == null || response.length == 0))",
                "+        {",
                "+            _state = State.CHALLENGE_SENT;",
                "+            return new AuthenticationResult(new byte[0], AuthenticationResult.AuthenticationStatus.CONTINUE);",
                "         }",
                "-        else",
                "+",
                "+        _state = State.COMPLETE;",
                "+        if (response == null || response.length == 0)",
                "         {",
                "-            _isComplete = true;",
                "+            return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "+                                            new IllegalArgumentException(",
                "+                                                    \"Invalid PLAIN encoding, authzid null terminator not found\"));",
                "         }",
                "+",
                "         int authzidNullPosition = findNullPosition(response, 0);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8046": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8046",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06f06e4fb8d4afb16355016cfc6e4905652b2f2c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521044726,
            "hunks": 12,
            "message": "QPID-7873: [Broker-J] Code clean-up",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "index 2e148e6104..db4672939b 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "@@ -102,5 +102,5 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "             setCacheSize(100000);",
                "-    protected ConfiguredObject<?> _parent;",
                "-    protected long _persistentSizeLowThreshold;",
                "-    protected long _persistentSizeHighThreshold;",
                "+    private ConfiguredObject<?> _parent;",
                "+    private long _persistentSizeLowThreshold;",
                "+    private long _persistentSizeHighThreshold;",
                "@@ -170,3 +170,3 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected void deleteMessageStoreDatabases()",
                "+    void deleteMessageStoreDatabases()",
                "     {",
                "@@ -210,5 +210,5 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    public <T extends StorableMessageMetaData> StoredBDBMessage<T> createStoredBDBMessage(final long newMessageId,",
                "-                                                                                          final T metaData,",
                "-                                                                                          final boolean recovered)",
                "+    private <T extends StorableMessageMetaData> StoredBDBMessage<T> createStoredBDBMessage(final long newMessageId,",
                "+                                                                                           final T metaData,",
                "+                                                                                           final boolean recovered)",
                "     {",
                "@@ -911,3 +911,3 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected void checkMessageStoreOpen()",
                "+    private void checkMessageStoreOpen()",
                "     {",
                "@@ -924,3 +924,6 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected abstract ConfiguredObject<?> getParent();",
                "+    protected final ConfiguredObject<?> getParent()",
                "+    {",
                "+        return _parent;",
                "+    }",
                "@@ -928,3 +931,3 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected long getPersistentSizeLowThreshold()",
                "+    private long getPersistentSizeLowThreshold()",
                "     {",
                "@@ -933,3 +936,3 @@ public abstract class AbstractBDBMessageStore implements MessageStore",
                "-    protected long getPersistentSizeHighThreshold()",
                "+    private long getPersistentSizeHighThreshold()",
                "     {",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "index f4a1e83cd5..8a13d65793 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "@@ -598,20 +598,2 @@ public class BDBConfigurationStore implements MessageStoreProvider, DurableConfi",
                "-        @Override",
                "-        protected long getPersistentSizeLowThreshold()",
                "-        {",
                "-            return _persistentSizeLowThreshold;",
                "-        }",
                "-",
                "-        @Override",
                "-        protected long getPersistentSizeHighThreshold()",
                "-        {",
                "-            return _persistentSizeHighThreshold;",
                "-        }",
                "-",
                "-        @Override",
                "-        protected ConfiguredObject<?> getParent()",
                "-        {",
                "-            return _parent;",
                "-        }",
                "-",
                "         @Override",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "index c3e41333f6..61b0100437 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java",
                "@@ -23,3 +23,2 @@ package org.apache.qpid.server.store.berkeleydb;",
                " import java.io.File;",
                "-import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -30,3 +29,2 @@ import org.apache.qpid.server.model.ConfiguredObject;",
                " import org.apache.qpid.server.store.FileBasedSettings;",
                "-import org.apache.qpid.server.store.SizeMonitoringSettings;",
                " import org.apache.qpid.server.store.StoreException;",
                "@@ -116,9 +114,2 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "-",
                "-    @Override",
                "-    protected ConfiguredObject<?> getParent()",
                "-    {",
                "-        return _parent;",
                "-    }",
                "-",
                "     @Override",
                "@@ -126,3 +117,3 @@ public class BDBMessageStore extends AbstractBDBMessageStore",
                "     {",
                "-        return ((FileBasedSettings)_parent).getStorePath();",
                "+        return ((FileBasedSettings)getParent()).getStorePath();",
                "     }"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBConfigurationStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBMessageStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7873": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7873",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28130e5eff80be4c171faac92df54a47cf9569f0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516703879,
            "hunks": 7,
            "message": "QPID-6933: [System Tests] Fix MessageEncryptionTest",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 2771f32553..a4bf082d53 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -25,3 +25,2 @@ import java.net.URLEncoder;",
                " import java.nio.charset.StandardCharsets;",
                "-import java.util.HashMap;",
                " import java.util.Hashtable;",
                "@@ -257,3 +256,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     {",
                "-        _options.put(\"encryption_trust_store\", encryptionTrustStoreLocation);",
                "+        _options.put(\"encryption_trust_store\", encodeConnectionOption(encryptionTrustStoreLocation));",
                "         return this;",
                "@@ -271,3 +270,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     {",
                "-        _options.put(\"encryption_key_store\", encryptionKeyStoreLocation);",
                "+        _options.put(\"encryption_key_store\", encodeConnectionOption(encryptionKeyStoreLocation));",
                "         return this;",
                "@@ -330,3 +329,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             {",
                "-                cUrlBuilder.append(\"&key_store='\").append(encodePathOption(_keyStoreLocation)).append('\\'');",
                "+                cUrlBuilder.append(\"&key_store='\").append(encodeBrokerOption(_keyStoreLocation)).append('\\'');",
                "             }",
                "@@ -338,3 +337,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             {",
                "-                cUrlBuilder.append(\"&trust_store='\").append(encodePathOption(_trustStoreLocation)).append('\\'');",
                "+                cUrlBuilder.append(\"&trust_store='\").append(encodeBrokerOption(_trustStoreLocation)).append('\\'');",
                "             }",
                "@@ -413,3 +412,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "-    private String encodePathOption(final String canonicalPath)",
                "+    private String encodeBrokerOption(final String canonicalPath)",
                "     {",
                "@@ -417,4 +416,15 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "         {",
                "-            return URLEncoder.encode(URLEncoder.encode(canonicalPath, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\"),",
                "-                                     StandardCharsets.UTF_8.name());",
                "+            return URLEncoder.encode(encodeConnectionOption(canonicalPath), StandardCharsets.UTF_8.name());",
                "+        }",
                "+        catch (UnsupportedEncodingException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                "+",
                "+    private String encodeConnectionOption(final String canonicalPath)",
                "+    {",
                "+        try",
                "+        {",
                "+            return URLEncoder.encode(canonicalPath, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\");",
                "         }"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ca74c59ac737a6a0979a58c2ab9ee9c8a4f0f9b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516808120,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] MessageEncryptionTest moved to client system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 031eb92c33..6e64fd2a81 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -59,7 +59,2 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setCompress(boolean compress);",
                "-    ConnectionBuilder setEncryptionRemoteTrustStore(String encryptionTrustStore);",
                "-    ConnectionBuilder setEncryptionTrustStore(String encryptionTrustStoreLocation);",
                "-    ConnectionBuilder setEncryptionTrustStorePassword(String password);",
                "-    ConnectionBuilder setEncryptionKeyStore(String encryptionKeyStoreLocation);",
                "-    ConnectionBuilder setEncryptionKeyStorePassword(String password);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index a4bf082d53..95e6134dbe 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -246,37 +246,2 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "-    {",
                "-        _options.put(\"encryption_remote_trust_store\", encryptionTrustStore);",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "-    {",
                "-        _options.put(\"encryption_trust_store\", encodeConnectionOption(encryptionTrustStoreLocation));",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "-    {",
                "-        _options.put(\"encryption_trust_store_password\", password);",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "-    {",
                "-        _options.put(\"encryption_key_store\", encodeConnectionOption(encryptionKeyStoreLocation));",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "-    {",
                "-        _options.put(\"encryption_key_store_password\", password);",
                "-        return this;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 5ec1647f50..76e3a7656a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -249,32 +249,2 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3082fc1b86643d3b979a0ee1367f8bf9dff533a7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520937802,
            "hunks": 2,
            "message": "NO-JIRA: Update .travis.yml - run only unit tests and protocol tests.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 0444501d37..cced34e22e 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -3,8 +3,6 @@ sudo: false",
                " jdk:",
                "-  - oraclejdk7",
                "+  - oraclejdk8",
                " env:",
                "-  - profile=\"java-mms.1-0\" phase=\"test\" pl=\"\"",
                "-  - profile=\"java-mms.1-0\" phase=\"verify\" pl=\"-pl systests\"",
                "-  - profile=\"java-mms.0-10\" phase=\"verify\" pl=\"-pl systests\"",
                "-  - profile=\"java-mms.0-9\" phase=\"verify\" pl=\"-pl systests\"",
                "-script: \"mvn ${phase} -P${profile} ${pl} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\"",
                "+  - phase=\"test\" pl=\"\" additionalprops=\"-Dskip.systests=true\"",
                "+  - phase=\"verify\" pl=\"-pl systests/protocol-tests-amqp-1-0\" additionalprops=\"-Dskip.unittests=true\"",
                "+script: \"mvn --fail-at-end ${phase} ${pl} ${additionalprops} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7913b0d64147337d80ba35c059fa8c11ebb6c562"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6bb2b9c5a630b0fdfd419f0e8ea9b08d70abcca4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520199138,
            "hunks": 3,
            "message": "NO-JIRA: [Broker-J][Documentation] Fix duplicate table row ids (cherry picked from commit dbcbed940be02a7f2320fe46e910c553aff6e5d4)",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "index 5cb314b8b5..ebd6166146 100644",
                "--- a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "+++ b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "@@ -606,3 +606,3 @@",
                "         </row>",
                "-        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-QUE-1004\">",
                "+        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-QUE-1005\">",
                "           <entry morerows=\"1\">QUE-1005</entry>",
                "@@ -822,3 +822,3 @@",
                "         </row>",
                "-        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CHN-1010\">",
                "+        <row xml:id=\"Java-Broker-Appendix-Operation-Logging-Message-CON-1010\">",
                "           <entry morerows=\"1\">CON-1010</entry>",
                "diff --git a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Queue-Declaration-Arguments.xml b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Queue-Declaration-Arguments.xml",
                "index 3304a70a43..78ff31d5fe 100644",
                "--- a/doc/java-broker/src/docbkx/Java-Broker-Appendix-Queue-Declaration-Arguments.xml",
                "+++ b/doc/java-broker/src/docbkx/Java-Broker-Appendix-Queue-Declaration-Arguments.xml",
                "@@ -163,3 +163,3 @@ my-queue; {create: always, node: {x-declare: {arguments:{'x-qpid-capacity': 1024",
                "                 </row>",
                "-                <row xml:id=\"Java-Broker-Appendix-Queue-Declare-Arguments-X-Qpid-Maximum-Delivery-Count\">",
                "+                <row xml:id=\"Java-Broker-Appendix-Queue-Declare-Arguments-X-Qpid-DLQ-Enabled\">",
                "                     <entry>"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/Java-Broker-Appendix-Operational-Logging-Messages.xml",
                "doc/java-broker/src/docbkx/Java-Broker-Appendix-Queue-Declaration-Arguments.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dbcbed940be02a7f2320fe46e910c553aff6e5d4"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2cdab1ea2689066eb4736309cfe2db0dc078fec",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523617142,
            "hunks": 9,
            "message": "QPID-8158: [Broker-J] [System Tests] Update README and cleanup legacy settings",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 93930d323c..34855a1135 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -781,8 +781,2 @@",
                "-            <test.port>0</test.port>",
                "-            <test.hport>0</test.hport>",
                "-            <test.port.ssl>0</test.port.ssl>",
                "-            <test.port.alt>0</test.port.alt>",
                "-            <test.port.alt.ssl>0</test.port.alt.ssl>",
                "-",
                "             <!-- Profile Based Values -->",
                "diff --git a/systests/end-to-end-conversion-tests/pom.xml b/systests/end-to-end-conversion-tests/pom.xml",
                "index 3979fa49c2..42a1a7dfed 100644",
                "--- a/systests/end-to-end-conversion-tests/pom.xml",
                "+++ b/systests/end-to-end-conversion-tests/pom.xml",
                "@@ -96,2 +96,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -111,2 +112,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -126,2 +128,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -141,2 +144,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -156,2 +160,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "@@ -171,2 +176,3 @@",
                "                         <configuration>",
                "+                            <skipTests>${skipITs}</skipTests>",
                "                             <systemPropertyVariables>",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index b9590f655b..914cbe8128 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -335,18 +335,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "         {",
                "-            if (_failoverPorts.isEmpty())",
                "-            {",
                "-                Integer testPortAlt;",
                "-                if ((testPortAlt = Integer.getInteger(\"test.port.alt\")) != null)",
                "-                {",
                "-                    copy.add(testPortAlt);",
                "-                }",
                "-                else if (_enableTls && (testPortAlt = Integer.getInteger(\"test.port.alt.ssl\")) != null)",
                "-                {",
                "-                    copy.add(testPortAlt);",
                "-                }",
                "-            }",
                "-            else",
                "-            {",
                "-                copy.addAll(_failoverPorts);",
                "-            }",
                "+            copy.addAll(_failoverPorts);",
                "         }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index b5cb30429b..551ba20add 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -333,15 +333,2 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "             copy.add(_enableTls ? _sslPort : _port);",
                "-",
                "-            if (_failoverPorts.isEmpty())",
                "-            {",
                "-                Integer testPortAlt;",
                "-                if ((testPortAlt = Integer.getInteger(\"test.port.alt\")) != null)",
                "-                {",
                "-                    copy.add(testPortAlt);",
                "-                }",
                "-                else if (_enableTls && (testPortAlt = Integer.getInteger(\"test.port.alt.ssl\")) != null)",
                "-                {",
                "-                    copy.add(testPortAlt);",
                "-                }",
                "-            }",
                "             copy.addAll(_failoverPorts);"
            ],
            "changed_files": [
                "pom.xml",
                "systests/end-to-end-conversion-tests/pom.xml",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f86ff21d0ed2735b1bbcba6bd71a2c018d14b482",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516569819,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor MessageEncryptionTest as JMS 1.1 extension test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 6e64fd2a81..031eb92c33 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -59,2 +59,7 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setCompress(boolean compress);",
                "+    ConnectionBuilder setEncryptionRemoteTrustStore(String encryptionTrustStore);",
                "+    ConnectionBuilder setEncryptionTrustStore(String encryptionTrustStoreLocation);",
                "+    ConnectionBuilder setEncryptionTrustStorePassword(String password);",
                "+    ConnectionBuilder setEncryptionKeyStore(String encryptionKeyStoreLocation);",
                "+    ConnectionBuilder setEncryptionKeyStorePassword(String password);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index ae56d3f4de..d465cb459f 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -162,3 +162,8 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        Connection connection = getConnection();",
                "+        return createQueue(getVirtualHostName(), queueName);",
                "+    }",
                "+",
                "+    protected Queue createQueue(final String virtualHostName, final String queueName) throws Exception",
                "+    {",
                "+        Connection connection = getConnectionBuilder().setVirtualHost(virtualHostName).build();",
                "         try",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 2318634c8d..2771f32553 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -247,2 +247,37 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "+    {",
                "+        _options.put(\"encryption_remote_trust_store\", encryptionTrustStore);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "+    {",
                "+        _options.put(\"encryption_trust_store\", encryptionTrustStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "+    {",
                "+        _options.put(\"encryption_trust_store_password\", password);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "+    {",
                "+        _options.put(\"encryption_key_store\", encryptionKeyStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "+    {",
                "+        _options.put(\"encryption_key_store_password\", password);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 76e3a7656a..5ec1647f50 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -249,2 +249,32 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index cc07920086..b5c908ecf6 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -60,2 +60,9 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+            <classifier>tests</classifier>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index aa97f78b27..27ef27c1ad 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -41,5 +41,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                "-",
                "-// Message encryption not currently supported by the 1.0 client",
                "-org.apache.qpid.systest.messageencryption.MessageEncryptionTest#*",
                " // Message compression not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-jms_1.1/pom.xml",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c8fae15492a09155039a61d11bf7d2dbdc280c65",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525275651,
            "hunks": 7,
            "message": "QPID-8165: [Broker-J][WMC] Fix RegEx to allow more characters in configured object names",
            "diff": [
                "diff --git a/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/existinggroup/add.js b/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/existinggroup/add.js",
                "index 529311a8b6..767e417b21 100644",
                "--- a/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/existinggroup/add.js",
                "+++ b/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/existinggroup/add.js",
                "@@ -38,3 +38,3 @@ define([\"dojo/_base/xhr\",",
                "                     registry.byId(\"addVirtualHostNode.groupName\")",
                "-                        .set(\"regExpGen\", util.nameOrContextVarRegexp);",
                "+                        .set(\"regExpGen\", util.virtualHostNameOrContextVarRegexp);",
                "                     registry.byId(\"addVirtualHostNode.helperNodeName\")",
                "diff --git a/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/newgroup/add.js b/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/newgroup/add.js",
                "index cf74d755c8..60edc5f9cd 100644",
                "--- a/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/newgroup/add.js",
                "+++ b/bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/newgroup/add.js",
                "@@ -98,3 +98,3 @@ define([\"dojo/_base/xhr\",",
                "             registry.byId(\"addVirtualHostNode.groupName\")",
                "-                .set(\"regExpGen\", util.nameOrContextVarRegexp);",
                "+                .set(\"regExpGen\", util.virtualHostNameOrContextVarRegexp);",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "index 91272b76c1..a214e35c0a 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "@@ -814,3 +814,8 @@ define([\"dojo/_base/xhr\",",
                "         {",
                "-            return \"^(\\\\w+)|\" + singleContextVarRegexp + \"$\";",
                "+            return \"^([0-9a-zA-Z\\\\-_.:]+)|\" + singleContextVarRegexp + \"$\";",
                "+        };",
                "+",
                "+        util.virtualHostNameOrContextVarRegexp = function (constraints)",
                "+        {",
                "+            return \"^([0-9a-zA-Z\\\\-_]+)|\" + singleContextVarRegexp + \"$\";",
                "         };",
                "@@ -820,3 +825,3 @@ define([\"dojo/_base/xhr\",",
                "             return \"^(jdbc:.*:.*)|\" + singleContextVarRegexp + \"$\";",
                "-        }",
                "+        };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addVirtualHostNodeAndVirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addVirtualHostNodeAndVirtualHost.js",
                "index f8b378ea22..811a1dc4b1 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addVirtualHostNodeAndVirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addVirtualHostNodeAndVirtualHost.js",
                "@@ -83,3 +83,3 @@ define([\"dojo/_base/event\",",
                "                 var virtualHostNodeName = registry.byId(\"addVirtualHostNode.nodeName\");",
                "-                virtualHostNodeName.set(\"regExpGen\", util.nameOrContextVarRegexp);",
                "+                virtualHostNodeName.set(\"regExpGen\", util.virtualHostNameOrContextVarRegexp);",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/hostnamealias/add.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/hostnamealias/add.js",
                "index 982ebd70f2..258e959b99 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/hostnamealias/add.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/hostnamealias/add.js",
                "@@ -40,3 +40,3 @@ define([\"dojo/dom\",",
                "                     var virtualHostNodeNameWidget = registry.byId(\"addVirtualHostAlias.virtualHostNodeName\");",
                "-                    virtualHostNodeNameWidget.set(\"regExpGen\", util.nameOrContextVarRegexp);",
                "+                    virtualHostNodeNameWidget.set(\"regExpGen\", util.virtualHostNameOrContextVarRegexp);",
                "                 });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/patternmatchingalias/add.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/patternmatchingalias/add.js",
                "index c31a050fb6..62d20d19b8 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/patternmatchingalias/add.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/patternmatchingalias/add.js",
                "@@ -40,3 +40,3 @@ define([\"dojo/dom\",",
                "                     var virtualHostNodeNameWidget = registry.byId(\"addVirtualHostAlias.virtualHostNodeName\");",
                "-                    virtualHostNodeNameWidget.set(\"regExpGen\", util.nameOrContextVarRegexp);",
                "+                    virtualHostNodeNameWidget.set(\"regExpGen\", util.virtualHostNameOrContextVarRegexp);",
                "                 });"
            ],
            "changed_files": [
                "bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/existinggroup/add.js",
                "bdbstore/src/main/java/resources/js/qpid/management/virtualhostnode/bdb_ha/add/newgroup/add.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/addVirtualHostNodeAndVirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/hostnamealias/add.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhostalias/patternmatchingalias/add.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8165": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8165",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b603e03ff34a2477cbad30cb76a8271395624fd7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518540391,
            "hunks": 2,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Refactor MessageContentCompressionRestTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2d24142f62..d8ae4d7de9 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -83,5 +83,2 @@ org.apache.qpid.systest.rest.acl.*",
                "-// QPID-6000 : Tests Qpid Broker-J specific message compression functionality, and uses the REST API to test it",
                "-org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*",
                "-",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 3128524f9c..611c6b98aa 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -35,5 +35,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#*",
                "-// Message compression not currently supported by the 1.0 client",
                "-org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*",
                "-",
                " // Tests the interaction between the Broker's supported protocols and what the 0-x client agrees to"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3bbf01a0b44192fd3e04264230ebc14e4abe3c7a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519401492,
            "hunks": 11,
            "message": "QPID-8110: [Broker-J] Add ability to check ERRORED state of entire configured object hierarchy This closes #4 https://github.com/apache/qpid-broker-j/pull/4 (cherry picked from commit b720d7d1e81324441b8fbc2850ef19ca0fdf9bda)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "index 6f7b74ce86..3bb26d4b4e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "@@ -56,2 +56,3 @@ public interface Broker<X extends Broker<X>> extends ConfiguredObject<X>, EventL",
                "     String BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD = \"broker.failStartupWithErroredChild\";",
                "+    String BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = \"broker.failStartupWithErroredChildScope\";",
                "@@ -101,2 +102,5 @@ public interface Broker<X extends Broker<X>> extends ConfiguredObject<X>, EventL",
                "+    @ManagedContextDefault(name = BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE)",
                "+    DescendantType DEFAULT_BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = DescendantType.IMMEDIATE;",
                "+",
                "     @ManagedContextDefault(name = BROKER_MSG_AUTH)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "index ad11a7b957..42a83c1b03 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "@@ -29,2 +29,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.EnumSet;",
                " import java.util.HashMap;",
                "@@ -272,2 +273,24 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "         }",
                "+",
                "+        if (changedAttributes.contains(CONTEXT))",
                "+        {",
                "+            @SuppressWarnings(\"unchecked\")",
                "+            Map<String, String> context = (Map<String, String>) proxyForValidation.getAttribute(CONTEXT);",
                "+            if (context.containsKey(BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE))",
                "+            {",
                "+                String value = context.get(BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "+                try",
                "+                {",
                "+                    DescendantType.valueOf(value);",
                "+                }",
                "+                catch (Exception e)",
                "+                {",
                "+                    throw new IllegalConfigurationException(String.format(",
                "+                            \"Unsupported value '%s' is specified for context variable '%s'. Please, change it to any of supported : %s\",",
                "+                            value,",
                "+                            BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE,",
                "+                            EnumSet.allOf(DescendantType.class)));",
                "+                }",
                "+            }",
                "+        }",
                "     }",
                "@@ -361,24 +384,16 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "     {",
                "-        boolean hasBrokerAnyErroredChildren = false;",
                "+        final DescendantType descendantScope = getContextValue(DescendantType.class,",
                "+                                                               BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "+        List<ConfiguredObject<?>> failedChildren = getChildrenInState(this, State.ERRORED, descendantScope);",
                "-        List<ConfiguredObject<?>> failedChildren = new ArrayList<>();",
                "-        for (final Class<? extends ConfiguredObject> childClass : getModel().getChildTypes(getCategoryClass()))",
                "+        if (!failedChildren.isEmpty())",
                "         {",
                "-            final Collection<? extends ConfiguredObject> children = getChildren(childClass);",
                "-            if (children != null) {",
                "-                for (final ConfiguredObject<?> child : children)",
                "-                {",
                "-                    if (child.getState() == State.ERRORED )",
                "-                    {",
                "-                        hasBrokerAnyErroredChildren = true;",
                "-                        LOGGER.warn(\"Broker child object '{}' of type '{}' is {}\",",
                "-                                child.getName(), childClass.getSimpleName(), State.ERRORED);",
                "-                        failedChildren.add(child);",
                "-                    }",
                "-                }",
                "+            for (ConfiguredObject<?> o : failedChildren)",
                "+            {",
                "+                LOGGER.warn(\"{} child object '{}' of type '{}' is {}\",",
                "+                            o.getParent().getCategoryClass().getSimpleName(),",
                "+                            o.getName(),",
                "+                            o.getClass().getSimpleName(),",
                "+                            State.ERRORED);",
                "             }",
                "-        }",
                "-",
                "-        if(!failedChildren.isEmpty())",
                "-        {",
                "             getEventLogger().message(BrokerMessages.FAILED_CHILDREN(failedChildren.toString()));",
                "@@ -389,6 +404,8 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                                                                      BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD);",
                "-        if (!_parent.isManagementMode() && brokerShutdownOnErroredChild && hasBrokerAnyErroredChildren)",
                "+        if (!_parent.isManagementMode() && brokerShutdownOnErroredChild && !failedChildren.isEmpty())",
                "         {",
                "-            throw new IllegalStateException(String.format(\"Broker context variable %s is set and the broker has %s children\",",
                "-                    BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD, State.ERRORED));",
                "+            throw new IllegalStateException(String.format(",
                "+                    \"Broker context variable %s is set and the broker has %s children\",",
                "+                    BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD,",
                "+                    State.ERRORED));",
                "         }",
                "@@ -421,2 +438,26 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "+    private List<ConfiguredObject<?>> getChildrenInState(final ConfiguredObject<?> configuredObject,",
                "+                                                         final State state,",
                "+                                                         final DescendantType descendantScope)",
                "+    {",
                "+        List<ConfiguredObject<?>> foundChildren = new ArrayList<>();",
                "+        Class<? extends ConfiguredObject> categoryClass = configuredObject.getCategoryClass();",
                "+        for (final Class<? extends ConfiguredObject> childClass : getModel().getChildTypes(categoryClass))",
                "+        {",
                "+            final Collection<? extends ConfiguredObject> children = configuredObject.getChildren(childClass);",
                "+            for (final ConfiguredObject<?> child : children)",
                "+            {",
                "+                if (child.getState() == state)",
                "+                {",
                "+                    foundChildren.add(child);",
                "+                }",
                "+                if (descendantScope == DescendantType.ALL)",
                "+                {",
                "+                    foundChildren.addAll(getChildrenInState(child, state, descendantScope));",
                "+                }",
                "+            }",
                "+        }",
                "+        return foundChildren;",
                "+    }",
                "+",
                "     private void checkDirectMemoryUsage()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/DescendantType.java b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantType.java",
                "new file mode 100644",
                "index 0000000000..66d296aba1",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantType.java",
                "@@ -0,0 +1,26 @@",
                "+package org.apache.qpid.server.model;/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+public enum DescendantType",
                "+{",
                "+    IMMEDIATE,",
                "+    ALL",
                "+}"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/DescendantType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8110": ""
            },
            "ghissue_refs": {
                "4": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b720d7d1e81324441b8fbc2850ef19ca0fdf9bda"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8110",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2303a76e2cb92ef0bcf282851c9cf1db4fd2eb00",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519061451,
            "hunks": 1,
            "message": "QPID-8091: [Broker-J] Correct transaction timeout documentation",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml b/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml",
                "index f250364146..421234b487 100644",
                "--- a/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml",
                "+++ b/doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml",
                "@@ -99,11 +99,5 @@ CON-1002 : Close : Open transaction timed out",
                "     lifetime of any client application as this would indicate a hung client.</para>",
                "-   <para>When configuring warning and closure timeouts, it should be noted that these only apply to",
                "-    message producers that are connected to the broker, but that a timeout will cause the connection",
                "-    to be closed - this disconnecting all producers and consumers created on that connection.</para>",
                "-   <para>This should not be an issue for environments using Mule or Spring, where connection",
                "-    factories can be configured appropriately to manage a single MessageProducer object per JMS",
                "-    Session and Connection. Clients that use the JMS API directly should be aware that sessions",
                "-    managing both consumers and producers, or multiple producers, will be affected by a single",
                "-    producer hanging or leaving a transaction idle or open, and closed, and must take appropriate",
                "-    action to handle that scenario.</para>",
                "+   <para>When configuring closure timeouts, it should be noted that a timeout on any producer",
                "+    or consumer will cause the connection to be closed - this disconnecting all producers and consumers",
                "+    created on that connection.</para>",
                "   </section>"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/runtime/Java-Broker-Runtime-Transaction-Timeout.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8e874ce58909896cbc4985aaab2957eca6023b0c"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0fe98f847484367256fda8df65deb85317cec128",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519310654,
            "hunks": 1,
            "message": "QPID-8102: [Broker-J][WMC] Do not reset Virtual Host Edit dialog on show",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "index f59ae31c1e..01dc072bbb 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "@@ -263,3 +263,2 @@ define([\"dojox/html/entities\",",
                "                 this.dialog.show();",
                "-                this.dialog.reset();",
                "                 if (!this.resizeEventRegistered)"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8102": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "94901a32c912a48f96efe8d7b689f7d978af29f7"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8102",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a26d40f3b65421bfd354ae09fac51b56b0ce949",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519395309,
            "hunks": 38,
            "message": "QPID-8102: [Broker-J] Address review comments",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "index 44ebe3f418..3e64deb8b9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "@@ -466,3 +466,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPattern MUST be supplied: \" + policy);",
                "+            throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPolicy MUST be supplied: \" + policy);",
                "         }",
                "@@ -475,3 +475,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPattern MUST be a valid \"",
                "+            throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPolicy MUST be a valid \"",
                "                                                + \"Java Regular Expression Pattern, the value '\" + pattern + \"' is not: \" + policy);",
                "@@ -492,3 +492,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"The node type of a NodeAutoCreationPattern must be a valid child type \"",
                "+            throw new IllegalArgumentException(\"The node type of a NodeAutoCreationPolicy must be a valid child type \"",
                "                                                + \"of a VirtualHost, '\" + nodeType + \"' is not.\");",
                "@@ -497,3 +497,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"A NodeAutoCreationPattern which creates nodes on consume must have a \"",
                "+            throw new IllegalArgumentException(\"A NodeAutoCreationPolicy which creates nodes on consume must have a \"",
                "                                                + \"nodeType which implements MessageSource, '\" + nodeType + \"' does not.\");",
                "@@ -503,3 +503,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"A NodeAutoCreationPattern which creates nodes on publish must have a \"",
                "+            throw new IllegalArgumentException(\"A NodeAutoCreationPolicy which creates nodes on publish must have a \"",
                "                                                + \"nodeType which implements MessageDestination, '\" + nodeType + \"' does not.\");",
                "@@ -508,3 +508,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "         {",
                "-            throw new IllegalArgumentException(\"A NodeAutoCreationPattern must create on consume, create on publish or both.\");",
                "+            throw new IllegalArgumentException(\"A NodeAutoCreationPolicy must create on consume, create on publish or both.\");",
                "         }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "index 6df7870643..7a96baabd3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "@@ -515,3 +515,4 @@ define([\"dojo/parser\",",
                "                                 {",
                "-                                    markup += \"<div>\" + key + \"=\" + value[key] + \"</div>\";",
                "+                                    markup += \"<div>\" + entities.encode(String(key)) + \"=\"",
                "+                                              + entities.encode(String(value[key])) + \"</div>\";",
                "                                 }",
                "@@ -711,19 +712,27 @@ define([\"dojo/parser\",",
                "                 {",
                "-                    dstore.put(data[i]);",
                "+                    dstore.putSync(data[i]);",
                "                 }",
                "             }",
                "-            dstore.fetch()",
                "+            var objectsToRemove = [];",
                "+            dstore.fetchSync()",
                "                 .forEach(function (object) {",
                "-                    if (data)",
                "+                    if (object)",
                "                     {",
                "-                        for (var i = 0; i < data.length; i++)",
                "+                        if (data)",
                "                         {",
                "-                            if (data[i][idProperty] === object[idProperty])",
                "+                            for (var i = 0; i < data.length; i++)",
                "                             {",
                "-                                return;",
                "+                                if (data[i][idProperty] === object[idProperty])",
                "+                                {",
                "+                                    return;",
                "+                                }",
                "                             }",
                "                         }",
                "+                        objectsToRemove.push(object[idProperty]);",
                "                     }",
                "-                    dstore.remove(object[idProperty]);",
                "                 });",
                "+            for (var i = 0 ; i < objectsToRemove.length; i++)",
                "+            {",
                "+                dstore.removeSync(objectsToRemove[i]);",
                "+            }",
                "         };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "index 01dc072bbb..fd0c577f2d 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "@@ -260,3 +260,3 @@ define([\"dojox/html/entities\",",
                "-                this._initNodeAutoCreationPolicies(data);",
                "+                this._initNodeAutoCreationPolicies(data.actual && data.actual.nodeAutoCreationPolicies ? data.actual.nodeAutoCreationPolicies : []);",
                "                 this.dialog.startup();",
                "@@ -304,3 +304,3 @@ define([\"dojox/html/entities\",",
                "                         },",
                "-                        nodeType: {",
                "+                        type: {",
                "                             label: \"Node Type\"",
                "@@ -319,4 +319,3 @@ define([\"dojox/html/entities\",",
                "                             sortable: false,",
                "-                            formatter: function(value, object)",
                "-                            {",
                "+                            formatter: function (value, object) {",
                "                                 var markup = \"\";",
                "@@ -325,7 +324,8 @@ define([\"dojox/html/entities\",",
                "                                     markup = \"<div class='keyValuePair'>\";",
                "-                                    for(var key in value)",
                "+                                    for (var key in value)",
                "                                     {",
                "-                                        markup += \"<div>\" + key + \"=\" + value[key] + \"</div>\";",
                "+                                        markup += \"<div>\" + entities.encode(String(key)) + \"=\"",
                "+                                                  + entities.encode(String(value[key])) + \"</div>\";",
                "                                     }",
                "-                                    markup +=\"</div>\"",
                "+                                    markup += \"</div>\"",
                "                                 }",
                "@@ -348,5 +348,18 @@ define([\"dojox/html/entities\",",
                "             },",
                "-            _initNodeAutoCreationPolicies: function (data) {",
                "-                this._policies =",
                "-                    data.actual && data.actual.nodeAutoCreationPolicies ? data.actual.nodeAutoCreationPolicies : [];",
                "+            _toDgridFriendlyNodeAutoCreationPolicyObject: function (policy) {",
                "+                return { pattern: policy.pattern,",
                "+                         type: policy.nodeType,",
                "+                         attributes: policy.attributes,",
                "+                         createdOnPublish: policy.createdOnPublish,",
                "+                         createdOnConsume: policy.createdOnConsume};",
                "+            },",
                "+            _initNodeAutoCreationPolicies: function (policies) {",
                "+",
                "+                var dgridFriendlyPolicies = [];",
                "+                for (var i = 0; i < policies.length; i++)",
                "+                {",
                "+                    dgridFriendlyPolicies.push(this._toDgridFriendlyNodeAutoCreationPolicyObject(policies[i]));",
                "+                }",
                "+",
                "+                this._policies = dgridFriendlyPolicies;",
                "                 var Store = MemoryStore.createSubclass(TrackableStore);",
                "@@ -375,3 +388,7 @@ define([\"dojox/html/entities\",",
                "                                 {",
                "-                                    this._policyStore.putSync(e.data);",
                "+                                    this._policyStore.putSync(this._toDgridFriendlyNodeAutoCreationPolicyObject(e.data));",
                "+                                    if (e.oldData && e.oldData.pattern !== e.data.pattern)",
                "+                                    {",
                "+                                        this._policyStore.removeSync(e.oldData.pattern);",
                "+                                    }",
                "                                 }",
                "@@ -389,3 +406,3 @@ define([\"dojox/html/entities\",",
                "                 var row = this._policyGrid.row(event);",
                "-                this._showNodeAutoCreationPolicyForm(row.data);",
                "+                this._showNodeAutoCreationPolicyForm(this._toNodeAutoCreationPolicyObject(row.data));",
                "             },",
                "@@ -420,7 +437,16 @@ define([\"dojox/html/entities\",",
                "                 var policies = [];",
                "-                this._policyStore.fetchSync().forEach(function (policy) {",
                "-                    policies.push(policy);",
                "-                });",
                "+                this._policyStore.fetchSync().forEach(lang.hitch(this, function (policy) {",
                "+                    policies.push(this._toNodeAutoCreationPolicyObject(policy));",
                "+                }));",
                "                 return policies;",
                "-            }",
                "+            },",
                "+            _toNodeAutoCreationPolicyObject: function (policy) {",
                "+                return {",
                "+                    pattern: policy.pattern,",
                "+                    nodeType: policy.type,",
                "+                    attributes: policy.attributes,",
                "+                    createdOnPublish: policy.createdOnPublish,",
                "+                    createdOnConsume: policy.createdOnConsume",
                "+                };",
                "+            },",
                "         };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "index c2500631d1..bfa0d74d7a 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "@@ -173,3 +173,3 @@ define([\"dojo/_base/declare\",",
                "                                     };",
                "-                                    this.emit(\"create\", {data: data});",
                "+                                    this.emit(\"create\", {data: data, oldData: this._policy});",
                "                                     this.nodeAutoCreationPolicyDialog.hide();",
                "@@ -200,4 +200,4 @@ define([\"dojo/_base/declare\",",
                "                     var item = {",
                "-                        name: \"<new>\",",
                "-                        value: \"<new>\",",
                "+                        name: \"\",",
                "+                        value: \"\",",
                "                         id: id",
                "@@ -214,2 +214,3 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "+                    this._onChange();",
                "                 },",
                "@@ -217,3 +218,2 @@ define([\"dojo/_base/declare\",",
                "                     var selected = this._getSelectedAttributes();",
                "-                    var newDeleted = false;",
                "                     if (selected.length > 0)",
                "@@ -228,6 +228,2 @@ define([\"dojo/_base/declare\",",
                "                                 {",
                "-                                    if (item.name === \"<new>\")",
                "-                                    {",
                "-                                        newDeleted = true;",
                "-                                    }",
                "                                     this._store.removeSync(selected[s]);",
                "@@ -238,6 +234,4 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "-                    if (newDeleted)",
                "-                    {",
                "-                        this.addAttributeButton.set(\"disabled\", false);",
                "-                    }",
                "+                    this.addAttributeButton.set(\"disabled\", this._emptyPatternFound());",
                "+                    this._onChange();",
                "                 },",
                "@@ -256,9 +250,4 @@ define([\"dojo/_base/declare\",",
                "                 _onGridEdit: function (e) {",
                "-                        if (e.value !== \"<new>\")",
                "-                        {",
                "-                            if (e.cell.column.field===\"name\" && e.oldValue === \"<new>\" && e.value !== \"<new>\")",
                "-                            {",
                "-                                this.addAttributeButton.set(\"disabled\", false);",
                "-                            }",
                "-                        }",
                "+                    this.addAttributeButton.set(\"disabled\", this._emptyPatternFound());",
                "+                    this._onChange();",
                "                 },",
                "@@ -352,2 +341,13 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "+                },",
                "+                _emptyPatternFound: function () {",
                "+                    var emptyPatternDetected = false;",
                "+                    this._store.fetchSync()",
                "+                        .forEach(function (value) {",
                "+                            if (value && value.pattern === \"\")",
                "+                            {",
                "+                                emptyPatternDetected = true;",
                "+                            }",
                "+                        });",
                "+                    return emptyPatternDetected;",
                "                 }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html b/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html",
                "index bef23eb646..ed8e8610f4 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html",
                "@@ -39,4 +39,5 @@",
                "                         intermediateChanges: true,",
                "-                        placeHolder: 'Name matching regular expression',",
                "-                        title: 'Enter name matching regular expression'\"/>",
                "+                        placeHolder: 'regular expression',",
                "+                        title: 'Policy will apply to requests for new nodes with names matching this pattern',",
                "+                        promptMessage: 'Policy will apply to requests for new nodes with names matching this pattern'\"/>",
                "                     </div>",
                "@@ -52,4 +53,4 @@",
                "                                           value: 'Queue',",
                "-                                          title: 'Type of node to create.',",
                "-                                          promptMessage: 'Select type of node to create.',",
                "+                                          title: 'Select type of node created by this policy',",
                "+                                          promptMessage: 'Type of the automatically created node.',",
                "                                           intermediateChanges: true\">",
                "@@ -97,2 +98,6 @@",
                "                                  class=\"nodeAutoCreationPolicyAttributes\"></div>",
                "+                            <div data-dojo-type=\"dijit/Tooltip\"",
                "+                                 data-dojo-props=\"connectId: ['${id}_attributes'],",
                "+                              label: 'Attributes applied to the automatically created node'\">",
                "+                            </div>",
                "                             <div>"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8102": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8c23f302dc55a9159c202539249819d4c68311a6"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8102",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd9f95686e88772d3acbb4d020edbe517900c939",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517317865,
            "hunks": 6,
            "message": "QPID-8066: [Broker-J] Delete log inclusion rules on logger deletion (cherry picked from commit 3daf38b2bc0d0d36ad778b1946e36fcb5e85b25d)",
            "diff": [
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "index 35ad56273c..c6493eb0e9 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.logging.logback;",
                "+import java.util.ArrayList;",
                " import java.util.Collection;",
                "@@ -25,4 +26,6 @@ import java.util.Collections;",
                " import java.util.HashSet;",
                "+import java.util.List;",
                " import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.Callable;",
                "@@ -32,2 +35,3 @@ import ch.qos.logback.core.Appender;",
                " import ch.qos.logback.core.Context;",
                "+import com.google.common.base.Function;",
                " import com.google.common.util.concurrent.Futures;",
                "@@ -113,3 +117,10 @@ public abstract class AbstractLogger<X extends AbstractLogger<X>> extends Abstra",
                "     {",
                "-        return doAfterAlways(closeAsync(), new Runnable()",
                "+        return doAfter(deleteLogInclusionRules(), new Callable<ListenableFuture<Void>>()",
                "+        {",
                "+            @Override",
                "+            public ListenableFuture<Void> call() throws Exception",
                "+            {",
                "+                return closeAsync();",
                "+            }",
                "+        }).then(new Runnable()",
                "         {",
                "@@ -125,2 +136,23 @@ public abstract class AbstractLogger<X extends AbstractLogger<X>> extends Abstra",
                "+    private ListenableFuture<Void> deleteLogInclusionRules()",
                "+    {",
                "+        List<ListenableFuture<Void>> deleteRuleFutures = new ArrayList<>();",
                "+        for (LogInclusionRule logInclusionRule : getLogInclusionRules())",
                "+        {",
                "+            if (logInclusionRule instanceof ConfiguredObject<?>)",
                "+            {",
                "+                deleteRuleFutures.add(((ConfiguredObject<?>) logInclusionRule).deleteAsync());",
                "+            }",
                "+        }",
                "+        ListenableFuture<List<Void>> combinedFuture = Futures.allAsList(deleteRuleFutures);",
                "+        return Futures.transform(combinedFuture, new Function<List<Void>, Void>()",
                "+        {",
                "+            @Override",
                "+            public Void apply(List<Void> voids)",
                "+            {",
                "+                return null;",
                "+            }",
                "+        }, getTaskExecutor());",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AbstractLogger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8066": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3daf38b2bc0d0d36ad778b1946e36fcb5e85b25d"
                ]
            ],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8066",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "40f1b09a81e6b5f8deaf58e36773ec4c4c5d2d56",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519251596,
            "hunks": 14,
            "message": "QPID-8104: [Broker-J] [Query] Support the use of aliases in order by clauses (cherry picked from commit 9704e609db36102d40d074a866799d0fe3930ffa)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/filter/NamedExpression.java b/broker-core/src/main/java/org/apache/qpid/server/filter/NamedExpression.java",
                "new file mode 100644",
                "index 0000000000..9970f8953a",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/filter/NamedExpression.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.filter;",
                "+",
                "+public interface NamedExpression<E> extends Expression<E>",
                "+{",
                "+    String getName();",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java b/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "index 87d45d1ce9..20120dc7cb 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "@@ -60,2 +60,12 @@ public class OrderByExpression implements Expression",
                "     }",
                "+",
                "+    public boolean isNamed()",
                "+    {",
                "+        return (_expression instanceof NamedExpression);",
                "+    }",
                "+",
                "+    public String getName()",
                "+    {",
                "+        return ((NamedExpression) _expression).getName();",
                "+    }",
                " }",
                "diff --git a/broker-plugins/management-http/src/main/grammar/ConfiguredObjectFilterParser.jj b/broker-plugins/management-http/src/main/grammar/ConfiguredObjectFilterParser.jj",
                "index be1aafbc4d..d8e7536ac8 100644",
                "--- a/broker-plugins/management-http/src/main/grammar/ConfiguredObjectFilterParser.jj",
                "+++ b/broker-plugins/management-http/src/main/grammar/ConfiguredObjectFilterParser.jj",
                "@@ -79,2 +79,3 @@ import org.apache.qpid.filter.LogicExpression;",
                " import org.apache.qpid.filter.UnaryExpression;",
                "+import org.apache.qpid.filter.NamedExpression;",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectExpressionFactory.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectExpressionFactory.java",
                "index 0c31a117a2..85e3a34432 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectExpressionFactory.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectExpressionFactory.java",
                "@@ -39,2 +39,3 @@ import javax.xml.datatype.Duration;",
                " import org.apache.qpid.server.filter.Expression;",
                "+import org.apache.qpid.server.filter.NamedExpression;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectFilterParser.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectFilterParser.java",
                "index 1de4930f19..3e4e57e720 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectFilterParser.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectFilterParser.java",
                "@@ -35,2 +35,3 @@ import org.apache.qpid.server.filter.ConstantExpression;",
                " import org.apache.qpid.server.filter.Expression;",
                "+import org.apache.qpid.server.filter.NamedExpression;",
                " import org.apache.qpid.server.filter.OrderByExpression;",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "index 7fb7fac07a..1b22da0c97 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "@@ -56,2 +56,4 @@ public final class ConfiguredObjectQuery",
                "         List<Expression> getValueExpressions();",
                "+        boolean hasHeader(String name);",
                "+        Expression getValueExpressionForHeader(String name);",
                "     }",
                "@@ -86,3 +88,3 @@ public final class ConfiguredObjectQuery",
                "                                                                                                           orderByClause,",
                "-                                                                                                          headersAndValueExpressions.getValueExpressions());",
                "+                                                                                                          headersAndValueExpressions);",
                "         List<ConfiguredObject<?>> limitedOrderedObjects = applyLimitAndOffset(orderedObjects, limit, offset);",
                "@@ -163,3 +165,3 @@ public final class ConfiguredObjectQuery",
                "                     {",
                "-                        return headers;",
                "+                        return Collections.unmodifiableList(headers);",
                "                     }",
                "@@ -169,3 +171,21 @@ public final class ConfiguredObjectQuery",
                "                     {",
                "-                        return valueExpressions;",
                "+                        return Collections.unmodifiableList(valueExpressions);",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public boolean hasHeader(final String headerName)",
                "+                    {",
                "+                        return headers.contains(headerName);",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public Expression getValueExpressionForHeader(final String headerName)",
                "+                    {",
                "+                        final int i = headers.indexOf(headerName);",
                "+                        if (i  < 0)",
                "+                        {",
                "+                            throw new IllegalStateException(String.format(\"No expression found for header '%s'\", headerName));",
                "+                        }",
                "+",
                "+                        return valueExpressions.get(i);",
                "                     }",
                "@@ -248,4 +268,5 @@ public final class ConfiguredObjectQuery",
                "         public OrderByComparator(final List<OrderByExpression> orderByExpressions,",
                "-                                 final List<Expression> valueExpressions)",
                "+                                 final HeadersAndValueExpressions headersAndValue)",
                "         {",
                "+            final List<Expression> valueExpressions = headersAndValue.getValueExpressions();",
                "             _orderByExpressions = new ArrayList<>(orderByExpressions);",
                "@@ -268,2 +289,8 @@ public final class ConfiguredObjectQuery",
                "                 }",
                "+                else if (orderByExpression.isNamed() && headersAndValue.hasHeader(orderByExpression.getName()))",
                "+                {",
                "+                    Expression expression = headersAndValue.getValueExpressionForHeader(orderByExpression.getName());",
                "+                    orderByExpression = new OrderByExpression(expression, orderByExpression.getOrder());",
                "+                    iterator.set(orderByExpression);",
                "+                }",
                "             }",
                "@@ -315,4 +342,4 @@ public final class ConfiguredObjectQuery",
                "     private List<ConfiguredObject<?>> orderObjects(final List<ConfiguredObject<?>> unorderedResults,",
                "-                                                   String orderByClause,",
                "-                                                   final List<Expression> valueExpressions)",
                "+                                                   final String orderByClause,",
                "+                                                   final HeadersAndValueExpressions headersAndValue)",
                "     {",
                "@@ -321,3 +348,3 @@ public final class ConfiguredObjectQuery",
                "         orderedObjects.addAll(unorderedResults);",
                "-        Comparator<Object> comparator = new OrderByComparator(orderByExpressions, valueExpressions);",
                "+        Comparator<Object> comparator = new OrderByComparator(orderByExpressions, headersAndValue);",
                "         Collections.sort(orderedObjects, comparator);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/filter/NamedExpression.java",
                "broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "broker-plugins/management-http/src/main/grammar/ConfiguredObjectFilterParser.jj",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectExpressionFactory.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectFilterParser.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8104": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9704e609db36102d40d074a866799d0fe3930ffa"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8104",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d0736c518f85495ce43a9c1d480693b93eef8c70",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517573860,
            "hunks": 5,
            "message": "QPID-8081: [Broker-J] [Logback] Defensive guard against null activeFile",
            "diff": [
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "index 16fd87d893..2de5161cb5 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "@@ -118,3 +118,3 @@ public class AppenderUtils",
                "         private final FileSize _maxFileSize;",
                "-        private boolean _isFirst = true;",
                "+        private volatile boolean _isFirst = true;",
                "@@ -143,3 +143,3 @@ public class AppenderUtils",
                "                 _isFirst = false;",
                "-                if (activeFile.exists() && activeFile.length() == 0)",
                "+                if (activeFile != null && activeFile.exists() && activeFile.length() == 0)",
                "                 {",
                "@@ -163,3 +163,3 @@ public class AppenderUtils",
                "         private final FileSize _maxFileSize;",
                "-        private boolean _isFirst = true;",
                "+        private volatile boolean _isFirst = true;",
                "@@ -179,3 +179,3 @@ public class AppenderUtils",
                "                 _isFirst = false;",
                "-                return activeFile.exists() && activeFile.length() != 0l;",
                "+                return activeFile != null && activeFile.exists() && activeFile.length() != 0;",
                "             }",
                "@@ -195,3 +195,3 @@ public class AppenderUtils",
                "     {",
                "-        private int _maxFiles;",
                "+        private final int _maxFiles;"
            ],
            "changed_files": [
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8081": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d31e478a490e1398c85587bf0de2883ea8b9c3d8"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8081",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e956813b0909ed08c8aac3b0b259d0b63d2d474",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521036709,
            "hunks": 1,
            "message": "QPID-8130: [Broker-J] Fix comparator for log file details",
            "diff": [
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/RolloverWatcher.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/RolloverWatcher.java",
                "index 82f385f649..aaaf42983d 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/RolloverWatcher.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/RolloverWatcher.java",
                "@@ -50,3 +50,3 @@ public class RolloverWatcher implements RollingPolicyDecorator.RolloverListener",
                "         {",
                "-            return (int) (o2.getLastModified() - o1.getLastModified());",
                "+            return Long.compare(o2.getLastModified(), o1.getLastModified());",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/RolloverWatcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8130": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e1b5f5ad965a81676842dcf62be10b73a4c4442f"
                ],
                [
                    "no-tag",
                    "890c5cec33ff28aabb0435e262ce235991119235"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8130",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0314c2a9cc7b98488bcb506214cec9b7c13784ca",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519726414,
            "hunks": 3,
            "message": "QPID-8103: [Broker-J] Reduce code duplication",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "index bf56bf4da2..0b181f4bd4 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "@@ -367,4 +367,11 @@ define([\"dojo/_base/lang\",",
                "             var url = this.buildObjectURL(modelObj, parameters, operation);",
                "+            this.downloadUrlIntoFrame(url, \"downloader_\" + modelObj.name)",
                "+        };",
                "+",
                "+        // summary:",
                "+        //  Downloads given URL into a iframe with given id",
                "+        Management.prototype.downloadUrlIntoFrame = function (url, frameId)",
                "+        {",
                "             var iframe = document.createElement('iframe');",
                "-            iframe.id = \"downloader_\" + modelObj.name;",
                "+            iframe.id = frameId;",
                "             iframe.style.display = \"none\";",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "index 892e7ff145..21a616c89f 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "@@ -1003,7 +1003,3 @@ define([\"dojo/_base/declare\",",
                "                     var url = this.management.getQueryUrl({category: this.categoryName, parent: this.parentObject}, params);",
                "-                    var iframe = document.createElement('iframe');",
                "-                    iframe.id = \"query_downloader_\" + id;",
                "-                    iframe.style.display = \"none\";",
                "-                    document.body.appendChild(iframe);",
                "-                    iframe.src = url;",
                "+                    this.management.downloadUrlIntoFrame(url, \"query_downloader_\" + id);",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6a66466e84767f8bdd65e72365608efe3d298e56"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "38819bcac6dc5481357d2c05aaf281e7c83532fe",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519377664,
            "hunks": 8,
            "message": "QPID-8104: [Broker-J] [Query] Generalise the implementation so that aliases may appear within expressions within the order-by clause",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java b/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "index 20120dc7cb..87d45d1ce9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "@@ -60,12 +60,2 @@ public class OrderByExpression implements Expression",
                "     }",
                "-",
                "-    public boolean isNamed()",
                "-    {",
                "-        return (_expression instanceof NamedExpression);",
                "-    }",
                "-",
                "-    public String getName()",
                "-    {",
                "-        return ((NamedExpression) _expression).getName();",
                "-    }",
                " }",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "index 1b22da0c97..f06051defb 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java",
                "@@ -268,5 +268,4 @@ public final class ConfiguredObjectQuery",
                "         public OrderByComparator(final List<OrderByExpression> orderByExpressions,",
                "-                                 final HeadersAndValueExpressions headersAndValue)",
                "+                                 final List<Expression> valueExpressions)",
                "         {",
                "-            final List<Expression> valueExpressions = headersAndValue.getValueExpressions();",
                "             _orderByExpressions = new ArrayList<>(orderByExpressions);",
                "@@ -289,8 +288,2 @@ public final class ConfiguredObjectQuery",
                "                 }",
                "-                else if (orderByExpression.isNamed() && headersAndValue.hasHeader(orderByExpression.getName()))",
                "-                {",
                "-                    Expression expression = headersAndValue.getValueExpressionForHeader(orderByExpression.getName());",
                "-                    orderByExpression = new OrderByExpression(expression, orderByExpression.getOrder());",
                "-                    iterator.set(orderByExpression);",
                "-                }",
                "             }",
                "@@ -345,6 +338,6 @@ public final class ConfiguredObjectQuery",
                "     {",
                "-        List<OrderByExpression> orderByExpressions = parseOrderByClause(orderByClause);",
                "+        List<OrderByExpression> orderByExpressions = parseOrderByClause(orderByClause, headersAndValue);",
                "         List<ConfiguredObject<?>> orderedObjects = new ArrayList<>(unorderedResults.size());",
                "         orderedObjects.addAll(unorderedResults);",
                "-        Comparator<Object> comparator = new OrderByComparator(orderByExpressions, headersAndValue);",
                "+        Comparator<Object> comparator = new OrderByComparator(orderByExpressions, headersAndValue.getValueExpressions());",
                "         Collections.sort(orderedObjects, comparator);",
                "@@ -353,3 +346,4 @@ public final class ConfiguredObjectQuery",
                "-    private List<OrderByExpression> parseOrderByClause(final String orderByClause)",
                "+    private List<OrderByExpression> parseOrderByClause(final String orderByClause,",
                "+                                                       final HeadersAndValueExpressions headersAndValue)",
                "     {",
                "@@ -357,3 +351,18 @@ public final class ConfiguredObjectQuery",
                "         ConfiguredObjectFilterParser parser = new ConfiguredObjectFilterParser();",
                "-        parser.setConfiguredObjectExpressionFactory(_expressionFactory);",
                "+        parser.setConfiguredObjectExpressionFactory(new ConfiguredObjectExpressionFactory()",
                "+        {",
                "+            @Override",
                "+            public ConfiguredObjectExpression createConfiguredObjectExpression(final String propertyName)",
                "+            {",
                "+                if (headersAndValue.hasHeader(propertyName))",
                "+                {",
                "+                    Expression expression = headersAndValue.getValueExpressionForHeader(propertyName);",
                "+                    return object -> expression.evaluate(object);",
                "+                }",
                "+                else",
                "+                {",
                "+                    return super.createConfiguredObjectExpression(propertyName);",
                "+                }",
                "+            }",
                "+        });",
                "         try"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/filter/OrderByExpression.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/query/ConfiguredObjectQuery.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8104": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7c69d1704b26064da9831a1c076fa0d3d43e6db8"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8104",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6adeac949a747b1527e603577310f39846265244",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517424397,
            "hunks": 16,
            "message": "QPID-8090: [Broker-J] Support all available BoneCP configuration settings",
            "diff": [
                "diff --git a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "index 2687a32bf9..3ee68811d4 100644",
                "--- a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "+++ b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.jdbc.bonecp;",
                "+import static org.apache.qpid.server.store.jdbc.bonecp.BoneCPConnectionProviderFactory.JDBCSTORE_PREFIX;",
                " import static org.apache.qpid.server.store.jdbc.bonecp.BoneCPConnectionProviderFactory.MAX_CONNECTIONS_PER_PARTITION;",
                "@@ -26,9 +27,14 @@ import static org.apache.qpid.server.store.jdbc.bonecp.BoneCPConnectionProviderF",
                "-import com.jolbox.bonecp.BoneCP;",
                "-import com.jolbox.bonecp.BoneCPConfig;",
                "-import org.apache.qpid.server.store.jdbc.ConnectionProvider;",
                "-",
                " import java.sql.Connection;",
                " import java.sql.SQLException;",
                "+import java.util.HashMap;",
                " import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import com.jolbox.bonecp.BoneCP;",
                "+import com.jolbox.bonecp.BoneCPConfig;",
                "+",
                "+import org.apache.qpid.server.store.jdbc.ConnectionProvider;",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -43,2 +49,10 @@ public class BoneCPConnectionProvider implements ConnectionProvider",
                "     public BoneCPConnectionProvider(String connectionUrl, String username, String password, Map<String, String> providerAttributes) throws SQLException",
                "+    {",
                "+        _connectionPool = new BoneCP(createBoneCPConfig(connectionUrl, username, password, providerAttributes));",
                "+    }",
                "+",
                "+    static BoneCPConfig createBoneCPConfig(final String connectionUrl,",
                "+                                           final String username,",
                "+                                           final String password,",
                "+                                           final Map<String, String> providerAttributes)",
                "     {",
                "@@ -52,27 +66,27 @@ public class BoneCPConnectionProvider implements ConnectionProvider",
                "-        config.setMinConnectionsPerPartition(convertToIntWithDefault(MIN_CONNECTIONS_PER_PARTITION, providerAttributes, DEFAULT_MIN_CONNECTIONS_PER_PARTITION));",
                "-        config.setMaxConnectionsPerPartition(convertToIntWithDefault(MAX_CONNECTIONS_PER_PARTITION, providerAttributes, DEFAULT_MAX_CONNECTIONS_PER_PARTITION));",
                "-        config.setPartitionCount(convertToIntWithDefault(PARTITION_COUNT, providerAttributes, DEFAULT_PARTITION_COUNT));",
                "+        Map<String, String> attributes = new HashMap<>(providerAttributes);",
                "+        attributes.putIfAbsent(MIN_CONNECTIONS_PER_PARTITION, String.valueOf(DEFAULT_MIN_CONNECTIONS_PER_PARTITION));",
                "+        attributes.putIfAbsent(MAX_CONNECTIONS_PER_PARTITION, String.valueOf(DEFAULT_MAX_CONNECTIONS_PER_PARTITION));",
                "+        attributes.putIfAbsent(PARTITION_COUNT, String.valueOf(DEFAULT_PARTITION_COUNT));",
                "-        _connectionPool = new BoneCP(config);",
                "-    }",
                "+        Map<String, String> propertiesMap =",
                "+                attributes.entrySet()",
                "+                          .stream()",
                "+                          .collect(Collectors.toMap(p -> p.getKey().substring(JDBCSTORE_PREFIX.length()),",
                "+                                                    Map.Entry::getValue));",
                "-    private int convertToIntWithDefault(String key, Map<String, String> context, int defaultValue)",
                "-    {",
                "-        if (context.containsKey(key))",
                "+        Properties properties = new Properties();",
                "+        properties.putAll(propertiesMap);",
                "+",
                "+        try",
                "         {",
                "-            try",
                "-            {",
                "-                return Integer.parseInt(context.get(key));",
                "-            }",
                "-            catch (NumberFormatException e)",
                "-            {",
                "-               return defaultValue;",
                "-            }",
                "+            config.setProperties(properties);",
                "         }",
                "-        else",
                "+        catch (Exception e)",
                "         {",
                "-            return defaultValue;",
                "+            throw new ServerScopedRuntimeException(\"Unexpected exception on applying BoneCP configuration\", e);",
                "         }",
                "+        return config;",
                "     }",
                "+",
                "     @Override",
                "diff --git a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProviderFactory.java b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProviderFactory.java",
                "index 3f668e9128..9040fb428a 100644",
                "--- a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProviderFactory.java",
                "+++ b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProviderFactory.java",
                "@@ -22,9 +22,12 @@ package org.apache.qpid.server.store.jdbc.bonecp;",
                "-import static java.util.Arrays.asList;",
                " import static java.util.Collections.unmodifiableSet;",
                "+import java.lang.reflect.Modifier;",
                " import java.sql.SQLException;",
                "-import java.util.HashSet;",
                "+import java.util.Arrays;",
                " import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import com.jolbox.bonecp.BoneCPConfig;",
                "@@ -37,7 +40,26 @@ public class BoneCPConnectionProviderFactory implements JDBCConnectionProviderFa",
                " {",
                "-    public static final String PARTITION_COUNT = \"qpid.jdbcstore.bonecp.partitionCount\";",
                "-    public static final String MAX_CONNECTIONS_PER_PARTITION = \"qpid.jdbcstore.bonecp.maxConnectionsPerPartition\";",
                "-    public static final String MIN_CONNECTIONS_PER_PARTITION = \"qpid.jdbcstore.bonecp.minConnectionsPerPartition\";",
                "+    static final String JDBCSTORE_PREFIX = \"qpid.jdbcstore.\";",
                "+    static final String BONECP_SETTING_PREFIX = JDBCSTORE_PREFIX + \"bonecp.\";",
                "+    static final String PARTITION_COUNT = BONECP_SETTING_PREFIX + \"partitionCount\";",
                "+    static final String MAX_CONNECTIONS_PER_PARTITION = BONECP_SETTING_PREFIX + \"maxConnectionsPerPartition\";",
                "+    static final String MIN_CONNECTIONS_PER_PARTITION = BONECP_SETTING_PREFIX + \"minConnectionsPerPartition\";",
                "+",
                "+    private final Set<String> _supportedAttributes;",
                "-    private final Set<String> _supportedAttributes = unmodifiableSet(new HashSet<String>(asList(PARTITION_COUNT, MAX_CONNECTIONS_PER_PARTITION, MIN_CONNECTIONS_PER_PARTITION)));",
                "+    public BoneCPConnectionProviderFactory()",
                "+    {",
                "+        Set<String> names = Arrays.stream(BoneCPConfig.class.getMethods())",
                "+                                  .filter(m -> m.getName().startsWith(\"set\")",
                "+                                               && m.getName().length() > 3",
                "+                                               && Modifier.isPublic(m.getModifiers())",
                "+                                               && m.getParameterCount() == 1",
                "+                                               && (m.getParameterTypes()[0].isPrimitive()",
                "+                                                   || m.getParameterTypes()[0] == String.class))",
                "+                                  .map(m -> {",
                "+                                      String n = m.getName().substring(3);",
                "+                                      n = BONECP_SETTING_PREFIX + Character.toLowerCase(n.charAt(0)) + n.substring(1);",
                "+                                      return n;",
                "+                                  }).collect(Collectors.toSet());",
                "+        _supportedAttributes = unmodifiableSet(names);",
                "+    }"
            ],
            "changed_files": [
                "broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProviderFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8090": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7384d4dbcbc7c4c9f8cf5173d7dd6ebcff7ad2d3"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8090",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "44c91e708df1013644f28623c89b1907d6b0e470",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522337026,
            "hunks": 1,
            "message": "QPID-8144: [Broker-J] Correct arithmetic type used when computing utilised direct memory (from int to long). Cherry picked from master 8e6d2c1f2cb47df31d7d2ccb8e00dfed6b713a70",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/bytebuffer/QpidByteBufferFactory.java b/broker-core/src/main/java/org/apache/qpid/server/bytebuffer/QpidByteBufferFactory.java",
                "index 32b0ecccf6..fd74860abf 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/bytebuffer/QpidByteBufferFactory.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/bytebuffer/QpidByteBufferFactory.java",
                "@@ -368,3 +368,3 @@ final class QpidByteBufferFactory",
                "     {",
                "-        return _pooledBufferSize * getNumberOfBuffersInUse();",
                "+        return (long)_pooledBufferSize * getNumberOfBuffersInUse();",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/bytebuffer/QpidByteBufferFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8144": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f4a8107c7cb5eac33f2f5abd3607eaa8d9b0271b"
                ],
                [
                    "no-tag",
                    "b35dda09a8c0a3c99fd522518e899dfd5f53bd58"
                ],
                [
                    "no-tag",
                    "8e6d2c1f2cb47df31d7d2ccb8e00dfed6b713a70"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8144",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "969f7a3c64556a5adbdf74b6564358a51ebe3009",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519130009,
            "hunks": 11,
            "message": "QPID-8101: [Broker-J] [WMC] Add ability to close more than one connection at once (cherry picked from commit fbca8f16e36d84fc0fc3291ca9937b31ed8a73a4)",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/css/common.css b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "index bc92699cd9..cac53f6df0 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "+++ b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "@@ -524,3 +524,4 @@ td.advancedSearchField, col.autoWidth {",
                "-.virtualHostConnections .field-name { width: 20%; }",
                "+.virtualHostConnections .field-selected { width: 2em; }",
                "+.virtualHostConnections .field-name { width: auto; }",
                " .virtualHostConnections .field-principal { width: 10% }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "index 11fc134595..dd7a2fcd53 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "@@ -91,3 +91,5 @@ define([\"dojo/parser\",",
                "                     {",
                "-                        that._deleteSelectedItems(that.vhostUpdater.queuesGrid, \"queue\", \"queue\");",
                "+                        that._deleteSelectedItems(that.vhostUpdater.queuesGrid,",
                "+                                                  {type: \"queue\", parent: this.modelObj},",
                "+                                                  \"delete\", \"queue\");",
                "                     });",
                "@@ -103,3 +105,13 @@ define([\"dojo/parser\",",
                "                     {",
                "-                        that._deleteSelectedItems(that.vhostUpdater.exchangesGrid, \"exchange\", \"exchange\");",
                "+                        that._deleteSelectedItems(that.vhostUpdater.exchangesGrid,",
                "+                                                 {type: \"exchange\", parent: that.modelObj},",
                "+                                                 \"delete\", \"exchange\");",
                "+                    });",
                "+",
                "+                    var closeConnectionButton = query(\".closeConnectionButton\", containerNode)[0];",
                "+                    registry.byNode(closeConnectionButton).on(\"click\", function (evt)",
                "+                    {",
                "+                        that._deleteSelectedItems(that.vhostUpdater.connectionsGrid,",
                "+                                                  {type: \"connection\"},",
                "+                                                  \"close\", \"connection\");",
                "                     });",
                "@@ -117,3 +129,5 @@ define([\"dojo/parser\",",
                "                     {",
                "-                        that._deleteSelectedItems(that.vhostUpdater.virtualHostLoggersGrid, \"virtualhostlogger\", \"virtual host logger\");",
                "+                        that._deleteSelectedItems(that.vhostUpdater.virtualHostLoggersGrid,",
                "+                                                  {type: \"virtualhostlogger\", parent: that.modelObj},",
                "+                                                  \"delete\", \"virtual host logger\");",
                "                     });",
                "@@ -177,3 +191,3 @@ define([\"dojo/parser\",",
                "-        VirtualHost.prototype._deleteSelectedItems = function(dgrid, category, friendlyCategoryName)",
                "+        VirtualHost.prototype._deleteSelectedItems = function (dgrid, modelObj, friendlyAction, friendlyCategoryName)",
                "         {",
                "@@ -190,14 +204,11 @@ define([\"dojo/parser\",",
                "             {",
                "-                var ending = selected.length > 1 ? \"s \" : \" \";",
                "-                if (confirm(lang.replace(\"Are you sure you want to delete {0} {1}{2}from virtual host '{3}'?\",",
                "-                        [selected.length,",
                "-                         entities.encode(String(friendlyCategoryName || category )),",
                "-                         ending,",
                "-                         entities.encode(String(this.modelObj.name))])))",
                "+                var plural = selected.length === 1 ? \"\" : \"s\";",
                "+                if (confirm(lang.replace(\"Are you sure you want to {0} {1} {2}{3}?\",",
                "+                        [friendlyAction,",
                "+                         selected.length,",
                "+                         entities.encode(friendlyCategoryName),",
                "+                         plural])))",
                "                 {",
                "                     this.management",
                "-                        .remove({",
                "-                            type: category,",
                "-                            parent: this.modelObj",
                "-                        }, {\"id\": selected})",
                "+                        .remove(modelObj, {\"id\": selected})",
                "                         .then(lang.hitch(this, function (responseData)",
                "@@ -354,6 +365,5 @@ define([\"dojo/parser\",",
                "-            this.connectionsGrid = new QueryGrid({",
                "+            this.connectionsGrid = new CustomGrid({",
                "                 detectChanges: true,",
                "                 rowsPerPage: 10,",
                "-                selectionMode: 'none',",
                "                 transformer: lang.hitch(this, this._transformConnectionData),",
                "@@ -364,3 +374,11 @@ define([\"dojo/parser\",",
                "                 orderBy: \"name\",",
                "-                columns: [{",
                "+                selectionMode: 'none',",
                "+                deselectOnRefresh: false,",
                "+                allowSelectAll: true,",
                "+                columns: [",
                "+                {",
                "+                    field: \"selected\",",
                "+                    label: 'All',",
                "+                    selector: 'checkbox'",
                "+                }, {",
                "                     label: \"Name\",",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "index 8ae1a69a86..9be2a60edb 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "@@ -127,2 +127,3 @@",
                "             <div class=\"connections\"></div>",
                "+            <button data-dojo-type=\"dijit.form.Button\" class=\"closeConnectionButton\">Close Connection</button>",
                "         </div>"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/css/common.css",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/showVirtualHost.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8101": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fbca8f16e36d84fc0fc3291ca9937b31ed8a73a4"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8101",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2a9ffe312d0d4a90e18efd10b49b35fc627a66ff",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519660012,
            "hunks": 10,
            "message": "QPID-8103: [Broker-J] Import Common CSV sources from revision 'eede739d18c69722ff39e8e42df6b68ae7627082' (cherry picked from commit 8758e7c826943a399bf5c6ee2a1f53db188d9f2d)",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "new file mode 100644",
                "index 0000000000..63e8d17c67",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import java.util.Objects;",
                "+",
                "+/**",
                "+ * Utility class for input parameter validation.",
                "+ *",
                "+ * TODO Replace usage with {@link Objects} when we switch to Java 7.",
                "+ */",
                "+final class Assertions {",
                "+",
                "+    private Assertions() {",
                "+        // can not be instantiated",
                "+    }",
                "+",
                "+    public static void notNull(final Object parameter, final String parameterName) {",
                "+        if (parameter == null) {",
                "+            throw new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "new file mode 100644",
                "index 0000000000..97a0b6c311",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "@@ -0,0 +1,1983 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.*;",
                "+",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.OutputStreamWriter;",
                "+import java.io.Reader;",
                "+import java.io.Serializable;",
                "+import java.io.StringWriter;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.sql.ResultSet;",
                "+import java.sql.ResultSetMetaData;",
                "+import java.sql.SQLException;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * Specifies the format of a CSV file and parses input.",
                "+ *",
                "+ * <h2>Using predefined formats</h2>",
                "+ *",
                "+ * <p>",
                "+ * You can use one of the predefined formats:",
                "+ * </p>",
                "+ *",
                "+ * <ul>",
                "+ * <li>{@link #DEFAULT}</li>",
                "+ * <li>{@link #EXCEL}</li>",
                "+ * <li>{@link #MYSQL}</li>",
                "+ * <li>{@link #RFC4180}</li>",
                "+ * <li>{@link #TDF}</li>",
                "+ * </ul>",
                "+ *",
                "+ * <p>",
                "+ * For example:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVParser parser = CSVFormat.EXCEL.parse(reader);",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * The {@link CSVParser} provides static methods to parse other input types, for example:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVParser parser = CSVParser.parse(file, StandardCharsets.US_ASCII, CSVFormat.EXCEL);",
                "+ * </pre>",
                "+ *",
                "+ * <h2>Defining formats</h2>",
                "+ *",
                "+ * <p>",
                "+ * You can extend a format by calling the {@code with} methods. For example:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVFormat.EXCEL.withNullString(&quot;N/A&quot;).withIgnoreSurroundingSpaces(true);",
                "+ * </pre>",
                "+ *",
                "+ * <h2>Defining column names</h2>",
                "+ *",
                "+ * <p>",
                "+ * To define the column names you want to use to access records, write:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;);",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and",
                "+ * assumes that your CSV source does not contain a first record that also defines column names.",
                "+ *",
                "+ * If it does, then you are overriding this metadata with your names and you should skip the first record by calling",
                "+ * {@link #withSkipHeaderRecord(boolean)} with {@code true}.",
                "+ * </p>",
                "+ *",
                "+ * <h2>Parsing</h2>",
                "+ *",
                "+ * <p>",
                "+ * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * Reader in = ...;",
                "+ * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;).parse(in);",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.",
                "+ * </p>",
                "+ *",
                "+ * <h2>Referencing columns safely</h2>",
                "+ *",
                "+ * <p>",
                "+ * If your source contains a header record, you can simplify your code and safely reference columns, by using",
                "+ * {@link #withHeader(String...)} with no arguments:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVFormat.EXCEL.withHeader();",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * This causes the parser to read the first record and use its values as column names.",
                "+ *",
                "+ * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * String value = record.get(&quot;Col1&quot;);",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * This makes your code impervious to changes in column order in the CSV file.",
                "+ * </p>",
                "+ *",
                "+ * <h2>Notes</h2>",
                "+ *",
                "+ * <p>",
                "+ * This class is immutable.",
                "+ * </p>",
                "+ */",
                "+public final class CSVFormat implements Serializable {",
                "+",
                "+    /**",
                "+     * Predefines formats.",
                "+     *",
                "+     * @since 1.2",
                "+     */",
                "+    public enum Predefined {",
                "+",
                "+        /**",
                "+         * @see CSVFormat#DEFAULT",
                "+         */",
                "+        Default(CSVFormat.DEFAULT),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#EXCEL",
                "+         */",
                "+        Excel(CSVFormat.EXCEL),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#INFORMIX_UNLOAD",
                "+         * @since 1.3",
                "+         */",
                "+        InformixUnload(CSVFormat.INFORMIX_UNLOAD),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#INFORMIX_UNLOAD_CSV",
                "+         * @since 1.3",
                "+         */",
                "+        InformixUnloadCsv(CSVFormat.INFORMIX_UNLOAD_CSV),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#MYSQL",
                "+         */",
                "+        MySQL(CSVFormat.MYSQL),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#POSTGRESQL_CSV",
                "+         * @since 1.5",
                "+         */",
                "+        PostgreSQLCsv(CSVFormat.POSTGRESQL_CSV),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#POSTGRESQL_CSV",
                "+         */",
                "+        PostgreSQLText(CSVFormat.POSTGRESQL_TEXT),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#RFC4180",
                "+         */",
                "+        RFC4180(CSVFormat.RFC4180),",
                "+",
                "+        /**",
                "+         * @see CSVFormat#TDF",
                "+         */",
                "+        TDF(CSVFormat.TDF);",
                "+",
                "+        private final CSVFormat format;",
                "+",
                "+        Predefined(final CSVFormat format) {",
                "+            this.format = format;",
                "+        }",
                "+",
                "+        /**",
                "+         * Gets the format.",
                "+         *",
                "+         * @return the format.",
                "+         */",
                "+        public CSVFormat getFormat() {",
                "+            return format;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter(',')</li>",
                "+     * <li>withQuote('\"')</li>",
                "+     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "+     * <li>withIgnoreEmptyLines(true)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#Default",
                "+     */",
                "+    public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,",
                "+            null, null, null, false, false, false, false, false, false);",
                "+",
                "+    /**",
                "+     * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is",
                "+     * locale dependent, it might be necessary to customize this format to accommodate to your regional settings.",
                "+     *",
                "+     * <p>",
                "+     * For example for parsing or generating a CSV file on a French system the following format will be used:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');",
                "+     * </pre>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>{@link #withDelimiter(char) withDelimiter(',')}</li>",
                "+     * <li>{@link #withQuote(char) withQuote('\"')}</li>",
                "+     * <li>{@link #withRecordSeparator(String) withRecordSeparator(\"\\r\\n\")}</li>",
                "+     * <li>{@link #withIgnoreEmptyLines(boolean) withIgnoreEmptyLines(false)}</li>",
                "+     * <li>{@link #withAllowMissingColumnNames(boolean) withAllowMissingColumnNames(true)}</li>",
                "+     * </ul>",
                "+     * <p>",
                "+     * Note: this is currently like {@link #RFC4180} plus {@link #withAllowMissingColumnNames(boolean)",
                "+     * withAllowMissingColumnNames(true)}.",
                "+     * </p>",
                "+     *",
                "+     * @see Predefined#Excel",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat EXCEL = DEFAULT",
                "+            .withIgnoreEmptyLines(false)",
                "+            .withAllowMissingColumnNames();",
                "+    // @formatter:on",
                "+",
                "+    /**",
                "+     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation.",
                "+     *",
                "+     * <p>",
                "+     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special",
                "+     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter(',')</li>",
                "+     * <li>withQuote(\"\\\"\")</li>",
                "+     * <li>withRecordSeparator('\\n')</li>",
                "+     * <li>withEscape('\\\\')</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#MySQL",
                "+     * @see <a href=",
                "+     *      \"http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm\">",
                "+     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm</a>",
                "+     * @since 1.3",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat INFORMIX_UNLOAD = DEFAULT",
                "+            .withDelimiter(PIPE)",
                "+            .withEscape(BACKSLASH)",
                "+            .withQuote(DOUBLE_QUOTE_CHAR)",
                "+            .withRecordSeparator(LF);",
                "+    // @formatter:on",
                "+",
                "+    /**",
                "+     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation (escaping is disabled.)",
                "+     *",
                "+     * <p>",
                "+     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special",
                "+     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter(',')</li>",
                "+     * <li>withQuote(\"\\\"\")</li>",
                "+     * <li>withRecordSeparator('\\n')</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#MySQL",
                "+     * @see <a href=",
                "+     *      \"http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm\">",
                "+     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm</a>",
                "+     * @since 1.3",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT",
                "+            .withDelimiter(COMMA)",
                "+            .withQuote(DOUBLE_QUOTE_CHAR)",
                "+            .withRecordSeparator(LF);",
                "+    // @formatter:on",
                "+",
                "+    /**",
                "+     * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.",
                "+     *",
                "+     * <p>",
                "+     * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special",
                "+     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter('\\t')</li>",
                "+     * <li>withQuote(null)</li>",
                "+     * <li>withRecordSeparator('\\n')</li>",
                "+     * <li>withIgnoreEmptyLines(false)</li>",
                "+     * <li>withEscape('\\\\')</li>",
                "+     * <li>withNullString(\"\\\\N\")</li>",
                "+     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#MySQL",
                "+     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "+     *      -data.html</a>",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat MYSQL = DEFAULT",
                "+            .withDelimiter(TAB)",
                "+            .withEscape(BACKSLASH)",
                "+            .withIgnoreEmptyLines(false)",
                "+            .withQuote(null)",
                "+            .withRecordSeparator(LF)",
                "+            .withNullString(\"\\\\N\")",
                "+            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "+    // @formatter:off",
                "+",
                "+    /**",
                "+     * Default PostgreSQL CSV format used by the {@code COPY} operation.",
                "+     *",
                "+     * <p>",
                "+     * This is a comma-delimited format with a LF character as the line separator. Values are double quoted and special",
                "+     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\"}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter(',')</li>",
                "+     * <li>withQuote('\"')</li>",
                "+     * <li>withRecordSeparator('\\n')</li>",
                "+     * <li>withIgnoreEmptyLines(false)</li>",
                "+     * <li>withEscape('\\\\')</li>",
                "+     * <li>withNullString(\"\")</li>",
                "+     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#MySQL",
                "+     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "+     *      -data.html</a>",
                "+     * @since 1.5",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat POSTGRESQL_CSV = DEFAULT",
                "+            .withDelimiter(COMMA)",
                "+            .withEscape(DOUBLE_QUOTE_CHAR)",
                "+            .withIgnoreEmptyLines(false)",
                "+            .withQuote(DOUBLE_QUOTE_CHAR)",
                "+            .withRecordSeparator(LF)",
                "+            .withNullString(EMPTY)",
                "+            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "+    // @formatter:off",
                "+",
                "+    /**",
                "+     * Default PostgreSQL text format used by the {@code COPY} operation.",
                "+     *",
                "+     * <p>",
                "+     * This is a tab-delimited format with a LF character as the line separator. Values are double quoted and special",
                "+     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\\\\N\"}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter('\\t')</li>",
                "+     * <li>withQuote('\"')</li>",
                "+     * <li>withRecordSeparator('\\n')</li>",
                "+     * <li>withIgnoreEmptyLines(false)</li>",
                "+     * <li>withEscape('\\\\')</li>",
                "+     * <li>withNullString(\"\\\\N\")</li>",
                "+     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#MySQL",
                "+     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "+     *      -data.html</a>",
                "+     * @since 1.5",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat POSTGRESQL_TEXT = DEFAULT",
                "+            .withDelimiter(TAB)",
                "+            .withEscape(DOUBLE_QUOTE_CHAR)",
                "+            .withIgnoreEmptyLines(false)",
                "+            .withQuote(DOUBLE_QUOTE_CHAR)",
                "+            .withRecordSeparator(LF)",
                "+            .withNullString(\"\\\\N\")",
                "+            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "+    // @formatter:off",
                "+",
                "+    /**",
                "+     * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter(',')</li>",
                "+     * <li>withQuote('\"')</li>",
                "+     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "+     * <li>withIgnoreEmptyLines(false)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#RFC4180",
                "+     */",
                "+    public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
                "+",
                "+    private static final long serialVersionUID = 1L;",
                "+",
                "+    /**",
                "+     * Tab-delimited format.",
                "+     *",
                "+     * <p>",
                "+     * Settings are:",
                "+     * </p>",
                "+     * <ul>",
                "+     * <li>withDelimiter('\\t')</li>",
                "+     * <li>withQuote('\"')</li>",
                "+     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "+     * <li>withIgnoreSurroundingSpaces(true)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @see Predefined#TDF",
                "+     */",
                "+    // @formatter:off",
                "+    public static final CSVFormat TDF = DEFAULT",
                "+            .withDelimiter(TAB)",
                "+            .withIgnoreSurroundingSpaces();",
                "+    // @formatter:on",
                "+",
                "+    /**",
                "+     * Returns true if the given character is a line break character.",
                "+     *",
                "+     * @param c",
                "+     *            the character to check",
                "+     *",
                "+     * @return true if <code>c</code> is a line break character",
                "+     */",
                "+    private static boolean isLineBreak(final char c) {",
                "+        return c == LF || c == CR;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns true if the given character is a line break character.",
                "+     *",
                "+     * @param c",
                "+     *            the character to check, may be null",
                "+     *",
                "+     * @return true if <code>c</code> is a line break character (and not null)",
                "+     */",
                "+    private static boolean isLineBreak(final Character c) {",
                "+        return c != null && isLineBreak(c.charValue());",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a new CSV format with the specified delimiter.",
                "+     *",
                "+     * <p>",
                "+     * Use this method if you want to create a CSVFormat from scratch. All fields but the delimiter will be initialized",
                "+     * with null/false.",
                "+     * </p>",
                "+     *",
                "+     * @param delimiter",
                "+     *            the char used for value separation, must not be a line break character",
                "+     * @return a new CSV format.",
                "+     * @throws IllegalArgumentException",
                "+     *             if the delimiter is a line break character",
                "+     *",
                "+     * @see #DEFAULT",
                "+     * @see #RFC4180",
                "+     * @see #MYSQL",
                "+     * @see #EXCEL",
                "+     * @see #TDF",
                "+     */",
                "+    public static CSVFormat newFormat(final char delimiter) {",
                "+        return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,",
                "+                false, false, false, false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets one of the predefined formats from {@link CSVFormat.Predefined}.",
                "+     *",
                "+     * @param format",
                "+     *            name",
                "+     * @return one of the predefined formats",
                "+     * @since 1.2",
                "+     */",
                "+    public static CSVFormat valueOf(final String format) {",
                "+        return CSVFormat.Predefined.valueOf(format).getFormat();",
                "+    }",
                "+",
                "+    private final boolean allowMissingColumnNames;",
                "+",
                "+    private final Character commentMarker; // null if commenting is disabled",
                "+",
                "+    private final char delimiter;",
                "+",
                "+    private final Character escapeCharacter; // null if escaping is disabled",
                "+",
                "+    private final String[] header; // array of header column names",
                "+",
                "+    private final String[] headerComments; // array of header comment lines",
                "+",
                "+    private final boolean ignoreEmptyLines;",
                "+",
                "+    private final boolean ignoreHeaderCase; // should ignore header names case",
                "+",
                "+    private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?",
                "+",
                "+    private final String nullString; // the string to be used for null values",
                "+",
                "+    private final Character quoteCharacter; // null if quoting is disabled",
                "+",
                "+    private final QuoteMode quoteMode;",
                "+",
                "+    private final String recordSeparator; // for outputs",
                "+",
                "+    private final boolean skipHeaderRecord;",
                "+",
                "+    private final boolean trailingDelimiter;",
                "+",
                "+    private final boolean trim;",
                "+",
                "+    private final boolean autoFlush;",
                "+",
                "+    /**",
                "+     * Creates a customized CSV format.",
                "+     *",
                "+     * @param delimiter",
                "+     *            the char used for value separation, must not be a line break character",
                "+     * @param quoteChar",
                "+     *            the Character used as value encapsulation marker, may be {@code null} to disable",
                "+     * @param quoteMode",
                "+     *            the quote mode",
                "+     * @param commentStart",
                "+     *            the Character used for comment identification, may be {@code null} to disable",
                "+     * @param escape",
                "+     *            the Character used to escape special characters in values, may be {@code null} to disable",
                "+     * @param ignoreSurroundingSpaces",
                "+     *            {@code true} when whitespaces enclosing values should be ignored",
                "+     * @param ignoreEmptyLines",
                "+     *            {@code true} when the parser should skip empty lines",
                "+     * @param recordSeparator",
                "+     *            the line separator to use for output",
                "+     * @param nullString",
                "+     *            the line separator to use for output",
                "+     * @param headerComments",
                "+     *            the comments to be printed by the Printer before the actual CSV data",
                "+     * @param header",
                "+     *            the header",
                "+     * @param skipHeaderRecord",
                "+     *            TODO",
                "+     * @param allowMissingColumnNames",
                "+     *            TODO",
                "+     * @param ignoreHeaderCase",
                "+     *            TODO",
                "+     * @param trim",
                "+     *            TODO",
                "+     * @param trailingDelimiter",
                "+     *            TODO",
                "+     * @param autoFlush",
                "+     * @throws IllegalArgumentException",
                "+     *             if the delimiter is a line break character",
                "+     */",
                "+    private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,",
                "+                      final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,",
                "+                      final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,",
                "+                      final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,",
                "+                      final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,",
                "+                      final boolean trailingDelimiter, final boolean autoFlush) {",
                "+        this.delimiter = delimiter;",
                "+        this.quoteCharacter = quoteChar;",
                "+        this.quoteMode = quoteMode;",
                "+        this.commentMarker = commentStart;",
                "+        this.escapeCharacter = escape;",
                "+        this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
                "+        this.allowMissingColumnNames = allowMissingColumnNames;",
                "+        this.ignoreEmptyLines = ignoreEmptyLines;",
                "+        this.recordSeparator = recordSeparator;",
                "+        this.nullString = nullString;",
                "+        this.headerComments = toStringArray(headerComments);",
                "+        this.header = header == null ? null : header.clone();",
                "+        this.skipHeaderRecord = skipHeaderRecord;",
                "+        this.ignoreHeaderCase = ignoreHeaderCase;",
                "+        this.trailingDelimiter = trailingDelimiter;",
                "+        this.trim = trim;",
                "+        this.autoFlush = autoFlush;",
                "+        validate();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+",
                "+        final CSVFormat other = (CSVFormat) obj;",
                "+        if (delimiter != other.delimiter) {",
                "+            return false;",
                "+        }",
                "+        if (quoteMode != other.quoteMode) {",
                "+            return false;",
                "+        }",
                "+        if (quoteCharacter == null) {",
                "+            if (other.quoteCharacter != null) {",
                "+                return false;",
                "+            }",
                "+        } else if (!quoteCharacter.equals(other.quoteCharacter)) {",
                "+            return false;",
                "+        }",
                "+        if (commentMarker == null) {",
                "+            if (other.commentMarker != null) {",
                "+                return false;",
                "+            }",
                "+        } else if (!commentMarker.equals(other.commentMarker)) {",
                "+            return false;",
                "+        }",
                "+        if (escapeCharacter == null) {",
                "+            if (other.escapeCharacter != null) {",
                "+                return false;",
                "+            }",
                "+        } else if (!escapeCharacter.equals(other.escapeCharacter)) {",
                "+            return false;",
                "+        }",
                "+        if (nullString == null) {",
                "+            if (other.nullString != null) {",
                "+                return false;",
                "+            }",
                "+        } else if (!nullString.equals(other.nullString)) {",
                "+            return false;",
                "+        }",
                "+        if (!Arrays.equals(header, other.header)) {",
                "+            return false;",
                "+        }",
                "+        if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces) {",
                "+            return false;",
                "+        }",
                "+        if (ignoreEmptyLines != other.ignoreEmptyLines) {",
                "+            return false;",
                "+        }",
                "+        if (skipHeaderRecord != other.skipHeaderRecord) {",
                "+            return false;",
                "+        }",
                "+        if (recordSeparator == null) {",
                "+            if (other.recordSeparator != null) {",
                "+                return false;",
                "+            }",
                "+        } else if (!recordSeparator.equals(other.recordSeparator)) {",
                "+            return false;",
                "+        }",
                "+        return true;",
                "+    }",
                "+",
                "+    /**",
                "+     * Formats the specified values.",
                "+     *",
                "+     * @param values",
                "+     *            the values to format",
                "+     * @return the formatted values",
                "+     */",
                "+    public String format(final Object... values) {",
                "+        final StringWriter out = new StringWriter();",
                "+        try (final CSVPrinter csvPrinter = new CSVPrinter(out, this)) {",
                "+            csvPrinter.printRecord(values);",
                "+            return out.toString().trim();",
                "+        } catch (final IOException e) {",
                "+            // should not happen because a StringWriter does not do IO.",
                "+            throw new IllegalStateException(e);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Specifies whether missing column names are allowed when parsing the header line.",
                "+     *",
                "+     * @return {@code true} if missing column names are allowed when parsing the header line, {@code false} to throw an",
                "+     *         {@link IllegalArgumentException}.",
                "+     */",
                "+    public boolean getAllowMissingColumnNames() {",
                "+        return allowMissingColumnNames;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether to flush on close.",
                "+     *",
                "+     * @return whether to flush on close.",
                "+     * @since 1.6",
                "+     */",
                "+    public boolean getAutoFlush() {",
                "+        return autoFlush;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the character marking the start of a line comment.",
                "+     *",
                "+     * @return the comment start marker, may be {@code null}",
                "+     */",
                "+    public Character getCommentMarker() {",
                "+        return commentMarker;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the character delimiting the values (typically ';', ',' or '\\t').",
                "+     *",
                "+     * @return the delimiter character",
                "+     */",
                "+    public char getDelimiter() {",
                "+        return delimiter;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the escape character.",
                "+     *",
                "+     * @return the escape character, may be {@code null}",
                "+     */",
                "+    public Character getEscapeCharacter() {",
                "+        return escapeCharacter;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a copy of the header array.",
                "+     *",
                "+     * @return a copy of the header array; {@code null} if disabled, the empty array if to be read from the file",
                "+     */",
                "+    public String[] getHeader() {",
                "+        return header != null ? header.clone() : null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a copy of the header comment array.",
                "+     *",
                "+     * @return a copy of the header comment array; {@code null} if disabled.",
                "+     */",
                "+    public String[] getHeaderComments() {",
                "+        return headerComments != null ? headerComments.clone() : null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Specifies whether empty lines between records are ignored when parsing input.",
                "+     *",
                "+     * @return {@code true} if empty lines between records are ignored, {@code false} if they are turned into empty",
                "+     *         records.",
                "+     */",
                "+    public boolean getIgnoreEmptyLines() {",
                "+        return ignoreEmptyLines;",
                "+    }",
                "+",
                "+    /**",
                "+     * Specifies whether header names will be accessed ignoring case.",
                "+     *",
                "+     * @return {@code true} if header names cases are ignored, {@code false} if they are case sensitive.",
                "+     * @since 1.3",
                "+     */",
                "+    public boolean getIgnoreHeaderCase() {",
                "+        return ignoreHeaderCase;",
                "+    }",
                "+",
                "+    /**",
                "+     * Specifies whether spaces around values are ignored when parsing input.",
                "+     *",
                "+     * @return {@code true} if spaces around values are ignored, {@code false} if they are treated as part of the value.",
                "+     */",
                "+    public boolean getIgnoreSurroundingSpaces() {",
                "+        return ignoreSurroundingSpaces;",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets the String to convert to and from {@code null}.",
                "+     * <ul>",
                "+     * <li><strong>Reading:</strong> Converts strings equal to the given {@code nullString} to {@code null} when reading",
                "+     * records.</li>",
                "+     * <li><strong>Writing:</strong> Writes {@code null} as the given {@code nullString} when writing records.</li>",
                "+     * </ul>",
                "+     *",
                "+     * @return the String to convert to and from {@code null}. No substitution occurs if {@code null}",
                "+     */",
                "+    public String getNullString() {",
                "+        return nullString;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the character used to encapsulate values containing special characters.",
                "+     *",
                "+     * @return the quoteChar character, may be {@code null}",
                "+     */",
                "+    public Character getQuoteCharacter() {",
                "+        return quoteCharacter;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the quote policy output fields.",
                "+     *",
                "+     * @return the quote policy",
                "+     */",
                "+    public QuoteMode getQuoteMode() {",
                "+        return quoteMode;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the record separator delimiting output records.",
                "+     *",
                "+     * @return the record separator",
                "+     */",
                "+    public String getRecordSeparator() {",
                "+        return recordSeparator;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether to skip the header record.",
                "+     *",
                "+     * @return whether to skip the header record.",
                "+     */",
                "+    public boolean getSkipHeaderRecord() {",
                "+        return skipHeaderRecord;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether to add a trailing delimiter.",
                "+     *",
                "+     * @return whether to add a trailing delimiter.",
                "+     * @since 1.3",
                "+     */",
                "+    public boolean getTrailingDelimiter() {",
                "+        return trailingDelimiter;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether to trim leading and trailing blanks.",
                "+     *",
                "+     * @return whether to trim leading and trailing blanks.",
                "+     */",
                "+    public boolean getTrim() {",
                "+        return trim;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        final int prime = 31;",
                "+        int result = 1;",
                "+",
                "+        result = prime * result + delimiter;",
                "+        result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
                "+        result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
                "+        result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
                "+        result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
                "+        result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
                "+        result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
                "+        result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
                "+        result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
                "+        result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
                "+        result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
                "+        result = prime * result + Arrays.hashCode(header);",
                "+        return result;",
                "+    }",
                "+",
                "+    /**",
                "+     * Specifies whether comments are supported by this format.",
                "+     *",
                "+     * Note that the comment introducer character is only recognized at the start of a line.",
                "+     *",
                "+     * @return {@code true} is comments are supported, {@code false} otherwise",
                "+     */",
                "+    public boolean isCommentMarkerSet() {",
                "+        return commentMarker != null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether escape are being processed.",
                "+     *",
                "+     * @return {@code true} if escapes are processed",
                "+     */",
                "+    public boolean isEscapeCharacterSet() {",
                "+        return escapeCharacter != null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether a nullString has been defined.",
                "+     *",
                "+     * @return {@code true} if a nullString is defined",
                "+     */",
                "+    public boolean isNullStringSet() {",
                "+        return nullString != null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns whether a quoteChar has been defined.",
                "+     *",
                "+     * @return {@code true} if a quoteChar is defined",
                "+     */",
                "+    public boolean isQuoteCharacterSet() {",
                "+        return quoteCharacter != null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses the specified content.",
                "+     *",
                "+     * <p>",
                "+     * See also the various static parse methods on {@link CSVParser}.",
                "+     * </p>",
                "+     *",
                "+     * @param in",
                "+     *            the input stream",
                "+     * @return a parser over a stream of {@link CSVRecord}s.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public CSVParser parse(final Reader in) throws IOException {",
                "+        return new CSVParser(in, this);",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints to the specified output.",
                "+     *",
                "+     * <p>",
                "+     * See also {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param out",
                "+     *            the output.",
                "+     * @return a printer to an output.",
                "+     * @throws IOException",
                "+     *             thrown if the optional header cannot be printed.",
                "+     */",
                "+    public CSVPrinter print(final Appendable out) throws IOException {",
                "+        return new CSVPrinter(out, this);",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints to the specified output.",
                "+     *",
                "+     * <p>",
                "+     * See also {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param out",
                "+     *            the output.",
                "+     * @param charset",
                "+     *            A charset.",
                "+     * @return a printer to an output.",
                "+     * @throws IOException",
                "+     *             thrown if the optional header cannot be printed.",
                "+     * @since 1.5",
                "+     */",
                "+    @SuppressWarnings(\"resource\")",
                "+    public CSVPrinter print(final File out, final Charset charset) throws IOException {",
                "+        // The writer will be closed when close() is called.",
                "+        return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints the {@code value} as the next value on the line to {@code out}. The value will be escaped or encapsulated",
                "+     * as needed. Useful when one wants to avoid creating CSVPrinters.",
                "+     *",
                "+     * @param value",
                "+     *            value to output.",
                "+     * @param out",
                "+     *            where to print the value.",
                "+     * @param newRecord",
                "+     *            if this a new record.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs.",
                "+     * @since 1.4",
                "+     */",
                "+    public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {",
                "+        // null values are considered empty",
                "+        // Only call CharSequence.toString() if you have to, helps GC-free use cases.",
                "+        CharSequence charSequence;",
                "+        if (value == null) {",
                "+            // https://issues.apache.org/jira/browse/CSV-203",
                "+            if (null == nullString) {",
                "+                charSequence = EMPTY;",
                "+            } else {",
                "+                if (QuoteMode.ALL == quoteMode) {",
                "+                    charSequence = quoteCharacter + nullString + quoteCharacter;",
                "+                } else {",
                "+                    charSequence = nullString;",
                "+                }",
                "+            }",
                "+        } else {",
                "+            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
                "+        }",
                "+        charSequence = getTrim() ? trim(charSequence) : charSequence;",
                "+        this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
                "+    }",
                "+",
                "+    private void print(final Object object, final CharSequence value, final int offset, final int len,",
                "+            final Appendable out, final boolean newRecord) throws IOException {",
                "+        if (!newRecord) {",
                "+            out.append(getDelimiter());",
                "+        }",
                "+        if (object == null) {",
                "+            out.append(value);",
                "+        } else if (isQuoteCharacterSet()) {",
                "+            // the original object is needed so can check for Number",
                "+            printAndQuote(object, value, offset, len, out, newRecord);",
                "+        } else if (isEscapeCharacterSet()) {",
                "+            printAndEscape(value, offset, len, out);",
                "+        } else {",
                "+            out.append(value, offset, offset + len);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints to the specified output.",
                "+     *",
                "+     * <p>",
                "+     * See also {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param out",
                "+     *            the output.",
                "+     * @param charset",
                "+     *            A charset.",
                "+     * @return a printer to an output.",
                "+     * @throws IOException",
                "+     *             thrown if the optional header cannot be printed.",
                "+     * @since 1.5",
                "+     */",
                "+    public CSVPrinter print(final Path out, final Charset charset) throws IOException {",
                "+        return print(Files.newBufferedWriter(out, charset));",
                "+    }",
                "+",
                "+    /*",
                "+     * Note: must only be called if escaping is enabled, otherwise will generate NPE",
                "+     */",
                "+    private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out)",
                "+            throws IOException {",
                "+        int start = offset;",
                "+        int pos = offset;",
                "+        final int end = offset + len;",
                "+",
                "+        final char delim = getDelimiter();",
                "+        final char escape = getEscapeCharacter().charValue();",
                "+",
                "+        while (pos < end) {",
                "+            char c = value.charAt(pos);",
                "+            if (c == CR || c == LF || c == delim || c == escape) {",
                "+                // write out segment up until this char",
                "+                if (pos > start) {",
                "+                    out.append(value, start, pos);",
                "+                }",
                "+                if (c == LF) {",
                "+                    c = 'n';",
                "+                } else if (c == CR) {",
                "+                    c = 'r';",
                "+                }",
                "+",
                "+                out.append(escape);",
                "+                out.append(c);",
                "+",
                "+                start = pos + 1; // start on the current char after this one",
                "+            }",
                "+",
                "+            pos++;",
                "+        }",
                "+",
                "+        // write last segment",
                "+        if (pos > start) {",
                "+            out.append(value, start, pos);",
                "+        }",
                "+    }",
                "+",
                "+    /*",
                "+     * Note: must only be called if quoting is enabled, otherwise will generate NPE",
                "+     */",
                "+    // the original object is needed so can check for Number",
                "+    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,",
                "+            final Appendable out, final boolean newRecord) throws IOException {",
                "+        boolean quote = false;",
                "+        int start = offset;",
                "+        int pos = offset;",
                "+        final int end = offset + len;",
                "+",
                "+        final char delimChar = getDelimiter();",
                "+        final char quoteChar = getQuoteCharacter().charValue();",
                "+",
                "+        QuoteMode quoteModePolicy = getQuoteMode();",
                "+        if (quoteModePolicy == null) {",
                "+            quoteModePolicy = QuoteMode.MINIMAL;",
                "+        }",
                "+        switch (quoteModePolicy) {",
                "+        case ALL:",
                "+        case ALL_NON_NULL:",
                "+            quote = true;",
                "+            break;",
                "+        case NON_NUMERIC:",
                "+            quote = !(object instanceof Number);",
                "+            break;",
                "+        case NONE:",
                "+            // Use the existing escaping code",
                "+            printAndEscape(value, offset, len, out);",
                "+            return;",
                "+        case MINIMAL:",
                "+            if (len <= 0) {",
                "+                // always quote an empty token that is the first",
                "+                // on the line, as it may be the only thing on the",
                "+                // line. If it were not quoted in that case,",
                "+                // an empty line has no tokens.",
                "+                if (newRecord) {",
                "+                    quote = true;",
                "+                }",
                "+            } else {",
                "+                char c = value.charAt(pos);",
                "+",
                "+                if (c <= COMMENT) {",
                "+                    // Some other chars at the start of a value caused the parser to fail, so for now",
                "+                    // encapsulate if we start in anything less than '#'. We are being conservative",
                "+                    // by including the default comment char too.",
                "+                    quote = true;",
                "+                } else {",
                "+                    while (pos < end) {",
                "+                        c = value.charAt(pos);",
                "+                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {",
                "+                            quote = true;",
                "+                            break;",
                "+                        }",
                "+                        pos++;",
                "+                    }",
                "+",
                "+                    if (!quote) {",
                "+                        pos = end - 1;",
                "+                        c = value.charAt(pos);",
                "+                        // Some other chars at the end caused the parser to fail, so for now",
                "+                        // encapsulate if we end in anything less than ' '",
                "+                        if (c <= SP) {",
                "+                            quote = true;",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            if (!quote) {",
                "+                // no encapsulation needed - write out the original value",
                "+                out.append(value, start, end);",
                "+                return;",
                "+            }",
                "+            break;",
                "+        default:",
                "+            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
                "+        }",
                "+",
                "+        if (!quote) {",
                "+            // no encapsulation needed - write out the original value",
                "+            out.append(value, start, end);",
                "+            return;",
                "+        }",
                "+",
                "+        // we hit something that needed encapsulation",
                "+        out.append(quoteChar);",
                "+",
                "+        // Pick up where we left off: pos should be positioned on the first character that caused",
                "+        // the need for encapsulation.",
                "+        while (pos < end) {",
                "+            final char c = value.charAt(pos);",
                "+            if (c == quoteChar) {",
                "+                // write out the chunk up until this point",
                "+",
                "+                // add 1 to the length to write out the encapsulator also",
                "+                out.append(value, start, pos + 1);",
                "+                // put the next starting position on the encapsulator so we will",
                "+                // write it out again with the next string (effectively doubling it)",
                "+                start = pos;",
                "+            }",
                "+            pos++;",
                "+        }",
                "+",
                "+        // write the last segment",
                "+        out.append(value, start, pos);",
                "+        out.append(quoteChar);",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints to the {@link System#out}.",
                "+     *",
                "+     * <p>",
                "+     * See also {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @return a printer to {@link System#out}.",
                "+     * @throws IOException",
                "+     *             thrown if the optional header cannot be printed.",
                "+     * @since 1.5",
                "+     */",
                "+    public CSVPrinter printer() throws IOException {",
                "+        return new CSVPrinter(System.out, this);",
                "+    }",
                "+",
                "+    /**",
                "+     * Outputs the trailing delimiter (if set) followed by the record separator (if set).",
                "+     *",
                "+     * @param out",
                "+     *            where to write",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     * @since 1.4",
                "+     */",
                "+    public void println(final Appendable out) throws IOException {",
                "+        if (getTrailingDelimiter()) {",
                "+            out.append(getDelimiter());",
                "+        }",
                "+        if (recordSeparator != null) {",
                "+            out.append(recordSeparator);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints the given {@code values} to {@code out} as a single record of delimiter separated values followed by the",
                "+     * record separator.",
                "+     *",
                "+     * <p>",
                "+     * The values will be quoted if needed. Quotes and new-line characters will be escaped. This method adds the record",
                "+     * separator to the output after printing the record, so there is no need to call {@link #println(Appendable)}.",
                "+     * </p>",
                "+     *",
                "+     * @param out",
                "+     *            where to write.",
                "+     * @param values",
                "+     *            values to output.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs.",
                "+     * @since 1.4",
                "+     */",
                "+    public void printRecord(final Appendable out, final Object... values) throws IOException {",
                "+        for (int i = 0; i < values.length; i++) {",
                "+            print(values[i], out, i == 0);",
                "+        }",
                "+        println(out);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        final StringBuilder sb = new StringBuilder();",
                "+        sb.append(\"Delimiter=<\").append(delimiter).append('>');",
                "+        if (isEscapeCharacterSet()) {",
                "+            sb.append(' ');",
                "+            sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
                "+        }",
                "+        if (isQuoteCharacterSet()) {",
                "+            sb.append(' ');",
                "+            sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
                "+        }",
                "+        if (isCommentMarkerSet()) {",
                "+            sb.append(' ');",
                "+            sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
                "+        }",
                "+        if (isNullStringSet()) {",
                "+            sb.append(' ');",
                "+            sb.append(\"NullString=<\").append(nullString).append('>');",
                "+        }",
                "+        if (recordSeparator != null) {",
                "+            sb.append(' ');",
                "+            sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
                "+        }",
                "+        if (getIgnoreEmptyLines()) {",
                "+            sb.append(\" EmptyLines:ignored\");",
                "+        }",
                "+        if (getIgnoreSurroundingSpaces()) {",
                "+            sb.append(\" SurroundingSpaces:ignored\");",
                "+        }",
                "+        if (getIgnoreHeaderCase()) {",
                "+            sb.append(\" IgnoreHeaderCase:ignored\");",
                "+        }",
                "+        sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
                "+        if (headerComments != null) {",
                "+            sb.append(' ');",
                "+            sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
                "+        }",
                "+        if (header != null) {",
                "+            sb.append(' ');",
                "+            sb.append(\"Header:\").append(Arrays.toString(header));",
                "+        }",
                "+        return sb.toString();",
                "+    }",
                "+",
                "+    private String[] toStringArray(final Object[] values) {",
                "+        if (values == null) {",
                "+            return null;",
                "+        }",
                "+        final String[] strings = new String[values.length];",
                "+        for (int i = 0; i < values.length; i++) {",
                "+            final Object value = values[i];",
                "+            strings[i] = value == null ? null : value.toString();",
                "+        }",
                "+        return strings;",
                "+    }",
                "+",
                "+    private CharSequence trim(final CharSequence charSequence) {",
                "+        if (charSequence instanceof String) {",
                "+            return ((String) charSequence).trim();",
                "+        }",
                "+        final int count = charSequence.length();",
                "+        int len = count;",
                "+        int pos = 0;",
                "+",
                "+        while (pos < len && charSequence.charAt(pos) <= SP) {",
                "+            pos++;",
                "+        }",
                "+        while (pos < len && charSequence.charAt(len - 1) <= SP) {",
                "+            len--;",
                "+        }",
                "+        return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
                "+    }",
                "+",
                "+    /**",
                "+     * Verifies the consistency of the parameters and throws an IllegalArgumentException if necessary.",
                "+     *",
                "+     * @throws IllegalArgumentException",
                "+     */",
                "+    private void validate() throws IllegalArgumentException {",
                "+        if (isLineBreak(delimiter)) {",
                "+            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
                "+        }",
                "+",
                "+        if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
                "+        }",
                "+",
                "+        if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
                "+        }",
                "+",
                "+        if (commentMarker != null && delimiter == commentMarker.charValue()) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
                "+        }",
                "+",
                "+        if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
                "+        }",
                "+",
                "+        if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
                "+        }",
                "+",
                "+        if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {",
                "+            throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
                "+        }",
                "+",
                "+        // validate header",
                "+        if (header != null) {",
                "+            final Set<String> dupCheck = new HashSet<>();",
                "+            for (final String hdr : header) {",
                "+                if (!dupCheck.add(hdr)) {",
                "+                    throw new IllegalArgumentException(",
                "+                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to {@code true}",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.",
                "+     * @see #withAllowMissingColumnNames(boolean)",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withAllowMissingColumnNames() {",
                "+        return this.withAllowMissingColumnNames(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to the given value.",
                "+     *",
                "+     * @param allowMissingColumnNames",
                "+     *            the missing column names behavior, {@code true} to allow missing column names in the header line,",
                "+     *            {@code false} to cause an {@link IllegalArgumentException} to be thrown.",
                "+     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.",
                "+     */",
                "+    public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with whether to flush on close.",
                "+     *",
                "+     * @param autoFlush",
                "+     *            whether to flush on close.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified autoFlush setting.",
                "+     * @since 1.6",
                "+     */",
                "+    public CSVFormat withAutoFlush(final boolean autoFlush) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+            ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+            skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.",
                "+     *",
                "+     * Note that the comment start character is only recognized at the start of a line.",
                "+     *",
                "+     * @param commentMarker",
                "+     *            the comment start marker",
                "+     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withCommentMarker(final char commentMarker) {",
                "+        return withCommentMarker(Character.valueOf(commentMarker));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.",
                "+     *",
                "+     * Note that the comment start character is only recognized at the start of a line.",
                "+     *",
                "+     * @param commentMarker",
                "+     *            the comment start marker, use {@code null} to disable",
                "+     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withCommentMarker(final Character commentMarker) {",
                "+        if (isLineBreak(commentMarker)) {",
                "+            throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
                "+        }",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the delimiter of the format set to the specified character.",
                "+     *",
                "+     * @param delimiter",
                "+     *            the delimiter character",
                "+     * @return A new CSVFormat that is equal to this with the specified character as delimiter",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withDelimiter(final char delimiter) {",
                "+        if (isLineBreak(delimiter)) {",
                "+            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
                "+        }",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.",
                "+     *",
                "+     * @param escape",
                "+     *            the escape character",
                "+     * @return A new CSVFormat that is equal to his but with the specified character as the escape character",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withEscape(final char escape) {",
                "+        return withEscape(Character.valueOf(escape));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.",
                "+     *",
                "+     * @param escape",
                "+     *            the escape character, use {@code null} to disable",
                "+     * @return A new CSVFormat that is equal to this but with the specified character as the escape character",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withEscape(final Character escape) {",
                "+        if (isLineBreak(escape)) {",
                "+            throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
                "+        }",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,",
                "+                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,",
                "+                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} using the first record as header.",
                "+     *",
                "+     * <p>",
                "+     * Calling this method is equivalent to calling:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aFormat.withHeader().withSkipHeaderRecord();",
                "+     * </pre>",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but using the first record as header.",
                "+     * @see #withSkipHeaderRecord(boolean)",
                "+     * @see #withHeader(String...)",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withFirstRecordAsHeader() {",
                "+        return withHeader().withSkipHeaderRecord();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class.",
                "+     *",
                "+     * <p>",
                "+     * Example:",
                "+     * </p>",
                "+     * <pre>",
                "+     * public enum Header {",
                "+     *     Name, Email, Phone",
                "+     * }",
                "+     *",
                "+     * CSVFormat format = aformat.withHeader(Header.class);",
                "+     * </pre>",
                "+     * <p>",
                "+     * The header is also used by the {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param headerEnum",
                "+     *            the enum defining the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "+     *            otherwise.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified header",
                "+     * @see #withHeader(String...)",
                "+     * @see #withSkipHeaderRecord(boolean)",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum) {",
                "+        String[] header = null;",
                "+        if (headerEnum != null) {",
                "+            final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
                "+            header = new String[enumValues.length];",
                "+            for (int i = 0; i < enumValues.length; i++) {",
                "+                header[i] = enumValues[i].name();",
                "+            }",
                "+        }",
                "+        return withHeader(header);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can",
                "+     * either be parsed automatically from the input file with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader();",
                "+     * </pre>",
                "+     *",
                "+     * or specified manually with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader(resultSet);",
                "+     * </pre>",
                "+     * <p>",
                "+     * The header is also used by the {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param resultSet",
                "+     *            the resultSet for the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "+     *            otherwise.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified header",
                "+     * @throws SQLException",
                "+     *             SQLException if a database access error occurs or this method is called on a closed result set.",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withHeader(final ResultSet resultSet) throws SQLException {",
                "+        return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can",
                "+     * either be parsed automatically from the input file with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader();",
                "+     * </pre>",
                "+     *",
                "+     * or specified manually with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader(metaData);",
                "+     * </pre>",
                "+     * <p>",
                "+     * The header is also used by the {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param metaData",
                "+     *            the metaData for the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "+     *            otherwise.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified header",
                "+     * @throws SQLException",
                "+     *             SQLException if a database access error occurs or this method is called on a closed result set.",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException {",
                "+        String[] labels = null;",
                "+        if (metaData != null) {",
                "+            final int columnCount = metaData.getColumnCount();",
                "+            labels = new String[columnCount];",
                "+            for (int i = 0; i < columnCount; i++) {",
                "+                labels[i] = metaData.getColumnLabel(i + 1);",
                "+            }",
                "+        }",
                "+        return withHeader(labels);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header of the format set to the given values. The header can either be",
                "+     * parsed automatically from the input file with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader();",
                "+     * </pre>",
                "+     *",
                "+     * or specified manually with:",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);",
                "+     * </pre>",
                "+     * <p>",
                "+     * The header is also used by the {@link CSVPrinter}.",
                "+     * </p>",
                "+     *",
                "+     * @param header",
                "+     *            the header, {@code null} if disabled, empty if parsed automatically, user specified otherwise.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified header",
                "+     * @see #withSkipHeaderRecord(boolean)",
                "+     */",
                "+    public CSVFormat withHeader(final String... header) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. The comments will",
                "+     * be printed first, before the headers. This setting is ignored by the parser.",
                "+     *",
                "+     * <pre>",
                "+     * CSVFormat format = aformat.withHeaderComments(&quot;Generated by Apache Commons CSV 1.1.&quot;, new Date());",
                "+     * </pre>",
                "+     *",
                "+     * @param headerComments",
                "+     *            the headerComments which will be printed by the Printer before the actual CSV data.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified header",
                "+     * @see #withSkipHeaderRecord(boolean)",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withHeaderComments(final Object... headerComments) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to {@code true}.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
                "+     * @since {@link #withIgnoreEmptyLines(boolean)}",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withIgnoreEmptyLines() {",
                "+        return this.withIgnoreEmptyLines(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to the given value.",
                "+     *",
                "+     * @param ignoreEmptyLines",
                "+     *            the empty line skipping behavior, {@code true} to ignore the empty lines between the records,",
                "+     *            {@code false} to translate empty lines to empty records.",
                "+     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
                "+     */",
                "+    public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the header ignore case behavior set to {@code true}.",
                "+     *",
                "+     * @return A new CSVFormat that will ignore case header name.",
                "+     * @see #withIgnoreHeaderCase(boolean)",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withIgnoreHeaderCase() {",
                "+        return this.withIgnoreHeaderCase(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with whether header names should be accessed ignoring case.",
                "+     *",
                "+     * @param ignoreHeaderCase",
                "+     *            the case mapping behavior, {@code true} to access name/values, {@code false} to leave the mapping as",
                "+     *            is.",
                "+     * @return A new CSVFormat that will ignore case header name if specified as {@code true}",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to {@code true}.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.",
                "+     * @see #withIgnoreSurroundingSpaces(boolean)",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withIgnoreSurroundingSpaces() {",
                "+        return this.withIgnoreSurroundingSpaces(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to the given value.",
                "+     *",
                "+     * @param ignoreSurroundingSpaces",
                "+     *            the trimming behavior, {@code true} to remove the surrounding spaces, {@code false} to leave the",
                "+     *            spaces as is.",
                "+     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.",
                "+     */",
                "+    public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with conversions to and from null for strings on input and output.",
                "+     * <ul>",
                "+     * <li><strong>Reading:</strong> Converts strings equal to the given {@code nullString} to {@code null} when reading",
                "+     * records.</li>",
                "+     * <li><strong>Writing:</strong> Writes {@code null} as the given {@code nullString} when writing records.</li>",
                "+     * </ul>",
                "+     *",
                "+     * @param nullString",
                "+     *            the String to convert to and from {@code null}. No substitution occurs if {@code null}",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified null conversion string.",
                "+     */",
                "+    public CSVFormat withNullString(final String nullString) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.",
                "+     *",
                "+     * @param quoteChar",
                "+     *            the quoteChar character",
                "+     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withQuote(final char quoteChar) {",
                "+        return withQuote(Character.valueOf(quoteChar));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.",
                "+     *",
                "+     * @param quoteChar",
                "+     *            the quoteChar character, use {@code null} to disable",
                "+     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the specified character is a line break",
                "+     */",
                "+    public CSVFormat withQuote(final Character quoteChar) {",
                "+        if (isLineBreak(quoteChar)) {",
                "+            throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
                "+        }",
                "+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,",
                "+                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,",
                "+                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the output quote policy of the format set to the specified value.",
                "+     *",
                "+     * @param quoteModePolicy",
                "+     *            the quote policy to use for output.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified quote policy",
                "+     */",
                "+    public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified character.",
                "+     *",
                "+     * <p>",
                "+     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "+     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "+     * </p>",
                "+     *",
                "+     * @param recordSeparator",
                "+     *            the record separator to use for output.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified output record separator",
                "+     */",
                "+    public CSVFormat withRecordSeparator(final char recordSeparator) {",
                "+        return withRecordSeparator(String.valueOf(recordSeparator));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified String.",
                "+     *",
                "+     * <p>",
                "+     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "+     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "+     * </p>",
                "+     *",
                "+     * @param recordSeparator",
                "+     *            the record separator to use for output.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified output record separator",
                "+     * @throws IllegalArgumentException",
                "+     *             if recordSeparator is none of CR, LF or CRLF",
                "+     */",
                "+    public CSVFormat withRecordSeparator(final String recordSeparator) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with skipping the header record set to {@code true}.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
                "+     * @see #withSkipHeaderRecord(boolean)",
                "+     * @see #withHeader(String...)",
                "+     * @since 1.1",
                "+     */",
                "+    public CSVFormat withSkipHeaderRecord() {",
                "+        return this.withSkipHeaderRecord(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with whether to skip the header record.",
                "+     *",
                "+     * @param skipHeaderRecord",
                "+     *            whether to skip the header record.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
                "+     * @see #withHeader(String...)",
                "+     */",
                "+    public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with the record separator of the format set to the operating system's line",
                "+     * separator string, typically CR+LF on Windows and LF on Linux.",
                "+     *",
                "+     * <p>",
                "+     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "+     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "+     * </p>",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the operating system's line separator stringr",
                "+     * @since 1.6",
                "+     */",
                "+    public CSVFormat withSystemRecordSeparator() {",
                "+        return withRecordSeparator(System.getProperty(\"line.separator\"));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} to add a trailing delimiter.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the trailing delimiter setting.",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withTrailingDelimiter() {",
                "+        return withTrailingDelimiter(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with whether to add a trailing delimiter.",
                "+     *",
                "+     * @param trailingDelimiter",
                "+     *            whether to add a trailing delimiter.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified trailing delimiter setting.",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} to trim leading and trailing blanks.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the trim setting on.",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withTrim() {",
                "+        return withTrim(true);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a new {@code CSVFormat} with whether to trim leading and trailing blanks.",
                "+     *",
                "+     * @param trim",
                "+     *            whether to trim leading and trailing blanks.",
                "+     *",
                "+     * @return A new CSVFormat that is equal to this but with the specified trim setting.",
                "+     * @since 1.3",
                "+     */",
                "+    public CSVFormat withTrim(final boolean trim) {",
                "+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "new file mode 100644",
                "index 0000000000..cebf253dd3",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "@@ -0,0 +1,624 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.TOKEN;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InputStreamReader;",
                "+import java.io.Reader;",
                "+import java.io.StringReader;",
                "+import java.net.URL;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.NoSuchElementException;",
                "+import java.util.TreeMap;",
                "+",
                "+/**",
                "+ * Parses CSV files according to the specified format.",
                "+ *",
                "+ * Because CSV appears in many different dialects, the parser supports many formats by allowing the",
                "+ * specification of a {@link CSVFormat}.",
                "+ *",
                "+ * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.",
                "+ *",
                "+ * <h2>Creating instances</h2>",
                "+ * <p>",
                "+ * There are several static factory methods that can be used to create instances for various types of resources:",
                "+ * </p>",
                "+ * <ul>",
                "+ *     <li>{@link #parse(File, Charset, CSVFormat)}</li>",
                "+ *     <li>{@link #parse(String, CSVFormat)}</li>",
                "+ *     <li>{@link #parse(URL, Charset, CSVFormat)}</li>",
                "+ * </ul>",
                "+ * <p>",
                "+ * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.",
                "+ *",
                "+ * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(Reader)} as a shortcut:",
                "+ * </p>",
                "+ * <pre>",
                "+ * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {",
                "+ *     ...",
                "+ * }",
                "+ * </pre>",
                "+ *",
                "+ * <h2>Parsing record wise</h2>",
                "+ * <p>",
                "+ * To parse a CSV input from a file, you write:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * File csvData = new File(&quot;/path/to/csv&quot;);",
                "+ * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);",
                "+ * for (CSVRecord csvRecord : parser) {",
                "+ *     ...",
                "+ * }",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * This will read the parse the contents of the file using the",
                "+ * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.",
                "+ * </p>",
                "+ *",
                "+ * <p>",
                "+ * To parse CSV input in a format like Excel, you write:",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);",
                "+ * for (CSVRecord csvRecord : parser) {",
                "+ *     ...",
                "+ * }",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * If the predefined formats don't match the format at hands, custom formats can be defined. More information about",
                "+ * customising CSVFormats is available in {@link CSVFormat CSVFormat JavaDoc}.",
                "+ * </p>",
                "+ *",
                "+ * <h2>Parsing into memory</h2>",
                "+ * <p>",
                "+ * If parsing record wise is not desired, the contents of the input can be read completely into memory.",
                "+ * </p>",
                "+ *",
                "+ * <pre>",
                "+ * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);",
                "+ * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);",
                "+ * List&lt;CSVRecord&gt; list = parser.getRecords();",
                "+ * </pre>",
                "+ *",
                "+ * <p>",
                "+ * There are two constraints that have to be kept in mind:",
                "+ * </p>",
                "+ *",
                "+ * <ol>",
                "+ *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from",
                "+ *     the input, those records will not end up in the in memory representation of your CSV data.</li>",
                "+ *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're",
                "+ *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>",
                "+ * </ol>",
                "+ *",
                "+ * <h2>Notes</h2>",
                "+ * <p>",
                "+ * Internal parser state is completely covered by the format and the reader-state.",
                "+ * </p>",
                "+ *",
                "+ * @see <a href=\"package-summary.html\">package documentation for more details</a>",
                "+ */",
                "+public final class CSVParser implements Iterable<CSVRecord>, Closeable {",
                "+",
                "+    /**",
                "+     * Creates a parser for the given {@link File}.",
                "+     *",
                "+     * @param file",
                "+     *            a CSV file. Must not be null.",
                "+     * @param charset",
                "+     *            A Charset",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new parser",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either file or format are null.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    @SuppressWarnings(\"resource\")",
                "+    public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {",
                "+        Assertions.notNull(file, \"file\");",
                "+        Assertions.notNull(format, \"format\");",
                "+        return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a CSV parser using the given {@link CSVFormat}.",
                "+     *",
                "+     * <p>",
                "+     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "+     * unless you close the {@code reader}.",
                "+     * </p>",
                "+     *",
                "+     * @param inputStream",
                "+     *            an InputStream containing CSV-formatted input. Must not be null.",
                "+     * @param charset",
                "+     *            a Charset.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new CSVParser configured with the given reader and format.",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "+     * @throws IOException",
                "+     *             If there is a problem reading the header or skipping the first record",
                "+     * @since 1.5",
                "+     */",
                "+    @SuppressWarnings(\"resource\")",
                "+    public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format)",
                "+            throws IOException {",
                "+        Assertions.notNull(inputStream, \"inputStream\");",
                "+        Assertions.notNull(format, \"format\");",
                "+        return parse(new InputStreamReader(inputStream, charset), format);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a parser for the given {@link Path}.",
                "+     *",
                "+     * @param path",
                "+     *            a CSV file. Must not be null.",
                "+     * @param charset",
                "+     *            A Charset",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new parser",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either file or format are null.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     * @since 1.5",
                "+     */",
                "+    public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException {",
                "+        Assertions.notNull(path, \"path\");",
                "+        Assertions.notNull(format, \"format\");",
                "+        return parse(Files.newBufferedReader(path, charset), format);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a CSV parser using the given {@link CSVFormat}",
                "+     *",
                "+     * <p>",
                "+     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "+     * unless you close the {@code reader}.",
                "+     * </p>",
                "+     *",
                "+     * @param reader",
                "+     *            a Reader containing CSV-formatted input. Must not be null.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new CSVParser configured with the given reader and format.",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "+     * @throws IOException",
                "+     *             If there is a problem reading the header or skipping the first record",
                "+     * @since 1.5",
                "+     */",
                "+    public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException {",
                "+        return new CSVParser(reader, format);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a parser for the given {@link String}.",
                "+     *",
                "+     * @param string",
                "+     *            a CSV string. Must not be null.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new parser",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either string or format are null.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public static CSVParser parse(final String string, final CSVFormat format) throws IOException {",
                "+        Assertions.notNull(string, \"string\");",
                "+        Assertions.notNull(format, \"format\");",
                "+",
                "+        return new CSVParser(new StringReader(string), format);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a parser for the given URL.",
                "+     *",
                "+     * <p>",
                "+     * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless",
                "+     * you close the {@code url}.",
                "+     * </p>",
                "+     *",
                "+     * @param url",
                "+     *            a URL. Must not be null.",
                "+     * @param charset",
                "+     *            the charset for the resource. Must not be null.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @return a new parser",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either url, charset or format are null.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException {",
                "+        Assertions.notNull(url, \"url\");",
                "+        Assertions.notNull(charset, \"charset\");",
                "+        Assertions.notNull(format, \"format\");",
                "+",
                "+        return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
                "+    }",
                "+",
                "+    // the following objects are shared to reduce garbage",
                "+",
                "+    private final CSVFormat format;",
                "+",
                "+    /** A mapping of column names to column indices */",
                "+    private final Map<String, Integer> headerMap;",
                "+",
                "+    private final Lexer lexer;",
                "+",
                "+    /** A record buffer for getRecord(). Grows as necessary and is reused. */",
                "+    private final List<String> recordList = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * The next record number to assign.",
                "+     */",
                "+    private long recordNumber;",
                "+",
                "+    /**",
                "+     * Lexer offset when the parser does not start parsing at the beginning of the source. Usually used in combination",
                "+     * with {@link #recordNumber}.",
                "+     */",
                "+    private final long characterOffset;",
                "+",
                "+    private final Token reusableToken = new Token();",
                "+",
                "+    /**",
                "+     * Customized CSV parser using the given {@link CSVFormat}",
                "+     *",
                "+     * <p>",
                "+     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "+     * unless you close the {@code reader}.",
                "+     * </p>",
                "+     *",
                "+     * @param reader",
                "+     *            a Reader containing CSV-formatted input. Must not be null.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "+     * @throws IOException",
                "+     *             If there is a problem reading the header or skipping the first record",
                "+     */",
                "+    public CSVParser(final Reader reader, final CSVFormat format) throws IOException {",
                "+        this(reader, format, 0, 1);",
                "+    }",
                "+",
                "+    /**",
                "+     * Customized CSV parser using the given {@link CSVFormat}",
                "+     *",
                "+     * <p>",
                "+     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "+     * unless you close the {@code reader}.",
                "+     * </p>",
                "+     *",
                "+     * @param reader",
                "+     *            a Reader containing CSV-formatted input. Must not be null.",
                "+     * @param format",
                "+     *            the CSVFormat used for CSV parsing. Must not be null.",
                "+     * @param characterOffset",
                "+     *            Lexer offset when the parser does not start parsing at the beginning of the source.",
                "+     * @param recordNumber",
                "+     *            The next record number to assign",
                "+     * @throws IllegalArgumentException",
                "+     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "+     * @throws IOException",
                "+     *             If there is a problem reading the header or skipping the first record",
                "+     * @since 1.1",
                "+     */",
                "+    @SuppressWarnings(\"resource\")",
                "+    public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber)",
                "+            throws IOException {",
                "+        Assertions.notNull(reader, \"reader\");",
                "+        Assertions.notNull(format, \"format\");",
                "+",
                "+        this.format = format;",
                "+        this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
                "+        this.headerMap = this.initializeHeader();",
                "+        this.characterOffset = characterOffset;",
                "+        this.recordNumber = recordNumber - 1;",
                "+    }",
                "+",
                "+    private void addRecordValue(final boolean lastRecord) {",
                "+        final String input = this.reusableToken.content.toString();",
                "+        final String inputClean = this.format.getTrim() ? input.trim() : input;",
                "+        if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) {",
                "+            return;",
                "+        }",
                "+        final String nullString = this.format.getNullString();",
                "+        this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
                "+    }",
                "+",
                "+    /**",
                "+     * Closes resources.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        if (this.lexer != null) {",
                "+            this.lexer.close();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the current line number in the input stream.",
                "+     *",
                "+     * <p>",
                "+     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "+     * the record number.",
                "+     * </p>",
                "+     *",
                "+     * @return current line number",
                "+     */",
                "+    public long getCurrentLineNumber() {",
                "+        return this.lexer.getCurrentLineNumber();",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets the first end-of-line string encountered.",
                "+     *",
                "+     * @return the first end-of-line string",
                "+     * @since 1.5",
                "+     */",
                "+    public String getFirstEndOfLine() {",
                "+        return lexer.getFirstEol();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a copy of the header map that iterates in column order.",
                "+     * <p>",
                "+     * The map keys are column names. The map values are 0-based indices.",
                "+     * </p>",
                "+     * @return a copy of the header map that iterates in column order.",
                "+     */",
                "+    public Map<String, Integer> getHeaderMap() {",
                "+        return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the current record number in the input stream.",
                "+     *",
                "+     * <p>",
                "+     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "+     * the line number.",
                "+     * </p>",
                "+     *",
                "+     * @return current record number",
                "+     */",
                "+    public long getRecordNumber() {",
                "+        return this.recordNumber;",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses the CSV input according to the given format and returns the content as a list of",
                "+     * {@link CSVRecord CSVRecords}.",
                "+     *",
                "+     * <p>",
                "+     * The returned content starts at the current parse-position in the stream.",
                "+     * </p>",
                "+     *",
                "+     * @return list of {@link CSVRecord CSVRecords}, may be empty",
                "+     * @throws IOException",
                "+     *             on parse error or input read-failure",
                "+     */",
                "+    public List<CSVRecord> getRecords() throws IOException {",
                "+        CSVRecord rec;",
                "+        final List<CSVRecord> records = new ArrayList<>();",
                "+        while ((rec = this.nextRecord()) != null) {",
                "+            records.add(rec);",
                "+        }",
                "+        return records;",
                "+    }",
                "+",
                "+    /**",
                "+     * Initializes the name to index mapping if the format defines a header.",
                "+     *",
                "+     * @return null if the format has no header.",
                "+     * @throws IOException if there is a problem reading the header or skipping the first record",
                "+     */",
                "+    private Map<String, Integer> initializeHeader() throws IOException {",
                "+        Map<String, Integer> hdrMap = null;",
                "+        final String[] formatHeader = this.format.getHeader();",
                "+        if (formatHeader != null) {",
                "+            hdrMap = this.format.getIgnoreHeaderCase() ?",
                "+                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :",
                "+                    new LinkedHashMap<String, Integer>();",
                "+",
                "+            String[] headerRecord = null;",
                "+            if (formatHeader.length == 0) {",
                "+                // read the header from the first line of the file",
                "+                final CSVRecord nextRecord = this.nextRecord();",
                "+                if (nextRecord != null) {",
                "+                    headerRecord = nextRecord.values();",
                "+                }",
                "+            } else {",
                "+                if (this.format.getSkipHeaderRecord()) {",
                "+                    this.nextRecord();",
                "+                }",
                "+                headerRecord = formatHeader;",
                "+            }",
                "+",
                "+            // build the name to index mappings",
                "+            if (headerRecord != null) {",
                "+                for (int i = 0; i < headerRecord.length; i++) {",
                "+                    final String header = headerRecord[i];",
                "+                    final boolean containsHeader = hdrMap.containsKey(header);",
                "+                    final boolean emptyHeader = header == null || header.trim().isEmpty();",
                "+                    if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) {",
                "+                        throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +",
                "+                                \"\\\" in \" + Arrays.toString(headerRecord));",
                "+                    }",
                "+                    hdrMap.put(header, Integer.valueOf(i));",
                "+                }",
                "+            }",
                "+        }",
                "+        return hdrMap;",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets whether this parser is closed.",
                "+     *",
                "+     * @return whether this parser is closed.",
                "+     */",
                "+    public boolean isClosed() {",
                "+        return this.lexer.isClosed();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns an iterator on the records.",
                "+     *",
                "+     * <p>",
                "+     * An {@link IOException} caught during the iteration are re-thrown as an",
                "+     * {@link IllegalStateException}.",
                "+     * </p>",
                "+     * <p>",
                "+     * If the parser is closed a call to {@link Iterator#next()} will throw a",
                "+     * {@link NoSuchElementException}.",
                "+     * </p>",
                "+     */",
                "+    @Override",
                "+    public Iterator<CSVRecord> iterator() {",
                "+        return new Iterator<CSVRecord>() {",
                "+            private CSVRecord current;",
                "+",
                "+            private CSVRecord getNextRecord() {",
                "+                try {",
                "+                    return CSVParser.this.nextRecord();",
                "+                } catch (final IOException e) {",
                "+                    throw new IllegalStateException(",
                "+                            e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);",
                "+                }",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean hasNext() {",
                "+                if (CSVParser.this.isClosed()) {",
                "+                    return false;",
                "+                }",
                "+                if (this.current == null) {",
                "+                    this.current = this.getNextRecord();",
                "+                }",
                "+",
                "+                return this.current != null;",
                "+            }",
                "+",
                "+            @Override",
                "+            public CSVRecord next() {",
                "+                if (CSVParser.this.isClosed()) {",
                "+                    throw new NoSuchElementException(\"CSVParser has been closed\");",
                "+                }",
                "+                CSVRecord next = this.current;",
                "+                this.current = null;",
                "+",
                "+                if (next == null) {",
                "+                    // hasNext() wasn't called before",
                "+                    next = this.getNextRecord();",
                "+                    if (next == null) {",
                "+                        throw new NoSuchElementException(\"No more CSV records available\");",
                "+                    }",
                "+                }",
                "+",
                "+                return next;",
                "+            }",
                "+",
                "+            @Override",
                "+            public void remove() {",
                "+                throw new UnsupportedOperationException();",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses the next record from the current point in the stream.",
                "+     *",
                "+     * @return the record as an array of values, or {@code null} if the end of the stream has been reached",
                "+     * @throws IOException",
                "+     *             on parse error or input read-failure",
                "+     */",
                "+    CSVRecord nextRecord() throws IOException {",
                "+        CSVRecord result = null;",
                "+        this.recordList.clear();",
                "+        StringBuilder sb = null;",
                "+        final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
                "+        do {",
                "+            this.reusableToken.reset();",
                "+            this.lexer.nextToken(this.reusableToken);",
                "+            switch (this.reusableToken.type) {",
                "+            case TOKEN:",
                "+                this.addRecordValue(false);",
                "+                break;",
                "+            case EORECORD:",
                "+                this.addRecordValue(true);",
                "+                break;",
                "+            case EOF:",
                "+                if (this.reusableToken.isReady) {",
                "+                    this.addRecordValue(true);",
                "+                }",
                "+                break;",
                "+            case INVALID:",
                "+                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
                "+            case COMMENT: // Ignored currently",
                "+                if (sb == null) { // first comment for this record",
                "+                    sb = new StringBuilder();",
                "+                } else {",
                "+                    sb.append(Constants.LF);",
                "+                }",
                "+                sb.append(this.reusableToken.content);",
                "+                this.reusableToken.type = TOKEN; // Read another token",
                "+                break;",
                "+            default:",
                "+                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
                "+            }",
                "+        } while (this.reusableToken.type == TOKEN);",
                "+",
                "+        if (!this.recordList.isEmpty()) {",
                "+            this.recordNumber++;",
                "+            final String comment = sb == null ? null : sb.toString();",
                "+            result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,",
                "+                    this.recordNumber, startCharPosition);",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "new file mode 100644",
                "index 0000000000..494e44511d",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "@@ -0,0 +1,356 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.SP;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.Flushable;",
                "+import java.io.IOException;",
                "+import java.sql.ResultSet;",
                "+import java.sql.SQLException;",
                "+",
                "+/**",
                "+ * Prints values in a CSV format.",
                "+ */",
                "+public final class CSVPrinter implements Flushable, Closeable {",
                "+",
                "+    /** The place that the values get written. */",
                "+    private final Appendable out;",
                "+    private final CSVFormat format;",
                "+",
                "+    /** True if we just began a new record. */",
                "+    private boolean newRecord = true;",
                "+",
                "+    /**",
                "+     * Creates a printer that will print values to the given stream following the CSVFormat.",
                "+     * <p>",
                "+     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation",
                "+     * and escaping with a different character) are not supported.",
                "+     * </p>",
                "+     *",
                "+     * @param out",
                "+     *            stream to which to print. Must not be null.",
                "+     * @param format",
                "+     *            the CSV format. Must not be null.",
                "+     * @throws IOException",
                "+     *             thrown if the optional header cannot be printed.",
                "+     * @throws IllegalArgumentException",
                "+     *             thrown if the parameters of the format are inconsistent or if either out or format are null.",
                "+     */",
                "+    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {",
                "+        Assertions.notNull(out, \"out\");",
                "+        Assertions.notNull(format, \"format\");",
                "+",
                "+        this.out = out;",
                "+        this.format = format;",
                "+        // TODO: Is it a good idea to do this here instead of on the first call to a print method?",
                "+        // It seems a pain to have to track whether the header has already been printed or not.",
                "+        if (format.getHeaderComments() != null) {",
                "+            for (final String line : format.getHeaderComments()) {",
                "+                if (line != null) {",
                "+                    this.printComment(line);",
                "+                }",
                "+            }",
                "+        }",
                "+        if (format.getHeader() != null && !format.getSkipHeaderRecord()) {",
                "+            this.printRecord((Object[]) format.getHeader());",
                "+        }",
                "+    }",
                "+",
                "+    // ======================================================",
                "+    // printing implementation",
                "+    // ======================================================",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        close(false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Closes the underlying stream with an optional flush first.",
                "+     * @param flush whether to flush before the actual close.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     * @since 1.6",
                "+     */",
                "+    public void close(final boolean flush) throws IOException {",
                "+        if (flush || format.getAutoFlush()) {",
                "+            if (out instanceof Flushable) {",
                "+                ((Flushable) out).flush();",
                "+            }",
                "+        }",
                "+        if (out instanceof Closeable) {",
                "+            ((Closeable) out).close();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Flushes the underlying stream.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+        if (out instanceof Flushable) {",
                "+            ((Flushable) out).flush();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets the target Appendable.",
                "+     *",
                "+     * @return the target Appendable.",
                "+     */",
                "+    public Appendable getOut() {",
                "+        return this.out;",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.",
                "+     *",
                "+     * @param value",
                "+     *            value to be output.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void print(final Object value) throws IOException {",
                "+        format.print(value, out, newRecord);",
                "+        newRecord = false;",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints a comment on a new line among the delimiter separated values.",
                "+     *",
                "+     * <p>",
                "+     * Comments will always begin on a new line and occupy a least one full line. The character specified to start",
                "+     * comments and a space will be inserted at the beginning of each new line in the comment.",
                "+     * </p>",
                "+     *",
                "+     * If comments are disabled in the current CSV format this method does nothing.",
                "+     *",
                "+     * @param comment",
                "+     *            the comment to output",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void printComment(final String comment) throws IOException {",
                "+        if (!format.isCommentMarkerSet()) {",
                "+            return;",
                "+        }",
                "+        if (!newRecord) {",
                "+            println();",
                "+        }",
                "+        out.append(format.getCommentMarker().charValue());",
                "+        out.append(SP);",
                "+        for (int i = 0; i < comment.length(); i++) {",
                "+            final char c = comment.charAt(i);",
                "+            switch (c) {",
                "+            case CR:",
                "+                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {",
                "+                    i++;",
                "+                }",
                "+                //$FALL-THROUGH$ break intentionally excluded.",
                "+            case LF:",
                "+                println();",
                "+                out.append(format.getCommentMarker().charValue());",
                "+                out.append(SP);",
                "+                break;",
                "+            default:",
                "+                out.append(c);",
                "+                break;",
                "+            }",
                "+        }",
                "+        println();",
                "+    }",
                "+",
                "+    /**",
                "+     * Outputs the record separator.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void println() throws IOException {",
                "+        format.println(out);",
                "+        newRecord = true;",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints the given values a single record of delimiter separated values followed by the record separator.",
                "+     *",
                "+     * <p>",
                "+     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record",
                "+     * separator to the output after printing the record, so there is no need to call {@link #println()}.",
                "+     * </p>",
                "+     *",
                "+     * @param values",
                "+     *            values to output.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void printRecord(final Iterable<?> values) throws IOException {",
                "+        for (final Object value : values) {",
                "+            print(value);",
                "+        }",
                "+        println();",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints the given values a single record of delimiter separated values followed by the record separator.",
                "+     *",
                "+     * <p>",
                "+     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record",
                "+     * separator to the output after printing the record, so there is no need to call {@link #println()}.",
                "+     * </p>",
                "+     *",
                "+     * @param values",
                "+     *            values to output.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void printRecord(final Object... values) throws IOException {",
                "+        format.printRecord(out, values);",
                "+        newRecord = true;",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints all the objects in the given collection handling nested collections/arrays as records.",
                "+     *",
                "+     * <p>",
                "+     * If the given collection only contains simple objects, this method will print a single record like",
                "+     * {@link #printRecord(Iterable)}. If the given collections contains nested collections/arrays those nested elements",
                "+     * will each be printed as records using {@link #printRecord(Object...)}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Given the following data structure:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * <code>",
                "+     * List&lt;String[]&gt; data = ...",
                "+     * data.add(new String[]{ \"A\", \"B\", \"C\" });",
                "+     * data.add(new String[]{ \"1\", \"2\", \"3\" });",
                "+     * data.add(new String[]{ \"A1\", \"B2\", \"C3\" });",
                "+     * </code>",
                "+     * </pre>",
                "+     *",
                "+     * <p>",
                "+     * Calling this method will print:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * <code>",
                "+     * A, B, C",
                "+     * 1, 2, 3",
                "+     * A1, B2, C3",
                "+     * </code>",
                "+     * </pre>",
                "+     *",
                "+     * @param values",
                "+     *            the values to print.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void printRecords(final Iterable<?> values) throws IOException {",
                "+        for (final Object value : values) {",
                "+            if (value instanceof Object[]) {",
                "+                this.printRecord((Object[]) value);",
                "+            } else if (value instanceof Iterable) {",
                "+                this.printRecord((Iterable<?>) value);",
                "+            } else {",
                "+                this.printRecord(value);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints all the objects in the given array handling nested collections/arrays as records.",
                "+     *",
                "+     * <p>",
                "+     * If the given array only contains simple objects, this method will print a single record like",
                "+     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested",
                "+     * elements will each be printed as records using {@link #printRecord(Object...)}.",
                "+     * </p>",
                "+     *",
                "+     * <p>",
                "+     * Given the following data structure:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * <code>",
                "+     * String[][] data = new String[3][]",
                "+     * data[0] = String[]{ \"A\", \"B\", \"C\" };",
                "+     * data[1] = new String[]{ \"1\", \"2\", \"3\" };",
                "+     * data[2] = new String[]{ \"A1\", \"B2\", \"C3\" };",
                "+     * </code>",
                "+     * </pre>",
                "+     *",
                "+     * <p>",
                "+     * Calling this method will print:",
                "+     * </p>",
                "+     *",
                "+     * <pre>",
                "+     * <code>",
                "+     * A, B, C",
                "+     * 1, 2, 3",
                "+     * A1, B2, C3",
                "+     * </code>",
                "+     * </pre>",
                "+     *",
                "+     * @param values",
                "+     *            the values to print.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    public void printRecords(final Object... values) throws IOException {",
                "+        for (final Object value : values) {",
                "+            if (value instanceof Object[]) {",
                "+                this.printRecord((Object[]) value);",
                "+            } else if (value instanceof Iterable) {",
                "+                this.printRecord((Iterable<?>) value);",
                "+            } else {",
                "+                this.printRecord(value);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Prints all the objects in the given JDBC result set.",
                "+     *",
                "+     * @param resultSet",
                "+     *            result set the values to print.",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     * @throws SQLException",
                "+     *             if a database access error occurs",
                "+     */",
                "+    public void printRecords(final ResultSet resultSet) throws SQLException, IOException {",
                "+        final int columnCount = resultSet.getMetaData().getColumnCount();",
                "+        while (resultSet.next()) {",
                "+            for (int i = 1; i <= columnCount; i++) {",
                "+                print(resultSet.getObject(i));",
                "+            }",
                "+            println();",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "new file mode 100644",
                "index 0000000000..e36bfbb8af",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "@@ -0,0 +1,276 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Map.Entry;",
                "+",
                "+/**",
                "+ * A CSV record parsed from a CSV file.",
                "+ */",
                "+public final class CSVRecord implements Serializable, Iterable<String> {",
                "+",
                "+    private static final String[] EMPTY_STRING_ARRAY = new String[0];",
                "+",
                "+    private static final long serialVersionUID = 1L;",
                "+",
                "+    private final long characterPosition;",
                "+",
                "+    /** The accumulated comments (if any) */",
                "+    private final String comment;",
                "+",
                "+    /** The column name to index mapping. */",
                "+    private final Map<String, Integer> mapping;",
                "+",
                "+    /** The record number. */",
                "+    private final long recordNumber;",
                "+",
                "+    /** The values of the record */",
                "+    private final String[] values;",
                "+",
                "+    CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber,",
                "+            final long characterPosition) {",
                "+        this.recordNumber = recordNumber;",
                "+        this.values = values != null ? values : EMPTY_STRING_ARRAY;",
                "+        this.mapping = mapping;",
                "+        this.comment = comment;",
                "+        this.characterPosition = characterPosition;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a value by {@link Enum}.",
                "+     *",
                "+     * @param e",
                "+     *            an enum",
                "+     * @return the String at the given enum String",
                "+     */",
                "+    public String get(final Enum<?> e) {",
                "+        return get(e.toString());",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a value by index.",
                "+     *",
                "+     * @param i",
                "+     *            a column index (0-based)",
                "+     * @return the String at the given index",
                "+     */",
                "+    public String get(final int i) {",
                "+        return values[i];",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a value by name.",
                "+     *",
                "+     * @param name",
                "+     *            the name of the column to be retrieved.",
                "+     * @return the column value, maybe null depending on {@link CSVFormat#getNullString()}.",
                "+     * @throws IllegalStateException",
                "+     *             if no header mapping was provided",
                "+     * @throws IllegalArgumentException",
                "+     *             if {@code name} is not mapped or if the record is inconsistent",
                "+     * @see #isConsistent()",
                "+     * @see CSVFormat#withNullString(String)",
                "+     */",
                "+    public String get(final String name) {",
                "+        if (mapping == null) {",
                "+            throw new IllegalStateException(",
                "+                \"No header mapping was specified, the record values can't be accessed by name\");",
                "+        }",
                "+        final Integer index = mapping.get(name);",
                "+        if (index == null) {",
                "+            throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name,",
                "+                mapping.keySet()));",
                "+        }",
                "+        try {",
                "+            return values[index.intValue()];",
                "+        } catch (final ArrayIndexOutOfBoundsException e) {",
                "+            throw new IllegalArgumentException(String.format(",
                "+                \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index,",
                "+                Integer.valueOf(values.length)));",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the start position of this record as a character position in the source stream. This may or may not",
                "+     * correspond to the byte position depending on the character set.",
                "+     *",
                "+     * @return the position of this record in the source stream.",
                "+     */",
                "+    public long getCharacterPosition() {",
                "+        return characterPosition;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the comment for this record, if any.",
                "+     * Note that comments are attached to the following record.",
                "+     * If there is no following record (i.e. the comment is at EOF)",
                "+     * the comment will be ignored.",
                "+     *",
                "+     * @return the comment for this record, or null if no comment for this record is available.",
                "+     */",
                "+    public String getComment() {",
                "+        return comment;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the number of this record in the parsed CSV file.",
                "+     *",
                "+     * <p>",
                "+     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "+     * the current line number of the parser that created this record.",
                "+     * </p>",
                "+     *",
                "+     * @return the number of this record.",
                "+     * @see CSVParser#getCurrentLineNumber()",
                "+     */",
                "+    public long getRecordNumber() {",
                "+        return recordNumber;",
                "+    }",
                "+",
                "+    /**",
                "+     * Tells whether the record size matches the header size.",
                "+     *",
                "+     * <p>",
                "+     * Returns true if the sizes for this record match and false if not. Some programs can export files that fail this",
                "+     * test but still produce parsable files.",
                "+     * </p>",
                "+     *",
                "+     * @return true of this record is valid, false if not",
                "+     */",
                "+    public boolean isConsistent() {",
                "+        return mapping == null || mapping.size() == values.length;",
                "+    }",
                "+",
                "+    /**",
                "+     * Checks whether this record has a comment, false otherwise.",
                "+     * Note that comments are attached to the following record.",
                "+     * If there is no following record (i.e. the comment is at EOF)",
                "+     * the comment will be ignored.",
                "+     *",
                "+     * @return true if this record has a comment, false otherwise",
                "+     * @since 1.3",
                "+     */",
                "+    public boolean hasComment() {",
                "+        return comment != null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Checks whether a given column is mapped, i.e. its name has been defined to the parser.",
                "+     *",
                "+     * @param name",
                "+     *            the name of the column to be retrieved.",
                "+     * @return whether a given column is mapped.",
                "+     */",
                "+    public boolean isMapped(final String name) {",
                "+        return mapping != null && mapping.containsKey(name);",
                "+    }",
                "+",
                "+    /**",
                "+     * Checks whether a given columns is mapped and has a value.",
                "+     *",
                "+     * @param name",
                "+     *            the name of the column to be retrieved.",
                "+     * @return whether a given columns is mapped and has a value",
                "+     */",
                "+    public boolean isSet(final String name) {",
                "+        return isMapped(name) && mapping.get(name).intValue() < values.length;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns an iterator over the values of this record.",
                "+     *",
                "+     * @return an iterator over the values of this record.",
                "+     */",
                "+    @Override",
                "+    public Iterator<String> iterator() {",
                "+        return toList().iterator();",
                "+    }",
                "+",
                "+    /**",
                "+     * Puts all values of this record into the given Map.",
                "+     *",
                "+     * @param map",
                "+     *            The Map to populate.",
                "+     * @return the given map.",
                "+     */",
                "+    <M extends Map<String, String>> M putIn(final M map) {",
                "+        if (mapping == null) {",
                "+            return map;",
                "+        }",
                "+        for (final Entry<String, Integer> entry : mapping.entrySet()) {",
                "+            final int col = entry.getValue().intValue();",
                "+            if (col < values.length) {",
                "+                map.put(entry.getKey(), values[col]);",
                "+            }",
                "+        }",
                "+        return map;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the number of values in this record.",
                "+     *",
                "+     * @return the number of values.",
                "+     */",
                "+    public int size() {",
                "+        return values.length;",
                "+    }",
                "+",
                "+    /**",
                "+     * Converts the values to a List.",
                "+     *",
                "+     * TODO: Maybe make this public?",
                "+     *",
                "+     * @return a new List",
                "+     */",
                "+    private List<String> toList() {",
                "+        return Arrays.asList(values);",
                "+    }",
                "+",
                "+    /**",
                "+     * Copies this record into a new Map. The new map is not connect",
                "+     *",
                "+     * @return A new Map. The map is empty if the record has no headers.",
                "+     */",
                "+    public Map<String, String> toMap() {",
                "+        return putIn(new HashMap<String, String>(values.length));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a string representation of the contents of this record. The result is constructed by comment, mapping,",
                "+     * recordNumber and by passing the internal values array to {@link Arrays#toString(Object[])}.",
                "+     *",
                "+     * @return a String representation of this record.",
                "+     */",
                "+    @Override",
                "+    public String toString() {",
                "+        return \"CSVRecord [comment=\" + comment + \", mapping=\" + mapping +",
                "+                \", recordNumber=\" + recordNumber + \", values=\" +",
                "+                Arrays.toString(values) + \"]\";",
                "+    }",
                "+",
                "+    String[] values() {",
                "+        return values;",
                "+    }",
                "+",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "new file mode 100644",
                "index 0000000000..37ec6aeb1e",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "@@ -0,0 +1,82 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+/**",
                "+ * Constants for this package.",
                "+ */",
                "+final class Constants {",
                "+",
                "+    static final char BACKSLASH = '\\\\';",
                "+",
                "+    static final char BACKSPACE = '\\b';",
                "+",
                "+    static final char COMMA = ',';",
                "+",
                "+    /**",
                "+     * Starts a comment, the remainder of the line is the comment.",
                "+     */",
                "+    static final char COMMENT = '#';",
                "+",
                "+    static final char CR = '\\r';",
                "+",
                "+    /** RFC 4180 defines line breaks as CRLF */",
                "+    static final String CRLF = \"\\r\\n\";",
                "+",
                "+    static final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');",
                "+",
                "+    static final String EMPTY = \"\";",
                "+",
                "+    /** The end of stream symbol */",
                "+    static final int END_OF_STREAM = -1;",
                "+",
                "+    static final char FF = '\\f';",
                "+",
                "+    static final char LF = '\\n';",
                "+",
                "+    /**",
                "+     * Unicode line separator.",
                "+     */",
                "+    static final String LINE_SEPARATOR = \"\\u2028\";",
                "+",
                "+    /**",
                "+     * Unicode next line.",
                "+     */",
                "+    static final String NEXT_LINE = \"\\u0085\";",
                "+",
                "+    /**",
                "+     * Unicode paragraph separator.",
                "+     */",
                "+    static final String PARAGRAPH_SEPARATOR = \"\\u2029\";",
                "+",
                "+    static final char PIPE = '|';",
                "+",
                "+    /** ASCII record separator */",
                "+    static final char RS = 30;",
                "+",
                "+    static final char SP = ' ';",
                "+",
                "+    static final char TAB = '\\t';",
                "+",
                "+    /** Undefined state for the lookahead char */",
                "+    static final int UNDEFINED = -2;",
                "+",
                "+    /** ASCII unit separator */",
                "+    static final char US = 31;",
                "+",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "new file mode 100644",
                "index 0000000000..47f8a2e1fd",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "@@ -0,0 +1,191 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.END_OF_STREAM;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.UNDEFINED;",
                "+",
                "+import java.io.BufferedReader;",
                "+import java.io.IOException;",
                "+import java.io.Reader;",
                "+",
                "+/**",
                "+ * A special buffered reader which supports sophisticated read access.",
                "+ * <p>",
                "+ * In particular the reader supports a look-ahead option, which allows you to see the next char returned by",
                "+ * {@link #read()}. This reader also tracks how many characters have been read with {@link #getPosition()}.",
                "+ * </p>",
                "+ */",
                "+final class ExtendedBufferedReader extends BufferedReader {",
                "+",
                "+    /** The last char returned */",
                "+    private int lastChar = UNDEFINED;",
                "+",
                "+    /** The count of EOLs (CR/LF/CRLF) seen so far */",
                "+    private long eolCounter;",
                "+",
                "+    /** The position, which is number of characters read so far */",
                "+    private long position;",
                "+",
                "+    private boolean closed;",
                "+",
                "+    /**",
                "+     * Created extended buffered reader using default buffer-size",
                "+     */",
                "+    ExtendedBufferedReader(final Reader reader) {",
                "+        super(reader);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int read() throws IOException {",
                "+        final int current = super.read();",
                "+        if (current == CR || current == LF && lastChar != CR) {",
                "+            eolCounter++;",
                "+        }",
                "+        lastChar = current;",
                "+        this.position++;",
                "+        return lastChar;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the last character that was read as an integer (0 to 65535). This will be the last character returned by",
                "+     * any of the read methods. This will not include a character read using the {@link #lookAhead()} method. If no",
                "+     * character has been read then this will return {@link Constants#UNDEFINED}. If the end of the stream was reached",
                "+     * on the last read then this will return {@link Constants#END_OF_STREAM}.",
                "+     *",
                "+     * @return the last character that was read",
                "+     */",
                "+    int getLastChar() {",
                "+        return lastChar;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int read(final char[] buf, final int offset, final int length) throws IOException {",
                "+        if (length == 0) {",
                "+            return 0;",
                "+        }",
                "+",
                "+        final int len = super.read(buf, offset, length);",
                "+",
                "+        if (len > 0) {",
                "+",
                "+            for (int i = offset; i < offset + len; i++) {",
                "+                final char ch = buf[i];",
                "+                if (ch == LF) {",
                "+                    if (CR != (i > 0 ? buf[i - 1] : lastChar)) {",
                "+                        eolCounter++;",
                "+                    }",
                "+                } else if (ch == CR) {",
                "+                    eolCounter++;",
                "+                }",
                "+            }",
                "+",
                "+            lastChar = buf[offset + len - 1];",
                "+",
                "+        } else if (len == -1) {",
                "+            lastChar = END_OF_STREAM;",
                "+        }",
                "+",
                "+        position += len;",
                "+        return len;",
                "+    }",
                "+",
                "+    /**",
                "+     * Calls {@link BufferedReader#readLine()} which drops the line terminator(s). This method should only be called",
                "+     * when processing a comment, otherwise information can be lost.",
                "+     * <p>",
                "+     * Increments {@link #eolCounter}",
                "+     * <p>",
                "+     * Sets {@link #lastChar} to {@link Constants#END_OF_STREAM} at EOF, otherwise to LF",
                "+     *",
                "+     * @return the line that was read, or null if reached EOF.",
                "+     */",
                "+    @Override",
                "+    public String readLine() throws IOException {",
                "+        final String line = super.readLine();",
                "+",
                "+        if (line != null) {",
                "+            lastChar = LF; // needed for detecting start of line",
                "+            eolCounter++;",
                "+        } else {",
                "+            lastChar = END_OF_STREAM;",
                "+        }",
                "+",
                "+        return line;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the next character in the current reader without consuming it. So the next call to {@link #read()} will",
                "+     * still return this value. Does not affect line number or last character.",
                "+     *",
                "+     * @return the next character",
                "+     *",
                "+     * @throws IOException",
                "+     *             if there is an error in reading",
                "+     */",
                "+    int lookAhead() throws IOException {",
                "+        super.mark(1);",
                "+        final int c = super.read();",
                "+        super.reset();",
                "+",
                "+        return c;",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the current line number",
                "+     *",
                "+     * @return the current line number",
                "+     */",
                "+    long getCurrentLineNumber() {",
                "+        // Check if we are at EOL or EOF or just starting",
                "+        if (lastChar == CR || lastChar == LF || lastChar == UNDEFINED || lastChar == END_OF_STREAM) {",
                "+            return eolCounter; // counter is accurate",
                "+        }",
                "+        return eolCounter + 1; // Allow for counter being incremented only at EOL",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets the character position in the reader.",
                "+     *",
                "+     * @return the current position in the reader (counting characters, not bytes since this is a Reader)",
                "+     */",
                "+    long getPosition() {",
                "+        return this.position;",
                "+    }",
                "+",
                "+    public boolean isClosed() {",
                "+        return closed;",
                "+    }",
                "+",
                "+    /**",
                "+     * Closes the stream.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        // Set ivars before calling super close() in case close() throws an IOException.",
                "+        closed = true;",
                "+        lastChar = END_OF_STREAM;",
                "+        super.close();",
                "+    }",
                "+",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "new file mode 100644",
                "index 0000000000..95a3ff00c3",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "@@ -0,0 +1,461 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.BACKSPACE;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.END_OF_STREAM;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.FF;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.TAB;",
                "+import static org.apache.qpid.server.management.plugin.csv.Constants.UNDEFINED;",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.COMMENT;",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.EOF;",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.EORECORD;",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.INVALID;",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.TOKEN;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.IOException;",
                "+",
                "+/**",
                "+ * Lexical analyzer.",
                "+ */",
                "+final class Lexer implements Closeable {",
                "+",
                "+    private static final String CR_STRING = Character.toString(Constants.CR);",
                "+    private static final String LF_STRING = Character.toString(Constants.LF);",
                "+",
                "+    /**",
                "+     * Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it",
                "+     * won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two",
                "+     * chars (using surrogates) and thus there should never be a collision with a real text char.",
                "+     */",
                "+    private static final char DISABLED = '\\ufffe';",
                "+",
                "+    private final char delimiter;",
                "+    private final char escape;",
                "+    private final char quoteChar;",
                "+    private final char commentStart;",
                "+",
                "+    private final boolean ignoreSurroundingSpaces;",
                "+    private final boolean ignoreEmptyLines;",
                "+",
                "+    /** The input stream */",
                "+    private final ExtendedBufferedReader reader;",
                "+    private String firstEol;",
                "+",
                "+    String getFirstEol(){",
                "+        return firstEol;",
                "+    }",
                "+",
                "+    Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {",
                "+        this.reader = reader;",
                "+        this.delimiter = format.getDelimiter();",
                "+        this.escape = mapNullToDisabled(format.getEscapeCharacter());",
                "+        this.quoteChar = mapNullToDisabled(format.getQuoteCharacter());",
                "+        this.commentStart = mapNullToDisabled(format.getCommentMarker());",
                "+        this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();",
                "+        this.ignoreEmptyLines = format.getIgnoreEmptyLines();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the next token.",
                "+     * <p>",
                "+     * A token corresponds to a term, a record change or an end-of-file indicator.",
                "+     * </p>",
                "+     *",
                "+     * @param token",
                "+     *            an existing Token object to reuse. The caller is responsible to initialize the Token.",
                "+     * @return the next token found",
                "+     * @throws IOException",
                "+     *             on stream access error",
                "+     */",
                "+    Token nextToken(final Token token) throws IOException {",
                "+",
                "+        // get the last read char (required for empty line detection)",
                "+        int lastChar = reader.getLastChar();",
                "+",
                "+        // read the next char and set eol",
                "+        int c = reader.read();",
                "+        /*",
                "+         * Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF",
                "+         * - they are equivalent here.",
                "+         */",
                "+        boolean eol = readEndOfLine(c);",
                "+",
                "+        // empty line detection: eol AND (last char was EOL or beginning)",
                "+        if (ignoreEmptyLines) {",
                "+            while (eol && isStartOfLine(lastChar)) {",
                "+                // go on char ahead ...",
                "+                lastChar = c;",
                "+                c = reader.read();",
                "+                eol = readEndOfLine(c);",
                "+                // reached end of file without any content (empty line at the end)",
                "+                if (isEndOfFile(c)) {",
                "+                    token.type = EOF;",
                "+                    // don't set token.isReady here because no content",
                "+                    return token;",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        // did we reach eof during the last iteration already ? EOF",
                "+        if (isEndOfFile(lastChar) || !isDelimiter(lastChar) && isEndOfFile(c)) {",
                "+            token.type = EOF;",
                "+            // don't set token.isReady here because no content",
                "+            return token;",
                "+        }",
                "+",
                "+        if (isStartOfLine(lastChar) && isCommentStart(c)) {",
                "+            final String line = reader.readLine();",
                "+            if (line == null) {",
                "+                token.type = EOF;",
                "+                // don't set token.isReady here because no content",
                "+                return token;",
                "+            }",
                "+            final String comment = line.trim();",
                "+            token.content.append(comment);",
                "+            token.type = COMMENT;",
                "+            return token;",
                "+        }",
                "+",
                "+        // important: make sure a new char gets consumed in each iteration",
                "+        while (token.type == INVALID) {",
                "+            // ignore whitespaces at beginning of a token",
                "+            if (ignoreSurroundingSpaces) {",
                "+                while (isWhitespace(c) && !eol) {",
                "+                    c = reader.read();",
                "+                    eol = readEndOfLine(c);",
                "+                }",
                "+            }",
                "+",
                "+            // ok, start of token reached: encapsulated, or token",
                "+            if (isDelimiter(c)) {",
                "+                // empty token return TOKEN(\"\")",
                "+                token.type = TOKEN;",
                "+            } else if (eol) {",
                "+                // empty token return EORECORD(\"\")",
                "+                // noop: token.content.append(\"\");",
                "+                token.type = EORECORD;",
                "+            } else if (isQuoteChar(c)) {",
                "+                // consume encapsulated token",
                "+                parseEncapsulatedToken(token);",
                "+            } else if (isEndOfFile(c)) {",
                "+                // end of file return EOF()",
                "+                // noop: token.content.append(\"\");",
                "+                token.type = EOF;",
                "+                token.isReady = true; // there is data at EOF",
                "+            } else {",
                "+                // next token must be a simple token",
                "+                // add removed blanks when not ignoring whitespace chars...",
                "+                parseSimpleToken(token, c);",
                "+            }",
                "+        }",
                "+        return token;",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses a simple token.",
                "+     * <p/>",
                "+     * Simple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped",
                "+     * delimiters (as \\, or \\;). The token is finished when one of the following conditions become true:",
                "+     * <ul>",
                "+     * <li>end of line has been reached (EORECORD)</li>",
                "+     * <li>end of stream has been reached (EOF)</li>",
                "+     * <li>an unescaped delimiter has been reached (TOKEN)</li>",
                "+     * </ul>",
                "+     *",
                "+     * @param token",
                "+     *            the current token",
                "+     * @param ch",
                "+     *            the current character",
                "+     * @return the filled token",
                "+     * @throws IOException",
                "+     *             on stream access error",
                "+     */",
                "+    private Token parseSimpleToken(final Token token, int ch) throws IOException {",
                "+        // Faster to use while(true)+break than while(token.type == INVALID)",
                "+        while (true) {",
                "+            if (readEndOfLine(ch)) {",
                "+                token.type = EORECORD;",
                "+                break;",
                "+            } else if (isEndOfFile(ch)) {",
                "+                token.type = EOF;",
                "+                token.isReady = true; // There is data at EOF",
                "+                break;",
                "+            } else if (isDelimiter(ch)) {",
                "+                token.type = TOKEN;",
                "+                break;",
                "+            } else if (isEscape(ch)) {",
                "+                final int unescaped = readEscape();",
                "+                if (unescaped == END_OF_STREAM) { // unexpected char after escape",
                "+                    token.content.append((char) ch).append((char) reader.getLastChar());",
                "+                } else {",
                "+                    token.content.append((char) unescaped);",
                "+                }",
                "+                ch = reader.read(); // continue",
                "+            } else {",
                "+                token.content.append((char) ch);",
                "+                ch = reader.read(); // continue",
                "+            }",
                "+        }",
                "+",
                "+        if (ignoreSurroundingSpaces) {",
                "+            trimTrailingSpaces(token.content);",
                "+        }",
                "+",
                "+        return token;",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses an encapsulated token.",
                "+     * <p/>",
                "+     * Encapsulated tokens are surrounded by the given encapsulating-string. The encapsulator itself might be included",
                "+     * in the token using a doubling syntax (as \"\", '') or using escaping (as in \\\", \\'). Whitespaces before and after",
                "+     * an encapsulated token are ignored. The token is finished when one of the following conditions become true:",
                "+     * <ul>",
                "+     * <li>an unescaped encapsulator has been reached, and is followed by optional whitespace then:</li>",
                "+     * <ul>",
                "+     * <li>delimiter (TOKEN)</li>",
                "+     * <li>end of line (EORECORD)</li>",
                "+     * </ul>",
                "+     * <li>end of stream has been reached (EOF)</li> </ul>",
                "+     *",
                "+     * @param token",
                "+     *            the current token",
                "+     * @return a valid token object",
                "+     * @throws IOException",
                "+     *             on invalid state: EOF before closing encapsulator or invalid character before delimiter or EOL",
                "+     */",
                "+    private Token parseEncapsulatedToken(final Token token) throws IOException {",
                "+        // save current line number in case needed for IOE",
                "+        final long startLineNumber = getCurrentLineNumber();",
                "+        int c;",
                "+        while (true) {",
                "+            c = reader.read();",
                "+",
                "+            if (isEscape(c)) {",
                "+                final int unescaped = readEscape();",
                "+                if (unescaped == END_OF_STREAM) { // unexpected char after escape",
                "+                    token.content.append((char) c).append((char) reader.getLastChar());",
                "+                } else {",
                "+                    token.content.append((char) unescaped);",
                "+                }",
                "+            } else if (isQuoteChar(c)) {",
                "+                if (isQuoteChar(reader.lookAhead())) {",
                "+                    // double or escaped encapsulator -> add single encapsulator to token",
                "+                    c = reader.read();",
                "+                    token.content.append((char) c);",
                "+                } else {",
                "+                    // token finish mark (encapsulator) reached: ignore whitespace till delimiter",
                "+                    while (true) {",
                "+                        c = reader.read();",
                "+                        if (isDelimiter(c)) {",
                "+                            token.type = TOKEN;",
                "+                            return token;",
                "+                        } else if (isEndOfFile(c)) {",
                "+                            token.type = EOF;",
                "+                            token.isReady = true; // There is data at EOF",
                "+                            return token;",
                "+                        } else if (readEndOfLine(c)) {",
                "+                            token.type = EORECORD;",
                "+                            return token;",
                "+                        } else if (!isWhitespace(c)) {",
                "+                            // error invalid char between token and next delimiter",
                "+                            throw new IOException(\"(line \" + getCurrentLineNumber() +",
                "+                                    \") invalid char between encapsulated token and delimiter\");",
                "+                        }",
                "+                    }",
                "+                }",
                "+            } else if (isEndOfFile(c)) {",
                "+                // error condition (end of file before end of token)",
                "+                throw new IOException(\"(startline \" + startLineNumber +",
                "+                        \") EOF reached before encapsulated token finished\");",
                "+            } else {",
                "+                // consume character",
                "+                token.content.append((char) c);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private char mapNullToDisabled(final Character c) {",
                "+        return c == null ? DISABLED : c.charValue();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the current line number",
                "+     *",
                "+     * @return the current line number",
                "+     */",
                "+    long getCurrentLineNumber() {",
                "+        return reader.getCurrentLineNumber();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the current character position",
                "+     *",
                "+     * @return the current character position",
                "+     */",
                "+    long getCharacterPosition() {",
                "+        return reader.getPosition();",
                "+    }",
                "+",
                "+    // TODO escape handling needs more work",
                "+    /**",
                "+     * Handle an escape sequence.",
                "+     * The current character must be the escape character.",
                "+     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}",
                "+     * on the input stream.",
                "+     *",
                "+     * @return the unescaped character (as an int) or {@link Constants#END_OF_STREAM} if char following the escape is",
                "+     *      invalid.",
                "+     * @throws IOException if there is a problem reading the stream or the end of stream is detected:",
                "+     *      the escape character is not allowed at end of stream",
                "+     */",
                "+    int readEscape() throws IOException {",
                "+        // the escape char has just been read (normally a backslash)",
                "+        final int ch = reader.read();",
                "+        switch (ch) {",
                "+        case 'r':",
                "+            return CR;",
                "+        case 'n':",
                "+            return LF;",
                "+        case 't':",
                "+            return TAB;",
                "+        case 'b':",
                "+            return BACKSPACE;",
                "+        case 'f':",
                "+            return FF;",
                "+        case CR:",
                "+        case LF:",
                "+        case FF: // TODO is this correct?",
                "+        case TAB: // TODO is this correct? Do tabs need to be escaped?",
                "+        case BACKSPACE: // TODO is this correct?",
                "+            return ch;",
                "+        case END_OF_STREAM:",
                "+            throw new IOException(\"EOF whilst processing escape sequence\");",
                "+        default:",
                "+            // Now check for meta-characters",
                "+            if (isMetaChar(ch)) {",
                "+                return ch;",
                "+            }",
                "+            // indicate unexpected char - available from in.getLastChar()",
                "+            return END_OF_STREAM;",
                "+        }",
                "+    }",
                "+",
                "+    void trimTrailingSpaces(final StringBuilder buffer) {",
                "+        int length = buffer.length();",
                "+        while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {",
                "+            length = length - 1;",
                "+        }",
                "+        if (length != buffer.length()) {",
                "+            buffer.setLength(length);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Greedily accepts \\n, \\r and \\r\\n This checker consumes silently the second control-character...",
                "+     *",
                "+     * @return true if the given or next character is a line-terminator",
                "+     */",
                "+    boolean readEndOfLine(int ch) throws IOException {",
                "+        // check if we have \\r\\n...",
                "+        if (ch == CR && reader.lookAhead() == LF) {",
                "+            // note: does not change ch outside of this method!",
                "+            ch = reader.read();",
                "+            // Save the EOL state",
                "+            if (firstEol == null) {",
                "+                this.firstEol = Constants.CRLF;",
                "+            }",
                "+        }",
                "+        // save EOL state here.",
                "+        if (firstEol == null) {",
                "+            if (ch == LF) {",
                "+                this.firstEol = LF_STRING;",
                "+            } else if (ch == CR) {",
                "+                this.firstEol = CR_STRING;",
                "+            }",
                "+        }",
                "+",
                "+        return ch == LF || ch == CR;",
                "+    }",
                "+",
                "+    boolean isClosed() {",
                "+        return reader.isClosed();",
                "+    }",
                "+",
                "+    /**",
                "+     * @return true if the given char is a whitespace character",
                "+     */",
                "+    boolean isWhitespace(final int ch) {",
                "+        return !isDelimiter(ch) && Character.isWhitespace((char) ch);",
                "+    }",
                "+",
                "+    /**",
                "+     * Checks if the current character represents the start of a line: a CR, LF or is at the start of the file.",
                "+     *",
                "+     * @param ch the character to check",
                "+     * @return true if the character is at the start of a line.",
                "+     */",
                "+    boolean isStartOfLine(final int ch) {",
                "+        return ch == LF || ch == CR || ch == UNDEFINED;",
                "+    }",
                "+",
                "+    /**",
                "+     * @return true if the given character indicates end of file",
                "+     */",
                "+    boolean isEndOfFile(final int ch) {",
                "+        return ch == END_OF_STREAM;",
                "+    }",
                "+",
                "+    boolean isDelimiter(final int ch) {",
                "+        return ch == delimiter;",
                "+    }",
                "+",
                "+    boolean isEscape(final int ch) {",
                "+        return ch == escape;",
                "+    }",
                "+",
                "+    boolean isQuoteChar(final int ch) {",
                "+        return ch == quoteChar;",
                "+    }",
                "+",
                "+    boolean isCommentStart(final int ch) {",
                "+        return ch == commentStart;",
                "+    }",
                "+",
                "+    private boolean isMetaChar(final int ch) {",
                "+        return ch == delimiter ||",
                "+               ch == escape ||",
                "+               ch == quoteChar ||",
                "+               ch == commentStart;",
                "+    }",
                "+",
                "+    /**",
                "+     * Closes resources.",
                "+     *",
                "+     * @throws IOException",
                "+     *             If an I/O error occurs",
                "+     */",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        reader.close();",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "new file mode 100644",
                "index 0000000000..25c6b314a3",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "@@ -0,0 +1,50 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+/**",
                "+ * Defines quoting behavior when printing.",
                "+ */",
                "+public enum QuoteMode {",
                "+",
                "+    /**",
                "+     * Quotes all fields.",
                "+     */",
                "+    ALL,",
                "+",
                "+    /**",
                "+     * Quotes all non-null fields.",
                "+     */",
                "+    ALL_NON_NULL,",
                "+",
                "+    /**",
                "+     * Quotes fields which contain special characters such as a the field delimiter, quote character or any of the",
                "+     * characters in the line separator string.",
                "+     */",
                "+    MINIMAL,",
                "+",
                "+    /**",
                "+     * Quotes all non-numeric fields.",
                "+     */",
                "+    NON_NUMERIC,",
                "+",
                "+    /**",
                "+     * Never quotes fields. When the delimiter occurs in data, the printer prefixes it with the escape character. If the",
                "+     * escape character is not set, format validation throws an exception.",
                "+     */",
                "+    NONE",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java",
                "new file mode 100644",
                "index 0000000000..c3c94e10d7",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java",
                "@@ -0,0 +1,73 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.management.plugin.csv;",
                "+",
                "+import static org.apache.qpid.server.management.plugin.csv.Token.Type.INVALID;",
                "+",
                "+/**",
                "+ * Internal token representation.",
                "+ * <p/>",
                "+ * It is used as contract between the lexer and the parser.",
                "+ */",
                "+final class Token {",
                "+",
                "+    /** length of the initial token (content-)buffer */",
                "+    private static final int INITIAL_TOKEN_LENGTH = 50;",
                "+",
                "+    enum Type {",
                "+        /** Token has no valid content, i.e. is in its initialized state. */",
                "+        INVALID,",
                "+",
                "+        /** Token with content, at beginning or in the middle of a line. */",
                "+        TOKEN,",
                "+",
                "+        /** Token (which can have content) when the end of file is reached. */",
                "+        EOF,",
                "+",
                "+        /** Token with content when the end of a line is reached. */",
                "+        EORECORD,",
                "+",
                "+        /** Token is a comment line. */",
                "+        COMMENT",
                "+    }",
                "+",
                "+    /** Token type */",
                "+    Token.Type type = INVALID;",
                "+",
                "+    /** The content buffer. */",
                "+    final StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);",
                "+",
                "+    /** Token ready flag: indicates a valid token with content (ready for the parser). */",
                "+    boolean isReady;",
                "+",
                "+    void reset() {",
                "+        content.setLength(0);",
                "+        type = INVALID;",
                "+        isReady = false;",
                "+    }",
                "+",
                "+    /**",
                "+     * Eases IDE debugging.",
                "+     *",
                "+     * @return a string helpful for debugging.",
                "+     */",
                "+    @Override",
                "+    public String toString() {",
                "+        return type.name() + \" [\" + content.toString() + \"]\";",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8758e7c826943a399bf5c6ee2a1f53db188d9f2d"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23e968d0d538b486d3714e243fd958630477200c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1524841170,
            "hunks": 3,
            "message": "QPID-8176: [Broker-J] Use broker REST API to check broker availability",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Broker.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Broker.js",
                "index 064955807d..80e113c54e 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Broker.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Broker.js",
                "@@ -339,3 +339,4 @@ define([\"dojo/parser\",",
                "             {",
                "-                this.management.post({url: this.management.objectToURL(this.modelObj) + \"/restart\"}, {})",
                "+                var brokerUrl = this.management.objectToURL(this.modelObj);",
                "+                this.management.post({url: brokerUrl + \"/restart\"}, {})",
                "                     .then(lang.hitch(this, function ()",
                "@@ -347,3 +348,2 @@ define([\"dojo/parser\",",
                "                         standby.show();",
                "-                        var pollUrl = this.management.getFullUrl(\"/\");",
                "                         var logout = function ()",
                "@@ -354,3 +354,14 @@ define([\"dojo/parser\",",
                "                         {",
                "-                            xhr(pollUrl, {method: \"GET\"}).then(logout, ping);",
                "+                            xhr(brokerUrl, {method: \"GET\"})",
                "+                                .then(logout,",
                "+                                    function (error) {",
                "+                                        if (error.response.status === 401 || error.response.status === 403)",
                "+                                        {",
                "+                                            logout();",
                "+                                        }",
                "+                                        else",
                "+                                        {",
                "+                                            ping();",
                "+                                        }",
                "+                                    });",
                "                         };"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Broker.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8176": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "df93e6afd575db71d44c827200956eaa631fe975"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8176",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "507b0c5b825284e248c0d89b360d0972640931c6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515592065,
            "hunks": 3,
            "message": "QPID-8040: [Broker-J] [Transport] Ensure that selection keys relating to non-accepting channels are always processed even if cancelled",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "index c67a219304..6c0ce8daed 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "@@ -179,3 +179,3 @@ class SelectorThread extends Thread",
                "             {",
                "-                if(key.isAcceptable())",
                "+                if (key.attachment() instanceof NonBlockingNetworkTransport)",
                "                 {",
                "@@ -200,7 +200,3 @@ class SelectorThread extends Thread",
                "-                    _workQueue.add(new Runnable()",
                "-                    {",
                "-                        @Override",
                "-                        public void run()",
                "-                        {",
                "+                    _workQueue.add(() -> {",
                "                             try",
                "@@ -239,3 +235,2 @@ class SelectorThread extends Thread",
                "                             }",
                "-                        }",
                "                     });"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8040": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3087443cd3f8a15dcbb5ca6f4bfb0ff939f8d920"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8040",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0cc2bb7de79a82f3b138277a4b5a00c9749af948",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522681442,
            "hunks": 1,
            "message": "NO-JIRA: [Broker-J] Bump Qpid JMS client version to 0.31.0",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index acb1f6e357..afebdb3a74 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -151,3 +151,3 @@",
                "     <httpclient-version>4.5.3</httpclient-version>",
                "-    <qpid-jms-client-version>0.30.0</qpid-jms-client-version>",
                "+    <qpid-jms-client-version>0.31.0</qpid-jms-client-version>",
                "     <qpid-jms-client-amqp-0-x-version>6.3.0</qpid-jms-client-amqp-0-x-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b85f99c80887ed4dd2072e8879bf703f21ab1c6f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521465862,
            "hunks": 10,
            "message": "QPID-8136: [Broker-J] [Jackson] Update dependency from 2.8.7 to 2.8.11",
            "diff": [
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index c4a771ef2e..98fa487ae7 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -63,3 +63,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>${fasterxml-jackson-version}</version>",
                "+      <version>${fasterxml-jackson-databind-version}</version>",
                "     </dependency>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index f8bc430d5e..7e5a6a475a 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -103,3 +103,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>${fasterxml-jackson-version}</version>",
                "+      <version>${fasterxml-jackson-databind-version}</version>",
                "     </dependency>",
                "diff --git a/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index a5669c89e2..5d6c7fa2ce 100644",
                "--- a/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -43,5 +43,5 @@ From: 'FasterXML' (http://fasterxml.com/)",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.7",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.11",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.7",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.11.1",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 3692384d2a..fa0ee858fd 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -85,3 +85,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>${fasterxml-jackson-version}</version>",
                "+      <version>${fasterxml-jackson-databind-version}</version>",
                "     </dependency>",
                "diff --git a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index 856fe4ce99..b60789274a 100644",
                "--- a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -33,5 +33,5 @@ From: 'FasterXML' (http://fasterxml.com/)",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.7",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.11",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.7",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.11.1",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "diff --git a/pom.xml b/pom.xml",
                "index 47b2d9b93a..a4a8e6ef05 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -120,3 +120,4 @@",
                "     <guava-version>18.0</guava-version>",
                "-    <fasterxml-jackson-version>2.8.7</fasterxml-jackson-version>",
                "+    <fasterxml-jackson-version>2.8.11</fasterxml-jackson-version>",
                "+    <fasterxml-jackson-databind-version>2.8.11.1</fasterxml-jackson-databind-version>",
                "     <slf4j-version>1.7.25</slf4j-version>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 005ef321e6..b7737774b5 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -81,3 +81,3 @@",
                "             <artifactId>jackson-databind</artifactId>",
                "-            <version>${fasterxml-jackson-version}</version>",
                "+            <version>${fasterxml-jackson-databind-version}</version>",
                "         </dependency>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index bebf8bdc05..4dd7883b3c 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -58,3 +58,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>${fasterxml-jackson-version}</version>",
                "+      <version>${fasterxml-jackson-databind-version}</version>",
                "     </dependency>"
            ],
            "changed_files": [
                "broker-core/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "perftests/pom.xml",
                "perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8136": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ef118e749a835a80f69612b4e788694b97282f0"
                ],
                [
                    "no-tag",
                    "906a84956baa3de272489b3265078e68add952d0"
                ]
            ],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8136",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7dbb88471a414d993e4ee3bd3e8fde2f30ca2f46",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519439006,
            "hunks": 26,
            "message": "QPID-8103: [Broker-J] [WMC] [Query UI] Add ability to download results as CSV",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "new file mode 100644",
                "index 0000000000..90a5f5faaf",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "@@ -0,0 +1,320 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.management.plugin.servlet.csv;",
                "+",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Collection;",
                "+",
                "+/**",
                "+ * Simplified version of CSVFormat from Apache Commons CSV",
                "+ */",
                "+public final class CSVFormat",
                "+{",
                "+    private static final char COMMA = ',';",
                "+",
                "+    private static final char COMMENT = '#';",
                "+",
                "+    private static final char CR = '\\r';",
                "+",
                "+    private static final String CRLF = \"\\r\\n\";",
                "+",
                "+    private static final Character DOUBLE_QUOTE_CHAR = '\"';",
                "+",
                "+    private static final String EMPTY = \"\";",
                "+",
                "+    private static final char LF = '\\n';",
                "+",
                "+    private static final char SP = ' ';",
                "+",
                "+    private final char _delimiter;",
                "+",
                "+    private final Character _escapeCharacter; // null if escaping is disabled",
                "+",
                "+    private final Character _quoteCharacter; // null if quoting is disabled",
                "+",
                "+    private final String _recordSeparator; // for outputs",
                "+",
                "+    public CSVFormat()",
                "+    {",
                "+        this(COMMA, DOUBLE_QUOTE_CHAR, null, CRLF);",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a customized CSV format.",
                "+     *",
                "+     * @param delimiter       the char used for value separation, must not be a line break character",
                "+     * @param quoteCharacter  the Character used as value encapsulation marker, may be {@code null} to disable",
                "+     * @param escapeCharacter the Character used to escape special characters in values, may be {@code null} to disable",
                "+     * @param recordSeparator the line separator to use for output",
                "+     * @throws IllegalArgumentException if the _delimiter is a line break character",
                "+     */",
                "+    CSVFormat(final char delimiter,",
                "+              final Character quoteCharacter,",
                "+              final Character escapeCharacter,",
                "+              final String recordSeparator)",
                "+    {",
                "+        if (delimiter == LF || delimiter == CR)",
                "+        {",
                "+            throw new IllegalArgumentException(\"The _delimiter cannot be a line break\");",
                "+        }",
                "+",
                "+        if (quoteCharacter != null && delimiter == quoteCharacter)",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The quote character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
                "+        }",
                "+",
                "+        if (escapeCharacter != null && delimiter == escapeCharacter)",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
                "+        }",
                "+",
                "+        this._delimiter = delimiter;",
                "+        this._quoteCharacter = quoteCharacter;",
                "+        this._escapeCharacter = escapeCharacter;",
                "+        this._recordSeparator = recordSeparator;",
                "+    }",
                "+",
                "+    public <T extends Collection<?>> void printRecord(final Appendable out, final T record) throws IOException",
                "+    {",
                "+        boolean newRecord = true;",
                "+        for (Object item : record)",
                "+        {",
                "+            print(out, item, newRecord);",
                "+            newRecord = false;",
                "+        }",
                "+        println(out);",
                "+    }",
                "+",
                "+    public <C extends Collection<? extends Collection<?>>> void printRecords(final Appendable out, final C records)",
                "+            throws IOException",
                "+    {",
                "+        for (Collection<?> record : records)",
                "+        {",
                "+            printRecord(out, record);",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    public void println(final Appendable out) throws IOException",
                "+    {",
                "+        if (_recordSeparator != null)",
                "+        {",
                "+            out.append(_recordSeparator);",
                "+        }",
                "+    }",
                "+",
                "+    public void print(final Appendable out, final Object value, final boolean newRecord) throws IOException",
                "+    {",
                "+        CharSequence charSequence;",
                "+        if (value == null)",
                "+        {",
                "+            charSequence = EMPTY;",
                "+        }",
                "+        else",
                "+        {",
                "+            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
                "+        }",
                "+        this.print(out, value, charSequence, 0, charSequence.length(), newRecord);",
                "+    }",
                "+",
                "+",
                "+    public void printComments(final Appendable out,",
                "+                              final String... comments) throws IOException",
                "+    {",
                "+        for (String comment: comments)",
                "+        {",
                "+            out.append(COMMENT).append(SP).append(comment);",
                "+            println(out);",
                "+        }",
                "+    }",
                "+",
                "+    private void print(final Appendable out,",
                "+                       final Object object,",
                "+                       final CharSequence value,",
                "+                       final int offset,",
                "+                       final int len,",
                "+                       final boolean newRecord) throws IOException",
                "+    {",
                "+        if (!newRecord)",
                "+        {",
                "+            out.append(_delimiter);",
                "+        }",
                "+        if (object == null)",
                "+        {",
                "+            out.append(value);",
                "+        }",
                "+        else if (_quoteCharacter != null)",
                "+        {",
                "+            printAndQuote(value, offset, len, out, newRecord);",
                "+        }",
                "+        else if (_escapeCharacter != null)",
                "+        {",
                "+            printAndEscape(out, value, offset, len);",
                "+        }",
                "+        else",
                "+        {",
                "+            out.append(value, offset, offset + len);",
                "+        }",
                "+    }",
                "+",
                "+    private void printAndEscape(final Appendable out,",
                "+                                final CharSequence value,",
                "+                                final int offset,",
                "+                                final int len)",
                "+            throws IOException",
                "+    {",
                "+        int start = offset;",
                "+        int pos = offset;",
                "+        final int end = offset + len;",
                "+",
                "+        final char escape = _escapeCharacter;",
                "+",
                "+        while (pos < end)",
                "+        {",
                "+            char c = value.charAt(pos);",
                "+            if (c == CR || c == LF || c == _delimiter || c == escape)",
                "+            {",
                "+                // write out segment up until this char",
                "+                if (pos > start)",
                "+                {",
                "+                    out.append(value, start, pos);",
                "+                }",
                "+                if (c == LF)",
                "+                {",
                "+                    c = 'n';",
                "+                }",
                "+                else if (c == CR)",
                "+                {",
                "+                    c = 'r';",
                "+                }",
                "+",
                "+                out.append(escape);",
                "+                out.append(c);",
                "+",
                "+                start = pos + 1; // start on the current char after this one",
                "+            }",
                "+",
                "+            pos++;",
                "+        }",
                "+",
                "+        // write last segment",
                "+        if (pos > start)",
                "+        {",
                "+            out.append(value, start, pos);",
                "+        }",
                "+    }",
                "+",
                "+    private void printAndQuote(final CharSequence value, final int offset, final int len,",
                "+                               final Appendable out, final boolean newRecord) throws IOException",
                "+    {",
                "+        boolean quote = false;",
                "+        int start = offset;",
                "+        int pos = offset;",
                "+        final int end = offset + len;",
                "+",
                "+        final char quoteChar = _quoteCharacter;",
                "+",
                "+        if (len <= 0)",
                "+        {",
                "+            // always quote an empty token that is the first",
                "+            // on the line, as it may be the only thing on the",
                "+            // line. If it were not quoted in that case,",
                "+            // an empty line has no tokens.",
                "+            if (newRecord)",
                "+            {",
                "+                quote = true;",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            char c = value.charAt(pos);",
                "+",
                "+            if (c <= COMMENT)",
                "+            {",
                "+                // Some other chars at the start of a value caused the parser to fail, so for now",
                "+                // encapsulate if we start in anything less than '#'. We are being conservative",
                "+                // by including the default comment char too.",
                "+                quote = true;",
                "+            }",
                "+            else",
                "+            {",
                "+                while (pos < end)",
                "+                {",
                "+                    c = value.charAt(pos);",
                "+                    if (c == LF || c == CR || c == quoteChar || c == _delimiter)",
                "+                    {",
                "+                        quote = true;",
                "+                        break;",
                "+                    }",
                "+                    pos++;",
                "+                }",
                "+",
                "+                if (!quote)",
                "+                {",
                "+                    pos = end - 1;",
                "+                    c = value.charAt(pos);",
                "+                    // Some other chars at the end caused the parser to fail, so for now",
                "+                    // encapsulate if we end in anything less than ' '",
                "+                    if (c <= SP)",
                "+                    {",
                "+                        quote = true;",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (!quote)",
                "+        {",
                "+            // no encapsulation needed - write out the original value",
                "+            out.append(value, start, end);",
                "+            return;",
                "+        }",
                "+",
                "+        // we hit something that needed encapsulation",
                "+        out.append(quoteChar);",
                "+",
                "+        // Pick up where we left off: pos should be positioned on the first character that caused",
                "+        // the need for encapsulation.",
                "+        while (pos < end)",
                "+        {",
                "+            final char c = value.charAt(pos);",
                "+            if (c == quoteChar)",
                "+            {",
                "+                // write out the chunk up until this point",
                "+",
                "+                // add 1 to the length to write out the encapsulator also",
                "+                out.append(value, start, pos + 1);",
                "+                // put the next starting position on the encapsulator so we will",
                "+                // write it out again with the next string (effectively doubling it)",
                "+                start = pos;",
                "+            }",
                "+            pos++;",
                "+        }",
                "+",
                "+        // write the last segment",
                "+        out.append(value, start, pos);",
                "+        out.append(quoteChar);",
                "+    }",
                "+",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "index 4403200337..76d87f1698 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "@@ -24,2 +24,3 @@ import static org.apache.qpid.server.management.plugin.HttpManagementUtil.CONTEN",
                " import static org.apache.qpid.server.management.plugin.HttpManagementUtil.GZIP_CONTENT_ENCODING;",
                "+import static org.apache.qpid.server.management.plugin.HttpManagementUtil.ensureFilenameIsRfc2183;",
                "@@ -68,2 +69,7 @@ public abstract class AbstractServlet extends HttpServlet",
                "     public static final int SC_UNPROCESSABLE_ENTITY = 422;",
                "+    /**",
                "+     * Signifies that the agent wishes the servlet to set the Content-Disposition on the",
                "+     * response with the value attachment.  This filename will be derived from the parameter value.",
                "+     */",
                "+    public static final String CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM = \"contentDispositionAttachmentFilename\";",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractServlet.class);",
                "@@ -160,2 +166,19 @@ public abstract class AbstractServlet extends HttpServlet",
                "+    protected void setContentDispositionHeaderIfNecessary(final HttpServletResponse response,",
                "+                                                        final String attachmentFilename)",
                "+    {",
                "+        if (attachmentFilename != null)",
                "+        {",
                "+            String filenameRfc2183 = ensureFilenameIsRfc2183(attachmentFilename);",
                "+            if (filenameRfc2183.length() > 0)",
                "+            {",
                "+                response.setHeader(CONTENT_DISPOSITION, String.format(\"attachment; filename=\\\"%s\\\"\", filenameRfc2183));",
                "+            }",
                "+            else",
                "+            {",
                "+                response.setHeader(CONTENT_DISPOSITION, \"attachment\");  // Agent will allow user to choose a name",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     protected void doPut(HttpServletRequest req,",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "index 2b7229559f..8ae06f8573 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.server.management.plugin.servlet.rest;",
                " import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.LinkedHashMap;",
                "@@ -35,2 +37,3 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.filter.SelectorParsingException;",
                "+import org.apache.qpid.server.management.plugin.servlet.csv.CSVFormat;",
                " import org.apache.qpid.server.management.plugin.servlet.query.ConfiguredObjectQuery;",
                "@@ -38,2 +41,3 @@ import org.apache.qpid.server.management.plugin.servlet.query.EvaluationExceptio",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "+import org.apache.qpid.server.model.Container;",
                " import org.apache.qpid.server.model.Model;",
                "@@ -44,2 +48,3 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "+    private static final CSVFormat CSV_FORMAT = new CSVFormat();",
                "@@ -80,3 +85,2 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "                 List<ConfiguredObject<?>> objects = getAllObjects(parent, category, request);",
                "-                Map<String, Object> resultsObject = new LinkedHashMap<>();",
                "@@ -91,6 +95,22 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "-                    resultsObject.put(\"headers\", query.getHeaders());",
                "-                    resultsObject.put(\"results\", query.getResults());",
                "-                    resultsObject.put(\"total\", query.getTotalNumberOfRows());",
                "-                    sendJsonResponse(resultsObject, request, response);",
                "+",
                "+                    String attachmentFilename = request.getParameter(CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM);",
                "+                    if (attachmentFilename != null)",
                "+                    {",
                "+                        setContentDispositionHeaderIfNecessary(response, attachmentFilename);",
                "+                    }",
                "+",
                "+                    if (\"csv\".equalsIgnoreCase(request.getParameter(\"format\")))",
                "+                    {",
                "+                        sendCsvResponse(categoryName, parent, query, request, response);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        Map<String, Object> resultsObject = new LinkedHashMap<>();",
                "+                        resultsObject.put(\"headers\", query.getHeaders());",
                "+                        resultsObject.put(\"results\", query.getResults());",
                "+                        resultsObject.put(\"total\", query.getTotalNumberOfRows());",
                "+",
                "+                        sendJsonResponse(resultsObject, request, response);",
                "+                    }",
                "                 }",
                "@@ -127,2 +147,30 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "+    private void sendCsvResponse(final String categoryName,",
                "+                                 final X parent,",
                "+                                 final ConfiguredObjectQuery query,",
                "+                                 final HttpServletRequest request,",
                "+                                 final HttpServletResponse response)",
                "+            throws IOException",
                "+    {",
                "+        response.setStatus(HttpServletResponse.SC_OK);",
                "+        response.setContentType(\"text/csv;charset=utf-8;\");",
                "+        response.setCharacterEncoding(StandardCharsets.UTF_8.name());",
                "+        sendCachingHeadersOnResponse(response);",
                "+        try (PrintWriter writer = response.getWriter())",
                "+        {",
                "+            CSV_FORMAT.printComments(writer,",
                "+                                     String.format(\"parent : %s %s \",",
                "+                                                   parent.getCategoryClass().getSimpleName(),",
                "+                                                   (parent instanceof Container",
                "+                                                           ? \"\"",
                "+                                                           : parent.getName())),",
                "+                                     String.format(\"category : %s\", categoryName),",
                "+                                     String.format(\"select : %s\", request.getParameter(\"select\")),",
                "+                                     String.format(\"where : %s\", request.getParameter(\"where\")),",
                "+                                     String.format(\"order by : %s\", request.getParameter(\"orderBy\")));",
                "+            CSV_FORMAT.printRecord(writer, query.getHeaders());",
                "+            CSV_FORMAT.printRecords(writer, query.getResults());",
                "+        }",
                "+    }",
                "+",
                "     abstract protected X getParent(final HttpServletRequest request, final ConfiguredObject<?> managedObject);",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "index 8361886744..4e5e524215 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "@@ -83,7 +83,2 @@ public class RestServlet extends AbstractServlet",
                "     private static final String SINGLETON_MODEL_OBJECT_RESPONSE_AS_LIST = \"singletonModelObjectResponseAsList\";",
                "-    /**",
                "-     * Signifies that the agent wishes the servlet to set the Content-Disposition on the",
                "-     * response with the value attachment.  This filename will be derived from the parameter value.",
                "-     */",
                "-    public static final String CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM = \"contentDispositionAttachmentFilename\";",
                "     public static final Set<String> RESERVED_PARAMS =",
                "@@ -315,19 +310,2 @@ public class RestServlet extends AbstractServlet",
                "-    private void setContentDispositionHeaderIfNecessary(final HttpServletResponse response,",
                "-                                                        final String attachmentFilename)",
                "-    {",
                "-        if (attachmentFilename != null)",
                "-        {",
                "-            String filenameRfc2183 = ensureFilenameIsRfc2183(attachmentFilename);",
                "-            if (filenameRfc2183.length() > 0)",
                "-            {",
                "-                response.setHeader(CONTENT_DISPOSITION, String.format(\"attachment; filename=\\\"%s\\\"\", filenameRfc2183));",
                "-            }",
                "-            else",
                "-            {",
                "-                response.setHeader(CONTENT_DISPOSITION, \"attachment\");  // Agent will allow user to choose a name",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     private Class<? extends ConfiguredObject> getConfiguredClass(HttpServletRequest request, ConfiguredObject<?> managedObject)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/css/common.css b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "index e4b2511ed3..b2577c7e4d 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "+++ b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "@@ -613,2 +613,6 @@ td.advancedSearchField, col.autoWidth {",
                "+.exportIcon.ui-icon {",
                "+    background-position: -112px -112px;",
                "+}",
                "+",
                " .claro .searchBox {",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "index 5570636aa0..bf56bf4da2 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "@@ -614,7 +614,4 @@ define([\"dojo/_base/lang\",",
                "         {",
                "-            var url = \"api/latest/\" + (query.parent && query.parent.type === \"virtualhost\" ? \"queryvhost/\"",
                "-                      + this.objectToPath({parent: query.parent}) : \"querybroker\") + (query.category ? \"/\"",
                "-                      + query.category : \"\");",
                "             var request = {",
                "-                url: this.getFullUrl(url),",
                "+                url: this.getQueryUrl(query),",
                "                 query: {}",
                "@@ -625,2 +622,14 @@ define([\"dojo/_base/lang\",",
                "+        Management.prototype.getQueryUrl = function (query, parameters)",
                "+        {",
                "+            var url = \"api/latest/\" + (query.parent && query.parent.type === \"virtualhost\" ? \"queryvhost/\"",
                "+                      + this.objectToPath({parent: query.parent}) : \"querybroker\") + (query.category ? \"/\"",
                "+                      + query.category : \"\");",
                "+            if (parameters)",
                "+            {",
                "+                url = url + \"?\" + ioQuery.objectToQuery(parameters);",
                "+            }",
                "+           return this.getFullUrl(url);",
                "+        };",
                "+",
                "         Management.prototype.savePreference = function(parentObject, preference)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "index 4f6dad61ea..799ec67ba2 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "@@ -37,2 +37,3 @@ define([\"dojo/_base/declare\",",
                "         \"qpid/common/MessageDialog\",",
                "+        \"dojox/uuid/generateRandomUuid\",",
                "         \"qpid/management/query/DropDownSelect\",",
                "@@ -63,3 +64,4 @@ define([\"dojo/_base/declare\",",
                "               QueryGrid,",
                "-              MessageDialog)",
                "+              MessageDialog,",
                "+              uuid)",
                "     {",
                "@@ -185,2 +187,4 @@ define([\"dojo/_base/declare\",",
                "                 searchForm: null,",
                "+                exportButton: null,",
                "+                exportButtonTooltip: null,",
                "@@ -243,2 +247,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.on(\"click\", lang.hitch(this, this._deleteQuery));",
                "+                    this.exportButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "@@ -250,2 +255,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.set(\"disabled\", !this._ownQuery || newQuery);",
                "+                    this.exportButton.set(\"disabled\", true);",
                "@@ -539,2 +545,3 @@ define([\"dojo/_base/declare\",",
                "                         _currentPage: currentPage,",
                "+                        allowTextSelection: true,",
                "                         transformer: function (data)",
                "@@ -587,2 +594,3 @@ define([\"dojo/_base/declare\",",
                "                     this._buildColumnsIfHeadersChanged(e.data);",
                "+                    this.exportButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "                 },",
                "@@ -979,2 +987,15 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "+                },",
                "+                _exportQueryResults: function () {",
                "+                    var query = this._getQuery();",
                "+                    query.format = \"csv\";",
                "+                    var id = uuid();",
                "+                    query.contentDispositionAttachmentFilename =\"query-results-\" + id + \".csv\";",
                "+                    delete query.category;",
                "+                    var url = this.management.getQueryUrl({category: this.categoryName, parent: this.parentObject}, query);",
                "+                    var iframe = document.createElement('iframe');",
                "+                    iframe.id = \"query_downloader_\" + id;",
                "+                    iframe.style.display = \"none\";",
                "+                    document.body.appendChild(iframe);",
                "+                    iframe.src = url;",
                "                 }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html b/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "index ff1b4715da..0a28eac75a 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "@@ -42,2 +42,9 @@",
                "              data-dojo-props=\"connectId:'deleteButton_${id}',position:['below']\">Delete query from preferences and close the tab</div>",
                "+        <div id=\"exportButton_${id}\"",
                "+             data-dojo-type=\"dijit/form/Button\"",
                "+             data-dojo-attach-point=\"exportButton\"",
                "+             data-dojo-props=\"iconClass: 'exportIcon ui-icon'\">Export</div>",
                "+        <div data-dojo-attach-point=\"exportButtonTooltip\"",
                "+             data-dojo-type=\"dijit/Tooltip\"",
                "+             data-dojo-props=\"connectId:'exportButton_${id}',position:['below']\">Export query results into CSV format</div>",
                "         <div data-dojo-type=\"dijit/form/Button\""
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "broker-plugins/management-http/src/main/java/resources/css/common.css",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a2920afbc2ce92345c18c1add3e6d310358d4c69"
                ],
                [
                    "no-tag",
                    "686712e83fd21c3e569e3e317bc462dcbf5ebdcd"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dbc5a03077d5d799c8ea2e008a0fabe603d8b637",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516964018,
            "hunks": 1,
            "message": "QPID-8086: [BDB HA] Standalone tool to delete orphan configuration records from a BDB JE database - for exceptional use only Cherry picked from 7.0.x 94c55a882cae9e80f8cefc190eddb53e556976dc",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java",
                "new file mode 100644",
                "index 0000000000..1bcf6062e3",
                "--- /dev/null",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java",
                "@@ -0,0 +1,392 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.store.berkeleydb;",
                "+",
                "+import java.io.File;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.UUID;",
                "+",
                "+import com.sleepycat.bind.tuple.IntegerBinding;",
                "+import com.sleepycat.bind.tuple.TupleBase;",
                "+import com.sleepycat.bind.tuple.TupleInput;",
                "+import com.sleepycat.bind.tuple.TupleOutput;",
                "+import com.sleepycat.je.Cursor;",
                "+import com.sleepycat.je.Database;",
                "+import com.sleepycat.je.DatabaseConfig;",
                "+import com.sleepycat.je.DatabaseEntry;",
                "+import com.sleepycat.je.Environment;",
                "+import com.sleepycat.je.EnvironmentConfig;",
                "+import com.sleepycat.je.LockMode;",
                "+import com.sleepycat.je.OperationStatus;",
                "+import com.sleepycat.je.Transaction;",
                "+import com.sleepycat.je.TransactionConfig;",
                "+import com.sleepycat.je.rep.ReplicatedEnvironment;",
                "+import com.sleepycat.je.rep.ReplicationConfig;",
                "+",
                "+/**",
                "+ * Standalone tool to remove one or more configuration records from a BDB store.",
                "+ * Intended for exceptional use only.",
                "+ *",
                "+ * If targeting a BDB HA store, then it is important to establish which node was",
                "+ * most recently master and perform the update there.",
                "+ */",
                "+public class OrphanConfigurationRecordPurger",
                "+{",
                "+    private static final String USAGE_STRING =",
                "+            \"usage: \" + (String.format(\"java %s\\n\"",
                "+                                       + \"       -dryRun                   # Dry run mode\\n\"",
                "+                                       + \"       -parentRootCategory <dir> # Parent root category\\n\"",
                "+                                       + \"       -storePath <dir>          # Store path\\n\"",
                "+                                       + \"       [-ha                      # HA mode\\n\"",
                "+                                       + \"        -nodeName <nodename>     # HA node name\\n\"",
                "+                                       + \"        -nodeHost <nodehost>     # HA node host\\n\"",
                "+                                       + \"        -groupName <groupName>]  # HA group name\\n\",",
                "+                                       OrphanConfigurationRecordPurger.class.getName()));",
                "+",
                "+    private static final String VERSION_DB_NAME = \"DB_VERSION\";",
                "+",
                "+    private static final String CONFIGURED_OBJECTS_DB_NAME = \"CONFIGURED_OBJECTS\";",
                "+    private static final String CONFIGURED_OBJECT_HIERARCHY_DB_NAME = \"CONFIGURED_OBJECT_HIERARCHY\";",
                "+",
                "+    private static final Set<Integer> ALLOWED_VERSIONS = new HashSet<>(Arrays.asList(8, 9));",
                "+    private static final DatabaseConfig READ_ONLY_DB_CONFIG = DatabaseConfig.DEFAULT.setAllowCreate(false).setReadOnly(true).setTransactional(true);",
                "+    private static final DatabaseConfig READ_WRITE_DB_CONFIG = READ_ONLY_DB_CONFIG.setReadOnly(false);",
                "+",
                "+    private String _parentRootCategory;",
                "+    private String _storePath;",
                "+    private boolean _dryRun;",
                "+    private boolean _ha;",
                "+    private String _nodeName;",
                "+    private String _nodeHost;",
                "+    private String _groupName;",
                "+",
                "+    public static void main(String[] argv) throws Exception",
                "+    {",
                "+        final OrphanConfigurationRecordPurger purger = new OrphanConfigurationRecordPurger();",
                "+        purger.parseArgs(argv);",
                "+        purger.purge();",
                "+    }",
                "+",
                "+    private void purge() throws Exception",
                "+    {",
                "+        EnvironmentConfig config = EnvironmentConfig.DEFAULT;",
                "+        config.setAllowCreate(false);",
                "+        config.setTransactional(true);",
                "+",
                "+        try (Environment env = createEnvironment(config))",
                "+        {",
                "+            final int version = getVersion(env, READ_ONLY_DB_CONFIG);",
                "+            if (!ALLOWED_VERSIONS.contains(version))",
                "+            {",
                "+                throw new IllegalStateException(String.format(\"Store has unexpected version. Found %d expected %s\",",
                "+                                                              version, ALLOWED_VERSIONS));",
                "+            }",
                "+",
                "+            final Transaction tx = env.beginTransaction(null, TransactionConfig.DEFAULT);",
                "+            boolean success = false;",
                "+            try",
                "+            {",
                "+                purgeOrphans(env, tx);",
                "+                success = true;",
                "+            }",
                "+            finally",
                "+            {",
                "+                if (!success)",
                "+                {",
                "+                    System.out.println(\"No config or config hierarchy records purged.\");",
                "+                    tx.abort();",
                "+                }",
                "+                else if (_dryRun)",
                "+                {",
                "+                    System.out.println(\"No config or config hierarchy records purged - -dryRun flag specified.\");",
                "+                    tx.abort();",
                "+                }",
                "+                else",
                "+                {",
                "+                    tx.commit();",
                "+                    System.out.format(\"Config records(s) and associated hierarchy records purged.\");",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private Environment createEnvironment(final EnvironmentConfig config) throws Exception",
                "+    {",
                "+        final Environment env;",
                "+        if (_ha)",
                "+        {",
                "+            final ReplicationConfig repConfig = (ReplicationConfig) ReplicationConfig.DEFAULT",
                "+                    .setNodeHostPort(_nodeHost)",
                "+                    .setGroupName(_groupName)",
                "+                    .setNodeName(_nodeName)",
                "+                    .setDesignatedPrimary(true)",
                "+                    .setElectableGroupSizeOverride(1);",
                "+",
                "+            env = new ReplicatedEnvironment(new File(_storePath), repConfig, config);",
                "+        }",
                "+        else",
                "+        {",
                "+            env = new Environment(new File(_storePath), config);",
                "+        }",
                "+        return env;",
                "+    }",
                "+",
                "+    private int getVersion(final Environment env, final DatabaseConfig dbConfig)",
                "+    {",
                "+        try (Database versionDb = env.openDatabase(null, VERSION_DB_NAME, dbConfig);",
                "+             Cursor cursor = versionDb.openCursor(null, null))",
                "+        {",
                "+            DatabaseEntry key = new DatabaseEntry();",
                "+            DatabaseEntry value = new DatabaseEntry();",
                "+",
                "+            int version = 0;",
                "+",
                "+            while (cursor.getNext(key, value, null) == OperationStatus.SUCCESS)",
                "+            {",
                "+                int ver = IntegerBinding.entryToInt(key);",
                "+                if (ver > version)",
                "+                {",
                "+                    version = ver;",
                "+                }",
                "+            }",
                "+",
                "+            return version;",
                "+        }",
                "+    }",
                "+",
                "+    private void purgeOrphans(Environment env, final Transaction tx) throws Exception",
                "+    {",
                "+        try(Database configDb = env.openDatabase(tx, CONFIGURED_OBJECTS_DB_NAME, READ_WRITE_DB_CONFIG))",
                "+        {",
                "+",
                "+            final Set<UUID> records = new HashSet<>();",
                "+",
                "+            try (Cursor configCursor = configDb.openCursor(tx, null))",
                "+            {",
                "+                final DatabaseEntry key = new DatabaseEntry();",
                "+                final DatabaseEntry value = new DatabaseEntry();",
                "+",
                "+                while (configCursor.getNext(key, value, LockMode.DEFAULT) == OperationStatus.SUCCESS)",
                "+                {",
                "+                    final UUID recId = entryToUuid(new TupleInput(key.getData()));",
                "+                    records.add(recId);",
                "+                }",
                "+            }",
                "+",
                "+            int configRecordDeleted = 0;",
                "+            int configHierarchyRecordsDeleted = 0;",
                "+",
                "+            try (Database hierarchyDb = env.openDatabase(null, CONFIGURED_OBJECT_HIERARCHY_DB_NAME,",
                "+                                                         READ_WRITE_DB_CONFIG))",
                "+            {",
                "+                boolean loopAgain;",
                "+                do",
                "+                {",
                "+                    loopAgain = false;",
                "+                    try (Cursor hierarchyCursor = hierarchyDb.openCursor(tx, null))",
                "+                    {",
                "+",
                "+                        DatabaseEntry key = new DatabaseEntry();",
                "+                        DatabaseEntry value = new DatabaseEntry();",
                "+",
                "+                        boolean parentReferencingRecordFound = false;",
                "+                        while (hierarchyCursor.getNext(key, value, LockMode.DEFAULT) == OperationStatus.SUCCESS)",
                "+                        {",
                "+                            final TupleInput keyInput = new TupleInput(key.getData());",
                "+                            final UUID childId = entryToUuid(keyInput);",
                "+                            final String parentType = keyInput.readString();",
                "+                            final UUID parentId = entryToUuid(new TupleInput(value.getData()));",
                "+",
                "+                            if (_parentRootCategory.equals(parentType))",
                "+                            {",
                "+                                parentReferencingRecordFound = true;",
                "+                            }",
                "+                            else if (!records.contains(parentId))",
                "+                            {",
                "+                                System.out.format(\"Orphan UUID : %s (has unknown parent with UUID %s of type %s)\\n\",",
                "+                                                  childId, parentId, parentType);",
                "+                                hierarchyCursor.delete();",
                "+                                configHierarchyRecordsDeleted++;",
                "+                                loopAgain = true;",
                "+",
                "+                                DatabaseEntry uuidKey = new DatabaseEntry();",
                "+                                final TupleOutput tupleOutput = uuidToKey(childId);",
                "+                                TupleBase.outputToEntry(tupleOutput, uuidKey);",
                "+",
                "+                                final OperationStatus delete = configDb.delete(tx, uuidKey);",
                "+                                if (delete == OperationStatus.SUCCESS)",
                "+                                {",
                "+                                    records.remove(childId);",
                "+                                    configRecordDeleted++;",
                "+                                }",
                "+                            }",
                "+                        }",
                "+",
                "+                        if (!parentReferencingRecordFound)",
                "+                        {",
                "+                            throw new IllegalStateException(String.format(",
                "+                                    \"No hierarchy record found with root category type (%s).\"",
                "+                                    + \" Cannot modify store.\", _parentRootCategory));",
                "+                        }",
                "+                    }",
                "+                }",
                "+                while(loopAgain);",
                "+",
                "+                System.out.format(\"Identified %d orphaned configured object record(s) \"",
                "+                                  + \"and %d hierarchy records for purging\\n\",",
                "+                                   configRecordDeleted, configHierarchyRecordsDeleted);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private TupleOutput uuidToKey(final UUID uuid)",
                "+    {",
                "+        DatabaseEntry key = new DatabaseEntry();",
                "+        TupleOutput output = new TupleOutput();",
                "+        output.writeLong(uuid.getMostSignificantBits());",
                "+        output.writeLong(uuid.getLeastSignificantBits());",
                "+        return output;",
                "+    }",
                "+",
                "+    private UUID entryToUuid(final TupleInput input)",
                "+    {",
                "+        final long mostSigBits = input.readLong();",
                "+        final long leastSigBits = input.readLong();",
                "+        return new UUID(mostSigBits, leastSigBits);",
                "+    }",
                "+",
                "+    private void parseArgs(final String[] argv)",
                "+    {",
                "+        final int argCount = argv.length;",
                "+",
                "+        if (argCount == 0)",
                "+        {",
                "+            printUsage(null);",
                "+        }",
                "+",
                "+        int argc = 0;",
                "+        while (argc < argCount)",
                "+        {",
                "+            String thisArg = argv[argc++];",
                "+            switch (thisArg)",
                "+            {",
                "+                case \"-parentRootCategory\":",
                "+                    if (argc < argCount)",
                "+                    {",
                "+                        _parentRootCategory = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-parentRootCategory requires an argument\");",
                "+                    }",
                "+                    break;",
                "+                case \"-storePath\":",
                "+                    if (argc < argCount)",
                "+                    {",
                "+                        _storePath = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-storePath requires an argument\");",
                "+                    }",
                "+                    break;",
                "+                case \"-ha\":",
                "+                    _ha = true;",
                "+                    break;",
                "+                case \"-nodeName\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _nodeName = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-nodeName requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-nodeHost\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _nodeHost = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-nodeHost requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-groupName\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _groupName = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-groupName requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-dryRun\":",
                "+                _dryRun = true;",
                "+                break;",
                "+                default:",
                "+                    printUsage(thisArg + \" is not a valid argument\");",
                "+                    break;",
                "+            }",
                "+        }",
                "+",
                "+        if (_storePath == null)",
                "+        {",
                "+            printUsage(\"-storePath is a required argument\");",
                "+        }",
                "+",
                "+        if (_parentRootCategory == null)",
                "+        {",
                "+            printUsage(\"-parentRootCategory is a required argument\");",
                "+        }",
                "+",
                "+        if (_ha)",
                "+        {",
                "+            if (_nodeName == null)",
                "+            {",
                "+                printUsage(\"-nodeName is a required argument when in ha mode\");",
                "+            }",
                "+            if (_nodeHost == null)",
                "+            {",
                "+                printUsage(\"-nodeHost is a required argument when in ha mode\");",
                "+            }",
                "+            if (_groupName == null)",
                "+            {",
                "+                printUsage(\"-groupName is a required argument when in ha mode\");",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void printUsage(String msg)",
                "+    {",
                "+        if (msg != null)",
                "+        {",
                "+            System.err.println(msg);",
                "+        }",
                "+",
                "+        System.err.println(USAGE_STRING);",
                "+        System.exit(-1);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8086": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "557fe9c1c8245ad447ae7722d2631586cb358f78"
                ],
                [
                    "no-tag",
                    "039f79b5388dd9bfd21a6b1e1bad8ac9c9065361"
                ],
                [
                    "no-tag",
                    "94c55a882cae9e80f8cefc190eddb53e556976dc"
                ]
            ],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8086",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7bc11b1aaf7a33c4ec99014f57043c5df6e32f21",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522102916,
            "hunks": 6,
            "message": "QPID-7925: [Broker-J] [WMC] Address review comments",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "index b1c17f72ae..10b3b83839 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "@@ -185,3 +185,6 @@ define([\"dojo/_base/declare\",",
                "                     }),",
                "-                      this.management.xhrErrorHandler)",
                "+                    lang.hitch(this, function(error){",
                "+                        util.xhrErrorHandler(error);",
                "+                        this.loadForm.reset();",
                "+                    }))",
                "                 .always(lang.hitch(this, function () {",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "index 364caf6e24..3330ce48dc 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "@@ -84,2 +84,6 @@ define([\"dojo/_base/declare\",",
                "                 },",
                "+                reset: function()",
                "+                {",
                "+                    this.path.reset();",
                "+                },",
                "                 _onCancel: function () {",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "index f87f61cad9..21a616c89f 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "@@ -187,3 +187,3 @@ define([\"dojo/_base/declare\",",
                "                 searchForm: null,",
                "-                extractButton: null,",
                "+                exportButton: null,",
                "                 exportButtonTooltip: null,",
                "@@ -247,3 +247,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.on(\"click\", lang.hitch(this, this._deleteQuery));",
                "-                    this.extractButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "+                    this.exportButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "@@ -255,3 +255,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.set(\"disabled\", !this._ownQuery || newQuery);",
                "-                    this.extractButton.set(\"disabled\", true);",
                "+                    this.exportButton.set(\"disabled\", true);",
                "@@ -594,3 +594,3 @@ define([\"dojo/_base/declare\",",
                "                     this._buildColumnsIfHeadersChanged(e.data);",
                "-                    this.extractButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "+                    this.exportButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "                 },"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7925": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eaf2f2332cc2c928494e5465973de829c84ee1e6"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7925",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "94e1fd648ab34a495319f1d40666c5f130b9a2bf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519661261,
            "hunks": 38,
            "message": "QPID-8103: [Broker-J] Leave minimalistic implementation of CSV format (cherry picked from commit 8d0e68fc5178e976696e96ed28d4ccdb820300f4)",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "deleted file mode 100644",
                "index 63e8d17c67..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "+++ /dev/null",
                "@@ -1,38 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import java.util.Objects;",
                "-",
                "-/**",
                "- * Utility class for input parameter validation.",
                "- *",
                "- * TODO Replace usage with {@link Objects} when we switch to Java 7.",
                "- */",
                "-final class Assertions {",
                "-",
                "-    private Assertions() {",
                "-        // can not be instantiated",
                "-    }",
                "-",
                "-    public static void notNull(final Object parameter, final String parameterName) {",
                "-        if (parameter == null) {",
                "-            throw new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");",
                "-        }",
                "-    }",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "index 97a0b6c311..5636477a72 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "@@ -1,217 +1,57 @@",
                " /*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "  *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "  *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "  */",
                "-",
                " package org.apache.qpid.server.management.plugin.csv;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.*;",
                "-import java.io.File;",
                "-import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "-import java.io.OutputStreamWriter;",
                "-import java.io.Reader;",
                "-import java.io.Serializable;",
                "-import java.io.StringWriter;",
                "-import java.nio.charset.Charset;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Path;",
                "-import java.sql.ResultSet;",
                "-import java.sql.ResultSetMetaData;",
                "-import java.sql.SQLException;",
                "-import java.util.Arrays;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "+import java.util.Collection;",
                " /**",
                "- * Specifies the format of a CSV file and parses input.",
                "- *",
                "- * <h2>Using predefined formats</h2>",
                "- *",
                "- * <p>",
                "- * You can use one of the predefined formats:",
                "- * </p>",
                "- *",
                "- * <ul>",
                "- * <li>{@link #DEFAULT}</li>",
                "- * <li>{@link #EXCEL}</li>",
                "- * <li>{@link #MYSQL}</li>",
                "- * <li>{@link #RFC4180}</li>",
                "- * <li>{@link #TDF}</li>",
                "- * </ul>",
                "- *",
                "- * <p>",
                "- * For example:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVParser parser = CSVFormat.EXCEL.parse(reader);",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * The {@link CSVParser} provides static methods to parse other input types, for example:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVParser parser = CSVParser.parse(file, StandardCharsets.US_ASCII, CSVFormat.EXCEL);",
                "- * </pre>",
                "- *",
                "- * <h2>Defining formats</h2>",
                "- *",
                "- * <p>",
                "- * You can extend a format by calling the {@code with} methods. For example:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVFormat.EXCEL.withNullString(&quot;N/A&quot;).withIgnoreSurroundingSpaces(true);",
                "- * </pre>",
                "- *",
                "- * <h2>Defining column names</h2>",
                "- *",
                "- * <p>",
                "- * To define the column names you want to use to access records, write:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;);",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and",
                "- * assumes that your CSV source does not contain a first record that also defines column names.",
                "- *",
                "- * If it does, then you are overriding this metadata with your names and you should skip the first record by calling",
                "- * {@link #withSkipHeaderRecord(boolean)} with {@code true}.",
                "- * </p>",
                "- *",
                "- * <h2>Parsing</h2>",
                "- *",
                "- * <p>",
                "- * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * Reader in = ...;",
                "- * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;).parse(in);",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.",
                "- * </p>",
                "- *",
                "- * <h2>Referencing columns safely</h2>",
                "- *",
                "- * <p>",
                "- * If your source contains a header record, you can simplify your code and safely reference columns, by using",
                "- * {@link #withHeader(String...)} with no arguments:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVFormat.EXCEL.withHeader();",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * This causes the parser to read the first record and use its values as column names.",
                "- *",
                "- * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * String value = record.get(&quot;Col1&quot;);",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * This makes your code impervious to changes in column order in the CSV file.",
                "- * </p>",
                "- *",
                "- * <h2>Notes</h2>",
                "- *",
                "- * <p>",
                "- * This class is immutable.",
                "- * </p>",
                "+ * Simplified version of CSVFormat from Apache Commons CSV",
                "  */",
                "-public final class CSVFormat implements Serializable {",
                "-",
                "-    /**",
                "-     * Predefines formats.",
                "-     *",
                "-     * @since 1.2",
                "-     */",
                "-    public enum Predefined {",
                "-",
                "-        /**",
                "-         * @see CSVFormat#DEFAULT",
                "-         */",
                "-        Default(CSVFormat.DEFAULT),",
                "+public final class CSVFormat",
                "+{",
                "+    private static final char COMMA = ',';",
                "-        /**",
                "-         * @see CSVFormat#EXCEL",
                "-         */",
                "-        Excel(CSVFormat.EXCEL),",
                "+    private static final char COMMENT = '#';",
                "-        /**",
                "-         * @see CSVFormat#INFORMIX_UNLOAD",
                "-         * @since 1.3",
                "-         */",
                "-        InformixUnload(CSVFormat.INFORMIX_UNLOAD),",
                "+    private static final char CR = '\\r';",
                "-        /**",
                "-         * @see CSVFormat#INFORMIX_UNLOAD_CSV",
                "-         * @since 1.3",
                "-         */",
                "-        InformixUnloadCsv(CSVFormat.INFORMIX_UNLOAD_CSV),",
                "+    private static final String CRLF = \"\\r\\n\";",
                "-        /**",
                "-         * @see CSVFormat#MYSQL",
                "-         */",
                "-        MySQL(CSVFormat.MYSQL),",
                "+    private static final Character DOUBLE_QUOTE_CHAR = '\"';",
                "-        /**",
                "-         * @see CSVFormat#POSTGRESQL_CSV",
                "-         * @since 1.5",
                "-         */",
                "-        PostgreSQLCsv(CSVFormat.POSTGRESQL_CSV),",
                "+    private static final String EMPTY = \"\";",
                "-        /**",
                "-         * @see CSVFormat#POSTGRESQL_CSV",
                "-         */",
                "-        PostgreSQLText(CSVFormat.POSTGRESQL_TEXT),",
                "+    private static final char LF = '\\n';",
                "-        /**",
                "-         * @see CSVFormat#RFC4180",
                "-         */",
                "-        RFC4180(CSVFormat.RFC4180),",
                "+    private static final char SP = ' ';",
                "-        /**",
                "-         * @see CSVFormat#TDF",
                "-         */",
                "-        TDF(CSVFormat.TDF);",
                "+    private final char _delimiter;",
                "-        private final CSVFormat format;",
                "+    private final Character _quoteCharacter; // null if quoting is disabled",
                "-        Predefined(final CSVFormat format) {",
                "-            this.format = format;",
                "-        }",
                "+    private final String _recordSeparator; // for outputs",
                "-        /**",
                "-         * Gets the format.",
                "-         *",
                "-         * @return the format.",
                "-         */",
                "-        public CSVFormat getFormat() {",
                "-            return format;",
                "-        }",
                "+    public CSVFormat()",
                "+    {",
                "+        this(COMMA, DOUBLE_QUOTE_CHAR, CRLF);",
                "     }",
                "@@ -219,1765 +59,200 @@ public final class CSVFormat implements Serializable {",
                "     /**",
                "-     * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter(',')</li>",
                "-     * <li>withQuote('\"')</li>",
                "-     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "-     * <li>withIgnoreEmptyLines(true)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#Default",
                "-     */",
                "-    public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,",
                "-            null, null, null, false, false, false, false, false, false);",
                "-",
                "-    /**",
                "-     * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is",
                "-     * locale dependent, it might be necessary to customize this format to accommodate to your regional settings.",
                "-     *",
                "-     * <p>",
                "-     * For example for parsing or generating a CSV file on a French system the following format will be used:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');",
                "-     * </pre>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>{@link #withDelimiter(char) withDelimiter(',')}</li>",
                "-     * <li>{@link #withQuote(char) withQuote('\"')}</li>",
                "-     * <li>{@link #withRecordSeparator(String) withRecordSeparator(\"\\r\\n\")}</li>",
                "-     * <li>{@link #withIgnoreEmptyLines(boolean) withIgnoreEmptyLines(false)}</li>",
                "-     * <li>{@link #withAllowMissingColumnNames(boolean) withAllowMissingColumnNames(true)}</li>",
                "-     * </ul>",
                "-     * <p>",
                "-     * Note: this is currently like {@link #RFC4180} plus {@link #withAllowMissingColumnNames(boolean)",
                "-     * withAllowMissingColumnNames(true)}.",
                "-     * </p>",
                "-     *",
                "-     * @see Predefined#Excel",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat EXCEL = DEFAULT",
                "-            .withIgnoreEmptyLines(false)",
                "-            .withAllowMissingColumnNames();",
                "-    // @formatter:on",
                "-",
                "-    /**",
                "-     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation.",
                "-     *",
                "-     * <p>",
                "-     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special",
                "-     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter(',')</li>",
                "-     * <li>withQuote(\"\\\"\")</li>",
                "-     * <li>withRecordSeparator('\\n')</li>",
                "-     * <li>withEscape('\\\\')</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#MySQL",
                "-     * @see <a href=",
                "-     *      \"http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm\">",
                "-     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm</a>",
                "-     * @since 1.3",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat INFORMIX_UNLOAD = DEFAULT",
                "-            .withDelimiter(PIPE)",
                "-            .withEscape(BACKSLASH)",
                "-            .withQuote(DOUBLE_QUOTE_CHAR)",
                "-            .withRecordSeparator(LF);",
                "-    // @formatter:on",
                "-",
                "-    /**",
                "-     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation (escaping is disabled.)",
                "-     *",
                "-     * <p>",
                "-     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special",
                "-     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter(',')</li>",
                "-     * <li>withQuote(\"\\\"\")</li>",
                "-     * <li>withRecordSeparator('\\n')</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#MySQL",
                "-     * @see <a href=",
                "-     *      \"http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm\">",
                "-     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm</a>",
                "-     * @since 1.3",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT",
                "-            .withDelimiter(COMMA)",
                "-            .withQuote(DOUBLE_QUOTE_CHAR)",
                "-            .withRecordSeparator(LF);",
                "-    // @formatter:on",
                "-",
                "-    /**",
                "-     * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.",
                "-     *",
                "-     * <p>",
                "-     * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special",
                "-     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter('\\t')</li>",
                "-     * <li>withQuote(null)</li>",
                "-     * <li>withRecordSeparator('\\n')</li>",
                "-     * <li>withIgnoreEmptyLines(false)</li>",
                "-     * <li>withEscape('\\\\')</li>",
                "-     * <li>withNullString(\"\\\\N\")</li>",
                "-     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#MySQL",
                "-     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "-     *      -data.html</a>",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat MYSQL = DEFAULT",
                "-            .withDelimiter(TAB)",
                "-            .withEscape(BACKSLASH)",
                "-            .withIgnoreEmptyLines(false)",
                "-            .withQuote(null)",
                "-            .withRecordSeparator(LF)",
                "-            .withNullString(\"\\\\N\")",
                "-            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "-    // @formatter:off",
                "-",
                "-    /**",
                "-     * Default PostgreSQL CSV format used by the {@code COPY} operation.",
                "-     *",
                "-     * <p>",
                "-     * This is a comma-delimited format with a LF character as the line separator. Values are double quoted and special",
                "-     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\"}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter(',')</li>",
                "-     * <li>withQuote('\"')</li>",
                "-     * <li>withRecordSeparator('\\n')</li>",
                "-     * <li>withIgnoreEmptyLines(false)</li>",
                "-     * <li>withEscape('\\\\')</li>",
                "-     * <li>withNullString(\"\")</li>",
                "-     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#MySQL",
                "-     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "-     *      -data.html</a>",
                "-     * @since 1.5",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat POSTGRESQL_CSV = DEFAULT",
                "-            .withDelimiter(COMMA)",
                "-            .withEscape(DOUBLE_QUOTE_CHAR)",
                "-            .withIgnoreEmptyLines(false)",
                "-            .withQuote(DOUBLE_QUOTE_CHAR)",
                "-            .withRecordSeparator(LF)",
                "-            .withNullString(EMPTY)",
                "-            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "-    // @formatter:off",
                "-",
                "-    /**",
                "-     * Default PostgreSQL text format used by the {@code COPY} operation.",
                "-     *",
                "-     * <p>",
                "-     * This is a tab-delimited format with a LF character as the line separator. Values are double quoted and special",
                "-     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\\\\N\"}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter('\\t')</li>",
                "-     * <li>withQuote('\"')</li>",
                "-     * <li>withRecordSeparator('\\n')</li>",
                "-     * <li>withIgnoreEmptyLines(false)</li>",
                "-     * <li>withEscape('\\\\')</li>",
                "-     * <li>withNullString(\"\\\\N\")</li>",
                "-     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#MySQL",
                "-     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load",
                "-     *      -data.html</a>",
                "-     * @since 1.5",
                "-     */",
                "-    // @formatter:off",
                "-    public static final CSVFormat POSTGRESQL_TEXT = DEFAULT",
                "-            .withDelimiter(TAB)",
                "-            .withEscape(DOUBLE_QUOTE_CHAR)",
                "-            .withIgnoreEmptyLines(false)",
                "-            .withQuote(DOUBLE_QUOTE_CHAR)",
                "-            .withRecordSeparator(LF)",
                "-            .withNullString(\"\\\\N\")",
                "-            .withQuoteMode(QuoteMode.ALL_NON_NULL);",
                "-    // @formatter:off",
                "-",
                "-    /**",
                "-     * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter(',')</li>",
                "-     * <li>withQuote('\"')</li>",
                "-     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "-     * <li>withIgnoreEmptyLines(false)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @see Predefined#RFC4180",
                "-     */",
                "-    public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
                "-",
                "-    private static final long serialVersionUID = 1L;",
                "-",
                "-    /**",
                "-     * Tab-delimited format.",
                "-     *",
                "-     * <p>",
                "-     * Settings are:",
                "-     * </p>",
                "-     * <ul>",
                "-     * <li>withDelimiter('\\t')</li>",
                "-     * <li>withQuote('\"')</li>",
                "-     * <li>withRecordSeparator(\"\\r\\n\")</li>",
                "-     * <li>withIgnoreSurroundingSpaces(true)</li>",
                "-     * </ul>",
                "+     * Creates a customized CSV format.",
                "      *",
                "-     * @see Predefined#TDF",
                "+     * @param delimiter       the char used for value separation, must not be a line break character",
                "+     * @param quoteCharacter  the Character used as value encapsulation marker, may be {@code null} to disable",
                "+     * @param recordSeparator the line separator to use for output",
                "+     * @throws IllegalArgumentException if the _delimiter is a line break character",
                "      */",
                "-    // @formatter:off",
                "-    public static final CSVFormat TDF = DEFAULT",
                "-            .withDelimiter(TAB)",
                "-            .withIgnoreSurroundingSpaces();",
                "-    // @formatter:on",
                "+    private CSVFormat(final char delimiter,",
                "+              final Character quoteCharacter,",
                "+              final String recordSeparator)",
                "+    {",
                "+        if (delimiter == LF || delimiter == CR)",
                "+        {",
                "+            throw new IllegalArgumentException(\"The _delimiter cannot be a line break\");",
                "+        }",
                "-    /**",
                "-     * Returns true if the given character is a line break character.",
                "-     *",
                "-     * @param c",
                "-     *            the character to check",
                "-     *",
                "-     * @return true if <code>c</code> is a line break character",
                "-     */",
                "-    private static boolean isLineBreak(final char c) {",
                "-        return c == LF || c == CR;",
                "-    }",
                "+        if (quoteCharacter != null && delimiter == quoteCharacter)",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The quote character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
                "+        }",
                "-    /**",
                "-     * Returns true if the given character is a line break character.",
                "-     *",
                "-     * @param c",
                "-     *            the character to check, may be null",
                "-     *",
                "-     * @return true if <code>c</code> is a line break character (and not null)",
                "-     */",
                "-    private static boolean isLineBreak(final Character c) {",
                "-        return c != null && isLineBreak(c.charValue());",
                "+        this._delimiter = delimiter;",
                "+        this._quoteCharacter = quoteCharacter;",
                "+        this._recordSeparator = recordSeparator;",
                "     }",
                "-    /**",
                "-     * Creates a new CSV format with the specified delimiter.",
                "-     *",
                "-     * <p>",
                "-     * Use this method if you want to create a CSVFormat from scratch. All fields but the delimiter will be initialized",
                "-     * with null/false.",
                "-     * </p>",
                "-     *",
                "-     * @param delimiter",
                "-     *            the char used for value separation, must not be a line break character",
                "-     * @return a new CSV format.",
                "-     * @throws IllegalArgumentException",
                "-     *             if the delimiter is a line break character",
                "-     *",
                "-     * @see #DEFAULT",
                "-     * @see #RFC4180",
                "-     * @see #MYSQL",
                "-     * @see #EXCEL",
                "-     * @see #TDF",
                "-     */",
                "-    public static CSVFormat newFormat(final char delimiter) {",
                "-        return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,",
                "-                false, false, false, false);",
                "+    public <T extends Collection<?>> void printRecord(final Appendable out, final T record) throws IOException",
                "+    {",
                "+        boolean newRecord = true;",
                "+        for (Object item : record)",
                "+        {",
                "+            print(out, item, newRecord);",
                "+            newRecord = false;",
                "+        }",
                "+        println(out);",
                "     }",
                "-    /**",
                "-     * Gets one of the predefined formats from {@link CSVFormat.Predefined}.",
                "-     *",
                "-     * @param format",
                "-     *            name",
                "-     * @return one of the predefined formats",
                "-     * @since 1.2",
                "-     */",
                "-    public static CSVFormat valueOf(final String format) {",
                "-        return CSVFormat.Predefined.valueOf(format).getFormat();",
                "+    public <C extends Collection<? extends Collection<?>>> void printRecords(final Appendable out, final C records)",
                "+            throws IOException",
                "+    {",
                "+        for (Collection<?> record : records)",
                "+        {",
                "+            printRecord(out, record);",
                "+        }",
                "     }",
                "-    private final boolean allowMissingColumnNames;",
                "-",
                "-    private final Character commentMarker; // null if commenting is disabled",
                "-    private final char delimiter;",
                "-",
                "-    private final Character escapeCharacter; // null if escaping is disabled",
                "-",
                "-    private final String[] header; // array of header column names",
                "-",
                "-    private final String[] headerComments; // array of header comment lines",
                "-",
                "-    private final boolean ignoreEmptyLines;",
                "-",
                "-    private final boolean ignoreHeaderCase; // should ignore header names case",
                "-",
                "-    private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?",
                "-",
                "-    private final String nullString; // the string to be used for null values",
                "-",
                "-    private final Character quoteCharacter; // null if quoting is disabled",
                "-",
                "-    private final QuoteMode quoteMode;",
                "-",
                "-    private final String recordSeparator; // for outputs",
                "-",
                "-    private final boolean skipHeaderRecord;",
                "-",
                "-    private final boolean trailingDelimiter;",
                "-",
                "-    private final boolean trim;",
                "-",
                "-    private final boolean autoFlush;",
                "-",
                "-    /**",
                "-     * Creates a customized CSV format.",
                "-     *",
                "-     * @param delimiter",
                "-     *            the char used for value separation, must not be a line break character",
                "-     * @param quoteChar",
                "-     *            the Character used as value encapsulation marker, may be {@code null} to disable",
                "-     * @param quoteMode",
                "-     *            the quote mode",
                "-     * @param commentStart",
                "-     *            the Character used for comment identification, may be {@code null} to disable",
                "-     * @param escape",
                "-     *            the Character used to escape special characters in values, may be {@code null} to disable",
                "-     * @param ignoreSurroundingSpaces",
                "-     *            {@code true} when whitespaces enclosing values should be ignored",
                "-     * @param ignoreEmptyLines",
                "-     *            {@code true} when the parser should skip empty lines",
                "-     * @param recordSeparator",
                "-     *            the line separator to use for output",
                "-     * @param nullString",
                "-     *            the line separator to use for output",
                "-     * @param headerComments",
                "-     *            the comments to be printed by the Printer before the actual CSV data",
                "-     * @param header",
                "-     *            the header",
                "-     * @param skipHeaderRecord",
                "-     *            TODO",
                "-     * @param allowMissingColumnNames",
                "-     *            TODO",
                "-     * @param ignoreHeaderCase",
                "-     *            TODO",
                "-     * @param trim",
                "-     *            TODO",
                "-     * @param trailingDelimiter",
                "-     *            TODO",
                "-     * @param autoFlush",
                "-     * @throws IllegalArgumentException",
                "-     *             if the delimiter is a line break character",
                "-     */",
                "-    private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,",
                "-                      final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,",
                "-                      final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,",
                "-                      final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,",
                "-                      final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,",
                "-                      final boolean trailingDelimiter, final boolean autoFlush) {",
                "-        this.delimiter = delimiter;",
                "-        this.quoteCharacter = quoteChar;",
                "-        this.quoteMode = quoteMode;",
                "-        this.commentMarker = commentStart;",
                "-        this.escapeCharacter = escape;",
                "-        this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
                "-        this.allowMissingColumnNames = allowMissingColumnNames;",
                "-        this.ignoreEmptyLines = ignoreEmptyLines;",
                "-        this.recordSeparator = recordSeparator;",
                "-        this.nullString = nullString;",
                "-        this.headerComments = toStringArray(headerComments);",
                "-        this.header = header == null ? null : header.clone();",
                "-        this.skipHeaderRecord = skipHeaderRecord;",
                "-        this.ignoreHeaderCase = ignoreHeaderCase;",
                "-        this.trailingDelimiter = trailingDelimiter;",
                "-        this.trim = trim;",
                "-        this.autoFlush = autoFlush;",
                "-        validate();",
                "+    public void println(final Appendable out) throws IOException",
                "+    {",
                "+        if (_recordSeparator != null)",
                "+        {",
                "+            out.append(_recordSeparator);",
                "+        }",
                "     }",
                "-    @Override",
                "-    public boolean equals(final Object obj) {",
                "-        if (this == obj) {",
                "-            return true;",
                "+    public void print(final Appendable out, final Object value, final boolean newRecord) throws IOException",
                "+    {",
                "+        CharSequence charSequence;",
                "+        if (value == null)",
                "+        {",
                "+            charSequence = EMPTY;",
                "         }",
                "-        if (obj == null) {",
                "-            return false;",
                "+        else",
                "+        {",
                "+            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
                "         }",
                "-        if (getClass() != obj.getClass()) {",
                "-            return false;",
                "+        this.print(out, value, charSequence, 0, charSequence.length(), newRecord);",
                "+    }",
                "+",
                "+",
                "+    public void printComments(final Appendable out,",
                "+                              final String... comments) throws IOException",
                "+    {",
                "+        for (String comment: comments)",
                "+        {",
                "+            out.append(COMMENT).append(SP).append(comment);",
                "+            println(out);",
                "         }",
                "+    }",
                "-        final CSVFormat other = (CSVFormat) obj;",
                "-        if (delimiter != other.delimiter) {",
                "-            return false;",
                "+    private void print(final Appendable out,",
                "+                       final Object object,",
                "+                       final CharSequence value,",
                "+                       final int offset,",
                "+                       final int len,",
                "+                       final boolean newRecord) throws IOException",
                "+    {",
                "+        if (!newRecord)",
                "+        {",
                "+            out.append(_delimiter);",
                "         }",
                "-        if (quoteMode != other.quoteMode) {",
                "-            return false;",
                "+        if (object == null)",
                "+        {",
                "+            out.append(value);",
                "         }",
                "-        if (quoteCharacter == null) {",
                "-            if (other.quoteCharacter != null) {",
                "-                return false;",
                "-            }",
                "-        } else if (!quoteCharacter.equals(other.quoteCharacter)) {",
                "-            return false;",
                "+        else if (_quoteCharacter != null)",
                "+        {",
                "+            printAndQuote(value, offset, len, out, newRecord);",
                "         }",
                "-        if (commentMarker == null) {",
                "-            if (other.commentMarker != null) {",
                "-                return false;",
                "-            }",
                "-        } else if (!commentMarker.equals(other.commentMarker)) {",
                "-            return false;",
                "+        else",
                "+        {",
                "+            out.append(value, offset, offset + len);",
                "         }",
                "-        if (escapeCharacter == null) {",
                "-            if (other.escapeCharacter != null) {",
                "-                return false;",
                "+    }",
                "+",
                "+    private void printAndQuote(final CharSequence value, final int offset, final int len,",
                "+                               final Appendable out, final boolean newRecord) throws IOException",
                "+    {",
                "+        boolean quote = false;",
                "+        int start = offset;",
                "+        int pos = offset;",
                "+        final int end = offset + len;",
                "+",
                "+        final char quoteChar = _quoteCharacter;",
                "+",
                "+        if (len <= 0)",
                "+        {",
                "+            // always quote an empty token that is the first",
                "+            // on the line, as it may be the only thing on the",
                "+            // line. If it were not quoted in that case,",
                "+            // an empty line has no tokens.",
                "+            if (newRecord)",
                "+            {",
                "+                quote = true;",
                "             }",
                "-        } else if (!escapeCharacter.equals(other.escapeCharacter)) {",
                "-            return false;",
                "         }",
                "-        if (nullString == null) {",
                "-            if (other.nullString != null) {",
                "-                return false;",
                "+        else",
                "+        {",
                "+            char c = value.charAt(pos);",
                "+",
                "+            if (c <= COMMENT)",
                "+            {",
                "+                // Some other chars at the start of a value caused the parser to fail, so for now",
                "+                // encapsulate if we start in anything less than '#'. We are being conservative",
                "+                // by including the default comment char too.",
                "+                quote = true;",
                "             }",
                "-        } else if (!nullString.equals(other.nullString)) {",
                "-            return false;",
                "-        }",
                "-        if (!Arrays.equals(header, other.header)) {",
                "-            return false;",
                "-        }",
                "-        if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces) {",
                "-            return false;",
                "-        }",
                "-        if (ignoreEmptyLines != other.ignoreEmptyLines) {",
                "-            return false;",
                "-        }",
                "-        if (skipHeaderRecord != other.skipHeaderRecord) {",
                "-            return false;",
                "-        }",
                "-        if (recordSeparator == null) {",
                "-            if (other.recordSeparator != null) {",
                "-                return false;",
                "+            else",
                "+            {",
                "+                while (pos < end)",
                "+                {",
                "+                    c = value.charAt(pos);",
                "+                    if (c == LF || c == CR || c == quoteChar || c == _delimiter)",
                "+                    {",
                "+                        quote = true;",
                "+                        break;",
                "+                    }",
                "+                    pos++;",
                "+                }",
                "+",
                "+                if (!quote)",
                "+                {",
                "+                    pos = end - 1;",
                "+                    c = value.charAt(pos);",
                "+                    // Some other chars at the end caused the parser to fail, so for now",
                "+                    // encapsulate if we end in anything less than ' '",
                "+                    if (c <= SP)",
                "+                    {",
                "+                        quote = true;",
                "+                    }",
                "+                }",
                "             }",
                "-        } else if (!recordSeparator.equals(other.recordSeparator)) {",
                "-            return false;",
                "         }",
                "-        return true;",
                "-    }",
                "-    /**",
                "-     * Formats the specified values.",
                "-     *",
                "-     * @param values",
                "-     *            the values to format",
                "-     * @return the formatted values",
                "-     */",
                "-    public String format(final Object... values) {",
                "-        final StringWriter out = new StringWriter();",
                "-        try (final CSVPrinter csvPrinter = new CSVPrinter(out, this)) {",
                "-            csvPrinter.printRecord(values);",
                "-            return out.toString().trim();",
                "-        } catch (final IOException e) {",
                "-            // should not happen because a StringWriter does not do IO.",
                "-            throw new IllegalStateException(e);",
                "+        if (!quote)",
                "+        {",
                "+            // no encapsulation needed - write out the original value",
                "+            out.append(value, start, end);",
                "+            return;",
                "         }",
                "-    }",
                "-",
                "-    /**",
                "-     * Specifies whether missing column names are allowed when parsing the header line.",
                "-     *",
                "-     * @return {@code true} if missing column names are allowed when parsing the header line, {@code false} to throw an",
                "-     *         {@link IllegalArgumentException}.",
                "-     */",
                "-    public boolean getAllowMissingColumnNames() {",
                "-        return allowMissingColumnNames;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns whether to flush on close.",
                "-     *",
                "-     * @return whether to flush on close.",
                "-     * @since 1.6",
                "-     */",
                "-    public boolean getAutoFlush() {",
                "-        return autoFlush;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the character marking the start of a line comment.",
                "-     *",
                "-     * @return the comment start marker, may be {@code null}",
                "-     */",
                "-    public Character getCommentMarker() {",
                "-        return commentMarker;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the character delimiting the values (typically ';', ',' or '\\t').",
                "-     *",
                "-     * @return the delimiter character",
                "-     */",
                "-    public char getDelimiter() {",
                "-        return delimiter;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the escape character.",
                "-     *",
                "-     * @return the escape character, may be {@code null}",
                "-     */",
                "-    public Character getEscapeCharacter() {",
                "-        return escapeCharacter;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a copy of the header array.",
                "-     *",
                "-     * @return a copy of the header array; {@code null} if disabled, the empty array if to be read from the file",
                "-     */",
                "-    public String[] getHeader() {",
                "-        return header != null ? header.clone() : null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a copy of the header comment array.",
                "-     *",
                "-     * @return a copy of the header comment array; {@code null} if disabled.",
                "-     */",
                "-    public String[] getHeaderComments() {",
                "-        return headerComments != null ? headerComments.clone() : null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Specifies whether empty lines between records are ignored when parsing input.",
                "-     *",
                "-     * @return {@code true} if empty lines between records are ignored, {@code false} if they are turned into empty",
                "-     *         records.",
                "-     */",
                "-    public boolean getIgnoreEmptyLines() {",
                "-        return ignoreEmptyLines;",
                "-    }",
                "-",
                "-    /**",
                "-     * Specifies whether header names will be accessed ignoring case.",
                "-     *",
                "-     * @return {@code true} if header names cases are ignored, {@code false} if they are case sensitive.",
                "-     * @since 1.3",
                "-     */",
                "-    public boolean getIgnoreHeaderCase() {",
                "-        return ignoreHeaderCase;",
                "-    }",
                "-",
                "-    /**",
                "-     * Specifies whether spaces around values are ignored when parsing input.",
                "-     *",
                "-     * @return {@code true} if spaces around values are ignored, {@code false} if they are treated as part of the value.",
                "-     */",
                "-    public boolean getIgnoreSurroundingSpaces() {",
                "-        return ignoreSurroundingSpaces;",
                "-    }",
                "-",
                "-    /**",
                "-     * Gets the String to convert to and from {@code null}.",
                "-     * <ul>",
                "-     * <li><strong>Reading:</strong> Converts strings equal to the given {@code nullString} to {@code null} when reading",
                "-     * records.</li>",
                "-     * <li><strong>Writing:</strong> Writes {@code null} as the given {@code nullString} when writing records.</li>",
                "-     * </ul>",
                "-     *",
                "-     * @return the String to convert to and from {@code null}. No substitution occurs if {@code null}",
                "-     */",
                "-    public String getNullString() {",
                "-        return nullString;",
                "-    }",
                "-    /**",
                "-     * Returns the character used to encapsulate values containing special characters.",
                "-     *",
                "-     * @return the quoteChar character, may be {@code null}",
                "-     */",
                "-    public Character getQuoteCharacter() {",
                "-        return quoteCharacter;",
                "-    }",
                "+        // we hit something that needed encapsulation",
                "+        out.append(quoteChar);",
                "-    /**",
                "-     * Returns the quote policy output fields.",
                "-     *",
                "-     * @return the quote policy",
                "-     */",
                "-    public QuoteMode getQuoteMode() {",
                "-        return quoteMode;",
                "-    }",
                "+        // Pick up where we left off: pos should be positioned on the first character that caused",
                "+        // the need for encapsulation.",
                "+        while (pos < end)",
                "+        {",
                "+            final char c = value.charAt(pos);",
                "+            if (c == quoteChar)",
                "+            {",
                "+                // write out the chunk up until this point",
                "-    /**",
                "-     * Returns the record separator delimiting output records.",
                "-     *",
                "-     * @return the record separator",
                "-     */",
                "-    public String getRecordSeparator() {",
                "-        return recordSeparator;",
                "-    }",
                "+                // add 1 to the length to write out the encapsulator also",
                "+                out.append(value, start, pos + 1);",
                "+                // put the next starting position on the encapsulator so we will",
                "+                // write it out again with the next string (effectively doubling it)",
                "+                start = pos;",
                "+            }",
                "+            pos++;",
                "+        }",
                "-    /**",
                "-     * Returns whether to skip the header record.",
                "-     *",
                "-     * @return whether to skip the header record.",
                "-     */",
                "-    public boolean getSkipHeaderRecord() {",
                "-        return skipHeaderRecord;",
                "+        // write the last segment",
                "+        out.append(value, start, pos);",
                "+        out.append(quoteChar);",
                "     }",
                "-    /**",
                "-     * Returns whether to add a trailing delimiter.",
                "-     *",
                "-     * @return whether to add a trailing delimiter.",
                "-     * @since 1.3",
                "-     */",
                "-    public boolean getTrailingDelimiter() {",
                "-        return trailingDelimiter;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns whether to trim leading and trailing blanks.",
                "-     *",
                "-     * @return whether to trim leading and trailing blanks.",
                "-     */",
                "-    public boolean getTrim() {",
                "-        return trim;",
                "-    }",
                "-",
                "-    @Override",
                "-    public int hashCode() {",
                "-        final int prime = 31;",
                "-        int result = 1;",
                "-",
                "-        result = prime * result + delimiter;",
                "-        result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
                "-        result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
                "-        result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
                "-        result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
                "-        result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
                "-        result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
                "-        result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
                "-        result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
                "-        result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
                "-        result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
                "-        result = prime * result + Arrays.hashCode(header);",
                "-        return result;",
                "-    }",
                "-",
                "-    /**",
                "-     * Specifies whether comments are supported by this format.",
                "-     *",
                "-     * Note that the comment introducer character is only recognized at the start of a line.",
                "-     *",
                "-     * @return {@code true} is comments are supported, {@code false} otherwise",
                "-     */",
                "-    public boolean isCommentMarkerSet() {",
                "-        return commentMarker != null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns whether escape are being processed.",
                "-     *",
                "-     * @return {@code true} if escapes are processed",
                "-     */",
                "-    public boolean isEscapeCharacterSet() {",
                "-        return escapeCharacter != null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns whether a nullString has been defined.",
                "-     *",
                "-     * @return {@code true} if a nullString is defined",
                "-     */",
                "-    public boolean isNullStringSet() {",
                "-        return nullString != null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns whether a quoteChar has been defined.",
                "-     *",
                "-     * @return {@code true} if a quoteChar is defined",
                "-     */",
                "-    public boolean isQuoteCharacterSet() {",
                "-        return quoteCharacter != null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Parses the specified content.",
                "-     *",
                "-     * <p>",
                "-     * See also the various static parse methods on {@link CSVParser}.",
                "-     * </p>",
                "-     *",
                "-     * @param in",
                "-     *            the input stream",
                "-     * @return a parser over a stream of {@link CSVRecord}s.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public CSVParser parse(final Reader in) throws IOException {",
                "-        return new CSVParser(in, this);",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints to the specified output.",
                "-     *",
                "-     * <p>",
                "-     * See also {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param out",
                "-     *            the output.",
                "-     * @return a printer to an output.",
                "-     * @throws IOException",
                "-     *             thrown if the optional header cannot be printed.",
                "-     */",
                "-    public CSVPrinter print(final Appendable out) throws IOException {",
                "-        return new CSVPrinter(out, this);",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints to the specified output.",
                "-     *",
                "-     * <p>",
                "-     * See also {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param out",
                "-     *            the output.",
                "-     * @param charset",
                "-     *            A charset.",
                "-     * @return a printer to an output.",
                "-     * @throws IOException",
                "-     *             thrown if the optional header cannot be printed.",
                "-     * @since 1.5",
                "-     */",
                "-    @SuppressWarnings(\"resource\")",
                "-    public CSVPrinter print(final File out, final Charset charset) throws IOException {",
                "-        // The writer will be closed when close() is called.",
                "-        return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints the {@code value} as the next value on the line to {@code out}. The value will be escaped or encapsulated",
                "-     * as needed. Useful when one wants to avoid creating CSVPrinters.",
                "-     *",
                "-     * @param value",
                "-     *            value to output.",
                "-     * @param out",
                "-     *            where to print the value.",
                "-     * @param newRecord",
                "-     *            if this a new record.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs.",
                "-     * @since 1.4",
                "-     */",
                "-    public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {",
                "-        // null values are considered empty",
                "-        // Only call CharSequence.toString() if you have to, helps GC-free use cases.",
                "-        CharSequence charSequence;",
                "-        if (value == null) {",
                "-            // https://issues.apache.org/jira/browse/CSV-203",
                "-            if (null == nullString) {",
                "-                charSequence = EMPTY;",
                "-            } else {",
                "-                if (QuoteMode.ALL == quoteMode) {",
                "-                    charSequence = quoteCharacter + nullString + quoteCharacter;",
                "-                } else {",
                "-                    charSequence = nullString;",
                "-                }",
                "-            }",
                "-        } else {",
                "-            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
                "-        }",
                "-        charSequence = getTrim() ? trim(charSequence) : charSequence;",
                "-        this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
                "-    }",
                "-",
                "-    private void print(final Object object, final CharSequence value, final int offset, final int len,",
                "-            final Appendable out, final boolean newRecord) throws IOException {",
                "-        if (!newRecord) {",
                "-            out.append(getDelimiter());",
                "-        }",
                "-        if (object == null) {",
                "-            out.append(value);",
                "-        } else if (isQuoteCharacterSet()) {",
                "-            // the original object is needed so can check for Number",
                "-            printAndQuote(object, value, offset, len, out, newRecord);",
                "-        } else if (isEscapeCharacterSet()) {",
                "-            printAndEscape(value, offset, len, out);",
                "-        } else {",
                "-            out.append(value, offset, offset + len);",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints to the specified output.",
                "-     *",
                "-     * <p>",
                "-     * See also {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param out",
                "-     *            the output.",
                "-     * @param charset",
                "-     *            A charset.",
                "-     * @return a printer to an output.",
                "-     * @throws IOException",
                "-     *             thrown if the optional header cannot be printed.",
                "-     * @since 1.5",
                "-     */",
                "-    public CSVPrinter print(final Path out, final Charset charset) throws IOException {",
                "-        return print(Files.newBufferedWriter(out, charset));",
                "-    }",
                "-",
                "-    /*",
                "-     * Note: must only be called if escaping is enabled, otherwise will generate NPE",
                "-     */",
                "-    private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out)",
                "-            throws IOException {",
                "-        int start = offset;",
                "-        int pos = offset;",
                "-        final int end = offset + len;",
                "-",
                "-        final char delim = getDelimiter();",
                "-        final char escape = getEscapeCharacter().charValue();",
                "-",
                "-        while (pos < end) {",
                "-            char c = value.charAt(pos);",
                "-            if (c == CR || c == LF || c == delim || c == escape) {",
                "-                // write out segment up until this char",
                "-                if (pos > start) {",
                "-                    out.append(value, start, pos);",
                "-                }",
                "-                if (c == LF) {",
                "-                    c = 'n';",
                "-                } else if (c == CR) {",
                "-                    c = 'r';",
                "-                }",
                "-",
                "-                out.append(escape);",
                "-                out.append(c);",
                "-",
                "-                start = pos + 1; // start on the current char after this one",
                "-            }",
                "-",
                "-            pos++;",
                "-        }",
                "-",
                "-        // write last segment",
                "-        if (pos > start) {",
                "-            out.append(value, start, pos);",
                "-        }",
                "-    }",
                "-",
                "-    /*",
                "-     * Note: must only be called if quoting is enabled, otherwise will generate NPE",
                "-     */",
                "-    // the original object is needed so can check for Number",
                "-    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,",
                "-            final Appendable out, final boolean newRecord) throws IOException {",
                "-        boolean quote = false;",
                "-        int start = offset;",
                "-        int pos = offset;",
                "-        final int end = offset + len;",
                "-",
                "-        final char delimChar = getDelimiter();",
                "-        final char quoteChar = getQuoteCharacter().charValue();",
                "-",
                "-        QuoteMode quoteModePolicy = getQuoteMode();",
                "-        if (quoteModePolicy == null) {",
                "-            quoteModePolicy = QuoteMode.MINIMAL;",
                "-        }",
                "-        switch (quoteModePolicy) {",
                "-        case ALL:",
                "-        case ALL_NON_NULL:",
                "-            quote = true;",
                "-            break;",
                "-        case NON_NUMERIC:",
                "-            quote = !(object instanceof Number);",
                "-            break;",
                "-        case NONE:",
                "-            // Use the existing escaping code",
                "-            printAndEscape(value, offset, len, out);",
                "-            return;",
                "-        case MINIMAL:",
                "-            if (len <= 0) {",
                "-                // always quote an empty token that is the first",
                "-                // on the line, as it may be the only thing on the",
                "-                // line. If it were not quoted in that case,",
                "-                // an empty line has no tokens.",
                "-                if (newRecord) {",
                "-                    quote = true;",
                "-                }",
                "-            } else {",
                "-                char c = value.charAt(pos);",
                "-",
                "-                if (c <= COMMENT) {",
                "-                    // Some other chars at the start of a value caused the parser to fail, so for now",
                "-                    // encapsulate if we start in anything less than '#'. We are being conservative",
                "-                    // by including the default comment char too.",
                "-                    quote = true;",
                "-                } else {",
                "-                    while (pos < end) {",
                "-                        c = value.charAt(pos);",
                "-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {",
                "-                            quote = true;",
                "-                            break;",
                "-                        }",
                "-                        pos++;",
                "-                    }",
                "-",
                "-                    if (!quote) {",
                "-                        pos = end - 1;",
                "-                        c = value.charAt(pos);",
                "-                        // Some other chars at the end caused the parser to fail, so for now",
                "-                        // encapsulate if we end in anything less than ' '",
                "-                        if (c <= SP) {",
                "-                            quote = true;",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            if (!quote) {",
                "-                // no encapsulation needed - write out the original value",
                "-                out.append(value, start, end);",
                "-                return;",
                "-            }",
                "-            break;",
                "-        default:",
                "-            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
                "-        }",
                "-",
                "-        if (!quote) {",
                "-            // no encapsulation needed - write out the original value",
                "-            out.append(value, start, end);",
                "-            return;",
                "-        }",
                "-",
                "-        // we hit something that needed encapsulation",
                "-        out.append(quoteChar);",
                "-",
                "-        // Pick up where we left off: pos should be positioned on the first character that caused",
                "-        // the need for encapsulation.",
                "-        while (pos < end) {",
                "-            final char c = value.charAt(pos);",
                "-            if (c == quoteChar) {",
                "-                // write out the chunk up until this point",
                "-",
                "-                // add 1 to the length to write out the encapsulator also",
                "-                out.append(value, start, pos + 1);",
                "-                // put the next starting position on the encapsulator so we will",
                "-                // write it out again with the next string (effectively doubling it)",
                "-                start = pos;",
                "-            }",
                "-            pos++;",
                "-        }",
                "-",
                "-        // write the last segment",
                "-        out.append(value, start, pos);",
                "-        out.append(quoteChar);",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints to the {@link System#out}.",
                "-     *",
                "-     * <p>",
                "-     * See also {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @return a printer to {@link System#out}.",
                "-     * @throws IOException",
                "-     *             thrown if the optional header cannot be printed.",
                "-     * @since 1.5",
                "-     */",
                "-    public CSVPrinter printer() throws IOException {",
                "-        return new CSVPrinter(System.out, this);",
                "-    }",
                "-",
                "-    /**",
                "-     * Outputs the trailing delimiter (if set) followed by the record separator (if set).",
                "-     *",
                "-     * @param out",
                "-     *            where to write",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     * @since 1.4",
                "-     */",
                "-    public void println(final Appendable out) throws IOException {",
                "-        if (getTrailingDelimiter()) {",
                "-            out.append(getDelimiter());",
                "-        }",
                "-        if (recordSeparator != null) {",
                "-            out.append(recordSeparator);",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints the given {@code values} to {@code out} as a single record of delimiter separated values followed by the",
                "-     * record separator.",
                "-     *",
                "-     * <p>",
                "-     * The values will be quoted if needed. Quotes and new-line characters will be escaped. This method adds the record",
                "-     * separator to the output after printing the record, so there is no need to call {@link #println(Appendable)}.",
                "-     * </p>",
                "-     *",
                "-     * @param out",
                "-     *            where to write.",
                "-     * @param values",
                "-     *            values to output.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs.",
                "-     * @since 1.4",
                "-     */",
                "-    public void printRecord(final Appendable out, final Object... values) throws IOException {",
                "-        for (int i = 0; i < values.length; i++) {",
                "-            print(values[i], out, i == 0);",
                "-        }",
                "-        println(out);",
                "-    }",
                "-",
                "-    @Override",
                "-    public String toString() {",
                "-        final StringBuilder sb = new StringBuilder();",
                "-        sb.append(\"Delimiter=<\").append(delimiter).append('>');",
                "-        if (isEscapeCharacterSet()) {",
                "-            sb.append(' ');",
                "-            sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
                "-        }",
                "-        if (isQuoteCharacterSet()) {",
                "-            sb.append(' ');",
                "-            sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
                "-        }",
                "-        if (isCommentMarkerSet()) {",
                "-            sb.append(' ');",
                "-            sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
                "-        }",
                "-        if (isNullStringSet()) {",
                "-            sb.append(' ');",
                "-            sb.append(\"NullString=<\").append(nullString).append('>');",
                "-        }",
                "-        if (recordSeparator != null) {",
                "-            sb.append(' ');",
                "-            sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
                "-        }",
                "-        if (getIgnoreEmptyLines()) {",
                "-            sb.append(\" EmptyLines:ignored\");",
                "-        }",
                "-        if (getIgnoreSurroundingSpaces()) {",
                "-            sb.append(\" SurroundingSpaces:ignored\");",
                "-        }",
                "-        if (getIgnoreHeaderCase()) {",
                "-            sb.append(\" IgnoreHeaderCase:ignored\");",
                "-        }",
                "-        sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
                "-        if (headerComments != null) {",
                "-            sb.append(' ');",
                "-            sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
                "-        }",
                "-        if (header != null) {",
                "-            sb.append(' ');",
                "-            sb.append(\"Header:\").append(Arrays.toString(header));",
                "-        }",
                "-        return sb.toString();",
                "-    }",
                "-",
                "-    private String[] toStringArray(final Object[] values) {",
                "-        if (values == null) {",
                "-            return null;",
                "-        }",
                "-        final String[] strings = new String[values.length];",
                "-        for (int i = 0; i < values.length; i++) {",
                "-            final Object value = values[i];",
                "-            strings[i] = value == null ? null : value.toString();",
                "-        }",
                "-        return strings;",
                "-    }",
                "-",
                "-    private CharSequence trim(final CharSequence charSequence) {",
                "-        if (charSequence instanceof String) {",
                "-            return ((String) charSequence).trim();",
                "-        }",
                "-        final int count = charSequence.length();",
                "-        int len = count;",
                "-        int pos = 0;",
                "-",
                "-        while (pos < len && charSequence.charAt(pos) <= SP) {",
                "-            pos++;",
                "-        }",
                "-        while (pos < len && charSequence.charAt(len - 1) <= SP) {",
                "-            len--;",
                "-        }",
                "-        return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
                "-    }",
                "-",
                "-    /**",
                "-     * Verifies the consistency of the parameters and throws an IllegalArgumentException if necessary.",
                "-     *",
                "-     * @throws IllegalArgumentException",
                "-     */",
                "-    private void validate() throws IllegalArgumentException {",
                "-        if (isLineBreak(delimiter)) {",
                "-            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
                "-        }",
                "-",
                "-        if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
                "-        }",
                "-",
                "-        if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
                "-        }",
                "-",
                "-        if (commentMarker != null && delimiter == commentMarker.charValue()) {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
                "-        }",
                "-",
                "-        if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
                "-        }",
                "-",
                "-        if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
                "-        }",
                "-",
                "-        if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {",
                "-            throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
                "-        }",
                "-",
                "-        // validate header",
                "-        if (header != null) {",
                "-            final Set<String> dupCheck = new HashSet<>();",
                "-            for (final String hdr : header) {",
                "-                if (!dupCheck.add(hdr)) {",
                "-                    throw new IllegalArgumentException(",
                "-                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to {@code true}",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.",
                "-     * @see #withAllowMissingColumnNames(boolean)",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withAllowMissingColumnNames() {",
                "-        return this.withAllowMissingColumnNames(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to the given value.",
                "-     *",
                "-     * @param allowMissingColumnNames",
                "-     *            the missing column names behavior, {@code true} to allow missing column names in the header line,",
                "-     *            {@code false} to cause an {@link IllegalArgumentException} to be thrown.",
                "-     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.",
                "-     */",
                "-    public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with whether to flush on close.",
                "-     *",
                "-     * @param autoFlush",
                "-     *            whether to flush on close.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified autoFlush setting.",
                "-     * @since 1.6",
                "-     */",
                "-    public CSVFormat withAutoFlush(final boolean autoFlush) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-            ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-            skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.",
                "-     *",
                "-     * Note that the comment start character is only recognized at the start of a line.",
                "-     *",
                "-     * @param commentMarker",
                "-     *            the comment start marker",
                "-     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withCommentMarker(final char commentMarker) {",
                "-        return withCommentMarker(Character.valueOf(commentMarker));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.",
                "-     *",
                "-     * Note that the comment start character is only recognized at the start of a line.",
                "-     *",
                "-     * @param commentMarker",
                "-     *            the comment start marker, use {@code null} to disable",
                "-     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withCommentMarker(final Character commentMarker) {",
                "-        if (isLineBreak(commentMarker)) {",
                "-            throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
                "-        }",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the delimiter of the format set to the specified character.",
                "-     *",
                "-     * @param delimiter",
                "-     *            the delimiter character",
                "-     * @return A new CSVFormat that is equal to this with the specified character as delimiter",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withDelimiter(final char delimiter) {",
                "-        if (isLineBreak(delimiter)) {",
                "-            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
                "-        }",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.",
                "-     *",
                "-     * @param escape",
                "-     *            the escape character",
                "-     * @return A new CSVFormat that is equal to his but with the specified character as the escape character",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withEscape(final char escape) {",
                "-        return withEscape(Character.valueOf(escape));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.",
                "-     *",
                "-     * @param escape",
                "-     *            the escape character, use {@code null} to disable",
                "-     * @return A new CSVFormat that is equal to this but with the specified character as the escape character",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withEscape(final Character escape) {",
                "-        if (isLineBreak(escape)) {",
                "-            throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
                "-        }",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,",
                "-                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,",
                "-                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} using the first record as header.",
                "-     *",
                "-     * <p>",
                "-     * Calling this method is equivalent to calling:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aFormat.withHeader().withSkipHeaderRecord();",
                "-     * </pre>",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but using the first record as header.",
                "-     * @see #withSkipHeaderRecord(boolean)",
                "-     * @see #withHeader(String...)",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withFirstRecordAsHeader() {",
                "-        return withHeader().withSkipHeaderRecord();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class.",
                "-     *",
                "-     * <p>",
                "-     * Example:",
                "-     * </p>",
                "-     * <pre>",
                "-     * public enum Header {",
                "-     *     Name, Email, Phone",
                "-     * }",
                "-     *",
                "-     * CSVFormat format = aformat.withHeader(Header.class);",
                "-     * </pre>",
                "-     * <p>",
                "-     * The header is also used by the {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param headerEnum",
                "-     *            the enum defining the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "-     *            otherwise.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified header",
                "-     * @see #withHeader(String...)",
                "-     * @see #withSkipHeaderRecord(boolean)",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum) {",
                "-        String[] header = null;",
                "-        if (headerEnum != null) {",
                "-            final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
                "-            header = new String[enumValues.length];",
                "-            for (int i = 0; i < enumValues.length; i++) {",
                "-                header[i] = enumValues[i].name();",
                "-            }",
                "-        }",
                "-        return withHeader(header);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can",
                "-     * either be parsed automatically from the input file with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader();",
                "-     * </pre>",
                "-     *",
                "-     * or specified manually with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader(resultSet);",
                "-     * </pre>",
                "-     * <p>",
                "-     * The header is also used by the {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param resultSet",
                "-     *            the resultSet for the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "-     *            otherwise.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified header",
                "-     * @throws SQLException",
                "-     *             SQLException if a database access error occurs or this method is called on a closed result set.",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withHeader(final ResultSet resultSet) throws SQLException {",
                "-        return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can",
                "-     * either be parsed automatically from the input file with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader();",
                "-     * </pre>",
                "-     *",
                "-     * or specified manually with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader(metaData);",
                "-     * </pre>",
                "-     * <p>",
                "-     * The header is also used by the {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param metaData",
                "-     *            the metaData for the header, {@code null} if disabled, empty if parsed automatically, user specified",
                "-     *            otherwise.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified header",
                "-     * @throws SQLException",
                "-     *             SQLException if a database access error occurs or this method is called on a closed result set.",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException {",
                "-        String[] labels = null;",
                "-        if (metaData != null) {",
                "-            final int columnCount = metaData.getColumnCount();",
                "-            labels = new String[columnCount];",
                "-            for (int i = 0; i < columnCount; i++) {",
                "-                labels[i] = metaData.getColumnLabel(i + 1);",
                "-            }",
                "-        }",
                "-        return withHeader(labels);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header of the format set to the given values. The header can either be",
                "-     * parsed automatically from the input file with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader();",
                "-     * </pre>",
                "-     *",
                "-     * or specified manually with:",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);",
                "-     * </pre>",
                "-     * <p>",
                "-     * The header is also used by the {@link CSVPrinter}.",
                "-     * </p>",
                "-     *",
                "-     * @param header",
                "-     *            the header, {@code null} if disabled, empty if parsed automatically, user specified otherwise.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified header",
                "-     * @see #withSkipHeaderRecord(boolean)",
                "-     */",
                "-    public CSVFormat withHeader(final String... header) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. The comments will",
                "-     * be printed first, before the headers. This setting is ignored by the parser.",
                "-     *",
                "-     * <pre>",
                "-     * CSVFormat format = aformat.withHeaderComments(&quot;Generated by Apache Commons CSV 1.1.&quot;, new Date());",
                "-     * </pre>",
                "-     *",
                "-     * @param headerComments",
                "-     *            the headerComments which will be printed by the Printer before the actual CSV data.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified header",
                "-     * @see #withSkipHeaderRecord(boolean)",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withHeaderComments(final Object... headerComments) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to {@code true}.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
                "-     * @since {@link #withIgnoreEmptyLines(boolean)}",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withIgnoreEmptyLines() {",
                "-        return this.withIgnoreEmptyLines(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to the given value.",
                "-     *",
                "-     * @param ignoreEmptyLines",
                "-     *            the empty line skipping behavior, {@code true} to ignore the empty lines between the records,",
                "-     *            {@code false} to translate empty lines to empty records.",
                "-     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.",
                "-     */",
                "-    public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the header ignore case behavior set to {@code true}.",
                "-     *",
                "-     * @return A new CSVFormat that will ignore case header name.",
                "-     * @see #withIgnoreHeaderCase(boolean)",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withIgnoreHeaderCase() {",
                "-        return this.withIgnoreHeaderCase(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with whether header names should be accessed ignoring case.",
                "-     *",
                "-     * @param ignoreHeaderCase",
                "-     *            the case mapping behavior, {@code true} to access name/values, {@code false} to leave the mapping as",
                "-     *            is.",
                "-     * @return A new CSVFormat that will ignore case header name if specified as {@code true}",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to {@code true}.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.",
                "-     * @see #withIgnoreSurroundingSpaces(boolean)",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withIgnoreSurroundingSpaces() {",
                "-        return this.withIgnoreSurroundingSpaces(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to the given value.",
                "-     *",
                "-     * @param ignoreSurroundingSpaces",
                "-     *            the trimming behavior, {@code true} to remove the surrounding spaces, {@code false} to leave the",
                "-     *            spaces as is.",
                "-     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.",
                "-     */",
                "-    public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with conversions to and from null for strings on input and output.",
                "-     * <ul>",
                "-     * <li><strong>Reading:</strong> Converts strings equal to the given {@code nullString} to {@code null} when reading",
                "-     * records.</li>",
                "-     * <li><strong>Writing:</strong> Writes {@code null} as the given {@code nullString} when writing records.</li>",
                "-     * </ul>",
                "-     *",
                "-     * @param nullString",
                "-     *            the String to convert to and from {@code null}. No substitution occurs if {@code null}",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified null conversion string.",
                "-     */",
                "-    public CSVFormat withNullString(final String nullString) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.",
                "-     *",
                "-     * @param quoteChar",
                "-     *            the quoteChar character",
                "-     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withQuote(final char quoteChar) {",
                "-        return withQuote(Character.valueOf(quoteChar));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.",
                "-     *",
                "-     * @param quoteChar",
                "-     *            the quoteChar character, use {@code null} to disable",
                "-     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the specified character is a line break",
                "-     */",
                "-    public CSVFormat withQuote(final Character quoteChar) {",
                "-        if (isLineBreak(quoteChar)) {",
                "-            throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
                "-        }",
                "-        return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,",
                "-                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,",
                "-                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the output quote policy of the format set to the specified value.",
                "-     *",
                "-     * @param quoteModePolicy",
                "-     *            the quote policy to use for output.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified quote policy",
                "-     */",
                "-    public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified character.",
                "-     *",
                "-     * <p>",
                "-     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "-     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "-     * </p>",
                "-     *",
                "-     * @param recordSeparator",
                "-     *            the record separator to use for output.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified output record separator",
                "-     */",
                "-    public CSVFormat withRecordSeparator(final char recordSeparator) {",
                "-        return withRecordSeparator(String.valueOf(recordSeparator));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified String.",
                "-     *",
                "-     * <p>",
                "-     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "-     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "-     * </p>",
                "-     *",
                "-     * @param recordSeparator",
                "-     *            the record separator to use for output.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified output record separator",
                "-     * @throws IllegalArgumentException",
                "-     *             if recordSeparator is none of CR, LF or CRLF",
                "-     */",
                "-    public CSVFormat withRecordSeparator(final String recordSeparator) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with skipping the header record set to {@code true}.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
                "-     * @see #withSkipHeaderRecord(boolean)",
                "-     * @see #withHeader(String...)",
                "-     * @since 1.1",
                "-     */",
                "-    public CSVFormat withSkipHeaderRecord() {",
                "-        return this.withSkipHeaderRecord(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with whether to skip the header record.",
                "-     *",
                "-     * @param skipHeaderRecord",
                "-     *            whether to skip the header record.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.",
                "-     * @see #withHeader(String...)",
                "-     */",
                "-    public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with the record separator of the format set to the operating system's line",
                "-     * separator string, typically CR+LF on Windows and LF on Linux.",
                "-     *",
                "-     * <p>",
                "-     * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently",
                "-     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"",
                "-     * </p>",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the operating system's line separator stringr",
                "-     * @since 1.6",
                "-     */",
                "-    public CSVFormat withSystemRecordSeparator() {",
                "-        return withRecordSeparator(System.getProperty(\"line.separator\"));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} to add a trailing delimiter.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the trailing delimiter setting.",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withTrailingDelimiter() {",
                "-        return withTrailingDelimiter(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with whether to add a trailing delimiter.",
                "-     *",
                "-     * @param trailingDelimiter",
                "-     *            whether to add a trailing delimiter.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified trailing delimiter setting.",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} to trim leading and trailing blanks.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the trim setting on.",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withTrim() {",
                "-        return withTrim(true);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a new {@code CSVFormat} with whether to trim leading and trailing blanks.",
                "-     *",
                "-     * @param trim",
                "-     *            whether to trim leading and trailing blanks.",
                "-     *",
                "-     * @return A new CSVFormat that is equal to this but with the specified trim setting.",
                "-     * @since 1.3",
                "-     */",
                "-    public CSVFormat withTrim(final boolean trim) {",
                "-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,",
                "-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,",
                "-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
                "-    }",
                " }",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "deleted file mode 100644",
                "index cebf253dd3..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "+++ /dev/null",
                "@@ -1,624 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.TOKEN;",
                "-",
                "-import java.io.Closeable;",
                "-import java.io.File;",
                "-import java.io.FileInputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.io.InputStreamReader;",
                "-import java.io.Reader;",
                "-import java.io.StringReader;",
                "-import java.net.URL;",
                "-import java.nio.charset.Charset;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Path;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Iterator;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.NoSuchElementException;",
                "-import java.util.TreeMap;",
                "-",
                "-/**",
                "- * Parses CSV files according to the specified format.",
                "- *",
                "- * Because CSV appears in many different dialects, the parser supports many formats by allowing the",
                "- * specification of a {@link CSVFormat}.",
                "- *",
                "- * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.",
                "- *",
                "- * <h2>Creating instances</h2>",
                "- * <p>",
                "- * There are several static factory methods that can be used to create instances for various types of resources:",
                "- * </p>",
                "- * <ul>",
                "- *     <li>{@link #parse(File, Charset, CSVFormat)}</li>",
                "- *     <li>{@link #parse(String, CSVFormat)}</li>",
                "- *     <li>{@link #parse(URL, Charset, CSVFormat)}</li>",
                "- * </ul>",
                "- * <p>",
                "- * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.",
                "- *",
                "- * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(Reader)} as a shortcut:",
                "- * </p>",
                "- * <pre>",
                "- * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {",
                "- *     ...",
                "- * }",
                "- * </pre>",
                "- *",
                "- * <h2>Parsing record wise</h2>",
                "- * <p>",
                "- * To parse a CSV input from a file, you write:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * File csvData = new File(&quot;/path/to/csv&quot;);",
                "- * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);",
                "- * for (CSVRecord csvRecord : parser) {",
                "- *     ...",
                "- * }",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * This will read the parse the contents of the file using the",
                "- * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.",
                "- * </p>",
                "- *",
                "- * <p>",
                "- * To parse CSV input in a format like Excel, you write:",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);",
                "- * for (CSVRecord csvRecord : parser) {",
                "- *     ...",
                "- * }",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * If the predefined formats don't match the format at hands, custom formats can be defined. More information about",
                "- * customising CSVFormats is available in {@link CSVFormat CSVFormat JavaDoc}.",
                "- * </p>",
                "- *",
                "- * <h2>Parsing into memory</h2>",
                "- * <p>",
                "- * If parsing record wise is not desired, the contents of the input can be read completely into memory.",
                "- * </p>",
                "- *",
                "- * <pre>",
                "- * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);",
                "- * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);",
                "- * List&lt;CSVRecord&gt; list = parser.getRecords();",
                "- * </pre>",
                "- *",
                "- * <p>",
                "- * There are two constraints that have to be kept in mind:",
                "- * </p>",
                "- *",
                "- * <ol>",
                "- *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from",
                "- *     the input, those records will not end up in the in memory representation of your CSV data.</li>",
                "- *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're",
                "- *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>",
                "- * </ol>",
                "- *",
                "- * <h2>Notes</h2>",
                "- * <p>",
                "- * Internal parser state is completely covered by the format and the reader-state.",
                "- * </p>",
                "- *",
                "- * @see <a href=\"package-summary.html\">package documentation for more details</a>",
                "- */",
                "-public final class CSVParser implements Iterable<CSVRecord>, Closeable {",
                "-",
                "-    /**",
                "-     * Creates a parser for the given {@link File}.",
                "-     *",
                "-     * @param file",
                "-     *            a CSV file. Must not be null.",
                "-     * @param charset",
                "-     *            A Charset",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new parser",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either file or format are null.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    @SuppressWarnings(\"resource\")",
                "-    public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {",
                "-        Assertions.notNull(file, \"file\");",
                "-        Assertions.notNull(format, \"format\");",
                "-        return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a CSV parser using the given {@link CSVFormat}.",
                "-     *",
                "-     * <p>",
                "-     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "-     * unless you close the {@code reader}.",
                "-     * </p>",
                "-     *",
                "-     * @param inputStream",
                "-     *            an InputStream containing CSV-formatted input. Must not be null.",
                "-     * @param charset",
                "-     *            a Charset.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new CSVParser configured with the given reader and format.",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "-     * @throws IOException",
                "-     *             If there is a problem reading the header or skipping the first record",
                "-     * @since 1.5",
                "-     */",
                "-    @SuppressWarnings(\"resource\")",
                "-    public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format)",
                "-            throws IOException {",
                "-        Assertions.notNull(inputStream, \"inputStream\");",
                "-        Assertions.notNull(format, \"format\");",
                "-        return parse(new InputStreamReader(inputStream, charset), format);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a parser for the given {@link Path}.",
                "-     *",
                "-     * @param path",
                "-     *            a CSV file. Must not be null.",
                "-     * @param charset",
                "-     *            A Charset",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new parser",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either file or format are null.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     * @since 1.5",
                "-     */",
                "-    public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException {",
                "-        Assertions.notNull(path, \"path\");",
                "-        Assertions.notNull(format, \"format\");",
                "-        return parse(Files.newBufferedReader(path, charset), format);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a CSV parser using the given {@link CSVFormat}",
                "-     *",
                "-     * <p>",
                "-     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "-     * unless you close the {@code reader}.",
                "-     * </p>",
                "-     *",
                "-     * @param reader",
                "-     *            a Reader containing CSV-formatted input. Must not be null.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new CSVParser configured with the given reader and format.",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "-     * @throws IOException",
                "-     *             If there is a problem reading the header or skipping the first record",
                "-     * @since 1.5",
                "-     */",
                "-    public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException {",
                "-        return new CSVParser(reader, format);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a parser for the given {@link String}.",
                "-     *",
                "-     * @param string",
                "-     *            a CSV string. Must not be null.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new parser",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either string or format are null.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public static CSVParser parse(final String string, final CSVFormat format) throws IOException {",
                "-        Assertions.notNull(string, \"string\");",
                "-        Assertions.notNull(format, \"format\");",
                "-",
                "-        return new CSVParser(new StringReader(string), format);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a parser for the given URL.",
                "-     *",
                "-     * <p>",
                "-     * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless",
                "-     * you close the {@code url}.",
                "-     * </p>",
                "-     *",
                "-     * @param url",
                "-     *            a URL. Must not be null.",
                "-     * @param charset",
                "-     *            the charset for the resource. Must not be null.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @return a new parser",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either url, charset or format are null.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException {",
                "-        Assertions.notNull(url, \"url\");",
                "-        Assertions.notNull(charset, \"charset\");",
                "-        Assertions.notNull(format, \"format\");",
                "-",
                "-        return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
                "-    }",
                "-",
                "-    // the following objects are shared to reduce garbage",
                "-",
                "-    private final CSVFormat format;",
                "-",
                "-    /** A mapping of column names to column indices */",
                "-    private final Map<String, Integer> headerMap;",
                "-",
                "-    private final Lexer lexer;",
                "-",
                "-    /** A record buffer for getRecord(). Grows as necessary and is reused. */",
                "-    private final List<String> recordList = new ArrayList<>();",
                "-",
                "-    /**",
                "-     * The next record number to assign.",
                "-     */",
                "-    private long recordNumber;",
                "-",
                "-    /**",
                "-     * Lexer offset when the parser does not start parsing at the beginning of the source. Usually used in combination",
                "-     * with {@link #recordNumber}.",
                "-     */",
                "-    private final long characterOffset;",
                "-",
                "-    private final Token reusableToken = new Token();",
                "-",
                "-    /**",
                "-     * Customized CSV parser using the given {@link CSVFormat}",
                "-     *",
                "-     * <p>",
                "-     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "-     * unless you close the {@code reader}.",
                "-     * </p>",
                "-     *",
                "-     * @param reader",
                "-     *            a Reader containing CSV-formatted input. Must not be null.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "-     * @throws IOException",
                "-     *             If there is a problem reading the header or skipping the first record",
                "-     */",
                "-    public CSVParser(final Reader reader, final CSVFormat format) throws IOException {",
                "-        this(reader, format, 0, 1);",
                "-    }",
                "-",
                "-    /**",
                "-     * Customized CSV parser using the given {@link CSVFormat}",
                "-     *",
                "-     * <p>",
                "-     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,",
                "-     * unless you close the {@code reader}.",
                "-     * </p>",
                "-     *",
                "-     * @param reader",
                "-     *            a Reader containing CSV-formatted input. Must not be null.",
                "-     * @param format",
                "-     *            the CSVFormat used for CSV parsing. Must not be null.",
                "-     * @param characterOffset",
                "-     *            Lexer offset when the parser does not start parsing at the beginning of the source.",
                "-     * @param recordNumber",
                "-     *            The next record number to assign",
                "-     * @throws IllegalArgumentException",
                "-     *             If the parameters of the format are inconsistent or if either reader or format are null.",
                "-     * @throws IOException",
                "-     *             If there is a problem reading the header or skipping the first record",
                "-     * @since 1.1",
                "-     */",
                "-    @SuppressWarnings(\"resource\")",
                "-    public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber)",
                "-            throws IOException {",
                "-        Assertions.notNull(reader, \"reader\");",
                "-        Assertions.notNull(format, \"format\");",
                "-",
                "-        this.format = format;",
                "-        this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
                "-        this.headerMap = this.initializeHeader();",
                "-        this.characterOffset = characterOffset;",
                "-        this.recordNumber = recordNumber - 1;",
                "-    }",
                "-",
                "-    private void addRecordValue(final boolean lastRecord) {",
                "-        final String input = this.reusableToken.content.toString();",
                "-        final String inputClean = this.format.getTrim() ? input.trim() : input;",
                "-        if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) {",
                "-            return;",
                "-        }",
                "-        final String nullString = this.format.getNullString();",
                "-        this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
                "-    }",
                "-",
                "-    /**",
                "-     * Closes resources.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    @Override",
                "-    public void close() throws IOException {",
                "-        if (this.lexer != null) {",
                "-            this.lexer.close();",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the current line number in the input stream.",
                "-     *",
                "-     * <p>",
                "-     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "-     * the record number.",
                "-     * </p>",
                "-     *",
                "-     * @return current line number",
                "-     */",
                "-    public long getCurrentLineNumber() {",
                "-        return this.lexer.getCurrentLineNumber();",
                "-    }",
                "-",
                "-    /**",
                "-     * Gets the first end-of-line string encountered.",
                "-     *",
                "-     * @return the first end-of-line string",
                "-     * @since 1.5",
                "-     */",
                "-    public String getFirstEndOfLine() {",
                "-        return lexer.getFirstEol();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a copy of the header map that iterates in column order.",
                "-     * <p>",
                "-     * The map keys are column names. The map values are 0-based indices.",
                "-     * </p>",
                "-     * @return a copy of the header map that iterates in column order.",
                "-     */",
                "-    public Map<String, Integer> getHeaderMap() {",
                "-        return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the current record number in the input stream.",
                "-     *",
                "-     * <p>",
                "-     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "-     * the line number.",
                "-     * </p>",
                "-     *",
                "-     * @return current record number",
                "-     */",
                "-    public long getRecordNumber() {",
                "-        return this.recordNumber;",
                "-    }",
                "-",
                "-    /**",
                "-     * Parses the CSV input according to the given format and returns the content as a list of",
                "-     * {@link CSVRecord CSVRecords}.",
                "-     *",
                "-     * <p>",
                "-     * The returned content starts at the current parse-position in the stream.",
                "-     * </p>",
                "-     *",
                "-     * @return list of {@link CSVRecord CSVRecords}, may be empty",
                "-     * @throws IOException",
                "-     *             on parse error or input read-failure",
                "-     */",
                "-    public List<CSVRecord> getRecords() throws IOException {",
                "-        CSVRecord rec;",
                "-        final List<CSVRecord> records = new ArrayList<>();",
                "-        while ((rec = this.nextRecord()) != null) {",
                "-            records.add(rec);",
                "-        }",
                "-        return records;",
                "-    }",
                "-",
                "-    /**",
                "-     * Initializes the name to index mapping if the format defines a header.",
                "-     *",
                "-     * @return null if the format has no header.",
                "-     * @throws IOException if there is a problem reading the header or skipping the first record",
                "-     */",
                "-    private Map<String, Integer> initializeHeader() throws IOException {",
                "-        Map<String, Integer> hdrMap = null;",
                "-        final String[] formatHeader = this.format.getHeader();",
                "-        if (formatHeader != null) {",
                "-            hdrMap = this.format.getIgnoreHeaderCase() ?",
                "-                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :",
                "-                    new LinkedHashMap<String, Integer>();",
                "-",
                "-            String[] headerRecord = null;",
                "-            if (formatHeader.length == 0) {",
                "-                // read the header from the first line of the file",
                "-                final CSVRecord nextRecord = this.nextRecord();",
                "-                if (nextRecord != null) {",
                "-                    headerRecord = nextRecord.values();",
                "-                }",
                "-            } else {",
                "-                if (this.format.getSkipHeaderRecord()) {",
                "-                    this.nextRecord();",
                "-                }",
                "-                headerRecord = formatHeader;",
                "-            }",
                "-",
                "-            // build the name to index mappings",
                "-            if (headerRecord != null) {",
                "-                for (int i = 0; i < headerRecord.length; i++) {",
                "-                    final String header = headerRecord[i];",
                "-                    final boolean containsHeader = hdrMap.containsKey(header);",
                "-                    final boolean emptyHeader = header == null || header.trim().isEmpty();",
                "-                    if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) {",
                "-                        throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +",
                "-                                \"\\\" in \" + Arrays.toString(headerRecord));",
                "-                    }",
                "-                    hdrMap.put(header, Integer.valueOf(i));",
                "-                }",
                "-            }",
                "-        }",
                "-        return hdrMap;",
                "-    }",
                "-",
                "-    /**",
                "-     * Gets whether this parser is closed.",
                "-     *",
                "-     * @return whether this parser is closed.",
                "-     */",
                "-    public boolean isClosed() {",
                "-        return this.lexer.isClosed();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns an iterator on the records.",
                "-     *",
                "-     * <p>",
                "-     * An {@link IOException} caught during the iteration are re-thrown as an",
                "-     * {@link IllegalStateException}.",
                "-     * </p>",
                "-     * <p>",
                "-     * If the parser is closed a call to {@link Iterator#next()} will throw a",
                "-     * {@link NoSuchElementException}.",
                "-     * </p>",
                "-     */",
                "-    @Override",
                "-    public Iterator<CSVRecord> iterator() {",
                "-        return new Iterator<CSVRecord>() {",
                "-            private CSVRecord current;",
                "-",
                "-            private CSVRecord getNextRecord() {",
                "-                try {",
                "-                    return CSVParser.this.nextRecord();",
                "-                } catch (final IOException e) {",
                "-                    throw new IllegalStateException(",
                "-                            e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);",
                "-                }",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean hasNext() {",
                "-                if (CSVParser.this.isClosed()) {",
                "-                    return false;",
                "-                }",
                "-                if (this.current == null) {",
                "-                    this.current = this.getNextRecord();",
                "-                }",
                "-",
                "-                return this.current != null;",
                "-            }",
                "-",
                "-            @Override",
                "-            public CSVRecord next() {",
                "-                if (CSVParser.this.isClosed()) {",
                "-                    throw new NoSuchElementException(\"CSVParser has been closed\");",
                "-                }",
                "-                CSVRecord next = this.current;",
                "-                this.current = null;",
                "-",
                "-                if (next == null) {",
                "-                    // hasNext() wasn't called before",
                "-                    next = this.getNextRecord();",
                "-                    if (next == null) {",
                "-                        throw new NoSuchElementException(\"No more CSV records available\");",
                "-                    }",
                "-                }",
                "-",
                "-                return next;",
                "-            }",
                "-",
                "-            @Override",
                "-            public void remove() {",
                "-                throw new UnsupportedOperationException();",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "-    /**",
                "-     * Parses the next record from the current point in the stream.",
                "-     *",
                "-     * @return the record as an array of values, or {@code null} if the end of the stream has been reached",
                "-     * @throws IOException",
                "-     *             on parse error or input read-failure",
                "-     */",
                "-    CSVRecord nextRecord() throws IOException {",
                "-        CSVRecord result = null;",
                "-        this.recordList.clear();",
                "-        StringBuilder sb = null;",
                "-        final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
                "-        do {",
                "-            this.reusableToken.reset();",
                "-            this.lexer.nextToken(this.reusableToken);",
                "-            switch (this.reusableToken.type) {",
                "-            case TOKEN:",
                "-                this.addRecordValue(false);",
                "-                break;",
                "-            case EORECORD:",
                "-                this.addRecordValue(true);",
                "-                break;",
                "-            case EOF:",
                "-                if (this.reusableToken.isReady) {",
                "-                    this.addRecordValue(true);",
                "-                }",
                "-                break;",
                "-            case INVALID:",
                "-                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
                "-            case COMMENT: // Ignored currently",
                "-                if (sb == null) { // first comment for this record",
                "-                    sb = new StringBuilder();",
                "-                } else {",
                "-                    sb.append(Constants.LF);",
                "-                }",
                "-                sb.append(this.reusableToken.content);",
                "-                this.reusableToken.type = TOKEN; // Read another token",
                "-                break;",
                "-            default:",
                "-                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
                "-            }",
                "-        } while (this.reusableToken.type == TOKEN);",
                "-",
                "-        if (!this.recordList.isEmpty()) {",
                "-            this.recordNumber++;",
                "-            final String comment = sb == null ? null : sb.toString();",
                "-            result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,",
                "-                    this.recordNumber, startCharPosition);",
                "-        }",
                "-        return result;",
                "-    }",
                "-",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "deleted file mode 100644",
                "index 494e44511d..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "+++ /dev/null",
                "@@ -1,356 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.SP;",
                "-",
                "-import java.io.Closeable;",
                "-import java.io.Flushable;",
                "-import java.io.IOException;",
                "-import java.sql.ResultSet;",
                "-import java.sql.SQLException;",
                "-",
                "-/**",
                "- * Prints values in a CSV format.",
                "- */",
                "-public final class CSVPrinter implements Flushable, Closeable {",
                "-",
                "-    /** The place that the values get written. */",
                "-    private final Appendable out;",
                "-    private final CSVFormat format;",
                "-",
                "-    /** True if we just began a new record. */",
                "-    private boolean newRecord = true;",
                "-",
                "-    /**",
                "-     * Creates a printer that will print values to the given stream following the CSVFormat.",
                "-     * <p>",
                "-     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation",
                "-     * and escaping with a different character) are not supported.",
                "-     * </p>",
                "-     *",
                "-     * @param out",
                "-     *            stream to which to print. Must not be null.",
                "-     * @param format",
                "-     *            the CSV format. Must not be null.",
                "-     * @throws IOException",
                "-     *             thrown if the optional header cannot be printed.",
                "-     * @throws IllegalArgumentException",
                "-     *             thrown if the parameters of the format are inconsistent or if either out or format are null.",
                "-     */",
                "-    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {",
                "-        Assertions.notNull(out, \"out\");",
                "-        Assertions.notNull(format, \"format\");",
                "-",
                "-        this.out = out;",
                "-        this.format = format;",
                "-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?",
                "-        // It seems a pain to have to track whether the header has already been printed or not.",
                "-        if (format.getHeaderComments() != null) {",
                "-            for (final String line : format.getHeaderComments()) {",
                "-                if (line != null) {",
                "-                    this.printComment(line);",
                "-                }",
                "-            }",
                "-        }",
                "-        if (format.getHeader() != null && !format.getSkipHeaderRecord()) {",
                "-            this.printRecord((Object[]) format.getHeader());",
                "-        }",
                "-    }",
                "-",
                "-    // ======================================================",
                "-    // printing implementation",
                "-    // ======================================================",
                "-",
                "-    @Override",
                "-    public void close() throws IOException {",
                "-        close(false);",
                "-    }",
                "-",
                "-    /**",
                "-     * Closes the underlying stream with an optional flush first.",
                "-     * @param flush whether to flush before the actual close.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     * @since 1.6",
                "-     */",
                "-    public void close(final boolean flush) throws IOException {",
                "-        if (flush || format.getAutoFlush()) {",
                "-            if (out instanceof Flushable) {",
                "-                ((Flushable) out).flush();",
                "-            }",
                "-        }",
                "-        if (out instanceof Closeable) {",
                "-            ((Closeable) out).close();",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Flushes the underlying stream.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    @Override",
                "-    public void flush() throws IOException {",
                "-        if (out instanceof Flushable) {",
                "-            ((Flushable) out).flush();",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Gets the target Appendable.",
                "-     *",
                "-     * @return the target Appendable.",
                "-     */",
                "-    public Appendable getOut() {",
                "-        return this.out;",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.",
                "-     *",
                "-     * @param value",
                "-     *            value to be output.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void print(final Object value) throws IOException {",
                "-        format.print(value, out, newRecord);",
                "-        newRecord = false;",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints a comment on a new line among the delimiter separated values.",
                "-     *",
                "-     * <p>",
                "-     * Comments will always begin on a new line and occupy a least one full line. The character specified to start",
                "-     * comments and a space will be inserted at the beginning of each new line in the comment.",
                "-     * </p>",
                "-     *",
                "-     * If comments are disabled in the current CSV format this method does nothing.",
                "-     *",
                "-     * @param comment",
                "-     *            the comment to output",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void printComment(final String comment) throws IOException {",
                "-        if (!format.isCommentMarkerSet()) {",
                "-            return;",
                "-        }",
                "-        if (!newRecord) {",
                "-            println();",
                "-        }",
                "-        out.append(format.getCommentMarker().charValue());",
                "-        out.append(SP);",
                "-        for (int i = 0; i < comment.length(); i++) {",
                "-            final char c = comment.charAt(i);",
                "-            switch (c) {",
                "-            case CR:",
                "-                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {",
                "-                    i++;",
                "-                }",
                "-                //$FALL-THROUGH$ break intentionally excluded.",
                "-            case LF:",
                "-                println();",
                "-                out.append(format.getCommentMarker().charValue());",
                "-                out.append(SP);",
                "-                break;",
                "-            default:",
                "-                out.append(c);",
                "-                break;",
                "-            }",
                "-        }",
                "-        println();",
                "-    }",
                "-",
                "-    /**",
                "-     * Outputs the record separator.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void println() throws IOException {",
                "-        format.println(out);",
                "-        newRecord = true;",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints the given values a single record of delimiter separated values followed by the record separator.",
                "-     *",
                "-     * <p>",
                "-     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record",
                "-     * separator to the output after printing the record, so there is no need to call {@link #println()}.",
                "-     * </p>",
                "-     *",
                "-     * @param values",
                "-     *            values to output.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void printRecord(final Iterable<?> values) throws IOException {",
                "-        for (final Object value : values) {",
                "-            print(value);",
                "-        }",
                "-        println();",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints the given values a single record of delimiter separated values followed by the record separator.",
                "-     *",
                "-     * <p>",
                "-     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record",
                "-     * separator to the output after printing the record, so there is no need to call {@link #println()}.",
                "-     * </p>",
                "-     *",
                "-     * @param values",
                "-     *            values to output.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void printRecord(final Object... values) throws IOException {",
                "-        format.printRecord(out, values);",
                "-        newRecord = true;",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints all the objects in the given collection handling nested collections/arrays as records.",
                "-     *",
                "-     * <p>",
                "-     * If the given collection only contains simple objects, this method will print a single record like",
                "-     * {@link #printRecord(Iterable)}. If the given collections contains nested collections/arrays those nested elements",
                "-     * will each be printed as records using {@link #printRecord(Object...)}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Given the following data structure:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * <code>",
                "-     * List&lt;String[]&gt; data = ...",
                "-     * data.add(new String[]{ \"A\", \"B\", \"C\" });",
                "-     * data.add(new String[]{ \"1\", \"2\", \"3\" });",
                "-     * data.add(new String[]{ \"A1\", \"B2\", \"C3\" });",
                "-     * </code>",
                "-     * </pre>",
                "-     *",
                "-     * <p>",
                "-     * Calling this method will print:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * <code>",
                "-     * A, B, C",
                "-     * 1, 2, 3",
                "-     * A1, B2, C3",
                "-     * </code>",
                "-     * </pre>",
                "-     *",
                "-     * @param values",
                "-     *            the values to print.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void printRecords(final Iterable<?> values) throws IOException {",
                "-        for (final Object value : values) {",
                "-            if (value instanceof Object[]) {",
                "-                this.printRecord((Object[]) value);",
                "-            } else if (value instanceof Iterable) {",
                "-                this.printRecord((Iterable<?>) value);",
                "-            } else {",
                "-                this.printRecord(value);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints all the objects in the given array handling nested collections/arrays as records.",
                "-     *",
                "-     * <p>",
                "-     * If the given array only contains simple objects, this method will print a single record like",
                "-     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested",
                "-     * elements will each be printed as records using {@link #printRecord(Object...)}.",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * Given the following data structure:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * <code>",
                "-     * String[][] data = new String[3][]",
                "-     * data[0] = String[]{ \"A\", \"B\", \"C\" };",
                "-     * data[1] = new String[]{ \"1\", \"2\", \"3\" };",
                "-     * data[2] = new String[]{ \"A1\", \"B2\", \"C3\" };",
                "-     * </code>",
                "-     * </pre>",
                "-     *",
                "-     * <p>",
                "-     * Calling this method will print:",
                "-     * </p>",
                "-     *",
                "-     * <pre>",
                "-     * <code>",
                "-     * A, B, C",
                "-     * 1, 2, 3",
                "-     * A1, B2, C3",
                "-     * </code>",
                "-     * </pre>",
                "-     *",
                "-     * @param values",
                "-     *            the values to print.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    public void printRecords(final Object... values) throws IOException {",
                "-        for (final Object value : values) {",
                "-            if (value instanceof Object[]) {",
                "-                this.printRecord((Object[]) value);",
                "-            } else if (value instanceof Iterable) {",
                "-                this.printRecord((Iterable<?>) value);",
                "-            } else {",
                "-                this.printRecord(value);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Prints all the objects in the given JDBC result set.",
                "-     *",
                "-     * @param resultSet",
                "-     *            result set the values to print.",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     * @throws SQLException",
                "-     *             if a database access error occurs",
                "-     */",
                "-    public void printRecords(final ResultSet resultSet) throws SQLException, IOException {",
                "-        final int columnCount = resultSet.getMetaData().getColumnCount();",
                "-        while (resultSet.next()) {",
                "-            for (int i = 1; i <= columnCount; i++) {",
                "-                print(resultSet.getObject(i));",
                "-            }",
                "-            println();",
                "-        }",
                "-    }",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "deleted file mode 100644",
                "index e36bfbb8af..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "+++ /dev/null",
                "@@ -1,276 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import java.io.Serializable;",
                "-import java.util.Arrays;",
                "-import java.util.HashMap;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Map.Entry;",
                "-",
                "-/**",
                "- * A CSV record parsed from a CSV file.",
                "- */",
                "-public final class CSVRecord implements Serializable, Iterable<String> {",
                "-",
                "-    private static final String[] EMPTY_STRING_ARRAY = new String[0];",
                "-",
                "-    private static final long serialVersionUID = 1L;",
                "-",
                "-    private final long characterPosition;",
                "-",
                "-    /** The accumulated comments (if any) */",
                "-    private final String comment;",
                "-",
                "-    /** The column name to index mapping. */",
                "-    private final Map<String, Integer> mapping;",
                "-",
                "-    /** The record number. */",
                "-    private final long recordNumber;",
                "-",
                "-    /** The values of the record */",
                "-    private final String[] values;",
                "-",
                "-    CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber,",
                "-            final long characterPosition) {",
                "-        this.recordNumber = recordNumber;",
                "-        this.values = values != null ? values : EMPTY_STRING_ARRAY;",
                "-        this.mapping = mapping;",
                "-        this.comment = comment;",
                "-        this.characterPosition = characterPosition;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a value by {@link Enum}.",
                "-     *",
                "-     * @param e",
                "-     *            an enum",
                "-     * @return the String at the given enum String",
                "-     */",
                "-    public String get(final Enum<?> e) {",
                "-        return get(e.toString());",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a value by index.",
                "-     *",
                "-     * @param i",
                "-     *            a column index (0-based)",
                "-     * @return the String at the given index",
                "-     */",
                "-    public String get(final int i) {",
                "-        return values[i];",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a value by name.",
                "-     *",
                "-     * @param name",
                "-     *            the name of the column to be retrieved.",
                "-     * @return the column value, maybe null depending on {@link CSVFormat#getNullString()}.",
                "-     * @throws IllegalStateException",
                "-     *             if no header mapping was provided",
                "-     * @throws IllegalArgumentException",
                "-     *             if {@code name} is not mapped or if the record is inconsistent",
                "-     * @see #isConsistent()",
                "-     * @see CSVFormat#withNullString(String)",
                "-     */",
                "-    public String get(final String name) {",
                "-        if (mapping == null) {",
                "-            throw new IllegalStateException(",
                "-                \"No header mapping was specified, the record values can't be accessed by name\");",
                "-        }",
                "-        final Integer index = mapping.get(name);",
                "-        if (index == null) {",
                "-            throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name,",
                "-                mapping.keySet()));",
                "-        }",
                "-        try {",
                "-            return values[index.intValue()];",
                "-        } catch (final ArrayIndexOutOfBoundsException e) {",
                "-            throw new IllegalArgumentException(String.format(",
                "-                \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index,",
                "-                Integer.valueOf(values.length)));",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the start position of this record as a character position in the source stream. This may or may not",
                "-     * correspond to the byte position depending on the character set.",
                "-     *",
                "-     * @return the position of this record in the source stream.",
                "-     */",
                "-    public long getCharacterPosition() {",
                "-        return characterPosition;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the comment for this record, if any.",
                "-     * Note that comments are attached to the following record.",
                "-     * If there is no following record (i.e. the comment is at EOF)",
                "-     * the comment will be ignored.",
                "-     *",
                "-     * @return the comment for this record, or null if no comment for this record is available.",
                "-     */",
                "-    public String getComment() {",
                "-        return comment;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the number of this record in the parsed CSV file.",
                "-     *",
                "-     * <p>",
                "-     * <strong>ATTENTION:</strong> If your CSV input has multi-line values, the returned number does not correspond to",
                "-     * the current line number of the parser that created this record.",
                "-     * </p>",
                "-     *",
                "-     * @return the number of this record.",
                "-     * @see CSVParser#getCurrentLineNumber()",
                "-     */",
                "-    public long getRecordNumber() {",
                "-        return recordNumber;",
                "-    }",
                "-",
                "-    /**",
                "-     * Tells whether the record size matches the header size.",
                "-     *",
                "-     * <p>",
                "-     * Returns true if the sizes for this record match and false if not. Some programs can export files that fail this",
                "-     * test but still produce parsable files.",
                "-     * </p>",
                "-     *",
                "-     * @return true of this record is valid, false if not",
                "-     */",
                "-    public boolean isConsistent() {",
                "-        return mapping == null || mapping.size() == values.length;",
                "-    }",
                "-",
                "-    /**",
                "-     * Checks whether this record has a comment, false otherwise.",
                "-     * Note that comments are attached to the following record.",
                "-     * If there is no following record (i.e. the comment is at EOF)",
                "-     * the comment will be ignored.",
                "-     *",
                "-     * @return true if this record has a comment, false otherwise",
                "-     * @since 1.3",
                "-     */",
                "-    public boolean hasComment() {",
                "-        return comment != null;",
                "-    }",
                "-",
                "-    /**",
                "-     * Checks whether a given column is mapped, i.e. its name has been defined to the parser.",
                "-     *",
                "-     * @param name",
                "-     *            the name of the column to be retrieved.",
                "-     * @return whether a given column is mapped.",
                "-     */",
                "-    public boolean isMapped(final String name) {",
                "-        return mapping != null && mapping.containsKey(name);",
                "-    }",
                "-",
                "-    /**",
                "-     * Checks whether a given columns is mapped and has a value.",
                "-     *",
                "-     * @param name",
                "-     *            the name of the column to be retrieved.",
                "-     * @return whether a given columns is mapped and has a value",
                "-     */",
                "-    public boolean isSet(final String name) {",
                "-        return isMapped(name) && mapping.get(name).intValue() < values.length;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns an iterator over the values of this record.",
                "-     *",
                "-     * @return an iterator over the values of this record.",
                "-     */",
                "-    @Override",
                "-    public Iterator<String> iterator() {",
                "-        return toList().iterator();",
                "-    }",
                "-",
                "-    /**",
                "-     * Puts all values of this record into the given Map.",
                "-     *",
                "-     * @param map",
                "-     *            The Map to populate.",
                "-     * @return the given map.",
                "-     */",
                "-    <M extends Map<String, String>> M putIn(final M map) {",
                "-        if (mapping == null) {",
                "-            return map;",
                "-        }",
                "-        for (final Entry<String, Integer> entry : mapping.entrySet()) {",
                "-            final int col = entry.getValue().intValue();",
                "-            if (col < values.length) {",
                "-                map.put(entry.getKey(), values[col]);",
                "-            }",
                "-        }",
                "-        return map;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the number of values in this record.",
                "-     *",
                "-     * @return the number of values.",
                "-     */",
                "-    public int size() {",
                "-        return values.length;",
                "-    }",
                "-",
                "-    /**",
                "-     * Converts the values to a List.",
                "-     *",
                "-     * TODO: Maybe make this public?",
                "-     *",
                "-     * @return a new List",
                "-     */",
                "-    private List<String> toList() {",
                "-        return Arrays.asList(values);",
                "-    }",
                "-",
                "-    /**",
                "-     * Copies this record into a new Map. The new map is not connect",
                "-     *",
                "-     * @return A new Map. The map is empty if the record has no headers.",
                "-     */",
                "-    public Map<String, String> toMap() {",
                "-        return putIn(new HashMap<String, String>(values.length));",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns a string representation of the contents of this record. The result is constructed by comment, mapping,",
                "-     * recordNumber and by passing the internal values array to {@link Arrays#toString(Object[])}.",
                "-     *",
                "-     * @return a String representation of this record.",
                "-     */",
                "-    @Override",
                "-    public String toString() {",
                "-        return \"CSVRecord [comment=\" + comment + \", mapping=\" + mapping +",
                "-                \", recordNumber=\" + recordNumber + \", values=\" +",
                "-                Arrays.toString(values) + \"]\";",
                "-    }",
                "-",
                "-    String[] values() {",
                "-        return values;",
                "-    }",
                "-",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "deleted file mode 100644",
                "index 37ec6aeb1e..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "+++ /dev/null",
                "@@ -1,82 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-/**",
                "- * Constants for this package.",
                "- */",
                "-final class Constants {",
                "-",
                "-    static final char BACKSLASH = '\\\\';",
                "-",
                "-    static final char BACKSPACE = '\\b';",
                "-",
                "-    static final char COMMA = ',';",
                "-",
                "-    /**",
                "-     * Starts a comment, the remainder of the line is the comment.",
                "-     */",
                "-    static final char COMMENT = '#';",
                "-",
                "-    static final char CR = '\\r';",
                "-",
                "-    /** RFC 4180 defines line breaks as CRLF */",
                "-    static final String CRLF = \"\\r\\n\";",
                "-",
                "-    static final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');",
                "-",
                "-    static final String EMPTY = \"\";",
                "-",
                "-    /** The end of stream symbol */",
                "-    static final int END_OF_STREAM = -1;",
                "-",
                "-    static final char FF = '\\f';",
                "-",
                "-    static final char LF = '\\n';",
                "-",
                "-    /**",
                "-     * Unicode line separator.",
                "-     */",
                "-    static final String LINE_SEPARATOR = \"\\u2028\";",
                "-",
                "-    /**",
                "-     * Unicode next line.",
                "-     */",
                "-    static final String NEXT_LINE = \"\\u0085\";",
                "-",
                "-    /**",
                "-     * Unicode paragraph separator.",
                "-     */",
                "-    static final String PARAGRAPH_SEPARATOR = \"\\u2029\";",
                "-",
                "-    static final char PIPE = '|';",
                "-",
                "-    /** ASCII record separator */",
                "-    static final char RS = 30;",
                "-",
                "-    static final char SP = ' ';",
                "-",
                "-    static final char TAB = '\\t';",
                "-",
                "-    /** Undefined state for the lookahead char */",
                "-    static final int UNDEFINED = -2;",
                "-",
                "-    /** ASCII unit separator */",
                "-    static final char US = 31;",
                "-",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "deleted file mode 100644",
                "index 47f8a2e1fd..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "+++ /dev/null",
                "@@ -1,191 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.END_OF_STREAM;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.UNDEFINED;",
                "-",
                "-import java.io.BufferedReader;",
                "-import java.io.IOException;",
                "-import java.io.Reader;",
                "-",
                "-/**",
                "- * A special buffered reader which supports sophisticated read access.",
                "- * <p>",
                "- * In particular the reader supports a look-ahead option, which allows you to see the next char returned by",
                "- * {@link #read()}. This reader also tracks how many characters have been read with {@link #getPosition()}.",
                "- * </p>",
                "- */",
                "-final class ExtendedBufferedReader extends BufferedReader {",
                "-",
                "-    /** The last char returned */",
                "-    private int lastChar = UNDEFINED;",
                "-",
                "-    /** The count of EOLs (CR/LF/CRLF) seen so far */",
                "-    private long eolCounter;",
                "-",
                "-    /** The position, which is number of characters read so far */",
                "-    private long position;",
                "-",
                "-    private boolean closed;",
                "-",
                "-    /**",
                "-     * Created extended buffered reader using default buffer-size",
                "-     */",
                "-    ExtendedBufferedReader(final Reader reader) {",
                "-        super(reader);",
                "-    }",
                "-",
                "-    @Override",
                "-    public int read() throws IOException {",
                "-        final int current = super.read();",
                "-        if (current == CR || current == LF && lastChar != CR) {",
                "-            eolCounter++;",
                "-        }",
                "-        lastChar = current;",
                "-        this.position++;",
                "-        return lastChar;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the last character that was read as an integer (0 to 65535). This will be the last character returned by",
                "-     * any of the read methods. This will not include a character read using the {@link #lookAhead()} method. If no",
                "-     * character has been read then this will return {@link Constants#UNDEFINED}. If the end of the stream was reached",
                "-     * on the last read then this will return {@link Constants#END_OF_STREAM}.",
                "-     *",
                "-     * @return the last character that was read",
                "-     */",
                "-    int getLastChar() {",
                "-        return lastChar;",
                "-    }",
                "-",
                "-    @Override",
                "-    public int read(final char[] buf, final int offset, final int length) throws IOException {",
                "-        if (length == 0) {",
                "-            return 0;",
                "-        }",
                "-",
                "-        final int len = super.read(buf, offset, length);",
                "-",
                "-        if (len > 0) {",
                "-",
                "-            for (int i = offset; i < offset + len; i++) {",
                "-                final char ch = buf[i];",
                "-                if (ch == LF) {",
                "-                    if (CR != (i > 0 ? buf[i - 1] : lastChar)) {",
                "-                        eolCounter++;",
                "-                    }",
                "-                } else if (ch == CR) {",
                "-                    eolCounter++;",
                "-                }",
                "-            }",
                "-",
                "-            lastChar = buf[offset + len - 1];",
                "-",
                "-        } else if (len == -1) {",
                "-            lastChar = END_OF_STREAM;",
                "-        }",
                "-",
                "-        position += len;",
                "-        return len;",
                "-    }",
                "-",
                "-    /**",
                "-     * Calls {@link BufferedReader#readLine()} which drops the line terminator(s). This method should only be called",
                "-     * when processing a comment, otherwise information can be lost.",
                "-     * <p>",
                "-     * Increments {@link #eolCounter}",
                "-     * <p>",
                "-     * Sets {@link #lastChar} to {@link Constants#END_OF_STREAM} at EOF, otherwise to LF",
                "-     *",
                "-     * @return the line that was read, or null if reached EOF.",
                "-     */",
                "-    @Override",
                "-    public String readLine() throws IOException {",
                "-        final String line = super.readLine();",
                "-",
                "-        if (line != null) {",
                "-            lastChar = LF; // needed for detecting start of line",
                "-            eolCounter++;",
                "-        } else {",
                "-            lastChar = END_OF_STREAM;",
                "-        }",
                "-",
                "-        return line;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the next character in the current reader without consuming it. So the next call to {@link #read()} will",
                "-     * still return this value. Does not affect line number or last character.",
                "-     *",
                "-     * @return the next character",
                "-     *",
                "-     * @throws IOException",
                "-     *             if there is an error in reading",
                "-     */",
                "-    int lookAhead() throws IOException {",
                "-        super.mark(1);",
                "-        final int c = super.read();",
                "-        super.reset();",
                "-",
                "-        return c;",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the current line number",
                "-     *",
                "-     * @return the current line number",
                "-     */",
                "-    long getCurrentLineNumber() {",
                "-        // Check if we are at EOL or EOF or just starting",
                "-        if (lastChar == CR || lastChar == LF || lastChar == UNDEFINED || lastChar == END_OF_STREAM) {",
                "-            return eolCounter; // counter is accurate",
                "-        }",
                "-        return eolCounter + 1; // Allow for counter being incremented only at EOL",
                "-    }",
                "-",
                "-    /**",
                "-     * Gets the character position in the reader.",
                "-     *",
                "-     * @return the current position in the reader (counting characters, not bytes since this is a Reader)",
                "-     */",
                "-    long getPosition() {",
                "-        return this.position;",
                "-    }",
                "-",
                "-    public boolean isClosed() {",
                "-        return closed;",
                "-    }",
                "-",
                "-    /**",
                "-     * Closes the stream.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    @Override",
                "-    public void close() throws IOException {",
                "-        // Set ivars before calling super close() in case close() throws an IOException.",
                "-        closed = true;",
                "-        lastChar = END_OF_STREAM;",
                "-        super.close();",
                "-    }",
                "-",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "deleted file mode 100644",
                "index 95a3ff00c3..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "+++ /dev/null",
                "@@ -1,461 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.BACKSPACE;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.CR;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.END_OF_STREAM;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.FF;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.LF;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.TAB;",
                "-import static org.apache.qpid.server.management.plugin.csv.Constants.UNDEFINED;",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.COMMENT;",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.EOF;",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.EORECORD;",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.INVALID;",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.TOKEN;",
                "-",
                "-import java.io.Closeable;",
                "-import java.io.IOException;",
                "-",
                "-/**",
                "- * Lexical analyzer.",
                "- */",
                "-final class Lexer implements Closeable {",
                "-",
                "-    private static final String CR_STRING = Character.toString(Constants.CR);",
                "-    private static final String LF_STRING = Character.toString(Constants.LF);",
                "-",
                "-    /**",
                "-     * Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it",
                "-     * won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two",
                "-     * chars (using surrogates) and thus there should never be a collision with a real text char.",
                "-     */",
                "-    private static final char DISABLED = '\\ufffe';",
                "-",
                "-    private final char delimiter;",
                "-    private final char escape;",
                "-    private final char quoteChar;",
                "-    private final char commentStart;",
                "-",
                "-    private final boolean ignoreSurroundingSpaces;",
                "-    private final boolean ignoreEmptyLines;",
                "-",
                "-    /** The input stream */",
                "-    private final ExtendedBufferedReader reader;",
                "-    private String firstEol;",
                "-",
                "-    String getFirstEol(){",
                "-        return firstEol;",
                "-    }",
                "-",
                "-    Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {",
                "-        this.reader = reader;",
                "-        this.delimiter = format.getDelimiter();",
                "-        this.escape = mapNullToDisabled(format.getEscapeCharacter());",
                "-        this.quoteChar = mapNullToDisabled(format.getQuoteCharacter());",
                "-        this.commentStart = mapNullToDisabled(format.getCommentMarker());",
                "-        this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();",
                "-        this.ignoreEmptyLines = format.getIgnoreEmptyLines();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the next token.",
                "-     * <p>",
                "-     * A token corresponds to a term, a record change or an end-of-file indicator.",
                "-     * </p>",
                "-     *",
                "-     * @param token",
                "-     *            an existing Token object to reuse. The caller is responsible to initialize the Token.",
                "-     * @return the next token found",
                "-     * @throws IOException",
                "-     *             on stream access error",
                "-     */",
                "-    Token nextToken(final Token token) throws IOException {",
                "-",
                "-        // get the last read char (required for empty line detection)",
                "-        int lastChar = reader.getLastChar();",
                "-",
                "-        // read the next char and set eol",
                "-        int c = reader.read();",
                "-        /*",
                "-         * Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF",
                "-         * - they are equivalent here.",
                "-         */",
                "-        boolean eol = readEndOfLine(c);",
                "-",
                "-        // empty line detection: eol AND (last char was EOL or beginning)",
                "-        if (ignoreEmptyLines) {",
                "-            while (eol && isStartOfLine(lastChar)) {",
                "-                // go on char ahead ...",
                "-                lastChar = c;",
                "-                c = reader.read();",
                "-                eol = readEndOfLine(c);",
                "-                // reached end of file without any content (empty line at the end)",
                "-                if (isEndOfFile(c)) {",
                "-                    token.type = EOF;",
                "-                    // don't set token.isReady here because no content",
                "-                    return token;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        // did we reach eof during the last iteration already ? EOF",
                "-        if (isEndOfFile(lastChar) || !isDelimiter(lastChar) && isEndOfFile(c)) {",
                "-            token.type = EOF;",
                "-            // don't set token.isReady here because no content",
                "-            return token;",
                "-        }",
                "-",
                "-        if (isStartOfLine(lastChar) && isCommentStart(c)) {",
                "-            final String line = reader.readLine();",
                "-            if (line == null) {",
                "-                token.type = EOF;",
                "-                // don't set token.isReady here because no content",
                "-                return token;",
                "-            }",
                "-            final String comment = line.trim();",
                "-            token.content.append(comment);",
                "-            token.type = COMMENT;",
                "-            return token;",
                "-        }",
                "-",
                "-        // important: make sure a new char gets consumed in each iteration",
                "-        while (token.type == INVALID) {",
                "-            // ignore whitespaces at beginning of a token",
                "-            if (ignoreSurroundingSpaces) {",
                "-                while (isWhitespace(c) && !eol) {",
                "-                    c = reader.read();",
                "-                    eol = readEndOfLine(c);",
                "-                }",
                "-            }",
                "-",
                "-            // ok, start of token reached: encapsulated, or token",
                "-            if (isDelimiter(c)) {",
                "-                // empty token return TOKEN(\"\")",
                "-                token.type = TOKEN;",
                "-            } else if (eol) {",
                "-                // empty token return EORECORD(\"\")",
                "-                // noop: token.content.append(\"\");",
                "-                token.type = EORECORD;",
                "-            } else if (isQuoteChar(c)) {",
                "-                // consume encapsulated token",
                "-                parseEncapsulatedToken(token);",
                "-            } else if (isEndOfFile(c)) {",
                "-                // end of file return EOF()",
                "-                // noop: token.content.append(\"\");",
                "-                token.type = EOF;",
                "-                token.isReady = true; // there is data at EOF",
                "-            } else {",
                "-                // next token must be a simple token",
                "-                // add removed blanks when not ignoring whitespace chars...",
                "-                parseSimpleToken(token, c);",
                "-            }",
                "-        }",
                "-        return token;",
                "-    }",
                "-",
                "-    /**",
                "-     * Parses a simple token.",
                "-     * <p/>",
                "-     * Simple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped",
                "-     * delimiters (as \\, or \\;). The token is finished when one of the following conditions become true:",
                "-     * <ul>",
                "-     * <li>end of line has been reached (EORECORD)</li>",
                "-     * <li>end of stream has been reached (EOF)</li>",
                "-     * <li>an unescaped delimiter has been reached (TOKEN)</li>",
                "-     * </ul>",
                "-     *",
                "-     * @param token",
                "-     *            the current token",
                "-     * @param ch",
                "-     *            the current character",
                "-     * @return the filled token",
                "-     * @throws IOException",
                "-     *             on stream access error",
                "-     */",
                "-    private Token parseSimpleToken(final Token token, int ch) throws IOException {",
                "-        // Faster to use while(true)+break than while(token.type == INVALID)",
                "-        while (true) {",
                "-            if (readEndOfLine(ch)) {",
                "-                token.type = EORECORD;",
                "-                break;",
                "-            } else if (isEndOfFile(ch)) {",
                "-                token.type = EOF;",
                "-                token.isReady = true; // There is data at EOF",
                "-                break;",
                "-            } else if (isDelimiter(ch)) {",
                "-                token.type = TOKEN;",
                "-                break;",
                "-            } else if (isEscape(ch)) {",
                "-                final int unescaped = readEscape();",
                "-                if (unescaped == END_OF_STREAM) { // unexpected char after escape",
                "-                    token.content.append((char) ch).append((char) reader.getLastChar());",
                "-                } else {",
                "-                    token.content.append((char) unescaped);",
                "-                }",
                "-                ch = reader.read(); // continue",
                "-            } else {",
                "-                token.content.append((char) ch);",
                "-                ch = reader.read(); // continue",
                "-            }",
                "-        }",
                "-",
                "-        if (ignoreSurroundingSpaces) {",
                "-            trimTrailingSpaces(token.content);",
                "-        }",
                "-",
                "-        return token;",
                "-    }",
                "-",
                "-    /**",
                "-     * Parses an encapsulated token.",
                "-     * <p/>",
                "-     * Encapsulated tokens are surrounded by the given encapsulating-string. The encapsulator itself might be included",
                "-     * in the token using a doubling syntax (as \"\", '') or using escaping (as in \\\", \\'). Whitespaces before and after",
                "-     * an encapsulated token are ignored. The token is finished when one of the following conditions become true:",
                "-     * <ul>",
                "-     * <li>an unescaped encapsulator has been reached, and is followed by optional whitespace then:</li>",
                "-     * <ul>",
                "-     * <li>delimiter (TOKEN)</li>",
                "-     * <li>end of line (EORECORD)</li>",
                "-     * </ul>",
                "-     * <li>end of stream has been reached (EOF)</li> </ul>",
                "-     *",
                "-     * @param token",
                "-     *            the current token",
                "-     * @return a valid token object",
                "-     * @throws IOException",
                "-     *             on invalid state: EOF before closing encapsulator or invalid character before delimiter or EOL",
                "-     */",
                "-    private Token parseEncapsulatedToken(final Token token) throws IOException {",
                "-        // save current line number in case needed for IOE",
                "-        final long startLineNumber = getCurrentLineNumber();",
                "-        int c;",
                "-        while (true) {",
                "-            c = reader.read();",
                "-",
                "-            if (isEscape(c)) {",
                "-                final int unescaped = readEscape();",
                "-                if (unescaped == END_OF_STREAM) { // unexpected char after escape",
                "-                    token.content.append((char) c).append((char) reader.getLastChar());",
                "-                } else {",
                "-                    token.content.append((char) unescaped);",
                "-                }",
                "-            } else if (isQuoteChar(c)) {",
                "-                if (isQuoteChar(reader.lookAhead())) {",
                "-                    // double or escaped encapsulator -> add single encapsulator to token",
                "-                    c = reader.read();",
                "-                    token.content.append((char) c);",
                "-                } else {",
                "-                    // token finish mark (encapsulator) reached: ignore whitespace till delimiter",
                "-                    while (true) {",
                "-                        c = reader.read();",
                "-                        if (isDelimiter(c)) {",
                "-                            token.type = TOKEN;",
                "-                            return token;",
                "-                        } else if (isEndOfFile(c)) {",
                "-                            token.type = EOF;",
                "-                            token.isReady = true; // There is data at EOF",
                "-                            return token;",
                "-                        } else if (readEndOfLine(c)) {",
                "-                            token.type = EORECORD;",
                "-                            return token;",
                "-                        } else if (!isWhitespace(c)) {",
                "-                            // error invalid char between token and next delimiter",
                "-                            throw new IOException(\"(line \" + getCurrentLineNumber() +",
                "-                                    \") invalid char between encapsulated token and delimiter\");",
                "-                        }",
                "-                    }",
                "-                }",
                "-            } else if (isEndOfFile(c)) {",
                "-                // error condition (end of file before end of token)",
                "-                throw new IOException(\"(startline \" + startLineNumber +",
                "-                        \") EOF reached before encapsulated token finished\");",
                "-            } else {",
                "-                // consume character",
                "-                token.content.append((char) c);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    private char mapNullToDisabled(final Character c) {",
                "-        return c == null ? DISABLED : c.charValue();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the current line number",
                "-     *",
                "-     * @return the current line number",
                "-     */",
                "-    long getCurrentLineNumber() {",
                "-        return reader.getCurrentLineNumber();",
                "-    }",
                "-",
                "-    /**",
                "-     * Returns the current character position",
                "-     *",
                "-     * @return the current character position",
                "-     */",
                "-    long getCharacterPosition() {",
                "-        return reader.getPosition();",
                "-    }",
                "-",
                "-    // TODO escape handling needs more work",
                "-    /**",
                "-     * Handle an escape sequence.",
                "-     * The current character must be the escape character.",
                "-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}",
                "-     * on the input stream.",
                "-     *",
                "-     * @return the unescaped character (as an int) or {@link Constants#END_OF_STREAM} if char following the escape is",
                "-     *      invalid.",
                "-     * @throws IOException if there is a problem reading the stream or the end of stream is detected:",
                "-     *      the escape character is not allowed at end of stream",
                "-     */",
                "-    int readEscape() throws IOException {",
                "-        // the escape char has just been read (normally a backslash)",
                "-        final int ch = reader.read();",
                "-        switch (ch) {",
                "-        case 'r':",
                "-            return CR;",
                "-        case 'n':",
                "-            return LF;",
                "-        case 't':",
                "-            return TAB;",
                "-        case 'b':",
                "-            return BACKSPACE;",
                "-        case 'f':",
                "-            return FF;",
                "-        case CR:",
                "-        case LF:",
                "-        case FF: // TODO is this correct?",
                "-        case TAB: // TODO is this correct? Do tabs need to be escaped?",
                "-        case BACKSPACE: // TODO is this correct?",
                "-            return ch;",
                "-        case END_OF_STREAM:",
                "-            throw new IOException(\"EOF whilst processing escape sequence\");",
                "-        default:",
                "-            // Now check for meta-characters",
                "-            if (isMetaChar(ch)) {",
                "-                return ch;",
                "-            }",
                "-            // indicate unexpected char - available from in.getLastChar()",
                "-            return END_OF_STREAM;",
                "-        }",
                "-    }",
                "-",
                "-    void trimTrailingSpaces(final StringBuilder buffer) {",
                "-        int length = buffer.length();",
                "-        while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {",
                "-            length = length - 1;",
                "-        }",
                "-        if (length != buffer.length()) {",
                "-            buffer.setLength(length);",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Greedily accepts \\n, \\r and \\r\\n This checker consumes silently the second control-character...",
                "-     *",
                "-     * @return true if the given or next character is a line-terminator",
                "-     */",
                "-    boolean readEndOfLine(int ch) throws IOException {",
                "-        // check if we have \\r\\n...",
                "-        if (ch == CR && reader.lookAhead() == LF) {",
                "-            // note: does not change ch outside of this method!",
                "-            ch = reader.read();",
                "-            // Save the EOL state",
                "-            if (firstEol == null) {",
                "-                this.firstEol = Constants.CRLF;",
                "-            }",
                "-        }",
                "-        // save EOL state here.",
                "-        if (firstEol == null) {",
                "-            if (ch == LF) {",
                "-                this.firstEol = LF_STRING;",
                "-            } else if (ch == CR) {",
                "-                this.firstEol = CR_STRING;",
                "-            }",
                "-        }",
                "-",
                "-        return ch == LF || ch == CR;",
                "-    }",
                "-",
                "-    boolean isClosed() {",
                "-        return reader.isClosed();",
                "-    }",
                "-",
                "-    /**",
                "-     * @return true if the given char is a whitespace character",
                "-     */",
                "-    boolean isWhitespace(final int ch) {",
                "-        return !isDelimiter(ch) && Character.isWhitespace((char) ch);",
                "-    }",
                "-",
                "-    /**",
                "-     * Checks if the current character represents the start of a line: a CR, LF or is at the start of the file.",
                "-     *",
                "-     * @param ch the character to check",
                "-     * @return true if the character is at the start of a line.",
                "-     */",
                "-    boolean isStartOfLine(final int ch) {",
                "-        return ch == LF || ch == CR || ch == UNDEFINED;",
                "-    }",
                "-",
                "-    /**",
                "-     * @return true if the given character indicates end of file",
                "-     */",
                "-    boolean isEndOfFile(final int ch) {",
                "-        return ch == END_OF_STREAM;",
                "-    }",
                "-",
                "-    boolean isDelimiter(final int ch) {",
                "-        return ch == delimiter;",
                "-    }",
                "-",
                "-    boolean isEscape(final int ch) {",
                "-        return ch == escape;",
                "-    }",
                "-",
                "-    boolean isQuoteChar(final int ch) {",
                "-        return ch == quoteChar;",
                "-    }",
                "-",
                "-    boolean isCommentStart(final int ch) {",
                "-        return ch == commentStart;",
                "-    }",
                "-",
                "-    private boolean isMetaChar(final int ch) {",
                "-        return ch == delimiter ||",
                "-               ch == escape ||",
                "-               ch == quoteChar ||",
                "-               ch == commentStart;",
                "-    }",
                "-",
                "-    /**",
                "-     * Closes resources.",
                "-     *",
                "-     * @throws IOException",
                "-     *             If an I/O error occurs",
                "-     */",
                "-    @Override",
                "-    public void close() throws IOException {",
                "-        reader.close();",
                "-    }",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "deleted file mode 100644",
                "index 25c6b314a3..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "+++ /dev/null",
                "@@ -1,50 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-/**",
                "- * Defines quoting behavior when printing.",
                "- */",
                "-public enum QuoteMode {",
                "-",
                "-    /**",
                "-     * Quotes all fields.",
                "-     */",
                "-    ALL,",
                "-",
                "-    /**",
                "-     * Quotes all non-null fields.",
                "-     */",
                "-    ALL_NON_NULL,",
                "-",
                "-    /**",
                "-     * Quotes fields which contain special characters such as a the field delimiter, quote character or any of the",
                "-     * characters in the line separator string.",
                "-     */",
                "-    MINIMAL,",
                "-",
                "-    /**",
                "-     * Quotes all non-numeric fields.",
                "-     */",
                "-    NON_NUMERIC,",
                "-",
                "-    /**",
                "-     * Never quotes fields. When the delimiter occurs in data, the printer prefixes it with the escape character. If the",
                "-     * escape character is not set, format validation throws an exception.",
                "-     */",
                "-    NONE",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java",
                "deleted file mode 100644",
                "index c3c94e10d7..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java",
                "+++ /dev/null",
                "@@ -1,73 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.qpid.server.management.plugin.csv;",
                "-",
                "-import static org.apache.qpid.server.management.plugin.csv.Token.Type.INVALID;",
                "-",
                "-/**",
                "- * Internal token representation.",
                "- * <p/>",
                "- * It is used as contract between the lexer and the parser.",
                "- */",
                "-final class Token {",
                "-",
                "-    /** length of the initial token (content-)buffer */",
                "-    private static final int INITIAL_TOKEN_LENGTH = 50;",
                "-",
                "-    enum Type {",
                "-        /** Token has no valid content, i.e. is in its initialized state. */",
                "-        INVALID,",
                "-",
                "-        /** Token with content, at beginning or in the middle of a line. */",
                "-        TOKEN,",
                "-",
                "-        /** Token (which can have content) when the end of file is reached. */",
                "-        EOF,",
                "-",
                "-        /** Token with content when the end of a line is reached. */",
                "-        EORECORD,",
                "-",
                "-        /** Token is a comment line. */",
                "-        COMMENT",
                "-    }",
                "-",
                "-    /** Token type */",
                "-    Token.Type type = INVALID;",
                "-",
                "-    /** The content buffer. */",
                "-    final StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);",
                "-",
                "-    /** Token ready flag: indicates a valid token with content (ready for the parser). */",
                "-    boolean isReady;",
                "-",
                "-    void reset() {",
                "-        content.setLength(0);",
                "-        type = INVALID;",
                "-        isReady = false;",
                "-    }",
                "-",
                "-    /**",
                "-     * Eases IDE debugging.",
                "-     *",
                "-     * @return a string helpful for debugging.",
                "-     */",
                "-    @Override",
                "-    public String toString() {",
                "-        return type.name() + \" [\" + content.toString() + \"]\";",
                "-    }",
                "-}"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Assertions.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVFormat.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVParser.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVPrinter.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/CSVRecord.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Constants.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/ExtendedBufferedReader.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Lexer.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/QuoteMode.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/csv/Token.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8d0e68fc5178e976696e96ed28d4ccdb820300f4"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ab64198e4af7bc01d90756c117d0139151adb4b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520535443,
            "hunks": 1,
            "message": "QPID-8121: [Broker-J] Include the VirtualHostPrincipal in the Subject used to execute the StatisticsReportingTask for virtualhosts",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "index 3e64deb8b9..966f9ac2aa 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java",
                "@@ -1167,3 +1167,3 @@ public abstract class AbstractVirtualHost<X extends AbstractVirtualHost<X>> exte",
                "                                                                                                                    getSystemTaskSubject(",
                "-                                                                                                                           \"Statistics\")),",
                "+                                                                                                                           \"Statistics\", _principal)),",
                "                                                                                        report,"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8121": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec5b75bf814330c74f2ce276a5678f34424901b2"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8121",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f877df1065c3dff7f20a30c22322938c054ade92",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517505491,
            "hunks": 2,
            "message": "QPID-8067: [Broker-J] Improve exception if x-qpid-replay-period does not contain a parseable long",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java b/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "index fc965dbafe..28031d33ec 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java",
                "@@ -36,6 +36,16 @@ public final class ArrivalTimeFilterFactory implements MessageFilterFactory",
                "         {",
                "-            throw new IllegalArgumentException(\"Cannot create a filter from these arguments: \" + arguments);",
                "+            throw new IllegalArgumentException(String.format(\"Cannot create a %s filter from these arguments: %s\",",
                "+                                                             getType(), arguments));",
                "+        }",
                "+        final String periodArgument = arguments.get(0);",
                "+        try",
                "+        {",
                "+            long periodInSeconds = Long.parseLong(periodArgument);",
                "+            return new ArrivalTimeFilter(System.currentTimeMillis() - (periodInSeconds * 1000L), periodInSeconds == 0L);",
                "+        }",
                "+        catch (NumberFormatException e)",
                "+        {",
                "+            throw new IllegalArgumentException(String.format(\"Cannot create a %s filter.  Period value '%s' does not contain a parsable long value\",",
                "+                                                             getType(), periodArgument), e);",
                "         }",
                "-        long periodInSeconds = Long.parseLong(arguments.get(0));",
                "-        return new ArrivalTimeFilter(System.currentTimeMillis() - periodInSeconds * 1000L, periodInSeconds == 0L);",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/filter/ArrivalTimeFilterFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8067": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0d6b0897d8691f16434dce171977ea69c86ffaac"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87e9c7f41f88b24ae90988e20db19a3fb4ec2924",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517504803,
            "hunks": 13,
            "message": "QPID-8092: [Broker-J][Web Management Console] Fix label for max history of file loggers",
            "diff": [
                "diff --git a/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/brokerlogger/file/show.js b/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/brokerlogger/file/show.js",
                "index 42f7996bf3..5fa5332a44 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/brokerlogger/file/show.js",
                "+++ b/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/brokerlogger/file/show.js",
                "@@ -21,2 +21,3 @@",
                " define([\"qpid/common/util\",",
                "+        \"dojo/query\",",
                "         \"dojo/text!logger/file/show.html\",",
                "@@ -24,3 +25,3 @@ define([\"qpid/common/util\",",
                "         \"qpid/management/logger/FileBrowser\",",
                "-        \"dojo/domReady!\"], function (util, template, TypeTabExtension, FileBrowser)",
                "+        \"dojo/domReady!\"], function (util, query, template, TypeTabExtension, FileBrowser)",
                " {",
                "@@ -41,2 +42,3 @@ define([\"qpid/common/util\",",
                "             params.data);",
                "+        this.containerNode = params.containerNode;",
                "     }",
                "@@ -49,3 +51,7 @@ define([\"qpid/common/util\",",
                "         this.fileBrowser.update(restData);",
                "-    }",
                "+        query(\".maxHistoryLabel\", this.containerNode)[0].style.display =",
                "+            restData && restData['rollDaily'] ? 'none' : '';",
                "+        query(\".maxHistoryRollDailyLabel\", this.containerNode)[0].style.display =",
                "+            restData && restData['rollDaily'] ? '' : 'none';",
                "+    };",
                "diff --git a/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/virtualhostlogger/file/show.js b/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/virtualhostlogger/file/show.js",
                "index c069858ec1..7c8265be3c 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/virtualhostlogger/file/show.js",
                "+++ b/broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/virtualhostlogger/file/show.js",
                "@@ -21,2 +21,3 @@",
                " define([\"qpid/common/util\",",
                "+        \"dojo/query\",",
                "         \"dojo/text!logger/file/show.html\",",
                "@@ -24,3 +25,3 @@ define([\"qpid/common/util\",",
                "         \"qpid/management/logger/FileBrowser\",",
                "-        \"dojo/domReady!\"], function (util, template, TypeTabExtension, FileBrowser)",
                "+        \"dojo/domReady!\"], function (util, query, template, TypeTabExtension, FileBrowser)",
                " {",
                "@@ -41,2 +42,3 @@ define([\"qpid/common/util\",",
                "             params.data);",
                "+        this.containerNode = params.containerNode;",
                "     }",
                "@@ -49,3 +51,7 @@ define([\"qpid/common/util\",",
                "         this.fileBrowser.update(restData);",
                "-    }",
                "+        query(\".maxHistoryLabel\", this.containerNode)[0].style.display =",
                "+            restData && restData['rollDaily'] ? 'none' : '';",
                "+        query(\".maxHistoryRollDailyLabel\", this.containerNode)[0].style.display =",
                "+            restData && restData['rollDaily'] ? '' : 'none';",
                "+    };",
                "diff --git a/broker-plugins/logging-logback/src/main/java/resources/logger/file/add.html b/broker-plugins/logging-logback/src/main/java/resources/logger/file/add.html",
                "index a9eeee9820..17beea24e1 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/resources/logger/file/add.html",
                "+++ b/broker-plugins/logging-logback/src/main/java/resources/logger/file/add.html",
                "@@ -51,3 +51,3 @@",
                "                 <div class=\"formLabel-controlCell tableContainer-valueCell\">",
                "-                    <input type=\"checkbox\" id=\"addLogger.rollDaily\"",
                "+                    <div type=\"checkbox\" id=\"addLogger.rollDaily\"",
                "                            data-dojo-type=\"dijit/form/CheckBox\"",
                "@@ -55,3 +55,10 @@",
                "                                   name: 'rollDaily',",
                "-                                  required: false\"/>",
                "+                                  required: false\">",
                "+                    <script type=\"dojo/on\" data-dojo-event=\"change\" data-dojo-args=\"checked\">",
                "+require([\"dijit/registry\", \"dojo/dom\"], function(registry, dom){",
                "+dom.byId(\"addLogger.maxHistory.label\").style.display = checked ? 'none' : '';",
                "+dom.byId(\"addLogger.maxHistory.label.roll_daily\").style.display = checked ? '' : 'none';",
                "+        });",
                "+    </script>",
                "+                    </div>",
                "                     <div data-dojo-type=\"dijit/Tooltip\"",
                "@@ -91,3 +98,5 @@",
                "             <div class=\"clear\">",
                "-                <div class=\"formLabel-labelCell tableContainer-labelCell\">Maximum Number of Rolled Files:</div>",
                "+                <div class=\"formLabel-labelCell tableContainer-labelCell\">",
                "+                    <span id=\"addLogger.maxHistory.label\">Maximum Number of Rolled Files</span>",
                "+                    <span id=\"addLogger.maxHistory.label.roll_daily\" style=\"display: none\">Maximum Number of Days to Keep Rolled Files</span>:</div>",
                "                 <div class=\"formLabel-controlCell tableContainer-valueCell\">",
                "@@ -97,5 +106,5 @@",
                "                               name: 'maxHistory',",
                "-                              placeHolder: 'maximum number of files to keep in history',",
                "-                              promptMessage: 'Enter the maximum number of files to keep in history',",
                "-                              title: 'Enter the maximum number of files to keep in history'\"/>",
                "+                              placeHolder: 'maximum history limit for rolled files',",
                "+                              promptMessage: 'Enter maximum history limit for rolled files',",
                "+                              title: 'Enter maximum history limit for rolled files'\"/>",
                "                 </div>",
                "diff --git a/broker-plugins/logging-logback/src/main/java/resources/logger/file/show.html b/broker-plugins/logging-logback/src/main/java/resources/logger/file/show.html",
                "index 49d8a87231..1aac46a4ec 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/resources/logger/file/show.html",
                "+++ b/broker-plugins/logging-logback/src/main/java/resources/logger/file/show.html",
                "@@ -42,3 +42,4 @@",
                "                 <div class=\"clear\">",
                "-                    <div class=\"formLabel-labelCell\">Maximum Number of Rolled Files:</div>",
                "+                    <div class=\"formLabel-labelCell\"><span class=\"maxHistoryLabel\">Maximum Number of Rolled Files</span>",
                "+                        <span class=\"maxHistoryRollDailyLabel\" style=\"display: none\">Maximum Number of Days to Keep Rolled Files</span>:</div>",
                "                     <div class=\"maxHistory formValue-valueCell\"></div>"
            ],
            "changed_files": [
                "broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/brokerlogger/file/show.js",
                "broker-plugins/logging-logback/src/main/java/resources/js/qpid/management/logger/virtualhostlogger/file/show.js",
                "broker-plugins/logging-logback/src/main/java/resources/logger/file/add.html",
                "broker-plugins/logging-logback/src/main/java/resources/logger/file/show.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8092": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f561984e7d8ec7e96c7682350bb2c483287d65b8"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8092",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e0e110af37a5fba00f4bd15e6d6511df40211639",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517386599,
            "hunks": 1,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Add REST model create tests",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index b33e5790bb..01a19cf2e5 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -51,3 +51,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "-    private String getVirtualHost()",
                "+    protected String getVirtualHost()",
                "     {"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "06e577da412fcb0444116f1a436bdcd6e50ebc68"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c6d452a9724b81419fcb810b6839627a2deab448",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522965012,
            "hunks": 3,
            "message": "NO-JIRA: [Unit Tests] [Windows] Turn on protocol tests",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index 64d57dfca0..ef2aaa5621 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -4,2 +4,6 @@ clone_depth: 30",
                "+branches:",
                "+  only:",
                "+    - master",
                "+",
                " environment:",
                "@@ -23,3 +27,4 @@ build_script:",
                " test_script:",
                "-  - mvn clean test -B -Dskip.systests=true --fail-at-end",
                "+  - mvn test -B -Dskip.systests=true --fail-at-end",
                "+  - mvn verify -pl systests/protocol-tests-amqp-1-0,systests/protocol-tests-amqp-0-8,systests/protocol-tests-amqp-0-10 -Dskip.unittests=true -B --fail-at-end",
                "diff --git a/pom.xml b/pom.xml",
                "index afebdb3a74..2e8d62328d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -929,2 +929,3 @@",
                "             <exclude>.travis.yml</exclude>",
                "+            <exclude>appveyor.yml</exclude>",
                "           </excludes>"
            ],
            "changed_files": [
                "appveyor.yml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2a378704c0b26878711726f5b71a599717c554c3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518996282,
            "hunks": 22,
            "message": "QPID-8102: [Broker-J] Add UI for virtual host node auto-creation policies",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/css/common.css b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "index cac53f6df0..e4b2511ed3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "+++ b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "@@ -791 +791,22 @@ td.advancedSearchField, col.autoWidth {",
                " }",
                "+",
                "+#editVirtualHostDialog",
                "+{",
                "+    width: 550px;",
                "+}",
                "+.nodeAutoCreationPolicies .field-selected { width: 2em; }",
                "+.nodeAutoCreationPolicies .field-nodeType { width: 10%; }",
                "+.nodeAutoCreationPolicies .field-pattern { width: 10%; }",
                "+.nodeAutoCreationPolicies .field-createdOnPublish { width: 10%; }",
                "+.nodeAutoCreationPolicies .field-createdOnConsume { width: 10% }",
                "+.nodeAutoCreationPolicies .field-attributes { width: auto }",
                "+",
                "+.nodeAutoCreationPolicyAttributes { height: 100px;}",
                "+.keyValuePair {",
                "+    overflow: auto;",
                "+}",
                "+",
                "+.sequentialPanel",
                "+{",
                "+    margin-bottom: 0.2em !important;",
                "+}",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/editVirtualHost.html b/broker-plugins/management-http/src/main/java/resources/editVirtualHost.html",
                "index 74ca0475ba..042e05b52e 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/editVirtualHost.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/editVirtualHost.html",
                "@@ -109,6 +109,2 @@",
                "                       </div>",
                "-                  </fieldset>",
                "-              </div>",
                "-              <div class=\"clear\"></div>",
                "-",
                "                 <div class=\"clear\">",
                "@@ -137,2 +133,18 @@",
                "                 </div>",
                "+                  </fieldset>",
                "+              </div>",
                "+              <div class=\"clear\"></div>",
                "+              <div data-dojo-type=\"dijit/TitlePane\"",
                "+                 data-dojo-props=\"title: 'Node Auto-Creation Policies',  open: false\"",
                "+                 class=\"sequentialPanel\">",
                "+                <div id=\"editVirtualHost.policies\"></div>",
                "+                <button data-dojo-type=\"dijit.form.Button\"",
                "+                        data-dojo-props=\"promptMessage:'Add Node Auto Creation Policy'\"",
                "+                        id=\"editVirtualHost.addAutoCreationPolicy\">+",
                "+                </button>",
                "+                <button data-dojo-type=\"dijit.form.Button\"",
                "+                        data-dojo-props=\"promptMessage:'Delete Node Auto Creation Policy', disabled: true\"",
                "+                        id=\"editVirtualHost.deleteAutoCreationPolicy\">-",
                "+                </button>",
                "+              </div>",
                "               <div class=\"clear\"></div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "index dd7a2fcd53..6df7870643 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "@@ -35,4 +35,14 @@ define([\"dojo/parser\",",
                "         \"qpid/common/StatisticsWidget\",",
                "-        \"dgrid/Selector\",",
                "         \"dojo/text!showVirtualHost.html\",",
                "+        \"dijit/Dialog\",",
                "+        \"dgrid/Grid\",",
                "+        \"dgrid/Selector\",",
                "+        \"dgrid/Keyboard\",",
                "+        \"dgrid/Selection\",",
                "+        \"dgrid/extensions/Pagination\",",
                "+        \"dgrid/extensions/ColumnResizer\",",
                "+        \"dgrid/extensions/DijitRegistry\",",
                "+        \"dstore/Memory\",",
                "+        \"dstore/Trackable\",",
                "+        \"dojo/aspect\",",
                "         \"dojo/domReady!\"],",
                "@@ -53,4 +63,14 @@ define([\"dojo/parser\",",
                "               StatisticsWidget,",
                "+              template,",
                "+              Dialog,",
                "+              Grid,",
                "               Selector,",
                "-              template)",
                "+              Keyboard,",
                "+              Selection,",
                "+              Pagination,",
                "+              ColumnResizer,",
                "+              DijitRegistry,",
                "+              MemoryStore,",
                "+              TrackableStore,",
                "+              aspect)",
                "     {",
                "@@ -449,2 +469,68 @@ define([\"dojo/parser\",",
                "             this.virtualHostLoggersGrid.startup();",
                "+",
                "+            var Store = MemoryStore.createSubclass(TrackableStore);",
                "+            this._policyStore = new Store({",
                "+                data: [],",
                "+                idProperty: \"pattern\"",
                "+            });",
                "+",
                "+            var PolicyGrid = declare([Grid, Keyboard, Selection, Pagination, ColumnResizer, DijitRegistry]);",
                "+            this._policyGrid = new PolicyGrid({",
                "+                rowsPerPage: 10,",
                "+                selectionMode: 'none',",
                "+                deselectOnRefresh: false,",
                "+                allowSelectAll: true,",
                "+                cellNavigation: true,",
                "+                className: 'dgrid-autoheight',",
                "+                pageSizeOptions: [10, 20, 30, 40, 50, 100],",
                "+                adjustLastColumn: true,",
                "+                collection: this._policyStore,",
                "+                highlightRow: function (){},",
                "+                columns: [",
                "+                    {",
                "+                        label: 'Node Type',",
                "+                        field: \"nodeType\"",
                "+                    }, {",
                "+                        label: \"Pattern\",",
                "+                        field: \"pattern\"",
                "+                    }, {",
                "+                        label: \"Create On Publish\",",
                "+                        field: \"createdOnPublish\",",
                "+                        selector: 'checkbox'",
                "+                    }, {",
                "+                        label: \"Create On Consume\",",
                "+                        field: \"createdOnConsume\",",
                "+                        selector: 'checkbox'",
                "+                    }, {",
                "+                        label: \"Attributes\",",
                "+                        field: \"attributes\",",
                "+                        sortable: false,",
                "+                        formatter: function(value, object)",
                "+                        {",
                "+                            var markup = \"\";",
                "+                            if (value)",
                "+                            {",
                "+                                markup = \"<div class='keyValuePair'>\";",
                "+                                for(var key in value)",
                "+                                {",
                "+                                    markup += \"<div>\" + key + \"=\" + value[key] + \"</div>\";",
                "+                                }",
                "+                                markup += \"</div>\"",
                "+                            }",
                "+                            return markup;",
                "+                        }",
                "+                    }",
                "+                ]",
                "+            }, findNode(\"policies\"));",
                "+",
                "+            this._policyGrid.startup();",
                "+            this._nodeAutoCreationPolicies = registry.byNode(findNode(\"nodeAutoCreationPolicies\"));",
                "+",
                "+            aspect.after(this._nodeAutoCreationPolicies, \"toggle\", lang.hitch(this, function() {",
                "+                if (this._nodeAutoCreationPolicies.get(\"open\") === true)",
                "+                {",
                "+                    this._policyGrid.refresh();",
                "+                }",
                "+            }));",
                "+",
                "         }",
                "@@ -551,2 +637,3 @@ define([\"dojo/parser\",",
                "             }",
                "+            this._updateDStore(this._policyStore, this.vhostData.nodeAutoCreationPolicies || [], \"pattern\");",
                "         };",
                "@@ -619,2 +706,25 @@ define([\"dojo/parser\",",
                "+        Updater.prototype._updateDStore = function (dstore, data, idProperty) {",
                "+            if (data)",
                "+            {",
                "+                for (var i = 0; i < data.length; i++)",
                "+                {",
                "+                    dstore.put(data[i]);",
                "+                }",
                "+            }",
                "+            dstore.fetch()",
                "+                .forEach(function (object) {",
                "+                    if (data)",
                "+                    {",
                "+                        for (var i = 0; i < data.length; i++)",
                "+                        {",
                "+                            if (data[i][idProperty] === object[idProperty])",
                "+                            {",
                "+                                return;",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                    dstore.remove(object[idProperty]);",
                "+                });",
                "+        };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "index 93c358d7d3..f59ae31c1e 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "@@ -22,2 +22,3 @@ define([\"dojox/html/entities\",",
                "         \"dojo/_base/array\",",
                "+        \"dojo/_base/declare\",",
                "         \"dojo/_base/event\",",
                "@@ -35,2 +36,12 @@ define([\"dojox/html/entities\",",
                "         \"dojo/text!editVirtualHost.html\",",
                "+        \"dgrid/OnDemandGrid\",",
                "+        \"dgrid/Selector\",",
                "+        \"dgrid/Keyboard\",",
                "+        \"dgrid/Selection\",",
                "+        \"dgrid/extensions/Pagination\",",
                "+        \"dgrid/extensions/ColumnResizer\",",
                "+        \"dgrid/extensions/DijitRegistry\",",
                "+        \"dstore/Memory\",",
                "+        \"dstore/Trackable\",",
                "+        \"dojo/keys\",",
                "         \"qpid/common/ContextVariablesEditor\",",
                "@@ -47,2 +58,3 @@ define([\"dojox/html/entities\",",
                "               array,",
                "+              declare,",
                "               event,",
                "@@ -59,3 +71,13 @@ define([\"dojox/html/entities\",",
                "               util,",
                "-              template)",
                "+              template,",
                "+              Grid,",
                "+              Selector,",
                "+              Keyboard,",
                "+              Selection,",
                "+              Pagination,",
                "+              ColumnResizer,",
                "+              DijitRegistry,",
                "+              MemoryStore,",
                "+              TrackableStore,",
                "+              keys)",
                "     {",
                "@@ -114,2 +136,3 @@ define([\"dojox/html/entities\",",
                "                 });",
                "+                this._createNodeAutoCreationPolicyUI();",
                "             },",
                "@@ -160,2 +183,3 @@ define([\"dojox/html/entities\",",
                "                     }",
                "+                    data.nodeAutoCreationPolicies = this._getNodeAutoCreationPolicies();",
                "                     var that = this;",
                "@@ -236,4 +260,6 @@ define([\"dojox/html/entities\",",
                "+                this._initNodeAutoCreationPolicies(data);",
                "                 this.dialog.startup();",
                "                 this.dialog.show();",
                "+                this.dialog.reset();",
                "                 if (!this.resizeEventRegistered)",
                "@@ -243,2 +269,158 @@ define([\"dojox/html/entities\",",
                "                 }",
                "+                this._policyGrid.startup();",
                "+                this._policyGrid.refresh();",
                "+            },",
                "+            _createNodeAutoCreationPolicyUI: function () {",
                "+                this.addNodeAutoCreationPolicyButton =",
                "+                    registry.byId(\"editVirtualHost.addAutoCreationPolicy\");",
                "+                this.addNodeAutoCreationPolicyButton.on(\"click\",",
                "+                    lang.hitch(this, this._addNodeAutoCreationPolicy));",
                "+",
                "+                this.deleteNodeAutoCreationPolicyButton =",
                "+                    registry.byId(\"editVirtualHost.deleteAutoCreationPolicy\");",
                "+                this.deleteNodeAutoCreationPolicyButton.on(\"click\",",
                "+                    lang.hitch(this, this._deleteNodeAutoCreationPolicy));",
                "+                this._policies = [];",
                "+                var Store = MemoryStore.createSubclass(TrackableStore);",
                "+                this._policyStore = new Store({",
                "+                    data: this._policies,",
                "+                    idProperty: \"pattern\"",
                "+                });",
                "+                var PolicyGrid = declare([Grid, Keyboard, Selector, Selection, ColumnResizer, DijitRegistry]);",
                "+                this._policyGrid = new PolicyGrid({",
                "+                    rowsPerPage: 10,",
                "+                    selectionMode: 'none',",
                "+                    deselectOnRefresh: false,",
                "+                    allowSelectAll: true,",
                "+                    cellNavigation: true,",
                "+                    className: 'dgrid-autoheight',",
                "+                    pageSizeOptions: [10, 20, 30, 40, 50, 100],",
                "+                    adjustLastColumn: true,",
                "+                    collection: this._policyStore,",
                "+                    highlightRow: function (){},",
                "+                    columns: {",
                "+                        selected: {",
                "+                            label: 'All',",
                "+                            selector: 'checkbox'",
                "+                        },",
                "+                        nodeType: {",
                "+                            label: \"Node Type\"",
                "+                        },",
                "+                        pattern: {",
                "+                            label: \"Pattern\"",
                "+                        },",
                "+                        createdOnPublish: {",
                "+                            label: \"Create On Publish\"",
                "+                        },",
                "+                        createdOnConsume: {",
                "+                            label: \"Create On Consume\"",
                "+                        },",
                "+                        attributes: {",
                "+                            label: \"Attributes\",",
                "+                            sortable: false,",
                "+                            formatter: function(value, object)",
                "+                            {",
                "+                                var markup = \"\";",
                "+                                if (value)",
                "+                                {",
                "+                                    markup = \"<div class='keyValuePair'>\";",
                "+                                    for(var key in value)",
                "+                                    {",
                "+                                        markup += \"<div>\" + key + \"=\" + value[key] + \"</div>\";",
                "+                                    }",
                "+                                    markup +=\"</div>\"",
                "+                                }",
                "+                                return markup;",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                }, dom.byId(\"editVirtualHost.policies\"));",
                "+",
                "+                this._policyGrid.on('.dgrid-row:dblclick', lang.hitch(this, this._policySelected));",
                "+                this._policyGrid.on('.dgrid-row:keypress', lang.hitch(this, function (event) {",
                "+                    if (event.keyCode === keys.ENTER)",
                "+                    {",
                "+                        this._policySelected(event);",
                "+                    }",
                "+                }));",
                "+                this._policyGrid.on('dgrid-select', lang.hitch(this, this._policySelectionChanged));",
                "+                this._policyGrid.on('dgrid-deselect', lang.hitch(this, this._policySelectionChanged));",
                "+",
                "+            },",
                "+            _initNodeAutoCreationPolicies: function (data) {",
                "+                this._policies =",
                "+                    data.actual && data.actual.nodeAutoCreationPolicies ? data.actual.nodeAutoCreationPolicies : [];",
                "+                var Store = MemoryStore.createSubclass(TrackableStore);",
                "+                this._policyStore = new Store({",
                "+                    data: this._policies,",
                "+                    idProperty: \"pattern\"",
                "+                });",
                "+                this._policyGrid.set(\"collection\", this._policyStore);",
                "+            },",
                "+            _addNodeAutoCreationPolicy: function () {",
                "+                this._showNodeAutoCreationPolicyForm({});",
                "+            },",
                "+            _showNodeAutoCreationPolicyForm: function (item) {",
                "+                if (this.nodeAutoCreationPolicyForm)",
                "+                {",
                "+                    this.nodeAutoCreationPolicyForm.show(item, this._getNodeAutoCreationPolicies());",
                "+                }",
                "+                else",
                "+                {",
                "+                    require([\"qpid/management/virtualhost/NodeAutoCreationPolicyForm\"],",
                "+                        lang.hitch(this, function (NodeAutoCreationPolicyForm) {",
                "+                            this.nodeAutoCreationPolicyForm =",
                "+                                new NodeAutoCreationPolicyForm({management: this.management});",
                "+                            this.nodeAutoCreationPolicyForm.on(\"create\", lang.hitch(this, function (e) {",
                "+                                try",
                "+                                {",
                "+                                    this._policyStore.putSync(e.data);",
                "+                                }",
                "+                                catch (e)",
                "+                                {",
                "+                                    console.warn(\"Unexpected error\" + e);",
                "+                                }",
                "+                                this._policyGrid.refresh({keepScrollPosition: true});",
                "+                            }));",
                "+                            this.nodeAutoCreationPolicyForm.show(item, this._getNodeAutoCreationPolicies());",
                "+                        }));",
                "+                }",
                "+            },",
                "+            _policySelected: function (event) {",
                "+                var row = this._policyGrid.row(event);",
                "+                this._showNodeAutoCreationPolicyForm(row.data);",
                "+            },",
                "+            _deleteNodeAutoCreationPolicy: function () {",
                "+                var selected = this._getSelectedPolicies();",
                "+                if (selected.length > 0)",
                "+                {",
                "+                    for (var s in selected)",
                "+                    {",
                "+                        this._policyStore.removeSync(selected[s]);",
                "+                    }",
                "+                    this._policyGrid.clearSelection();",
                "+                }",
                "+            },",
                "+            _getSelectedPolicies: function () {",
                "+                var selected = [];",
                "+                var selection = this._policyGrid.selection;",
                "+                for (var item in selection)",
                "+                {",
                "+                    if (selection.hasOwnProperty(item) && selection[item])",
                "+                    {",
                "+                        selected.push(item);",
                "+                    }",
                "+                }",
                "+                return selected;",
                "+            },",
                "+            _policySelectionChanged: function () {",
                "+                var selected = this._getSelectedPolicies();",
                "+                this.deleteNodeAutoCreationPolicyButton.set(\"disabled\", selected.length === 0);",
                "+            },",
                "+            _getNodeAutoCreationPolicies: function () {",
                "+                var policies = [];",
                "+                this._policyStore.fetchSync().forEach(function (policy) {",
                "+                    policies.push(policy);",
                "+                });",
                "+                return policies;",
                "             }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "new file mode 100644",
                "index 0000000000..c2500631d1",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "@@ -0,0 +1,355 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+define([\"dojo/_base/declare\",",
                "+        \"dojo/_base/lang\",",
                "+        \"dojo/Evented\",",
                "+        \"dojo/keys\",",
                "+        \"dojo/text!virtualhost/NodeAutoCreationPolicyForm.html\",",
                "+        \"dgrid/OnDemandGrid\",",
                "+        \"dgrid/Selector\",",
                "+        \"dgrid/Keyboard\",",
                "+        \"dgrid/Selection\",",
                "+        \"dgrid/Editor\",",
                "+        \"dgrid/extensions/ColumnResizer\",",
                "+        \"dgrid/extensions/DijitRegistry\",",
                "+        \"dstore/Memory\",",
                "+        \"dstore/Trackable\",",
                "+        \"dstore/legacy/DstoreAdapter\",",
                "+        \"dijit/Dialog\",",
                "+        \"dojox/validate/us\",",
                "+        \"dojox/validate/web\",",
                "+        \"dijit/_WidgetBase\",",
                "+        \"dijit/_TemplatedMixin\",",
                "+        \"dijit/_WidgetsInTemplateMixin\",",
                "+        \"dijit/form/CheckBox\",",
                "+        \"dijit/form/ComboBox\",",
                "+        \"dijit/form/ValidationTextBox\",",
                "+        \"dijit/form/Button\",",
                "+        \"dijit/form/Form\",",
                "+        \"dojo/domReady!\"],",
                "+    function (declare,",
                "+              lang,",
                "+              Evented,",
                "+              keys,",
                "+              template,",
                "+              Grid,",
                "+              Selector,",
                "+              Keyboard,",
                "+              Selection,",
                "+              Editor,",
                "+              ColumnResizer,",
                "+              DijitRegistry,",
                "+              Memory,",
                "+              Trackable) {",
                "+",
                "+        var Store = Memory.createSubclass(Trackable);",
                "+        return declare(\"qpid.management.virtualhost.NodeAutoCreationPolicyForm\",",
                "+            [dijit._WidgetBase, dijit._TemplatedMixin, dijit._WidgetsInTemplateMixin, Evented],",
                "+            {",
                "+                /**",
                "+                 * dijit._TemplatedMixin enforced fields",
                "+                 */",
                "+                //Strip out the apache comment header from the template html as comments unsupported.",
                "+                templateString: template.replace(/<!--[\\s\\S]*?-->/g, \"\"),",
                "+",
                "+                /**",
                "+                 * template attach points",
                "+                 */",
                "+                pattern: null,",
                "+                attributes: null,",
                "+                createdOnPublish: null,",
                "+                createdOnConsume: null,",
                "+                okButton: null,",
                "+                cancelButton: null,",
                "+                nodeAutoCreationPolicyForm: null,",
                "+                addAttributeButton: null,",
                "+                deleteAttributeButton: null,",
                "+                nodeAutoCreationPolicyDialog: null,",
                "+                type: null,",
                "+",
                "+                /**",
                "+                 * constructor arguments",
                "+                 */",
                "+                management: null,",
                "+                /**",
                "+                 * private fields",
                "+                 */",
                "+                _store: null,",
                "+                _policy: null,",
                "+                _attributesGrid: null,",
                "+                _id: 0,",
                "+                _nodeAutoCreationPolicyDialog: null,",
                "+",
                "+                postCreate: function () {",
                "+                    this.inherited(arguments);",
                "+                    this.cancelButton.on(\"click\", lang.hitch(this, this._onCancel));",
                "+                    this.okButton.on(\"click\", lang.hitch(this, this._onFormSubmit));",
                "+                    this.pattern.on(\"change\", lang.hitch(this, this._onChange));",
                "+                    this.createdOnPublish.on(\"change\", lang.hitch(this, this._onChange));",
                "+                    this.createdOnConsume.on(\"change\", lang.hitch(this, this._onChange));",
                "+                    this.addAttributeButton.on(\"click\", lang.hitch(this, this._addAttribute));",
                "+                    this.deleteAttributeButton.on(\"click\", lang.hitch(this, this._deleteAttribute));",
                "+                    this.okButton.set(\"disabled\", true);",
                "+                    this.deleteAttributeButton.set(\"disabled\", true);",
                "+                    this.type.on(\"change\", lang.hitch(this, this._onChange));",
                "+                    this._store = new Store({data: [], idProperty: \"id\"});",
                "+                },",
                "+                show: function(policyData, policies)",
                "+                {",
                "+                    this._policy = policyData ? policyData: {};",
                "+                    this._policies = policies || [];",
                "+                    var attributes = [];",
                "+                    this._id = 0;",
                "+                    if (this._policy.attributes)",
                "+                    {",
                "+                        for(var a in this._policy.attributes)",
                "+                        {",
                "+                            if (this._policy.attributes.hasOwnProperty(a))",
                "+                            {",
                "+                                var id = (++this._id);",
                "+                                attributes.push({",
                "+                                    id: id,",
                "+                                    name: a,",
                "+                                    value: this._policy.attributes[a]",
                "+                                });",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                    this._store = new Store({data: attributes, idProperty: \"id\"});",
                "+                    this.type.set(\"value\", this._policy.nodeType ? this._policy.nodeType : \"Queue\");",
                "+                    this.pattern.set(\"value\", this._policy.pattern ? this._policy.pattern : \"\");",
                "+                    this.createdOnPublish.set(\"checked\", this._policy.createdOnPublish);",
                "+                    this.createdOnConsume.set(\"checked\", this._policy.createdOnConsume);",
                "+                    this.addAttributeButton.set(\"disabled\", false);",
                "+                    this.nodeAutoCreationPolicyDialog.show();",
                "+                    this._initAttributesGrid();",
                "+                },",
                "+                _onCancel: function () {",
                "+                    this.nodeAutoCreationPolicyDialog.hide();",
                "+                    this.emit(\"cancel\");",
                "+                },",
                "+                _onChange: function () {",
                "+                    var invalid = !this.pattern.value ||",
                "+                                  !(this.type.value) ||",
                "+                                  !(this.createdOnPublish.checked || this.createdOnConsume.checked) ||",
                "+                                  this.addAttributeButton.get(\"disabled\");",
                "+                    this.okButton.set(\"disabled\", invalid);",
                "+                },",
                "+                _onFormSubmit: function () {",
                "+                    try",
                "+                    {",
                "+                        if (this.nodeAutoCreationPolicyForm.validate())",
                "+                        {",
                "+                            var nodeType = this.type.value;",
                "+                            var category = nodeType.charAt(0).toUpperCase() + nodeType.substring(1);",
                "+                            if (this.management.metadata.metadata[category])",
                "+                            {",
                "+                                if (this._isUniquePattern(this.pattern.value))",
                "+                                {",
                "+                                    var data = {",
                "+                                        pattern: this.pattern.value,",
                "+                                        nodeType: nodeType,",
                "+                                        createdOnPublish: this.createdOnPublish.checked,",
                "+                                        createdOnConsume: this.createdOnConsume.checked,",
                "+                                        attributes: this._getObjectAttributes()",
                "+                                    };",
                "+                                    this.emit(\"create\", {data: data});",
                "+                                    this.nodeAutoCreationPolicyDialog.hide();",
                "+                                }",
                "+                                else",
                "+                                {",
                "+                                    alert('The auto-creation policy with the same pattern already exists');",
                "+                                }",
                "+                            }",
                "+                            else",
                "+                            {",
                "+                                alert('Specified node type does not exist. Please enter valid node type');",
                "+                            }",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            alert('Form contains invalid data.  Please correct first');",
                "+                        }",
                "+                    }",
                "+                    catch (e)",
                "+                    {",
                "+                        console.warn(e);",
                "+                    }",
                "+                    return false;",
                "+                },",
                "+                _addAttribute: function () {",
                "+                    var id = (++this._id);",
                "+                    var item = {",
                "+                        name: \"<new>\",",
                "+                        value: \"<new>\",",
                "+                        id: id",
                "+                    };",
                "+                    this.addAttributeButton.set(\"disabled\", true);",
                "+                    try",
                "+                    {",
                "+                        this._store.addSync(item);",
                "+                        this._attributesGrid.edit(this._attributesGrid.cell(item, \"name\"));",
                "+                    }",
                "+                    catch(e)",
                "+                    {",
                "+                        console.error(\"failure to add new attribute:\" + e);",
                "+                    }",
                "+                },",
                "+                _deleteAttribute: function () {",
                "+                    var selected = this._getSelectedAttributes();",
                "+                    var newDeleted = false;",
                "+                    if (selected.length > 0)",
                "+                    {",
                "+                        for (var s in selected)",
                "+                        {",
                "+                            if (selected.hasOwnProperty(s))",
                "+                            {",
                "+                                var id = selected[s];",
                "+                                var item =  this._store.getSync(id);",
                "+                                if (item)",
                "+                                {",
                "+                                    if (item.name === \"<new>\")",
                "+                                    {",
                "+                                        newDeleted = true;",
                "+                                    }",
                "+                                    this._store.removeSync(selected[s]);",
                "+                                }",
                "+                            }",
                "+                        }",
                "+                        this._attributesGrid.clearSelection();",
                "+                    }",
                "+                    if (newDeleted)",
                "+                    {",
                "+                        this.addAttributeButton.set(\"disabled\", false);",
                "+                    }",
                "+                },",
                "+                _getSelectedAttributes: function () {",
                "+                    var selected = [];",
                "+                    var selection = this._attributesGrid.selection;",
                "+                    for(var item in selection)",
                "+                    {",
                "+                        if (selection.hasOwnProperty(item) && selection[item])",
                "+                        {",
                "+                            selected.push(item);",
                "+                        }",
                "+                    }",
                "+                    return selected;",
                "+                },",
                "+                _onGridEdit: function (e) {",
                "+                        if (e.value !== \"<new>\")",
                "+                        {",
                "+                            if (e.cell.column.field===\"name\" && e.oldValue === \"<new>\" && e.value !== \"<new>\")",
                "+                            {",
                "+                                this.addAttributeButton.set(\"disabled\", false);",
                "+                            }",
                "+                        }",
                "+                },",
                "+                _gridSelectionChanged: function () {",
                "+                    var selected = this._getSelectedAttributes();",
                "+                    this.deleteAttributeButton.set(\"disabled\", selected.length === 0);",
                "+                },",
                "+                _getObjectAttributes: function () {",
                "+                    var attributes = {};",
                "+                    this._store.fetchSync().forEach(function (entry) {",
                "+                        attributes[entry.name] = entry.value;",
                "+                    });",
                "+                    return attributes;",
                "+                },",
                "+                _isUniquePattern: function(pattern)",
                "+                {",
                "+                    if (this._policy && this._policy.pattern === pattern)",
                "+                    {",
                "+                        // no change to the pattern",
                "+                        return true;",
                "+                    }",
                "+                    for (var i=0;i<this._policies.length;i++)",
                "+                    {",
                "+                        if (this._policies[i].pattern === pattern)",
                "+                        {",
                "+                            return false;",
                "+                        }",
                "+                    }",
                "+                    return true;",
                "+                },",
                "+                _initAttributesGrid: function()",
                "+                {",
                "+                    if (this._attributesGrid )",
                "+                    {",
                "+                        this._attributesGrid.set(\"collection\", this._store);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        var CustomGrid = declare([Grid, Selector, Editor, Keyboard, DijitRegistry]);",
                "+                        this._attributesGrid = new CustomGrid({",
                "+                            selectionMode: 'none',",
                "+                            deselectOnRefresh: false,",
                "+                            allowSelectAll: true,",
                "+                            cellNavigation: true,",
                "+                            adjustLastColumn: true,",
                "+                            collection: this._store,",
                "+                            sort: \"id\",",
                "+                            showHeader: true,",
                "+                            highlightRow: function (){},",
                "+                            columns: {",
                "+                                selected: {",
                "+                                    label: 'All',",
                "+                                    selector: 'checkbox'",
                "+                                },",
                "+                                name: {",
                "+                                    label: 'Name',",
                "+                                    editor: 'text',",
                "+                                    autoSelect: true,",
                "+                                    autoSave: true,",
                "+                                    editOn  : \"click,dgrid-cellfocusin\"",
                "+                                },",
                "+                                value: {",
                "+                                    label: \"Value\",",
                "+                                    editor: 'text',",
                "+                                    autoSelect: true,",
                "+                                    autoSave: true,",
                "+                                    editOn: \"click,dgrid-cellfocusin\"",
                "+                                }",
                "+                            }",
                "+                        }, this.attributes);",
                "+                        this._attributesGrid.on(\"dgrid-datachange\", lang.hitch(this, this._onGridEdit));",
                "+                        this._attributesGrid.on('dgrid-select', lang.hitch(this, this._gridSelectionChanged));",
                "+                        this._attributesGrid.on('dgrid-deselect', lang.hitch(this, this._gridSelectionChanged));",
                "+",
                "+                        // Header TAB navigation does not work reliably with Editor and Selector",
                "+                        // This is a work around to always focus first cell in first row if grid is not empty",
                "+                        this._attributesGrid.addKeyHandler(keys.TAB, lang.hitch(this, function (event) {",
                "+                            var range = this._store.fetchRangeSync({start: 0, end: 1});",
                "+                            if (range && range[0])",
                "+                            {",
                "+                                var cell = this._attributesGrid.cell(range[0], \"selected\");",
                "+                                if (cell)",
                "+                                {",
                "+                                    this._attributesGrid.focus(cell);",
                "+                                    event.preventDefault();",
                "+                                    event.stopPropagation();",
                "+                                }",
                "+                            }",
                "+                        }), true);",
                "+                        this._attributesGrid.startup();",
                "+                    }",
                "+                }",
                "+            });",
                "+    });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "index 9be2a60edb..beda11ed81 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "@@ -97,2 +97,8 @@",
                "         </div>",
                "+        <br/>",
                "+        <div data-dojo-type=\"dijit.TitlePane\"",
                "+             data-dojo-props=\"title: 'Node Auto-Creation Policies',  open: false\"",
                "+             class=\"nodeAutoCreationPolicies\">",
                "+            <div class=\"policies\"></div>",
                "+        </div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html b/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html",
                "new file mode 100644",
                "index 0000000000..bef23eb646",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html",
                "@@ -0,0 +1,129 @@",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  -->",
                "+<div class=\"dijitHidden\">",
                "+    <div data-dojo-type=\"dijit/Dialog\"",
                "+         data-dojo-props=\"title:'Node Auto-Creation Policy'\"",
                "+         data-dojo-attach-point=\"nodeAutoCreationPolicyDialog\">",
                "+        <div>",
                "+            <form data-dojo-attach-point=\"nodeAutoCreationPolicyForm\"",
                "+                  data-dojo-type=\"dijit/form/Form\"",
                "+                  id=\"${id}_nodeAutoCreationPolicyForm\"",
                "+                  class=\"nodeAutoCreationPolicyForm\">",
                "+                <div>",
                "+                    <div class=\"clear\">",
                "+                        <label class=\"formLabel-labelCell tableContainer-labelCell\"",
                "+                               for=\"${id}_pattern\">Pattern*: </label>",
                "+                        <input id=\"${id}_pattern\"",
                "+                               type=\"text\"",
                "+                               class=\"formLabel-controlCell tableContainer-valueCell\"",
                "+                               data-dojo-attach-point=\"pattern\"",
                "+                               data-dojo-type=\"dijit/form/ValidationTextBox\"",
                "+                               data-dojo-props=\"name: 'pattern',",
                "+                        required: true,",
                "+                        intermediateChanges: true,",
                "+                        placeHolder: 'Name matching regular expression',",
                "+                        title: 'Enter name matching regular expression'\"/>",
                "+                    </div>",
                "+                    <div class=\"clear\">",
                "+                        <label class=\"formLabel-labelCell tableContainer-labelCell\" for=\"${id}_nodeType\"",
                "+                               id=\"${id}_nodeTypeLabel\">Node Type*: </label>",
                "+                        <select id=\"${id}_nodeType\" class=\"formLabel-controlCell tableContainer-valueCell\"",
                "+                                data-dojo-attach-point=\"type\"",
                "+                                data-dojo-type='dijit/form/ComboBox'",
                "+                                data-dojo-props=\" name: 'type',",
                "+                                          placeHolder: 'Type of Node',",
                "+                                          required: true,",
                "+                                          value: 'Queue',",
                "+                                          title: 'Type of node to create.',",
                "+                                          promptMessage: 'Select type of node to create.',",
                "+                                          intermediateChanges: true\">",
                "+                            <option value=\"Queue\" selected=\"true\">Queue</option>",
                "+                            <option value=\"Exchange\">Exchange</option>",
                "+                        </select>",
                "+                    </div>",
                "+                    <div class=\"clear formBox\">",
                "+                        <fieldset>",
                "+                            <legend>Create On*:</legend>",
                "+                            <div class=\"clear\">",
                "+                                <label class=\"formLabel-labelCell tableContainer-labelCell\"",
                "+                                       for=\"${id}_createdOnPublish\">Create On Publish:</label>",
                "+                                <input id=\"${id}_createdOnPublish\"",
                "+                                       class=\"formLabel-controlCell tableContainer-valueCell\"",
                "+                                       type=\"checkbox\"",
                "+                                       data-dojo-type=\"dijit/form/CheckBox\"",
                "+                                       data-dojo-attach-point=\"createdOnPublish\"",
                "+                                       data-dojo-props=\"name: 'createdOnPublish', intermediateChanges: true\"/>",
                "+                                <div data-dojo-type=\"dijit/Tooltip\"",
                "+                                     data-dojo-props=\"connectId: ['${id}_createdOnPublish'],",
                "+                              label: 'If selected, node is created by publisher'\">",
                "+                                </div>",
                "+                            </div>",
                "+                            <div class=\"clear\">",
                "+                                <label class=\"formLabel-labelCell tableContainer-labelCell\"",
                "+                                       for=\"${id}_createdOnConsume\">Create On Consume:</label>",
                "+                                <input id=\"${id}_createdOnConsume\"",
                "+                                       class=\"formLabel-controlCell tableContainer-valueCell\"",
                "+                                       type=\"checkbox\"",
                "+                                       data-dojo-type=\"dijit/form/CheckBox\"",
                "+                                       data-dojo-attach-point=\"createdOnConsume\"",
                "+                                       data-dojo-props=\"name: 'createdOnConsume',intermediateChanges: true\"/>",
                "+                                <div data-dojo-type=\"dijit/Tooltip\"",
                "+                                     data-dojo-props=\"connectId: ['${id}_createdOnConsume'],",
                "+                              label: 'If selected, node is created by consumer'\">",
                "+                                </div>",
                "+                            </div>",
                "+                        </fieldset>",
                "+                    </div>",
                "+                    <div class=\"clear formBox\">",
                "+                        <fieldset>",
                "+                            <legend>Attributes:</legend>",
                "+                            <div data-dojo-attach-point=\"attributes\" id=\"${id}_attributes\"",
                "+                                 class=\"nodeAutoCreationPolicyAttributes\"></div>",
                "+                            <div>",
                "+                                <button data-dojo-type=\"dijit/form/Button\"",
                "+                                        id=\"${id}_addAttributeButton\"",
                "+                                        type=\"button\"",
                "+                                        data-dojo-props=\"title:'Add new attribute'\"",
                "+                                        data-dojo-attach-point=\"addAttributeButton\">+</button>",
                "+                                <button data-dojo-type=\"dijit/form/Button\"",
                "+                                        id=\"${id}_deleteAttributeButton\"",
                "+                                        type=\"button\"",
                "+                                        data-dojo-props=\"title:'Remove selected attribute(s)'\"",
                "+                                        data-dojo-attach-point=\"deleteAttributeButton\">-</button>",
                "+                            </div>",
                "+                        </fieldset>",
                "+                    </div>",
                "+                    <div class=\"clear\"></div>",
                "+                </div>",
                "+                <div class=\"dijitDialogPaneActionBar\">",
                "+                    <input id=\"${id}_cancelButton\"",
                "+                           type=\"button\"",
                "+                           data-dojo-attach-point=\"cancelButton\"",
                "+                           data-dojo-type=\"dijit/form/Button\"",
                "+                           data-dojo-props=\"label: 'Cancel'\"/>",
                "+                    <input id=\"${id}_okButton\"",
                "+                           type=\"submit\"",
                "+                           data-dojo-attach-point=\"okButton\"",
                "+                           data-dojo-type=\"dijit/form/Button\"",
                "+                           data-dojo-props=\"label: 'Ok'\"/>",
                "+                </div>",
                "+            </form>",
                "+        </div>",
                "+    </div>",
                "+</div>"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/css/common.css",
                "broker-plugins/management-http/src/main/java/resources/editVirtualHost.html",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/editVirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/virtualhost/NodeAutoCreationPolicyForm.js",
                "broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "broker-plugins/management-http/src/main/java/resources/virtualhost/NodeAutoCreationPolicyForm.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8102": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "056da53cac94f8c2e312baf8f19be39b91ef901b"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8102",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac3898e3e4bfe071fcc5b4f4392ba0124f274905",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515945202,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Reverted unintentional removal of exclusion for FailoverMethodTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 61a5e8a8cb..821fe48be7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -121,3 +121,3 @@ org.apache.qpid.server.store.derby.*",
                " # QPID-7156: Test requires a Broker with a virtualhost",
                "-org.apache.qpid.test.unit.client.connection.BrokerClosesClientConnectionTest#testClientCloseOnVirtualHostStop",
                "+org.apache.qpid.systests.jms_1_1.connection.BrokerClosesClientConnectionTest#testClientCloseOnVirtualHostStop",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 6df36fddc4..dace6ea3a8 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -23,2 +23,5 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsing",
                "+// Exclude tests of connection URL failover method property",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+",
                " // 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index efb7b9705d..0fbda7fbf0 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -53,2 +53,5 @@ org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                " org.apache.qpid.test.client.failover.FailoverTest#*",
                "+// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6f8840aed0466676d86e4c3a78dcdfc929e27a12"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1dbdd321351400b466b1a23cb5efb8df55e1ab00",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519232584,
            "hunks": 2,
            "message": "QPID-8106: [Broker-J] No longer require a active destination when reuniting queue/exchanges with their alternate binding",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 1645f32dc8..99c75d9e3b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -531,3 +531,3 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "         {",
                "-            _alternateBindingDestination = _virtualHost.getAttainedMessageDestination(_alternateBinding.getDestination(), false);",
                "+            _alternateBindingDestination = getOpenedMessageDestination(_alternateBinding.getDestination());",
                "             if (_alternateBindingDestination != null)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index d8c2c8920c..c10f8e7005 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -685,3 +685,3 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "         {",
                "-            _alternateBindingDestination = _virtualHost.getAttainedMessageDestination(_alternateBinding.getDestination(), false);",
                "+            _alternateBindingDestination = getOpenedMessageDestination(_alternateBinding.getDestination());",
                "             if (_alternateBindingDestination != null)"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8106": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "de8098430974db2cb1fd31c4044dec25eb6fd108"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8106",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5fc36173353f2624fc5fc223597b91111fbb3886",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517240447,
            "hunks": 4,
            "message": "QPID-8087: [Broker-J] [BDB] [HA] Ensure that node goes into ERROR if recovery fails on master event from JE",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "index 04fde04c59..97565dfe24 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java",
                "@@ -616,2 +616,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "     {",
                "+        boolean success = false;",
                "         try",
                "@@ -681,2 +682,3 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "             }",
                "+            success = true;",
                "@@ -687,2 +689,6 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "         }",
                "+        finally",
                "+        {",
                "+            setState(success ? State.ACTIVE : State.ERRORED);",
                "+        }",
                "     }",
                "@@ -691,3 +697,12 @@ public class BDBHAVirtualHostNodeImpl extends AbstractVirtualHostNode<BDBHAVirtu",
                "     {",
                "-        createReplicaVirtualHost();",
                "+        boolean success = false;",
                "+        try",
                "+        {",
                "+            createReplicaVirtualHost();",
                "+            success = true;",
                "+        }",
                "+        finally",
                "+        {",
                "+            setState(success ? State.ACTIVE : State.ERRORED);",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8087": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "575d2762e1e776fd2106aec92d5c85dc2c1770ab"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8087",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c0dc1e9771fa5e37eb03088837f3812cd7d43e5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522411374,
            "hunks": 6,
            "message": "NO-JIRA: [Broker-J] Remove unused methods",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "index 79319befca..7651d110b2 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "@@ -77,4 +77,2 @@ public class BrokerMessages",
                "     public static final String STARTUP_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.startup\";",
                "-    public static final String STATS_DATA_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.stats_data\";",
                "-    public static final String STATS_MSGS_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.stats_msgs\";",
                "     public static final String STOPPED_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.stopped\";",
                "@@ -96,4 +94,2 @@ public class BrokerMessages",
                "         LoggerFactory.getLogger(STARTUP_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(STATS_DATA_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(STATS_MSGS_LOG_HIERARCHY);",
                "         LoggerFactory.getLogger(STOPPED_LOG_HIERARCHY);",
                "@@ -818,122 +814,2 @@ public class BrokerMessages",
                "-    /**",
                "-     * Log a Broker message of the Format:",
                "-     * <pre>BRK-1008 : {0,choice,0#delivered|1#received} : {1,number,#.###} kB/s peak : {2,number,#} bytes total</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage STATS_DATA(Number param1, Number param2, Number param3)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"STATS_DATA\");",
                "-",
                "-        final Object[] messageArguments = {param1, param2, param3};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return STATS_DATA_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "-    /**",
                "-     * Log a Broker message of the Format:",
                "-     * <pre>BRK-1009 : {0,choice,0#delivered|1#received} : {1,number,#.###} msg/s peak : {2,number,#} msgs total</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage STATS_MSGS(Number param1, Number param2, Number param3)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"STATS_MSGS\");",
                "-",
                "-        final Object[] messageArguments = {param1, param2, param3};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return STATS_MSGS_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "     /**",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/VirtualHostMessages.java b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/VirtualHostMessages.java",
                "index 73505044c0..a4413f4d6a 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/messages/VirtualHostMessages.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/messages/VirtualHostMessages.java",
                "@@ -71,4 +71,2 @@ public class VirtualHostMessages",
                "     public static final String OPERATION_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"virtualhost.operation\";",
                "-    public static final String STATS_DATA_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"virtualhost.stats_data\";",
                "-    public static final String STATS_MSGS_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"virtualhost.stats_msgs\";",
                "@@ -83,4 +81,2 @@ public class VirtualHostMessages",
                "         LoggerFactory.getLogger(OPERATION_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(STATS_DATA_LOG_HIERARCHY);",
                "-        LoggerFactory.getLogger(STATS_MSGS_LOG_HIERARCHY);",
                "@@ -449,122 +445,2 @@ public class VirtualHostMessages",
                "-    /**",
                "-     * Log a VirtualHost message of the Format:",
                "-     * <pre>VHT-1003 : {0} : {1,choice,0#delivered|1#received} : {2,number,#.###} kB/s peak : {3,number,#} bytes total</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage STATS_DATA(String param1, Number param2, Number param3, Number param4)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"STATS_DATA\");",
                "-",
                "-        final Object[] messageArguments = {param1, param2, param3, param4};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return STATS_DATA_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "-    /**",
                "-     * Log a VirtualHost message of the Format:",
                "-     * <pre>VHT-1004 : {0} : {1,choice,0#delivered|1#received} : {2,number,#.###} msg/s peak : {3,number,#} msgs total</pre>",
                "-     * Optional values are contained in [square brackets] and are numbered",
                "-     * sequentially in the method call.",
                "-     *",
                "-     */",
                "-    public static LogMessage STATS_MSGS(String param1, Number param2, Number param3, Number param4)",
                "-    {",
                "-        String rawMessage = _messages.getString(\"STATS_MSGS\");",
                "-",
                "-        final Object[] messageArguments = {param1, param2, param3, param4};",
                "-        // Create a new MessageFormat to ensure thread safety.",
                "-        // Sharing a MessageFormat and using applyPattern is not thread safe",
                "-        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);",
                "-",
                "-        final String message = formatter.format(messageArguments);",
                "-",
                "-        return new LogMessage()",
                "-        {",
                "-            @Override",
                "-            public String toString()",
                "-            {",
                "-                return message;",
                "-            }",
                "-",
                "-            @Override",
                "-            public String getLogHierarchy()",
                "-            {",
                "-                return STATS_MSGS_LOG_HIERARCHY;",
                "-            }",
                "-",
                "-            @Override",
                "-            public boolean equals(final Object o)",
                "-            {",
                "-                if (this == o)",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                if (o == null || getClass() != o.getClass())",
                "-                {",
                "-                    return false;",
                "-                }",
                "-",
                "-                final LogMessage that = (LogMessage) o;",
                "-",
                "-                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());",
                "-",
                "-            }",
                "-",
                "-            @Override",
                "-            public int hashCode()",
                "-            {",
                "-                int result = toString().hashCode();",
                "-                result = 31 * result + getLogHierarchy().hashCode();",
                "-                return result;",
                "-            }",
                "-        };",
                "-    }",
                "-"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java",
                "broker-core/src/main/java/org/apache/qpid/server/logging/messages/VirtualHostMessages.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "43476a2a2d510943a7f0eea4e464e7f018686e49",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521463576,
            "hunks": 1,
            "message": "QPID-8137: [Broker-J] Return configured port as accepting port when network transport instance is not created",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java b/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java",
                "index d3e14c0387..f52d50d182 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java",
                "@@ -85,3 +85,4 @@ class TCPandSSLTransport implements AcceptingTransport",
                "     {",
                "-        return _networkTransport.getAcceptingPort();",
                "+        NonBlockingNetworkTransport networkTransport = _networkTransport;",
                "+        return networkTransport == null ? _port.getPort() : networkTransport.getAcceptingPort();",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8137": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf41fa6edec5a3ae09478b5678aaf0198d12a623"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8137",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "684803e05d8d38c1191fe54ba5a5c341baebc0c4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521655523,
            "hunks": 51,
            "message": "QPID-7925: [Java Broker] [WMC] Add ability to maintain rule-based access control provider for virtualhost (cherry picked from commit 03b08426e3cc75ee43adbb18bd110dd908cfce51)",
            "diff": [
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AbstractCommonRuleBasedAccessControlProvider.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AbstractCommonRuleBasedAccessControlProvider.java",
                "index 315f29701e..0719e679ca 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AbstractCommonRuleBasedAccessControlProvider.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AbstractCommonRuleBasedAccessControlProvider.java",
                "@@ -28,2 +28,4 @@ import java.io.OutputStream;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.time.LocalDateTime;",
                "+import java.time.format.DateTimeFormatter;",
                " import java.util.ArrayList;",
                "@@ -192,3 +194,3 @@ abstract class AbstractCommonRuleBasedAccessControlProvider<X extends AbstractCo",
                "         }",
                "-        return new StringContent(sb.toString());",
                "+        return new StringContent(getName(), sb.toString());",
                "     }",
                "@@ -197,8 +199,10 @@ abstract class AbstractCommonRuleBasedAccessControlProvider<X extends AbstractCo",
                "     {",
                "-",
                "+        private final static DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HHmmss\");",
                "         private final String _content;",
                "+        private final String _name;",
                "-        public StringContent(final String content)",
                "+        public StringContent(final String name, final String content)",
                "         {",
                "             _content = content;",
                "+            _name = name;",
                "         }",
                "@@ -217,2 +221,8 @@ abstract class AbstractCommonRuleBasedAccessControlProvider<X extends AbstractCo",
                "+        @RestContentHeader(\"Content-Disposition\")",
                "+        public String getContentDisposition()",
                "+        {",
                "+            return String.format(\"attachment; filename=\\\"%s-%s.acl\\\"\", _name, FORMATTER.format(LocalDateTime.now()));",
                "+        }",
                "+",
                "         @Override",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/LoadForm.html b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/LoadForm.html",
                "new file mode 100644",
                "index 0000000000..960169649c",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/LoadForm.html",
                "@@ -0,0 +1,59 @@",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  -->",
                "+<div class=\"dijitHidden\">",
                "+    <div data-dojo-type=\"dijit/Dialog\"",
                "+         data-dojo-props=\"title:'Select file to load'\"",
                "+         data-dojo-attach-point=\"loadDialog\">",
                "+        <div>",
                "+            <div id=\"${id}_warning\" class=\"infoMessage hidden clear\" data-dojo-attach-point=\"warning\"></div>",
                "+            <form data-dojo-attach-point=\"loadForm\"",
                "+                  data-dojo-type=\"dijit/form/Form\"",
                "+                  id=\"${id}_loadForm\"",
                "+                  class=\"loadForm\">",
                "+                <div>",
                "+                    <div class=\"clear\">",
                "+                        <div class=\"formLabel-labelCell tableContainer-labelCell\">Server path or upload*:</div>",
                "+                        <input type=\"text\" id=\"${id}_loadFormPath\"",
                "+                               data-dojo-type=\"qpid/common/ResourceWidget\"",
                "+                               data-dojo-attach-point=\"path\"",
                "+                               data-dojo-props=\"",
                "+                              name: 'path',",
                "+                              placeHolder: 'access control provider file server path',",
                "+                              required: true,",
                "+                              promptMessage: 'Location of the access control provider file',",
                "+                              title: 'Enter the access control provider file path'\" />",
                "+                    </div>",
                "+                    <div class=\"clear\"></div>",
                "+                </div>",
                "+                <div class=\"dijitDialogPaneActionBar\">",
                "+                    <input id=\"${id}_cancelButton\"",
                "+                           type=\"button\"",
                "+                           data-dojo-attach-point=\"cancelButton\"",
                "+                           data-dojo-type=\"dijit/form/Button\"",
                "+                           data-dojo-props=\"label: 'Cancel'\"/>",
                "+                    <input id=\"${id}_okButton\"",
                "+                           type=\"submit\"",
                "+                           data-dojo-attach-point=\"okButton\"",
                "+                           data-dojo-type=\"dijit/form/Button\"",
                "+                           data-dojo-props=\"label: 'Ok'\"/>",
                "+                </div>",
                "+            </form>",
                "+        </div>",
                "+    </div>",
                "+</div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "new file mode 100644",
                "index 0000000000..671a81a81e",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "@@ -0,0 +1,33 @@",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  -->",
                "+",
                "+<div>",
                "+    <div class=\"clear\">",
                "+        <div class=\"formLabel-labelCell tableContainer-labelCell\">Default Result:</div>",
                "+        <input type=\"text\" id=\"addAccessControlProvider.ruleBased.defaultResult\"",
                "+               data-dojo-type=\"dijit/form/FilteringSelect\"",
                "+               data-dojo-props=\"",
                "+                              name: 'defaultResult',",
                "+                              required: true,",
                "+                              placeHolder: 'default result',",
                "+                              promptMessage: 'the default result to use if no rules match the requested operation',",
                "+                              title: 'the default result to use if no rules match the requested operation'\"/>",
                "+    </div>",
                "+    <div class=\"clear\"></div>",
                "+</div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/showRuleBased.html b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/showRuleBased.html",
                "new file mode 100644",
                "index 0000000000..d527d3083d",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/showRuleBased.html",
                "@@ -0,0 +1,37 @@",
                "+<!--",
                "+ -",
                "+ - Licensed to the Apache Software Foundation (ASF) under one",
                "+ - or more contributor license agreements.  See the NOTICE file",
                "+ - distributed with this work for additional information",
                "+ - regarding copyright ownership.  The ASF licenses this file",
                "+ - to you under the Apache License, Version 2.0 (the",
                "+ - \"License\"); you may not use this file except in compliance",
                "+ - with the License.  You may obtain a copy of the License at",
                "+ -",
                "+ -   http://www.apache.org/licenses/LICENSE-2.0",
                "+ -",
                "+ - Unless required by applicable law or agreed to in writing,",
                "+ - software distributed under the License is distributed on an",
                "+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ - KIND, either express or implied.  See the License for the",
                "+ - specific language governing permissions and limitations",
                "+ - under the License.",
                "+ -",
                "+ -->",
                "+<div class=\"RuleBasedAclProvider\">",
                "+",
                "+    <div class=\"clear\">",
                "+        <div class=\"formLabel-labelCell\">Default Result:</div>",
                "+        <div class=\"defaultResult\"></div>",
                "+    </div>",
                "+    <div class=\"clear\"></div>",
                "+    <div data-dojo-type=\"dijit/TitlePane\"",
                "+         data-dojo-props=\"title: 'Access Control Rules'\" class=\"accessControlRules\">",
                "+        <div class=\"rules\"></div>",
                "+    </div>",
                "+    <div class=\"alignRight\">",
                "+        <button data-dojo-type=\"dijit/form/Button\" class=\"load\">Load</button>",
                "+        <button data-dojo-type=\"dijit/form/Button\" class=\"extract\">Extract</button>",
                "+    </div>",
                "+    <div class=\"clear\"></div>",
                "+</div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/css/common.css b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "index b2577c7e4d..09765a5007 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "+++ b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "@@ -816 +816,13 @@ td.advancedSearchField, col.autoWidth {",
                " }",
                "+",
                "+.accessControlProviders .field-selected { width: 2em; }",
                "+.accessControlProviders .field-name { width: 20%; }",
                "+.accessControlProviders .field-state { width: 20%; }",
                "+.accessControlProviders .field-type { width: auto; }",
                "+.accessControlProviders .field-priority { width: 20% }",
                "+",
                "+.accessControlRules .field-identity { width: 20%; }",
                "+.accessControlRules .field-objectType { width: 20%; }",
                "+.accessControlRules .field-operation { width: 10%; }",
                "+.accessControlRules .field-outcome { width: 10%; }",
                "+.accessControlRules .field-attributes { width: auto; }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ResourceWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ResourceWidget.js",
                "index efd72b452d..a0f84bc4e4 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ResourceWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ResourceWidget.js",
                "@@ -138,2 +138,6 @@ define([\"dojo/_base/declare\",",
                "                 },",
                "+                reset: function () {",
                "+                    this.inherited(arguments);",
                "+                    this.uploader.reset();",
                "+                },",
                "                 _fileChanged: function (evt)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "index 5de759fbac..b6a395c01c 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "@@ -1023,2 +1023,35 @@ define([\"dojo/_base/xhr\",",
                "         };",
                "+",
                "+        util.updateSyncDStore = function (dstore, data, idProperty) {",
                "+            if (data)",
                "+            {",
                "+                for (var i = 0; i < data.length; i++)",
                "+                {",
                "+                    dstore.putSync(data[i]);",
                "+                }",
                "+            }",
                "+            var objectsToRemove = [];",
                "+            dstore.fetchSync()",
                "+                .forEach(function (object) {",
                "+                    if (object)",
                "+                    {",
                "+                        if (data)",
                "+                        {",
                "+                            for (var i = 0; i < data.length; i++)",
                "+                            {",
                "+                                if (data[i][idProperty] === object[idProperty])",
                "+                                {",
                "+                                    return;",
                "+                                }",
                "+                            }",
                "+                        }",
                "+                        objectsToRemove.push(object[idProperty]);",
                "+                    }",
                "+                });",
                "+            for (var i = 0 ; i < objectsToRemove.length; i++)",
                "+            {",
                "+                dstore.removeSync(objectsToRemove[i]);",
                "+            }",
                "+        };",
                "+",
                "         return util;",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/AccessControlProvider.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/AccessControlProvider.js",
                "index 7e3498852b..0a5b921ed7 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/AccessControlProvider.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/AccessControlProvider.js",
                "@@ -22,2 +22,3 @@ define([\"dojo/parser\",",
                "         \"dojo/query\",",
                "+        \"dojo/_base/lang\",",
                "         \"dojo/_base/connect\",",
                "@@ -37,2 +38,3 @@ define([\"dojo/parser\",",
                "               query,",
                "+              lang,",
                "               connect,",
                "@@ -79,2 +81,7 @@ define([\"dojo/parser\",",
                "                     });",
                "+",
                "+                    that.accessControlProviderUpdater.update(function ()",
                "+                    {",
                "+                        updater.add(that.accessControlProviderUpdater);",
                "+                    });",
                "                 });",
                "@@ -84,6 +91,3 @@ define([\"dojo/parser\",",
                "         {",
                "-            if (this.accessControlProviderUpdater.details)",
                "-            {",
                "-                this.accessControlProviderUpdater.details.close();",
                "-            }",
                "+           updater.remove(this.accessControlProviderUpdater);",
                "         };",
                "@@ -117,30 +121,3 @@ define([\"dojo/parser\",",
                "             this.priority = query(\".priority\", node)[0];",
                "-",
                "-            var that = this;",
                "-",
                "-            this.management.load(this.modelObj, {excludeInheritedContext: true})",
                "-                .then(function (data)",
                "-                {",
                "-                    that.accessControlProviderData = data;",
                "-",
                "-                    util.flattenStatistics(that.accessControlProviderData);",
                "-",
                "-                    that.updateHeader();",
                "-",
                "-                    var ui = that.accessControlProviderData.type;",
                "-                    require([\"qpid/management/accesscontrolprovider/\" + ui], function (SpecificProvider)",
                "-                    {",
                "-                        that.details = new SpecificProvider(query(\".providerDetails\",",
                "-                            node)[0], that.modelObj, that.controller, aclTab);",
                "-                    });",
                "-                }, function (error)",
                "-                {",
                "-                    util.tabErrorHandler(error, {",
                "-                        updater: that,",
                "-                        contentPane: that.contentPane,",
                "-                        tabContainer: that.controller.tabContainer,",
                "-                        name: that.modelObj.name,",
                "-                        category: \"Access Control Provider\"",
                "-                    });",
                "-                });",
                "+            this.providerDetailsDiv = query(\".providerDetails\", node)[0];",
                "         }",
                "@@ -156,2 +133,49 @@ define([\"dojo/parser\",",
                "+        AccessControlProviderUpdater.prototype.update = function (callback) {",
                "+            if (!this.contentPane.selected && !callback)",
                "+            {",
                "+                return;",
                "+            }",
                "+",
                "+            this.management.load(this.modelObj)",
                "+                .then(lang.hitch(this, function (data) {",
                "+                        this._update(data, callback);",
                "+                    }),",
                "+                    lang.hitch(this, function (error) {",
                "+                        util.tabErrorHandler(error, {",
                "+                            updater: this,",
                "+                            contentPane: this.contentPane,",
                "+                            tabContainer: this.controller.tabContainer,",
                "+                            name: this.modelObj.name,",
                "+                            category: \"Access Control Provider\"",
                "+                        });",
                "+                    }));",
                "+",
                "+        };",
                "+",
                "+        AccessControlProviderUpdater.prototype._update = function (data, callback) {",
                "+            this.accessControlProviderData = data;",
                "+            this.updateHeader();",
                "+            if (this.details)",
                "+            {",
                "+                this.details.update(data);",
                "+            }",
                "+            else",
                "+            {",
                "+                require([\"qpid/management/accesscontrolprovider/\" + data.type],",
                "+                    lang.hitch(this, function (SpecificProvider) {",
                "+                        this.details = new SpecificProvider(this.providerDetailsDiv,",
                "+                            this.modelObj,",
                "+                            this.controller);",
                "+",
                "+                        this.details.update(data);",
                "+",
                "+                        if (callback)",
                "+                        {",
                "+                            callback();",
                "+                        }",
                "+                    }));",
                "+            }",
                "+        };",
                "+",
                "         return AccessControlProvider;",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "index 7a96baabd3..344d455f0f 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "@@ -112,3 +112,3 @@ define([\"dojo/parser\",",
                "                         that._deleteSelectedItems(that.vhostUpdater.queuesGrid,",
                "-                                                  {type: \"queue\", parent: this.modelObj},",
                "+                                                  {type: \"queue\", parent: that.modelObj},",
                "                                                   \"delete\", \"queue\");",
                "@@ -204,2 +204,24 @@ define([\"dojo/parser\",",
                "+                    var addVirtualHostAccessControlProviderButton = registry.byNode(query(",
                "+                        \".addVirtualHostAccessControlProvider\",",
                "+                        contentPane.containerNode)[0]);",
                "+                    addVirtualHostAccessControlProviderButton.on(\"click\", function () {",
                "+                        require([\"qpid/management/addAccessControlProvider\"],",
                "+                            function (addAccessControlProvider) {",
                "+                                addAccessControlProvider.show(that.management, that.modelObj);",
                "+                            });",
                "+                    });",
                "+",
                "+                    var deleteVirtualHostAccessControlProviderButton = registry.byNode(query(",
                "+                        \".deleteVirtualHostAccessControlProvider\",",
                "+                        contentPane.containerNode)[0]);",
                "+                    deleteVirtualHostAccessControlProviderButton.on(\"click\", function () {",
                "+                        that._deleteSelectedItems(that.vhostUpdater.virtualHostAccessControlProviderGrid,",
                "+                            {",
                "+                                type: \"virtualhostaccesscontrolprovider\",",
                "+                                parent: that.modelObj",
                "+                            },",
                "+                            \"delete\", \"virtual host access control provider\");",
                "+                    });",
                "+",
                "                     that.vhostUpdater.update(function ()",
                "@@ -536,2 +558,37 @@ define([\"dojo/parser\",",
                "+            this.virtualHostAccessControlProviderGrid = new CustomGrid({",
                "+                detectChanges: true,",
                "+                rowsPerPage: 10,",
                "+                transformer: util.queryResultToObjects,",
                "+                management: this.management,",
                "+                parentObject: this.modelObj,",
                "+                category: \"VirtualHostAccessControlProvider\",",
                "+                selectClause: \"id, name, state, type, priority\",",
                "+                orderBy: \"name\",",
                "+                selectionMode: 'none',",
                "+                deselectOnRefresh: false,",
                "+                allowSelectAll: true,",
                "+                columns: [",
                "+                    {",
                "+                        field: \"selected\",",
                "+                        label: 'All',",
                "+                        selector: 'checkbox'",
                "+                    },  {",
                "+                        label: \"Name\",",
                "+                        field: \"name\"",
                "+                    }, {",
                "+                        label: \"State\",",
                "+                        field: \"state\"",
                "+                    }, {",
                "+                        label: \"Type\",",
                "+                        field: \"type\"",
                "+                    }, {",
                "+                        label: \"Priority\",",
                "+                        field: \"priority\"",
                "+                    }",
                "+                ]",
                "+            }, findNode(\"virtualHostAccessControlProviders\"));",
                "+            this.virtualHostAccessControlProviderGrid.on('rowBrowsed', function(event){controller.showById(event.id);});",
                "+            this.virtualHostAccessControlProviderGrid.startup();",
                "+",
                "         }",
                "@@ -619,2 +676,3 @@ define([\"dojo/parser\",",
                "                 this.virtualHostLoggersGrid.updateData();",
                "+                this.virtualHostAccessControlProviderGrid.updateData();",
                "             }",
                "@@ -638,3 +696,3 @@ define([\"dojo/parser\",",
                "             }",
                "-            this._updateDStore(this._policyStore, this.vhostData.nodeAutoCreationPolicies || [], \"pattern\");",
                "+            util.updateSyncDStore(this._policyStore, this.vhostData.nodeAutoCreationPolicies || [], \"pattern\");",
                "         };",
                "@@ -707,34 +765,2 @@ define([\"dojo/parser\",",
                "-        Updater.prototype._updateDStore = function (dstore, data, idProperty) {",
                "-            if (data)",
                "-            {",
                "-                for (var i = 0; i < data.length; i++)",
                "-                {",
                "-                    dstore.putSync(data[i]);",
                "-                }",
                "-            }",
                "-            var objectsToRemove = [];",
                "-            dstore.fetchSync()",
                "-                .forEach(function (object) {",
                "-                    if (object)",
                "-                    {",
                "-                        if (data)",
                "-                        {",
                "-                            for (var i = 0; i < data.length; i++)",
                "-                            {",
                "-                                if (data[i][idProperty] === object[idProperty])",
                "-                                {",
                "-                                    return;",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                        objectsToRemove.push(object[idProperty]);",
                "-                    }",
                "-                });",
                "-            for (var i = 0 ; i < objectsToRemove.length; i++)",
                "-            {",
                "-                dstore.removeSync(objectsToRemove[i]);",
                "-            }",
                "-        };",
                "-",
                "         return VirtualHost;",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "index 6c1fbbb63f..70f3a5f549 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "@@ -20,4 +20,3 @@",
                "  */",
                "-define([\"dojo/_base/xhr\",",
                "-        \"dojo/_base/lang\",",
                "+define([\"dojo/_base/lang\",",
                "         \"dojo/dom\",",
                "@@ -26,28 +25,8 @@ define([\"dojo/_base/xhr\",",
                "         \"dojo/dom-construct\",",
                "-        \"dojo/_base/connect\",",
                "-        \"dojo/_base/window\",",
                "-        \"dojo/_base/event\",",
                "-        \"dojo/_base/json\",",
                "-        \"dojo/_base/lang\",",
                "         \"dijit/registry\",",
                "         \"dojox/html/entities\",",
                "-        \"qpid/common/util\",",
                "-        \"qpid/common/properties\",",
                "-        \"qpid/common/updater\",",
                "-        \"qpid/common/UpdatableStore\",",
                "-        \"dojox/grid/EnhancedGrid\",",
                "-        \"dojox/grid/enhanced/plugins/Pagination\",",
                "-        \"dojox/grid/enhanced/plugins/IndirectSelection\",",
                "-        \"dojox/validate/us\",",
                "-        \"dojox/validate/web\",",
                "-        \"dijit/Dialog\",",
                "-        \"dijit/form/TextBox\",",
                "-        \"dijit/form/ValidationTextBox\",",
                "-        \"dijit/form/TimeTextBox\",",
                "+        \"dojo/text!accesscontrolprovider/showAclFile.html\",",
                "         \"dijit/form/Button\",",
                "-        \"dijit/form/Form\",",
                "-        \"dijit/form/DateTextBox\",",
                "         \"dojo/domReady!\"],",
                "-    function (xhr,",
                "-              lang,",
                "+    function (lang,",
                "               dom,",
                "@@ -56,89 +35,27 @@ define([\"dojo/_base/xhr\",",
                "               construct,",
                "-              connect,",
                "-              win,",
                "-              event,",
                "-              json,",
                "-              lang,",
                "               registry,",
                "               entities,",
                "-              util,",
                "-              properties,",
                "-              updater,",
                "-              UpdatableStore,",
                "-              EnhancedGrid)",
                "+              template)",
                "     {",
                "-        function AclFile(containerNode, aclProviderObj, controller, tabObject)",
                "+        function AclFile(containerNode, aclProviderObj, controller)",
                "         {",
                "-            var node = construct.create(\"div\", null, containerNode, \"last\");",
                "-            this.modelObj = aclProviderObj;",
                "-            var that = this;",
                "-            this.name = aclProviderObj.name;",
                "-            xhr.get({",
                "-                url: \"accesscontrolprovider/showAclFile.html\",",
                "-                sync: true,",
                "-                load: function (data)",
                "-                {",
                "-                    node.innerHTML = data;",
                "-                    parser.parse(node)",
                "-                        .then(function (instances)",
                "-                        {",
                "-                            that.groupDatabaseUpdater = new AclFileUpdater(node, tabObject);",
                "-",
                "-                            updater.add(that.groupDatabaseUpdater);",
                "-",
                "-                            that.groupDatabaseUpdater.update();",
                "-                        });",
                "-",
                "-                }",
                "-            });",
                "-        }",
                "-",
                "-        AclFile.prototype.close = function ()",
                "-        {",
                "-            updater.remove(this.groupDatabaseUpdater);",
                "-        };",
                "-",
                "-        function AclFileUpdater(node, tabObject)",
                "-        {",
                "-            this.tabObject = tabObject;",
                "-            this.contentPane = tabObject.contentPane;",
                "-            var aclProviderObj = tabObject.modelObj;",
                "-            var controller = tabObject.controller;",
                "-            this.controller = controller;",
                "             this.modelObj = aclProviderObj;",
                "             this.management = controller.management;",
                "-            this.name = aclProviderObj.name;",
                "-            this.path = query(\".path\", node)[0];",
                "-            this.reloadButton = registry.byNode(query(\".reload\", node)[0]);",
                "-            this.reloadButton.on(\"click\", lang.hitch(this, this.reload));",
                "+            var node = construct.create(\"div\", null, containerNode, \"last\");",
                "+            node.innerHTML = template;",
                "+            parser.parse(containerNode)",
                "+                .then(lang.hitch(this, lang.hitch(this, function (instances)",
                "+                {",
                "+                    this.path = query(\".path\", node)[0];",
                "+                    this.reloadButton = registry.byNode(query(\".reload\", node)[0]);",
                "+                    this.reloadButton.on(\"click\", lang.hitch(this, this.reload));",
                "+                })));",
                "         }",
                "-        AclFileUpdater.prototype.update = function ()",
                "+        AclFile.prototype.update = function (data)",
                "         {",
                "-            if (!this.contentPane.selected)",
                "-            {",
                "-                return;",
                "-            }",
                "-",
                "-            var that = this;",
                "-",
                "-            this.management.load(this.modelObj, {excludeInheritedContext: true})",
                "-                .then(function (data)",
                "-                {",
                "-                    that.aclProviderData = data;",
                "-                    that.path.innerHTML = entities.encode(String(that.aclProviderData.path));",
                "-                }, function (error)",
                "-                {",
                "-                    util.tabErrorHandler(error, {",
                "-                        updater: that,",
                "-                        contentPane: that.tabObject.contentPane,",
                "-                        tabContainer: that.tabObject.controller.tabContainer,",
                "-                        name: that.modelObj.name,",
                "-                        category: \"Access Control Provider\"",
                "-                    });",
                "-                });",
                "-",
                "+            this.path.innerHTML = entities.encode(String(data.path));",
                "         };",
                "-        AclFileUpdater.prototype.reload = function ()",
                "+        AclFile.prototype.reload = function ()",
                "         {",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "new file mode 100644",
                "index 0000000000..b1c17f72ae",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "@@ -0,0 +1,201 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+define([\"dojo/_base/declare\",",
                "+        \"dojo/_base/lang\",",
                "+        \"dojo/dom\",",
                "+        \"dojo/parser\",",
                "+        \"dojo/query\",",
                "+        \"dojo/dom-construct\",",
                "+        \"dijit/registry\",",
                "+        \"dojox/html/entities\",",
                "+        \"dojo/text!accesscontrolprovider/showRuleBased.html\",",
                "+        \"dgrid/Grid\",",
                "+        \"dgrid/Keyboard\",",
                "+        \"dgrid/Selection\",",
                "+        \"dgrid/extensions/Pagination\",",
                "+        \"dgrid/extensions/ColumnResizer\",",
                "+        \"dgrid/extensions/DijitRegistry\",",
                "+        \"dstore/Memory\",",
                "+        \"dstore/Trackable\",",
                "+        \"qpid/common/util\",",
                "+        \"dijit/TitlePane\",",
                "+        \"dijit/form/Button\",",
                "+        \"dojo/domReady!\"],",
                "+    function (declare,",
                "+              lang,",
                "+              dom,",
                "+              parser,",
                "+              query,",
                "+              construct,",
                "+              registry,",
                "+              entities,",
                "+              template,",
                "+              Grid,",
                "+              Keyboard,",
                "+              Selection,",
                "+              Pagination,",
                "+              ColumnResizer,",
                "+              DijitRegistry,",
                "+              MemoryStore,",
                "+              TrackableStore,",
                "+              util) {",
                "+        function RuleBased(containerNode, aclProviderObj, controller)",
                "+        {",
                "+            this.modelObj = aclProviderObj;",
                "+            this.management = controller.management;",
                "+            var node = construct.create(\"div\", null, containerNode, \"last\");",
                "+            node.innerHTML = template;",
                "+            parser.parse(containerNode)",
                "+                .then(lang.hitch(this, function (instances) {",
                "+",
                "+                    this.defaultResult = query(\".defaultResult\", node)[0];",
                "+",
                "+                    var Store = MemoryStore.createSubclass(TrackableStore);",
                "+                    this._rulesStore = new Store({",
                "+                        data: [],",
                "+                        idProperty: \"id\"",
                "+                    });",
                "+",
                "+                    var GridConstructor = declare([Grid,",
                "+                                                   Keyboard,",
                "+                                                   Selection,",
                "+                                                   Pagination,",
                "+                                                   ColumnResizer,",
                "+                                                   DijitRegistry]);",
                "+                    this._rulesGrid = new GridConstructor({",
                "+                        rowsPerPage: 20,",
                "+                        selectionMode: 'none',",
                "+                        deselectOnRefresh: false,",
                "+                        allowSelectAll: true,",
                "+                        cellNavigation: true,",
                "+                        className: 'dgrid-autoheight',",
                "+                        pageSizeOptions: [10, 20, 30, 40, 50, 100],",
                "+                        adjustLastColumn: true,",
                "+                        collection: this._rulesStore,",
                "+                        highlightRow: function () {",
                "+                        },",
                "+                        columns: [",
                "+                            {",
                "+                                label: 'Identity',",
                "+                                field: \"identity\"",
                "+                            }, {",
                "+                                label: \"Object Type\",",
                "+                                field: \"objectType\"",
                "+                            }, {",
                "+                                label: \"Operation\",",
                "+                                field: \"operation\"",
                "+                            }, {",
                "+                                label: \"Outcome\",",
                "+                                field: \"outcome\"",
                "+                            }, {",
                "+                                label: \"Attributes\",",
                "+                                field: \"attributes\",",
                "+                                sortable: false,",
                "+                                formatter: function (value, object) {",
                "+                                    var markup = \"\";",
                "+                                    if (value)",
                "+                                    {",
                "+                                        markup = \"<div class='keyValuePair'>\";",
                "+                                        for (var key in value)",
                "+                                        {",
                "+                                            if (value.hasOwnProperty(key))",
                "+                                            {",
                "+                                                markup += \"<div>\" + entities.encode(String(key)) + \"=\"",
                "+                                                          + entities.encode(String(value[key])) + \"</div>\";",
                "+                                            }",
                "+                                        }",
                "+                                        markup += \"</div>\"",
                "+                                    }",
                "+                                    return markup;",
                "+                                }",
                "+                            }",
                "+                        ]",
                "+                    }, query(\".rules\", node)[0]);",
                "+",
                "+                    this._rulesGrid.startup();",
                "+",
                "+                    this.loadButton = registry.byNode(query(\".load\", node)[0]);",
                "+                    this.loadButton.on(\"click\", lang.hitch(this, this.load));",
                "+",
                "+                    this.extractButton = registry.byNode(query(\".extract\", node)[0]);",
                "+                    this.extractButton.on(\"click\", lang.hitch(this, this.extractRules));",
                "+                }));",
                "+        }",
                "+",
                "+        RuleBased.prototype.update = function (data) {",
                "+            this.defaultResult.innerHTML = entities.encode(String(data.defaultResult));",
                "+",
                "+            var rules = [];",
                "+            if (data && data.rules)",
                "+            {",
                "+                for (var i = 0; i < data.rules.length; i++)",
                "+                {",
                "+                    var rule = {id: Number(i)};",
                "+                    lang.mixin(rule, data.rules[i]);",
                "+                    rules.push(rule);",
                "+                }",
                "+            }",
                "+",
                "+            util.updateSyncDStore(this._rulesStore, rules, \"id\");",
                "+        };",
                "+",
                "+        RuleBased.prototype.load = function () {",
                "+            this.loadButton.set(\"disabled\", true);",
                "+            if (this.loadForm)",
                "+            {",
                "+                this.loadForm.show();",
                "+            }",
                "+            else",
                "+            {",
                "+                require([\"qpid/management/accesscontrolprovider/rulebased/LoadForm\"],",
                "+                    lang.hitch(this, function (LoadForm) {",
                "+                        this.loadForm = new LoadForm();",
                "+                        this.loadForm.on(\"load\", lang.hitch(this, this.loadFromFile));",
                "+                        this.loadForm.show();",
                "+                    }));",
                "+            }",
                "+        };",
                "+",
                "+        RuleBased.prototype.loadFromFile = function (event) {",
                "+            this.management.update({",
                "+                type: this.modelObj.type,",
                "+                name: \"loadFromFile\",",
                "+                parent: this.modelObj",
                "+            }, {path: event.path})",
                "+                .then(lang.hitch(this, function(){",
                "+                    this.loadForm.hide();",
                "+                    }),",
                "+                      this.management.xhrErrorHandler)",
                "+                .always(lang.hitch(this, function () {",
                "+                    this.loadButton.set(\"disabled\", false);",
                "+                }));",
                "+        };",
                "+",
                "+        RuleBased.prototype.extractRules = function () {",
                "+            this.management.downloadIntoFrame({",
                "+                type: this.modelObj.type,",
                "+                name: \"extractRules\",",
                "+                parent: this.modelObj",
                "+            });",
                "+        };",
                "+",
                "+        return RuleBased;",
                "+    });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "new file mode 100644",
                "index 0000000000..364caf6e24",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "@@ -0,0 +1,103 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+define([\"dojo/_base/declare\",",
                "+        \"dojo/_base/lang\",",
                "+        \"dojo/Evented\",",
                "+        \"dojo/keys\",",
                "+        \"dojo/text!accesscontrolprovider/rulebased/LoadForm.html\",",
                "+        \"qpid/common/ResourceWidget\",",
                "+        \"dijit/Dialog\",",
                "+        \"dojox/validate/us\",",
                "+        \"dojox/validate/web\",",
                "+        \"dijit/_WidgetBase\",",
                "+        \"dijit/_TemplatedMixin\",",
                "+        \"dijit/_WidgetsInTemplateMixin\",",
                "+        \"dijit/form/CheckBox\",",
                "+        \"dijit/form/ComboBox\",",
                "+        \"dijit/form/ValidationTextBox\",",
                "+        \"dijit/form/Button\",",
                "+        \"dijit/form/Form\",",
                "+        \"dojo/domReady!\"],",
                "+    function (declare,",
                "+              lang,",
                "+              Evented,",
                "+              keys,",
                "+              template) {",
                "+",
                "+        return declare(\"qpid.management.accesscontrolprovider.rulebased.LoadForm\",",
                "+            [dijit._WidgetBase, dijit._TemplatedMixin, dijit._WidgetsInTemplateMixin, Evented],",
                "+            {",
                "+                /**",
                "+                 * dijit._TemplatedMixin enforced fields",
                "+                 */",
                "+                //Strip out the apache comment header from the template html as comments unsupported.",
                "+                templateString: template.replace(/<!--[\\s\\S]*?-->/g, \"\"),",
                "+",
                "+                /**",
                "+                 * template attach points",
                "+                 */",
                "+                path: null,",
                "+                loadDialog: null,",
                "+                loadForm: null,",
                "+                okButton: null,",
                "+                cancelButton: null,",
                "+                warning: null,",
                "+",
                "+                postCreate: function () {",
                "+                    this.inherited(arguments);",
                "+                    this.cancelButton.on(\"click\", lang.hitch(this, this._onCancel));",
                "+                    this.okButton.on(\"click\", lang.hitch(this, this._onFormSubmit));",
                "+",
                "+                    var reader = window.FileReader ? new FileReader() : undefined;",
                "+                    if (!reader)",
                "+                    {",
                "+                        this.warning.innerHTML = \"File upload requires a more recent browser with HTML5 support\";",
                "+                        this.warning.className = this.warning.className.replace(\"hidden\", \"\");",
                "+                    }",
                "+                },",
                "+                show: function()",
                "+                {",
                "+                    this.path.reset();",
                "+                    this.loadDialog.show();",
                "+                },",
                "+                hide: function()",
                "+                {",
                "+                    this.loadDialog.hide();",
                "+                },",
                "+                _onCancel: function () {",
                "+                    this.emit(\"cancel\");",
                "+                    this.hide();",
                "+                },",
                "+                _onFormSubmit: function () {",
                "+                    if (this.loadForm.validate())",
                "+                    {",
                "+                        var path = this.path.get(\"value\");",
                "+                        this.emit(\"load\", {path: path});",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        alert('Form contains invalid data.  Please correct first');",
                "+                    }",
                "+",
                "+                    return false;",
                "+                }",
                "+            });",
                "+    });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/add.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/add.js",
                "new file mode 100644",
                "index 0000000000..9e4558efc9",
                "--- /dev/null",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/add.js",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+define([\"dojo/dom\", \"qpid/common/util\", \"dijit/registry\", \"dijit/form/FilteringSelect\"],",
                "+    function (dom, util, registry)",
                "+    {",
                "+        return {",
                "+            show: function (data)",
                "+            {",
                "+                var that = this;",
                "+                util.parseHtmlIntoDiv(data.containerNode,",
                "+                    \"accesscontrolprovider/rulebased/add.html\",",
                "+                    function ()",
                "+                    {",
                "+                        that._postParse(data);",
                "+                    });",
                "+            },",
                "+            _postParse: function (data)",
                "+            {",
                "+                var validValues = data.metadata.getMetaData(data.category, data.type).attributes.defaultResult.validValues;",
                "+                var validValueStore = util.makeTypeStore(validValues);",
                "+",
                "+                var defaultResult = registry.byId(\"addAccessControlProvider.ruleBased.defaultResult\");",
                "+                defaultResult.set(\"store\", validValueStore);",
                "+",
                "+                util.applyToWidgets(data.containerNode,",
                "+                    data.category,",
                "+                    data.type,",
                "+                    data.initialData,",
                "+                    data.metadata,",
                "+                    data.effectiveData);",
                "+",
                "+            }",
                "+        };",
                "+    });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "index 7eef29957a..dd5a2fa117 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "@@ -88,3 +88,7 @@ define([\"dojo/_base/lang\",",
                "             this.accessControlProviderForm.reset();",
                "-            this.supportedAccessControlProviderTypes = management.metadata.getTypesForCategory(\"AccessControlProvider\");",
                "+            this.category =",
                "+                modelObj && (modelObj.type === \"virtualhost\" || modelObj.type === \"virtualhostaccesscontrolprovider\")",
                "+                    ? \"VirtualHostAccessControlProvider\"",
                "+                    : \"AccessControlProvider\";",
                "+            this.supportedAccessControlProviderTypes = management.metadata.getTypesForCategory(this.category);",
                "             this.supportedAccessControlProviderTypes.sort();",
                "@@ -92,3 +96,9 @@ define([\"dojo/_base/lang\",",
                "             this.accessControlProviderType.set(\"store\", accessControlProviderTypeStore);",
                "-            util.applyMetadataToWidgets(dom.byId(\"addAccessControlProvider.contentPane\"), \"AccessControlProvider\", \"AllowAll\", management.metadata);",
                "+            if (this.supportedAccessControlProviderTypes.length > 0)",
                "+            {",
                "+                util.applyMetadataToWidgets(dom.byId(\"addAccessControlProvider.contentPane\"),",
                "+                    this.category,",
                "+                    this.supportedAccessControlProviderTypes[0],",
                "+                    management.metadata);",
                "+            }",
                "@@ -114,3 +124,3 @@ define([\"dojo/_base/lang\",",
                "                 var that = this;",
                "-                this.management.create(\"accesscontrolprovider\", this.modelObj, accessControlProviderData)",
                "+                this.management.create(this.category, this.modelObj, accessControlProviderData)",
                "                     .then(function (x)",
                "@@ -130,3 +140,3 @@ define([\"dojo/_base/lang\",",
                "                 \"qpid/management/accesscontrolprovider/\",",
                "-                \"AccessControlProvider\");",
                "+                this.category);",
                "         },",
                "@@ -157,3 +167,5 @@ define([\"dojo/_base/lang\",",
                "                             effectiveData: that.effectiveData,",
                "-                            metadata: that.management.metadata",
                "+                            metadata: that.management.metadata,",
                "+                            category: category,",
                "+                            type: type",
                "                         });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/controller.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/controller.js",
                "index ac8a695d09..83a152c05b 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/controller.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/controller.js",
                "@@ -93,2 +93,3 @@ define([\"dojo/dom\",",
                "             accesscontrolprovider: AccessControlProvider,",
                "+            virtualhostaccesscontrolprovider: AccessControlProvider,",
                "             port: Port,",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "index 21a616c89f..f87f61cad9 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "@@ -187,3 +187,3 @@ define([\"dojo/_base/declare\",",
                "                 searchForm: null,",
                "-                exportButton: null,",
                "+                extractButton: null,",
                "                 exportButtonTooltip: null,",
                "@@ -247,3 +247,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.on(\"click\", lang.hitch(this, this._deleteQuery));",
                "-                    this.exportButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "+                    this.extractButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "@@ -255,3 +255,3 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.set(\"disabled\", !this._ownQuery || newQuery);",
                "-                    this.exportButton.set(\"disabled\", true);",
                "+                    this.extractButton.set(\"disabled\", true);",
                "@@ -594,3 +594,3 @@ define([\"dojo/_base/declare\",",
                "                     this._buildColumnsIfHeadersChanged(e.data);",
                "-                    this.exportButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "+                    this.extractButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "                 },",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "index beda11ed81..62bb2fd3f9 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/showVirtualHost.html",
                "@@ -142,2 +142,12 @@",
                "         <br/>",
                "+        <div data-dojo-type=\"dijit.TitlePane\"",
                "+             data-dojo-props=\"title: 'Virtual Host Access Control Providers'\"",
                "+             class=\"accessControlProviders\">",
                "+            <div class=\"virtualHostAccessControlProviders\"></div>",
                "+            <button data-dojo-type=\"dijit.form.Button\"",
                "+                    class=\"addVirtualHostAccessControlProvider\">Add Access Control Provider</button>",
                "+            <button data-dojo-type=\"dijit.form.Button\"",
                "+                    class=\"deleteVirtualHostAccessControlProvider\">Delete Access Control Provider</button>",
                "+        </div>",
                "+        <br/>",
                "     </div>"
            ],
            "changed_files": [
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AbstractCommonRuleBasedAccessControlProvider.java",
                "broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/LoadForm.html",
                "broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/rulebased/add.html",
                "broker-plugins/management-http/src/main/java/resources/accesscontrolprovider/showRuleBased.html",
                "broker-plugins/management-http/src/main/java/resources/css/common.css",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/ResourceWidget.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/AccessControlProvider.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/VirtualHost.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/add.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/addAccessControlProvider.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/controller.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "broker-plugins/management-http/src/main/java/resources/showVirtualHost.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7925": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "03b08426e3cc75ee43adbb18bd110dd908cfce51"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7925",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fcca9d20a04aa99943dc4ddd8a1bb4502fe0e9f3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516188575,
            "hunks": 3,
            "message": "QPID-8046: [Broker-J] [PlainNegotiator] Eliminate redundant UTF-8/UnsupportedEncodingException catch block",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "index e56f8cae2e..d5fe74e900 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "@@ -22,3 +22,3 @@ package org.apache.qpid.server.security.auth.sasl.plain;",
                "-import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                " import java.nio.charset.StandardCharsets;",
                "@@ -39,3 +39,3 @@ public class PlainNegotiator implements SaslNegotiator",
                "     public static final String MECHANISM = \"PLAIN\";",
                "-    private static final String UTF8 = StandardCharsets.UTF_8.name();",
                "+    private static final Charset UTF8 = StandardCharsets.UTF_8;",
                "@@ -88,13 +88,6 @@ public class PlainNegotiator implements SaslNegotiator",
                "         String password;",
                "-        try",
                "-        {",
                "-            _username = new String(response, authzidNullPosition + 1, authcidNullPosition - authzidNullPosition - 1, UTF8);",
                "-            // TODO: should not get pwd as a String but as a char array...",
                "-            int passwordLen = response.length - authcidNullPosition - 1;",
                "-            password = new String(response, authcidNullPosition + 1, passwordLen, UTF8);",
                "-        }",
                "-        catch (UnsupportedEncodingException e)",
                "-        {",
                "-            throw new RuntimeException(\"JVM does not support UTF8\", e);",
                "-        }",
                "+        _username = new String(response, authzidNullPosition + 1, authcidNullPosition - authzidNullPosition - 1, UTF8);",
                "+        // TODO: should not get pwd as a String but as a char array...",
                "+        int passwordLen = response.length - authcidNullPosition - 1;",
                "+        password = new String(response, authcidNullPosition + 1, passwordLen, UTF8);",
                "         return _usernamePasswordAuthenticationProvider.authenticate(_username, password);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8046": "",
                "UTF-8": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4b9fb37abbe882193b16595ed7b8e9d8383f59e1"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8046, UTF-8",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9cd0e2f98a525e59755b168ea0301cf8e9a51dc4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519726638,
            "hunks": 0,
            "message": "QPID-8103: [Broker-J] Remove file committed by mistake (cherry picked from commit 0a3c7a2fee6d6c078aabf5ee4592a4a77cb0cd68)",
            "diff": [
                "diff --git a/QPID-8066.tar.bz2 b/QPID-8066.tar.bz2",
                "deleted file mode 100644",
                "index 1fe14142a7..0000000000",
                "Binary files a/QPID-8066.tar.bz2 and /dev/null differ"
            ],
            "changed_files": [
                "QPID-8066.tar.bz2"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0a3c7a2fee6d6c078aabf5ee4592a4a77cb0cd68"
                ]
            ],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8576f6d4fd3ba79fad6a7406c262b6b16c28bb87",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517497635,
            "hunks": 2,
            "message": "QPID-8090: [Broker-J] Address review comments",
            "diff": [
                "diff --git a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "index 3ee68811d4..bcfa0db8ce 100644",
                "--- a/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "+++ b/broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java",
                "@@ -37,2 +37,3 @@ import com.jolbox.bonecp.BoneCPConfig;",
                "+import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                " import org.apache.qpid.server.store.jdbc.ConnectionProvider;",
                "@@ -86,3 +87,3 @@ public class BoneCPConnectionProvider implements ConnectionProvider",
                "         {",
                "-            throw new ServerScopedRuntimeException(\"Unexpected exception on applying BoneCP configuration\", e);",
                "+            throw new IllegalConfigurationException(\"Unexpected exception on applying BoneCP configuration\", e);",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/jdbc-provider-bone/src/main/java/org/apache/qpid/server/store/jdbc/bonecp/BoneCPConnectionProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8090": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "90d7b41f05a0bb66835424b9b84159f4cdd25fd2"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8090",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "957f7eda039eb165aa2f75ab5f3afddbaefac87e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521556827,
            "hunks": 2,
            "message": "QPID-8124: [Broker-J] Fix ACL logging on checking web management console access after REST SASL authentication",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java",
                "index 080b29179c..8d10ec4d79 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java",
                "@@ -251,5 +251,4 @@ public class SaslServlet extends AbstractServlet",
                "             {",
                "-                HttpManagementUtil.assertManagementAccess(broker, original);",
                "                 Subject subject = HttpManagementUtil.createServletConnectionSubject(request, original);",
                "-",
                "+                HttpManagementUtil.assertManagementAccess(broker, subject);",
                "                 HttpManagementUtil.saveAuthorisedSubject(request, subject);"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8124": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b5d67e003d0cbe71915734e7fa9a3ffb731e9049"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8124",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7410b29d11cc468ba133ecd6e9b486b1f21829fc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517495591,
            "hunks": 5,
            "message": "QPID-8081: [Broker-J] Fix rolling of log files on restart with roll daily policy",
            "diff": [
                "diff --git a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "index af1aaae7df..16fd87d893 100644",
                "--- a/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "+++ b/broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java",
                "@@ -128,9 +128,8 @@ public class AppenderUtils",
                "         @Override",
                "-        protected void computeNextCheck()",
                "+        public void start()",
                "         {",
                "-            super.computeNextCheck();",
                "-            if (_rollOnRestart && _isFirst)",
                "+            super.start();",
                "+            if (_rollOnRestart)",
                "             {",
                "-                _isFirst = false;",
                "-                nextCheck = 0l;",
                "+                nextCheck = 0L;",
                "             }",
                "@@ -144,8 +143,10 @@ public class AppenderUtils",
                "                 _isFirst = false;",
                "-                return activeFile.exists() && activeFile.length() != 0l;",
                "-            }",
                "-            else",
                "-            {",
                "-                return super.isTriggeringEvent(activeFile, event);",
                "+                if (activeFile.exists() && activeFile.length() == 0)",
                "+                {",
                "+                    computeNextCheck();",
                "+                    return false;",
                "+                }",
                "             }",
                "+",
                "+            return super.isTriggeringEvent(activeFile, event);",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/logging-logback/src/main/java/org/apache/qpid/server/logging/logback/AppenderUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8081": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d398797eb0378f5423cfc8ffef2e5b853b3750e"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8081",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6cdcc25b9489f53bea64169e4b4386b72ef14ec5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522273844,
            "hunks": 3,
            "message": "QPID-7925: [Broker-J] [WMC] Emit 'hide' event on hiding of load form",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "index 10b3b83839..8b32916680 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "@@ -171,2 +171,5 @@ define([\"dojo/_base/declare\",",
                "                         this.loadForm.on(\"load\", lang.hitch(this, this.loadFromFile));",
                "+                        this.loadForm.on(\"hide\", lang.hitch(this, function () {",
                "+                            this.loadButton.set(\"disabled\", false);",
                "+                        }));",
                "                         this.loadForm.show();",
                "@@ -188,6 +191,3 @@ define([\"dojo/_base/declare\",",
                "                         this.loadForm.reset();",
                "-                    }))",
                "-                .always(lang.hitch(this, function () {",
                "-                    this.loadButton.set(\"disabled\", false);",
                "-                }));",
                "+                    }));",
                "         };",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "index 3330ce48dc..36887b40df 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js",
                "@@ -74,2 +74,5 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "+                    this.loadDialog.onHide = lang.hitch(this, function () {",
                "+                        this.emit(\"hide\");",
                "+                    });",
                "                 },"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/RuleBased.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/rulebased/LoadForm.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7925": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9788db560c7784e82b5dbf45d68fad0962d32a1a"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7925",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2443fe648347e5775a1f1c41c20eada49f62970b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523550984,
            "hunks": 29,
            "message": "QPID-8163: [Access Control Plugin] Support OWNER psuedo principal in ACL rules.",
            "diff": [
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/LegacyAccessControlAdapter.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/LegacyAccessControlAdapter.java",
                "index 9a072ab907..0aab30059d 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/LegacyAccessControlAdapter.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/LegacyAccessControlAdapter.java",
                "@@ -24,2 +24,3 @@ import static org.apache.qpid.server.security.access.config.LegacyOperation.ACCE",
                " import static org.apache.qpid.server.security.access.config.LegacyOperation.BIND;",
                "+import static org.apache.qpid.server.security.access.config.LegacyOperation.CREATE;",
                " import static org.apache.qpid.server.security.access.config.LegacyOperation.INVOKE;",
                "@@ -205,3 +206,3 @@ class LegacyAccessControlAdapter",
                "         {",
                "-            setQueueProperties((Queue)configuredObject, properties);",
                "+            setQueueProperties((Queue<?>)configuredObject, properties);",
                "         }",
                "@@ -209,3 +210,3 @@ class LegacyAccessControlAdapter",
                "         {",
                "-            Exchange<?> exchange = (Exchange<?>)configuredObject;",
                "+            Exchange<?> exchange = (Exchange<?>) configuredObject;",
                "             Object lifeTimePolicy = exchange.getAttribute(ConfiguredObject.LIFETIME_POLICY);",
                "@@ -215,2 +216,7 @@ class LegacyAccessControlAdapter",
                "             properties.put(ObjectProperties.Property.TYPE, (String) exchange.getAttribute(Exchange.TYPE));",
                "+            if (exchange.getAttribute(Queue.CREATED_BY) != null)",
                "+            {",
                "+                properties.put(ObjectProperties.Property.CREATED_BY, (String) exchange.getAttribute(ConfiguredObject.CREATED_BY));",
                "+            }",
                "+",
                "             VirtualHost virtualHost = (VirtualHost) exchange.getParent();",
                "@@ -223,14 +229,23 @@ class LegacyAccessControlAdapter",
                "         }",
                "-        else if (isBrokerType(configuredObjectType))",
                "-        {",
                "-            String description = String.format(\"%s %s '%s'\",",
                "-                                               configuredObjectOperation == null? null : configuredObjectOperation.name().toLowerCase(),",
                "-                                               configuredObjectType == null ? null : configuredObjectType.getSimpleName().toLowerCase(),",
                "-                                               objectName);",
                "-            properties = new OperationLoggingDetails(description);",
                "-        }",
                "-        else if (isVirtualHostType(configuredObjectType))",
                "+        else",
                "         {",
                "-            ConfiguredObject<?> virtualHost = getModel().getAncestor(VirtualHost.class, (ConfiguredObject<?>)configuredObject);",
                "-            properties.put(ObjectProperties.Property.VIRTUALHOST_NAME, (String)virtualHost.getAttribute(VirtualHost.NAME));",
                "+            final ConfiguredObject<?> object = (ConfiguredObject<?>) configuredObject;",
                "+            if (isBrokerType(configuredObjectType))",
                "+            {",
                "+                String description = String.format(\"%s %s '%s'\",",
                "+                                                   configuredObjectOperation == null? null : configuredObjectOperation.name().toLowerCase(),",
                "+                                                   configuredObjectType == null ? null : configuredObjectType.getSimpleName().toLowerCase(),",
                "+                                                   objectName);",
                "+                properties = new OperationLoggingDetails(description);",
                "+            }",
                "+            else if (isVirtualHostType(configuredObjectType))",
                "+            {",
                "+                ConfiguredObject<?> virtualHost = getModel().getAncestor(VirtualHost.class,",
                "+                                                                         object);",
                "+                properties.put(ObjectProperties.Property.VIRTUALHOST_NAME, (String)virtualHost.getAttribute(VirtualHost.NAME));",
                "+            }",
                "+            if (object.getAttribute(ConfiguredObject.CREATED_BY) != null)",
                "+            {",
                "+                properties.put(ObjectProperties.Property.CREATED_BY, (String) object.getAttribute(ConfiguredObject.CREATED_BY));",
                "+            }",
                "         }",
                "@@ -247,2 +262,6 @@ class LegacyAccessControlAdapter",
                "         properties.put(ObjectProperties.Property.EXCLUSIVE, queue.getAttribute(Queue.EXCLUSIVE) != ExclusivityPolicy.NONE);",
                "+        if (queue.getAttribute(Queue.CREATED_BY) != null)",
                "+        {",
                "+            properties.put(ObjectProperties.Property.CREATED_BY, (String) queue.getAttribute(Queue.CREATED_BY));",
                "+        }",
                "         Object alternateBinding = queue.getAttribute(Queue.ALTERNATE_BINDING);",
                "@@ -308,2 +327,4 @@ class LegacyAccessControlAdapter",
                "         Class<? extends ConfiguredObject> categoryClass = configuredObject.getCategoryClass();",
                "+        String createdBy = configuredObject instanceof ConfiguredObject<?> ? (String) ((ConfiguredObject) configuredObject).getAttribute(ConfiguredObject.CREATED_BY) : null;",
                "+",
                "         if(categoryClass == Exchange.class)",
                "@@ -323,2 +344,6 @@ class LegacyAccessControlAdapter",
                "                 }",
                "+                if (createdBy != null)",
                "+                {",
                "+                    props.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+                }",
                "                 return _accessControl.authorise(PUBLISH, EXCHANGE, props);",
                "@@ -333,2 +358,6 @@ class LegacyAccessControlAdapter",
                "                 properties.put(ObjectProperties.Property.VIRTUALHOST_NAME, virtualHostName);",
                "+                if (createdBy != null)",
                "+                {",
                "+                    properties.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+                }",
                "                 return _accessControl.authorise(LegacyOperation.ACCESS, ObjectType.VIRTUALHOST, properties);",
                "@@ -340,3 +369,9 @@ class LegacyAccessControlAdapter",
                "             {",
                "-                return _accessControl.authorise(LegacyOperation.ACCESS, ObjectType.MANAGEMENT, ObjectProperties.EMPTY);",
                "+                ObjectProperties props = ObjectProperties.EMPTY;",
                "+                if (createdBy != null)",
                "+                {",
                "+                    props = new ObjectProperties();",
                "+                    props.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+                }",
                "+                return _accessControl.authorise(LegacyOperation.ACCESS, ObjectType.MANAGEMENT, props);",
                "             }",
                "@@ -349,5 +384,10 @@ class LegacyAccessControlAdapter",
                "-                final ObjectProperties _props =",
                "+                final ObjectProperties props =",
                "                         new ObjectProperties(queue.getParent().getName(), \"\", queue.getName());",
                "-                return _accessControl.authorise(PUBLISH, EXCHANGE, _props);",
                "+                if (createdBy != null)",
                "+                {",
                "+                    props.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+                }",
                "+",
                "+                return _accessControl.authorise(PUBLISH, EXCHANGE, props);",
                "             }",
                "@@ -373,2 +413,10 @@ class LegacyAccessControlAdapter",
                "+        String createdBy = configuredObject instanceof ConfiguredObject<?> ? (String) ((ConfiguredObject) configuredObject).getAttribute(ConfiguredObject.CREATED_BY)",
                "+                : null;",
                "+        final ObjectProperties properties = new ObjectProperties();",
                "+        if (createdBy != null)",
                "+        {",
                "+            properties.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+        }",
                "+",
                "         // Otherwise fallback to the older rule-style",
                "@@ -377,3 +425,2 @@ class LegacyAccessControlAdapter",
                "             Queue queue = (Queue) configuredObject;",
                "-            final ObjectProperties properties = new ObjectProperties();",
                "             if(\"clearQueue\".equals(methodName))",
                "@@ -395,6 +442,9 @@ class LegacyAccessControlAdapter",
                "         {",
                "-            ObjectProperties empty = categoryClass == BrokerLogger.class ? ObjectProperties.EMPTY : new ObjectProperties(",
                "-                    ((ConfiguredObject) configuredObject).getParent().getName());",
                "+            if (categoryClass != BrokerLogger.class)",
                "+            {",
                "+                properties.setName(((ConfiguredObject<?>) configuredObject).getParent().getName());",
                "+            }",
                "+",
                "             return _accessControl.authorise(ACCESS_LOGS, categoryClass == BrokerLogger.class ? ObjectType.BROKER : ObjectType.VIRTUALHOST,",
                "-                                            empty);",
                "+                                            properties);",
                "         }",
                "@@ -402,3 +452,3 @@ class LegacyAccessControlAdapter",
                "         {",
                "-            _accessControl.authorise(LegacyOperation.SHUTDOWN, ObjectType.BROKER, ObjectProperties.EMPTY);",
                "+            _accessControl.authorise(LegacyOperation.SHUTDOWN, ObjectType.BROKER, properties);",
                "         }",
                "@@ -406,6 +456,10 @@ class LegacyAccessControlAdapter",
                "         {",
                "+            final ObjectProperties props = createObjectPropertiesForExchangeBind(arguments, configuredObject);",
                "+            if (createdBy != null)",
                "+            {",
                "+                props.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+            }",
                "             if (\"bind\".equals(methodName))",
                "             {",
                "-                final ObjectProperties properties = createObjectPropertiesForExchangeBind(arguments, configuredObject);",
                "-                return _accessControl.authorise(BIND, EXCHANGE, properties);",
                "+                return _accessControl.authorise(BIND, EXCHANGE, props);",
                "             }",
                "@@ -413,4 +467,3 @@ class LegacyAccessControlAdapter",
                "             {",
                "-                final ObjectProperties properties = createObjectPropertiesForExchangeBind(arguments, configuredObject);",
                "-                return _accessControl.authorise(UNBIND, EXCHANGE, properties);",
                "+                return _accessControl.authorise(UNBIND, EXCHANGE, props);",
                "             }",
                "@@ -444,2 +497,8 @@ class LegacyAccessControlAdapter",
                "             properties.put(ObjectProperties.Property.COMPONENT, componentName);",
                "+            final String createdBy = (String) configuredObject.getAttribute(ConfiguredObject.CREATED_BY);",
                "+            if (createdBy != null)",
                "+            {",
                "+                properties.put(ObjectProperties.Property.CREATED_BY, createdBy);",
                "+            }",
                "+",
                "         }",
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/ObjectProperties.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/ObjectProperties.java",
                "index 8cd57f0d99..deec6f7da1 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/ObjectProperties.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/ObjectProperties.java",
                "@@ -65,3 +65,4 @@ public class ObjectProperties",
                "         METHOD_NAME,",
                "-        ATTRIBUTES;",
                "+        ATTRIBUTES,",
                "+        CREATED_BY;",
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/Rule.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/Rule.java",
                "index b0d1b09ee2..bf82b6cbc1 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/Rule.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/Rule.java",
                "@@ -35,2 +35,5 @@ public class Rule",
                "+\t/** String indicating all identified. */",
                "+\tpublic static final String OWNER = \"owner\";",
                "+",
                "     private final String _identity;",
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/RuleSet.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/RuleSet.java",
                "index cf439fe363..151e1acca6 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/RuleSet.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/RuleSet.java",
                "@@ -43,2 +43,3 @@ import org.apache.qpid.server.security.Result;",
                " import org.apache.qpid.server.security.access.plugins.RuleOutcome;",
                "+import org.apache.qpid.server.security.auth.AuthenticatedPrincipal;",
                "@@ -110,3 +111,3 @@ public class RuleSet implements EventLoggerProvider",
                "             // Save the rules we selected",
                "-            objects.put(objectType, filtered);",
                "+            objects.put(objectType, filtered == null ? null : Collections.unmodifiableList(filtered));",
                "@@ -158,2 +159,26 @@ public class RuleSet implements EventLoggerProvider",
                "+        final boolean ownerRules = rules.stream()",
                "+                                        .anyMatch(rule -> rule.getIdentity().equalsIgnoreCase(Rule.OWNER));",
                "+",
                "+        if (ownerRules)",
                "+        {",
                "+            rules = new LinkedList<>(rules);",
                "+",
                "+            if (operation == LegacyOperation.CREATE)",
                "+            {",
                "+                rules.removeIf(rule -> rule.getIdentity().equalsIgnoreCase(Rule.OWNER));",
                "+            }",
                "+            else",
                "+            {",
                "+                // Discard OWNER rules if the object wasn't created by the subject",
                "+                final String objectCreator = properties.get(ObjectProperties.Property.CREATED_BY);",
                "+                final Principal principal =",
                "+                        AuthenticatedPrincipal.getOptionalAuthenticatedPrincipalFromSubject(subject);",
                "+                if (principal == null || !principal.getName().equalsIgnoreCase(objectCreator))",
                "+                {",
                "+                    rules.removeIf(rule -> rule.getIdentity().equalsIgnoreCase(Rule.OWNER));",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "         // Iterate through a filtered set of rules dealing with this identity and operation",
                "@@ -161,3 +186,2 @@ public class RuleSet implements EventLoggerProvider",
                "         {",
                "-",
                "             LOGGER.debug(\"Checking against rule: {}\", rule);",
                "@@ -214,3 +238,4 @@ public class RuleSet implements EventLoggerProvider",
                "     {",
                "-        if (rule.getIdentity().equalsIgnoreCase(Rule.ALL))",
                "+        if (rule.getIdentity().equalsIgnoreCase(Rule.ALL) ||",
                "+            rule.getIdentity().equalsIgnoreCase(Rule.OWNER))",
                "         {"
            ],
            "changed_files": [
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/LegacyAccessControlAdapter.java",
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/ObjectProperties.java",
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/Rule.java",
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/config/RuleSet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8163": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5f19120a82e119050c80172d756442eae1ec1897"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8163",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "291bccbc54e04bd199f2897977caabc4cff3e080",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521026480,
            "hunks": 1,
            "message": "QPID-8123: [Broker-J] [System Tests] Fix regression in BDBUpgradeTest",
            "diff": [
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 9580571007..36207186b2 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -145,2 +145,6 @@",
                "         </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.qpid</groupId>",
                "+          <artifactId>qpid-client</artifactId>",
                "+        </dependency>",
                "       </dependencies>"
            ],
            "changed_files": [
                "bdbstore/systests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8123": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8123",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac9069ac8cc300ca78e7ef1461de5b2eefb4fe46",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521318168,
            "hunks": 14,
            "message": "QPID-7567 : [Broker-J] Delegate consistently to underlying KeyManager",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "index 0abf44be72..f16d46a0b8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "@@ -35,11 +35,6 @@ import javax.net.ssl.X509ExtendedKeyManager;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                " public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                " {",
                "-    private static final Logger LOGGER = LoggerFactory.getLogger(QpidServerX509KeyManager.class);",
                "-",
                "-    private X509ExtendedKeyManager _delegate;",
                "-    private String _alias;",
                "+    private final X509ExtendedKeyManager _delegate;",
                "+    private final String _alias;",
                "@@ -48,10 +43,9 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        this._alias = alias;",
                "-        KeyStore ks = SSLUtil.getInitializedKeyStore(keyStoreUrl,keyStorePassword,keyStoreType);",
                "+        _alias = alias;",
                "+        KeyStore ks = SSLUtil.getInitializedKeyStore(keyStoreUrl, keyStorePassword, keyStoreType);",
                "         KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyManagerFactoryAlgorithmName);",
                "         kmf.init(ks, keyStorePassword.toCharArray());",
                "-        this._delegate = (X509ExtendedKeyManager)kmf.getKeyManagers()[0];",
                "+        _delegate = (X509ExtendedKeyManager) kmf.getKeyManagers()[0];",
                "     }",
                "-",
                "     @Override",
                "@@ -59,3 +53,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        return _alias == null ? _delegate.chooseClientAlias(keyType, issuers, socket) : _alias;",
                "+        return _alias != null ? _alias : _delegate.chooseClientAlias(keyType, issuers, socket);",
                "     }",
                "@@ -65,4 +59,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        LOGGER.debug(\"chooseServerAlias:Returning alias {}\", _alias);",
                "-        return _alias;",
                "+        return _alias != null ? _alias : _delegate.chooseServerAlias(keyType, issuers, socket);",
                "     }",
                "@@ -78,3 +71,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        return _delegate.getClientAliases(keyType, issuers);",
                "+        return _alias != null ? new String[] {_alias} : _delegate.getClientAliases(keyType, issuers);",
                "     }",
                "@@ -82,5 +75,5 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     @Override",
                "-    public PrivateKey getPrivateKey(String alias)",
                "+    public String[] getServerAliases(String keyType, Principal[] issuers)",
                "     {",
                "-        return _delegate.getPrivateKey(alias);",
                "+        return _alias != null ? new String[] {_alias} : _delegate.getServerAliases(keyType, issuers);",
                "     }",
                "@@ -88,6 +81,5 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     @Override",
                "-    public String[] getServerAliases(String keyType, Principal[] issuers)",
                "+    public PrivateKey getPrivateKey(String alias)",
                "     {",
                "-        LOGGER.debug(\"getServerAliases:Returning alias {}\", _alias);",
                "-        return new String[]{_alias};",
                "+        return _delegate.getPrivateKey(alias);",
                "     }",
                "@@ -97,3 +89,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        return _alias == null ? _delegate.chooseEngineClientAlias(keyType, issuers, engine) : _alias;",
                "+        return _alias != null ? _alias : _delegate.chooseEngineClientAlias(keyType, issuers, engine);",
                "     }",
                "@@ -103,4 +95,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        LOGGER.debug(\"chooseEngineServerAlias:Returning alias {}\", _alias);",
                "-        return _alias;",
                "+        return _alias != null ? _alias : _delegate.chooseEngineServerAlias(keyType, issuers, engine);",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7567": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7567",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6d26e38ab349e9fb6aad3afc959f143a97037369",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521230527,
            "hunks": 3,
            "message": "QPID-8016: [Broker-J] Correct FileKeyStore's selection of certificate by alias",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "index 4c5ed1f2e7..62c3102cd5 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "@@ -55,3 +55,3 @@ import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "-import org.apache.qpid.server.transport.network.security.ssl.QpidClientX509KeyManager;",
                "+import org.apache.qpid.server.transport.network.security.ssl.QpidServerX509KeyManager;",
                " import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "@@ -238,4 +238,4 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "                 return new KeyManager[] {",
                "-                        new QpidClientX509KeyManager( _certificateAlias, url, _keyStoreType, getPassword(),",
                "-                                                      _keyManagerFactoryAlgorithm)",
                "+                        new QpidServerX509KeyManager(_certificateAlias, url, _keyStoreType, getPassword(),",
                "+                                                     _keyManagerFactoryAlgorithm)",
                "                                         };",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "new file mode 100644",
                "index 0000000000..c75d781182",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ * ",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ * ",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ * ",
                "+ */",
                "+package org.apache.qpid.server.transport.network.security.ssl;",
                "+",
                "+import javax.net.ssl.KeyManagerFactory;",
                "+import javax.net.ssl.SSLEngine;",
                "+import javax.net.ssl.X509ExtendedKeyManager;",
                "+import java.io.IOException;",
                "+import java.net.Socket;",
                "+import java.net.URL;",
                "+import java.security.GeneralSecurityException;",
                "+import java.security.KeyStore;",
                "+import java.security.Principal;",
                "+import java.security.PrivateKey;",
                "+import java.security.cert.X509Certificate;",
                "+",
                "+",
                "+public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "+{",
                "+    private final X509ExtendedKeyManager _delegate;",
                "+    private final String _alias;",
                "+",
                "+    public QpidServerX509KeyManager(String alias, URL keyStoreUrl, String keyStoreType,",
                "+                                    String keyStorePassword, String keyManagerFactoryAlgorithmName) throws GeneralSecurityException, IOException",
                "+    {",
                "+        _alias = alias;",
                "+        KeyStore ks = SSLUtil.getInitializedKeyStore(keyStoreUrl,keyStorePassword,keyStoreType);",
                "+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyManagerFactoryAlgorithmName);",
                "+        kmf.init(ks, keyStorePassword.toCharArray());",
                "+        _delegate = (X509ExtendedKeyManager)kmf.getKeyManagers()[0];",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        return _delegate.chooseClientAlias(keyType, issuers, socket);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        return _alias != null ? _alias : _delegate.chooseServerAlias(keyType, issuers, socket);",
                "+    }",
                "+",
                "+    @Override",
                "+    public X509Certificate[] getCertificateChain(String alias)",
                "+    {",
                "+        return _delegate.getCertificateChain(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getClientAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        return _delegate.getClientAliases(keyType, issuers);",
                "+    }",
                "+",
                "+    @Override",
                "+    public PrivateKey getPrivateKey(String alias)",
                "+    {",
                "+        return _delegate.getPrivateKey(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getServerAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        return _alias != null ? new String[] {_alias } : _delegate.getServerAliases(keyType, issuers);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        return _delegate.chooseEngineClientAlias(keyType, issuers, engine);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        return _alias != null ? _alias : _delegate.chooseEngineServerAlias(keyType, issuers, engine);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8016": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8016",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cfeabcce7efcefa361b4b2e583378dcf01b964bb",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520598069,
            "hunks": 5,
            "message": "QPID-8014: [Broker-J] [Web Management Console] Prevent synchronous XMLHttpRequest warning logged to the console when loading the footer",
            "diff": [
                "diff --git a/broker-plugins/jdbc-provider-bone/src/main/java/resources/js/qpid/management/store/pool/bonecp/show.js b/broker-plugins/jdbc-provider-bone/src/main/java/resources/js/qpid/management/store/pool/bonecp/show.js",
                "index b8fb30e8bd..14e4ff05e8 100644",
                "--- a/broker-plugins/jdbc-provider-bone/src/main/java/resources/js/qpid/management/store/pool/bonecp/show.js",
                "+++ b/broker-plugins/jdbc-provider-bone/src/main/java/resources/js/qpid/management/store/pool/bonecp/show.js",
                "@@ -32,3 +32,2 @@ define([\"dojo/_base/xhr\", \"dojo/parser\", \"dojox/html/entities\", \"dojo/query\", \"d",
                "                 url: \"store/pool/bonecp/show.html\",",
                "-                sync: true,",
                "                 load: function (template)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/footer.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/footer.js",
                "index 827181c446..58148246e9 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/footer.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/footer.js",
                "@@ -27,3 +27,2 @@ define([\"dojo/_base/xhr\", \"dojo/query\", \"dojo/domReady!\"], function (xhr, query)",
                "                 url: \"footer.html\",",
                "-                sync: true,",
                "                 load: function (data)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/grid/GridUpdater.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/grid/GridUpdater.js",
                "index 1e83638fd6..b291543524 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/grid/GridUpdater.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/grid/GridUpdater.js",
                "@@ -172,3 +172,2 @@ define([\"dojo/_base/xhr\",",
                "                         url: requestUrl,",
                "-                        sync: true,",
                "                         handleAs: \"json\"",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "index 5de759fbac..948129b9d3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "@@ -531,3 +531,2 @@ define([\"dojo/_base/xhr\",",
                "                 url: htmlTemplateLocation,",
                "-                sync: true,",
                "                 load: function (template)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "index 6c1fbbb63f..c9064a1313 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js",
                "@@ -77,3 +77,2 @@ define([\"dojo/_base/xhr\",",
                "                 url: \"accesscontrolprovider/showAclFile.html\",",
                "-                sync: true,",
                "                 load: function (data)"
            ],
            "changed_files": [
                "broker-plugins/jdbc-provider-bone/src/main/java/resources/js/qpid/management/store/pool/bonecp/show.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/footer.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/grid/GridUpdater.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/util.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/accesscontrolprovider/AclFile.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8014": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8014",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "30de6410fbe7721b1eda17997619fdcce00e775a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525179966,
            "hunks": 2,
            "message": "QPID-8158: [Broker-J Tests] Replace use of java.lang.Thread#interrupted with java.lang.Thread#interrupt in test code",
            "diff": [
                "diff --git a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "index 353dd0e9e8..c5a076cfbf 100644",
                "--- a/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "+++ b/systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java",
                "@@ -409,3 +409,3 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "                 {",
                "-                    Thread.interrupted();",
                "+                    Thread.currentThread().interrupt();",
                "                     break;",
                "@@ -663,3 +663,3 @@ public class SpawnBrokerAdmin implements BrokerAdmin, Closeable",
                "         {",
                "-            Thread.interrupted();",
                "+            Thread.currentThread().interrupt();",
                "         }"
            ],
            "changed_files": [
                "systests/qpid-systests-spawn-admin/src/main/java/org/apache/qpid/systests/admin/SpawnBrokerAdmin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a7e1057513e8f5e369c96fc080ae457c60e2dae5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521835698,
            "hunks": 5,
            "message": "QPID-7567: [Broker-J] Add UI and documentation for the feature",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "index 216dbad1ed..56eede1d9c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "@@ -70,3 +70,3 @@ public interface FileKeyStore<X extends FileKeyStore<X>> extends KeyStore<X>",
                "-    @ManagedAttribute( defaultValue = \"true\")",
                "+    @ManagedAttribute( defaultValue = \"true\", description = \"Use SNI server name from the SSL handshake to select the most appropriate certificate for the indicated hostname\")",
                "     boolean isUseHostNameMatching();",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/store/filekeystore/add.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/store/filekeystore/add.js",
                "index eb868a72e4..1ffb105315 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/store/filekeystore/add.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/store/filekeystore/add.js",
                "@@ -27,2 +27,5 @@ define([\"dojo/dom\",",
                "         \"dojo/text!store/filekeystore/add.html\",",
                "+        \"dijit/form/CheckBox\",",
                "+        \"dijit/form/ValidationTextBox\",",
                "+        \"qpid/common/ResourceWidget\",",
                "         \"dojo/domReady!\"], function (dom, query, array, registry, util, parser, template)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/store/filekeystore/add.html b/broker-plugins/management-http/src/main/java/resources/store/filekeystore/add.html",
                "index 676ae4007b..0ac6385ba0 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/store/filekeystore/add.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/store/filekeystore/add.html",
                "@@ -83,3 +83,15 @@",
                "         </div>",
                "-",
                "+        <div class=\"clear\">",
                "+            <div class=\"formLabel-labelCell tableContainer-labelCell\">Use SNI host name matching:</div>",
                "+            <div class=\"formLabel-controlCell tableContainer-valueCell\">",
                "+                <input type=\"text\" id=\"addStore.useHostNameMatching\"",
                "+                       data-dojo-type=\"dijit/form/CheckBox\"",
                "+                       data-dojo-props=\"",
                "+                              name: 'useHostNameMatching'\" />",
                "+                <div data-dojo-type=\"dijit/Tooltip\"",
                "+                     data-dojo-props=\"connectId: ['addStore.useHostNameMatching'],",
                "+                                      label: 'If true, SNI server name from the SSL handshake will be used to select the most appropriate certificate for the indicated hostname'\">",
                "+                </div>",
                "+            </div>",
                "+        </div>",
                "     </div>",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/store/filekeystore/show.html b/broker-plugins/management-http/src/main/java/resources/store/filekeystore/show.html",
                "index 9a1d93d83a..74284e51f2 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/store/filekeystore/show.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/store/filekeystore/show.html",
                "@@ -36,2 +36,6 @@",
                "     </div>",
                "+    <div class=\"clear\">",
                "+        <div class=\"formLabel-labelCell\">Use SNI host name matching:</div>",
                "+        <div><span class=\"useHostNameMatching\" ></span></div>",
                "+    </div>",
                "     <div class=\"clear\"></div>",
                "diff --git a/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Keystores.xml b/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Keystores.xml",
                "index d6cbe67386..bdd28505b2 100644",
                "--- a/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Keystores.xml",
                "+++ b/doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Keystores.xml",
                "@@ -97,2 +97,8 @@",
                "                 </listitem>",
                "+                <listitem>",
                "+                    <para><emphasis>Use SNI host name matching</emphasis>. If selected, SNI server name from",
                "+                        an SSL handshake will be used to select the most appropriate certificate",
                "+                        by matching an indicated hostname with the certificate hostname specified in subject or",
                "+                        subject alternatives as CN or DC.</para>",
                "+                </listitem>",
                "             </itemizedlist>"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/store/filekeystore/add.js",
                "broker-plugins/management-http/src/main/java/resources/store/filekeystore/add.html",
                "broker-plugins/management-http/src/main/java/resources/store/filekeystore/show.html",
                "doc/java-broker/src/docbkx/management/managing/Java-Broker-Management-Managing-Keystores.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7567": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7567",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dbe3ca730da5cf27db5e21645996e6f2f5ea6d93",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518864923,
            "hunks": 1,
            "message": "QPID-8083: [System Tests] [REST/HTTP] Eliminate GroupProvider rest tests",
            "diff": [
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 431c1e282e..f737909638 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -97,2 +97,7 @@",
                "+    <dependency>",
                "+      <groupId>org.hamcrest</groupId>",
                "+      <artifactId>hamcrest-library</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "   </dependencies>"
            ],
            "changed_files": [
                "broker-core/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e776ae641c7f49c461c641b0e3533ea3c8ce47b2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520445930,
            "hunks": 8,
            "message": "QPID-7197: [Broker-J] Generalize a validation of references to the object being deleted",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index f6bbb7829c..13a4d4c2e5 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -31,2 +31,3 @@ import java.lang.reflect.Proxy;",
                " import java.lang.reflect.Type;",
                "+import java.lang.reflect.TypeVariable;",
                " import java.security.AccessControlContext;",
                "@@ -59,2 +60,3 @@ import java.util.concurrent.TimeoutException;",
                " import java.util.concurrent.atomic.AtomicReference;",
                "+import java.util.function.Predicate;",
                " import java.util.regex.Pattern;",
                "@@ -2227,2 +2229,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         validateChange(proxyForValidation, attributes.keySet());",
                "+        validateReferredBy(getModel().getAncestor(getModel().getRootCategory(), this), this);",
                "@@ -2245,2 +2248,109 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "+    private void validateReferredBy(final ConfiguredObject<?> object,",
                "+                                    final ConfiguredObject<?> lookupReference)",
                "+    {",
                "+        if (isReferredBy(object, lookupReference))",
                "+        {",
                "+            throw new IntegrityViolationException(String.format(\"Configured object %s is referred by %s\",",
                "+                                                                lookupReference,",
                "+                                                                object));",
                "+        }",
                "+",
                "+        getModel().getChildTypes(object.getCategoryClass())",
                "+                  .forEach(childClass -> object.getChildren(childClass)",
                "+                                               .forEach(child -> validateReferredBy(child, lookupReference)));",
                "+",
                "+",
                "+    }",
                "+",
                "+    private boolean isReferredBy(final ConfiguredObject<?> object,",
                "+                                 final ConfiguredObject<?> lookupReference)",
                "+    {",
                "+        if (object instanceof AbstractConfiguredObject)",
                "+        {",
                "+            return getModel().getTypeRegistry()",
                "+                             .getAttributes(object.getClass())",
                "+                             .stream()",
                "+                             .anyMatch(attribute -> {",
                "+",
                "+                                 Object value = object.getAttribute(attribute.getName());",
                "+                                 Class<?> type = attribute.getType();",
                "+                                 Type genericType = attribute.getGenericType();",
                "+",
                "+                                 return isReferred(value, type, genericType, lookupReference);",
                "+                             });",
                "+        }",
                "+        else",
                "+        {",
                "+            return object.getAttributeNames().stream().anyMatch(name -> {",
                "+                Object value = object.getAttribute(name);",
                "+                if (value != null)",
                "+                {",
                "+                   Class<?> type = value.getClass();",
                "+                   return isReferred(value, type, type, lookupReference);",
                "+                }",
                "+                return false;",
                "+            });",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    private boolean isReferred(final Object value,",
                "+                               final Class<?> type,",
                "+                               final Type genericType,",
                "+                               final ConfiguredObject<?> lookupReference)",
                "+    {",
                "+        final Class<? extends ConfiguredObject> lookupCategory = lookupReference.getCategoryClass();",
                "+        if (lookupCategory.isAssignableFrom(type) && value == lookupReference)",
                "+        {",
                "+            return true;",
                "+        }",
                "+        else if (hasMemberOfType(genericType, lookupCategory))",
                "+        {",
                "+            if (value instanceof Collection)",
                "+            {",
                "+                return ((Collection<?>) value).stream().anyMatch(m -> m == lookupReference);",
                "+            }",
                "+            else if (value instanceof Object[])",
                "+            {",
                "+                return Arrays.stream((Object[]) value).anyMatch(m -> m == lookupReference);",
                "+            }",
                "+            else if (value instanceof Map)",
                "+            {",
                "+                return ((Map<?, ?>) value).entrySet()",
                "+                                          .stream()",
                "+                                          .anyMatch(e -> e.getKey() == lookupReference",
                "+                                                         || e.getValue() == lookupReference);",
                "+            }",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+    private boolean hasMemberOfType(Type returnType, Class<?> classType)",
                "+    {",
                "+        if (returnType instanceof ParameterizedType)",
                "+        {",
                "+            Type[] types = ((ParameterizedType) returnType).getActualTypeArguments();",
                "+            return Arrays.stream(types).anyMatch((Predicate<? super Type>) type -> {",
                "+                if (type instanceof Class && classType.isAssignableFrom((Class) type))",
                "+                {",
                "+                    return true;",
                "+                }",
                "+                else if (type instanceof ParameterizedType)",
                "+                {",
                "+                    Type rawType = ((ParameterizedType) type).getRawType();",
                "+                    return rawType instanceof Class && classType.isAssignableFrom((Class) rawType);",
                "+                }",
                "+                else if (type instanceof TypeVariable)",
                "+                {",
                "+                    Type[] bounds = ((TypeVariable) type).getBounds();",
                "+                    return Arrays.stream(bounds).anyMatch(boundType -> hasMemberOfType(boundType, classType));",
                "+",
                "+                }",
                "+                return false;",
                "+            });",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "     protected ListenableFuture<Void> deleteNoChecks()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "index 45efb41970..6f08b443cb 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "@@ -302,5 +302,2 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "-        Collection<Protocol> protocols = updated.getProtocols();",
                "-",
                "-",
                "         boolean usesSsl = isUsingTLSTransport(transports);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "index 453399ade0..d240849cf8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "@@ -81,27 +81,2 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            // verify that it is not in use",
                "-            String storeName = getName();",
                "-",
                "-            Collection<Port> ports = new ArrayList<>(getBroker().getPorts());",
                "-            for (Port port : ports)",
                "-            {",
                "-                if (port.getKeyStore() == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(",
                "-                            \"Key store '%s' can't be deleted as it is in use by a port: %s\",",
                "-                            storeName,",
                "-                            port.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "index fe4655a05f..e0760a4e2c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "@@ -109,58 +109,2 @@ public abstract class AbstractTrustStore<X extends AbstractTrustStore<X>>",
                "-",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE)",
                "-            && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            // verify that it is not in use",
                "-            String storeName = getName();",
                "-",
                "-            Collection<Port<?>> ports = new ArrayList<>(_broker.getPorts());",
                "-            for (Port<?> port : ports)",
                "-            {",
                "-                Collection<TrustStore> trustStores = port.getTrustStores();",
                "-                if (trustStores != null)",
                "-                {",
                "-                    for (TrustStore store : trustStores)",
                "-                    {",
                "-                        if (storeName.equals(store.getAttribute(TrustStore.NAME)))",
                "-                        {",
                "-                            throw new IntegrityViolationException(String.format(",
                "-                                    \"Trust store '%s' can't be deleted as it is in use by a port: %s\",",
                "-                                    storeName,",
                "-                                    port.getName()));",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            Collection<AuthenticationProvider> authenticationProviders =",
                "-                    new ArrayList<>(_broker.getAuthenticationProviders());",
                "-            for (AuthenticationProvider authProvider : authenticationProviders)",
                "-            {",
                "-                TrustStore otherTrustStore = null;",
                "-                if (authProvider instanceof SimpleLDAPAuthenticationManager)",
                "-                {",
                "-                    otherTrustStore = ((SimpleLDAPAuthenticationManager) authProvider).getTrustStore();",
                "-                }",
                "-                else if (authProvider instanceof OAuth2AuthenticationProvider)",
                "-                {",
                "-                    otherTrustStore = ((OAuth2AuthenticationProvider) authProvider).getTrustStore();",
                "-                }",
                "-",
                "-                if (otherTrustStore == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(",
                "-                            \"Trust store '%s' can't be deleted as it is in use by an authentication manager: '%s'\",",
                "-                            getName(),",
                "-                            authProvider.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "index 5b8b219668..337b1090ea 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "@@ -82,24 +82,2 @@ public abstract class AbstractAuthenticationManager<T extends AbstractAuthentica",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            String providerName = getName();",
                "-            // verify that provider is not in use",
                "-            Collection<Port> ports = new ArrayList<>(_container.getChildren(Port.class));",
                "-            for (Port<?> port : ports)",
                "-            {",
                "-                if (port.getAuthenticationProvider() == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(\"Authentication provider '%s' is set on port %s\",",
                "-                                                                        providerName,",
                "-                                                                        port.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0710c1530f3d930812659a7117575fca629c3e8c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523701286,
            "hunks": 7,
            "message": "QPID-8166: Remove etc/passwd and groups from distribution",
            "diff": [
                "diff --git a/apache-qpid-broker-j/src/main/assembly/bin.xml b/apache-qpid-broker-j/src/main/assembly/bin.xml",
                "index 94defd440b..fe7484d4ef 100644",
                "--- a/apache-qpid-broker-j/src/main/assembly/bin.xml",
                "+++ b/apache-qpid-broker-j/src/main/assembly/bin.xml",
                "@@ -51,11 +51,2 @@",
                "     </fileSet>",
                "-    <fileSet>",
                "-      <directory>${project.basedir}/../broker</directory>",
                "-      <outputDirectory/>",
                "-      <includes>",
                "-        <include>etc/</include>",
                "-      </includes>",
                "-      <fileMode>0644</fileMode>",
                "-      <directoryMode>0755</directoryMode>",
                "-    </fileSet>",
                "   </fileSets>",
                "diff --git a/broker-core/src/main/resources/initial-config.json b/broker-core/src/main/resources/initial-config.json",
                "index 58477d29ed..512eaf58b6 100644",
                "--- a/broker-core/src/main/resources/initial-config.json",
                "+++ b/broker-core/src/main/resources/initial-config.json",
                "@@ -24,5 +24,9 @@",
                "   \"authenticationproviders\" : [ {",
                "-    \"name\" : \"passwordFile\",",
                "-    \"type\" : \"PlainPasswordFile\",",
                "-    \"path\" : \"${qpid.home_dir}${file.separator}etc${file.separator}passwd\"",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"users\" : [ {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "   } ],",
                "@@ -81,3 +85,3 @@",
                "     \"port\" : \"${qpid.amqp_port}\",",
                "-    \"authenticationProvider\" : \"passwordFile\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "     \"virtualhostaliases\" : [ {",
                "@@ -95,3 +99,3 @@",
                "     \"port\" : \"${qpid.http_port}\",",
                "-    \"authenticationProvider\" : \"passwordFile\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "     \"protocols\" : [ \"HTTP\" ]",
                "diff --git a/broker/etc/groups b/broker/etc/groups",
                "deleted file mode 100644",
                "index e3912ece99..0000000000",
                "--- a/broker/etc/groups",
                "+++ /dev/null",
                "@@ -1,29 +0,0 @@",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-#",
                "-",
                "-#",
                "-# To define a group, use the format:",
                "-#",
                "-# <groupname>.users=<user1>,<user2>,...,<usern>",
                "-#",
                "-",
                "-messaging-users.users=guest,client,server",
                "-administrators.users=admin",
                "-webadmins.users=webadmin",
                "-",
                "diff --git a/broker/etc/md5passwd b/broker/etc/md5passwd",
                "deleted file mode 100644",
                "index f7185c0e92..0000000000",
                "--- a/broker/etc/md5passwd",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-#",
                "-guest:CE4DQ6BIb/BVMN9scFyLtA==",
                "-client:CE4DQ6BIb/BVMN9scFyLtA==",
                "-server:CE4DQ6BIb/BVMN9scFyLtA==",
                "-admin:ISMvKXpXpadDiUoOSoAfww==",
                "-webadmin:rda7WOE5vhAzJNBNgtj1RQ==",
                "diff --git a/broker/etc/passwd b/broker/etc/passwd",
                "deleted file mode 100644",
                "index f0dcb80f25..0000000000",
                "--- a/broker/etc/passwd",
                "+++ /dev/null",
                "@@ -1,25 +0,0 @@",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-#",
                "-guest:guest",
                "-client:guest",
                "-server:guest",
                "-admin:admin",
                "-",
                "-webadmin:webadmin",
                "-"
            ],
            "changed_files": [
                "apache-qpid-broker-j/src/main/assembly/bin.xml",
                "broker-core/src/main/resources/initial-config.json",
                "broker/etc/groups",
                "broker/etc/md5passwd",
                "broker/etc/passwd"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8166": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8166",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d14659c8562da5d31e58b6c6abd6c3c7b008a6a5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520957333,
            "hunks": 7,
            "message": "QPID-7197: [Broker-J] Prevent deletion of objects that are in use",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index f6bbb7829c..3fe5684235 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -31,2 +31,3 @@ import java.lang.reflect.Proxy;",
                " import java.lang.reflect.Type;",
                "+import java.lang.reflect.TypeVariable;",
                " import java.security.AccessControlContext;",
                "@@ -59,2 +60,3 @@ import java.util.concurrent.TimeoutException;",
                " import java.util.concurrent.atomic.AtomicReference;",
                "+import java.util.function.Supplier;",
                " import java.util.regex.Pattern;",
                "@@ -2227,2 +2229,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         validateChange(proxyForValidation, attributes.keySet());",
                "+        validateReferences(getHierarchyRoot(this), this);",
                "@@ -2245,2 +2248,135 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "+    private ConfiguredObject<?> getHierarchyRoot(final AbstractConfiguredObject<X> o)",
                "+    {",
                "+        ConfiguredObject<?> object = o;",
                "+        do",
                "+        {",
                "+            ConfiguredObject<?> parent = object.getParent();",
                "+            if (parent == null || managesChildren(parent))",
                "+            {",
                "+                break;",
                "+            }",
                "+            object = parent;",
                "+        }",
                "+        while (true);",
                "+        return object;",
                "+    }",
                "+",
                "+    private boolean managesChildren(final ConfiguredObject<?> object)",
                "+    {",
                "+        return managesChildren(object.getCategoryClass()) || managesChildren(object.getTypeClass());",
                "+    }",
                "+",
                "+    private void validateReferences(final ConfiguredObject<?> object,",
                "+                                    final ConfiguredObject<?> lookupReference)",
                "+    {",
                "+        if (hasReference(object, lookupReference))",
                "+        {",
                "+            throw new IntegrityViolationException(String.format(\"Configured object %s is referred by %s\",",
                "+                                                                lookupReference,",
                "+                                                                object));",
                "+        }",
                "+",
                "+        if (!managesChildren(object))",
                "+        {",
                "+            getModel().getChildTypes(object.getCategoryClass())",
                "+                      .forEach(childClass -> object.getChildren(childClass)",
                "+                                                   .forEach(child -> validateReferences(child, lookupReference)));",
                "+        }",
                "+    }",
                "+",
                "+    private boolean hasReference(final ConfiguredObject<?> object,",
                "+                                 final ConfiguredObject<?> lookupReference)",
                "+    {",
                "+        if (object instanceof AbstractConfiguredObject)",
                "+        {",
                "+            return getModel().getTypeRegistry()",
                "+                             .getAttributes(object.getClass())",
                "+                             .stream()",
                "+                             .anyMatch(attribute -> {",
                "+                                 Class<?> type = attribute.getType();",
                "+                                 Type genericType = attribute.getGenericType();",
                "+                                 return isReferred(lookupReference, type,",
                "+                                                   genericType,",
                "+                                                   () -> {",
                "+                                                       @SuppressWarnings(\"unchecked\")",
                "+                                                       Object value =",
                "+                                                               ((ConfiguredObjectAttribute) attribute).getValue(object);",
                "+                                                       return value;",
                "+                                                   });",
                "+                             });",
                "+        }",
                "+        else",
                "+        {",
                "+            return object.getAttributeNames().stream().anyMatch(name -> {",
                "+                Object value = object.getAttribute(name);",
                "+                if (value != null)",
                "+                {",
                "+                   Class<?> type = value.getClass();",
                "+                   return isReferred(lookupReference, type, type, () -> value);",
                "+                }",
                "+                return false;",
                "+            });",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    private boolean isReferred(final ConfiguredObject<?> lookupReference,",
                "+                               final Class<?> attributeValueType,",
                "+                               final Type attributeGenericType,",
                "+                               final Supplier<?> attributeValue)",
                "+    {",
                "+        final Class<? extends ConfiguredObject> lookupCategory = lookupReference.getCategoryClass();",
                "+        if (lookupCategory.isAssignableFrom(attributeValueType))",
                "+        {",
                "+            return attributeValue.get() == lookupReference;",
                "+        }",
                "+        else if (hasParameterOfType(attributeGenericType, lookupCategory))",
                "+        {",
                "+            Object value = attributeValue.get();",
                "+            if (value instanceof Collection)",
                "+            {",
                "+                return ((Collection<?>) value).stream().anyMatch(m -> m == lookupReference);",
                "+            }",
                "+            else if (value instanceof Object[])",
                "+            {",
                "+                return Arrays.stream((Object[]) value).anyMatch(m -> m == lookupReference);",
                "+            }",
                "+            else if (value instanceof Map)",
                "+            {",
                "+                return ((Map<?, ?>) value).entrySet()",
                "+                                          .stream()",
                "+                                          .anyMatch(e -> e.getKey() == lookupReference",
                "+                                                         || e.getValue() == lookupReference);",
                "+            }",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+    private boolean hasParameterOfType(Type genericType, Class<?> parameterType)",
                "+    {",
                "+        if (genericType instanceof ParameterizedType)",
                "+        {",
                "+            Type[] types = ((ParameterizedType) genericType).getActualTypeArguments();",
                "+            return Arrays.stream(types).anyMatch(type -> {",
                "+                if (type instanceof Class && parameterType.isAssignableFrom((Class) type))",
                "+                {",
                "+                    return true;",
                "+                }",
                "+                else if (type instanceof ParameterizedType)",
                "+                {",
                "+                    Type rawType = ((ParameterizedType) type).getRawType();",
                "+                    return rawType instanceof Class && parameterType.isAssignableFrom((Class) rawType);",
                "+                }",
                "+                else if (type instanceof TypeVariable)",
                "+                {",
                "+                    Type[] bounds = ((TypeVariable) type).getBounds();",
                "+                    return Arrays.stream(bounds).anyMatch(boundType -> hasParameterOfType(boundType, parameterType));",
                "+                }",
                "+                return false;",
                "+            });",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "     protected ListenableFuture<Void> deleteNoChecks()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "index 453399ade0..d240849cf8 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "@@ -81,27 +81,2 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            // verify that it is not in use",
                "-            String storeName = getName();",
                "-",
                "-            Collection<Port> ports = new ArrayList<>(getBroker().getPorts());",
                "-            for (Port port : ports)",
                "-            {",
                "-                if (port.getKeyStore() == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(",
                "-                            \"Key store '%s' can't be deleted as it is in use by a port: %s\",",
                "-                            storeName,",
                "-                            port.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "index fe4655a05f..e0760a4e2c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "@@ -109,58 +109,2 @@ public abstract class AbstractTrustStore<X extends AbstractTrustStore<X>>",
                "-",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE)",
                "-            && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            // verify that it is not in use",
                "-            String storeName = getName();",
                "-",
                "-            Collection<Port<?>> ports = new ArrayList<>(_broker.getPorts());",
                "-            for (Port<?> port : ports)",
                "-            {",
                "-                Collection<TrustStore> trustStores = port.getTrustStores();",
                "-                if (trustStores != null)",
                "-                {",
                "-                    for (TrustStore store : trustStores)",
                "-                    {",
                "-                        if (storeName.equals(store.getAttribute(TrustStore.NAME)))",
                "-                        {",
                "-                            throw new IntegrityViolationException(String.format(",
                "-                                    \"Trust store '%s' can't be deleted as it is in use by a port: %s\",",
                "-                                    storeName,",
                "-                                    port.getName()));",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            Collection<AuthenticationProvider> authenticationProviders =",
                "-                    new ArrayList<>(_broker.getAuthenticationProviders());",
                "-            for (AuthenticationProvider authProvider : authenticationProviders)",
                "-            {",
                "-                TrustStore otherTrustStore = null;",
                "-                if (authProvider instanceof SimpleLDAPAuthenticationManager)",
                "-                {",
                "-                    otherTrustStore = ((SimpleLDAPAuthenticationManager) authProvider).getTrustStore();",
                "-                }",
                "-                else if (authProvider instanceof OAuth2AuthenticationProvider)",
                "-                {",
                "-                    otherTrustStore = ((OAuth2AuthenticationProvider) authProvider).getTrustStore();",
                "-                }",
                "-",
                "-                if (otherTrustStore == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(",
                "-                            \"Trust store '%s' can't be deleted as it is in use by an authentication manager: '%s'\",",
                "-                            getName(),",
                "-                            authProvider.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "index 5b8b219668..337b1090ea 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "@@ -82,24 +82,2 @@ public abstract class AbstractAuthenticationManager<T extends AbstractAuthentica",
                "-    @Override",
                "-    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "-    {",
                "-        super.validateChange(proxyForValidation, changedAttributes);",
                "-",
                "-        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "-        {",
                "-            String providerName = getName();",
                "-            // verify that provider is not in use",
                "-            Collection<Port> ports = new ArrayList<>(_container.getChildren(Port.class));",
                "-            for (Port<?> port : ports)",
                "-            {",
                "-                if (port.getAuthenticationProvider() == this)",
                "-                {",
                "-                    throw new IntegrityViolationException(String.format(\"Authentication provider '%s' is set on port %s\",",
                "-                                                                        providerName,",
                "-                                                                        port.getName()));",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bdad33cfc464077e205684b27945d58495d8c7a1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516710481,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove client specific MaxDeliveryCountTest from broker-j after moving the test into the client source",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index c0de09cb0c..2ce365d634 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -22,5 +22,2 @@ org.apache.qpid.server.queue.ConflationQueueTest#*",
                "-// the 0-10 c++ broker does not implement DLQ",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#*",
                "-",
                " // InVM Broker tests",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 709399f1c4..56679639e7 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -65,7 +65,2 @@ org.apache.qpid.server.logging.TransientQueueLoggingTest#*",
                "-// Tests call Session#recover() to redeliver messages from broker which is not applicable to new client",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testSynchronousClientAckSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousClientAckSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousDupsOkSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousAutoAckSession",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index f397a12b05..d053dc8e02 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -29,4 +29,2 @@ org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testWhenBrokerIsRestartedAfterEnqeuingMessages",
                "-",
                " org.apache.qpid.systest.rest.VirtualHostRestTest#testRecoverVirtualHostInDesiredStateStoppedWithDescription"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c5e5cd2ab225482627009b486a1494a747e7539c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521742358,
            "hunks": 22,
            "message": "QPID-7197: [Broker-J] Fix referrer/referee confusion in  parameter names.",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index 447fc59359..3bc6c84770 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -2248,11 +2248,11 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private void checkReferencesOnDelete(final ConfiguredObject<?> referee, final ConfiguredObject<?> referrer)",
                "+    private void checkReferencesOnDelete(final ConfiguredObject<?> referrer, final ConfiguredObject<?> referee)",
                "     {",
                "-        if (!managesChildren(referrer))",
                "+        if (!managesChildren(referee))",
                "         {",
                "-            getModel().getChildTypes(referrer.getCategoryClass())",
                "-                      .forEach(childClass -> referrer.getChildren(childClass)",
                "-                                                     .forEach(child -> checkReferencesOnDelete(referee, child)));",
                "+            getModel().getChildTypes(referee.getCategoryClass())",
                "+                      .forEach(childClass -> referee.getChildren(childClass)",
                "+                                                    .forEach(child -> checkReferencesOnDelete(referrer, child)));",
                "         }",
                "-        checkReferences(referee, referrer);",
                "+        checkReferences(referrer, referee);",
                "     }",
                "@@ -2280,20 +2280,33 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private void checkReferences(final ConfiguredObject<?> referee, final ConfiguredObject<?> referrer)",
                "+    private void checkReferences(final ConfiguredObject<?> referrer, final ConfiguredObject<?> referee)",
                "     {",
                "-        if (hasReference(referee, referrer))",
                "+        if (hasReference(referrer, referee))",
                "         {",
                "-            throw new IntegrityViolationException(String.format(\"%s '%s' is in use by %s '%s'\",",
                "-                                                                referrer.getCategoryClass().getSimpleName(),",
                "-                                                                referrer.getName(),",
                "-                                                                referee.getCategoryClass().getSimpleName(),",
                "-                                                                referee.getName()));",
                "+            if (referee == this)",
                "+            {",
                "+                throw new IntegrityViolationException(String.format(\"%s '%s' is in use by %s '%s'.\",",
                "+                                                                    referee.getCategoryClass().getSimpleName(),",
                "+                                                                    referee.getName(),",
                "+                                                                    referrer.getCategoryClass().getSimpleName(),",
                "+                                                                    referrer.getName()));",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new IntegrityViolationException(String.format(\"Cannot delete %s '%s' as descendant %s '%s' is in use by %s '%s'.\",",
                "+                                                                    this.getCategoryClass().getSimpleName(),",
                "+                                                                    this.getName(),",
                "+                                                                    referee.getCategoryClass().getSimpleName(),",
                "+                                                                    referee.getName(),",
                "+                                                                    referrer.getCategoryClass().getSimpleName(),",
                "+                                                                    referrer.getName()));",
                "+            }",
                "         }",
                "-        if (!managesChildren(referee))",
                "+        if (!managesChildren(referrer))",
                "         {",
                "-            getModel().getChildTypes(referee.getCategoryClass())",
                "-                      .forEach(childClass -> referee.getChildren(childClass)",
                "-                                                    .stream()",
                "-                                                    .filter(child -> child != this)",
                "-                                                    .forEach(child -> checkReferences(child, referrer)));",
                "+            getModel().getChildTypes(referrer.getCategoryClass())",
                "+                      .forEach(childClass -> referrer.getChildren(childClass)",
                "+                                                     .stream()",
                "+                                                     .filter(child -> child != this)",
                "+                                                     .forEach(child -> checkReferences(child, referee)));",
                "         }",
                "@@ -2301,9 +2314,9 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private boolean hasReference(final ConfiguredObject<?> referee,",
                "-                                 final ConfiguredObject<?> referrer)",
                "+    private boolean hasReference(final ConfiguredObject<?> referrer,",
                "+                                 final ConfiguredObject<?> referee)",
                "     {",
                "-        if (referee instanceof AbstractConfiguredObject)",
                "+        if (referrer instanceof AbstractConfiguredObject)",
                "         {",
                "             return getModel().getTypeRegistry()",
                "-                             .getAttributes(referee.getClass())",
                "+                             .getAttributes(referrer.getClass())",
                "                              .stream()",
                "@@ -2312,3 +2325,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                  Type genericType = attribute.getGenericType();",
                "-                                 return isReferred(referrer, type,",
                "+                                 return isReferred(referee, type,",
                "                                                    genericType,",
                "@@ -2317,3 +2330,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                                        Object value =",
                "-                                                               ((ConfiguredObjectAttribute) attribute).getValue(referee);",
                "+                                                               ((ConfiguredObjectAttribute) attribute).getValue(referrer);",
                "                                                        return value;",
                "@@ -2324,4 +2337,4 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         {",
                "-            return referee.getAttributeNames().stream().anyMatch(name -> {",
                "-                Object value = referee.getAttribute(name);",
                "+            return referrer.getAttributeNames().stream().anyMatch(name -> {",
                "+                Object value = referrer.getAttribute(name);",
                "                 if (value != null)",
                "@@ -2329,3 +2342,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                     Class<?> type = value.getClass();",
                "-                    return isReferred(referrer, type, type, () -> value);",
                "+                    return isReferred(referee, type, type, () -> value);",
                "                 }",
                "@@ -2336,3 +2349,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private boolean isReferred(final ConfiguredObject<?> referrer,",
                "+    private boolean isReferred(final ConfiguredObject<?> referee,",
                "                                final Class<?> attributeValueType,",
                "@@ -2341,6 +2354,6 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "     {",
                "-        final Class<? extends ConfiguredObject> referrerCategory = referrer.getCategoryClass();",
                "+        final Class<? extends ConfiguredObject> referrerCategory = referee.getCategoryClass();",
                "         if (referrerCategory.isAssignableFrom(attributeValueType))",
                "         {",
                "-            return attributeValue.get() == referrer;",
                "+            return attributeValue.get() == referee;",
                "         }",
                "@@ -2351,3 +2364,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "             {",
                "-                return ((Collection<?>) value).stream().anyMatch(m -> m == referrer);",
                "+                return ((Collection<?>) value).stream().anyMatch(m -> m == referee);",
                "             }",
                "@@ -2355,3 +2368,3 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "             {",
                "-                return Arrays.stream((Object[]) value).anyMatch(m -> m == referrer);",
                "+                return Arrays.stream((Object[]) value).anyMatch(m -> m == referee);",
                "             }",
                "@@ -2361,4 +2374,4 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "                                           .stream()",
                "-                                          .anyMatch(e -> e.getKey() == referrer",
                "-                                                         || e.getValue() == referrer);",
                "+                                          .anyMatch(e -> e.getKey() == referee",
                "+                                                         || e.getValue() == referee);",
                "             }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b22a1e7ad898992a60ffb8ef2c66f58735d8ba1e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522684134,
            "hunks": 1,
            "message": "NO-JIRA: [Broker-J] [System Tests] Remove workaround for qpid jms client not respecting reconnectDelay (QPIDJMS-365)",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 263ff9c341..b5be7d247d 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -288,2 +288,6 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "         {",
                "+            if (!options.containsKey(\"failover.useReconnectBackOff\"))",
                "+            {",
                "+                options.put(\"failover.useReconnectBackOff\", \"false\");",
                "+            }",
                "             if (!options.containsKey(\"failover.maxReconnectAttempts\"))"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPIDJMS-365": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPIDJMS-365",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eef93a82accc372403ec948eaedeb82c0d39ec3e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522419843,
            "hunks": 27,
            "message": "QPID-8064: [Broker-J] Ensure that when providing an alias for a FileKeyStore the entry corresponds to a private-key",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "index 2b3f450ff1..50e9560d10 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "@@ -57,3 +57,3 @@ import org.apache.qpid.server.transport.network.security.ssl.QpidServerX509KeyMa",
                " import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "+import org.apache.qpid.server.util.StringUtil;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "@@ -127,3 +127,3 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "     {",
                "-        java.security.KeyStore keyStore;",
                "+        final String loggableStoreUrl = StringUtil.elideDataUrl(fileKeyStore.getStoreUrl());",
                "         try",
                "@@ -133,21 +133,4 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "             String keyStoreType = fileKeyStore.getKeyStoreType();",
                "-            keyStore = SSLUtil.getInitializedKeyStore(url, password, keyStoreType);",
                "-        }",
                "-        catch (Exception e)",
                "-        {",
                "-            final String message;",
                "-            if (e instanceof IOException && e.getCause() != null && e.getCause() instanceof UnrecoverableKeyException)",
                "-            {",
                "-                message = \"Check key store password. Cannot instantiate key store from '\" + fileKeyStore.getStoreUrl() + \"'.\";",
                "-            }",
                "-            else",
                "-            {",
                "-                message = \"Cannot instantiate key store from '\" + fileKeyStore.getStoreUrl() + \"'.\";",
                "-            }",
                "-",
                "-            throw new IllegalConfigurationException(message, e);",
                "-        }",
                "+            java.security.KeyStore keyStore = SSLUtil.getInitializedKeyStore(url, password, keyStoreType);",
                "-        try",
                "-        {",
                "             final String certAlias = fileKeyStore.getCertificateAlias();",
                "@@ -160,13 +143,13 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "                     throw new IllegalConfigurationException(String.format(",
                "-                            \"Cannot find a certificate with alias '%s' in key store : %s\",",
                "+                            \"Cannot find a certificate with alias '%s' in key store '%s'.\",",
                "                             certAlias,",
                "-                            fileKeyStore.getStoreUrl()));",
                "+                            loggableStoreUrl));",
                "                 }",
                "-                if (keyStore.isCertificateEntry(certAlias))",
                "+                if (!keyStore.entryInstanceOf(certAlias, java.security.KeyStore.PrivateKeyEntry.class))",
                "                 {",
                "                     throw new IllegalConfigurationException(String.format(",
                "-                            \"Alias '%s' in key store : %s does not identify a key.\",",
                "+                            \"Alias '%s' in key store '%s' does not identify a private key.\",",
                "                             certAlias,",
                "-                            fileKeyStore.getStoreUrl()));",
                "+                            loggableStoreUrl));",
                "@@ -174,14 +157,18 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "             }",
                "-",
                "-            if (!containsPrivateKey(keyStore))",
                "+            else if (!containsPrivateKey(keyStore))",
                "             {",
                "-                throw new IllegalConfigurationException(\"Keystore must contain at least one private key.\");",
                "+                throw new IllegalConfigurationException(String.format(",
                "+                        \"Keystore '%s' must contain at least one private key.\", loggableStoreUrl));",
                "             }",
                "         }",
                "-        catch (KeyStoreException e)",
                "+        catch (UnrecoverableKeyException e)",
                "         {",
                "-            // key store should be initialized above",
                "-            throw new ServerScopedRuntimeException(\"Key store has not been initialized\", e);",
                "+            String message = String.format(\"Check key store password. Cannot instantiate key store from '%s'.\", loggableStoreUrl);",
                "+            throw new IllegalConfigurationException(message, e);",
                "+        }",
                "+        catch (IOException | GeneralSecurityException e)",
                "+        {",
                "+            final String message = String.format(\"Cannot instantiate key store from '%s'.\", loggableStoreUrl);",
                "+            throw new IllegalConfigurationException(message, e);",
                "         }",
                "-",
                "@@ -193,4 +180,4 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "         {",
                "-            throw new IllegalConfigurationException(\"Unknown keyManagerFactoryAlgorithm: \"",
                "-                    + fileKeyStore.getKeyManagerFactoryAlgorithm());",
                "+            throw new IllegalConfigurationException(String.format(\"Unknown keyManagerFactoryAlgorithm: '%s'\",",
                "+                                                                  fileKeyStore.getKeyManagerFactoryAlgorithm()));",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "index e562653e5f..d6a4925cfc 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "@@ -57,3 +57,3 @@ import org.apache.qpid.server.transport.network.security.ssl.QpidPeersOnlyTrustM",
                " import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "+import org.apache.qpid.server.util.StringUtil;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "@@ -151,26 +151,7 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "     {",
                "-        KeyStore keyStore;",
                "+        final String loggableStoreUrl = StringUtil.elideDataUrl(trustStore.getStoreUrl());",
                "         try",
                "         {",
                "-            keyStore = initializeKeyStore(trustStore);",
                "-        }",
                "-        catch (Exception e)",
                "-        {",
                "-            final String message;",
                "-            if (e instanceof IOException && e.getCause() != null && e.getCause() instanceof UnrecoverableKeyException)",
                "-            {",
                "-                message = \"Check trust store password. Cannot instantiate trust store from '\"",
                "-                          + trustStore.getStoreUrl()",
                "-                          + \"'.\";",
                "-            }",
                "-            else",
                "-            {",
                "-                message = \"Cannot instantiate trust store from '\" + trustStore.getStoreUrl() + \"'.\";",
                "-            }",
                "+            KeyStore keyStore = initializeKeyStore(trustStore);",
                "-            throw new IllegalConfigurationException(message, e);",
                "-        }",
                "-",
                "-        try",
                "-        {",
                "             final Enumeration<String> aliasesEnum = keyStore.aliases();",
                "@@ -188,8 +169,15 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "             {",
                "-                throw new IllegalConfigurationException(\"Trust store must contain at least one certificate.\");",
                "+                throw new IllegalConfigurationException(String.format(",
                "+                        \"Trust store '%s' must contain at least one certificate.\", loggableStoreUrl));",
                "             }",
                "         }",
                "-        catch (KeyStoreException e)",
                "+        catch (UnrecoverableKeyException e)",
                "         {",
                "-            throw new ServerScopedRuntimeException(\"Trust store has not been initialized\", e);",
                "+            String message = String.format(\"Check trust store password. Cannot instantiate trust store from '%s'.\", loggableStoreUrl);",
                "+            throw new IllegalConfigurationException(message, e);",
                "+        }",
                "+        catch (IOException | GeneralSecurityException e)",
                "+        {",
                "+            final String message = String.format(\"Cannot instantiate trust store from '%s'.\", loggableStoreUrl);",
                "+            throw new IllegalConfigurationException(message, e);",
                "         }",
                "@@ -202,3 +190,4 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "         {",
                "-            throw new IllegalConfigurationException(\"Unknown trustManagerFactoryAlgorithm: \" + trustStore.getTrustManagerFactoryAlgorithm());",
                "+            throw new IllegalConfigurationException(String.format(\"Unknown trustManagerFactoryAlgorithm '%s'\",",
                "+                                                                  trustStore.getTrustManagerFactoryAlgorithm()));",
                "         }",
                "@@ -249,3 +238,3 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "     @Override",
                "-    protected TrustManager[] getTrustManagersInternal() throws GeneralSecurityException",
                "+    protected TrustManager[] getTrustManagersInternal()",
                "     {",
                "@@ -260,3 +249,3 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "     @Override",
                "-    public Certificate[] getCertificates() throws GeneralSecurityException",
                "+    public Certificate[] getCertificates()",
                "     {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "index 9e6ab0a837..520268cb13 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "@@ -429,2 +429,13 @@ public class SSLUtil",
                "         }",
                "+        catch (IOException ioe)",
                "+        {",
                "+            if (ioe.getCause() instanceof GeneralSecurityException)",
                "+            {",
                "+                throw ((GeneralSecurityException) ioe.getCause());",
                "+            }",
                "+            else",
                "+            {",
                "+                throw ioe;",
                "+            }",
                "+        }",
                "         return ks;",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/util/StringUtil.java b/broker-core/src/main/java/org/apache/qpid/server/util/StringUtil.java",
                "index 2b986a35e1..b9863700df 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/util/StringUtil.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/util/StringUtil.java",
                "@@ -39,2 +39,7 @@ public class StringUtil",
                "+    public static String elideDataUrl(final String path)",
                "+    {",
                "+        return String.valueOf(path).toLowerCase().startsWith(\"data:\") ? \"data:...\" : path;",
                "+    }",
                "+",
                "     public String randomAlphaNumericString(int maxLength)",
                "diff --git a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclFileAccessControlProviderImpl.java b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclFileAccessControlProviderImpl.java",
                "index c8a90d746b..0a80b812ed 100644",
                "--- a/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclFileAccessControlProviderImpl.java",
                "+++ b/broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclFileAccessControlProviderImpl.java",
                "@@ -42,2 +42,3 @@ import org.apache.qpid.server.security.access.config.AclFileParser;",
                " import org.apache.qpid.server.security.access.config.RuleBasedAccessControl;",
                "+import org.apache.qpid.server.util.StringUtil;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "@@ -88,3 +89,3 @@ public class AclFileAccessControlProviderImpl",
                "             changeAttributes(Collections.<String,Object>emptyMap());",
                "-            getEventLogger().message(AccessControlMessages.LOADED(String.valueOf(getPath()).startsWith(\"data:\") ? \"data:...\" : getPath()));",
                "+            getEventLogger().message(AccessControlMessages.LOADED(StringUtil.elideDataUrl(getPath())));"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "broker-core/src/main/java/org/apache/qpid/server/util/StringUtil.java",
                "broker-plugins/access-control/src/main/java/org/apache/qpid/server/security/access/plugins/AclFileAccessControlProviderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8064": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8064",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3040a4fb9574a4ad55f1800a2eea133a8d6a6ca5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522068523,
            "hunks": 17,
            "message": "QPID-8064: [Broker-J] Improve validation for file keystore and file trust store",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "index 0912e0fe56..2b3f450ff1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "@@ -34,2 +34,3 @@ import java.util.Collections;",
                " import java.util.Date;",
                "+import java.util.Enumeration;",
                " import java.util.Map;",
                "@@ -149,20 +150,38 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "-        if (fileKeyStore.getCertificateAlias() != null)",
                "+        try",
                "         {",
                "-            Certificate cert;",
                "-            try",
                "-            {",
                "-                cert = keyStore.getCertificate(fileKeyStore.getCertificateAlias());",
                "-            }",
                "-            catch (KeyStoreException e)",
                "+            final String certAlias = fileKeyStore.getCertificateAlias();",
                "+            if (certAlias != null)",
                "             {",
                "-                // key store should be initialized above",
                "-                throw new ServerScopedRuntimeException(\"Key store has not been initialized\", e);",
                "+                Certificate cert = keyStore.getCertificate(certAlias);",
                "+",
                "+                if (cert == null)",
                "+                {",
                "+                    throw new IllegalConfigurationException(String.format(",
                "+                            \"Cannot find a certificate with alias '%s' in key store : %s\",",
                "+                            certAlias,",
                "+                            fileKeyStore.getStoreUrl()));",
                "+                }",
                "+",
                "+                if (keyStore.isCertificateEntry(certAlias))",
                "+                {",
                "+                    throw new IllegalConfigurationException(String.format(",
                "+                            \"Alias '%s' in key store : %s does not identify a key.\",",
                "+                            certAlias,",
                "+                            fileKeyStore.getStoreUrl()));",
                "+",
                "+                }",
                "             }",
                "-            if (cert == null)",
                "+",
                "+            if (!containsPrivateKey(keyStore))",
                "             {",
                "-                throw new IllegalConfigurationException(\"Cannot find a certificate with alias '\" + fileKeyStore.getCertificateAlias()",
                "-                        + \"' in key store : \" + fileKeyStore.getStoreUrl());",
                "+                throw new IllegalConfigurationException(\"Keystore must contain at least one private key.\");",
                "             }",
                "         }",
                "+        catch (KeyStoreException e)",
                "+        {",
                "+            // key store should be initialized above",
                "+            throw new ServerScopedRuntimeException(\"Key store has not been initialized\", e);",
                "+        }",
                "+",
                "@@ -182,2 +201,3 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "         }",
                "+",
                "         checkCertificateExpiry();",
                "@@ -347,2 +367,18 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "+    private boolean containsPrivateKey(final java.security.KeyStore keyStore) throws KeyStoreException",
                "+    {",
                "+        final Enumeration<String> aliasesEnum = keyStore.aliases();",
                "+        boolean foundPrivateKey = false;",
                "+        while (aliasesEnum.hasMoreElements())",
                "+        {",
                "+            String alias = aliasesEnum.nextElement();",
                "+            if (keyStore.entryInstanceOf(alias, java.security.KeyStore.PrivateKeyEntry.class))",
                "+            {",
                "+                foundPrivateKey = true;",
                "+                break;",
                "+            }",
                "+        }",
                "+        return foundPrivateKey;",
                "+    }",
                "+",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "index 7c2be9748e..e562653e5f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "@@ -57,2 +57,3 @@ import org.apache.qpid.server.transport.network.security.ssl.QpidPeersOnlyTrustM",
                " import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "@@ -150,5 +151,6 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "     {",
                "+        KeyStore keyStore;",
                "         try",
                "         {",
                "-            initializeKeyStore(trustStore);",
                "+            keyStore = initializeKeyStore(trustStore);",
                "         }",
                "@@ -159,3 +161,5 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "             {",
                "-                message = \"Check trust store password. Cannot instantiate trust store from '\" + trustStore.getStoreUrl() + \"'.\";",
                "+                message = \"Check trust store password. Cannot instantiate trust store from '\"",
                "+                          + trustStore.getStoreUrl()",
                "+                          + \"'.\";",
                "             }",
                "@@ -169,2 +173,25 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "+        try",
                "+        {",
                "+            final Enumeration<String> aliasesEnum = keyStore.aliases();",
                "+            boolean certificateFound = false;",
                "+            while (aliasesEnum.hasMoreElements())",
                "+            {",
                "+                String alias = aliasesEnum.nextElement();",
                "+                if (keyStore.isCertificateEntry(alias))",
                "+                {",
                "+                    certificateFound = true;",
                "+                    break;",
                "+                }",
                "+            }",
                "+            if (!certificateFound)",
                "+            {",
                "+                throw new IllegalConfigurationException(\"Trust store must contain at least one certificate.\");",
                "+            }",
                "+        }",
                "+        catch (KeyStoreException e)",
                "+        {",
                "+            throw new ServerScopedRuntimeException(\"Trust store has not been initialized\", e);",
                "+        }",
                "+",
                "         try",
                "@@ -340,3 +367,7 @@ public class FileTrustStoreImpl extends AbstractTrustStore<FileTrustStoreImpl> i",
                "         {",
                "-            certificates.add(ts.getCertificate(aliases.nextElement()));",
                "+            String alias = aliases.nextElement();",
                "+            if (ts.isCertificateEntry(alias))",
                "+            {",
                "+                certificates.add(ts.getCertificate(alias));",
                "+            }",
                "         }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "index 74f2738db7..3cb06ac42d 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "@@ -63,3 +63,3 @@ public class QpidBestFitX509KeyManager extends X509ExtendedKeyManager",
                "         {",
                "-            if(ks.isKeyEntry(alias))",
                "+            if(ks.entryInstanceOf(alias, KeyStore.PrivateKeyEntry.class))",
                "             {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidPeersOnlyTrustManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidPeersOnlyTrustManager.java",
                "index 19cdd87e24..8b3deecaf6 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidPeersOnlyTrustManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidPeersOnlyTrustManager.java",
                "@@ -50,3 +50,7 @@ public class QpidPeersOnlyTrustManager implements X509TrustManager",
                "         {",
                "-            _trustedCerts.add(ts.getCertificate(aliases.nextElement()));",
                "+            String alias = aliases.nextElement();",
                "+            if (ts.isCertificateEntry(alias))",
                "+            {",
                "+                _trustedCerts.add(ts.getCertificate(alias));",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidPeersOnlyTrustManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8064": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8064",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f0f558759b283592f50e744ca48e25a9a5932dd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521457690,
            "hunks": 6,
            "message": "QPID-8014:[Broker-J][WMC] Make sure that port UI template is parsed",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js",
                "index 3d194faa36..1dcbb2f57d 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js",
                "@@ -22,2 +22,3 @@ define([\"dojo/dom\",",
                "         \"dojo/dom-construct\",",
                "+        \"dojo/parser\",",
                "         \"dojo/_base/window\",",
                "@@ -59,2 +60,3 @@ define([\"dojo/dom\",",
                "               construct,",
                "+              parser,",
                "               win,",
                "@@ -75,6 +77,18 @@ define([\"dojo/dom\",",
                "-        var node = construct.create(\"div\", null, win.body(), \"last\");",
                "+        addPort.init = function ()",
                "+        {",
                "+            var node = construct.create(\"div\", null, win.body(), \"last\");",
                "+            node.innerHTML = template;",
                "-        node.innerHTML = template;",
                "-        addPort.dialogNode = dom.byId(\"addPort\")",
                "+            parser.parse(node)",
                "+                .then(lang.hitch(this, function (instances)",
                "+                {",
                "+                    this._postParse();",
                "+                }));",
                "+        };",
                "+",
                "+        addPort._postParse = function()",
                "+        {",
                "+            this.dialogNode = dom.byId(\"addPort\");",
                "+        };",
                "@@ -141,3 +155,3 @@ define([\"dojo/dom\",",
                "                     \"WSS\") >= 0);",
                "-        }",
                "+        };",
                "@@ -361,3 +375,3 @@ define([\"dojo/dom\",",
                "             });",
                "-        }",
                "+        };",
                "@@ -655,2 +669,4 @@ define([\"dojo/dom\",",
                "+        addPort.init();",
                "+",
                "         return addPort;"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8014": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8014",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c38d9e09f0a4e6a0642ad0348989d0581159e85",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523463577,
            "hunks": 1,
            "message": "QPID-8158: [Broker-J] [System Tests] Stop expanding broker bundle for system tests",
            "diff": [
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index 194421fb15..2bc41b0693 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -101,78 +101,2 @@",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-resources-plugin</artifactId>",
                "-        <!--version specified in parent pluginManagement -->",
                "-        <executions>",
                "-          <!-- copy the systests config files into the ${qpid.home}/etc",
                "-               directory where the tests expect them -->",
                "-          <execution>",
                "-            <id>copy-systests-etc-resources</id>",
                "-            <phase>generate-resources</phase>",
                "-            <goals>",
                "-              <goal>copy-resources</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${qpid.home}</outputDirectory>",
                "-              <resources>",
                "-                <resource>",
                "-                  <directory>${test.systest.resource.directory}</directory>",
                "-                  <includes>",
                "-                    <include>etc/</include>",
                "-                  </includes>",
                "-                </resource>",
                "-              </resources>",
                "-            </configuration>",
                "-          </execution>",
                "-          <!-- copy the ../test-profiles directory into ${qpid.home}/..",
                "-               directory where the tests expect it -->",
                "-          <execution>",
                "-            <id>copy-test-profile-resources</id>",
                "-            <phase>generate-resources</phase>",
                "-            <goals>",
                "-              <goal>copy-resources</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${qpid.home}/..</outputDirectory>",
                "-              <resources>",
                "-                <resource>",
                "-                  <directory>${test.resource.directory}</directory>",
                "-                  <includes>",
                "-                    <include>test-profiles/</include>",
                "-                  </includes>",
                "-                </resource>",
                "-              </resources>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <!--version specified in parent pluginManagement -->",
                "-        <executions>",
                "-          <execution>",
                "-            <id>extract-broker-distribution</id>",
                "-            <phase>pre-integration-test</phase>",
                "-            <goals>",
                "-              <goal>unpack</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputAbsoluteArtifactFilename>false</outputAbsoluteArtifactFilename>",
                "-              <outputDirectory>${project.build.directory}</outputDirectory>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>org.apache.qpid</groupId>",
                "-                  <artifactId>apache-qpid-broker-j</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <classifier>bin</classifier>",
                "-                  <type>tar.gz</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "       <plugin>"
            ],
            "changed_files": [
                "qpid-systests-parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bffe99cea0809326ffe990b8658a688ab5d34ddf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1500448855,
            "hunks": 6,
            "message": "QPID-7858: Update dependency reference w.r.t FasterXML/jackson",
            "diff": [
                "diff --git a/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index 509852ec1c..a5669c89e2 100644",
                "--- a/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -41,7 +41,7 @@ From: 'Apache Software Foundation' (http://db.apache.org/)",
                " From: 'FasterXML' (http://fasterxml.com/)",
                "-  - Jackson-annotations (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-annotations:bundle:2.5.0",
                "+  - Jackson-annotations (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-annotations:bundle:2.8.0",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-core:bundle:2.5.3",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.7",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.5.3",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.7",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "diff --git a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index c014332ad1..856fe4ce99 100644",
                "--- a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -31,7 +31,7 @@ From: 'an unknown organization'",
                " From: 'FasterXML' (http://fasterxml.com/)",
                "-  - Jackson-annotations (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-annotations:bundle:2.5.0",
                "+  - Jackson-annotations (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-annotations:bundle:2.8.0",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-core:bundle:2.5.3",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.8.7",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.5.3",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.8.7",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)"
            ],
            "changed_files": [
                "broker/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7858": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7858",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d189cc70172cdcf77dc2e6697d07e79bd3b33c7d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521463573,
            "hunks": 2,
            "message": "QPID-8133: [Broker-J] Correct DEPENDENCIES_REFERENCE for Commons-CLI",
            "diff": [
                "diff --git a/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index b99c4c2173..4fcd48b169 100644",
                "--- a/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -68,7 +68,5 @@ From: 'QOS.ch' (http://www.qos.ch)",
                "-From: 'The Apache Software Foundation' (http://www.apache.org/)",
                "-  - Commons CLI (http://commons.apache.org/cli/) commons-cli:commons-cli:jar:1.2",
                "-    License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-",
                " From: 'The Apache Software Foundation' (https://www.apache.org/)",
                "+  - Apache Commons CLI (http://commons.apache.org/proper/commons-cli/) commons-cli:commons-cli:jar:1.4",
                "+    License: Apache License, Version 2.0  (https://www.apache.org/licenses/LICENSE-2.0.txt)",
                "   - Apache Qpid Broker-J BDB Message Store Plug-in (http://qpid.apache.org/components/qpid-bdbstore) org.apache.qpid:qpid-bdbstore:jar"
            ],
            "changed_files": [
                "apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8133": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8133",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2732dd69bd8ac3053c51f7b13e5a9bf8e581c70",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518171901,
            "hunks": 1,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Refactor VirtualHostLoggerTest",
            "diff": [
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 6938e3b825..89f437bc39 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -32,3 +32,2 @@ org.apache.qpid.systest.rest.VirtualHostRestTest#testMutateStateOfVirtualHostWit",
                " org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualHostNode",
                "-org.apache.qpid.systest.rest.VirtualHostLoggerRestTest#testDeleteVirtualHostLoggerAndRule_QPID_8066"
            ],
            "changed_files": [
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9bc70ef14c470666759a6224abb372e078431173",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520618782,
            "hunks": 8,
            "message": "Revert \"QPID-7197: [Broker-J] Generalize a validation of references to the object being deleted\" This reverts commit e776ae641c7f49c461c641b0e3533ea3c8ce47b2. The WIP was committed by mistake",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "index 13a4d4c2e5..f6bbb7829c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "@@ -31,3 +31,2 @@ import java.lang.reflect.Proxy;",
                " import java.lang.reflect.Type;",
                "-import java.lang.reflect.TypeVariable;",
                " import java.security.AccessControlContext;",
                "@@ -60,3 +59,2 @@ import java.util.concurrent.TimeoutException;",
                " import java.util.concurrent.atomic.AtomicReference;",
                "-import java.util.function.Predicate;",
                " import java.util.regex.Pattern;",
                "@@ -2229,3 +2227,2 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "         validateChange(proxyForValidation, attributes.keySet());",
                "-        validateReferredBy(getModel().getAncestor(getModel().getRootCategory(), this), this);",
                "@@ -2248,109 +2245,2 @@ public abstract class AbstractConfiguredObject<X extends ConfiguredObject<X>> im",
                "-    private void validateReferredBy(final ConfiguredObject<?> object,",
                "-                                    final ConfiguredObject<?> lookupReference)",
                "-    {",
                "-        if (isReferredBy(object, lookupReference))",
                "-        {",
                "-            throw new IntegrityViolationException(String.format(\"Configured object %s is referred by %s\",",
                "-                                                                lookupReference,",
                "-                                                                object));",
                "-        }",
                "-",
                "-        getModel().getChildTypes(object.getCategoryClass())",
                "-                  .forEach(childClass -> object.getChildren(childClass)",
                "-                                               .forEach(child -> validateReferredBy(child, lookupReference)));",
                "-",
                "-",
                "-    }",
                "-",
                "-    private boolean isReferredBy(final ConfiguredObject<?> object,",
                "-                                 final ConfiguredObject<?> lookupReference)",
                "-    {",
                "-        if (object instanceof AbstractConfiguredObject)",
                "-        {",
                "-            return getModel().getTypeRegistry()",
                "-                             .getAttributes(object.getClass())",
                "-                             .stream()",
                "-                             .anyMatch(attribute -> {",
                "-",
                "-                                 Object value = object.getAttribute(attribute.getName());",
                "-                                 Class<?> type = attribute.getType();",
                "-                                 Type genericType = attribute.getGenericType();",
                "-",
                "-                                 return isReferred(value, type, genericType, lookupReference);",
                "-                             });",
                "-        }",
                "-        else",
                "-        {",
                "-            return object.getAttributeNames().stream().anyMatch(name -> {",
                "-                Object value = object.getAttribute(name);",
                "-                if (value != null)",
                "-                {",
                "-                   Class<?> type = value.getClass();",
                "-                   return isReferred(value, type, type, lookupReference);",
                "-                }",
                "-                return false;",
                "-            });",
                "-        }",
                "-",
                "-    }",
                "-",
                "-    private boolean isReferred(final Object value,",
                "-                               final Class<?> type,",
                "-                               final Type genericType,",
                "-                               final ConfiguredObject<?> lookupReference)",
                "-    {",
                "-        final Class<? extends ConfiguredObject> lookupCategory = lookupReference.getCategoryClass();",
                "-        if (lookupCategory.isAssignableFrom(type) && value == lookupReference)",
                "-        {",
                "-            return true;",
                "-        }",
                "-        else if (hasMemberOfType(genericType, lookupCategory))",
                "-        {",
                "-            if (value instanceof Collection)",
                "-            {",
                "-                return ((Collection<?>) value).stream().anyMatch(m -> m == lookupReference);",
                "-            }",
                "-            else if (value instanceof Object[])",
                "-            {",
                "-                return Arrays.stream((Object[]) value).anyMatch(m -> m == lookupReference);",
                "-            }",
                "-            else if (value instanceof Map)",
                "-            {",
                "-                return ((Map<?, ?>) value).entrySet()",
                "-                                          .stream()",
                "-                                          .anyMatch(e -> e.getKey() == lookupReference",
                "-                                                         || e.getValue() == lookupReference);",
                "-            }",
                "-        }",
                "-        return false;",
                "-    }",
                "-",
                "-    private boolean hasMemberOfType(Type returnType, Class<?> classType)",
                "-    {",
                "-        if (returnType instanceof ParameterizedType)",
                "-        {",
                "-            Type[] types = ((ParameterizedType) returnType).getActualTypeArguments();",
                "-            return Arrays.stream(types).anyMatch((Predicate<? super Type>) type -> {",
                "-                if (type instanceof Class && classType.isAssignableFrom((Class) type))",
                "-                {",
                "-                    return true;",
                "-                }",
                "-                else if (type instanceof ParameterizedType)",
                "-                {",
                "-                    Type rawType = ((ParameterizedType) type).getRawType();",
                "-                    return rawType instanceof Class && classType.isAssignableFrom((Class) rawType);",
                "-                }",
                "-                else if (type instanceof TypeVariable)",
                "-                {",
                "-                    Type[] bounds = ((TypeVariable) type).getBounds();",
                "-                    return Arrays.stream(bounds).anyMatch(boundType -> hasMemberOfType(boundType, classType));",
                "-",
                "-                }",
                "-                return false;",
                "-            });",
                "-        }",
                "-        return false;",
                "-    }",
                "-",
                "     protected ListenableFuture<Void> deleteNoChecks()",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "index 6f08b443cb..45efb41970 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "@@ -302,2 +302,5 @@ public abstract class AbstractPort<X extends AbstractPort<X>> extends AbstractCo",
                "+        Collection<Protocol> protocols = updated.getProtocols();",
                "+",
                "+",
                "         boolean usesSsl = isUsingTLSTransport(transports);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "index d240849cf8..453399ade0 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "@@ -81,2 +81,27 @@ public abstract class AbstractKeyStore<X extends AbstractKeyStore<X>>",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            // verify that it is not in use",
                "+            String storeName = getName();",
                "+",
                "+            Collection<Port> ports = new ArrayList<>(getBroker().getPorts());",
                "+            for (Port port : ports)",
                "+            {",
                "+                if (port.getKeyStore() == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(",
                "+                            \"Key store '%s' can't be deleted as it is in use by a port: %s\",",
                "+                            storeName,",
                "+                            port.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "index e0760a4e2c..fe4655a05f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "@@ -109,2 +109,58 @@ public abstract class AbstractTrustStore<X extends AbstractTrustStore<X>>",
                "+",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE)",
                "+            && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            // verify that it is not in use",
                "+            String storeName = getName();",
                "+",
                "+            Collection<Port<?>> ports = new ArrayList<>(_broker.getPorts());",
                "+            for (Port<?> port : ports)",
                "+            {",
                "+                Collection<TrustStore> trustStores = port.getTrustStores();",
                "+                if (trustStores != null)",
                "+                {",
                "+                    for (TrustStore store : trustStores)",
                "+                    {",
                "+                        if (storeName.equals(store.getAttribute(TrustStore.NAME)))",
                "+                        {",
                "+                            throw new IntegrityViolationException(String.format(",
                "+                                    \"Trust store '%s' can't be deleted as it is in use by a port: %s\",",
                "+                                    storeName,",
                "+                                    port.getName()));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            Collection<AuthenticationProvider> authenticationProviders =",
                "+                    new ArrayList<>(_broker.getAuthenticationProviders());",
                "+            for (AuthenticationProvider authProvider : authenticationProviders)",
                "+            {",
                "+                TrustStore otherTrustStore = null;",
                "+                if (authProvider instanceof SimpleLDAPAuthenticationManager)",
                "+                {",
                "+                    otherTrustStore = ((SimpleLDAPAuthenticationManager) authProvider).getTrustStore();",
                "+                }",
                "+                else if (authProvider instanceof OAuth2AuthenticationProvider)",
                "+                {",
                "+                    otherTrustStore = ((OAuth2AuthenticationProvider) authProvider).getTrustStore();",
                "+                }",
                "+",
                "+                if (otherTrustStore == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(",
                "+                            \"Trust store '%s' can't be deleted as it is in use by an authentication manager: '%s'\",",
                "+                            getName(),",
                "+                            authProvider.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "index 337b1090ea..5b8b219668 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java",
                "@@ -82,2 +82,24 @@ public abstract class AbstractAuthenticationManager<T extends AbstractAuthentica",
                "+    @Override",
                "+    protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)",
                "+    {",
                "+        super.validateChange(proxyForValidation, changedAttributes);",
                "+",
                "+        if (changedAttributes.contains(ConfiguredObject.DESIRED_STATE) && proxyForValidation.getDesiredState() == State.DELETED)",
                "+        {",
                "+            String providerName = getName();",
                "+            // verify that provider is not in use",
                "+            Collection<Port> ports = new ArrayList<>(_container.getChildren(Port.class));",
                "+            for (Port<?> port : ports)",
                "+            {",
                "+                if (port.getAuthenticationProvider() == this)",
                "+                {",
                "+                    throw new IntegrityViolationException(String.format(\"Authentication provider '%s' is set on port %s\",",
                "+                                                                        providerName,",
                "+                                                                        port.getName()));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPort.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/AbstractTrustStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/AbstractAuthenticationManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ea20349ac9e2c0052e889035d604e4f35507c99",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519658445,
            "hunks": 26,
            "message": "Revert \"QPID-8103: [Broker-J] [WMC] [Query UI] Add ability to download results as CSV\" This reverts commit 7dbb88471a414d993e4ee3bd3e8fde2f30ca2f46.",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "deleted file mode 100644",
                "index 90a5f5faaf..0000000000",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "+++ /dev/null",
                "@@ -1,320 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-package org.apache.qpid.server.management.plugin.servlet.csv;",
                "-",
                "-",
                "-import java.io.IOException;",
                "-import java.util.Collection;",
                "-",
                "-/**",
                "- * Simplified version of CSVFormat from Apache Commons CSV",
                "- */",
                "-public final class CSVFormat",
                "-{",
                "-    private static final char COMMA = ',';",
                "-",
                "-    private static final char COMMENT = '#';",
                "-",
                "-    private static final char CR = '\\r';",
                "-",
                "-    private static final String CRLF = \"\\r\\n\";",
                "-",
                "-    private static final Character DOUBLE_QUOTE_CHAR = '\"';",
                "-",
                "-    private static final String EMPTY = \"\";",
                "-",
                "-    private static final char LF = '\\n';",
                "-",
                "-    private static final char SP = ' ';",
                "-",
                "-    private final char _delimiter;",
                "-",
                "-    private final Character _escapeCharacter; // null if escaping is disabled",
                "-",
                "-    private final Character _quoteCharacter; // null if quoting is disabled",
                "-",
                "-    private final String _recordSeparator; // for outputs",
                "-",
                "-    public CSVFormat()",
                "-    {",
                "-        this(COMMA, DOUBLE_QUOTE_CHAR, null, CRLF);",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a customized CSV format.",
                "-     *",
                "-     * @param delimiter       the char used for value separation, must not be a line break character",
                "-     * @param quoteCharacter  the Character used as value encapsulation marker, may be {@code null} to disable",
                "-     * @param escapeCharacter the Character used to escape special characters in values, may be {@code null} to disable",
                "-     * @param recordSeparator the line separator to use for output",
                "-     * @throws IllegalArgumentException if the _delimiter is a line break character",
                "-     */",
                "-    CSVFormat(final char delimiter,",
                "-              final Character quoteCharacter,",
                "-              final Character escapeCharacter,",
                "-              final String recordSeparator)",
                "-    {",
                "-        if (delimiter == LF || delimiter == CR)",
                "-        {",
                "-            throw new IllegalArgumentException(\"The _delimiter cannot be a line break\");",
                "-        }",
                "-",
                "-        if (quoteCharacter != null && delimiter == quoteCharacter)",
                "-        {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The quote character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
                "-        }",
                "-",
                "-        if (escapeCharacter != null && delimiter == escapeCharacter)",
                "-        {",
                "-            throw new IllegalArgumentException(",
                "-                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
                "-        }",
                "-",
                "-        this._delimiter = delimiter;",
                "-        this._quoteCharacter = quoteCharacter;",
                "-        this._escapeCharacter = escapeCharacter;",
                "-        this._recordSeparator = recordSeparator;",
                "-    }",
                "-",
                "-    public <T extends Collection<?>> void printRecord(final Appendable out, final T record) throws IOException",
                "-    {",
                "-        boolean newRecord = true;",
                "-        for (Object item : record)",
                "-        {",
                "-            print(out, item, newRecord);",
                "-            newRecord = false;",
                "-        }",
                "-        println(out);",
                "-    }",
                "-",
                "-    public <C extends Collection<? extends Collection<?>>> void printRecords(final Appendable out, final C records)",
                "-            throws IOException",
                "-    {",
                "-        for (Collection<?> record : records)",
                "-        {",
                "-            printRecord(out, record);",
                "-        }",
                "-    }",
                "-",
                "-",
                "-    public void println(final Appendable out) throws IOException",
                "-    {",
                "-        if (_recordSeparator != null)",
                "-        {",
                "-            out.append(_recordSeparator);",
                "-        }",
                "-    }",
                "-",
                "-    public void print(final Appendable out, final Object value, final boolean newRecord) throws IOException",
                "-    {",
                "-        CharSequence charSequence;",
                "-        if (value == null)",
                "-        {",
                "-            charSequence = EMPTY;",
                "-        }",
                "-        else",
                "-        {",
                "-            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
                "-        }",
                "-        this.print(out, value, charSequence, 0, charSequence.length(), newRecord);",
                "-    }",
                "-",
                "-",
                "-    public void printComments(final Appendable out,",
                "-                              final String... comments) throws IOException",
                "-    {",
                "-        for (String comment: comments)",
                "-        {",
                "-            out.append(COMMENT).append(SP).append(comment);",
                "-            println(out);",
                "-        }",
                "-    }",
                "-",
                "-    private void print(final Appendable out,",
                "-                       final Object object,",
                "-                       final CharSequence value,",
                "-                       final int offset,",
                "-                       final int len,",
                "-                       final boolean newRecord) throws IOException",
                "-    {",
                "-        if (!newRecord)",
                "-        {",
                "-            out.append(_delimiter);",
                "-        }",
                "-        if (object == null)",
                "-        {",
                "-            out.append(value);",
                "-        }",
                "-        else if (_quoteCharacter != null)",
                "-        {",
                "-            printAndQuote(value, offset, len, out, newRecord);",
                "-        }",
                "-        else if (_escapeCharacter != null)",
                "-        {",
                "-            printAndEscape(out, value, offset, len);",
                "-        }",
                "-        else",
                "-        {",
                "-            out.append(value, offset, offset + len);",
                "-        }",
                "-    }",
                "-",
                "-    private void printAndEscape(final Appendable out,",
                "-                                final CharSequence value,",
                "-                                final int offset,",
                "-                                final int len)",
                "-            throws IOException",
                "-    {",
                "-        int start = offset;",
                "-        int pos = offset;",
                "-        final int end = offset + len;",
                "-",
                "-        final char escape = _escapeCharacter;",
                "-",
                "-        while (pos < end)",
                "-        {",
                "-            char c = value.charAt(pos);",
                "-            if (c == CR || c == LF || c == _delimiter || c == escape)",
                "-            {",
                "-                // write out segment up until this char",
                "-                if (pos > start)",
                "-                {",
                "-                    out.append(value, start, pos);",
                "-                }",
                "-                if (c == LF)",
                "-                {",
                "-                    c = 'n';",
                "-                }",
                "-                else if (c == CR)",
                "-                {",
                "-                    c = 'r';",
                "-                }",
                "-",
                "-                out.append(escape);",
                "-                out.append(c);",
                "-",
                "-                start = pos + 1; // start on the current char after this one",
                "-            }",
                "-",
                "-            pos++;",
                "-        }",
                "-",
                "-        // write last segment",
                "-        if (pos > start)",
                "-        {",
                "-            out.append(value, start, pos);",
                "-        }",
                "-    }",
                "-",
                "-    private void printAndQuote(final CharSequence value, final int offset, final int len,",
                "-                               final Appendable out, final boolean newRecord) throws IOException",
                "-    {",
                "-        boolean quote = false;",
                "-        int start = offset;",
                "-        int pos = offset;",
                "-        final int end = offset + len;",
                "-",
                "-        final char quoteChar = _quoteCharacter;",
                "-",
                "-        if (len <= 0)",
                "-        {",
                "-            // always quote an empty token that is the first",
                "-            // on the line, as it may be the only thing on the",
                "-            // line. If it were not quoted in that case,",
                "-            // an empty line has no tokens.",
                "-            if (newRecord)",
                "-            {",
                "-                quote = true;",
                "-            }",
                "-        }",
                "-        else",
                "-        {",
                "-            char c = value.charAt(pos);",
                "-",
                "-            if (c <= COMMENT)",
                "-            {",
                "-                // Some other chars at the start of a value caused the parser to fail, so for now",
                "-                // encapsulate if we start in anything less than '#'. We are being conservative",
                "-                // by including the default comment char too.",
                "-                quote = true;",
                "-            }",
                "-            else",
                "-            {",
                "-                while (pos < end)",
                "-                {",
                "-                    c = value.charAt(pos);",
                "-                    if (c == LF || c == CR || c == quoteChar || c == _delimiter)",
                "-                    {",
                "-                        quote = true;",
                "-                        break;",
                "-                    }",
                "-                    pos++;",
                "-                }",
                "-",
                "-                if (!quote)",
                "-                {",
                "-                    pos = end - 1;",
                "-                    c = value.charAt(pos);",
                "-                    // Some other chars at the end caused the parser to fail, so for now",
                "-                    // encapsulate if we end in anything less than ' '",
                "-                    if (c <= SP)",
                "-                    {",
                "-                        quote = true;",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (!quote)",
                "-        {",
                "-            // no encapsulation needed - write out the original value",
                "-            out.append(value, start, end);",
                "-            return;",
                "-        }",
                "-",
                "-        // we hit something that needed encapsulation",
                "-        out.append(quoteChar);",
                "-",
                "-        // Pick up where we left off: pos should be positioned on the first character that caused",
                "-        // the need for encapsulation.",
                "-        while (pos < end)",
                "-        {",
                "-            final char c = value.charAt(pos);",
                "-            if (c == quoteChar)",
                "-            {",
                "-                // write out the chunk up until this point",
                "-",
                "-                // add 1 to the length to write out the encapsulator also",
                "-                out.append(value, start, pos + 1);",
                "-                // put the next starting position on the encapsulator so we will",
                "-                // write it out again with the next string (effectively doubling it)",
                "-                start = pos;",
                "-            }",
                "-            pos++;",
                "-        }",
                "-",
                "-        // write the last segment",
                "-        out.append(value, start, pos);",
                "-        out.append(quoteChar);",
                "-    }",
                "-",
                "-}",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "index 76d87f1698..4403200337 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "@@ -24,3 +24,2 @@ import static org.apache.qpid.server.management.plugin.HttpManagementUtil.CONTEN",
                " import static org.apache.qpid.server.management.plugin.HttpManagementUtil.GZIP_CONTENT_ENCODING;",
                "-import static org.apache.qpid.server.management.plugin.HttpManagementUtil.ensureFilenameIsRfc2183;",
                "@@ -69,7 +68,2 @@ public abstract class AbstractServlet extends HttpServlet",
                "     public static final int SC_UNPROCESSABLE_ENTITY = 422;",
                "-    /**",
                "-     * Signifies that the agent wishes the servlet to set the Content-Disposition on the",
                "-     * response with the value attachment.  This filename will be derived from the parameter value.",
                "-     */",
                "-    public static final String CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM = \"contentDispositionAttachmentFilename\";",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractServlet.class);",
                "@@ -166,19 +160,2 @@ public abstract class AbstractServlet extends HttpServlet",
                "-    protected void setContentDispositionHeaderIfNecessary(final HttpServletResponse response,",
                "-                                                        final String attachmentFilename)",
                "-    {",
                "-        if (attachmentFilename != null)",
                "-        {",
                "-            String filenameRfc2183 = ensureFilenameIsRfc2183(attachmentFilename);",
                "-            if (filenameRfc2183.length() > 0)",
                "-            {",
                "-                response.setHeader(CONTENT_DISPOSITION, String.format(\"attachment; filename=\\\"%s\\\"\", filenameRfc2183));",
                "-            }",
                "-            else",
                "-            {",
                "-                response.setHeader(CONTENT_DISPOSITION, \"attachment\");  // Agent will allow user to choose a name",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     protected void doPut(HttpServletRequest req,",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "index 8ae06f8573..2b7229559f 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "@@ -23,4 +23,2 @@ package org.apache.qpid.server.management.plugin.servlet.rest;",
                " import java.io.IOException;",
                "-import java.io.PrintWriter;",
                "-import java.nio.charset.StandardCharsets;",
                " import java.util.LinkedHashMap;",
                "@@ -37,3 +35,2 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.filter.SelectorParsingException;",
                "-import org.apache.qpid.server.management.plugin.servlet.csv.CSVFormat;",
                " import org.apache.qpid.server.management.plugin.servlet.query.ConfiguredObjectQuery;",
                "@@ -41,3 +38,2 @@ import org.apache.qpid.server.management.plugin.servlet.query.EvaluationExceptio",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "-import org.apache.qpid.server.model.Container;",
                " import org.apache.qpid.server.model.Model;",
                "@@ -48,3 +44,2 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "-    private static final CSVFormat CSV_FORMAT = new CSVFormat();",
                "@@ -85,2 +80,3 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "                 List<ConfiguredObject<?>> objects = getAllObjects(parent, category, request);",
                "+                Map<String, Object> resultsObject = new LinkedHashMap<>();",
                "@@ -95,22 +91,6 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "-",
                "-                    String attachmentFilename = request.getParameter(CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM);",
                "-                    if (attachmentFilename != null)",
                "-                    {",
                "-                        setContentDispositionHeaderIfNecessary(response, attachmentFilename);",
                "-                    }",
                "-",
                "-                    if (\"csv\".equalsIgnoreCase(request.getParameter(\"format\")))",
                "-                    {",
                "-                        sendCsvResponse(categoryName, parent, query, request, response);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        Map<String, Object> resultsObject = new LinkedHashMap<>();",
                "-                        resultsObject.put(\"headers\", query.getHeaders());",
                "-                        resultsObject.put(\"results\", query.getResults());",
                "-                        resultsObject.put(\"total\", query.getTotalNumberOfRows());",
                "-",
                "-                        sendJsonResponse(resultsObject, request, response);",
                "-                    }",
                "+                    resultsObject.put(\"headers\", query.getHeaders());",
                "+                    resultsObject.put(\"results\", query.getResults());",
                "+                    resultsObject.put(\"total\", query.getTotalNumberOfRows());",
                "+                    sendJsonResponse(resultsObject, request, response);",
                "                 }",
                "@@ -147,30 +127,2 @@ public abstract class QueryServlet<X extends ConfiguredObject<?>> extends Abstra",
                "-    private void sendCsvResponse(final String categoryName,",
                "-                                 final X parent,",
                "-                                 final ConfiguredObjectQuery query,",
                "-                                 final HttpServletRequest request,",
                "-                                 final HttpServletResponse response)",
                "-            throws IOException",
                "-    {",
                "-        response.setStatus(HttpServletResponse.SC_OK);",
                "-        response.setContentType(\"text/csv;charset=utf-8;\");",
                "-        response.setCharacterEncoding(StandardCharsets.UTF_8.name());",
                "-        sendCachingHeadersOnResponse(response);",
                "-        try (PrintWriter writer = response.getWriter())",
                "-        {",
                "-            CSV_FORMAT.printComments(writer,",
                "-                                     String.format(\"parent : %s %s \",",
                "-                                                   parent.getCategoryClass().getSimpleName(),",
                "-                                                   (parent instanceof Container",
                "-                                                           ? \"\"",
                "-                                                           : parent.getName())),",
                "-                                     String.format(\"category : %s\", categoryName),",
                "-                                     String.format(\"select : %s\", request.getParameter(\"select\")),",
                "-                                     String.format(\"where : %s\", request.getParameter(\"where\")),",
                "-                                     String.format(\"order by : %s\", request.getParameter(\"orderBy\")));",
                "-            CSV_FORMAT.printRecord(writer, query.getHeaders());",
                "-            CSV_FORMAT.printRecords(writer, query.getResults());",
                "-        }",
                "-    }",
                "-",
                "     abstract protected X getParent(final HttpServletRequest request, final ConfiguredObject<?> managedObject);",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "index 4e5e524215..8361886744 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "@@ -83,2 +83,7 @@ public class RestServlet extends AbstractServlet",
                "     private static final String SINGLETON_MODEL_OBJECT_RESPONSE_AS_LIST = \"singletonModelObjectResponseAsList\";",
                "+    /**",
                "+     * Signifies that the agent wishes the servlet to set the Content-Disposition on the",
                "+     * response with the value attachment.  This filename will be derived from the parameter value.",
                "+     */",
                "+    public static final String CONTENT_DISPOSITION_ATTACHMENT_FILENAME_PARAM = \"contentDispositionAttachmentFilename\";",
                "     public static final Set<String> RESERVED_PARAMS =",
                "@@ -310,2 +315,19 @@ public class RestServlet extends AbstractServlet",
                "+    private void setContentDispositionHeaderIfNecessary(final HttpServletResponse response,",
                "+                                                        final String attachmentFilename)",
                "+    {",
                "+        if (attachmentFilename != null)",
                "+        {",
                "+            String filenameRfc2183 = ensureFilenameIsRfc2183(attachmentFilename);",
                "+            if (filenameRfc2183.length() > 0)",
                "+            {",
                "+                response.setHeader(CONTENT_DISPOSITION, String.format(\"attachment; filename=\\\"%s\\\"\", filenameRfc2183));",
                "+            }",
                "+            else",
                "+            {",
                "+                response.setHeader(CONTENT_DISPOSITION, \"attachment\");  // Agent will allow user to choose a name",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private Class<? extends ConfiguredObject> getConfiguredClass(HttpServletRequest request, ConfiguredObject<?> managedObject)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/css/common.css b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "index b2577c7e4d..e4b2511ed3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "+++ b/broker-plugins/management-http/src/main/java/resources/css/common.css",
                "@@ -613,6 +613,2 @@ td.advancedSearchField, col.autoWidth {",
                "-.exportIcon.ui-icon {",
                "-    background-position: -112px -112px;",
                "-}",
                "-",
                " .claro .searchBox {",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "index bf56bf4da2..5570636aa0 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "@@ -614,4 +614,7 @@ define([\"dojo/_base/lang\",",
                "         {",
                "+            var url = \"api/latest/\" + (query.parent && query.parent.type === \"virtualhost\" ? \"queryvhost/\"",
                "+                      + this.objectToPath({parent: query.parent}) : \"querybroker\") + (query.category ? \"/\"",
                "+                      + query.category : \"\");",
                "             var request = {",
                "-                url: this.getQueryUrl(query),",
                "+                url: this.getFullUrl(url),",
                "                 query: {}",
                "@@ -622,14 +625,2 @@ define([\"dojo/_base/lang\",",
                "-        Management.prototype.getQueryUrl = function (query, parameters)",
                "-        {",
                "-            var url = \"api/latest/\" + (query.parent && query.parent.type === \"virtualhost\" ? \"queryvhost/\"",
                "-                      + this.objectToPath({parent: query.parent}) : \"querybroker\") + (query.category ? \"/\"",
                "-                      + query.category : \"\");",
                "-            if (parameters)",
                "-            {",
                "-                url = url + \"?\" + ioQuery.objectToQuery(parameters);",
                "-            }",
                "-           return this.getFullUrl(url);",
                "-        };",
                "-",
                "         Management.prototype.savePreference = function(parentObject, preference)",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "index 799ec67ba2..4f6dad61ea 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "@@ -37,3 +37,2 @@ define([\"dojo/_base/declare\",",
                "         \"qpid/common/MessageDialog\",",
                "-        \"dojox/uuid/generateRandomUuid\",",
                "         \"qpid/management/query/DropDownSelect\",",
                "@@ -64,4 +63,3 @@ define([\"dojo/_base/declare\",",
                "               QueryGrid,",
                "-              MessageDialog,",
                "-              uuid)",
                "+              MessageDialog)",
                "     {",
                "@@ -187,4 +185,2 @@ define([\"dojo/_base/declare\",",
                "                 searchForm: null,",
                "-                exportButton: null,",
                "-                exportButtonTooltip: null,",
                "@@ -247,3 +243,2 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.on(\"click\", lang.hitch(this, this._deleteQuery));",
                "-                    this.exportButton.on(\"click\", lang.hitch(this, this._exportQueryResults));",
                "@@ -255,3 +250,2 @@ define([\"dojo/_base/declare\",",
                "                     this.deleteButton.set(\"disabled\", !this._ownQuery || newQuery);",
                "-                    this.exportButton.set(\"disabled\", true);",
                "@@ -545,3 +539,2 @@ define([\"dojo/_base/declare\",",
                "                         _currentPage: currentPage,",
                "-                        allowTextSelection: true,",
                "                         transformer: function (data)",
                "@@ -594,3 +587,2 @@ define([\"dojo/_base/declare\",",
                "                     this._buildColumnsIfHeadersChanged(e.data);",
                "-                    this.exportButton.set(\"disabled\", !(e.data.total && e.data.total > 0));",
                "                 },",
                "@@ -987,15 +979,2 @@ define([\"dojo/_base/declare\",",
                "                     }",
                "-                },",
                "-                _exportQueryResults: function () {",
                "-                    var query = this._getQuery();",
                "-                    query.format = \"csv\";",
                "-                    var id = uuid();",
                "-                    query.contentDispositionAttachmentFilename =\"query-results-\" + id + \".csv\";",
                "-                    delete query.category;",
                "-                    var url = this.management.getQueryUrl({category: this.categoryName, parent: this.parentObject}, query);",
                "-                    var iframe = document.createElement('iframe');",
                "-                    iframe.id = \"query_downloader_\" + id;",
                "-                    iframe.style.display = \"none\";",
                "-                    document.body.appendChild(iframe);",
                "-                    iframe.src = url;",
                "                 }",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html b/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "index 0a28eac75a..ff1b4715da 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html",
                "@@ -42,9 +42,2 @@",
                "              data-dojo-props=\"connectId:'deleteButton_${id}',position:['below']\">Delete query from preferences and close the tab</div>",
                "-        <div id=\"exportButton_${id}\"",
                "-             data-dojo-type=\"dijit/form/Button\"",
                "-             data-dojo-attach-point=\"exportButton\"",
                "-             data-dojo-props=\"iconClass: 'exportIcon ui-icon'\">Export</div>",
                "-        <div data-dojo-attach-point=\"exportButtonTooltip\"",
                "-             data-dojo-type=\"dijit/Tooltip\"",
                "-             data-dojo-props=\"connectId:'exportButton_${id}',position:['below']\">Export query results into CSV format</div>",
                "         <div data-dojo-type=\"dijit/form/Button\""
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/csv/CSVFormat.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/QueryServlet.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java",
                "broker-plugins/management-http/src/main/java/resources/css/common.css",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Management.js",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/management/query/QueryWidget.js",
                "broker-plugins/management-http/src/main/java/resources/query/QueryWidget.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "22b606e94d4ccdc501c9b9dff02a230d42d49c73",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1509726162,
            "hunks": 8,
            "message": "QPID-8014:[Broker-J][WMC] Make sure that qpid console specific classes are loaded after console html is parsed",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/index.html b/broker-plugins/management-http/src/main/java/resources/index.html",
                "index 2ac76f3c06..474e7123b1 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/index.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/index.html",
                "@@ -52,2 +52,3 @@",
                "         var dojoConfig = {",
                "+            parseOnLoad: false,",
                "             tlmSiblingOfDojo: false,",
                "@@ -90,5 +91,3 @@",
                "                     \"dojo/parser\",",
                "-                    \"qpid/common/ConsoleHelper\",",
                "-                    \"qpid/management/treeView\",",
                "-                    \"qpid/management/controller\",",
                "+                    \"dojo/ready\",",
                "                     \"qpid/common/LoginForm\",",
                "@@ -106,8 +105,16 @@",
                "                 ],",
                "-                function (parser, ConsoleHelper, treeView, controller)",
                "+                function (parser, ready)",
                "                 {",
                "-                    qpidManagementHelper = ConsoleHelper;",
                "-                    parser.parse();",
                "-                    qpidManagementHelper.init(controller, treeView);",
                "-                    management = qpidManagementHelper.management;",
                "+                    ready(function()",
                "+                    {",
                "+                        parser.parse().then(function ()",
                "+                        {",
                "+                             require([\"qpid/common/ConsoleHelper\"], function (ConsoleHelper)",
                "+                                        {",
                "+                                          qpidManagementHelper = ConsoleHelper;",
                "+                                          qpidManagementHelper.init();",
                "+                                          management = qpidManagementHelper.management;",
                "+                                        });",
                "+                        });",
                "+                    });",
                "                 });",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ConsoleHelper.js b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ConsoleHelper.js",
                "index 1436c747d9..af2b5fb6d5 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ConsoleHelper.js",
                "+++ b/broker-plugins/management-http/src/main/java/resources/js/qpid/common/ConsoleHelper.js",
                "@@ -25,4 +25,6 @@ define([\"dojo/query\",",
                "         \"qpid/common/updater\",",
                "-        \"qpid/management/Management\",",
                "         \"qpid/common/util\",",
                "+        \"qpid/management/Management\",",
                "+        \"qpid/management/treeView\",",
                "+        \"qpid/management/controller\",",
                "         \"dijit/Dialog\",",
                "@@ -30,3 +32,4 @@ define([\"dojo/query\",",
                "         \"dojo/dom\",",
                "-        \"dojo/domReady!\"], function (query, registry, entities, Structure, updater, Management, util, Dialog, domClass, dom)",
                "+        \"dojo/domReady!\"],",
                "+    function (query, registry, entities, Structure, updater, util, Management, TreeView, controller, Dialog, domClass, dom)",
                " {",
                "@@ -168,3 +171,3 @@ define([\"dojo/query\",",
                "         },",
                "-        init: function (controller, TreeView)",
                "+        init: function ()",
                "         {"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/index.html",
                "broker-plugins/management-http/src/main/java/resources/js/qpid/common/ConsoleHelper.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8014": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8014",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d832c616859ed5a5648315da4eba696207c9f15",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522338499,
            "hunks": 11,
            "message": "QPID-8140: [Broker-J][BDB HA] Handle MemberNotFoundException on removal of non-existing node",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "index c5fe0d9250..e3b053f80f 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "@@ -71,2 +71,3 @@ import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "+import org.apache.qpid.server.model.IllegalStateTransitionException;",
                " import org.apache.qpid.server.store.StoreException;",
                "@@ -1205,3 +1206,3 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "-    public boolean removeNodeFromGroup(final String nodeName)",
                "+    public void removeNodeFromGroup(final String nodeName)",
                "     {",
                "@@ -1210,9 +1211,13 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "             createReplicationGroupAdmin().removeMember(nodeName);",
                "-            return true;",
                "         }",
                "-        catch(MasterStateException e)",
                "+        catch (MasterStateException e)",
                "         {",
                "-            return false;",
                "+            throw new IllegalStateTransitionException(String.format(\"Node '%s' cannot be deleted when role is a master\",",
                "+                                                                    nodeName));",
                "         }",
                "-        catch(RuntimeException e)",
                "+        catch (MemberNotFoundException e)",
                "+        {",
                "+            throw new IllegalArgumentException(String.format(\"Node '%s' is not a member of the group\", nodeName), e);",
                "+        }",
                "+        catch (RuntimeException e)",
                "         {",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "index 9afb79556b..cd98aa95f1 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java",
                "@@ -133,23 +133,7 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "             String nodeName = getName();",
                "-",
                "-            boolean deletionAllowed;",
                "             try",
                "             {",
                "+                _replicatedEnvironmentFacade.removeNodeFromGroup(nodeName);",
                "                 getEventLogger().message(_virtualHostNodeLogSubject, HighAvailabilityMessages.DELETED());",
                "-                deletionAllowed = _replicatedEnvironmentFacade.removeNodeFromGroup(nodeName);",
                "-                if (deletionAllowed)",
                "-                {",
                "-                    future.set(null);",
                "-                }",
                "-                else",
                "-                {",
                "-                    future.setException(new IllegalStateTransitionException(String.format(",
                "-                            \"Node '%s' cannot be deleted when role is a master\",",
                "-                            nodeName)));",
                "-                }",
                "-            }",
                "-            catch (ServerScopedRuntimeException e)",
                "-            {",
                "-                future.setException(e);",
                "-                throw e;",
                "+                future.set(null);",
                "             }",
                "@@ -157,7 +141,4 @@ public class BDBHARemoteReplicationNodeImpl extends AbstractConfiguredObject<BDB",
                "             {",
                "-                future.setException(new IllegalStateTransitionException(String.format(",
                "-                        \"Unexpected exception on node '%s' deletion\",",
                "-                        nodeName), e));",
                "+                future.setException(e);",
                "             }",
                "-",
                "             return future;"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8140": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8140",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "42c182f0b994292d801d2393f033bb773415b92f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518087998,
            "hunks": 1,
            "message": "QPID-8091: [Broker-J] Add missing annotation",
            "diff": [
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java",
                "new file mode 100644",
                "index 0000000000..56ac0f2bbb",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.utils;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target({ElementType.METHOD, ElementType.TYPE})",
                "+public @interface BrokerSpecific",
                "+{",
                "+    String kind() default \"\";",
                "+}"
            ],
            "changed_files": [
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f57f6deb190066a76a6a3e6ed449b88471b07d0d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519409689,
            "hunks": 7,
            "message": "QPID-8110: Minor tidy-up (cherry picked from commit 51472013e85fc66ff99d59c80e402261f5775ac5)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "index 3bb26d4b4e..7978b1b94e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "@@ -103,3 +103,3 @@ public interface Broker<X extends Broker<X>> extends ConfiguredObject<X>, EventL",
                "     @ManagedContextDefault(name = BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE)",
                "-    DescendantType DEFAULT_BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = DescendantType.IMMEDIATE;",
                "+    DescendantScope DEFAULT_BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = DescendantScope.IMMEDIATE;",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "index 42a83c1b03..9eac92f3c9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "@@ -283,3 +283,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                 {",
                "-                    DescendantType.valueOf(value);",
                "+                    DescendantScope.valueOf(value);",
                "                 }",
                "@@ -291,3 +291,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                             BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE,",
                "-                            EnumSet.allOf(DescendantType.class)));",
                "+                            EnumSet.allOf(DescendantScope.class)));",
                "                 }",
                "@@ -384,4 +384,4 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "     {",
                "-        final DescendantType descendantScope = getContextValue(DescendantType.class,",
                "-                                                               BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "+        final DescendantScope descendantScope = getContextValue(DescendantScope.class,",
                "+                                                                BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "         List<ConfiguredObject<?>> failedChildren = getChildrenInState(this, State.ERRORED, descendantScope);",
                "@@ -440,3 +440,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                                                          final State state,",
                "-                                                         final DescendantType descendantScope)",
                "+                                                         final DescendantScope descendantScope)",
                "     {",
                "@@ -453,3 +453,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                 }",
                "-                if (descendantScope == DescendantType.ALL)",
                "+                if (descendantScope == DescendantScope.ALL)",
                "                 {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java",
                "new file mode 100644",
                "index 0000000000..d749ea264b",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java",
                "@@ -0,0 +1,27 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.model;",
                "+",
                "+public enum DescendantScope",
                "+{",
                "+    IMMEDIATE,",
                "+    ALL",
                "+}"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8110": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8110",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9f82a4d338c5103cce9f64dbe07f9886334e7112",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522320162,
            "hunks": 1,
            "message": "QPID-8064: [Broker-J] Fix tests failing with IBM JDK",
            "diff": [
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index f737909638..b3ce59c66d 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -181,2 +181,13 @@",
                "       </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.rat</groupId>",
                "+        <artifactId>apache-rat-plugin</artifactId>",
                "+        <configuration>",
                "+          <excludes>",
                "+            <exclude>src/test/resources/ssl/**</exclude>",
                "+          </excludes>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "     </plugins>"
            ],
            "changed_files": [
                "broker-core/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8064": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8064",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ccf691b2caeb16e2f9421146cfefd3489a6bf5bf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515690237,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor PersistentStoreTest as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2d10c6c8b7..987309938f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -49,3 +49,2 @@ org.apache.qpid.server.AlertingTest#*",
                " // The C++ server has a totally different persistence mechanism",
                "-org.apache.qpid.server.store.PersistentStoreTest#*",
                " org.apache.qpid.server.store.SplitStoreTest#*",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 66cd5e8bb8..d4052deace 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -20,3 +20,2 @@",
                " //These tests require a persistent store",
                "-org.apache.qpid.server.store.PersistentStoreTest#*",
                " org.apache.qpid.server.store.SplitStoreTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f81b404c902b4e2eef3184158abb58e9d5fecbb4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518893316,
            "hunks": 1,
            "message": "QPID-8083: [System Tests] [REST/HTTP] Eliminate VirtualHostRestTest",
            "diff": [
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 89f437bc39..d08df5c6c2 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -28,5 +28,2 @@ org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-org.apache.qpid.systest.rest.VirtualHostRestTest#testRecoverVirtualHostInDesiredStateStoppedWithDescription",
                "-org.apache.qpid.systest.rest.VirtualHostRestTest#testMutateStateOfVirtualHostWithQueuesAndMessages",
                "-",
                " org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualHostNode"
            ],
            "changed_files": [
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81d81723b65895b234ad639ef922baaf8de150df",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518116286,
            "hunks": 4,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Remove many superfluous tests",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index 72304009ef..4bc2526f16 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -85,2 +85,7 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "+    protected String getVirtualHostNode()",
                "+    {",
                "+        return getClass().getSimpleName() + \"_\" + _testName.getMethodName();",
                "+    }",
                "+",
                "     public HttpTestHelper getHelper()",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2ce365d634..f63c003e36 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -37,5 +37,2 @@ org.apache.qpid.server.AlertingTest#*",
                "-// The C++ server has a totally different persistence mechanism",
                "-org.apache.qpid.server.store.SplitStoreTest#*",
                "-",
                " // CPP Broker does not follow the same Logging convention as the Qpid Broker-J",
                "diff --git a/test-profiles/JavaJsonExcludes b/test-profiles/JavaJsonExcludes",
                "index 77b4e3d704..61f470391d 100644",
                "--- a/test-profiles/JavaJsonExcludes",
                "+++ b/test-profiles/JavaJsonExcludes",
                "@@ -21,3 +21,2 @@ org.apache.qpid.server.store.berkeleydb.*",
                " org.apache.qpid.server.store.berkeleydb.replication.*",
                "-org.apache.qpid.server.store.SplitStoreTest#*",
                " org.apache.qpid.systest.rest.acl.VirtualHostACLTest#*",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index e565ae98a4..6938e3b825 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -20,3 +20,2 @@",
                " //These tests require a persistent store",
                "-org.apache.qpid.server.store.SplitStoreTest#*",
                " org.apache.qpid.server.logging.AlertingTest#testAlertingReallyWorksWithRestart"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "test-profiles/CPPExcludes",
                "test-profiles/JavaJsonExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b14319e30a0a09f8ce12a8d4e98e19a686c0c1ed",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525284448,
            "hunks": 11,
            "message": "QPID-8167: [Broker-J] Fix quiescing virtualhosts in management mode",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/configuration/store/ManagementModeStoreHandler.java b/broker-core/src/main/java/org/apache/qpid/server/configuration/store/ManagementModeStoreHandler.java",
                "index b3e962dcff..0d0cf856cc 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/configuration/store/ManagementModeStoreHandler.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/configuration/store/ManagementModeStoreHandler.java",
                "@@ -36,2 +36,3 @@ import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                " import org.apache.qpid.server.model.Broker;",
                "+import org.apache.qpid.server.model.BrokerImpl;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "@@ -46,3 +47,3 @@ import org.apache.qpid.server.model.SystemConfig;",
                " import org.apache.qpid.server.model.VirtualHost;",
                "-import org.apache.qpid.server.model.BrokerImpl;",
                "+import org.apache.qpid.server.model.VirtualHostNode;",
                " import org.apache.qpid.server.store.ConfiguredObjectRecord;",
                "@@ -59,4 +60,4 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "     private static final String PORT_TYPE = Port.class.getSimpleName();",
                "-    private static final String VIRTUAL_HOST_TYPE = VirtualHost.class.getSimpleName();",
                "-    private static final String ATTRIBUTE_STATE = VirtualHost.STATE;",
                "+    private static final String VIRTUAL_HOST_NODE_TYPE = VirtualHostNode.class.getSimpleName();",
                "+    private static final String ATTRIBUTE_DESIRED_STATE = ConfiguredObject.DESIRED_STATE;",
                "     private static final Object MANAGEMENT_MODE_AUTH_PROVIDER = \"mm-auth\";",
                "@@ -284,3 +285,3 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "             boolean quiesce = false;",
                "-            if (VIRTUAL_HOST_TYPE.equals(entryType) && options.isManagementModeQuiesceVirtualHosts())",
                "+            if (VIRTUAL_HOST_NODE_TYPE.equals(entryType) && options.isManagementModeQuiesceVirtualHosts())",
                "             {",
                "@@ -319,3 +320,3 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "                 // save original state",
                "-                quiescedEntries.put(entry.getId(), attributes.get(ATTRIBUTE_STATE));",
                "+                quiescedEntries.put(entry.getId(), attributes.get(ATTRIBUTE_DESIRED_STATE));",
                "             }",
                "@@ -349,3 +350,3 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "         {",
                "-            attributes.remove(ATTRIBUTE_STATE);",
                "+            attributes.remove(ATTRIBUTE_DESIRED_STATE);",
                "         }",
                "@@ -353,3 +354,3 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "         {",
                "-            attributes.put(ATTRIBUTE_STATE, state);",
                "+            attributes.put(ATTRIBUTE_DESIRED_STATE, state);",
                "         }",
                "@@ -384,3 +385,3 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "             boolean quiesce = false;",
                "-            if (VIRTUAL_HOST_TYPE.equals(entryType) && _systemConfig.isManagementModeQuiesceVirtualHosts())",
                "+            if (VIRTUAL_HOST_NODE_TYPE.equals(entryType) && _systemConfig.isManagementModeQuiesceVirtualHosts())",
                "             {",
                "@@ -419,5 +420,5 @@ public class ManagementModeStoreHandler implements DurableConfigurationStore",
                "                 // save original state",
                "-                _quiescedEntriesOriginalState.put(object.getId(), attributes.get(ATTRIBUTE_STATE));",
                "+                _quiescedEntriesOriginalState.put(object.getId(), attributes.get(ATTRIBUTE_DESIRED_STATE));",
                "                 Map<String, Object> modifiedAttributes = new HashMap<String, Object>(attributes);",
                "-                modifiedAttributes.put(ATTRIBUTE_STATE, State.QUIESCED);",
                "+                modifiedAttributes.put(ATTRIBUTE_DESIRED_STATE, State.QUIESCED);",
                "                 ConfiguredObjectRecord record = new ConfiguredObjectRecordImpl(object.getId(),",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "index fb58433dd0..b17b998fc9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java",
                "@@ -154,2 +154,9 @@ public abstract class AbstractVirtualHostNode<X extends AbstractVirtualHostNode<",
                "+    @StateTransition(currentState = State.UNINITIALIZED, desiredState = State.QUIESCED)",
                "+    protected ListenableFuture<Void> startQuiesced()",
                "+    {",
                "+        setState(State.QUIESCED);",
                "+        return Futures.immediateFuture(null);",
                "+    }",
                "+",
                "     @StateTransition( currentState = {State.UNINITIALIZED, State.STOPPED, State.ERRORED }, desiredState = State.ACTIVE )"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/configuration/store/ManagementModeStoreHandler.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8167": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8167",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "192863d3120a99a49a3f41105c201cd5fba03e0b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520347642,
            "hunks": 17,
            "message": "QPID-8117: [Broker-J] Make sure that table prefix of JDBC Virtual Host Node is respected by preferences store",
            "diff": [
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCPreferenceStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCPreferenceStore.java",
                "index 61a63d4630..e065649d0f 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCPreferenceStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCPreferenceStore.java",
                "@@ -58,14 +58,11 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "-    private static final String CREATE_PREFERENCES_VERSION_TABLE =",
                "-            \"CREATE TABLE \" + PREFERENCES_VERSION_TABLE_NAME + \" ( version VARCHAR(20) NOT NULL )\";",
                "-    private static final String INSERT_INTO_PREFERENCES_VERSION =",
                "-            \"INSERT INTO \" + PREFERENCES_VERSION_TABLE_NAME + \" ( version ) VALUES ( ? )\";",
                "-    private static final String SELECT_FROM_PREFERENCES_VERSION =",
                "-            \"SELECT version FROM \" + PREFERENCES_VERSION_TABLE_NAME;",
                "-",
                "-    private static final String INSERT_INTO_PREFERENCES = \"INSERT INTO \" + PREFERENCES_TABLE_NAME + \" ( id, attributes ) VALUES ( ?, ? )\";",
                "-    private static final String DELETE_FROM_PREFERENCES = \"DELETE FROM \" + PREFERENCES_TABLE_NAME + \" where id = ?\";",
                "-    private static final String SELECT_FROM_PREFERENCES = \"SELECT id, attributes FROM \" + PREFERENCES_TABLE_NAME;",
                "-    private static final String FIND_PREFERENCE = \"SELECT attributes FROM \" + PREFERENCES_TABLE_NAME + \" WHERE id = ?\";",
                "-    private static final String UPDATE_PREFERENCES = \"UPDATE \" + PREFERENCES_TABLE_NAME + \" SET attributes = ? WHERE id = ?\";",
                "+    private static final String CREATE_PREFERENCES_VERSION_TABLE = \"CREATE TABLE %s ( version VARCHAR(20) NOT NULL )\";",
                "+    private static final String INSERT_INTO_PREFERENCES_VERSION = \"INSERT INTO %s ( version ) VALUES ( ? )\";",
                "+    private static final String SELECT_FROM_PREFERENCES_VERSION = \"SELECT version FROM %s\";",
                "+",
                "+    private static final String INSERT_INTO_PREFERENCES = \"INSERT INTO %s ( id, attributes ) VALUES ( ?, ? )\";",
                "+    private static final String DELETE_FROM_PREFERENCES = \"DELETE FROM %s where id = ?\";",
                "+    private static final String SELECT_FROM_PREFERENCES = \"SELECT id, attributes FROM %s\";",
                "+    private static final String FIND_PREFERENCE = \"SELECT attributes FROM %s WHERE id = ?\";",
                "+    private static final String UPDATE_PREFERENCES = \"UPDATE %s SET attributes = ? WHERE id = ?\";",
                "@@ -74,2 +71,9 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "+    private String _tableNamePrefix = \"\";",
                "+",
                "+    protected void setTableNamePrefix(final String tableNamePrefix)",
                "+    {",
                "+        _tableNamePrefix = tableNamePrefix == null ? \"\" : tableNamePrefix;",
                "+    }",
                "+",
                "     @Override",
                "@@ -181,3 +185,5 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "                     {",
                "-                        try (PreparedStatement deleteStatement = connection.prepareStatement(DELETE_FROM_PREFERENCES))",
                "+                        try (PreparedStatement deleteStatement = connection.prepareStatement(String.format(",
                "+                                DELETE_FROM_PREFERENCES,",
                "+                                getPreferencesTableName())))",
                "                         {",
                "@@ -258,4 +264,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "         {",
                "-            dropTableStatement.execute(\"DROP TABLE \" + PREFERENCES_TABLE_NAME);",
                "-            dropTableStatement.execute(\"DROP TABLE \" + PREFERENCES_VERSION_TABLE_NAME);",
                "+            dropTableStatement.execute(String.format(\"DROP TABLE %s\", getPreferencesTableName()));",
                "+            dropTableStatement.execute(String.format(\"DROP TABLE %s\", getPreferencesVersionTableName()));",
                "         }",
                "@@ -290,3 +296,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "         {",
                "-            try (PreparedStatement stmt = conn.prepareStatement(FIND_PREFERENCE))",
                "+            try (PreparedStatement stmt = conn.prepareStatement(String.format(FIND_PREFERENCE,",
                "+                                                                              getPreferencesTableName())))",
                "             {",
                "@@ -297,3 +304,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "                     {",
                "-                        try (PreparedStatement updateStatement = conn.prepareStatement(UPDATE_PREFERENCES))",
                "+                        try (PreparedStatement updateStatement = conn.prepareStatement(String.format(UPDATE_PREFERENCES,",
                "+                                                                                                     getPreferencesTableName())))",
                "                         {",
                "@@ -306,3 +314,5 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "                     {",
                "-                        try (PreparedStatement insertStatement = conn.prepareStatement(INSERT_INTO_PREFERENCES))",
                "+                        try (PreparedStatement insertStatement = conn.prepareStatement(String.format(",
                "+                                INSERT_INTO_PREFERENCES,",
                "+                                getPreferencesTableName())))",
                "                         {",
                "@@ -386,3 +396,3 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "     {",
                "-        if (!tableExists(PREFERENCES_VERSION_TABLE_NAME, conn))",
                "+        if (!tableExists(getPreferencesVersionTableName(), conn))",
                "         {",
                "@@ -390,3 +400,3 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "             {",
                "-                stmt.execute(CREATE_PREFERENCES_VERSION_TABLE);",
                "+                stmt.execute(String.format(CREATE_PREFERENCES_VERSION_TABLE, getPreferencesVersionTableName()));",
                "             }",
                "@@ -399,3 +409,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "     {",
                "-        try (PreparedStatement pstmt = conn.prepareStatement(INSERT_INTO_PREFERENCES_VERSION))",
                "+        try (PreparedStatement pstmt = conn.prepareStatement(String.format(INSERT_INTO_PREFERENCES_VERSION,",
                "+                                                                           getPreferencesVersionTableName())))",
                "         {",
                "@@ -408,3 +419,3 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "     {",
                "-        if (!tableExists(PREFERENCES_TABLE_NAME, conn))",
                "+        if (!tableExists(getPreferencesTableName(), conn))",
                "         {",
                "@@ -413,3 +424,3 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "                 stmt.execute(\"CREATE TABLE \"",
                "-                             + PREFERENCES_TABLE_NAME",
                "+                             + getPreferencesTableName()",
                "                              + \" ( id VARCHAR(36) not null, attributes \"",
                "@@ -426,3 +437,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "         {",
                "-            try (ResultSet rs = stmt.executeQuery(SELECT_FROM_PREFERENCES_VERSION))",
                "+            try (ResultSet rs = stmt.executeQuery(String.format(SELECT_FROM_PREFERENCES_VERSION,",
                "+                                                                getPreferencesVersionTableName())))",
                "             {",
                "@@ -457,3 +469,4 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "         final ObjectMapper objectMapper = new ObjectMapper();",
                "-        try (PreparedStatement stmt = connection.prepareStatement(SELECT_FROM_PREFERENCES))",
                "+        try (PreparedStatement stmt = connection.prepareStatement(String.format(SELECT_FROM_PREFERENCES,",
                "+                                                                                getPreferencesTableName())))",
                "         {",
                "@@ -477,2 +490,12 @@ public abstract class AbstractJDBCPreferenceStore implements PreferenceStore",
                "+    private String getPreferencesTableName()",
                "+    {",
                "+        return _tableNamePrefix + PREFERENCES_TABLE_NAME;",
                "+    }",
                "+",
                "+    private String getPreferencesVersionTableName()",
                "+    {",
                "+        return _tableNamePrefix + PREFERENCES_VERSION_TABLE_NAME;",
                "+    }",
                "+",
                "     enum StoreState",
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "index a5f5fe1789..af378e74a6 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java",
                "@@ -53,3 +53,3 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "     private final MessageStore _providedMessageStore = new ProvidedMessageStore();",
                "-    private final PreferenceStore _providedPreferenceStore = new ProvidedPreferenceStore();",
                "+    private final ProvidedPreferenceStore _providedPreferenceStore = new ProvidedPreferenceStore();",
                "     private String _connectionURL;",
                "@@ -79,2 +79,3 @@ public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStor",
                "         super.setTableNamePrefix(settings.getTableNamePrefix());",
                "+        _providedPreferenceStore.setTableNamePrefix(settings.getTableNamePrefix());",
                "         _connectionURL = settings.getConnectionUrl();"
            ],
            "changed_files": [
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/AbstractJDBCPreferenceStore.java",
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8117": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8117",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "07aaa13b07165e1b1b2f5c0ffb0a820e168be016",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521541914,
            "hunks": 4,
            "message": "QPID-8133: [Broker-J] Correct handling of cic command line argument and eliminate depcreation warning",
            "diff": [
                "diff --git a/broker/src/main/java/org/apache/qpid/server/Main.java b/broker/src/main/java/org/apache/qpid/server/Main.java",
                "index 31241e337f..a37cd0d560 100644",
                "--- a/broker/src/main/java/org/apache/qpid/server/Main.java",
                "+++ b/broker/src/main/java/org/apache/qpid/server/Main.java",
                "@@ -34,2 +34,3 @@ import java.util.TreeSet;",
                " import org.apache.commons.cli.CommandLine;",
                "+import org.apache.commons.cli.DefaultParser;",
                " import org.apache.commons.cli.HelpFormatter;",
                "@@ -38,3 +39,2 @@ import org.apache.commons.cli.Options;",
                " import org.apache.commons.cli.ParseException;",
                "-import org.apache.commons.cli.PosixParser;",
                " import org.slf4j.Logger;",
                "@@ -108,2 +108,3 @@ public class Main",
                "                                                                      .argName(\"path\")",
                "+                                                                     .numberOfArgs(1)",
                "                                                                      .optionalArg(true)",
                "@@ -208,3 +209,3 @@ public class Main",
                "         {",
                "-            _commandLine = new PosixParser().parse(OPTIONS, args);",
                "+            _commandLine = new DefaultParser().parse(OPTIONS, args);"
            ],
            "changed_files": [
                "broker/src/main/java/org/apache/qpid/server/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8133": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8133",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "31037b05974ee6354011b4cee361d8502af31029",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517989812,
            "hunks": 1,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Move some messaging tests.",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 5686325e92..501ff3b923 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -23,10 +23,2 @@",
                "-// Broker side defect - not creating temp queues with prefixes",
                "-",
                "-// the received message is being treated as an object message (because it lacks the necessary JMS annotation?)",
                "-org.apache.qpid.systest.rest.PublishMessageRestTest#testPublishMapMessage",
                "-org.apache.qpid.systest.rest.PublishMessageRestTest#testPublishListMessage",
                "-",
                "-// this test fails - likely a client bug with the modification racing the send",
                "-org.apache.qpid.test.unit.basic.BytesMessageTest#testModificationAfterSend"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c30050743a4ae5a0cb50e9f348dff06a00062be",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516190185,
            "hunks": 1,
            "message": "NO-JIRA: update year in web management console",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/footer.html b/broker-plugins/management-http/src/main/java/resources/footer.html",
                "index a7a62068d7..972e86f4d3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/footer.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/footer.html",
                "@@ -21,3 +21,3 @@",
                "-<div class=\"footer\"><p>&#xA9; 2004-<span class=\"currentYear\">2017</span> The Apache Software Foundation.",
                "+<div class=\"footer\"><p>&#xA9; 2004-<span class=\"currentYear\">2018</span> The Apache Software Foundation.",
                "   <br/>"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/footer.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0dd791195161d8b047643320666d7bf797e56825"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9599ec653fa30b18ea65b7c6d9f9ba4c34b7b798",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516223617,
            "hunks": 9,
            "message": "QPID-6933: [System Tests] Add CompressionTest to JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index a241ff50c9..6e64fd2a81 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -58,2 +58,3 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setSaslMechanisms(String... mechanism);",
                "+    ConnectionBuilder setCompress(boolean compress);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index de74ace35c..ae56d3f4de 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -94,3 +94,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             _managementFacade.createEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "@@ -113,3 +113,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             return _managementFacade.performOperationUsingAmqpManagement(name, operation, session, type, arguments);",
                "@@ -218,4 +218,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "-            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+            updateEntityUsingAmqpManagement(entityName, entityType, attributes, connection);",
                "         }",
                "@@ -227,2 +226,19 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "+    protected void updateEntityUsingAmqpManagement(final String entityName,",
                "+                                                 final String entityType,",
                "+                                                 final Map<String, Object> attributes,",
                "+                                                 final Connection connection)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "     protected void deleteEntityUsingAmqpManagement(final String entityName,",
                "@@ -235,3 +251,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             _managementFacade.deleteEntityUsingAmqpManagement(entityName, session, entityType);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 6f68569927..2318634c8d 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -25,2 +25,3 @@ import java.net.URLEncoder;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.HashMap;",
                " import java.util.Hashtable;",
                "@@ -239,2 +240,9 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setCompress(final boolean compress)",
                "+    {",
                "+        _options.put(\"compressMessages\", compress);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 5b7f2682b5..76e3a7656a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -243,2 +243,8 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setCompress(final boolean compress)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "58e38f31214795e8cffa596979327b04b83de771",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521134055,
            "hunks": 5,
            "message": "QPID-8123: [System Tests] Minor test related changes",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 34a7f62b47..2fa7b16ab6 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -51,2 +51,4 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setSyncPublish(boolean syncPublish);",
                "+",
                "+    @Deprecated",
                "     ConnectionBuilder setOptions(Map<String, String> options);",
                "@@ -63,6 +65,5 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setSaslMechanisms(String... mechanism);",
                "-",
                "     ConnectionBuilder setCompress(boolean compress);",
                "-    Connection build() throws NamingException, JMSException;",
                "+    Connection build() throws NamingException, JMSException;",
                "     ConnectionFactory buildConnectionFactory() throws NamingException;",
                "diff --git a/test-profiles/test-provider-1-0.properties b/test-profiles/test-provider-1-0.properties",
                "deleted file mode 100644",
                "index cb7257438b..0000000000",
                "--- a/test-profiles/test-provider-1-0.properties",
                "+++ /dev/null",
                "@@ -1,39 +0,0 @@",
                "-#",
                "-# ",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-# ",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-# ",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-# ",
                "-#",
                "-",
                "-# Copied from default.testprofile",
                "-test.port=0",
                "-test.port.ssl=0",
                "-test.port.alt=0",
                "-test.port.alt.ssl=0",
                "-",
                "-java.naming.factory.initial = org.apache.qpid.jms.jndi.JmsInitialContextFactory",
                "-",
                "-# The actual factory URIs are set in QpidBrokerTestCase ",
                "-connectionfactory.default=amqp://localhost:5672",
                "-connectionfactory.failover=amqp://localhost:5672",
                "-",
                "-",
                "-queue.MyQueue = example.MyQueue",
                "-queue.queue = example.queue",
                "-",
                "-topic.topic = amq.topic/topic",
                "-topic.durableSubscriberTopic = durableSubscriberTopic",
                "diff --git a/test-profiles/test-provider.properties b/test-profiles/test-provider.properties",
                "deleted file mode 100644",
                "index 83f6ded1d4..0000000000",
                "--- a/test-profiles/test-provider.properties",
                "+++ /dev/null",
                "@@ -1,45 +0,0 @@",
                "-#",
                "-# ",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-# ",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-# ",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-# ",
                "-#",
                "-",
                "-# Copied from default.testprofile",
                "-test.port=0",
                "-test.port.ssl=0",
                "-test.port.alt=0",
                "-test.port.alt.ssl=0",
                "-",
                "-",
                "-connectionfactory.default = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port}'",
                "-connectionfactory.default.ssl = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.ssl}?ssl='true''",
                "-",
                "-connectionfactory.failover = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port};tcp://localhost:${test.port.alt}'&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''",
                "-connectionfactory.failover.ssl = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.ssl}?ssl='true';tcp://localhost:${test.port.alt.ssl}?ssl='true''&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''",
                "-",
                "-connectionfactory.connection2 = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt}'",
                "-",
                "-connectionfactory.management = amqp://username:password@clientid/$management?brokerlist='tcp://localhost:${test.port}'",
                "-connectionfactory.management.ssl = amqp://username:password@clientid/$management?brokerlist='tcp://localhost:${test.port.ssl}?ssl='true''",
                "-",
                "-",
                "-queue.MyQueue = example.MyQueue",
                "-queue.queue = example.queue",
                "-",
                "-topic.topic = topic",
                "-topic.durableSubscriberTopic = durableSubscriberTopic"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "test-profiles/test-provider-1-0.properties",
                "test-profiles/test-provider.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8123": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8123",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c88850ee77e49292d6dbd00dfa105ca348c7e60",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519489976,
            "hunks": 2,
            "message": "QPID-8083: [System Tests] [REST/HTTP] Factor out AnonymousAccessRestTest, PreemtiveAuthRestTest, BrokerRestHttpAndHttpsTest",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index a2bb3b843b..00eb60d67a 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -77,4 +77,4 @@ public class HttpTestHelper",
                "     private final int _httpPort;",
                "-    private final String _username;",
                "-    private final String _password;",
                "+    private String _username;",
                "+    private String _password;",
                "     private final String _requestHostName;",
                "@@ -458,2 +458,12 @@ public class HttpTestHelper",
                "+    public void setPassword(final String password)",
                "+    {",
                "+        _password = password;",
                "+    }",
                "+",
                "+    public void setUserName(final String username)",
                "+    {",
                "+        _username = username;",
                "+    }",
                "+",
                "     private static class TrustAllTrustManager implements X509TrustManager"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "20f47fec86440686e7d345c6718618abfc8a09cf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519406151,
            "hunks": 12,
            "message": "QPID-8083: [System Tests] [REST/HTTP] Add TlsClientAuthenticationTest",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStore.java",
                "index 580696ad07..1010611fb1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStore.java",
                "@@ -39,2 +39,3 @@ public interface ManagedPeerCertificateTrustStore<X extends ManagedPeerCertifica",
                "     String TYPE_NAME = \"ManagedCertificateStore\";",
                "+    String STORED_CERTIFICATES = \"storedCertificates\";",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index 6561504c72..a2bb3b843b 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -35,3 +35,6 @@ import java.net.URLEncoder;",
                " import java.security.KeyManagementException;",
                "+import java.security.KeyStore;",
                "+import java.security.KeyStoreException;",
                " import java.security.NoSuchAlgorithmException;",
                "+import java.security.UnrecoverableKeyException;",
                " import java.security.cert.X509Certificate;",
                "@@ -42,6 +45,6 @@ import java.util.Map;",
                "-import javax.net.ssl.HostnameVerifier;",
                " import javax.net.ssl.HttpsURLConnection;",
                "+import javax.net.ssl.KeyManager;",
                "+import javax.net.ssl.KeyManagerFactory;",
                " import javax.net.ssl.SSLContext;",
                "-import javax.net.ssl.SSLSession;",
                " import javax.net.ssl.TrustManager;",
                "@@ -56,2 +59,3 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                " import org.apache.qpid.tests.utils.BrokerAdmin;",
                "@@ -76,3 +80,2 @@ public class HttpTestHelper",
                "     private final String _requestHostName;",
                "-",
                "     private final int _connectTimeout = Integer.getInteger(\"qpid.resttest_connection_timeout\", 30000);",
                "@@ -82,2 +85,5 @@ public class HttpTestHelper",
                "+    private KeyStore _keyStore;",
                "+    private String _keyStorePassword;",
                "+",
                "     public HttpTestHelper(final BrokerAdmin admin)",
                "@@ -140,24 +146,13 @@ public class HttpTestHelper",
                "                 SSLContext sslContext = SSLContext.getInstance(\"TLS\");",
                "-                TrustManager[] trustAllCerts = new TrustManager[] {",
                "-                        new X509TrustManager()",
                "-                        {",
                "-                            public X509Certificate[] getAcceptedIssuers()",
                "-                            {",
                "-                                X509Certificate[] issuers = new X509Certificate[0];",
                "-                                return issuers;",
                "-                            }",
                "-",
                "-                            @Override",
                "-                            public void checkClientTrusted(X509Certificate[] certs, String authType)",
                "-                            {",
                "-                            }",
                "-",
                "-                            @Override",
                "-                            public void checkServerTrusted(X509Certificate[] certs, String authType)",
                "-                            {",
                "-                            }",
                "-                        }",
                "-                };",
                "-",
                "-                sslContext.init(null, trustAllCerts, null);",
                "+                TrustManager[] trustAllCerts = new TrustManager[] {new TrustAllTrustManager()};",
                "+",
                "+                KeyManager[] keyManagers = null;",
                "+                if (_keyStore != null)",
                "+                {",
                "+                    char[] keyStoreCharPassword = _keyStorePassword == null ? null : _keyStorePassword.toCharArray();",
                "+                    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());",
                "+                    kmf.init(_keyStore, keyStoreCharPassword);",
                "+                    keyManagers = kmf.getKeyManagers();",
                "+                }",
                "+                sslContext.init(keyManagers, trustAllCerts, null);",
                "                 httpsCon.setSSLSocketFactory(sslContext.getSocketFactory());",
                "@@ -165,3 +160,3 @@ public class HttpTestHelper",
                "             }",
                "-            catch (KeyManagementException | NoSuchAlgorithmException e)",
                "+            catch (KeyStoreException | UnrecoverableKeyException | KeyManagementException | NoSuchAlgorithmException e)",
                "             {",
                "@@ -441,2 +436,42 @@ public class HttpTestHelper",
                "+    public void setKeyStore(final String keystore, final String password) throws Exception",
                "+    {",
                "+        _keyStorePassword = password;",
                "+",
                "+        if (keystore != null)",
                "+        {",
                "+            try",
                "+            {",
                "+                URL ks = new URL(keystore);",
                "+                _keyStore = SSLUtil.getInitializedKeyStore(ks, password, KeyStore.getDefaultType());",
                "+            }",
                "+            catch (MalformedURLException e)",
                "+            {",
                "+                _keyStore = SSLUtil.getInitializedKeyStore(keystore, password, KeyStore.getDefaultType());",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            _keyStore = null;",
                "+        }",
                "+    }",
                "+",
                "+    private static class TrustAllTrustManager implements X509TrustManager",
                "+    {",
                "+        public X509Certificate[] getAcceptedIssuers()",
                "+        {",
                "+            X509Certificate[] issuers = new X509Certificate[0];",
                "+            return issuers;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void checkClientTrusted(X509Certificate[] certs, String authType)",
                "+        {",
                "+        }",
                "+",
                "+        @Override",
                "+        public void checkServerTrusted(X509Certificate[] certs, String authType)",
                "+        {",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/ManagedPeerCertificateTrustStore.java",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6995335307b60d4b365cbc0c235a98a3624bc9a6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521451757,
            "hunks": 2,
            "message": "QPID-8016: [Broker-J] Delegate consistently to the client methods of underlying KeyManager too",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "index c75d781182..df99188f24 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "@@ -53,3 +53,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        return _delegate.chooseClientAlias(keyType, issuers, socket);",
                "+        return _alias != null ? _alias : _delegate.chooseClientAlias(keyType, issuers, socket);",
                "     }",
                "@@ -89,3 +89,3 @@ public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "     {",
                "-        return _delegate.chooseEngineClientAlias(keyType, issuers, engine);",
                "+        return _alias != null ? _alias : _delegate.chooseEngineClientAlias(keyType, issuers, engine);",
                "     }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8016": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8016",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "792008b0796b41291554884cb0e4c97636f93662",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517616178,
            "hunks": 10,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Add operations test",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "index 01a19cf2e5..32100fa930 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "@@ -25,2 +25,4 @@ import org.junit.Before;",
                " import org.junit.Rule;",
                "+import org.junit.internal.runners.TestMethod;",
                "+import org.junit.rules.MethodRule;",
                " import org.junit.rules.TestName;",
                "@@ -33,2 +35,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     public final TestName _testName = new TestName();",
                "+",
                "     private HttpTestHelper _helper;",
                "@@ -36,3 +39,3 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     @Before",
                "-    public void setUpTestBase()",
                "+    public void setUpTestBase() throws Exception",
                "     {",
                "@@ -40,3 +43,4 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "-        HttpRequestConfig config = getClass().getAnnotation(HttpRequestConfig.class);",
                "+        HttpRequestConfig config = getHttpRequestConfig();",
                "+",
                "         _helper = new HttpTestHelper(getBrokerAdmin(),",
                "@@ -60,2 +64,13 @@ public abstract class HttpTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    private HttpRequestConfig getHttpRequestConfig() throws Exception",
                "+    {",
                "+        HttpRequestConfig config = getClass().getMethod(_testName.getMethodName(), new Class[]{}).getAnnotation(HttpRequestConfig.class);",
                "+        if (config == null)",
                "+        {",
                "+            config = getClass().getAnnotation(HttpRequestConfig.class);",
                "+        }",
                "+",
                "+        return config;",
                "+    }",
                " }",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index b305d342c6..3fc6c78c3e 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -56,2 +56,3 @@ public class HttpTestHelper",
                "     };",
                "+",
                "     private static final TypeReference<LinkedHashMap<String, Object>> TYPE_LINKED_HASH_MAPS = new TypeReference<LinkedHashMap<String, Object>>()",
                "@@ -283,3 +284,3 @@ public class HttpTestHelper",
                "-    public <T> T getJson(String path, final Class<T> valueType) throws IOException",
                "+    public <T> T getJson(String path, final TypeReference valueTypeRef, int expectedResponseCode) throws IOException",
                "     {",
                "@@ -287,6 +288,9 @@ public class HttpTestHelper",
                "         connection.connect();",
                "-        return readJsonResponse(connection, valueType);",
                "+        int responseCode = connection.getResponseCode();",
                "+        Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "+",
                "+        return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "     }",
                "-    public <T> T postJson(String path, final Object data , final Class<T> valueType) throws IOException",
                "+    public <T> T postJson(String path, final Object data, final TypeReference valueTypeRef, int expectedResponseCode) throws IOException",
                "     {",
                "@@ -295,3 +299,6 @@ public class HttpTestHelper",
                "         writeJsonRequest(connection, data);",
                "-        return readJsonResponse(connection, valueType);",
                "+        int responseCode = connection.getResponseCode();",
                "+        Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "+",
                "+        return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "     }"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestBase.java",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ee3bfae239b687b6de12ee6dd29261ee53e94f7a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521223537,
            "hunks": 34,
            "message": "QPID-8083: [System Tests] [REST/HTTP] Reduce Jetty logging and rationalise HttpTestHelper",
            "diff": [
                "diff --git a/qpid-test-utils/src/main/resources/logback.xml b/qpid-test-utils/src/main/resources/logback.xml",
                "index fbd8d530de..9e188f53b2 100644",
                "--- a/qpid-test-utils/src/main/resources/logback.xml",
                "+++ b/qpid-test-utils/src/main/resources/logback.xml",
                "@@ -39,2 +39,3 @@",
                "     </appender>",
                "+    <logger name=\"org.eclipse.jetty\" level=\"warn\" />",
                "     <root level=\"debug\">",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index d6eeba4ddd..7421aa98e2 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -25,7 +25,4 @@ import static java.nio.charset.StandardCharsets.UTF_8;",
                " import java.io.ByteArrayInputStream;",
                "-import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.io.OutputStream;",
                "-import java.io.UnsupportedEncodingException;",
                " import java.net.HttpURLConnection;",
                "@@ -33,3 +30,2 @@ import java.net.MalformedURLException;",
                " import java.net.URL;",
                "-import java.net.URLEncoder;",
                " import java.security.KeyManagementException;",
                "@@ -51,2 +47,3 @@ import javax.net.ssl.TrustManager;",
                " import javax.net.ssl.X509TrustManager;",
                "+import javax.servlet.http.HttpServletResponse;",
                " import javax.xml.bind.DatatypeConverter;",
                "@@ -55,2 +52,3 @@ import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.google.common.io.ByteStreams;",
                " import org.junit.Assert;",
                "@@ -138,3 +136,4 @@ public class HttpTestHelper",
                "         }",
                "-        URL url = getManagementURL(path);",
                "+        final URL url = getManagementURL(path);",
                "+        LOGGER.debug(\"Opening connection : {} {}\", method, url);",
                "         HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();",
                "@@ -187,10 +186,2 @@ public class HttpTestHelper",
                "-    public List<Map<String, Object>> readJsonResponseAsList(HttpURLConnection connection) throws IOException",
                "-    {",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        List<Map<String, Object>> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LIST_OF_LINKED_HASH_MAPS);",
                "-        return providedObject;",
                "-    }",
                "-",
                "     public Map<String, Object> readJsonResponseAsMap(HttpURLConnection connection) throws IOException",
                "@@ -204,26 +195,13 @@ public class HttpTestHelper",
                "-    public <T> T readJsonResponse(HttpURLConnection connection, Class<T> valueType) throws IOException",
                "-    {",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-",
                "-        return mapper.readValue(new ByteArrayInputStream(data), valueType);",
                "-    }",
                "-",
                "     private byte[] readConnectionInputStream(HttpURLConnection connection) throws IOException",
                "     {",
                "-        InputStream is = connection.getInputStream();",
                "-        ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "-        byte[] buffer = new byte[1024];",
                "-        int len = -1;",
                "-        while ((len = is.read(buffer)) != -1)",
                "-        {",
                "-            baos.write(buffer, 0, len);",
                "-        }",
                "-        if (LOGGER.isTraceEnabled())",
                "+        try (InputStream is = connection.getInputStream())",
                "         {",
                "-            LOGGER.trace(\"RESPONSE:\" + new String(baos.toByteArray(), UTF_8));",
                "+            final byte[] bytes = ByteStreams.toByteArray(is);",
                "+            if (LOGGER.isTraceEnabled())",
                "+            {",
                "+                LOGGER.trace(\"RESPONSE:\" + new String(bytes, UTF_8));",
                "+            }",
                "+            return bytes;",
                "         }",
                "-        return baos.toByteArray();",
                "     }",
                "@@ -236,42 +214,2 @@ public class HttpTestHelper",
                "-    public Map<String, Object> find(String name, Object value, List<Map<String, Object>> data)",
                "-    {",
                "-        if (data == null)",
                "-        {",
                "-            return null;",
                "-        }",
                "-",
                "-        for (Map<String, Object> map : data)",
                "-        {",
                "-            Object mapValue = map.get(name);",
                "-            if (value.equals(mapValue))",
                "-            {",
                "-                return map;",
                "-            }",
                "-        }",
                "-        return null;",
                "-    }",
                "-",
                "-    public Map<String, Object> find(Map<String, Object> searchAttributes, List<Map<String, Object>> data)",
                "-    {",
                "-        for (Map<String, Object> map : data)",
                "-        {",
                "-            boolean equals = true;",
                "-            for (Map.Entry<String, Object> entry : searchAttributes.entrySet())",
                "-            {",
                "-                Object mapValue = map.get(entry.getKey());",
                "-                if (!entry.getValue().equals(mapValue))",
                "-                {",
                "-                    equals = false;",
                "-                    break;",
                "-                }",
                "-            }",
                "-            if (equals)",
                "-            {",
                "-                return map;",
                "-            }",
                "-        }",
                "-        return null;",
                "-    }",
                "-",
                "     public Map<String, Object> getJsonAsSingletonList(String path) throws IOException",
                "@@ -285,33 +223,15 @@ public class HttpTestHelper",
                "-    public Map<String, Object> postDataToPathAndGetObject(String path, Map<String, Object> data) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "-        connection.connect();",
                "-        writeJsonRequest(connection, data);",
                "-        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "-        return response;",
                "-    }",
                "-",
                "     public List<Map<String, Object>> getJsonAsList(String path) throws IOException",
                "     {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        List<Map<String, Object>> response = readJsonResponseAsList(connection);",
                "-        return response;",
                "+        return getJson(path, TYPE_LIST_OF_LINKED_HASH_MAPS, HttpServletResponse.SC_OK);",
                "     }",
                "-    public List<Object> getJsonAsSimpleList(String path) throws IOException",
                "+    public Map<String, Object> getJsonAsMap(String path) throws IOException",
                "     {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        List<Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), new TypeReference<List<Object>>()",
                "-        {",
                "-        });",
                "-        return providedObject;",
                "+        return getJson(path, TYPE_LINKED_HASH_MAPS, HttpServletResponse.SC_OK);",
                "     }",
                "-    public Map<String, Object> getJsonAsMap(String path) throws IOException",
                "+    public <T> T getJson(String path, final TypeReference valueTypeRef, int expectedResponseCode) throws IOException",
                "     {",
                "+        int responseCode = -1;",
                "         HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "@@ -320,4 +240,6 @@ public class HttpTestHelper",
                "             connection.connect();",
                "-            Map<String, Object> response = readJsonResponseAsMap(connection);",
                "-            return response;",
                "+            responseCode = connection.getResponseCode();",
                "+            Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "+",
                "+            return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "         }",
                "@@ -325,2 +247,4 @@ public class HttpTestHelper",
                "         {",
                "+",
                "+            LOGGER.debug(\"URL request completed : {}\", responseCode);",
                "             connection.disconnect();",
                "@@ -329,59 +253,15 @@ public class HttpTestHelper",
                "-    public <T> T getJson(String path, final TypeReference valueTypeRef, int expectedResponseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        int responseCode = connection.getResponseCode();",
                "-        Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "-",
                "-        return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "-    }",
                "-",
                "     public <T> T postJson(String path, final Object data, final TypeReference valueTypeRef, int expectedResponseCode) throws IOException",
                "     {",
                "+        int responseCode = -1;",
                "         HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "-        connection.connect();",
                "-        writeJsonRequest(connection, data);",
                "-        int responseCode = connection.getResponseCode();",
                "-        Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "-",
                "-        return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "-    }",
                "-",
                "-",
                "-    public int submitRequest(String url, String method, Object data) throws IOException",
                "-    {",
                "-        return submitRequest(url, method, data, null);",
                "-    }",
                "-    public int submitRequest(String url, String method, Object data, Map<String, List<String>> responseHeadersToCapture) throws IOException",
                "-    {",
                "-        LOGGER.debug(\"HttpURLConnection : open  : {} : {}\", method, url);",
                "-        RuntimeException ex = null;",
                "-        int responseCode = -1;",
                "         try",
                "         {",
                "-            HttpURLConnection connection = openManagementConnection(url, method);",
                "-            try",
                "-            {",
                "-                if (data != null)",
                "-                {",
                "-                    writeJsonRequest(connection, data);",
                "-                }",
                "-                responseCode = connection.getResponseCode();",
                "-                if (responseHeadersToCapture != null)",
                "-                {",
                "-                    responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "-                }",
                "-                return responseCode;",
                "-            }",
                "-            catch (RuntimeException e)",
                "-            {",
                "-                ex = e;",
                "-                throw e;",
                "-            }",
                "-            finally",
                "-            {",
                "-                connection.disconnect();",
                "-            }",
                "+            connection.connect();",
                "+            writeJsonRequest(connection, data);",
                "+            responseCode = connection.getResponseCode();",
                "+            Assert.assertEquals(String.format(\"Unexpected response code from : %s\", path), expectedResponseCode, responseCode);",
                "+",
                "+            return new ObjectMapper().readValue(new ByteArrayInputStream(readConnectionInputStream(connection)), valueTypeRef);",
                "         }",
                "@@ -389,3 +269,4 @@ public class HttpTestHelper",
                "         {",
                "-            LOGGER.debug(\"HttpURLConnection : close : {} : {} : {}\", method, responseCode, url, ex);",
                "+            LOGGER.debug(\"URL request completed : {}\", responseCode);",
                "+            connection.disconnect();",
                "         }",
                "@@ -393,5 +274,10 @@ public class HttpTestHelper",
                "+    public int submitRequest(String url, String method, Object data) throws IOException",
                "+    {",
                "+        return submitRequest(url, method, data, null);",
                "+    }",
                "+",
                "     public int submitRequest(String url, String method) throws IOException",
                "     {",
                "-        return submitRequest(url, method, (byte[])null);",
                "+        return submitRequest(url, method, null, null);",
                "     }",
                "@@ -403,7 +289,2 @@ public class HttpTestHelper",
                "         Assert.assertEquals(\"Unexpected response code from \" + method + \" \" + url , expectedResponseCode, responseCode);",
                "-        if (expectedResponseCode == 201)",
                "-        {",
                "-            List<String> location = headers.get(\"Location\");",
                "-            Assert.assertTrue(\"Location is not returned by REST create request\", location != null && location.size() == 1);",
                "-        }",
                "     }",
                "@@ -415,14 +296,24 @@ public class HttpTestHelper",
                "-    public int submitRequest(String url, String method, byte[] parameters) throws IOException",
                "+    public int submitRequest(String url, String method, Object data, Map<String, List<String>> responseHeadersToCapture) throws IOException",
                "     {",
                "         HttpURLConnection connection = openManagementConnection(url, method);",
                "-        if (parameters != null)",
                "+        int responseCode = -1;",
                "+        try",
                "+        {",
                "+            if (data != null)",
                "+            {",
                "+                writeJsonRequest(connection, data);",
                "+            }",
                "+            responseCode = connection.getResponseCode();",
                "+            if (responseHeadersToCapture != null)",
                "+            {",
                "+                responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+            }",
                "+            return responseCode;",
                "+        }",
                "+        finally",
                "         {",
                "-            OutputStream os = connection.getOutputStream();",
                "-            os.write(parameters);",
                "-            os.flush();",
                "+            LOGGER.debug(\"URL request completed : {}\", responseCode);",
                "+            connection.disconnect();",
                "         }",
                "-        int responseCode = connection.getResponseCode();",
                "-        connection.disconnect();",
                "-        return responseCode;",
                "     }",
                "@@ -436,7 +327,2 @@ public class HttpTestHelper",
                "-    public String encode(String value, String encoding) throws UnsupportedEncodingException",
                "-    {",
                "-        return URLEncoder.encode(value, encoding).replace(\"+\", \"%20\");",
                "-    }",
                "-",
                "     public String getAcceptEncoding()"
            ],
            "changed_files": [
                "qpid-test-utils/src/main/resources/logback.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e4f5cc911251a1cd2f42bb980f0debb30985aa2c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1517225640,
            "hunks": 7,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Move SaslRestTest into http management system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/pom.xml b/systests/qpid-systests-http-management/pom.xml",
                "index c0e29bb2c8..8ea2625f50 100644",
                "--- a/systests/qpid-systests-http-management/pom.xml",
                "+++ b/systests/qpid-systests-http-management/pom.xml",
                "@@ -110,2 +110,9 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+            <classifier>tests</classifier>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "index e71da8678b..2a5e51472a 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "@@ -262,5 +262,12 @@ public class RestTestHelper",
                "         HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "-        return response;",
                "+        try",
                "+        {",
                "+            connection.connect();",
                "+            Map<String, Object> response = readJsonResponseAsMap(connection);",
                "+            return response;",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.disconnect();",
                "+        }",
                "     }",
                "@@ -291,13 +298,19 @@ public class RestTestHelper",
                "         HttpURLConnection connection = openManagementConnection(url, method);",
                "-        if (data != null)",
                "+        try",
                "         {",
                "-            writeJsonRequest(connection, data);",
                "+            if (data != null)",
                "+            {",
                "+                writeJsonRequest(connection, data);",
                "+            }",
                "+            int responseCode = connection.getResponseCode();",
                "+            if (responseHeadersToCapture != null)",
                "+            {",
                "+                responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+            }",
                "+            return responseCode;",
                "         }",
                "-        int responseCode = connection.getResponseCode();",
                "-        if (responseHeadersToCapture!= null)",
                "+        finally",
                "         {",
                "-            responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+            connection.disconnect();",
                "         }",
                "-        connection.disconnect();",
                "-        return responseCode;",
                "     }"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "768f4fb0961ff82ef49e09062ce19a7176b7d86a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523459355,
            "hunks": 13,
            "message": "QPID-8158: [Broker-J] [System Tests] Remove qpid-systest module including QpidBrokerTestCase and its dependecies",
            "diff": [
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index b81f3b1d43..4c52564fc9 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -39,7 +39,2 @@",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-systests</artifactId>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/pom.xml b/pom.xml",
                "index 5b56477779..a60b7e45b3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -193,3 +193,2 @@",
                "     <module>qpid-test-utils</module>",
                "-    <module>systests</module>",
                "     <module>systests/systests-utils</module>",
                "@@ -396,8 +395,2 @@",
                "-      <dependency>",
                "-        <groupId>org.apache.qpid</groupId>",
                "-        <artifactId>qpid-systests</artifactId>",
                "-        <version>${project.version}</version>",
                "-      </dependency>",
                "-",
                "       <dependency>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 57b724f314..570292d201 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -41,7 +41,2 @@",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-systests</artifactId>",
                "-    </dependency>",
                "-",
                "     <!-- client deps -->",
                "diff --git a/systests/etc/bin/fail.py b/systests/etc/bin/fail.py",
                "deleted file mode 100644",
                "index 517f31d075..0000000000",
                "--- a/systests/etc/bin/fail.py",
                "+++ /dev/null",
                "@@ -1,88 +0,0 @@",
                "-#!/usr/bin/env python",
                "-#",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-",
                "-import os",
                "-import re",
                "-import datetime",
                "-",
                "-from optparse import OptionParser",
                "-",
                "-BASE_CMD = \"mvn -Dskip.python.test=true %s test\"",
                "-",
                "-def main():",
                "-    parser = OptionParser()",
                "-    parser.add_option(\"-t\", \"--test\", dest=\"test\",",
                "-                      action=\"store\", type=\"string\",",
                "-                      help=\"run specific tests\")",
                "-    parser.add_option(\"-c\", \"--continuous\", dest=\"continuous\",",
                "-                      action=\"store_true\", default=False,",
                "-                      help=\"run tests after failures, don't stop\")",
                "-",
                "-",
                "-    (options, args) = parser.parse_args()",
                "-",
                "-    # determine command to run",
                "-    if (options.test != None):",
                "-        cmd = (BASE_CMD % (\"-Dtest=\"+options.test))",
                "-    else:",
                "-        cmd = (BASE_CMD % (\"\"))",
                "-",
                "-    run_forever = options.continuous",
                "-",
                "-",
                "-    failed_runs = []",
                "-    iteration = 0",
                "-    fail_match = re.compile(\"BUILD SUCCESSFUL\")",
                "-    done = False",
                "-",
                "-    while (run_forever or not (len(failed_runs) > 0)):",
                "-        iteration = iteration + 1",
                "-        if (run_forever):",
                "-            extra_text = (\", %d failures so far: %s:\" % (len(failed_runs), failed_runs))",
                "-        else:",
                "-            extra_text = \"\"",
                "-        print (\"%s Test run %d%s\" % (datetime.datetime.today().isoformat(), iteration, extra_text))",
                "-        (child_stdin, child_stdout_and_stderr) = os.popen4(cmd)",
                "-        output = child_stdout_and_stderr.read()",
                "-        child_stdin.close()",
                "-        child_stdout_and_stderr.close()",
                "-        matches = fail_match.search(output)",
                "-        if (matches == None):",
                "-            failed_runs.append(iteration)",
                "-            output_name = (\"test-run-%d.out\" % (iteration))",
                "-            #write testouput",
                "-            test_output = file(output_name, \"w\")",
                "-            test_output.write(output)",
                "-            test_output.close()",
                "-            #tar test-output and surefire reports together",
                "-            find_stdout = os.popen(\"find . -type d -name surefire-reports\")",
                "-            surefire_dirs = find_stdout.read().replace('\\n', ' ')",
                "-            find_stdout.close()",
                "-            tarcmd = (\"tar -zcf test-failures-%d.tar.gz %s %s\" % (iteration, output_name, surefire_dirs))",
                "-            tar_stdout = os.popen(tarcmd)",
                "-            tar_output = tar_stdout.read()",
                "-            tar_exitstatus = tar_stdout.close()",
                "-            print (\"Something failed! Check %s\" % (output_name))",
                "-            if (tar_exitstatus != None):",
                "-                print (\"tar exited abornmally, aborting\\n %s\"  % (tar_output))",
                "-                run_forever = False",
                "-",
                "-if __name__ == \"__main__\":",
                "-    main()",
                "\\ No newline at end of file",
                "diff --git a/systests/etc/config-systests.json b/systests/etc/config-systests.json",
                "deleted file mode 100644",
                "index c34241353d..0000000000",
                "--- a/systests/etc/config-systests.json",
                "+++ /dev/null",
                "@@ -1,66 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-{",
                "-  \"name\": \"Broker\",",
                "-  \"modelVersion\": \"7.0\",",
                "-  \"authenticationproviders\" : [ {",
                "-    \"name\" : \"plain\",",
                "-    \"type\" : \"PlainPasswordFile\",",
                "-    \"path\" : \"${qpid.home_dir}${file.separator}etc${file.separator}passwd\"",
                "-  } ],",
                "-  \"keystores\" : [ {",
                "-    \"name\" : \"systestsKeyStore\",",
                "-    \"storeUrl\" : \"${qpid.home_dir}${file.separator}..${file.separator}test-profiles${file.separator}test_resources${file.separator}ssl${file.separator}java_broker_keystore.jks\",",
                "-    \"password\" : \"password\"",
                "-  } ],",
                "-  \"truststores\" : [ {",
                "-    \"name\" : \"systestsTrustStore\",",
                "-    \"storeUrl\" : \"${qpid.home_dir}${file.separator}..${file.separator}test-profiles${file.separator}test_resources${file.separator}ssl${file.separator}java_broker_truststore.jks\",",
                "-    \"password\" : \"password\"",
                "-  } ],",
                "-  \"ports\" : [  {",
                "-    \"name\" : \"amqp\",",
                "-    \"authenticationProvider\" : \"plain\",",
                "-    \"port\" : \"${test.port}\",",
                "-    \"protocols\" : \"${test.amqp_port_protocols}\",",
                "-    \"virtualhostaliases\" : [ {",
                "-        \"name\" : \"nameAlias\",",
                "-        \"type\" : \"nameAlias\"",
                "-    }, {",
                "-        \"name\" : \"defaultAlias\",",
                "-        \"type\" : \"defaultAlias\"",
                "-    } ]",
                "-  }, {",
                "-    \"name\" : \"http\",",
                "-    \"authenticationProvider\" : \"plain\",",
                "-    \"port\" : \"${test.hport}\",",
                "-    \"protocols\" : [ \"HTTP\" ]",
                "-  }],",
                "-  \"virtualhostnodes\" : [ {",
                "-    \"name\" : \"test\",",
                "-    \"type\" : \"${virtualhostnode.type}\",",
                "-    \"defaultVirtualHostNode\" : \"true\",",
                "-    \"storePath\" : \"${qpid.work_dir}${file.separator}test${file.separator}config\",",
                "-    \"context\" : {",
                "-      \"virtualhostBlueprint\" : \"${virtualhostnode.context.blueprint}\"",
                "-    }",
                "-  } ]",
                "-}",
                "diff --git a/systests/etc/groups-systests b/systests/etc/groups-systests",
                "deleted file mode 100644",
                "index e3912ece99..0000000000",
                "--- a/systests/etc/groups-systests",
                "+++ /dev/null",
                "@@ -1,29 +0,0 @@",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-#",
                "-",
                "-#",
                "-# To define a group, use the format:",
                "-#",
                "-# <groupname>.users=<user1>,<user2>,...,<usern>",
                "-#",
                "-",
                "-messaging-users.users=guest,client,server",
                "-administrators.users=admin",
                "-webadmins.users=webadmin",
                "-",
                "diff --git a/systests/etc/log.properties b/systests/etc/log.properties",
                "deleted file mode 100644",
                "index ff36b7cd0c..0000000000",
                "--- a/systests/etc/log.properties",
                "+++ /dev/null",
                "@@ -1,21 +0,0 @@",
                "-#",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-#",
                "-",
                "-com.sleepycat.je.util.FileHandler.level=ALL",
                "-com.sleepycat.je.util.ConsoleHandler.level=ALL",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "deleted file mode 100644",
                "index 6e132d2a68..0000000000",
                "--- a/systests/pom.xml",
                "+++ /dev/null",
                "@@ -1,206 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<!--",
                "-  Licensed to the Apache Software Foundation (ASF) under one or more",
                "-  contributor license agreements.  See the NOTICE file distributed with",
                "-  this work for additional information regarding copyright ownership.",
                "-  The ASF licenses this file to You under the Apache License, Version 2.0",
                "-  (the \"License\"); you may not use this file except in compliance with",
                "-  the License.  You may obtain a copy of the License at",
                "-  ",
                "-  http://www.apache.org/licenses/LICENSE-2.0",
                "-  ",
                "-  Unless required by applicable law or agreed to in writing, software",
                "-  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-  See the License for the specific language governing permissions and",
                "-  limitations under the License.",
                "--->",
                "-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
                "-  <modelVersion>4.0.0</modelVersion>",
                "-",
                "-  <parent>",
                "-    <groupId>org.apache.qpid</groupId>",
                "-    <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>7.1.0-SNAPSHOT</version>",
                "-    <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "-  </parent>",
                "-",
                "-  <artifactId>qpid-systests</artifactId>",
                "-  <name>Apache Qpid Broker-J System Tests</name>",
                "-  <description>System testing configuration, code and tests</description>",
                "-",
                "-  <dependencies>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-test-utils</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-systests-jms-core</artifactId>",
                "-    </dependency>",
                "-",
                "-    <!-- broker deps -->",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-core</artifactId>",
                "-      <classifier>tests</classifier>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-access-control</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-0-8-protocol</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-0-10-protocol</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-1-0-protocol</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-msg-conv-0-8-to-0-10</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-msg-conv-0-8-to-1-0</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-msg-conv-0-10-to-1-0</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-jdbc-provider-bone</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-jdbc-store</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-logging-logback</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-management-http</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-memory-store</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-1-0-protocol-jdbc-link-store</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-1-0-protocol-bdb-link-store</artifactId>",
                "-      <optional>true</optional>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-bdbstore</artifactId>",
                "-      <scope>test</scope>",
                "-      <optional>true</optional>",
                "-    </dependency>",
                "-",
                "-  </dependencies>",
                "-",
                "-  <build>",
                "-    <resources>",
                "-        <resource>",
                "-            <directory>src/main/resources</directory>",
                "-        </resource>",
                "-    </resources>",
                "-",
                "-    <plugins>",
                "-      <plugin>",
                "-        <groupId>org.apache.rat</groupId>",
                "-        <artifactId>apache-rat-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes>",
                "-            <exclude>src/test/resources/org/apache/qpid/test/unit/message/**</exclude>",
                "-            <exclude>qpid-systests-jms-core/**</exclude>",
                "-            <exclude>qpid-systests-jms_1.1/**</exclude>",
                "-            <exclude>qpid-systests-jms_2.0/**</exclude>",
                "-            <exclude>protocol-tests-core/**</exclude>",
                "-            <exclude>protocol-tests-amqp-1-0/**</exclude>",
                "-            <exclude>protocol-tests-amqp-0-8/**</exclude>",
                "-            <exclude>protocol-tests-amqp-0-10/**</exclude>",
                "-            <exclude>systests-utils/**</exclude>",
                "-            <exclude>end-to-end-conversion-tests/**</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-    </plugins>",
                "-  </build>",
                "-",
                "-",
                "-  <profiles>",
                "-    <profile>",
                "-      <id>addQpidJmsClientIfNecessary</id>",
                "-      <activation>",
                "-        <property>",
                "-          <name>!enableAmqp0-x</name>",
                "-        </property>",
                "-      </activation>",
                "-      <dependencies>",
                "-        <dependency>",
                "-          <groupId>org.apache.qpid</groupId>",
                "-          <artifactId>qpid-jms-client</artifactId>",
                "-        </dependency>",
                "-      </dependencies>",
                "-    </profile>",
                "-    <profile>",
                "-      <!-- The 0-x client does not have a dependency on the JMS 1.1 spec.  Add it now. -->",
                "-      <id>addJms11IfNecessary</id>",
                "-      <activation>",
                "-        <property>",
                "-          <name>enableAmqp0-x</name>",
                "-        </property>",
                "-      </activation>",
                "-      <dependencies>",
                "-        <dependency>",
                "-          <groupId>org.apache.qpid</groupId>",
                "-          <artifactId>qpid-client</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-          <groupId>org.apache.geronimo.specs</groupId>",
                "-          <artifactId>geronimo-jms_1.1_spec</artifactId>",
                "-        </dependency>",
                "-      </dependencies>",
                "-    </profile>",
                "-  </profiles>",
                "-</project>",
                "diff --git a/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java b/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "deleted file mode 100644",
                "index be0dd542ff..0000000000",
                "--- a/systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "+++ /dev/null",
                "@@ -1,45 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-package org.apache.qpid.systest.rest;",
                "-",
                "-import java.util.Map;",
                "-",
                "-import junit.framework.TestCase;",
                "-",
                "-import org.apache.qpid.server.model.ConfiguredObject;",
                "-",
                "-public class Asserts",
                "-{",
                "-    public static final String STATISTICS_ATTRIBUTE = \"statistics\";",
                "-",
                "-",
                "-    public static void assertActualAndDesiredState(final String expectedDesiredState,",
                "-                                             final String expectedActualState,",
                "-                                             final Map<String, Object> data)",
                "-    {",
                "-        String name = (String) data.get(ConfiguredObject.NAME);",
                "-        TestCase.assertEquals(\"Object with name \" + name + \" has unexpected desired state\",",
                "-                              expectedDesiredState,",
                "-                              data.get(ConfiguredObject.DESIRED_STATE));",
                "-        TestCase.assertEquals(\"Object with name \" + name + \" has unexpected actual state\",",
                "-                              expectedActualState, data.get(ConfiguredObject.STATE));",
                "-    }",
                "-}",
                "diff --git a/systests/src/main/java/org/apache/qpid/systest/rest/QpidRestTestCase.java b/systests/src/main/java/org/apache/qpid/systest/rest/QpidRestTestCase.java",
                "deleted file mode 100644",
                "index 06f1b4c38f..0000000000",
                "--- a/systests/src/main/java/org/apache/qpid/systest/rest/QpidRestTestCase.java",
                "+++ /dev/null",
                "@@ -1,85 +0,0 @@",
                "-/*",
                "- *",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- *",
                "- */",
                "-package org.apache.qpid.systest.rest;",
                "-",
                "-import org.apache.qpid.server.model.VirtualHostNode;",
                "-import org.apache.qpid.test.utils.QpidBrokerTestCase;",
                "-import org.apache.qpid.test.utils.TestBrokerConfiguration;",
                "-",
                "-public class QpidRestTestCase extends QpidBrokerTestCase",
                "-{",
                "-    public static final String EXTERNAL_AUTHENTICATION_PROVIDER = \"testExternal\";",
                "-",
                "-    public static final String TEST1_VIRTUALHOST = \"test\";",
                "-    public static final String TEST2_VIRTUALHOST = \"test2\";",
                "-    public static final String TEST3_VIRTUALHOST = \"test3\";",
                "-",
                "-    public static final String[] EXPECTED_VIRTUALHOSTS = { TEST1_VIRTUALHOST, TEST2_VIRTUALHOST, TEST3_VIRTUALHOST};",
                "-    public static final String[] EXPECTED_EXCHANGES = { \"amq.fanout\", \"amq.match\", \"amq.direct\",\"amq.topic\" };",
                "-",
                "-    protected RestTestHelper _restTestHelper;",
                "-",
                "-    @Override",
                "-    public void setUp() throws Exception",
                "-    {",
                "-        // remove the normal 'test' vhost, we will configure the vhosts below",
                "-        getDefaultBrokerConfiguration().removeObjectConfiguration(VirtualHostNode.class, TestBrokerConfiguration.ENTRY_NAME_VIRTUAL_HOST);",
                "-",
                "-        // Set up virtualhost config with queues and bindings to the amq.direct",
                "-        for (String virtualhost : EXPECTED_VIRTUALHOSTS)",
                "-        {",
                "-            createTestVirtualHostNode(virtualhost);",
                "-        }",
                "-",
                "-        customizeConfiguration();",
                "-        super.setUp();",
                "-    }",
                "-",
                "-    @Override",
                "-    public void startDefaultBroker() throws Exception",
                "-    {",
                "-        super.startDefaultBroker();",
                "-        _restTestHelper = new RestTestHelper(getDefaultBroker().getHttpPort());",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void tearDown() throws Exception",
                "-    {",
                "-        try",
                "-        {",
                "-            super.tearDown();",
                "-        }",
                "-        finally",
                "-        {",
                "-            getRestTestHelper().tearDown();",
                "-        }",
                "-    }",
                "-",
                "-    protected void customizeConfiguration() throws Exception",
                "-    {",
                "-        getDefaultBrokerConfiguration().addHttpManagementConfiguration();",
                "-    }",
                "-",
                "-    public RestTestHelper getRestTestHelper()",
                "-    {",
                "-        return _restTestHelper;",
                "-    }",
                "-}",
                "diff --git a/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java b/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "deleted file mode 100644",
                "index 368f1160bb..0000000000",
                "--- a/systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "+++ /dev/null",
                "@@ -1,620 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.qpid.systest.rest;",
                "-",
                "-import static java.nio.charset.StandardCharsets.UTF_8;",
                "-",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.io.OutputStream;",
                "-import java.io.UnsupportedEncodingException;",
                "-import java.net.HttpURLConnection;",
                "-import java.net.MalformedURLException;",
                "-import java.net.URL;",
                "-import java.net.URLEncoder;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.function.Predicate;",
                "-",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import javax.xml.bind.DatatypeConverter;",
                "-",
                "-import com.fasterxml.jackson.core.type.TypeReference;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-import org.junit.Assert;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.SystemConfig;",
                "-import org.apache.qpid.test.utils.QpidBrokerTestCase;",
                "-import org.apache.qpid.test.utils.TestBrokerConfiguration;",
                "-",
                "-public class RestTestHelper",
                "-{",
                "-",
                "-    private static final TypeReference<List<LinkedHashMap<String, Object>>> TYPE_LIST_OF_LINKED_HASH_MAPS = new TypeReference<List<LinkedHashMap<String, Object>>>()",
                "-    {",
                "-    };",
                "-    private static final TypeReference<LinkedHashMap<String, Object>> TYPE_LINKED_HASH_MAPS = new TypeReference<LinkedHashMap<String, Object>>()",
                "-    {",
                "-    };",
                "-    public static final String API_BASE = \"/api/latest/\";",
                "-",
                "-    private static final Logger LOGGER = LoggerFactory.getLogger(RestTestHelper.class);",
                "-    public static final String DEFAULT_USERNAME = \"webadmin\";",
                "-    public static final String DEFAULT_PASSWORD = \"webadmin\";",
                "-",
                "-    private int _httpPort;",
                "-",
                "-    private boolean _useSsl;",
                "-",
                "-",
                "-    private String _username;",
                "-",
                "-    private String _password;",
                "-",
                "-    private boolean _useSslAuth;",
                "-    static final String[] EXPECTED_QUEUES = { \"queue\", \"ping\" };",
                "-    private final int _connectTimeout = Integer.getInteger(\"qpid.resttest_connection_timeout\", 30000);",
                "-",
                "-    private String _truststore;",
                "-    private String _truststorePassword;",
                "-",
                "-    private String _keystore;",
                "-    private String _keystorePassword;",
                "-",
                "-    private String _clientAuthAlias;",
                "-    private String _acceptEncoding;",
                "-",
                "-    public RestTestHelper(int httpPort)",
                "-    {",
                "-        _httpPort = httpPort;",
                "-        setUsernameAndPassword(DEFAULT_USERNAME, DEFAULT_PASSWORD);",
                "-    }",
                "-",
                "-    public int getHttpPort()",
                "-    {",
                "-        return _httpPort;",
                "-    }",
                "-",
                "-    private String getHostName()",
                "-    {",
                "-        return \"localhost\";",
                "-    }",
                "-",
                "-    private String getProtocol()",
                "-    {",
                "-        return _useSsl ? \"https\" : \"http\";",
                "-    }",
                "-",
                "-    public String getManagementURL()",
                "-    {",
                "-        return getProtocol() + \"://\" + getHostName() + \":\" + getHttpPort();",
                "-    }",
                "-",
                "-    public URL getManagementURL(String path) throws MalformedURLException",
                "-    {",
                "-        return new URL(getManagementURL() + path);",
                "-    }",
                "-",
                "-    public void setKeystore(final String keystore, final String keystorePassword)",
                "-    {",
                "-        _keystore = keystore;",
                "-        _keystorePassword = keystorePassword;",
                "-    }",
                "-",
                "-    public void setTruststore(final String truststore, final String truststorePassword)",
                "-    {",
                "-        _truststore = truststore;",
                "-        _truststorePassword = truststorePassword;",
                "-    }",
                "-",
                "-    public void setClientAuthAlias(final String clientAuthAlias)",
                "-    {",
                "-        _clientAuthAlias = clientAuthAlias;",
                "-    }",
                "-",
                "-    public HttpURLConnection openManagementConnection(String path, String method) throws IOException",
                "-    {",
                "-        if (!path.startsWith(\"/\"))",
                "-        {",
                "-            path = API_BASE + path;",
                "-        }",
                "-        URL url = getManagementURL(path);",
                "-        HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();",
                "-        httpCon.setConnectTimeout(_connectTimeout);",
                "-",
                "-        if(_username != null)",
                "-        {",
                "-            String encoded = DatatypeConverter.printBase64Binary((_username + \":\" + _password).getBytes(UTF_8));",
                "-            httpCon.setRequestProperty(\"Authorization\", \"Basic \" + encoded);",
                "-        }",
                "-",
                "-        if (_acceptEncoding != null && !\"\".equals(_acceptEncoding))",
                "-        {",
                "-            httpCon.setRequestProperty(\"Accept-Encoding\", _acceptEncoding);",
                "-        }",
                "-",
                "-        httpCon.setDoOutput(true);",
                "-        httpCon.setRequestMethod(method);",
                "-        return httpCon;",
                "-    }",
                "-",
                "-    public List<Map<String, Object>> readJsonResponseAsList(HttpURLConnection connection) throws IOException",
                "-    {",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        List<Map<String, Object>> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LIST_OF_LINKED_HASH_MAPS);",
                "-        return providedObject;",
                "-    }",
                "-",
                "-    public Map<String, Object> readJsonResponseAsMap(HttpURLConnection connection) throws IOException",
                "-    {",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        Map<String, Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LINKED_HASH_MAPS);",
                "-        return providedObject;",
                "-    }",
                "-",
                "-    public <T> T readJsonResponse(HttpURLConnection connection, Class<T> valueType) throws IOException",
                "-    {",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-",
                "-        return mapper.readValue(new ByteArrayInputStream(data), valueType);",
                "-    }",
                "-",
                "-    private byte[] readConnectionInputStream(HttpURLConnection connection) throws IOException",
                "-    {",
                "-        InputStream is = connection.getInputStream();",
                "-        ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "-        byte[] buffer = new byte[1024];",
                "-        int len = -1;",
                "-        while ((len = is.read(buffer)) != -1)",
                "-        {",
                "-            baos.write(buffer, 0, len);",
                "-        }",
                "-        if (LOGGER.isTraceEnabled())",
                "-        {",
                "-            LOGGER.trace(\"RESPONSE:\" + new String(baos.toByteArray(), UTF_8));",
                "-        }",
                "-        return baos.toByteArray();",
                "-    }",
                "-",
                "-    private void writeJsonRequest(HttpURLConnection connection, Object data) throws IOException",
                "-    {",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        mapper.writeValue(connection.getOutputStream(), data);",
                "-    }",
                "-",
                "-    public Map<String, Object> find(String name, Object value, List<Map<String, Object>> data)",
                "-    {",
                "-        if (data == null)",
                "-        {",
                "-            return null;",
                "-        }",
                "-",
                "-        for (Map<String, Object> map : data)",
                "-        {",
                "-            Object mapValue = map.get(name);",
                "-            if (value.equals(mapValue))",
                "-            {",
                "-                return map;",
                "-            }",
                "-        }",
                "-        return null;",
                "-    }",
                "-",
                "-    public Map<String, Object> find(Map<String, Object> searchAttributes, List<Map<String, Object>> data)",
                "-    {",
                "-        for (Map<String, Object> map : data)",
                "-        {",
                "-            boolean equals = true;",
                "-            for (Map.Entry<String, Object> entry : searchAttributes.entrySet())",
                "-            {",
                "-                Object mapValue = map.get(entry.getKey());",
                "-                if (!entry.getValue().equals(mapValue))",
                "-                {",
                "-                    equals = false;",
                "-                    break;",
                "-                }",
                "-            }",
                "-            if (equals)",
                "-            {",
                "-                return map;",
                "-            }",
                "-        }",
                "-        return null;",
                "-    }",
                "-",
                "-    public Map<String, Object> getJsonAsSingletonList(String path) throws IOException",
                "-    {",
                "-        List<Map<String, Object>> response = getJsonAsList(path);",
                "-",
                "-        Assert.assertNotNull(\"Response cannot be null\", response);",
                "-        Assert.assertEquals(\"Unexpected response from \" + path, 1, response.size());",
                "-        return response.get(0);",
                "-    }",
                "-",
                "-    public Map<String, Object> postDataToPathAndGetObject(String path, Map<String, Object> data) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "-        connection.connect();",
                "-        writeJsonRequest(connection, data);",
                "-        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "-        return response;",
                "-    }",
                "-",
                "-    public List<Map<String, Object>> getJsonAsList(String path) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        List<Map<String, Object>> response = readJsonResponseAsList(connection);",
                "-        return response;",
                "-    }",
                "-",
                "-    public List<Object> getJsonAsSimpleList(String path) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        byte[] data = readConnectionInputStream(connection);",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        List<Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), new TypeReference<List<Object>>()",
                "-        {",
                "-        });",
                "-        return providedObject;",
                "-    }",
                "-",
                "-    public Map<String, Object> getJsonAsMap(String path) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "-        return response;",
                "-    }",
                "-",
                "-    public <T> T getJson(String path, final Class<T> valueType) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        return readJsonResponse(connection, valueType);",
                "-    }",
                "-",
                "-    public <T> T postJson(String path, final Object data , final Class<T> valueType) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "-        connection.connect();",
                "-        writeJsonRequest(connection, data);",
                "-        return readJsonResponse(connection, valueType);",
                "-    }",
                "-",
                "-    public void createNewGroupMember(String groupProviderName, String groupName, String memberName, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(",
                "-                \"groupmember/\" + encodeAsUTF(groupProviderName) + \"/\"+ encodeAsUTF(groupName) + \"/\" +  encodeAsUTF(memberName),",
                "-                \"PUT\");",
                "-",
                "-        Map<String, Object> groupMemberData = new HashMap<String, Object>();",
                "-        // TODO add type",
                "-        writeJsonRequest(connection, groupMemberData);",
                "-",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void createNewGroupMember(String groupProviderName, String groupName, String memberName) throws IOException",
                "-    {",
                "-        createNewGroupMember(groupProviderName, groupName, memberName, HttpServletResponse.SC_CREATED);",
                "-    }",
                "-",
                "-    public void removeMemberFromGroup(String groupProviderName, String groupName, String memberName, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(",
                "-                \"groupmember/\" + encodeAsUTF(groupProviderName) + \"/\"+ encodeAsUTF(groupName) + \"/\" +  encodeAsUTF(memberName),",
                "-                \"DELETE\");",
                "-",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void removeMemberFromGroup(String groupProviderName, String groupName, String memberName) throws IOException",
                "-    {",
                "-        removeMemberFromGroup(groupProviderName, groupName, memberName, HttpServletResponse.SC_OK);",
                "-    }",
                "-",
                "-    public void assertNumberOfGroupMembers(Map<String, Object> data, int expectedNumberOfGroupMembers)",
                "-    {",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        List<Map<String, Object>> groups = (List<Map<String, Object>>) data.get(\"groupmembers\");",
                "-        if (groups == null)",
                "-        {",
                "-            groups = Collections.emptyList();",
                "-        }",
                "-",
                "-        Assert.assertEquals(\"Unexpected number of group members\", expectedNumberOfGroupMembers, groups.size());",
                "-    }",
                "-",
                "-    public void createGroup(String groupName, String groupProviderName) throws IOException",
                "-    {",
                "-        createGroup(groupName, groupProviderName, HttpServletResponse.SC_CREATED);",
                "-    }",
                "-",
                "-    public void createGroup(String groupName, String groupProviderName, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(",
                "-                \"group/\" + encodeAsUTF(groupProviderName) + \"/\"+ encodeAsUTF(groupName),",
                "-                \"PUT\");",
                "-",
                "-        Map<String, Object> groupData = new HashMap<String, Object>();",
                "-        writeJsonRequest(connection, groupData);",
                "-",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void createOrUpdateUser(String username, String password) throws IOException",
                "-    {",
                "-        createOrUpdateUser(username, password, HttpServletResponse.SC_CREATED);",
                "-    }",
                "-",
                "-    public void createOrUpdateUser(String username, String password, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(\"user/\"",
                "-                + TestBrokerConfiguration.ENTRY_NAME_AUTHENTICATION_PROVIDER + \"/\" + username, \"PUT\");",
                "-",
                "-        Map<String, Object> data = new HashMap<String, Object>();",
                "-        data.put(\"password\", password);",
                "-        writeJsonRequest(connection, data);",
                "-",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void removeGroup(String groupName, String groupProviderName, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(",
                "-                \"group/\" + encodeAsUTF(groupProviderName) + \"/\"+ encodeAsUTF(groupName),",
                "-                \"DELETE\");",
                "-",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void removeGroup(String groupName, String groupProviderName) throws IOException",
                "-    {",
                "-        removeGroup(groupName, groupProviderName, HttpServletResponse.SC_OK);",
                "-    }",
                "-",
                "-    public void removeUserById(String id) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(\"user/\"",
                "-                + TestBrokerConfiguration.ENTRY_NAME_AUTHENTICATION_PROVIDER + \"?id=\" + id, \"DELETE\");",
                "-        Assert.assertEquals(\"Unexpected response code\", HttpServletResponse.SC_OK, connection.getResponseCode());",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void removeUser(String username, int responseCode) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(\"user/\"",
                "-                + TestBrokerConfiguration.ENTRY_NAME_AUTHENTICATION_PROVIDER + \"/\" + username, \"DELETE\");",
                "-        Assert.assertEquals(\"Unexpected response code\", responseCode, connection.getResponseCode());",
                "-        connection.disconnect();",
                "-    }",
                "-",
                "-    public void removeUser(String username) throws IOException",
                "-    {",
                "-        removeUser(username, HttpServletResponse.SC_OK);",
                "-    }",
                "-",
                "-    public void assertNumberOfGroups(Map<String, Object> data, int expectedNumberOfGroups)",
                "-    {",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        List<Map<String, Object>> groups = (List<Map<String, Object>>) data.get(\"groups\");",
                "-        if (groups == null)",
                "-        {",
                "-            groups = Collections.emptyList();",
                "-        }",
                "-        Assert.assertEquals(\"Unexpected number of groups\", expectedNumberOfGroups, groups.size());",
                "-    }",
                "-",
                "-    public void setUsernameAndPassword(String username, String password)",
                "-    {",
                "-        _username = username;",
                "-        _password = password;",
                "-    }",
                "-",
                "-    public void setManagementModeCredentials()",
                "-    {",
                "-        setUsernameAndPassword(SystemConfig.MANAGEMENT_MODE_USER_NAME, QpidBrokerTestCase.MANAGEMENT_MODE_PASSWORD);",
                "-    }",
                "-",
                "-    public void tearDown()",
                "-    {",
                "-",
                "-    }",
                "-",
                "-",
                "-    public int submitRequest(String url, String method, Object data) throws IOException",
                "-    {",
                "-        return submitRequest(url, method, data, null);",
                "-    }",
                "-",
                "-    public int submitRequest(String url, String method, Object data, Map<String, List<String>> responseHeadersToCapture) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(url, method);",
                "-        if (data != null)",
                "-        {",
                "-            writeJsonRequest(connection, data);",
                "-        }",
                "-        int responseCode = connection.getResponseCode();",
                "-        if (responseHeadersToCapture!= null)",
                "-        {",
                "-            responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "-        }",
                "-        connection.disconnect();",
                "-        return responseCode;",
                "-    }",
                "-",
                "-    public int submitRequest(String url, String method) throws IOException",
                "-    {",
                "-        return submitRequest(url, method, (byte[])null);",
                "-    }",
                "-",
                "-    public void submitRequest(String url, String method, Object data, int expectedResponseCode) throws IOException",
                "-    {",
                "-        Map<String, List<String>> headers = new HashMap<>();",
                "-        int responseCode = submitRequest(url, method, data, headers);",
                "-        Assert.assertEquals(\"Unexpected response code from \" + method + \" \" + url , expectedResponseCode, responseCode);",
                "-        if (expectedResponseCode == 201)",
                "-        {",
                "-            List<String> location = headers.get(\"Location\");",
                "-            Assert.assertTrue(\"Location is not returned by REST create request\", location != null && location.size() == 1);",
                "-        }",
                "-    }",
                "-",
                "-    public void submitRequest(String url, String method, int expectedResponseCode) throws IOException",
                "-    {",
                "-        submitRequest(url, method, null, expectedResponseCode);",
                "-    }",
                "-",
                "-    public int submitRequest(String url, String method, byte[] parameters) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(url, method);",
                "-        if (parameters != null)",
                "-        {",
                "-            OutputStream os = connection.getOutputStream();",
                "-            os.write(parameters);",
                "-            os.flush();",
                "-        }",
                "-        int responseCode = connection.getResponseCode();",
                "-        connection.disconnect();",
                "-        return responseCode;",
                "-    }",
                "-",
                "-    public byte[] getBytes(String path) throws IOException",
                "-    {",
                "-        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "-        connection.connect();",
                "-        return readConnectionInputStream(connection);",
                "-    }",
                "-",
                "-    public void setUseSslAuth(final boolean useSslAuth)",
                "-    {",
                "-        _useSslAuth = useSslAuth;",
                "-        _useSsl = true;",
                "-    }",
                "-",
                "-    public void createTestQueues() throws IOException",
                "-    {",
                "-        for (int i = 0; i < EXPECTED_QUEUES.length; i++)",
                "-        {",
                "-            String queueName = EXPECTED_QUEUES[i];",
                "-            Map<String, Object> queueData = new HashMap<>();",
                "-            queueData.put(Queue.NAME, queueName);",
                "-            queueData.put(Queue.DURABLE, Boolean.FALSE);",
                "-            int responseCode = submitRequest(\"queue/test/test/\" + queueName, \"PUT\", queueData);",
                "-            Assert.assertEquals(\"Unexpected response code creating queue\" + queueName, 201, responseCode);",
                "-",
                "-            Map<String, Object> bindingData = new HashMap<>();",
                "-            bindingData.put(\"bindingKey\", queueName);",
                "-            bindingData.put(\"destination\", queueName);",
                "-            responseCode = submitRequest(\"exchange/test/test/amq.direct/bind\", \"POST\", bindingData);",
                "-            Assert.assertEquals(\"Unexpected response code binding queue \" + queueName, 200, responseCode);",
                "-        }",
                "-    }",
                "-",
                "-    public String encode(String value, String encoding) throws UnsupportedEncodingException",
                "-    {",
                "-        return URLEncoder.encode(value, encoding).replace(\"+\", \"%20\");",
                "-    }",
                "-",
                "-    public String encodeAsUTF(String value)",
                "-    {",
                "-        try",
                "-        {",
                "-            return encode(value, \"UTF8\");",
                "-        }",
                "-        catch(UnsupportedEncodingException e)",
                "-        {",
                "-            throw new RuntimeException(\"Unsupported encoding UTF8\", e);",
                "-        }",
                "-    }",
                "-",
                "-    public Map<String, Object> waitForAttributeChanged(String url,",
                "-                                                       String attributeName,",
                "-                                                       Object newValue) throws Exception",
                "-    {",
                "-        return waitForAttributeChanged(url, (attr -> newValue.equals(attr.get(attributeName))));",
                "-",
                "-    }",
                "-",
                "-    public Map<String, Object> waitForAttributeChanged(String url,",
                "-                                                       Predicate<Map<String, Object>> attributePredicate) throws Exception",
                "-    {",
                "-        Map<String, Object> nodeAttributes = getAttributesIgnoringNotFound(url);",
                "-        int timeout = 30000;",
                "-        long limit = System.currentTimeMillis() + timeout;",
                "-        while(System.currentTimeMillis() < limit && (nodeAttributes == null || !attributePredicate.test(nodeAttributes)))",
                "-        {",
                "-            Thread.sleep(100L);",
                "-            nodeAttributes = getAttributesIgnoringNotFound(url);",
                "-        }",
                "-        Assert.assertTrue(String.format(\"Attributes predicate not satisfied after %d ms.  Last attribute state state : %s\",",
                "-                                          timeout,",
                "-                                          nodeAttributes), attributePredicate.test(nodeAttributes));",
                "-        return nodeAttributes;",
                "-    }",
                "-",
                "-    private Map<String, Object> getAttributesIgnoringNotFound(String url) throws IOException",
                "-    {",
                "-        Map<String, Object> nodeAttributes;",
                "-        try",
                "-        {",
                "-            nodeAttributes = getJsonAsMap(url);",
                "-        }",
                "-        catch(FileNotFoundException e)",
                "-        {",
                "-            nodeAttributes = null;",
                "-        }",
                "-        return nodeAttributes;",
                "-    }",
                "-",
                "-    public String getAcceptEncoding()",
                "-    {",
                "-        return _acceptEncoding;",
                "-    }",
                "-",
                "-    public void setAcceptEncoding(String acceptEncoding)",
                "-    {",
                "-        _acceptEncoding = acceptEncoding;",
                "-    }",
                "-}",
                "diff --git a/systests/src/main/resources/logback-test.xml b/systests/src/main/resources/logback-test.xml",
                "deleted file mode 100644",
                "index 0df4cdbc71..0000000000",
                "--- a/systests/src/main/resources/logback-test.xml",
                "+++ /dev/null",
                "@@ -1,59 +0,0 @@",
                "-<?xml version=\"1.0\"?>",
                "-<!--",
                "-  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "-  ~ or more contributor license agreements.  See the NOTICE file",
                "-  ~ distributed with this work for additional information",
                "-  ~ regarding copyright ownership.  The ASF licenses this file",
                "-  ~ to you under the Apache License, Version 2.0 (the",
                "-  ~ \"License\"); you may not use this file except in compliance",
                "-  ~ with the License.  You may obtain a copy of the License at",
                "-  ~",
                "-  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "-  ~",
                "-  ~ Unless required by applicable law or agreed to in writing,",
                "-  ~ software distributed under the License is distributed on an",
                "-  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-  ~ KIND, either express or implied.  See the License for the",
                "-  ~ specific language governing permissions and limitations",
                "-  ~ under the License.",
                "-  ~",
                "-  -->",
                "-<configuration debug=\"true\">",
                "-",
                "-    <contextName>qpid-systests</contextName>",
                "-",
                "-    <!-- Logging configuration used for this and other 'systests' modules.  This is named",
                "-         logback-test.xml in order that it is found in preference to the logback.xml",
                "-         found in qpid-test-utils (which is used for other, non-systests, modules).  -->",
                "-",
                "-    <define name=\"receiverPort\" class=\"org.apache.qpid.test.utils.LogbackSocketPortNumberDefiner\"/>",
                "-",
                "-    <appender name=\"RootSiftAppender\" class=\"ch.qos.logback.classic.sift.SiftingAppender\">",
                "-        <discriminator class=\"org.apache.qpid.test.utils.LogbackPropertyValueDiscriminator\">",
                "-            <Key>classQualifiedTestName</Key>",
                "-            <DefaultValue>testrun</DefaultValue>",
                "-        </discriminator>",
                "-        <sift>",
                "-            <appender name=\"FILE-${classQualifiedTestName}\" class=\"ch.qos.logback.core.FileAppender\">",
                "-                <File>${test.output.dir}${file.separator}TEST-${classQualifiedTestName}.txt</File>",
                "-                <Append>False</Append>",
                "-                <encoder>",
                "-                    <!-- origin identifies the broker, valuable when the test involves multiple brokers -->",
                "-                    <pattern>%date %-8X{origin} %-5level [%thread] %logger{10} %msg%n</pattern>",
                "-                </encoder>",
                "-            </appender>",
                "-        </sift>",
                "-    </appender>",
                "-    <!-- Used to receive the log output from spawned brokers so this log is a consolidated one. -->",
                "-    <receiver class=\"ch.qos.logback.classic.net.server.ServerSocketReceiver\">",
                "-        <port>${receiverPort}</port>",
                "-    </receiver>",
                "-    <logger name=\"qpid.message\" level=\"info\" />",
                "-    <logger name=\"qpid.statistics\" level=\"info\" />",
                "-    <logger name=\"org.apache.qpid\" level=\"debug\" />",
                "-    <logger name=\"org.apache.qpid.jms.provider.amqp.FRAMES\" level=\"trace\"/>",
                "-    <root level=\"warn\">",
                "-        <appender-ref ref=\"RootSiftAppender\"/>",
                "-    </root>",
                "-    <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/>",
                "-</configuration>"
            ],
            "changed_files": [
                "bdbstore/systests/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "systests/etc/bin/fail.py",
                "systests/etc/config-systests.json",
                "systests/etc/groups-systests",
                "systests/etc/log.properties",
                "systests/pom.xml",
                "systests/src/main/java/org/apache/qpid/systest/rest/Asserts.java",
                "systests/src/main/java/org/apache/qpid/systest/rest/QpidRestTestCase.java",
                "systests/src/main/java/org/apache/qpid/systest/rest/RestTestHelper.java",
                "systests/src/main/resources/logback-test.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8158": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8158",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7f0219c937a6dd54c7acffed6fff03ae3c473821",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1523442803,
            "hunks": 5,
            "message": "QPID-8159: Upgrade Jackson from 2.9.4 to 2.9.5",
            "diff": [
                "diff --git a/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index 9200936e29..8353f3910a 100644",
                "--- a/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -43,5 +43,5 @@ From: 'FasterXML' (http://fasterxml.com/)",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.9.4",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.9.5",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.9.4",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.9.5",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "diff --git a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "index d8466088b9..21285f2bf0 100644",
                "--- a/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "+++ b/perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "@@ -37,5 +37,5 @@ From: 'FasterXML' (http://fasterxml.com/)",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.9.4",
                "+  - Jackson-core (https://github.com/FasterXML/jackson-core) com.fasterxml.jackson.core:jackson-core:bundle:2.9.5",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "-  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.9.4",
                "+  - jackson-databind (http://github.com/FasterXML/jackson) com.fasterxml.jackson.core:jackson-databind:bundle:2.9.5",
                "     License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)",
                "diff --git a/pom.xml b/pom.xml",
                "index 7cd016a8e5..93ee99138d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -122,3 +122,3 @@",
                "     <guava-version>22.0</guava-version>",
                "-    <fasterxml-jackson-version>2.9.4</fasterxml-jackson-version>",
                "+    <fasterxml-jackson-version>2.9.5</fasterxml-jackson-version>",
                "     <slf4j-version>1.7.25</slf4j-version>"
            ],
            "changed_files": [
                "apache-qpid-broker-j/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "perftests/src/main/assembly/dependency-verification/DEPENDENCIES_REFERENCE",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8159": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8159",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d773df7d7c78480de02d8a0feab7d7401df22e50",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522683048,
            "hunks": 1,
            "message": "QPID-8151: [Broker-J] [Unit tests] Add missing exclusion when running on an IBM JDK.",
            "diff": [
                "diff --git a/test-profiles/IBMJDKExcludes b/test-profiles/IBMJDKExcludes",
                "index 353c739087..969b9272a7 100644",
                "--- a/test-profiles/IBMJDKExcludes",
                "+++ b/test-profiles/IBMJDKExcludes",
                "@@ -19,15 +19 @@",
                "-org.apache.qpid.server.transport.TCPandSSLTransportTest#*",
                "-",
                "-# Transformer on IBM JDK has different whitespace behaviour",
                "-org.apache.qpid.disttest.results.ResultsXmlWriterTest#*",
                "-",
                "-# THe IBMJSSE2 trust factory (IbmX509) validates the entire certificate chain, including trusted certificates.",
                "-# https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/knowndiffsun.html",
                "-org.apache.qpid.server.security.FileTrustStoreTest#testUseOfExpiredTrustAnchorAllowed",
                "-",
                "-# (QPID-7955) Behaviourial difference between the IBM JDK and the Open JDK",
                "-# https://www.ibm.com/developerworks/community/forums/html/topic?id=8482d948-665c-47a2-862e-457e49ac71a4&ps=25",
                "-org.apache.qpid.server.logging.logback.Logback1027WorkaroundTurboFilterTest#testSuppressedExceptionRecursion",
                "-org.apache.qpid.server.logging.logback.Logback1027WorkaroundTurboFilterTest#testInitCauseRecursion",
                "-"
            ],
            "changed_files": [
                "test-profiles/IBMJDKExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8151": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8151",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dee1123fb66ead7b7f5c922f9fcb7e03a6493994",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519847683,
            "hunks": 1,
            "message": "NO-JIRA: Bump Qpid JMS Client dependency from 0.26.0 to 0.29.0",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6cb1e47c23..8b7c01884f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -153,3 +153,3 @@",
                "     <httpclient-version>4.5.3</httpclient-version>",
                "-    <qpid-jms-client-version>0.26.0</qpid-jms-client-version>",
                "+    <qpid-jms-client-version>0.29.0</qpid-jms-client-version>",
                "     <qpid-jms-client-amqp-0-x-version>6.1.4</qpid-jms-client-amqp-0-x-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a15892b9ff359c2af17400096720e858c22a8898"
                ]
            ],
            "tags": [
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51472013e85fc66ff99d59c80e402261f5775ac5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1519409689,
            "hunks": 7,
            "message": "QPID-8110: Minor tidy-up",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "index 3bb26d4b4e..7978b1b94e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "@@ -103,3 +103,3 @@ public interface Broker<X extends Broker<X>> extends ConfiguredObject<X>, EventL",
                "     @ManagedContextDefault(name = BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE)",
                "-    DescendantType DEFAULT_BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = DescendantType.IMMEDIATE;",
                "+    DescendantScope DEFAULT_BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE = DescendantScope.IMMEDIATE;",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "index 62c71b98ed..fd80a5501f 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "@@ -286,3 +286,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                 {",
                "-                    DescendantType.valueOf(value);",
                "+                    DescendantScope.valueOf(value);",
                "                 }",
                "@@ -294,3 +294,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                             BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE,",
                "-                            EnumSet.allOf(DescendantType.class)));",
                "+                            EnumSet.allOf(DescendantScope.class)));",
                "                 }",
                "@@ -387,4 +387,4 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "     {",
                "-        final DescendantType descendantScope = getContextValue(DescendantType.class,",
                "-                                                               BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "+        final DescendantScope descendantScope = getContextValue(DescendantScope.class,",
                "+                                                                BROKER_FAIL_STARTUP_WITH_ERRORED_CHILD_SCOPE);",
                "         List<ConfiguredObject<?>> failedChildren = getChildrenInState(this, State.ERRORED, descendantScope);",
                "@@ -443,3 +443,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                                                          final State state,",
                "-                                                         final DescendantType descendantScope)",
                "+                                                         final DescendantScope descendantScope)",
                "     {",
                "@@ -456,3 +456,3 @@ public class BrokerImpl extends AbstractContainer<BrokerImpl> implements Broker<",
                "                 }",
                "-                if (descendantScope == DescendantType.ALL)",
                "+                if (descendantScope == DescendantScope.ALL)",
                "                 {",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java",
                "new file mode 100644",
                "index 0000000000..d749ea264b",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java",
                "@@ -0,0 +1,27 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.model;",
                "+",
                "+public enum DescendantScope",
                "+{",
                "+    IMMEDIATE,",
                "+    ALL",
                "+}"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/model/Broker.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/BrokerImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/DescendantScope.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8110": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8110",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16bd3953103e7878133cea18291b2ce4b7f469e4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518087998,
            "hunks": 1,
            "message": "QPID-8091: [Broker-J] Add missing annotation (cherry picked from commit 42c182f0b994292d801d2393f033bb773415b92f)",
            "diff": [
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java",
                "new file mode 100644",
                "index 0000000000..56ac0f2bbb",
                "--- /dev/null",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.utils;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target({ElementType.METHOD, ElementType.TYPE})",
                "+public @interface BrokerSpecific",
                "+{",
                "+    String kind() default \"\";",
                "+}"
            ],
            "changed_files": [
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerSpecific.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8091": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8091",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87cc5f18beb45dae51d5ab4077b83b765909e2ae",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1499854668,
            "hunks": 1,
            "message": "QPID-7858 [Java Broker] Bump com.fasterxml.jackson dependency from 2.5 to 2.8",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index be7c7d0efb..47b2d9b93a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -120,3 +120,3 @@",
                "     <guava-version>18.0</guava-version>",
                "-    <fasterxml-jackson-version>2.5.3</fasterxml-jackson-version>",
                "+    <fasterxml-jackson-version>2.8.7</fasterxml-jackson-version>",
                "     <slf4j-version>1.7.25</slf4j-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7858": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7858",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7601044d16664383e227011398ae29ebe1b84eeb",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1518545182,
            "hunks": 3,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Remove some repetitious tests",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStore.java",
                "index d331087616..cc7b173e8d 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStore.java",
                "@@ -32,2 +32,5 @@ public interface NonJavaKeyStore<X extends NonJavaKeyStore<X>> extends KeyStore<",
                " {",
                "+    String CERTIFICATE_URL = \"certificateUrl\";",
                "+    String PRIVATE_KEY_URL = \"privateKeyUrl\";",
                "+",
                "     @Override",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 327c14649d..3557644c91 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -19,5 +19,2 @@",
                "-// Those tests are testing 0.8..-0-9-1 specific semantics",
                "-org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-",
                " // 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "diff --git a/test-profiles/JavaJsonExcludes b/test-profiles/JavaJsonExcludes",
                "index 61f470391d..76204038cf 100644",
                "--- a/test-profiles/JavaJsonExcludes",
                "+++ b/test-profiles/JavaJsonExcludes",
                "@@ -22,4 +22,2 @@ org.apache.qpid.server.store.berkeleydb.replication.*",
                " org.apache.qpid.systest.rest.acl.VirtualHostACLTest#*",
                "-org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualHostNode",
                "-org.apache.qpid.systest.rest.VirtualHostRestTest#testPutCreateProvidedVirtualHost",
                " org.apache.qpid.server.BrokerStartupTest#testStartupWithNoConfig"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/NonJavaKeyStore.java",
                "test-profiles/Java010Excludes",
                "test-profiles/JavaJsonExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2c7ec1509a3d3080d14a038dd6a983bf0928136d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522071291,
            "hunks": 12,
            "message": "QPID-8089: [Broker-J][HTTP Management] Schedule the connector shutdown once the endpoints have closed - avoids sporadic test fail",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "index b263c69569..f1b781de41 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java",
                "@@ -31,2 +31,3 @@ import java.util.Collections;",
                " import java.util.EnumSet;",
                "+import java.util.HashMap;",
                " import java.util.HashSet;",
                "@@ -39,3 +40,2 @@ import java.util.concurrent.Executors;",
                " import java.util.concurrent.ThreadFactory;",
                "-import java.util.concurrent.TimeUnit;",
                "@@ -53,2 +53,4 @@ import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "+import com.google.common.util.concurrent.SettableFuture;",
                "+import org.eclipse.jetty.io.Connection;",
                " import org.eclipse.jetty.io.ssl.SslHandshakeListener;",
                "@@ -76,2 +78,3 @@ import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                " import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                "+import org.apache.qpid.server.configuration.updater.TaskExecutor;",
                " import org.apache.qpid.server.logging.messages.ManagementConsoleMessages;",
                "@@ -301,2 +304,3 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "             ServerConnector connector = createConnector(port, server);",
                "+            connector.addBean(new ConnectionTrackingListener());",
                "             server.addConnector(connector);",
                "@@ -900,2 +904,3 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "                         connector = createConnector(port, server);",
                "+                        connector.addBean(new ConnectionTrackingListener());",
                "                         server.addConnector(connector);",
                "@@ -926,30 +931,48 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "                 {",
                "-                    ServerConnector connector = _portConnectorMap.remove(port);",
                "+                    final ServerConnector connector = _portConnectorMap.remove(port);",
                "                     if (connector != null)",
                "                     {",
                "-                        int localPort = connector.getLocalPort();",
                "-                        try",
                "+                        final int localPort = connector.getLocalPort();",
                "+",
                "+                        final ConnectionTrackingListener tracker = connector.getBean(ConnectionTrackingListener.class);",
                "+                        // closes the server socket - we will see no new connections arriving",
                "+                        connector.close();",
                "+                        // minimise the timeout of endpoints so they close in a timely fashion",
                "+                        connector.setIdleTimeout(1);",
                "+                        connector.getConnectedEndPoints().forEach(endPoint -> endPoint.setIdleTimeout(1));",
                "+                        LOGGER.debug(\"Connector has {} connection(s)\", tracker.getConnectionCount());",
                "+",
                "+                        final TaskExecutor taskExecutor = getBroker().getTaskExecutor();",
                "+                        tracker.getAllClosedFuture().addListener(new Runnable()",
                "                         {",
                "-                            connector.close();",
                "-                        }",
                "-                        catch (Exception e)",
                "-                        {",
                "-                            LOGGER.warn(\"Failed to close connector for http port {}\", port, e);",
                "-                        }",
                "-                        getBroker().scheduleTask(0, TimeUnit.SECONDS, () -> {",
                "-                            LOGGER.debug(\"Stopping connector for http port {}\", localPort);",
                "-                            try",
                "-                            {",
                "-                                connector.stop();",
                "-                            }",
                "-                            catch (Exception e)",
                "-                            {",
                "-                                LOGGER.warn(\"Failed to stop connector for http port {}\", localPort, e);",
                "-                            }",
                "-                            finally",
                "+                            @Override",
                "+                            public void run()",
                "                             {",
                "-                                logOperationalShutdownMessage(localPort);",
                "-                                _server.removeConnector(connector);",
                "+                                final int connectionCount = tracker.getConnectionCount();",
                "+                                if (connectionCount == 0)",
                "+                                {",
                "+                                    LOGGER.debug(\"Stopping connector for http port {}\", localPort);",
                "+                                    try",
                "+                                    {",
                "+                                        connector.stop();",
                "+                                    }",
                "+                                    catch (Exception e)",
                "+                                    {",
                "+                                        LOGGER.warn(\"Failed to stop connector for http port {}\", localPort, e);",
                "+                                    }",
                "+                                    finally",
                "+                                    {",
                "+                                        logOperationalShutdownMessage(localPort);",
                "+                                        _server.removeConnector(connector);",
                "+                                    }",
                "+                                }",
                "+                                else",
                "+                                {",
                "+                                    LOGGER.debug(\"Connector still has {} connection(s)\", tracker.getConnectionCount());",
                "+                                    connector.getConnectedEndPoints().forEach(endPoint -> endPoint.setIdleTimeout(1));",
                "+                                    tracker.getAllClosedFuture()",
                "+                                           .addListener(this, taskExecutor);",
                "+                                }",
                "                             }",
                "-                        });",
                "+                        }, taskExecutor);",
                "                     }",
                "@@ -958,2 +981,34 @@ public class HttpManagement extends AbstractPluginAdapter<HttpManagement> implem",
                "         }",
                "+",
                "+    }",
                "+",
                "+    private static class ConnectionTrackingListener implements Connection.Listener",
                "+    {",
                "+        private final Map<Connection, SettableFuture<Void>> _closeFutures = new HashMap<>();",
                "+",
                "+        @Override",
                "+        public void onOpened(final Connection connection)",
                "+        {",
                "+            _closeFutures.put(connection, SettableFuture.create());",
                "+        }",
                "+",
                "+        @Override",
                "+        public void onClosed(final Connection connection)",
                "+        {",
                "+            SettableFuture<Void> closeFuture = _closeFutures.remove(connection);",
                "+            if (closeFuture != null)",
                "+            {",
                "+                closeFuture.set(null);",
                "+            }",
                "+        }",
                "+",
                "+        public ListenableFuture<List<Void>> getAllClosedFuture()",
                "+        {",
                "+            return Futures.allAsList(_closeFutures.values());",
                "+        }",
                "+",
                "+        public int getConnectionCount()",
                "+        {",
                "+            return _closeFutures.size();",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8089": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8089",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39bfa6a0c054bb746b0ea45402e8d8a2707895a1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1525267362,
            "hunks": 9,
            "message": "QPID-8172: [Broker-J] OAuth2 authentication provider should not mandate setting of client secret",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProvider.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProvider.java",
                "index 1259d14b41..9cbbcdf46a 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProvider.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProvider.java",
                "@@ -74,3 +74,3 @@ public interface OAuth2AuthenticationProvider<T extends OAuth2AuthenticationProv",
                "-    @ManagedAttribute( description = \"Client secret to identify qpid to the OAuth endpoints\", mandatory = true, secure = true )",
                "+    @ManagedAttribute( description = \"Client secret to identify qpid to the OAuth endpoints\", secure = true )",
                "     String getClientSecret();",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProviderImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProviderImpl.java",
                "index f579fdd250..56f69b9bef 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProviderImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProviderImpl.java",
                "@@ -274,5 +274,6 @@ public class OAuth2AuthenticationProviderImpl",
                "+            String clientSecret = getClientSecret() == null ? \"\" : getClientSecret();",
                "             if (getTokenEndpointNeedsAuth())",
                "             {",
                "-                String encoded = DatatypeConverter.printBase64Binary((getClientId() + \":\" + getClientSecret()).getBytes(UTF_8));",
                "+                String encoded = DatatypeConverter.printBase64Binary((getClientId() + \":\" + clientSecret).getBytes(UTF_8));",
                "                 connection.setRequestProperty(\"Authorization\", \"Basic \" + encoded);",
                "@@ -283,3 +284,6 @@ public class OAuth2AuthenticationProviderImpl",
                "             requestBody.put(\"client_id\", getClientId());",
                "-            requestBody.put(\"client_secret\", getClientSecret());",
                "+            if (!getTokenEndpointNeedsAuth() && !\"\".equals(clientSecret))",
                "+            {",
                "+                requestBody.put(\"client_secret\", clientSecret);",
                "+            }",
                "             requestBody.put(\"redirect_uri\", redirectUri);",
                "diff --git a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/auth/OAuth2InteractiveAuthenticator.java b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/auth/OAuth2InteractiveAuthenticator.java",
                "index 2fb960681d..d25f54cf6d 100644",
                "--- a/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/auth/OAuth2InteractiveAuthenticator.java",
                "+++ b/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/auth/OAuth2InteractiveAuthenticator.java",
                "@@ -26,2 +26,3 @@ import java.security.AccessControlException;",
                " import java.security.SecureRandom;",
                "+import java.util.Base64;",
                " import java.util.Collections;",
                "@@ -35,3 +36,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import javax.servlet.http.HttpSession;",
                "-import javax.xml.bind.DatatypeConverter;",
                "@@ -355,3 +355,3 @@ public class OAuth2InteractiveAuthenticator implements HttpRequestInteractiveAut",
                "-        String nonce = DatatypeConverter.printBase64Binary(nonceBytes);",
                "+        String nonce = Base64.getUrlEncoder().encodeToString(nonceBytes);",
                "         request.getSession().setAttribute(HttpManagementUtil.getRequestSpecificAttributeName(STATE_NAME, request), nonce);",
                "diff --git a/broker-plugins/management-http/src/main/java/resources/authenticationprovider/oauth2/add.html b/broker-plugins/management-http/src/main/java/resources/authenticationprovider/oauth2/add.html",
                "index fb27a775d4..5ebcefd3cf 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/authenticationprovider/oauth2/add.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/authenticationprovider/oauth2/add.html",
                "@@ -94,3 +94,3 @@",
                "     <div class=\"clear\">",
                "-        <div class=\"formLabel-labelCell tableContainer-labelCell\">Client Secret*:</div>",
                "+        <div class=\"formLabel-labelCell tableContainer-labelCell\">Client Secret:</div>",
                "         <div class=\"formLabel-controlCell tableContainer-valueCell\">",
                "@@ -100,3 +100,3 @@",
                "                               name: 'clientSecret',",
                "-                              required: true,",
                "+                              required: false,",
                "                               placeHolder: 'client secret',"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProvider.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/oauth2/OAuth2AuthenticationProviderImpl.java",
                "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/auth/OAuth2InteractiveAuthenticator.java",
                "broker-plugins/management-http/src/main/java/resources/authenticationprovider/oauth2/add.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8172": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8172",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "381202d2b72f94ef722fd0b0434a75fe0804f1c4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522965308,
            "hunks": 1,
            "message": "NO-JIRA: [Unit Tests] [Windows] [Appveyor] Backout branches block",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index ef2aaa5621..8801b1e48b 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -4,6 +4,2 @@ clone_depth: 30",
                "-branches:",
                "-  only:",
                "-    - master",
                "-",
                " environment:"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4716b3aa81e1349fe1afb217e1fadd3f88ea8d6b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522845561,
            "hunks": 10,
            "message": "NO-JIRA: [Unit Tests] Fix unit test failures on Windows",
            "diff": [
                "diff --git a/perftests/visualisation-jfc/src/main/java/org/apache/qpid/disttest/charting/writer/ChartWriter.java b/perftests/visualisation-jfc/src/main/java/org/apache/qpid/disttest/charting/writer/ChartWriter.java",
                "index 0ea5807d5a..92361ad7d0 100644",
                "--- a/perftests/visualisation-jfc/src/main/java/org/apache/qpid/disttest/charting/writer/ChartWriter.java",
                "+++ b/perftests/visualisation-jfc/src/main/java/org/apache/qpid/disttest/charting/writer/ChartWriter.java",
                "@@ -90,29 +90,26 @@ public class ChartWriter",
                "         String htmlHeader = String.format(",
                "-            \"<html>\\n\" +",
                "-            \"    <head>\\n\" +",
                "-            \"        <title>%s</title>\\n\" +",
                "-            \"        <style type='text/css'>figure { float: left; display: table; width: 87px;}</style>\\n\" +",
                "-            \"    </head>\\n\" +",
                "-            \"    <body>\\n\" +",
                "-            \"        <h1>%s</h1>\\n\", summaryPageTitle, summaryPageTitle);",
                "+            \"<html>%n\" +",
                "+            \"    <head>%n\" +",
                "+            \"        <title>%s</title>%n\" +",
                "+            \"        <style type='text/css'>figure { float: left; display: table; width: 87px;}</style>%n\" +",
                "+            \"    </head>%n\" +",
                "+            \"    <body>%n\" +",
                "+            \"        <h1>%s</h1>%n\", summaryPageTitle, summaryPageTitle);",
                "         String htmlFooter =",
                "-            \"    </body>\\n\" +",
                "-            \"</html>\";",
                "+                String.format(\"    </body>%n\" +",
                "+                        \"</html>\");",
                "-        BufferedWriter writer = null;",
                "-        try",
                "+        File summaryFile = new File(_chartDirectory, SUMMARY_FILE_NAME);",
                "+        LOGGER.debug(\"About to produce HTML summary file \" + summaryFile.getAbsolutePath() + \" from charts \" + _chartFilesToChartDef);",
                "+        try(BufferedWriter writer = new BufferedWriter(new FileWriter(summaryFile)))",
                "         {",
                "-            File summaryFile = new File(_chartDirectory, SUMMARY_FILE_NAME);",
                "-            LOGGER.debug(\"About to produce HTML summary file \" + summaryFile.getAbsolutePath() + \" from charts \" + _chartFilesToChartDef);",
                "-",
                "-            writer = new BufferedWriter(new FileWriter(summaryFile));",
                "             writer.write(htmlHeader);",
                "-            writer.write(\"        <ul>\\n\");",
                "+            writer.write(String.format(\"        <ul>%n\"));",
                "             for (File chartFile : _chartFilesToChartDef.keySet())",
                "             {",
                "-                writer.write(\"            <li><a href='#\"+ chartFile.getName() +\"'>\" + chartFile.getName() + \"</a></li>\\n\");",
                "+                writer.write(String.format(\"            <li><a href='#\" + chartFile.getName() + \"'>\" + chartFile.getName() + \"</a></li>%n\"));",
                "             }",
                "-            writer.write(\"        </ul>\\n\");",
                "+            writer.write(String.format(\"        </ul>%n\"));",
                "@@ -121,10 +118,10 @@ public class ChartWriter",
                "                 ChartingDefinition def = _chartFilesToChartDef.get(chartFile);",
                "-                writer.write(\"        <figure>\\n\");",
                "-                writer.write(\"          <a name='\" + chartFile.getName() + \"'/>\\n\");",
                "-                writer.write(\"          <img src='\" + chartFile.getName() + \"'/>\\n\");",
                "+                writer.write(String.format(\"        <figure>%n\"));",
                "+                writer.write(String.format(\"          <a name='\" + chartFile.getName() + \"'/>%n\"));",
                "+                writer.write(String.format(\"          <img src='\" + chartFile.getName() + \"'/>%n\"));",
                "                 if (def.getChartDescription() != null)",
                "                 {",
                "-                    writer.write(\"          <figcaption>\" + def.getChartDescription() + \"</figcaption>\\n\");",
                "+                    writer.write(String.format(\"          <figcaption>%s</figcaption>%n\", def.getChartDescription()));",
                "                 }",
                "-                writer.write(\"        </figure>\\n\");",
                "+                writer.write(String.format(\"        </figure>%n\"));",
                "             }",
                "@@ -137,16 +134,2 @@ public class ChartWriter",
                "         }",
                "-        finally",
                "-        {",
                "-            if(writer != null)",
                "-            {",
                "-                try",
                "-                {",
                "-                    writer.close();",
                "-                }",
                "-                catch(IOException e)",
                "-                {",
                "-                    throw new ChartingException(\"Failed to create HTML summary file\", e);",
                "-                }",
                "-            }",
                "-        }",
                "     }"
            ],
            "changed_files": [
                "perftests/visualisation-jfc/src/main/java/org/apache/qpid/disttest/charting/writer/ChartWriter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "203184f98e7ad1f44a9d8f9f8aeeb9badac5a505",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522830995,
            "hunks": 1,
            "message": "NO-JIRA: Add appveyor config for CI on Windows (unit tests only for now)",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "new file mode 100644",
                "index 0000000000..0cfef8f790",
                "--- /dev/null",
                "+++ b/appveyor.yml",
                "@@ -0,0 +1,46 @@",
                "+version: '{build}'",
                "+skip_tags: true",
                "+clone_depth: 30",
                "+",
                "+environment:",
                "+  JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0",
                "+",
                "+install:",
                "+  - ps: |",
                "+      Add-Type -AssemblyName System.IO.Compression.FileSystem",
                "+      if (!(Test-Path -Path \"C:\\maven\\apache-maven-3.3.9\" )) {",
                "+        (new-object System.Net.WebClient).DownloadFile(",
                "+          'http://repo2.maven.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip',",
                "+          'C:\\maven-bin.zip'",
                "+        )",
                "+        [System.IO.Compression.ZipFile]::ExtractToDirectory(\"C:\\maven-bin.zip\", \"C:\\maven\")",
                "+      }",
                "+  - cmd: SET PATH=C:\\maven\\apache-maven-3.3.9\\bin;%JAVA_HOME%\\bin;%PATH%",
                "+",
                "+build_script:",
                "+  - mvn clean install -B -DskipTests",
                "+",
                "+test_script:",
                "+  - mvn clean test -B -Dskip.systests=true",
                "+",
                "+on_failure:",
                "+  - ps: |",
                "+      7z a -r surefire-reports.zip '**\\target\\surefire-reports\\*'",
                "+      Push-AppveyorArtifact surefire-reports.zip -DeploymentName 'Surefire Reports'",
                "+",
                "+on_finish:",
                "+  - ps: |",
                "+      $url = \"https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)\"",
                "+      $wc = New-Object 'System.Net.WebClient'",
                "+      $dirs = Get-ChildItem -Filter surefire-reports -Recurse",
                "+      ForEach ($dir in $dirs)",
                "+      {",
                "+        $files = Get-ChildItem -Path $dir.FullName -Filter TEST-*.xml",
                "+        ForEach ($file in $files)",
                "+        {",
                "+          $wc.UploadFile($url, (Resolve-Path $file.FullName))",
                "+        }",
                "+      }",
                "+",
                "+cache:",
                "+  - C:\\maven\\apache-maven-3.3.9"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d3b6ac8ba67aba0a4a7ed815225b4eda35f67756",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521017125,
            "hunks": 1,
            "message": "NO-JIRA: Update .travis.yml - avoid running unit tests twice",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 9ba8cafc6a..45a870e004 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -5,4 +5,4 @@ jdk:",
                " env:",
                "-  - phase=\"test\" pl=\"\"",
                "-  - phase=\"verify\" pl=\"-pl systests/protocol-tests-amqp-1-0,systests/protocol-tests-amqp-0-8,systests/protocol-tests-amqp-0-10\"",
                "-script: \"mvn --fail-at-end --threads 2.0C ${phase} ${pl} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\"",
                "+  - phase=\"test\" pl=\"\" additionalprops=\"-Dskip.systests=true\"",
                "+  - phase=\"verify\" pl=\"-pl systests/protocol-tests-amqp-1-0,systests/protocol-tests-amqp-0-8,systests/protocol-tests-amqp-0-10\" additionalprops=\"-Dskip.unittests=true\"",
                "+script: \"mvn --fail-at-end --threads 2.0C ${phase} ${pl} ${additionalprops} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e0b3bbf6dac8e916db22113a84c4231b0778e9ab",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521537301,
            "hunks": 1,
            "message": "NO-JIRA: Exclude travis config from Apache RAT check",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ad0c8621a1..be7c7d0efb 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -458,2 +458,3 @@",
                "             <exclude>DEPENDENCIES</exclude>",
                "+            <exclude>.travis.yml</exclude>",
                "           </excludes>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e3a146369105b63f56685b9af738f90b75329b3c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521498917,
            "hunks": 1,
            "message": "NO-JIRA: Use openjdk7 rather than oraclejdk7",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 70e67a07ad..dda5b39f5d 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -3,3 +3,3 @@ sudo: false",
                " jdk:",
                "-  - oraclejdk7",
                "+  - openjdk7",
                " env:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a46f1d6e01ecadeead7d333c9bac023feb51293e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1520980714,
            "hunks": 1,
            "message": "NO-JIRA: Update .travis.yml - enable thread count and fail-at-end",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 31bcd657b6..9ba8cafc6a 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -7,2 +7,2 @@ env:",
                "   - phase=\"verify\" pl=\"-pl systests/protocol-tests-amqp-1-0,systests/protocol-tests-amqp-0-8,systests/protocol-tests-amqp-0-10\"",
                "-script: \"mvn ${phase} ${pl} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\"",
                "+script: \"mvn --fail-at-end --threads 2.0C ${phase} ${pl} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c05dfbd52132e2969966bdfe478b2b58f0108b9a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521211612,
            "hunks": 7,
            "message": "NO-JIRA: [Broker-J] [System tests] Add extra debug logging into HttpTestHelper",
            "diff": [
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "index 00eb60d67a..d6eeba4ddd 100644",
                "--- a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java",
                "@@ -358,15 +358,30 @@ public class HttpTestHelper",
                "     {",
                "-        HttpURLConnection connection = openManagementConnection(url, method);",
                "+        LOGGER.debug(\"HttpURLConnection : open  : {} : {}\", method, url);",
                "+        RuntimeException ex = null;",
                "+        int responseCode = -1;",
                "         try",
                "         {",
                "-            if (data != null)",
                "+            HttpURLConnection connection = openManagementConnection(url, method);",
                "+            try",
                "             {",
                "-                writeJsonRequest(connection, data);",
                "+                if (data != null)",
                "+                {",
                "+                    writeJsonRequest(connection, data);",
                "+                }",
                "+                responseCode = connection.getResponseCode();",
                "+                if (responseHeadersToCapture != null)",
                "+                {",
                "+                    responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+                }",
                "+                return responseCode;",
                "+            }",
                "+            catch (RuntimeException e)",
                "+            {",
                "+                ex = e;",
                "+                throw e;",
                "             }",
                "-            int responseCode = connection.getResponseCode();",
                "-            if (responseHeadersToCapture != null)",
                "+            finally",
                "             {",
                "-                responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+                connection.disconnect();",
                "             }",
                "-            return responseCode;",
                "         }",
                "@@ -374,3 +389,3 @@ public class HttpTestHelper",
                "         {",
                "-            connection.disconnect();",
                "+            LOGGER.debug(\"HttpURLConnection : close : {} : {} : {}\", method, responseCode, url, ex);",
                "         }"
            ],
            "changed_files": [
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/http/HttpTestHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "107dcad8afa06046f2ce9e9643a7622c0e2fcd0d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1483006757,
            "hunks": 1,
            "message": "NO-JIRA: [Java System Tests] [HA] Reduce the number of connections used by MultiNodeTest.testInFlightTransactionsWhilstMajorityIsLost when running on Apache CI Cherry picked from master be1bb850529eb93b837b50cb42a21460a694e257",
            "diff": [
                "diff --git a/test-profiles/apache-ci.test.overridden.properties b/test-profiles/apache-ci.test.overridden.properties",
                "index d77b50b8d7..cb839e782e 100644",
                "--- a/test-profiles/apache-ci.test.overridden.properties",
                "+++ b/test-profiles/apache-ci.test.overridden.properties",
                "@@ -40,2 +40,3 @@ BDBHAVirtualHostNodeTestHelper.sleepIntervalOnChangeWaiting=100",
                " BDBHAVirtualHostNodeTestHelper.waitForVirtualhostInterval=30000",
                "+MultiNodeTest.testInFlightTransactionsWhilstMajorityIsLost.numberOfConnections=3"
            ],
            "changed_files": [
                "test-profiles/apache-ci.test.overridden.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a87a3a9b3638102df3212812d5f34d96dbc5d060",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521498510,
            "hunks": 1,
            "message": "NO-JIRA: Add .travis.yml",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "new file mode 100644",
                "index 0000000000..70e67a07ad",
                "--- /dev/null",
                "+++ b/.travis.yml",
                "@@ -0,0 +1,7 @@",
                "+language: java",
                "+sudo: false",
                "+jdk:",
                "+  - oraclejdk7",
                "+env:",
                "+  - phase=\"test\" pl=\"\" additionalprops=\"-Dskip.systests=true\"",
                "+script: \"mvn --fail-at-end ${phase} ${pl} ${additionalprops} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "71190b97d7c60ae874b3178ae6ad78f355f8a1a4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516990526,
            "hunks": 2,
            "message": "NO-JIRA: Bump qpid-jms-client (0.26.0 to 0.29.0) and netty (4.1.16.Final to 4.1.19.Final) test dependencies",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index dadc1c6cfc..0998abcc9b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -146,3 +146,3 @@",
                "     <mockito-version>1.9.5</mockito-version>",
                "-    <netty-version>4.1.16.Final</netty-version>",
                "+    <netty-version>4.1.19.Final</netty-version>",
                "     <hamcrest-version>1.3</hamcrest-version>",
                "@@ -151,3 +151,3 @@",
                "     <httpclient-version>4.5.3</httpclient-version>",
                "-    <qpid-jms-client-version>0.26.0</qpid-jms-client-version>",
                "+    <qpid-jms-client-version>0.29.0</qpid-jms-client-version>",
                "     <qpid-jms-client-amqp-0-x-version>6.3.0</qpid-jms-client-amqp-0-x-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b26e321723fffa3952281c007f5c764cfeb589df",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1521018276,
            "hunks": 1,
            "message": "NO-JIRA: Update .travis.yml - remove --threads argument - does not seem to yield benefit on Travis",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 45a870e004..46106f7e9c 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -7,2 +7,2 @@ env:",
                "   - phase=\"verify\" pl=\"-pl systests/protocol-tests-amqp-1-0,systests/protocol-tests-amqp-0-8,systests/protocol-tests-amqp-0-10\" additionalprops=\"-Dskip.unittests=true\"",
                "-script: \"mvn --fail-at-end --threads 2.0C ${phase} ${pl} ${additionalprops} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\"",
                "+script: \"mvn --fail-at-end ${phase} ${pl} ${additionalprops} -Dtest.overridden.properties=${TRAVIS_BUILD_DIR}/test-profiles/apache-ci.test.overridden.properties\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cfb113bf3af8b72bab34b1f93f8723bf00f7cf72",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1522836757,
            "hunks": 1,
            "message": "NO-JIRA: [Appveyor] Turn on --fail-at-end",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index 0cfef8f790..64d57dfca0 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -23,3 +23,3 @@ build_script:",
                " test_script:",
                "-  - mvn clean test -B -Dskip.systests=true",
                "+  - mvn clean test -B -Dskip.systests=true --fail-at-end"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": []
        }
    ]
}
