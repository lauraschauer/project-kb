{
    "advisory_record": {
        "cve_id": "CVE-2018-1321",
        "description": "An administrator with report and template entitlements in Apache Syncope 1.2.x before 1.2.11, 2.0.x before 2.0.8, and unsupported releases 1.0.x and 1.1.x which may be also affected, can use XSL Transformations (XSLT) to perform malicious operations, including but not limited to file read, file write, and code execution.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1521590400,
        "updated_timestamp": 1537005421,
        "repository_url": null,
        "references": {
            "": 18,
            "http://www.securityfocus.com/bid/103508": 2,
            "http://syncope.apache.org/security.html#CVE-2018-1321:_Remote_code_execution_by_administrators_with_report_and_template_entitlements": 2,
            "https://www.exploit-db.com/exploits/45400/": 2,
            "https://www.apache.org/": 1,
            "https://www.apache.org/licenses/": 1,
            "https://cwiki.apache.org/confluence/display/SYNCOPE/Roadmap": 1,
            "https://www.apache.org/foundation/how-it-works": 1,
            "https://www.apache.org/foundation/": 1,
            "https://www.apache.org/foundation/sponsorship": 1,
            "https://www.apache.org/foundation/thanks": 1,
            "https://twitter.com/syncopeidm": 1,
            "http://maven.apache.org/": 1,
            "https://www.apache.org/security/": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11977": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1961": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1959": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17557": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17186": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17184": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1322": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1321": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1596537": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3503": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1586349": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1586317": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0111": 1,
            "https://www.openhub.net/p/syncope": 1,
            "https://bestpractices.coreinfrastructure.org/projects/154": 1,
            "https://github.com/apache/syncope/actions/workflows/crosschecks.yml": 1,
            "https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml": 1
        },
        "affected_products": [
            "XSLT",
            "Apache",
            "Transformations",
            "Syncope",
            "Apache Syncope"
        ],
        "versions": {
            "status": "affected",
            "version": "Releases prior to 1.2.11, Releases prior to 2.0.8"
        },
        "files": [
            "XSLT",
            "XSL"
        ],
        "keywords": [
            "limit",
            "xslt",
            "administrator",
            "entitlement",
            "code",
            "syncope",
            "apache",
            "execution",
            "affect",
            "file",
            "perform",
            "include",
            "transformations",
            "release",
            "read",
            "template",
            "report",
            "write",
            "operation"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "5e83b3787c374893ccbe5ab8dab30b450d2a2a42",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510754499,
            "hunks": 4,
            "message": "[SYNCOPE-1230] Fix toggle reopening after single task execution deletion",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java",
                "index 3e26514158..e264bff82c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java",
                "@@ -131,2 +131,3 @@ public abstract class ExecutionsDirectoryPanel",
                "             public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {",
                "+                ExecutionsDirectoryPanel.this.getTogglePanel().close(target);",
                "                 try {",
                "@@ -134,2 +135,3 @@ public abstract class ExecutionsDirectoryPanel",
                "                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+                    target.add(container);",
                "                 } catch (SyncopeClientException scce) {",
                "@@ -137,5 +139,3 @@ public abstract class ExecutionsDirectoryPanel",
                "                 }",
                "-                target.add(ExecutionsDirectoryPanel.this);",
                "                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "-                ExecutionsDirectoryPanel.this.getTogglePanel().close(target);",
                "             }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1230": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7a437c0f628820c62be6b65fa4f334ab25b97cb0"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: execution",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: execution",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1230",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "013c1de03f77e558d46cf4f207ec5c648d5b9dd8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512830706,
            "hunks": 56,
            "message": "[SYNCOPE-152] Support for attributes and excludedAttributes for read, list and search operations",
            "diff": [
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index e46c4c8862..4bc923a03e 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -98,3 +98,28 @@ public class SCIMDataBinder {",
                "-    public SCIMUser toSCIMUser(final UserTO userTO, final String location) {",
                "+    private boolean output(",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes,",
                "+            final String schema) {",
                "+",
                "+        return (attributes.isEmpty() || attributes.contains(schema))",
                "+                && (excludedAttributes.isEmpty() || !excludedAttributes.contains(schema));",
                "+    }",
                "+",
                "+    private <T> T output(",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes,",
                "+            final String schema,",
                "+            final T value) {",
                "+",
                "+        return output(attributes, excludedAttributes, schema)",
                "+                ? value",
                "+                : null;",
                "+    }",
                "+",
                "+    public SCIMUser toSCIMUser(",
                "+            final UserTO userTO,",
                "+            final String location,",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes) {",
                "+",
                "         SCIMConf conf = confManager.get();",
                "@@ -117,3 +142,3 @@ public class SCIMDataBinder {",
                "                         location),",
                "-                userTO.getUsername(),",
                "+                output(attributes, excludedAttributes, \"userName\", userTO.getUsername()),",
                "                 !userTO.isSuspended());",
                "@@ -126,3 +151,3 @@ public class SCIMDataBinder {",
                "         if (conf.getUserConf() != null) {",
                "-            if (conf.getUserConf().getName() != null) {",
                "+            if (output(attributes, excludedAttributes, \"name\") && conf.getUserConf().getName() != null) {",
                "                 SCIMUserName name = new SCIMUserName();",
                "@@ -167,3 +192,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getDisplayName() != null",
                "+            if (output(attributes, excludedAttributes, \"displayName\")",
                "+                    && conf.getUserConf().getDisplayName() != null",
                "                     && attrs.containsKey(conf.getUserConf().getDisplayName())) {",
                "@@ -173,3 +199,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getNickName() != null",
                "+            if (output(attributes, excludedAttributes, \"nickName\")",
                "+                    && conf.getUserConf().getNickName() != null",
                "                     && attrs.containsKey(conf.getUserConf().getNickName())) {",
                "@@ -179,3 +206,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getProfileUrl() != null",
                "+            if (output(attributes, excludedAttributes, \"profileUrl\")",
                "+                    && conf.getUserConf().getProfileUrl() != null",
                "                     && attrs.containsKey(conf.getUserConf().getProfileUrl())) {",
                "@@ -185,3 +213,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getTitle() != null",
                "+            if (output(attributes, excludedAttributes, \"title\")",
                "+                    && conf.getUserConf().getTitle() != null",
                "                     && attrs.containsKey(conf.getUserConf().getTitle())) {",
                "@@ -191,3 +220,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getUserType() != null",
                "+            if (output(attributes, excludedAttributes, \"userType\")",
                "+                    && conf.getUserConf().getUserType() != null",
                "                     && attrs.containsKey(conf.getUserConf().getUserType())) {",
                "@@ -197,3 +227,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getPreferredLanguage() != null",
                "+            if (output(attributes, excludedAttributes, \"preferredLanguage\")",
                "+                    && conf.getUserConf().getPreferredLanguage() != null",
                "                     && attrs.containsKey(conf.getUserConf().getPreferredLanguage())) {",
                "@@ -203,3 +234,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getLocale() != null",
                "+            if (output(attributes, excludedAttributes, \"locale\")",
                "+                    && conf.getUserConf().getLocale() != null",
                "                     && attrs.containsKey(conf.getUserConf().getLocale())) {",
                "@@ -209,3 +241,4 @@ public class SCIMDataBinder {",
                "-            if (conf.getUserConf().getTimezone() != null",
                "+            if (output(attributes, excludedAttributes, \"timezone\")",
                "+                    && conf.getUserConf().getTimezone() != null",
                "                     && attrs.containsKey(conf.getUserConf().getTimezone())) {",
                "@@ -215,107 +248,130 @@ public class SCIMDataBinder {",
                "-            fill(attrs, conf.getUserConf().getEmails(), user.getEmails());",
                "-            fill(attrs, conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());",
                "-            fill(attrs, conf.getUserConf().getIms(), user.getIms());",
                "-            fill(attrs, conf.getUserConf().getPhotos(), user.getPhotos());",
                "-            conf.getUserConf().getAddresses().forEach(addressConf -> {",
                "-                SCIMUserAddress address = new SCIMUserAddress();",
                "+            if (output(attributes, excludedAttributes, \"emails\")) {",
                "+                fill(attrs, conf.getUserConf().getEmails(), user.getEmails());",
                "+            }",
                "+            if (output(attributes, excludedAttributes, \"phoneNumbers\")) {",
                "+                fill(attrs, conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());",
                "+            }",
                "+            if (output(attributes, excludedAttributes, \"ims\")) {",
                "+                fill(attrs, conf.getUserConf().getIms(), user.getIms());",
                "+            }",
                "+            if (output(attributes, excludedAttributes, \"photos\")) {",
                "+                fill(attrs, conf.getUserConf().getPhotos(), user.getPhotos());",
                "+            }",
                "+            if (output(attributes, excludedAttributes, \"addresses\")) {",
                "+                conf.getUserConf().getAddresses().forEach(addressConf -> {",
                "+                    SCIMUserAddress address = new SCIMUserAddress();",
                "-                if (addressConf.getFormatted() != null && attrs.containsKey(addressConf.getFormatted())) {",
                "-                    address.setFormatted(attrs.get(addressConf.getFormatted()).getValues().get(0));",
                "-                }",
                "-                if (addressConf.getStreetAddress() != null && attrs.containsKey(addressConf.getStreetAddress())) {",
                "-                    address.setStreetAddress(attrs.get(addressConf.getStreetAddress()).getValues().get(0));",
                "-                }",
                "-                if (addressConf.getLocality() != null && attrs.containsKey(addressConf.getLocality())) {",
                "-                    address.setLocality(attrs.get(addressConf.getLocality()).getValues().get(0));",
                "-                }",
                "-                if (addressConf.getRegion() != null && attrs.containsKey(addressConf.getRegion())) {",
                "-                    address.setRegion(attrs.get(addressConf.getRegion()).getValues().get(0));",
                "-                }",
                "-                if (addressConf.getCountry() != null && attrs.containsKey(addressConf.getCountry())) {",
                "-                    address.setCountry(attrs.get(addressConf.getCountry()).getValues().get(0));",
                "-                }",
                "-                if (addressConf.getType() != null) {",
                "-                    address.setType(addressConf.getType().name());",
                "-                }",
                "-                if (addressConf.isPrimary()) {",
                "-                    address.setPrimary(true);",
                "-                }",
                "+                    if (addressConf.getFormatted() != null && attrs.containsKey(addressConf.getFormatted())) {",
                "+                        address.setFormatted(attrs.get(addressConf.getFormatted()).getValues().get(0));",
                "+                    }",
                "+                    if (addressConf.getStreetAddress() != null && attrs.containsKey(addressConf.getStreetAddress())) {",
                "+                        address.setStreetAddress(attrs.get(addressConf.getStreetAddress()).getValues().get(0));",
                "+                    }",
                "+                    if (addressConf.getLocality() != null && attrs.containsKey(addressConf.getLocality())) {",
                "+                        address.setLocality(attrs.get(addressConf.getLocality()).getValues().get(0));",
                "+                    }",
                "+                    if (addressConf.getRegion() != null && attrs.containsKey(addressConf.getRegion())) {",
                "+                        address.setRegion(attrs.get(addressConf.getRegion()).getValues().get(0));",
                "+                    }",
                "+                    if (addressConf.getCountry() != null && attrs.containsKey(addressConf.getCountry())) {",
                "+                        address.setCountry(attrs.get(addressConf.getCountry()).getValues().get(0));",
                "+                    }",
                "+                    if (addressConf.getType() != null) {",
                "+                        address.setType(addressConf.getType().name());",
                "+                    }",
                "+                    if (addressConf.isPrimary()) {",
                "+                        address.setPrimary(true);",
                "+                    }",
                "+",
                "+                    if (!address.isEmpty()) {",
                "+                        user.getAddresses().add(address);",
                "+                    }",
                "+                });",
                "+            }",
                "+",
                "+            if (output(attributes, excludedAttributes, \"x509Certificates\")) {",
                "+                conf.getUserConf().getX509Certificates().stream().",
                "+                        filter(certificate -> attrs.containsKey(certificate)).",
                "+                        forEachOrdered(certificate -> {",
                "+                            user.getX509Certificates().add(new Value(attrs.get(certificate).getValues().get(0)));",
                "+                        });",
                "+            }",
                "-                if (!address.isEmpty()) {",
                "-                    user.getAddresses().add(address);",
                "+            if (conf.getEnterpriseUserConf() != null) {",
                "+                SCIMEnterpriseInfo enterpriseInfo = new SCIMEnterpriseInfo();",
                "+",
                "+                if (output(attributes, excludedAttributes, \"employeeNumber\")",
                "+                        && conf.getEnterpriseUserConf().getEmployeeNumber() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getEmployeeNumber())) {",
                "+",
                "+                    enterpriseInfo.setEmployeeNumber(",
                "+                            attrs.get(conf.getEnterpriseUserConf().getEmployeeNumber()).getValues().get(0));",
                "                 }",
                "-            });",
                "+                if (output(attributes, excludedAttributes, \"costCenter\")",
                "+                        && conf.getEnterpriseUserConf().getCostCenter() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getCostCenter())) {",
                "-            conf.getUserConf().getX509Certificates().stream().",
                "-                    filter(certificate -> attrs.containsKey(certificate)).",
                "-                    forEachOrdered(certificate -> {",
                "-                        user.getX509Certificates().add(new Value(attrs.get(certificate).getValues().get(0)));",
                "-                    });",
                "-        }",
                "+                    enterpriseInfo.setCostCenter(",
                "+                            attrs.get(conf.getEnterpriseUserConf().getCostCenter()).getValues().get(0));",
                "+                }",
                "+                if (output(attributes, excludedAttributes, \"organization\")",
                "+                        && conf.getEnterpriseUserConf().getOrganization() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getOrganization())) {",
                "-        if (conf.getEnterpriseUserConf() != null) {",
                "-            SCIMEnterpriseInfo enterpriseInfo = new SCIMEnterpriseInfo();",
                "+                    enterpriseInfo.setOrganization(",
                "+                            attrs.get(conf.getEnterpriseUserConf().getOrganization()).getValues().get(0));",
                "+                }",
                "+                if (output(attributes, excludedAttributes, \"division\")",
                "+                        && conf.getEnterpriseUserConf().getDivision() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getDivision())) {",
                "-            if (conf.getEnterpriseUserConf().getEmployeeNumber() != null",
                "-                    && attrs.containsKey(conf.getEnterpriseUserConf().getEmployeeNumber())) {",
                "+                    enterpriseInfo.setDivision(",
                "+                            attrs.get(conf.getEnterpriseUserConf().getDivision()).getValues().get(0));",
                "+                }",
                "+                if (output(attributes, excludedAttributes, \"department\")",
                "+                        && conf.getEnterpriseUserConf().getDepartment() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getDepartment())) {",
                "-                enterpriseInfo.setEmployeeNumber(",
                "-                        attrs.get(conf.getEnterpriseUserConf().getEmployeeNumber()).getValues().get(0));",
                "-            }",
                "-            if (conf.getEnterpriseUserConf().getCostCenter() != null",
                "-                    && attrs.containsKey(conf.getEnterpriseUserConf().getCostCenter())) {",
                "+                    enterpriseInfo.setDepartment(",
                "+                            attrs.get(conf.getEnterpriseUserConf().getDepartment()).getValues().get(0));",
                "+                }",
                "+                if (output(attributes, excludedAttributes, \"manager\")",
                "+                        && conf.getEnterpriseUserConf().getManager() != null) {",
                "-                enterpriseInfo.setCostCenter(",
                "-                        attrs.get(conf.getEnterpriseUserConf().getCostCenter()).getValues().get(0));",
                "-            }",
                "-            if (conf.getEnterpriseUserConf().getOrganization() != null",
                "-                    && attrs.containsKey(conf.getEnterpriseUserConf().getOrganization())) {",
                "+                    SCIMUserManager manager = new SCIMUserManager();",
                "-                enterpriseInfo.setOrganization(",
                "-                        attrs.get(conf.getEnterpriseUserConf().getOrganization()).getValues().get(0));",
                "-            }",
                "-            if (conf.getEnterpriseUserConf().getDivision() != null",
                "-                    && attrs.containsKey(conf.getEnterpriseUserConf().getDivision())) {",
                "+                    if (conf.getEnterpriseUserConf().getManager().getManager() != null",
                "+                            && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getManager())) {",
                "-                enterpriseInfo.setDivision(",
                "-                        attrs.get(conf.getEnterpriseUserConf().getDivision()).getValues().get(0));",
                "-            }",
                "-            if (conf.getEnterpriseUserConf().getDepartment() != null",
                "-                    && attrs.containsKey(conf.getEnterpriseUserConf().getDepartment())) {",
                "+                        try {",
                "+                            UserTO userManager = userLogic.read(",
                "+                                    attrs.get(conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "+                            manager.setValue(userManager.getKey());",
                "+                            manager.setRef(",
                "+                                    StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());",
                "-                enterpriseInfo.setDepartment(",
                "-                        attrs.get(conf.getEnterpriseUserConf().getDepartment()).getValues().get(0));",
                "-            }",
                "-            if (conf.getEnterpriseUserConf().getManager() != null) {",
                "-                SCIMUserManager manager = new SCIMUserManager();",
                "-",
                "-                if (conf.getEnterpriseUserConf().getManager().getManager() != null",
                "-                        && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getManager())) {",
                "-",
                "-                    try {",
                "-                        UserTO userManager = userLogic.read(",
                "-                                attrs.get(conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "-                        manager.setValue(userManager.getKey());",
                "-                        manager.setRef(",
                "-                                StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());",
                "-",
                "-                        if (conf.getEnterpriseUserConf().getManager().getDisplayName() != null) {",
                "-                            AttrTO displayName = userManager.getPlainAttr(",
                "-                                    conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);",
                "-                            if (displayName == null) {",
                "-                                displayName = userManager.getDerAttr(",
                "+                            if (conf.getEnterpriseUserConf().getManager().getDisplayName() != null) {",
                "+                                AttrTO displayName = userManager.getPlainAttr(",
                "                                         conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);",
                "+                                if (displayName == null) {",
                "+                                    displayName = userManager.getDerAttr(",
                "+                                            conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);",
                "+                                }",
                "+                                if (displayName == null) {",
                "+                                    displayName = userManager.getVirAttr(",
                "+                                            conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);",
                "+                                }",
                "+                                if (displayName != null) {",
                "+                                    manager.setDisplayName(displayName.getValues().get(0));",
                "+                                }",
                "                             }",
                "-                            if (displayName == null) {",
                "-                                displayName = userManager.getVirAttr(",
                "-                                        conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);",
                "-                            }",
                "-                            if (displayName != null) {",
                "-                                manager.setDisplayName(displayName.getValues().get(0));",
                "-                            }",
                "+                        } catch (Exception e) {",
                "+                            LOG.error(\"Could not read user {}\",",
                "+                                    conf.getEnterpriseUserConf().getManager().getManager(), e);",
                "                         }",
                "-                    } catch (Exception e) {",
                "-                        LOG.error(\"Could not read attribute {}\",",
                "-                                conf.getEnterpriseUserConf().getManager().getManager(), e);",
                "+                    }",
                "+",
                "+                    if (!manager.isEmpty()) {",
                "+                        enterpriseInfo.setManager(manager);",
                "                     }",
                "@@ -323,4 +379,4 @@ public class SCIMDataBinder {",
                "-                if (!manager.isEmpty()) {",
                "-                    enterpriseInfo.setManager(manager);",
                "+                if (!enterpriseInfo.isEmpty()) {",
                "+                    user.setEnterpriseInfo(enterpriseInfo);",
                "                 }",
                "@@ -328,29 +384,32 @@ public class SCIMDataBinder {",
                "-            if (!enterpriseInfo.isEmpty()) {",
                "-                user.setEnterpriseInfo(enterpriseInfo);",
                "+            if (output(attributes, excludedAttributes, \"groups\")) {",
                "+                userTO.getMemberships().forEach(membership -> {",
                "+                    user.getGroups().add(new Group(",
                "+                            membership.getGroupKey(),",
                "+                            StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                            membership.getGroupName(),",
                "+                            Function.direct));",
                "+                });",
                "+                userTO.getDynMemberships().forEach(membership -> {",
                "+                    user.getGroups().add(new Group(",
                "+                            membership.getGroupKey(),",
                "+                            StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                            membership.getGroupName(),",
                "+                            Function.indirect));",
                "+                });",
                "             }",
                "-        }",
                "-",
                "-        userTO.getMemberships().forEach(membership -> {",
                "-            user.getGroups().add(new Group(",
                "-                    membership.getGroupKey(),",
                "-                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "-                    membership.getGroupName(),",
                "-                    Function.direct));",
                "-        });",
                "-        userTO.getDynMemberships().forEach(membership -> {",
                "-            user.getGroups().add(new Group(",
                "-                    membership.getGroupKey(),",
                "-                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "-                    membership.getGroupName(),",
                "-                    Function.indirect));",
                "-        });",
                "-        authDataAccessor.getAuthorities(userTO.getUsername()).forEach(authority -> {",
                "-            user.getEntitlements().add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms()));",
                "-        });",
                "+            if (output(attributes, excludedAttributes, \"entitlements\")) {",
                "+                authDataAccessor.getAuthorities(userTO.getUsername()).forEach(authority -> {",
                "+                    user.getEntitlements().",
                "+                            add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms()));",
                "+                });",
                "+            }",
                "-        userTO.getRoles().forEach(role -> {",
                "-            user.getRoles().add(new Value(role));",
                "-        });",
                "+            if (output(attributes, excludedAttributes, \"roles\")) {",
                "+                userTO.getRoles().forEach(role -> {",
                "+                    user.getRoles().add(new Value(role));",
                "+                });",
                "+            }",
                "+        }",
                "@@ -359,3 +418,8 @@ public class SCIMDataBinder {",
                "-    public SCIMGroup toSCIMGroup(final GroupTO groupTO, final String location) {",
                "+    public SCIMGroup toSCIMGroup(",
                "+            final GroupTO groupTO,",
                "+            final String location,",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes) {",
                "+",
                "         SCIMGroup group = new SCIMGroup(",
                "@@ -369,3 +433,3 @@ public class SCIMDataBinder {",
                "                         location),",
                "-                groupTO.getName());",
                "+                output(attributes, excludedAttributes, \"name\", groupTO.getName()));",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "index 11085fbe17..cfb48f94a9 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "@@ -105,3 +105,3 @@ public class SCIMLogic extends AbstractLogic<AbstractBaseBean> {",
                "                         new ConfigurationOption(true),",
                "-                        new BulkConfigurationOption(true, conf.getBulkMaxOperations(), conf.getBulkMaxPayloadSize()),",
                "+                        new BulkConfigurationOption(false, conf.getBulkMaxOperations(), conf.getBulkMaxPayloadSize()),",
                "                         new FilterConfigurationOption(true, conf.getFilterMaxResults()),",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "index 196572ef4c..ac7c0a0069 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "@@ -23,3 +23,2 @@ import javax.ws.rs.Consumes;",
                " import javax.ws.rs.DELETE;",
                "-import javax.ws.rs.GET;",
                " import javax.ws.rs.POST;",
                "@@ -35,3 +34,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                " @Path(\"v2/Groups\")",
                "-public interface GroupService extends SearchService<SCIMGroup> {",
                "+public interface GroupService extends ReadService<SCIMGroup> {",
                "@@ -42,7 +41,2 @@ public interface GroupService extends SearchService<SCIMGroup> {",
                "-    @GET",
                "-    @Path(\"{id}\")",
                "-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    SCIMGroup read(@NotNull @PathParam(\"id\") String id);",
                "-",
                "     @PUT",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/ReadService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/ReadService.java",
                "new file mode 100644",
                "index 0000000000..4762dd3b8a",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/ReadService.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.PathParam;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.QueryParam;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public interface ReadService<R extends SCIMResource> {",
                "+",
                "+    @GET",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    R get(@NotNull @PathParam(\"id\") String id,",
                "+            @QueryParam(\"attributes\") String attributes,",
                "+            @QueryParam(\"excludedAttributes\") String excludedAttributes);",
                "+",
                "+    @GET",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ListResponse<R> search(",
                "+            @QueryParam(\"attributes\") String attributes,",
                "+            @QueryParam(\"excludedAttributes\") String excludedAttributes,",
                "+            @QueryParam(\"filter\") String filter,",
                "+            @QueryParam(\"sortBy\") String sortBy,",
                "+            @QueryParam(\"sortOrder\") SortOrder sortOrder,",
                "+            @QueryParam(\"startIndex\") Integer startIndex,",
                "+            @QueryParam(\"count\") Integer count);",
                "+",
                "+    @POST",
                "+    @Path(\".search\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ListResponse<R> search(SCIMSearchRequest request);",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "index 606474745d..06ad1d5c4e 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "@@ -28,3 +28,2 @@ import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                " import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "-import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                " import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "@@ -32,3 +31,3 @@ import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                " @Path(\"v2\")",
                "-public interface SCIMService extends SearchService<SCIMResource> {",
                "+public interface SCIMService {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "index 1135650e4a..febb5e4c57 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "@@ -23,3 +23,2 @@ import javax.ws.rs.Consumes;",
                " import javax.ws.rs.DELETE;",
                "-import javax.ws.rs.GET;",
                " import javax.ws.rs.POST;",
                "@@ -35,3 +34,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                " @Path(\"v2/Users\")",
                "-public interface UserService extends SearchService<SCIMUser> {",
                "+public interface UserService extends ReadService<SCIMUser> {",
                "@@ -42,7 +41,2 @@ public interface UserService extends SearchService<SCIMUser> {",
                "-    @GET",
                "-    @Path(\"{id}\")",
                "-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    SCIMUser read(@NotNull @PathParam(\"id\") String id);",
                "-",
                "     @PUT",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "index ac3411144e..a28209a3fc 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -43,8 +43,6 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "-import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                " import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.apache.syncope.ext.scimv2.api.service.SearchService;",
                "-abstract class AbstractService<R extends SCIMResource> implements SearchService<R> {",
                "+abstract class AbstractService<R extends SCIMResource> {",
                "@@ -133,3 +131,5 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "                         (UserTO) anyTO,",
                "-                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString(),",
                "+                        request.getAttributes(),",
                "+                        request.getExcludedAttributes());",
                "             } else if (anyTO instanceof GroupTO) {",
                "@@ -137,3 +137,5 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "                         (GroupTO) anyTO,",
                "-                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString(),",
                "+                        request.getAttributes(),",
                "+                        request.getExcludedAttributes());",
                "             }",
                "@@ -148,28 +150,2 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "-    @Override",
                "-    public ListResponse<R> search(",
                "-            final List<String> attributes,",
                "-            final List<String> excludedAttributes,",
                "-            final String filter,",
                "-            final String sortBy,",
                "-            final SortOrder sortOrder,",
                "-            final Integer startIndex,",
                "-            final Integer count) {",
                "-",
                "-        SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);",
                "-        if (attributes != null) {",
                "-            request.getAttributes().addAll(attributes);",
                "-        }",
                "-        if (excludedAttributes != null) {",
                "-            request.getExcludedAttributes().addAll(excludedAttributes);",
                "-        }",
                "-",
                "-        return doSearch(null, request);",
                "-    }",
                "-",
                "-    @Override",
                "-    public ListResponse<R> search(final SCIMSearchRequest request) {",
                "-        return doSearch(null, request);",
                "-    }",
                "-",
                " }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "index fdc47aa7d3..439d250c37 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -20,5 +20,6 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                "-import java.util.List;",
                "-import java.util.UUID;",
                "+import java.util.Arrays;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.commons.lang3.ArrayUtils;",
                "+import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "@@ -34,5 +35,3 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public Response create() {",
                "-        return Response.",
                "-                created(uriInfo.getAbsolutePathBuilder().path(UUID.randomUUID().toString()).build()).",
                "-                build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -40,4 +39,11 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     @Override",
                "-    public SCIMGroup read(final String id) {",
                "-        return binder().toSCIMGroup(groupLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+    public SCIMGroup get(final String id,",
                "+            final String attributes,",
                "+            final String excludedAttributes) {",
                "+",
                "+        return binder().toSCIMGroup(",
                "+                groupLogic().read(id),",
                "+                uriInfo.getAbsolutePathBuilder().build().toASCIIString(),",
                "+                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),",
                "+                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));",
                "     }",
                "@@ -46,3 +52,3 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public Response replace(final String id) {",
                "-        return Response.ok().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -51,3 +57,3 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public Response delete(final String id) {",
                "-        return Response.noContent().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -56,3 +62,3 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public Response update(final String id) {",
                "-        return Response.ok().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -61,4 +67,4 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public ListResponse<SCIMGroup> search(",
                "-            final List<String> attributes,",
                "-            final List<String> excludedAttributes,",
                "+            final String attributes,",
                "+            final String excludedAttributes,",
                "             final String filter,",
                "@@ -71,6 +77,8 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "         if (attributes != null) {",
                "-            request.getAttributes().addAll(attributes);",
                "+            request.getAttributes().addAll(",
                "+                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));",
                "         }",
                "         if (excludedAttributes != null) {",
                "-            request.getExcludedAttributes().addAll(excludedAttributes);",
                "+            request.getExcludedAttributes().addAll(",
                "+                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));",
                "         }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index 0f98362455..6a9078f6e4 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -20,5 +20,6 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                "-import java.util.List;",
                "-import java.util.UUID;",
                "+import java.util.Arrays;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.commons.lang3.ArrayUtils;",
                "+import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "@@ -34,5 +35,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public Response create() {",
                "-        return Response.",
                "-                created(uriInfo.getAbsolutePathBuilder().path(UUID.randomUUID().toString()).build()).",
                "-                build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -40,4 +39,11 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     @Override",
                "-    public SCIMUser read(final String id) {",
                "-        return binder().toSCIMUser(userLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+    public SCIMUser get(final String id,",
                "+            final String attributes,",
                "+            final String excludedAttributes) {",
                "+",
                "+        return binder().toSCIMUser(",
                "+                userLogic().read(id),",
                "+                uriInfo.getAbsolutePathBuilder().build().toASCIIString(),",
                "+                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),",
                "+                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));",
                "     }",
                "@@ -46,3 +52,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public Response replace(final String id) {",
                "-        return Response.ok().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -51,3 +57,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public Response delete(final String id) {",
                "-        return Response.noContent().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -56,3 +62,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public Response update(final String id) {",
                "-        return Response.ok().build();",
                "+        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "     }",
                "@@ -61,4 +67,4 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public ListResponse<SCIMUser> search(",
                "-            final List<String> attributes,",
                "-            final List<String> excludedAttributes,",
                "+            final String attributes,",
                "+            final String excludedAttributes,",
                "             final String filter,",
                "@@ -71,6 +77,8 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "         if (attributes != null) {",
                "-            request.getAttributes().addAll(attributes);",
                "+            request.getAttributes().addAll(",
                "+                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));",
                "         }",
                "         if (excludedAttributes != null) {",
                "-            request.getExcludedAttributes().addAll(excludedAttributes);",
                "+            request.getExcludedAttributes().addAll(",
                "+                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));",
                "         }"
            ],
            "changed_files": [
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/ReadService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "15295e5800c726496f236db2bbf33b00212909b4"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: operation, read",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: read",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d49db50e8708d79244986748c0a06cc17c71266f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511774235,
            "hunks": 56,
            "message": "Bulk upgrade: jackson, elasticsearch, commons-io, commons-codec, swagger-jaxrs, bootstrap-fileinput, pdfbox, greenmail",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java b/client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java",
                "index dad99172e5..f8dc13df20 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java",
                "@@ -64,5 +64,3 @@ public class FilesystemResource extends AbstractResource {",
                "                 public void writeData(final Attributes attributes) throws IOException {",
                "-                    InputStream resourceIS = null;",
                "-                    try {",
                "-                        resourceIS = Files.newInputStream(new File(baseDir, subPath).toPath());",
                "+                    try (InputStream resourceIS = Files.newInputStream(new File(baseDir, subPath).toPath())) {",
                "                         IOUtils.copy(resourceIS, attributes.getResponse().getOutputStream());",
                "@@ -70,4 +68,2 @@ public class FilesystemResource extends AbstractResource {",
                "                         LOG.error(\"Could not read from {}\", baseDir.getAbsolutePath() + subPath, e);",
                "-                    } finally {",
                "-                        IOUtils.closeQuietly(resourceIS);",
                "                     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java",
                "index 778c16b6cd..90e49aedab 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java",
                "@@ -21,6 +21,4 @@ package org.apache.syncope.client.console.wicket.markup.html.form.preview;",
                " import java.io.ByteArrayInputStream;",
                "-import java.security.cert.CertificateException;",
                " import java.security.cert.CertificateFactory;",
                " import java.security.cert.X509Certificate;",
                "-import javax.naming.InvalidNameException;",
                " import javax.naming.ldap.LdapName;",
                "@@ -33,3 +31,2 @@ import org.apache.wicket.markup.html.basic.Label;",
                " import org.apache.wicket.model.Model;",
                "-import org.apache.wicket.util.io.IOUtils;",
                "@@ -46,3 +43,3 @@ public class BinaryCertPreviewer extends AbstractBinaryPreviewer {",
                "     public Component preview(final byte[] uploadedBytes) {",
                "-        Label commonNameLabel = new Label(\"certCommonName\", new Model<String>());",
                "+        Label commonNameLabel = new Label(\"certCommonName\", new Model<>());",
                "         if (uploadedBytes.length == 0) {",
                "@@ -52,4 +49,3 @@ public class BinaryCertPreviewer extends AbstractBinaryPreviewer {",
                "-        ByteArrayInputStream certificateStream = new ByteArrayInputStream(uploadedBytes);",
                "-        try {",
                "+        try (ByteArrayInputStream certificateStream = new ByteArrayInputStream(uploadedBytes)) {",
                "             X509Certificate certificate = (X509Certificate) CertificateFactory.getInstance(\"X.509\").",
                "@@ -69,8 +65,7 @@ public class BinaryCertPreviewer extends AbstractBinaryPreviewer {",
                "             commonNameLabel.setDefaultModelObject(commonNameBuilder.toString());",
                "-        } catch (CertificateException | InvalidNameException e) {",
                "+        } catch (Exception e) {",
                "             LOG.error(\"Error evaluating certificate file\", e);",
                "             commonNameLabel.setDefaultModelObject(getString(Constants.ERROR));",
                "-        } finally {",
                "-            IOUtils.closeQuietly(certificateStream);",
                "         }",
                "+",
                "         return this.addOrReplace(commonNameLabel);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java",
                "index da00856b91..23aa4ef357 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java",
                "@@ -25,2 +25,3 @@ import java.io.ByteArrayInputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -40,3 +41,2 @@ import org.apache.wicket.request.resource.DynamicImageResource;",
                " import org.apache.wicket.request.resource.IResource;",
                "-import org.apache.wicket.util.io.IOUtils;",
                " import org.apache.wicket.util.time.Time;",
                "@@ -64,5 +64,5 @@ public class BinaryPDFPreviewer extends AbstractBinaryPreviewer {",
                "-        PDDocument document = null;",
                "-        try {",
                "-            document = PDDocument.load(new ByteArrayInputStream(uploadedBytes), MemoryUsageSetting.setupTempFileOnly());",
                "+        try (InputStream bais = new ByteArrayInputStream(uploadedBytes);",
                "+                PDDocument document = PDDocument.load(bais, MemoryUsageSetting.setupTempFileOnly())) {",
                "+",
                "             document.setResourceCache(new DefaultResourceCache() {",
                "@@ -81,4 +81,2 @@ public class BinaryPDFPreviewer extends AbstractBinaryPreviewer {",
                "             LOG.error(\"While generating thumbnail from first page\", e);",
                "-        } finally {",
                "-            IOUtils.closeQuietly(document);",
                "         }",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java",
                "index 67b37471ee..534a5373f9 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java",
                "@@ -211,5 +211,5 @@ public class ReportLogic extends AbstractExecutableLogic<ReportTO> {",
                "         // streaming SAX handler from a compressed byte array stream",
                "-        ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());",
                "-        ZipInputStream zis = new ZipInputStream(bais);",
                "-        try {",
                "+        try (ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());",
                "+                ZipInputStream zis = new ZipInputStream(bais)) {",
                "+",
                "             // a single ZipEntry in the ZipInputStream (see ReportJob)",
                "@@ -274,5 +274,2 @@ public class ReportLogic extends AbstractExecutableLogic<ReportTO> {",
                "             LOG.error(\"While exporting content\", e);",
                "-        } finally {",
                "-            IOUtils.closeQuietly(zis);",
                "-            IOUtils.closeQuietly(bais);",
                "         }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "index 8ebea1d2a5..405903341a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "@@ -28,3 +28,2 @@ import javax.xml.parsers.SAXParser;",
                " import javax.xml.parsers.SAXParserFactory;",
                "-import org.apache.commons.io.IOUtils;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -99,5 +98,3 @@ public class XMLContentLoader extends AbstractContentDealer implements ContentLo",
                "         SAXParserFactory factory = SAXParserFactory.newInstance();",
                "-        InputStream in = null;",
                "-        try {",
                "-            in = contentXML.getResource().getInputStream();",
                "+        try (InputStream in = contentXML.getResource().getInputStream()) {",
                "@@ -106,4 +103,2 @@ public class XMLContentLoader extends AbstractContentDealer implements ContentLo",
                "             LOG.debug(\"[{}] Default content successfully loaded\", domain);",
                "-        } finally {",
                "-            IOUtils.closeQuietly(in);",
                "         }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java",
                "index 10a529fe5f..7a9cfc73d5 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java",
                "@@ -33,3 +33,2 @@ import javax.xml.transform.sax.TransformerHandler;",
                " import javax.xml.transform.stream.StreamResult;",
                "-import org.apache.commons.io.IOUtils;",
                " import org.apache.syncope.common.lib.types.ReportExecStatus;",
                "@@ -165,4 +164,4 @@ public class ReportJobDelegate {",
                "                 zos.closeEntry();",
                "-                IOUtils.closeQuietly(zos);",
                "-                IOUtils.closeQuietly(baos);",
                "+                zos.close();",
                "+                baos.close();",
                "             } catch (IOException e) {",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java",
                "index e42190990a..c7191da8aa 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java",
                "@@ -105,9 +105,6 @@ public class WADLServlet extends HttpServlet {",
                "-            InputStream in = new ByteArrayInputStream(wadl.getBytes());",
                "-            OutputStream out = response.getOutputStream();",
                "-            try {",
                "+            try (InputStream in = new ByteArrayInputStream(wadl.getBytes());",
                "+                    OutputStream out = response.getOutputStream()) {",
                "+",
                "                 IOUtils.copy(in, out);",
                "-            } finally {",
                "-                IOUtils.closeQuietly(in);",
                "-                IOUtils.closeQuietly(out);",
                "             }",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "index 9ed57607c7..8c04545c56 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "@@ -58,5 +58,3 @@ public class FlowableDefinitionLoader implements SyncopeLoader {",
                "-        InputStream wfIn = null;",
                "-        try {",
                "-            wfIn = userWorkflowDef.getResource().getInputStream();",
                "+        try (InputStream wfIn = userWorkflowDef.getResource().getInputStream()) {",
                "             wfDef = IOUtils.toByteArray(wfIn);",
                "@@ -64,4 +62,2 @@ public class FlowableDefinitionLoader implements SyncopeLoader {",
                "             LOG.error(\"While loading \" + userWorkflowDef.getResource().getFilename(), e);",
                "-        } finally {",
                "-            IOUtils.closeQuietly(wfIn);",
                "         }",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "index eafc050175..9d0ac9febb 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "@@ -28,3 +28,2 @@ import javax.xml.stream.XMLStreamException;",
                " import javax.xml.stream.XMLStreamReader;",
                "-import org.apache.commons.io.IOUtils;",
                " import org.apache.syncope.core.workflow.api.WorkflowException;",
                "@@ -56,9 +55,7 @@ public final class FlowableDeployUtils {",
                "     public static void deployModel(final ProcessEngine engine, final ProcessDefinition procDef) {",
                "-        InputStream bpmnStream = null;",
                "-        InputStreamReader isr = null;",
                "         XMLStreamReader xtr = null;",
                "-        try {",
                "-            bpmnStream = engine.getRepositoryService().getResourceAsStream(",
                "-                    procDef.getDeploymentId(), procDef.getResourceName());",
                "-            isr = new InputStreamReader(bpmnStream);",
                "+        try (InputStream bpmnStream = engine.getRepositoryService().",
                "+                getResourceAsStream(procDef.getDeploymentId(), procDef.getResourceName());",
                "+                InputStreamReader isr = new InputStreamReader(bpmnStream)) {",
                "+",
                "             xtr = XMLInputFactory.newInstance().createXMLStreamReader(isr);",
                "@@ -88,4 +85,2 @@ public final class FlowableDeployUtils {",
                "             }",
                "-            IOUtils.closeQuietly(isr);",
                "-            IOUtils.closeQuietly(bpmnStream);",
                "         }",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "index 22af44293c..69c1b30ddc 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "@@ -870,5 +870,3 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "     protected void exportProcessResource(final String deploymentId, final String resourceName, final OutputStream os) {",
                "-        InputStream procDefIS = engine.getRepositoryService().",
                "-                getResourceAsStream(deploymentId, resourceName);",
                "-        try {",
                "+        try (InputStream procDefIS = engine.getRepositoryService().getResourceAsStream(deploymentId, resourceName)) {",
                "             IOUtils.copy(procDefIS, os);",
                "@@ -876,4 +874,2 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "             LOG.error(\"While exporting {}\", resourceName, e);",
                "-        } finally {",
                "-            IOUtils.closeQuietly(procDefIS);",
                "         }",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java",
                "index 222f547f9d..ff3aae0c74 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java",
                "@@ -94,5 +94,3 @@ public class SyncopeCamelContext {",
                "             for (String route : routes) {",
                "-                InputStream input = null;",
                "-                try {",
                "-                    input = IOUtils.toInputStream(route, StandardCharsets.UTF_8);",
                "+                try (InputStream input = IOUtils.toInputStream(route, StandardCharsets.UTF_8)) {",
                "                     LSInput lsinput = domImpl.createLSInput();",
                "@@ -102,4 +100,2 @@ public class SyncopeCamelContext {",
                "                     routeDefs.add(unmarshaller.unmarshal(routeElement, RouteDefinition.class).getValue());",
                "-                } finally {",
                "-                    IOUtils.closeQuietly(input);",
                "                 }",
                "diff --git a/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java b/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java",
                "index e4a30f96ee..dbba1d856c 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java",
                "+++ b/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java",
                "@@ -24,3 +24,3 @@ import org.elasticsearch.client.Client;",
                " import org.elasticsearch.common.settings.Settings;",
                "-import org.elasticsearch.common.transport.InetSocketTransportAddress;",
                "+import org.elasticsearch.common.transport.TransportAddress;",
                " import org.elasticsearch.transport.client.PreBuiltTransportClient;",
                "@@ -56,3 +56,3 @@ public class ElasticsearchClientFactoryBean implements FactoryBean<Client>, Disp",
                "                     tClient.addTransportAddress(",
                "-                            new InetSocketTransportAddress(InetAddress.getByName(entry.getKey()), entry.getValue()));",
                "+                            new TransportAddress(InetAddress.getByName(entry.getKey()), entry.getValue()));",
                "                 }",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index f6aa1c5307..9f0d783a49 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -114,7 +114,2 @@ under the License.",
                "-    <dependency>",
                "-      <groupId>commons-io</groupId>",
                "-      <artifactId>commons-io</artifactId>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/LdifInputStreamLoader.java b/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/LdifInputStreamLoader.java",
                "index 135c341683..460b23f905 100644",
                "--- a/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/LdifInputStreamLoader.java",
                "+++ b/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/LdifInputStreamLoader.java",
                "@@ -22,3 +22,2 @@ import java.io.InputStream;",
                " import java.util.List;",
                "-import org.apache.commons.io.IOUtils;",
                " import org.apache.directory.api.ldap.model.entry.DefaultEntry;",
                "@@ -122,3 +121,3 @@ public class LdifInputStreamLoader {",
                "             } finally {",
                "-                IOUtils.closeQuietly(ldif);",
                "+                ldif.close();",
                "             }",
                "diff --git a/installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java b/installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java",
                "index 6c691ccab6..07e33e3755 100644",
                "--- a/installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java",
                "+++ b/installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java",
                "@@ -24,3 +24,2 @@ import java.io.InputStream;",
                " import java.util.Properties;",
                "-import org.apache.commons.io.IOUtils;",
                "@@ -33,5 +32,3 @@ public abstract class BaseProcess {",
                "     static {",
                "-        InputStream input = null;",
                "-        try {",
                "-            input = BaseProcess.class.getResourceAsStream(\"/installer.properties\");",
                "+        try (InputStream input = BaseProcess.class.getResourceAsStream(\"/installer.properties\")) {",
                "             PROPERTIES.load(input);",
                "@@ -39,4 +36,2 @@ public abstract class BaseProcess {",
                "             // ignore",
                "-        } finally {",
                "-            IOUtils.closeQuietly(input);",
                "         }",
                "diff --git a/installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java b/installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java",
                "index c8b70e1062..f84538b61e 100644",
                "--- a/installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java",
                "+++ b/installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java",
                "@@ -39,3 +39,2 @@ import javax.xml.transform.stream.StreamResult;",
                " import org.apache.commons.io.FileUtils;",
                "-import org.apache.commons.io.IOUtils;",
                " import org.w3c.dom.Document;",
                "@@ -137,16 +136,13 @@ public class FileSystemUtils {",
                "     public static void writeXML(final Document doc, final OutputStream out) throws IOException, TransformerException {",
                "-        try {",
                "-            final TransformerFactory factory = TransformerFactory.newInstance();",
                "-            factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "-            final Transformer transformer = factory.newTransformer();",
                "-            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");",
                "-            transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");",
                "-            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");",
                "-            transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");",
                "-            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");",
                "-            transformer.transform(new DOMSource(doc),",
                "-                    new StreamResult(new OutputStreamWriter(out, Charset.forName(\"UTF-8\"))));",
                "-        } finally {",
                "-            IOUtils.closeQuietly(out);",
                "-        }",
                "+        final TransformerFactory factory = TransformerFactory.newInstance();",
                "+        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "+        final Transformer transformer = factory.newTransformer();",
                "+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");",
                "+        transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");",
                "+        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");",
                "+        transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");",
                "+        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");",
                "+        transformer.transform(new DOMSource(doc),",
                "+                new StreamResult(new OutputStreamWriter(out, Charset.forName(\"UTF-8\"))));",
                "+        out.close();",
                "     }",
                "diff --git a/pom.xml b/pom.xml",
                "index 25b1cbe273..a9ea33b267 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -369,3 +369,3 @@ under the License.",
                "-    <jackson.version>2.9.1</jackson.version>",
                "+    <jackson.version>2.9.2</jackson.version>",
                "@@ -375,3 +375,3 @@ under the License.",
                "     <openjpa.version>3.0.0-SNAPSHOT</openjpa.version>",
                "-    <hikaricp.version>2.7.2</hikaricp.version>",
                "+    <hikaricp.version>2.7.4</hikaricp.version>",
                "     <bval.version>1.1.2</bval.version>",
                "@@ -388,3 +388,3 @@ under the License.",
                "-    <camel.version>2.19.3</camel.version>\t",
                "+    <camel.version>2.20.1</camel.version>\t",
                "@@ -393,3 +393,3 @@ under the License.",
                "-    <elasticsearch.version>5.6.2</elasticsearch.version>",
                "+    <elasticsearch.version>6.0.0</elasticsearch.version>",
                "@@ -398,3 +398,3 @@ under the License.",
                "-    <commons-io.version>2.5</commons-io.version>",
                "+    <commons-io.version>2.6</commons-io.version>",
                "     <commons-email.version>1.5</commons-email.version>",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <swagger-core.version>1.5.16</swagger-core.version>    ",
                "+    <swagger-core.version>1.5.17</swagger-core.version>    ",
                "     <swagger-ui.version>2.2.10</swagger-ui.version>",
                "@@ -428,3 +428,3 @@ under the License.",
                "     <bootstrap-select.version>1.12.2</bootstrap-select.version>",
                "-    <bootstrap-fileinput.version>4.4.2</bootstrap-fileinput.version>",
                "+    <bootstrap-fileinput.version>4.4.6</bootstrap-fileinput.version>",
                "     <bootbox.version>4.4.0</bootbox.version>",
                "@@ -1242,3 +1242,3 @@ under the License.",
                "         <artifactId>pdfbox</artifactId>",
                "-        <version>2.0.7</version>",
                "+        <version>2.0.8</version>",
                "       </dependency>",
                "@@ -1589,3 +1589,3 @@ under the License.",
                "         <artifactId>greenmail</artifactId>",
                "-        <version>1.5.5</version>",
                "+        <version>1.5.6</version>",
                "         <scope>test</scope>",
                "@@ -2218,15 +2218,15 @@ under the License.",
                "             <link>http://cxf.apache.org/javadoc/latest-3.2.x/</link>",
                "-            <link>http://fasterxml.github.io/jackson-core/javadoc/2.8/</link>",
                "-            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.8/</link>",
                "-            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.8/</link>",
                "-            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.8/</link>",
                "-            <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.8/</link>",
                "-            <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.8/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.18.3/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.18.3/</link>",
                "-            <link>https://ci.apache.org/projects/wicket/apidocs/7.x/</link>",
                "+            <link>http://fasterxml.github.io/jackson-core/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.9/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.20.1/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.20.1/</link>",
                "+            <link>https://ci.apache.org/projects/wicket/apidocs/8.x/</link>",
                "             <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>",
                "-            <link>https://commons.apache.org/proper/commons-io/javadocs/api-2.5/</link>",
                "+            <link>https://commons.apache.org/proper/commons-io/javadocs/api-2.6/</link>",
                "             <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>",
                "-            <link>http://docs.spring.io/spring/docs/4.3.x/javadoc-api/</link>",
                "+            <link>http://docs.spring.io/spring/docs/5.0.x/javadoc-api/</link>",
                "             <link>http://docs.spring.io/spring-security/site/docs/4.2.x/apidocs/</link>",
                "@@ -2235,3 +2235,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/service/local/repositories/releases/archive/org/opensaml/opensaml-core/3.3.0/opensaml-core-3.3.0-javadoc.jar/!/index.html</link>",
                "-            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.2</link>",
                "+            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/6.0.0</link>",
                "           </links>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java",
                "ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java",
                "fit/build-tools/pom.xml",
                "fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/LdifInputStreamLoader.java",
                "installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java",
                "installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "96219beddba40c8cf33a009d24cfea5ef13d7aca"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "31f14930a922767739bda12d46c96bc4962e3977",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511261933,
            "hunks": 29,
            "message": "JEXL: various enhancements and cleanup, especially for templates",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java",
                "index 91b4742f13..67c34398cc 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java",
                "@@ -27,2 +27,3 @@ import org.apache.syncope.common.lib.to.AnyTO;",
                " import org.apache.syncope.common.lib.to.EntityTO;",
                "+import org.apache.syncope.common.lib.to.RealmTO;",
                " import org.apache.syncope.core.persistence.api.entity.Any;",
                "@@ -89,6 +90,12 @@ public class JEXLItemTransformerImpl implements JEXLItemTransformer {",
                "                 if (entityTO instanceof AnyTO) {",
                "-                    newValues.add(JexlUtils.evaluate(pullJEXL, (AnyTO) entityTO, jexlContext));",
                "-                } else {",
                "+                    JexlUtils.addFieldsToContext((AnyTO) entityTO, jexlContext);",
                "+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getPlainAttrs(), jexlContext);",
                "+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getDerAttrs(), jexlContext);",
                "+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getVirAttrs(), jexlContext);",
                "+                } else if (entityTO instanceof RealmTO) {",
                "+                    JexlUtils.addFieldsToContext((RealmTO) entityTO, jexlContext);",
                "                     newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));",
                "                 }",
                "+",
                "+                newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));",
                "             });",
                "@@ -98,3 +105,3 @@ public class JEXLItemTransformerImpl implements JEXLItemTransformer {",
                "-        return values;",
                "+        return JEXLItemTransformer.super.beforePull(item, entityTO, values);",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "index 62587e170a..11090701b0 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "@@ -27,4 +27,7 @@ import java.util.Collections;",
                " import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import org.apache.commons.jexl3.JexlBuilder;",
                "@@ -39,2 +42,4 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.common.lib.to.AnyTO;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.RealmTO;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -58,2 +63,6 @@ public final class JexlUtils {",
                "+    private static final Map<Class<?>, Set<PropertyDescriptor>> FIELD_CACHE =",
                "+            Collections.<Class<?>, Set<PropertyDescriptor>>synchronizedMap(",
                "+                    new HashMap<Class<?>, Set<PropertyDescriptor>>());",
                "+",
                "     private static JexlEngine JEXL_ENGINE;",
                "@@ -114,52 +123,73 @@ public final class JexlUtils {",
                "-    public static JexlContext addFieldsToContext(final Object object, final JexlContext jexlContext) {",
                "-        JexlContext context = jexlContext == null ? new MapContext() : jexlContext;",
                "+    public static void addFieldsToContext(final Object object, final JexlContext jexlContext) {",
                "+        Set<PropertyDescriptor> cached = FIELD_CACHE.get(object.getClass());",
                "+        if (cached == null) {",
                "+            cached = new HashSet<>();",
                "+            FIELD_CACHE.put(object.getClass(), cached);",
                "-        try {",
                "-            for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {",
                "-                Class<?> type = desc.getPropertyType();",
                "-                String fieldName = desc.getName();",
                "-",
                "-                if ((!fieldName.startsWith(\"pc\"))",
                "-                        && (!ArrayUtils.contains(IGNORE_FIELDS, fieldName))",
                "-                        && (!Iterable.class.isAssignableFrom(type))",
                "-                        && (!type.isArray())) {",
                "-",
                "-                    try {",
                "-                        Object fieldValue;",
                "-                        if (desc.getReadMethod() == null) {",
                "-                            final Field field = object.getClass().getDeclaredField(fieldName);",
                "-                            field.setAccessible(true);",
                "-                            fieldValue = field.get(object);",
                "-                        } else {",
                "-                            fieldValue = desc.getReadMethod().invoke(object);",
                "-                        }",
                "-",
                "-                        context.set(fieldName, fieldValue == null",
                "-                                ? StringUtils.EMPTY",
                "-                                : (type.equals(Date.class)",
                "-                                ? FormatUtils.format((Date) fieldValue, false)",
                "-                                : fieldValue));",
                "-",
                "-                        LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);",
                "-                    } catch (Exception iae) {",
                "-                        LOG.error(\"Reading '{}' value error\", fieldName, iae);",
                "+            try {",
                "+                for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {",
                "+                    if ((!desc.getName().startsWith(\"pc\"))",
                "+                            && (!ArrayUtils.contains(IGNORE_FIELDS, desc.getName()))",
                "+                            && (!Iterable.class.isAssignableFrom(desc.getPropertyType()))",
                "+                            && (!desc.getPropertyType().isArray())) {",
                "+",
                "+                        cached.add(desc);",
                "                     }",
                "                 }",
                "+            } catch (IntrospectionException ie) {",
                "+                LOG.error(\"Reading class attributes error\", ie);",
                "             }",
                "-        } catch (IntrospectionException ie) {",
                "-            LOG.error(\"Reading class attributes error\", ie);",
                "         }",
                "-        if (object instanceof Any) {",
                "-            Any<?> any = (Any<?>) object;",
                "-            if (any.getRealm() != null) {",
                "-                context.set(\"realm\", any.getRealm().getFullPath());",
                "+        for (PropertyDescriptor desc : cached) {",
                "+            String fieldName = desc.getName();",
                "+            Class<?> fieldType = desc.getPropertyType();",
                "+",
                "+            try {",
                "+                Object fieldValue;",
                "+                if (desc.getReadMethod() == null) {",
                "+                    final Field field = object.getClass().getDeclaredField(fieldName);",
                "+                    field.setAccessible(true);",
                "+                    fieldValue = field.get(object);",
                "+                } else {",
                "+                    fieldValue = desc.getReadMethod().invoke(object);",
                "+                }",
                "+                fieldValue = fieldValue == null",
                "+                        ? StringUtils.EMPTY",
                "+                        : (fieldType.equals(Date.class)",
                "+                        ? FormatUtils.format((Date) fieldValue, false)",
                "+                        : fieldValue);",
                "+",
                "+                jexlContext.set(fieldName, fieldValue);",
                "+",
                "+                LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);",
                "+            } catch (Exception iae) {",
                "+                LOG.error(\"Reading '{}' value error\", fieldName, iae);",
                "             }",
                "+        }",
                "+",
                "+        if (object instanceof Any && ((Any<?>) object).getRealm() != null) {",
                "+            jexlContext.set(\"realm\", ((Any<?>) object).getRealm().getFullPath());",
                "+        } else if (object instanceof AnyTO && ((AnyTO) object).getRealm() != null) {",
                "+            jexlContext.set(\"realm\", ((AnyTO) object).getRealm());",
                "         } else if (object instanceof Realm) {",
                "-            Realm realm = (Realm) object;",
                "-            context.set(\"fullPath\", realm.getFullPath());",
                "+            jexlContext.set(\"fullPath\", ((Realm) object).getFullPath());",
                "+        } else if (object instanceof RealmTO) {",
                "+            jexlContext.set(\"fullPath\", ((RealmTO) object).getFullPath());",
                "         }",
                "+    }",
                "-        return context;",
                "+    public static void addAttrTOsToContext(final Collection<AttrTO> attrs, final JexlContext jexlContext) {",
                "+        for (AttrTO attr : attrs) {",
                "+            if (attr.getSchema() != null) {",
                "+                String expressionValue = attr.getValues().isEmpty()",
                "+                        ? StringUtils.EMPTY",
                "+                        : attr.getValues().get(0);",
                "+",
                "+                LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);",
                "+",
                "+                jexlContext.set(attr.getSchema(), expressionValue);",
                "+            }",
                "+        }",
                "     }",
                "@@ -198,40 +228,2 @@ public final class JexlUtils {",
                "-    public static String evaluate(final String expression, final AnyTO anyTO, final JexlContext context) {",
                "-        addFieldsToContext(anyTO, context);",
                "-",
                "-        anyTO.getPlainAttrs().forEach(plainAttr -> {",
                "-            List<String> values = plainAttr.getValues();",
                "-            String expressionValue = values.isEmpty()",
                "-                    ? StringUtils.EMPTY",
                "-                    : values.get(0);",
                "-",
                "-            LOG.debug(\"Add plain attribute {} with value {}\", plainAttr.getSchema(), expressionValue);",
                "-",
                "-            context.set(plainAttr.getSchema(), expressionValue);",
                "-        });",
                "-        anyTO.getDerAttrs().forEach(derAttr -> {",
                "-            List<String> values = derAttr.getValues();",
                "-            String expressionValue = values.isEmpty()",
                "-                    ? StringUtils.EMPTY",
                "-                    : values.get(0);",
                "-",
                "-            LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getSchema(), expressionValue);",
                "-",
                "-            context.set(derAttr.getSchema(), expressionValue);",
                "-        });",
                "-        anyTO.getVirAttrs().forEach(virAttr -> {",
                "-            List<String> values = virAttr.getValues();",
                "-            String expressionValue = values.isEmpty()",
                "-                    ? StringUtils.EMPTY",
                "-                    : values.get(0);",
                "-",
                "-            LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema(), expressionValue);",
                "-",
                "-            context.set(virAttr.getSchema(), expressionValue);",
                "-        });",
                "-",
                "-        // Evaluate expression using the context prepared before",
                "-        return evaluate(expression, context);",
                "-    }",
                "-",
                "     /**",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "index 9041b10643..d8624e3031 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "@@ -80,3 +80,3 @@ public final class MappingUtils {",
                "-    private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {",
                "+    private static Name getName(final String evalConnObjectLink, final String connObjectKey) {",
                "         // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),",
                "@@ -128,3 +128,3 @@ public final class MappingUtils {",
                "-        return evaluateNAME(evalConnObjectLink, connObjectKey);",
                "+        return getName(evalConnObjectLink, connObjectKey);",
                "     }",
                "@@ -158,3 +158,3 @@ public final class MappingUtils {",
                "-        return evaluateNAME(evalConnObjectLink, connObjectKey);",
                "+        return getName(evalConnObjectLink, connObjectKey);",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "index 5c69268a3c..4c07bd99fa 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "@@ -52,3 +52,3 @@ public class TemplateUtils {",
                "-    private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {",
                "+    private AttrTO evaluateAttr(final AttrTO template, final MapContext jexlContext) {",
                "         AttrTO result = new AttrTO();",
                "@@ -58,3 +58,3 @@ public class TemplateUtils {",
                "             template.getValues().forEach(value -> {",
                "-                String evaluated = JexlUtils.evaluate(value, anyTO, new MapContext());",
                "+                String evaluated = JexlUtils.evaluate(value, jexlContext);",
                "                 if (StringUtils.isNotBlank(evaluated)) {",
                "@@ -69,4 +69,10 @@ public class TemplateUtils {",
                "     private void fill(final AnyTO anyTO, final AnyTO template) {",
                "+        MapContext jexlContext = new MapContext();",
                "+        JexlUtils.addFieldsToContext(anyTO, jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getDerAttrs(), jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getVirAttrs(), jexlContext);",
                "+",
                "         if (template.getRealm() != null) {",
                "-            String evaluated = JexlUtils.evaluate(template.getRealm(), anyTO, new MapContext());",
                "+            String evaluated = JexlUtils.evaluate(template.getRealm(), jexlContext);",
                "             if (StringUtils.isNotBlank(evaluated)) {",
                "@@ -82,3 +88,7 @@ public class TemplateUtils {",
                "-                anyTO.getPlainAttrs().add(evaluateAttr(anyTO, templatePlainAttr));",
                "+                AttrTO evaluated = evaluateAttr(templatePlainAttr, jexlContext);",
                "+                if (!evaluated.getValues().isEmpty()) {",
                "+                    anyTO.getPlainAttrs().add(evaluated);",
                "+                    jexlContext.set(evaluated.getSchema(), evaluated.getValues().get(0));",
                "+                }",
                "             }",
                "@@ -99,3 +109,7 @@ public class TemplateUtils {",
                "-                anyTO.getVirAttrs().add(evaluateAttr(anyTO, templateVirAttr));",
                "+                AttrTO evaluated = evaluateAttr(templateVirAttr, jexlContext);",
                "+                if (!evaluated.getValues().isEmpty()) {",
                "+                    anyTO.getVirAttrs().add(evaluated);",
                "+                    jexlContext.set(evaluated.getSchema(), evaluated.getValues().get(0));",
                "+                }",
                "             }",
                "@@ -136,2 +150,8 @@ public class TemplateUtils {",
                "+        MapContext jexlContext = new MapContext();",
                "+        JexlUtils.addFieldsToContext(anyTO, jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getDerAttrs(), jexlContext);",
                "+        JexlUtils.addAttrTOsToContext(anyTO.getVirAttrs(), jexlContext);",
                "+",
                "         if (template instanceof AnyObjectTO) {",
                "@@ -141,3 +161,3 @@ public class TemplateUtils {",
                "             if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {",
                "-                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO, new MapContext());",
                "+                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), jexlContext);",
                "                 if (StringUtils.isNotBlank(evaluated)) {",
                "@@ -148,3 +168,3 @@ public class TemplateUtils {",
                "             if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {",
                "-                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO, new MapContext());",
                "+                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), jexlContext);",
                "                 if (StringUtils.isNotBlank(evaluated)) {",
                "@@ -158,3 +178,3 @@ public class TemplateUtils {",
                "             if (StringUtils.isNotBlank(((GroupTO) template).getName())) {",
                "-                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO, new MapContext());",
                "+                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext);",
                "                 if (StringUtils.isNotBlank(evaluated)) {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "48ae5566d10cc5678a0de6606c4693aeb7f32359"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: template",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: template",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1aa7bcaff595e65abb42c9e9397fa2feec083e21",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510674865,
            "hunks": 84,
            "message": "[SYNCOPE-152] SCIM configuration including attribute mapping + console extension",
            "diff": [
                "diff --git a/archetype/src/main/resources/archetype-resources/console/pom.xml b/archetype/src/main/resources/archetype-resources/console/pom.xml",
                "index 2006755846..8506fa9f00 100644",
                "--- a/archetype/src/main/resources/archetype-resources/console/pom.xml",
                "+++ b/archetype/src/main/resources/archetype-resources/console/pom.xml",
                "@@ -142,2 +142,8 @@ under the License.",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+          <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "+          <version>${syncope.version}</version>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "diff --git a/archetype/src/main/resources/archetype-resources/core/pom.xml b/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "index f4ea761f7b..69c36c4693 100644",
                "--- a/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "+++ b/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "@@ -194,2 +194,13 @@ under the License.",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+          <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+          <version>${project.version}</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+          <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+          <version>${project.version}</version>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "index ab2eec8f07..2826bb7c2c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "@@ -102,3 +102,3 @@ public class ParametersDirectoryPanel",
                "         });",
                "-",
                "+        modalDetails.size(Modal.Size.Medium);",
                "         addInnerObject(modalDetails);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "index 2231bdfdbe..d382c7b0f7 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "@@ -226,3 +226,3 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "                         } catch (Exception e) {",
                "-                            LOG.error(\"While updating onsole layout info for role {}\", info.getKey(), e);",
                "+                            LOG.error(\"While updating console layout info for role {}\", info.getKey(), e);",
                "                             SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "new file mode 100644",
                "index 0000000000..278072ead6",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -0,0 +1,78 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 Client Console</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 Client Console</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>javax.servlet</groupId>",
                "+      <artifactId>javax.servlet-api</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-common-lib</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.client</groupId>",
                "+      <artifactId>syncope-client-console</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+    ",
                "+    <resources>",
                "+      <resource>",
                "+        <directory>src/main/resources</directory>",
                "+        <filtering>true</filtering>",
                "+      </resource>",
                "+    </resources>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConf.java b/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConf.java",
                "new file mode 100644",
                "index 0000000000..bd22f03b7f",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConf.java",
                "@@ -0,0 +1,137 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.pages;",
                "+",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.annotations.ExtPage;",
                "+import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.rest.SCIMConfRestClient;",
                "+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.JsonEditorPanel;",
                "+import org.apache.syncope.common.lib.scim.SCIMComplexConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMEnterpriseUserConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMUserConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMUserNameConf;",
                "+import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;",
                "+import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.markup.html.AjaxLink;",
                "+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;",
                "+import org.apache.wicket.markup.html.WebMarkupContainer;",
                "+import org.apache.wicket.markup.html.form.Form;",
                "+import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+import org.apache.wicket.request.mapper.parameter.PageParameters;",
                "+",
                "+@ExtPage(label = \"SCIM 2.0\", icon = \"fa-cloud\", listEntitlement = SCIMEntitlement.SCIM_CONF_GET, priority = 100)",
                "+public class SCIMConf extends BaseExtPage {",
                "+",
                "+    private static final long serialVersionUID = 9128779230455599119L;",
                "+",
                "+    private static final ObjectMapper MAPPER = new ObjectMapper();",
                "+",
                "+    private final SCIMConfRestClient restClient = new SCIMConfRestClient();",
                "+",
                "+    public SCIMConf(final PageParameters parameters) {",
                "+        super(parameters);",
                "+",
                "+        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));",
                "+",
                "+        final BaseModal<String> modal = new BaseModal<>(\"modal\");",
                "+        modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {",
                "+",
                "+            private static final long serialVersionUID = 8804221891699487139L;",
                "+",
                "+            @Override",
                "+            public void onClose(final AjaxRequestTarget target) {",
                "+                modal.show(false);",
                "+            }",
                "+        });",
                "+        modal.size(Modal.Size.Large);",
                "+        modal.addSubmitButton();",
                "+        body.add(modal);",
                "+",
                "+        WebMarkupContainer content = new WebMarkupContainer(\"content\");",
                "+        content.setOutputMarkupId(true);",
                "+        body.add(content);",
                "+",
                "+        String confString = \"\";",
                "+        try {",
                "+            org.apache.syncope.common.lib.scim.SCIMConf conf = restClient.get();",
                "+            if (conf.getUserConf() == null) {",
                "+                conf.setUserConf(new SCIMUserConf());",
                "+            }",
                "+            if (conf.getUserConf().getName() == null) {",
                "+                conf.getUserConf().setName(new SCIMUserNameConf());",
                "+            }",
                "+            if (conf.getUserConf().getEmails().isEmpty()) {",
                "+                conf.getUserConf().getEmails().add(new SCIMComplexConf<EmailCanonicalType>());",
                "+            }",
                "+",
                "+            if (conf.getEnterpriseUserConf() == null) {",
                "+                conf.setEnterpriseUserConf(new SCIMEnterpriseUserConf());",
                "+            }",
                "+",
                "+            confString = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(conf);",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"While reading SCIM configuration\", e);",
                "+            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())",
                "+                    ? e.getClass().getName() : e.getMessage());",
                "+        }",
                "+        final Model<String> confModel = Model.of(confString);",
                "+",
                "+        content.add(new AjaxLink<Void>(\"edit\") {",
                "+",
                "+            private static final long serialVersionUID = -4331619903296515985L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target) {",
                "+                modal.header(new ResourceModel(\"editConf\"));",
                "+                modal.setContent(new JsonEditorPanel(modal, confModel, false, getPageReference()) {",
                "+",
                "+                    private static final long serialVersionUID = -8927036362466990179L;",
                "+",
                "+                    @Override",
                "+                    public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {",
                "+                        try {",
                "+                            restClient.set(MAPPER.readValue(",
                "+                                    confModel.getObject(), org.apache.syncope.common.lib.scim.SCIMConf.class));",
                "+",
                "+                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+                            modal.show(false);",
                "+                            modal.close(target);",
                "+                        } catch (Exception e) {",
                "+                            LOG.error(\"While setting SCIM configuration\", e);",
                "+                            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())",
                "+                                    ? e.getClass().getName() : e.getMessage());",
                "+                        }",
                "+                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+                    }",
                "+                });",
                "+                modal.show(true);",
                "+                target.add(modal);",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/rest/SCIMConfRestClient.java b/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/rest/SCIMConfRestClient.java",
                "new file mode 100644",
                "index 0000000000..95ae663030",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/rest/SCIMConfRestClient.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.rest;",
                "+",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.rest.api.service.SCIMConfService;",
                "+",
                "+public class SCIMConfRestClient extends BaseRestClient {",
                "+",
                "+    private static final long serialVersionUID = -8572714521320571470L;",
                "+",
                "+    public SCIMConf get() {",
                "+        return getService(SCIMConfService.class).get();",
                "+    }",
                "+",
                "+    public void set(final SCIMConf conf) {",
                "+        getService(SCIMConfService.class).set(conf);",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.html b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.html",
                "new file mode 100644",
                "index 0000000000..aa1e725ae7",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.html",
                "@@ -0,0 +1,41 @@",
                "+<!DOCTYPE html>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:extend>",
                "+    <section class=\"content-header\">",
                "+      <h1>&nbsp;</h1>",
                "+      <ol class=\"breadcrumb\">",
                "+        <li><a wicket:id=\"dashboardBr\"><i class=\"fa fa-dashboard\"></i> <wicket:message key=\"dashboard\"/></a></li>",
                "+        <li class=\"active\"><wicket:message key=\"extensions\"/></li>",
                "+        <li class=\"active\">SCIM 2.0</li>",
                "+      </ol>",
                "+    </section>",
                "+",
                "+    <section class=\"content\" wicket:id=\"content\">",
                "+      <div class=\"logviewer-btn\">",
                "+        <a class=\"btn btn-primary\" wicket:id=\"edit\"> <wicket:message key=\"editConf\"/>",
                "+          <span class=\"fa fa-edit\"></span>",
                "+        </a>",
                "+      </div>",
                "+    </section>",
                "+",
                "+    <div wicket:id=\"modal\"/>",
                "+  </wicket:extend>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.properties b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.properties",
                "new file mode 100644",
                "index 0000000000..e7f31e6f7c",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+editConf=SCIM 2.0 configuration",
                "diff --git a/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_it.properties b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_it.properties",
                "new file mode 100644",
                "index 0000000000..3655a0f529",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_it.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+editConf=Configurazione SCIM 2.0",
                "diff --git a/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_pt_BR.properties b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..e7f31e6f7c",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_pt_BR.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+editConf=SCIM 2.0 configuration",
                "diff --git a/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_ru.properties b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_ru.properties",
                "new file mode 100644",
                "index 0000000000..e7f31e6f7c",
                "--- /dev/null",
                "+++ b/ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_ru.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+editConf=SCIM 2.0 configuration",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "new file mode 100644",
                "index 0000000000..285a7982d4",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -0,0 +1,56 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 Common Lib</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 Common Lib</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-common-lib</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.common</groupId>",
                "+      <artifactId>syncope-common-lib</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMComplexConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMComplexConf.java",
                "new file mode 100644",
                "index 0000000000..84cb3faaca",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMComplexConf.java",
                "@@ -0,0 +1,67 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public class SCIMComplexConf<E extends Enum<?>> implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -6205072829179565927L;",
                "+",
                "+    private String value;",
                "+",
                "+    private String display;",
                "+",
                "+    private E type;",
                "+",
                "+    private boolean primary;",
                "+",
                "+    public String getValue() {",
                "+        return value;",
                "+    }",
                "+",
                "+    public void setValue(final String value) {",
                "+        this.value = value;",
                "+    }",
                "+",
                "+    public String getDisplay() {",
                "+        return display;",
                "+    }",
                "+",
                "+    public void setDisplay(final String display) {",
                "+        this.display = display;",
                "+    }",
                "+",
                "+    public E getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void setType(final E type) {",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    public boolean isPrimary() {",
                "+        return primary;",
                "+    }",
                "+",
                "+    public void setPrimary(final boolean primary) {",
                "+        this.primary = primary;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java",
                "new file mode 100644",
                "index 0000000000..e7cc2a4f69",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java",
                "@@ -0,0 +1,126 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import java.io.Serializable;",
                "+import java.util.Date;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+",
                "+public class SCIMConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 5032136914118958611L;",
                "+",
                "+    public static final String KEY = \"scimv2.conf\";",
                "+",
                "+    private Date creationDate = new Date();",
                "+",
                "+    private Date lastChangeDate = new Date();",
                "+",
                "+    private int bulkMaxOperations = 1000;",
                "+",
                "+    private int bulkMaxPayloadSize = 1048576;",
                "+",
                "+    private int filterMaxResults = 200;",
                "+",
                "+    private SCIMUserConf userConf;",
                "+",
                "+    private SCIMEnterpriseUserConf enterpriseUserConf;",
                "+",
                "+    public Date getCreationDate() {",
                "+        if (creationDate != null) {",
                "+            return new Date(creationDate.getTime());",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public void setCreationDate(final Date creationDate) {",
                "+        if (creationDate != null) {",
                "+            this.creationDate = new Date(creationDate.getTime());",
                "+        } else {",
                "+            this.creationDate = null;",
                "+        }",
                "+    }",
                "+",
                "+    public Date getLastChangeDate() {",
                "+        if (lastChangeDate != null) {",
                "+            return new Date(lastChangeDate.getTime());",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public void setLastChangeDate(final Date lastChangeDate) {",
                "+        if (lastChangeDate != null) {",
                "+            this.lastChangeDate = new Date(lastChangeDate.getTime());",
                "+        } else {",
                "+            this.lastChangeDate = null;",
                "+        }",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public String getETagValue() {",
                "+        Date etagDate = getLastChangeDate() == null",
                "+                ? getCreationDate() : getLastChangeDate();",
                "+        return etagDate == null",
                "+                ? StringUtils.EMPTY",
                "+                : String.valueOf(etagDate.getTime());",
                "+",
                "+    }",
                "+",
                "+    public int getBulkMaxOperations() {",
                "+        return bulkMaxOperations;",
                "+    }",
                "+",
                "+    public void setBulkMaxOperations(final int bulkMaxOperations) {",
                "+        this.bulkMaxOperations = bulkMaxOperations;",
                "+    }",
                "+",
                "+    public int getBulkMaxPayloadSize() {",
                "+        return bulkMaxPayloadSize;",
                "+    }",
                "+",
                "+    public void setBulkMaxPayloadSize(final int bulkMaxPayloadSize) {",
                "+        this.bulkMaxPayloadSize = bulkMaxPayloadSize;",
                "+    }",
                "+",
                "+    public int getFilterMaxResults() {",
                "+        return filterMaxResults;",
                "+    }",
                "+",
                "+    public void setFilterMaxResults(final int filterMaxResults) {",
                "+        this.filterMaxResults = filterMaxResults;",
                "+    }",
                "+",
                "+    public SCIMUserConf getUserConf() {",
                "+        return userConf;",
                "+    }",
                "+",
                "+    public void setUserConf(final SCIMUserConf userConf) {",
                "+        this.userConf = userConf;",
                "+    }",
                "+",
                "+    public SCIMEnterpriseUserConf getEnterpriseUserConf() {",
                "+        return enterpriseUserConf;",
                "+    }",
                "+",
                "+    public void setEnterpriseUserConf(final SCIMEnterpriseUserConf enterpriseUserConf) {",
                "+        this.enterpriseUserConf = enterpriseUserConf;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "new file mode 100644",
                "index 0000000000..4cf7b88724",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "@@ -0,0 +1,87 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public class SCIMEnterpriseUserConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 5929414914887282638L;",
                "+",
                "+    private String employeeNumber;",
                "+",
                "+    private String costCenter;",
                "+",
                "+    private String organization;",
                "+",
                "+    private String division;",
                "+",
                "+    private String department;",
                "+",
                "+    private SCIMManagerConf manager;",
                "+",
                "+    public String getEmployeeNumber() {",
                "+        return employeeNumber;",
                "+    }",
                "+",
                "+    public void setEmployeeNumber(final String employeeNumber) {",
                "+        this.employeeNumber = employeeNumber;",
                "+    }",
                "+",
                "+    public String getCostCenter() {",
                "+        return costCenter;",
                "+    }",
                "+",
                "+    public void setCostCenter(final String costCenter) {",
                "+        this.costCenter = costCenter;",
                "+    }",
                "+",
                "+    public String getOrganization() {",
                "+        return organization;",
                "+    }",
                "+",
                "+    public void setOrganization(final String organization) {",
                "+        this.organization = organization;",
                "+    }",
                "+",
                "+    public String getDivision() {",
                "+        return division;",
                "+    }",
                "+",
                "+    public void setDivision(final String division) {",
                "+        this.division = division;",
                "+    }",
                "+",
                "+    public String getDepartment() {",
                "+        return department;",
                "+    }",
                "+",
                "+    public void setDepartment(final String department) {",
                "+        this.department = department;",
                "+    }",
                "+",
                "+    public SCIMManagerConf getManager() {",
                "+        return manager;",
                "+    }",
                "+",
                "+    public void setManager(final SCIMManagerConf manager) {",
                "+        this.manager = manager;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "new file mode 100644",
                "index 0000000000..481eb5fcad",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "@@ -0,0 +1,47 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public class SCIMManagerConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -1443695570207406613L;",
                "+",
                "+    private String manager;",
                "+",
                "+    private String displayName;",
                "+",
                "+    public String getManager() {",
                "+        return manager;",
                "+    }",
                "+",
                "+    public void setManager(final String manager) {",
                "+        this.manager = manager;",
                "+    }",
                "+",
                "+    public String getDisplayName() {",
                "+        return displayName;",
                "+    }",
                "+",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "new file mode 100644",
                "index 0000000000..ed5643a32e",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+import org.apache.syncope.common.lib.scim.types.AddressCanonicalType;",
                "+",
                "+public class SCIMUserAddressConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 8093531407836615577L;",
                "+",
                "+    private String formatted;",
                "+",
                "+    private String streetAddress;",
                "+",
                "+    private String locality;",
                "+",
                "+    private String region;",
                "+",
                "+    private String postalCode;",
                "+",
                "+    private String country;",
                "+",
                "+    private AddressCanonicalType type;",
                "+",
                "+    private boolean primary;",
                "+",
                "+    public String getFormatted() {",
                "+        return formatted;",
                "+    }",
                "+",
                "+    public void setFormatted(final String formatted) {",
                "+        this.formatted = formatted;",
                "+    }",
                "+",
                "+    public String getStreetAddress() {",
                "+        return streetAddress;",
                "+    }",
                "+",
                "+    public void setStreetAddress(final String streetAddress) {",
                "+        this.streetAddress = streetAddress;",
                "+    }",
                "+",
                "+    public String getLocality() {",
                "+        return locality;",
                "+    }",
                "+",
                "+    public void setLocality(final String locality) {",
                "+        this.locality = locality;",
                "+    }",
                "+",
                "+    public String getRegion() {",
                "+        return region;",
                "+    }",
                "+",
                "+    public void setRegion(final String region) {",
                "+        this.region = region;",
                "+    }",
                "+",
                "+    public String getPostalCode() {",
                "+        return postalCode;",
                "+    }",
                "+",
                "+    public void setPostalCode(final String postalCode) {",
                "+        this.postalCode = postalCode;",
                "+    }",
                "+",
                "+    public String getCountry() {",
                "+        return country;",
                "+    }",
                "+",
                "+    public void setCountry(final String country) {",
                "+        this.country = country;",
                "+    }",
                "+",
                "+    public AddressCanonicalType getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void setType(final AddressCanonicalType type) {",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    public boolean isPrimary() {",
                "+        return primary;",
                "+    }",
                "+",
                "+    public void setPrimary(final boolean primary) {",
                "+        this.primary = primary;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "new file mode 100644",
                "index 0000000000..7d1be737f4",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "@@ -0,0 +1,159 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;",
                "+import org.apache.syncope.common.lib.scim.types.IMCanonicalType;",
                "+import org.apache.syncope.common.lib.scim.types.PhoneNumberCanonicalType;",
                "+import org.apache.syncope.common.lib.scim.types.PhotoCanonicalType;",
                "+",
                "+public class SCIMUserConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -2700011089067219156L;",
                "+",
                "+    private SCIMUserNameConf name;",
                "+",
                "+    private String displayName;",
                "+",
                "+    private String nickName;",
                "+",
                "+    private String profileUrl;",
                "+",
                "+    private String title;",
                "+",
                "+    private String userType;",
                "+",
                "+    private String preferredLanguage;",
                "+",
                "+    private String locale;",
                "+",
                "+    private String timezone;",
                "+",
                "+    private final List<SCIMComplexConf<EmailCanonicalType>> emails = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexConf<PhoneNumberCanonicalType>> phoneNumbers = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexConf<IMCanonicalType>> ims = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexConf<PhotoCanonicalType>> photos = new ArrayList<>();",
                "+",
                "+    private final List<SCIMUserAddressConf> addresses = new ArrayList<>();",
                "+",
                "+    private final List<String> x509Certificates = new ArrayList<>();",
                "+",
                "+    public SCIMUserNameConf getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public void setName(final SCIMUserNameConf name) {",
                "+        this.name = name;",
                "+    }",
                "+",
                "+    public String getDisplayName() {",
                "+        return displayName;",
                "+    }",
                "+",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "+    public String getNickName() {",
                "+        return nickName;",
                "+    }",
                "+",
                "+    public void setNickName(final String nickName) {",
                "+        this.nickName = nickName;",
                "+    }",
                "+",
                "+    public String getProfileUrl() {",
                "+        return profileUrl;",
                "+    }",
                "+",
                "+    public void setProfileUrl(final String profileUrl) {",
                "+        this.profileUrl = profileUrl;",
                "+    }",
                "+",
                "+    public String getTitle() {",
                "+        return title;",
                "+    }",
                "+",
                "+    public void setTitle(final String title) {",
                "+        this.title = title;",
                "+    }",
                "+",
                "+    public String getUserType() {",
                "+        return userType;",
                "+    }",
                "+",
                "+    public void setUserType(final String userType) {",
                "+        this.userType = userType;",
                "+    }",
                "+",
                "+    public String getPreferredLanguage() {",
                "+        return preferredLanguage;",
                "+    }",
                "+",
                "+    public void setPreferredLanguage(final String preferredLanguage) {",
                "+        this.preferredLanguage = preferredLanguage;",
                "+    }",
                "+",
                "+    public String getLocale() {",
                "+        return locale;",
                "+    }",
                "+",
                "+    public void setLocale(final String locale) {",
                "+        this.locale = locale;",
                "+    }",
                "+",
                "+    public String getTimezone() {",
                "+        return timezone;",
                "+    }",
                "+",
                "+    public void setTimezone(final String timezone) {",
                "+        this.timezone = timezone;",
                "+    }",
                "+",
                "+    public List<SCIMComplexConf<EmailCanonicalType>> getEmails() {",
                "+        return emails;",
                "+    }",
                "+",
                "+    public List<SCIMComplexConf<PhoneNumberCanonicalType>> getPhoneNumbers() {",
                "+        return phoneNumbers;",
                "+    }",
                "+",
                "+    public List<SCIMComplexConf<IMCanonicalType>> getIms() {",
                "+        return ims;",
                "+    }",
                "+",
                "+    public List<SCIMComplexConf<PhotoCanonicalType>> getPhotos() {",
                "+        return photos;",
                "+    }",
                "+",
                "+    public List<SCIMUserAddressConf> getAddresses() {",
                "+        return addresses;",
                "+    }",
                "+",
                "+    public List<String> getX509Certificates() {",
                "+        return x509Certificates;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "new file mode 100644",
                "index 0000000000..2f2db0f3e9",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "@@ -0,0 +1,87 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public class SCIMUserNameConf implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -2256008193008290376L;",
                "+",
                "+    private String formatted;",
                "+",
                "+    private String familyName;",
                "+",
                "+    private String givenName;",
                "+",
                "+    private String middleName;",
                "+",
                "+    private String honorificPrefix;",
                "+",
                "+    private String honorificSuffix;",
                "+",
                "+    public String getFormatted() {",
                "+        return formatted;",
                "+    }",
                "+",
                "+    public void setFormatted(final String formatted) {",
                "+        this.formatted = formatted;",
                "+    }",
                "+",
                "+    public String getFamilyName() {",
                "+        return familyName;",
                "+    }",
                "+",
                "+    public void setFamilyName(final String familyName) {",
                "+        this.familyName = familyName;",
                "+    }",
                "+",
                "+    public String getGivenName() {",
                "+        return givenName;",
                "+    }",
                "+",
                "+    public void setGivenName(final String givenName) {",
                "+        this.givenName = givenName;",
                "+    }",
                "+",
                "+    public String getMiddleName() {",
                "+        return middleName;",
                "+    }",
                "+",
                "+    public void setMiddleName(final String middleName) {",
                "+        this.middleName = middleName;",
                "+    }",
                "+",
                "+    public String getHonorificPrefix() {",
                "+        return honorificPrefix;",
                "+    }",
                "+",
                "+    public void setHonorificPrefix(final String honorificPrefix) {",
                "+        this.honorificPrefix = honorificPrefix;",
                "+    }",
                "+",
                "+    public String getHonorificSuffix() {",
                "+        return honorificSuffix;",
                "+    }",
                "+",
                "+    public void setHonorificSuffix(final String honorificSuffix) {",
                "+        this.honorificSuffix = honorificSuffix;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/AddressCanonicalType.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/AddressCanonicalType.java",
                "new file mode 100644",
                "index 0000000000..cf2cb13f43",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/AddressCanonicalType.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+public enum AddressCanonicalType {",
                "+    work,",
                "+    home,",
                "+    other",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/EmailCanonicalType.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/EmailCanonicalType.java",
                "new file mode 100644",
                "index 0000000000..986c9f61a0",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/EmailCanonicalType.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+public enum EmailCanonicalType {",
                "+    work,",
                "+    home,",
                "+    other",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/IMCanonicalType.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/IMCanonicalType.java",
                "new file mode 100644",
                "index 0000000000..09d4430953",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/IMCanonicalType.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+public enum IMCanonicalType {",
                "+    aim,",
                "+    gtalk,",
                "+    icq,",
                "+    xmpp,",
                "+    msn,",
                "+    skype,",
                "+    qq,",
                "+    yahoo",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhoneNumberCanonicalType.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhoneNumberCanonicalType.java",
                "new file mode 100644",
                "index 0000000000..72ff342c62",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhoneNumberCanonicalType.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+public enum PhoneNumberCanonicalType {",
                "+    work,",
                "+    home,",
                "+    mobile,",
                "+    fax,",
                "+    pager,",
                "+    other",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhotoCanonicalType.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhotoCanonicalType.java",
                "new file mode 100644",
                "index 0000000000..b6428f1aaa",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhotoCanonicalType.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+public enum PhotoCanonicalType {",
                "+    photo,",
                "+    thumbnail",
                "+",
                "+}",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/SCIMEntitlement.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/SCIMEntitlement.java",
                "new file mode 100644",
                "index 0000000000..8a8a1aed23",
                "--- /dev/null",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/SCIMEntitlement.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.scim.types;",
                "+",
                "+import java.lang.reflect.Field;",
                "+import java.lang.reflect.Modifier;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                "+import java.util.TreeSet;",
                "+",
                "+public final class SCIMEntitlement {",
                "+",
                "+    public static final String SCIM_CONF_GET = \"SCIM_CONF_GET\";",
                "+",
                "+    public static final String SCIM_CONF_SET = \"SCIM_CONF_SET\";",
                "+",
                "+    private static final Set<String> VALUES;",
                "+",
                "+    static {",
                "+        Set<String> values = new TreeSet<>();",
                "+        for (Field field : SCIMEntitlement.class.getDeclaredFields()) {",
                "+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {",
                "+                values.add(field.getName());",
                "+            }",
                "+        }",
                "+        VALUES = Collections.unmodifiableSet(values);",
                "+    }",
                "+",
                "+    public static Set<String> values() {",
                "+        return VALUES;",
                "+    }",
                "+",
                "+    private SCIMEntitlement() {",
                "+        // private constructor for static utility class",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index 188d71ee72..c186912d24 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -53,2 +53,8 @@ under the License.",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-common-lib</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    ",
                "     <dependency>",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "new file mode 100644",
                "index 0000000000..e3b3140b7f",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -0,0 +1,397 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.EntityTOUtils;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.lib.scim.SCIMComplexConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.MembershipTO;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.core.logic.scim.SCIMConfManager;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.spring.security.AuthDataAccessor;",
                "+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;",
                "+import org.apache.syncope.ext.scimv2.api.data.Value;",
                "+import org.apache.syncope.ext.scimv2.api.data.Group;",
                "+import org.apache.syncope.ext.scimv2.api.data.Member;",
                "+import org.apache.syncope.ext.scimv2.api.data.Meta;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMComplexValue;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMEnterpriseInfo;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUserAddress;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUserManager;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;",
                "+import org.apache.syncope.ext.scimv2.api.type.Function;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class SCIMDataBinder {",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMDataBinder.class);",
                "+",
                "+    @Autowired",
                "+    private SCIMConfManager confManager;",
                "+",
                "+    @Autowired",
                "+    private UserLogic userLogic;",
                "+",
                "+    @Autowired",
                "+    private AuthDataAccessor authDataAccessor;",
                "+",
                "+    private <E extends Enum<?>> void fill(",
                "+            final Map<String, AttrTO> attrs,",
                "+            final List<SCIMComplexConf<E>> confs,",
                "+            final List<SCIMComplexValue> values) {",
                "+",
                "+        for (SCIMComplexConf<?> conf : confs) {",
                "+            SCIMComplexValue value = new SCIMComplexValue();",
                "+",
                "+            if (conf.getValue() != null && attrs.containsKey(conf.getValue())) {",
                "+                value.setValue(attrs.get(conf.getValue()).getValues().get(0));",
                "+            }",
                "+            if (conf.getDisplay() != null && attrs.containsKey(conf.getDisplay())) {",
                "+                value.setDisplay(attrs.get(conf.getDisplay()).getValues().get(0));",
                "+            }",
                "+            if (conf.getType() != null) {",
                "+                value.setType(conf.getType().name());",
                "+            }",
                "+            if (conf.isPrimary()) {",
                "+                value.setPrimary(true);",
                "+            }",
                "+",
                "+            if (!value.isEmpty()) {",
                "+                values.add(value);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    public SCIMUser toSCIMUser(final UserTO userTO, final String location) {",
                "+        SCIMConf conf = confManager.get();",
                "+",
                "+        SCIMUser user = new SCIMUser(",
                "+                userTO.getKey(),",
                "+                Collections.singletonList(Resource.User.schema()),",
                "+                new Meta(",
                "+                        Resource.User,",
                "+                        userTO.getCreationDate(),",
                "+                        userTO.getLastChangeDate() == null",
                "+                        ? userTO.getCreationDate() : userTO.getLastChangeDate(),",
                "+                        userTO.getETagValue(),",
                "+                        location),",
                "+                userTO.getUsername(),",
                "+                !userTO.isSuspended());",
                "+",
                "+        Map<String, AttrTO> attrs = new HashMap<>();",
                "+        attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()));",
                "+        attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getDerAttrs()));",
                "+        attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()));",
                "+",
                "+        if (conf.getUserConf() != null) {",
                "+            if (conf.getUserConf().getName() != null) {",
                "+                SCIMUserName name = new SCIMUserName();",
                "+",
                "+                if (conf.getUserConf().getName().getFamilyName() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getFamilyName())) {",
                "+",
                "+                    name.setFamilyName(attrs.get(conf.getUserConf().getName().getFamilyName()).getValues().get(0));",
                "+                }",
                "+                if (conf.getUserConf().getName().getFormatted() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getFormatted())) {",
                "+",
                "+                    name.setFormatted(attrs.get(conf.getUserConf().getName().getFormatted()).getValues().get(0));",
                "+                }",
                "+                if (conf.getUserConf().getName().getGivenName() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getGivenName())) {",
                "+",
                "+                    name.setGivenName(attrs.get(conf.getUserConf().getName().getGivenName()).getValues().get(0));",
                "+                }",
                "+                if (conf.getUserConf().getName().getHonorificPrefix() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getHonorificPrefix())) {",
                "+",
                "+                    name.setHonorificPrefix(",
                "+                            attrs.get(conf.getUserConf().getName().getHonorificPrefix()).getValues().get(0));",
                "+                }",
                "+                if (conf.getUserConf().getName().getHonorificSuffix() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getHonorificSuffix())) {",
                "+",
                "+                    name.setHonorificSuffix(",
                "+                            attrs.get(conf.getUserConf().getName().getHonorificSuffix()).getValues().get(0));",
                "+                }",
                "+                if (conf.getUserConf().getName().getMiddleName() != null",
                "+                        && attrs.containsKey(conf.getUserConf().getName().getMiddleName())) {",
                "+",
                "+                    name.setMiddleName(attrs.get(conf.getUserConf().getName().getMiddleName()).getValues().get(0));",
                "+                }",
                "+",
                "+                if (!name.isEmpty()) {",
                "+                    user.setName(name);",
                "+                }",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getDisplayName() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getDisplayName())) {",
                "+",
                "+                user.setDisplayName(attrs.get(conf.getUserConf().getDisplayName()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getNickName() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getNickName())) {",
                "+",
                "+                user.setNickName(attrs.get(conf.getUserConf().getNickName()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getProfileUrl() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getProfileUrl())) {",
                "+",
                "+                user.setProfileUrl(attrs.get(conf.getUserConf().getProfileUrl()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getTitle() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getTitle())) {",
                "+",
                "+                user.setTitle(attrs.get(conf.getUserConf().getTitle()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getUserType() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getUserType())) {",
                "+",
                "+                user.setUserType(attrs.get(conf.getUserConf().getUserType()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getPreferredLanguage() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getPreferredLanguage())) {",
                "+",
                "+                user.setPreferredLanguage(attrs.get(conf.getUserConf().getPreferredLanguage()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getLocale() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getLocale())) {",
                "+",
                "+                user.setLocale(attrs.get(conf.getUserConf().getLocale()).getValues().get(0));",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getTimezone() != null",
                "+                    && attrs.containsKey(conf.getUserConf().getTimezone())) {",
                "+",
                "+                user.setTimezone(attrs.get(conf.getUserConf().getTimezone()).getValues().get(0));",
                "+            }",
                "+",
                "+            fill(attrs, conf.getUserConf().getEmails(), user.getEmails());",
                "+            fill(attrs, conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());",
                "+            fill(attrs, conf.getUserConf().getIms(), user.getIms());",
                "+            fill(attrs, conf.getUserConf().getPhotos(), user.getPhotos());",
                "+            for (SCIMUserAddressConf addressConf : conf.getUserConf().getAddresses()) {",
                "+                SCIMUserAddress address = new SCIMUserAddress();",
                "+",
                "+                if (addressConf.getFormatted() != null && attrs.containsKey(addressConf.getFormatted())) {",
                "+                    address.setFormatted(attrs.get(addressConf.getFormatted()).getValues().get(0));",
                "+                }",
                "+                if (addressConf.getStreetAddress() != null && attrs.containsKey(addressConf.getStreetAddress())) {",
                "+                    address.setStreetAddress(attrs.get(addressConf.getStreetAddress()).getValues().get(0));",
                "+                }",
                "+                if (addressConf.getLocality() != null && attrs.containsKey(addressConf.getLocality())) {",
                "+                    address.setLocality(attrs.get(addressConf.getLocality()).getValues().get(0));",
                "+                }",
                "+                if (addressConf.getRegion() != null && attrs.containsKey(addressConf.getRegion())) {",
                "+                    address.setRegion(attrs.get(addressConf.getRegion()).getValues().get(0));",
                "+                }",
                "+                if (addressConf.getCountry() != null && attrs.containsKey(addressConf.getCountry())) {",
                "+                    address.setCountry(attrs.get(addressConf.getCountry()).getValues().get(0));",
                "+                }",
                "+                if (addressConf.getType() != null) {",
                "+                    address.setType(addressConf.getType().name());",
                "+                }",
                "+                if (addressConf.isPrimary()) {",
                "+                    address.setPrimary(true);",
                "+                }",
                "+",
                "+                if (!address.isEmpty()) {",
                "+                    user.getAddresses().add(address);",
                "+                }",
                "+            }",
                "+",
                "+            for (String certificate : conf.getUserConf().getX509Certificates()) {",
                "+                if (attrs.containsKey(certificate)) {",
                "+                    user.getX509Certificates().add(new Value(attrs.get(certificate).getValues().get(0)));",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (conf.getEnterpriseUserConf() != null) {",
                "+            SCIMEnterpriseInfo enterpriseInfo = new SCIMEnterpriseInfo();",
                "+",
                "+            if (conf.getEnterpriseUserConf().getEmployeeNumber() != null",
                "+                    && attrs.containsKey(conf.getEnterpriseUserConf().getEmployeeNumber())) {",
                "+",
                "+                enterpriseInfo.setEmployeeNumber(",
                "+                        attrs.get(conf.getEnterpriseUserConf().getEmployeeNumber()).getValues().get(0));",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getCostCenter() != null",
                "+                    && attrs.containsKey(conf.getEnterpriseUserConf().getCostCenter())) {",
                "+",
                "+                enterpriseInfo.setCostCenter(",
                "+                        attrs.get(conf.getEnterpriseUserConf().getCostCenter()).getValues().get(0));",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getOrganization() != null",
                "+                    && attrs.containsKey(conf.getEnterpriseUserConf().getOrganization())) {",
                "+",
                "+                enterpriseInfo.setOrganization(",
                "+                        attrs.get(conf.getEnterpriseUserConf().getOrganization()).getValues().get(0));",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getDivision() != null",
                "+                    && attrs.containsKey(conf.getEnterpriseUserConf().getDivision())) {",
                "+",
                "+                enterpriseInfo.setDivision(",
                "+                        attrs.get(conf.getEnterpriseUserConf().getDivision()).getValues().get(0));",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getDepartment() != null",
                "+                    && attrs.containsKey(conf.getEnterpriseUserConf().getDepartment())) {",
                "+",
                "+                enterpriseInfo.setDepartment(",
                "+                        attrs.get(conf.getEnterpriseUserConf().getDepartment()).getValues().get(0));",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getManager() != null) {",
                "+                SCIMUserManager manager = new SCIMUserManager();",
                "+",
                "+                if (conf.getEnterpriseUserConf().getManager().getManager() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getManager())) {",
                "+",
                "+                    try {",
                "+                        UserTO userManager = userLogic.read(",
                "+                                attrs.get(conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "+                        manager.setValue(userManager.getKey());",
                "+                        manager.setRef(",
                "+                                StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());",
                "+",
                "+                        if (conf.getEnterpriseUserConf().getManager().getDisplayName() != null) {",
                "+                            AttrTO displayName = userManager.getPlainAttr(",
                "+                                    conf.getEnterpriseUserConf().getManager().getDisplayName());",
                "+                            if (displayName == null) {",
                "+                                displayName = userManager.getDerAttr(",
                "+                                        conf.getEnterpriseUserConf().getManager().getDisplayName());",
                "+                            }",
                "+                            if (displayName == null) {",
                "+                                displayName = userManager.getVirAttr(",
                "+                                        conf.getEnterpriseUserConf().getManager().getDisplayName());",
                "+                            }",
                "+                            if (displayName != null) {",
                "+                                manager.setDisplayName(displayName.getValues().get(0));",
                "+                            }",
                "+                        }",
                "+                    } catch (Exception e) {",
                "+                        LOG.error(\"Could not read attribute {}\",",
                "+                                conf.getEnterpriseUserConf().getManager().getManager(), e);",
                "+                    }",
                "+                }",
                "+",
                "+                if (!manager.isEmpty()) {",
                "+                    enterpriseInfo.setManager(manager);",
                "+                }",
                "+            }",
                "+",
                "+            if (!enterpriseInfo.isEmpty()) {",
                "+                user.setEnterpriseInfo(enterpriseInfo);",
                "+            }",
                "+        }",
                "+",
                "+        for (MembershipTO membership : userTO.getMemberships()) {",
                "+            user.getGroups().add(new Group(",
                "+                    membership.getGroupKey(),",
                "+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                    membership.getGroupName(),",
                "+                    Function.direct));",
                "+        }",
                "+        for (MembershipTO membership : userTO.getDynMemberships()) {",
                "+            user.getGroups().add(new Group(",
                "+                    membership.getGroupKey(),",
                "+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                    membership.getGroupName(),",
                "+                    Function.indirect));",
                "+        }",
                "+",
                "+        for (SyncopeGrantedAuthority authority : authDataAccessor.getAuthorities(userTO.getUsername())) {",
                "+            user.getEntitlements().add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms()));",
                "+        }",
                "+",
                "+        for (String role : userTO.getRoles()) {",
                "+            user.getRoles().add(new Value(role));",
                "+        }",
                "+",
                "+        return user;",
                "+    }",
                "+",
                "+    public SCIMGroup toSCIMGroup(final GroupTO groupTO, final String location) {",
                "+        SCIMGroup group = new SCIMGroup(",
                "+                groupTO.getKey(),",
                "+                Collections.singletonList(Resource.Group.schema()),",
                "+                new Meta(",
                "+                        Resource.Group,",
                "+                        groupTO.getCreationDate(),",
                "+                        groupTO.getLastChangeDate() == null",
                "+                        ? groupTO.getCreationDate() : groupTO.getLastChangeDate(),",
                "+                        groupTO.getETagValue(),",
                "+                        location),",
                "+                groupTO.getName());",
                "+",
                "+        MembershipCond membCond = new MembershipCond();",
                "+        membCond.setGroup(groupTO.getKey());",
                "+        SearchCond searchCond = SearchCond.getLeafCond(membCond);",
                "+",
                "+        int count = userLogic.",
                "+                search(searchCond, 1, 1, Collections.<OrderByClause>emptyList(), SyncopeConstants.ROOT_REALM, false).",
                "+                getLeft();",
                "+",
                "+        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+            List<UserTO> users = userLogic.search(",
                "+                    searchCond,",
                "+                    page,",
                "+                    AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                    Collections.<OrderByClause>emptyList(),",
                "+                    SyncopeConstants.ROOT_REALM,",
                "+                    false).",
                "+                    getRight();",
                "+            for (UserTO userTO : users) {",
                "+                group.getMembers().add(new Member(",
                "+                        userTO.getKey(),",
                "+                        StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),",
                "+                        userTO.getUsername(),",
                "+                        Resource.User));",
                "+            }",
                "+        }",
                "+",
                "+        return group;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "new file mode 100644",
                "index 0000000000..11085fbe17",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "@@ -0,0 +1,198 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import java.io.IOException;",
                "+import java.lang.reflect.Method;",
                "+import java.net.URI;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import javax.ws.rs.NotFoundException;",
                "+import javax.ws.rs.core.UriBuilder;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.core.logic.scim.SCIMConfManager;",
                "+import org.apache.syncope.ext.scimv2.api.data.AuthenticationScheme;",
                "+import org.apache.syncope.ext.scimv2.api.data.BulkConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.ConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.FilterConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.Meta;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.data.SchemaExtension;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.security.access.prepost.PreAuthorize;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class SCIMLogic extends AbstractLogic<AbstractBaseBean> {",
                "+",
                "+    private static final String SCHEMAS_JSON = \"schemas.json\";",
                "+",
                "+    private static final Object MONITOR = new Object();",
                "+",
                "+    private static ServiceProviderConfig SERVICE_PROVIDER_CONFIG;",
                "+",
                "+    private static ResourceType USER;",
                "+",
                "+    private static ResourceType GROUP;",
                "+",
                "+    private static String SCHEMAS;",
                "+",
                "+    private static final Map<String, String> SCHEMA_MAP = new HashMap<>();",
                "+",
                "+    @Autowired",
                "+    private SCIMConfManager confManager;",
                "+",
                "+    private void init() {",
                "+        try {",
                "+            ObjectMapper mapper = new ObjectMapper();",
                "+            JsonNode tree = mapper.readTree(getClass().getResourceAsStream(\"/\" + SCHEMAS_JSON));",
                "+            if (!tree.isArray()) {",
                "+                throw new IOException(\"JSON node is not a tree\");",
                "+            }",
                "+",
                "+            ArrayNode schemaArray = (ArrayNode) tree;",
                "+            SCHEMAS = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree);",
                "+",
                "+            for (JsonNode schema : schemaArray) {",
                "+                SCHEMA_MAP.put(schema.get(\"id\").asText(), mapper.writeValueAsString(schema));",
                "+            }",
                "+        } catch (IOException e) {",
                "+            LOG.error(\"Could not parse the default schema definitions\", e);",
                "+        }",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public ServiceProviderConfig serviceProviderConfig(final UriBuilder uriBuilder) {",
                "+        synchronized (MONITOR) {",
                "+            if (SCHEMAS == null) {",
                "+                init();",
                "+            }",
                "+",
                "+            if (SERVICE_PROVIDER_CONFIG == null) {",
                "+                SCIMConf conf = confManager.get();",
                "+",
                "+                SERVICE_PROVIDER_CONFIG = new ServiceProviderConfig(",
                "+                        new Meta(",
                "+                                Resource.ServiceProviderConfig,",
                "+                                conf.getCreationDate(),",
                "+                                conf.getLastChangeDate(),",
                "+                                conf.getETagValue(),",
                "+                                uriBuilder.build().toASCIIString()),",
                "+                        new ConfigurationOption(true),",
                "+                        new BulkConfigurationOption(true, conf.getBulkMaxOperations(), conf.getBulkMaxPayloadSize()),",
                "+                        new FilterConfigurationOption(true, conf.getFilterMaxResults()),",
                "+                        new ConfigurationOption(true),",
                "+                        new ConfigurationOption(true),",
                "+                        new ConfigurationOption(true));",
                "+                SERVICE_PROVIDER_CONFIG.getAuthenticationSchemes().add(new AuthenticationScheme(",
                "+                        \"JSON Web Token\",",
                "+                        \"Apache Syncope JWT authentication\",",
                "+                        URI.create(\"http://www.rfc-editor.org/info/rfc6750\"),",
                "+                        URI.create(\"https://syncope.apache.org/docs/\"",
                "+                                + \"reference-guide.html#rest-authentication-and-authorization\"),",
                "+                        \"oauthbearertoken\",",
                "+                        true));",
                "+                SERVICE_PROVIDER_CONFIG.getAuthenticationSchemes().add(new AuthenticationScheme(",
                "+                        \"HTTP Basic\",",
                "+                        \"Apache Syncope HTTP Basic authentication\",",
                "+                        URI.create(\"http://www.rfc-editor.org/info/rfc2617\"),",
                "+                        URI.create(\"https://syncope.apache.org/docs/\"",
                "+                                + \"reference-guide.html#rest-authentication-and-authorization\"),",
                "+                        \"httpbasic\",",
                "+                        false));",
                "+            }",
                "+        }",
                "+        return SERVICE_PROVIDER_CONFIG;",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public List<ResourceType> resourceTypes(final UriBuilder uriBuilder) {",
                "+        synchronized (MONITOR) {",
                "+            if (USER == null) {",
                "+                USER = new ResourceType(\"User\", \"User\", \"/Users\", \"User Account\", Resource.User.schema(),",
                "+                        new Meta(Resource.ResourceType,",
                "+                                null, null, null, uriBuilder.path(\"User\").build().toASCIIString()));",
                "+                USER.getSchemaExtensions().add(new SchemaExtension(Resource.EnterpriseUser.schema(), true));",
                "+            }",
                "+            if (GROUP == null) {",
                "+                GROUP = new ResourceType(\"Group\", \"Group\", \"/Groups\", \"Group\", Resource.Group.schema(),",
                "+                        new Meta(Resource.ResourceType,",
                "+                                null, null, null, uriBuilder.path(\"Group\").build().toASCIIString()));",
                "+            }",
                "+        }",
                "+",
                "+        return Arrays.asList(USER, GROUP);",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public ResourceType resourceType(final UriBuilder uriBuilder, final String type) {",
                "+        if (Resource.User.name().equals(type)) {",
                "+            resourceTypes(uriBuilder);",
                "+            return USER;",
                "+        } else if (Resource.Group.name().equals(type)) {",
                "+            resourceTypes(uriBuilder);",
                "+            return GROUP;",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"Unsupported resource type: \" + type);",
                "+        }",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public String schemas() {",
                "+        synchronized (MONITOR) {",
                "+            if (SCHEMAS == null) {",
                "+                init();",
                "+            }",
                "+        }",
                "+",
                "+        return SCHEMAS;",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public String schema(final String schema) {",
                "+        synchronized (MONITOR) {",
                "+            if (SCHEMAS == null) {",
                "+                init();",
                "+            }",
                "+        }",
                "+",
                "+        String found = SCHEMA_MAP.get(schema);",
                "+        if (found == null) {",
                "+            throw new NotFoundException(\"Schema \" + schema);",
                "+        }",
                "+",
                "+        return found;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected AbstractBaseBean resolveReference(final Method method, final Object... args)",
                "+            throws UnresolvedReferenceException {",
                "+",
                "+        throw new UnresolvedReferenceException();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "index 894ba24c41..a5a17331ce 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "@@ -20,14 +20,5 @@ package org.apache.syncope.core.logic.init;",
                "-import com.fasterxml.jackson.databind.JsonNode;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-import com.fasterxml.jackson.databind.node.ArrayNode;",
                "-import java.io.IOException;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-import org.apache.commons.lang3.tuple.Pair;",
                "-import org.apache.syncope.common.lib.PropertyUtils;",
                "+import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;",
                " import org.apache.syncope.core.persistence.api.SyncopeLoader;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;",
                " import org.springframework.stereotype.Component;",
                "@@ -37,18 +28,2 @@ public class SCIMLoader implements SyncopeLoader {",
                "-    private static final Logger LOG = LoggerFactory.getLogger(SCIMLoader.class);",
                "-",
                "-    private static final String SCIMV2_LOGIC_PROPERTIES = \"scimv2-logic.properties\";",
                "-",
                "-    private static final String SCHEMAS = \"schemas.json\";",
                "-",
                "-    private int bulkMaxOperations = 0;",
                "-",
                "-    private int bulkMaxPayloadSize = 0;",
                "-",
                "-    private int filterMaxResults = 0;",
                "-",
                "-    private String schemas;",
                "-",
                "-    private final Map<String, String> schemaMap = new HashMap<>();",
                "-",
                "     @Override",
                "@@ -60,45 +35,3 @@ public class SCIMLoader implements SyncopeLoader {",
                "     public void load() {",
                "-        Pair<Properties, String> init = PropertyUtils.read(getClass(), SCIMV2_LOGIC_PROPERTIES, \"conf.directory\");",
                "-        Properties props = init.getLeft();",
                "-",
                "-        bulkMaxOperations = Integer.valueOf(props.getProperty(\"bulk.maxOperations\"));",
                "-        bulkMaxPayloadSize = Integer.valueOf(props.getProperty(\"bulk.maxPayloadSize\"));",
                "-        filterMaxResults = Integer.valueOf(props.getProperty(\"filter.maxResults\"));",
                "-",
                "-        try {",
                "-            ObjectMapper mapper = new ObjectMapper();",
                "-            JsonNode tree = mapper.readTree(getClass().getResourceAsStream(\"/\" + SCHEMAS));",
                "-            if (!tree.isArray()) {",
                "-                throw new IOException(\"JSON node is not a tree\");",
                "-            }",
                "-",
                "-            ArrayNode schemaArray = (ArrayNode) tree;",
                "-            schemas = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree);",
                "-",
                "-            for (JsonNode schema : schemaArray) {",
                "-                schemaMap.put(schema.get(\"id\").asText(), mapper.writeValueAsString(schema));",
                "-            }",
                "-        } catch (IOException e) {",
                "-            LOG.error(\"Could not parse the default schema definitions\", e);",
                "-        }",
                "-    }",
                "-",
                "-    public int getBulkMaxOperations() {",
                "-        return bulkMaxOperations;",
                "-    }",
                "-",
                "-    public int getBulkMaxPayloadSize() {",
                "-        return bulkMaxPayloadSize;",
                "-    }",
                "-",
                "-    public int getFilterMaxResults() {",
                "-        return filterMaxResults;",
                "-    }",
                "-",
                "-    public String getSchemas() {",
                "-        return schemas;",
                "-    }",
                "-",
                "-    public String getSchema(final String schema) {",
                "-        return schemaMap.get(schema);",
                "+        EntitlementsHolder.getInstance().init(SCIMEntitlement.values());",
                "     }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java",
                "new file mode 100644",
                "index 0000000000..ede870bf67",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java",
                "@@ -0,0 +1,93 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic.scim;",
                "+",
                "+import java.util.Date;",
                "+import javax.ws.rs.core.MediaType;",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.PlainSchemaTO;",
                "+import org.apache.syncope.common.lib.types.AttrSchemaType;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                "+import org.apache.syncope.core.logic.ConfigurationLogic;",
                "+import org.apache.syncope.core.logic.SchemaLogic;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.identityconnectors.common.Base64;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.security.access.prepost.PreAuthorize;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class SCIMConfManager {",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfManager.class);",
                "+",
                "+    @Autowired",
                "+    private ConfigurationLogic configurationLogic;",
                "+",
                "+    @Autowired",
                "+    private SchemaLogic schemaLogic;",
                "+",
                "+    @PreAuthorize(\"hasRole('\" + SCIMEntitlement.SCIM_CONF_GET + \"')\")",
                "+    public SCIMConf get() {",
                "+        AttrTO confTO = null;",
                "+        try {",
                "+            confTO = configurationLogic.get(SCIMConf.KEY);",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"{} not found, reverting to default\", SCIMConf.KEY);",
                "+        }",
                "+",
                "+        SCIMConf conf = null;",
                "+        if (confTO != null) {",
                "+            try {",
                "+                conf = POJOHelper.deserialize(new String(Base64.decode(confTO.getValues().get(0))), SCIMConf.class);",
                "+            } catch (Exception e) {",
                "+                LOG.error(\"Could not deserialize, reverting to default\", e);",
                "+            }",
                "+        }",
                "+        if (conf == null) {",
                "+            conf = new SCIMConf();",
                "+            set(conf);",
                "+        }",
                "+",
                "+        return conf;",
                "+    }",
                "+",
                "+    @PreAuthorize(\"hasRole('\" + SCIMEntitlement.SCIM_CONF_SET + \"')\")",
                "+    public void set(final SCIMConf conf) {",
                "+        try {",
                "+            schemaLogic.read(SchemaType.PLAIN, SCIMConf.KEY);",
                "+        } catch (NotFoundException e) {",
                "+            PlainSchemaTO scimConf = new PlainSchemaTO();",
                "+            scimConf.setKey(SCIMConf.KEY);",
                "+            scimConf.setType(AttrSchemaType.Binary);",
                "+            scimConf.setMimeType(MediaType.APPLICATION_JSON);",
                "+            schemaLogic.create(SchemaType.PLAIN, scimConf);",
                "+        }",
                "+        conf.setLastChangeDate(new Date());",
                "+",
                "+        configurationLogic.set(new AttrTO.Builder().",
                "+                schema(SCIMConf.KEY).value(Base64.encode(POJOHelper.serialize(conf).getBytes())).build());",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index 409f64223a..a04e6bd07c 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -40,2 +40,5 @@ under the License.",
                "   <modules>",
                "+    <module>common-lib</module>",
                "+    <module>rest-api</module>",
                "+    <module>rest-cxf</module>",
                "     <module>scim-rest-api</module>",
                "@@ -43,2 +46,3 @@ under the License.",
                "     <module>logic</module>",
                "+    <module>client-console</module>",
                "   </modules>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "new file mode 100644",
                "index 0000000000..b56ada61c7",
                "--- /dev/null",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -0,0 +1,77 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 REST API</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 REST API</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-rest-api</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.common</groupId>",
                "+      <artifactId>syncope-common-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-common-lib</artifactId>      ",
                "+      <version>${project.version}</version>",
                "+    </dependency>    ",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <!-- Generating javadoc JAR artifact for usage with CXF's WADL generator (for core) -->",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-javadoc-plugin</artifactId>",
                "+        <inherited>true</inherited>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>attach-javadocs</id>",
                "+            <goals>",
                "+              <goal>jar</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "new file mode 100644",
                "index 0000000000..fdc4da3add",
                "--- /dev/null",
                "+++ b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.service;",
                "+",
                "+import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.PUT;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.MediaType;",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+",
                "+/**",
                "+ * REST operations for SCIM 2.0 configuration.",
                "+ */",
                "+@Path(\"scimv2conf\")",
                "+public interface SCIMConfService extends JAXRSService {",
                "+",
                "+    /**",
                "+     * Reads SCIM configuration, generates empty if missing.",
                "+     *",
                "+     * @return SCIM configuration",
                "+     */",
                "+    @GET",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    SCIMConf get();",
                "+",
                "+    /**",
                "+     * Sets SCIM configuration.",
                "+     *",
                "+     * @param conf SCIM configuration",
                "+     */",
                "+    @PUT",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    void set(@NotNull SCIMConf conf);",
                "+}",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "new file mode 100644",
                "index 0000000000..f82987759e",
                "--- /dev/null",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -0,0 +1,72 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 REST CXF</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 REST CXF</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-rest-cxf</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <classifier>javadoc</classifier>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-logic</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java b/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "new file mode 100644",
                "index 0000000000..223aca7e4c",
                "--- /dev/null",
                "+++ b/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.rest.cxf.service;",
                "+",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.rest.api.service.SCIMConfService;",
                "+import org.apache.syncope.core.logic.scim.SCIMConfManager;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+",
                "+public class SCIMConfServiceImpl extends AbstractServiceImpl implements SCIMConfService {",
                "+",
                "+    @Autowired",
                "+    private SCIMConfManager manager;",
                "+",
                "+    @Override",
                "+    public SCIMConf get() {",
                "+        return manager.get();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void set(final SCIMConf conf) {",
                "+        manager.set(conf);",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "index d65f5e8815..a00c79331b 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "@@ -22,3 +22,3 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                "-abstract class Reference extends Display {",
                "+abstract class Reference extends Value {",
                "@@ -26,2 +26,4 @@ abstract class Reference extends Display {",
                "+    private final String display;",
                "+",
                "     @JsonProperty(\"$ref\")",
                "@@ -30,3 +32,4 @@ abstract class Reference extends Display {",
                "     Reference(final String value, final String display, final String ref) {",
                "-        super(value, display);",
                "+        super(value);",
                "+        this.display = display;",
                "         this.ref = ref;",
                "@@ -34,2 +37,6 @@ abstract class Reference extends Display {",
                "+    public String getDisplay() {",
                "+        return display;",
                "+    }",
                "+",
                "     public String getRef() {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "index 95334cf284..ca191be88c 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "@@ -23,3 +23,3 @@ import java.io.Serializable;",
                "-@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+@JsonInclude(JsonInclude.Include.NON_EMPTY)",
                " abstract class SCIMBean implements Serializable {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMComplexValue.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMComplexValue.java",
                "new file mode 100644",
                "index 0000000000..94c4320368",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMComplexValue.java",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+",
                "+public class SCIMComplexValue extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -3887211468327809832L;",
                "+",
                "+    private String value;",
                "+",
                "+    private String display;",
                "+",
                "+    private String type;",
                "+",
                "+    private boolean primary;",
                "+",
                "+    public String getValue() {",
                "+        return value;",
                "+    }",
                "+",
                "+    public void setValue(final String value) {",
                "+        this.value = value;",
                "+    }",
                "+",
                "+    public String getDisplay() {",
                "+        return display;",
                "+    }",
                "+",
                "+    public void setDisplay(final String display) {",
                "+        this.display = display;",
                "+    }",
                "+",
                "+    public String getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void setType(final String type) {",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    public boolean isPrimary() {",
                "+        return primary;",
                "+    }",
                "+",
                "+    public void setPrimary(final boolean primary) {",
                "+        this.primary = primary;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public boolean isEmpty() {",
                "+        return value == null && display == null && type == null;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMEnterpriseInfo.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMEnterpriseInfo.java",
                "new file mode 100644",
                "index 0000000000..d419c09339",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMEnterpriseInfo.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+",
                "+public class SCIMEnterpriseInfo extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5745005071861557082L;",
                "+",
                "+    private String employeeNumber;",
                "+",
                "+    private String costCenter;",
                "+",
                "+    private String organization;",
                "+",
                "+    private String division;",
                "+",
                "+    private String department;",
                "+",
                "+    private SCIMUserManager manager;",
                "+",
                "+    public String getEmployeeNumber() {",
                "+        return employeeNumber;",
                "+    }",
                "+",
                "+    public void setEmployeeNumber(final String employeeNumber) {",
                "+        this.employeeNumber = employeeNumber;",
                "+    }",
                "+",
                "+    public String getCostCenter() {",
                "+        return costCenter;",
                "+    }",
                "+",
                "+    public void setCostCenter(final String costCenter) {",
                "+        this.costCenter = costCenter;",
                "+    }",
                "+",
                "+    public String getOrganization() {",
                "+        return organization;",
                "+    }",
                "+",
                "+    public void setOrganization(final String organization) {",
                "+        this.organization = organization;",
                "+    }",
                "+",
                "+    public String getDivision() {",
                "+        return division;",
                "+    }",
                "+",
                "+    public void setDivision(final String division) {",
                "+        this.division = division;",
                "+    }",
                "+",
                "+    public String getDepartment() {",
                "+        return department;",
                "+    }",
                "+",
                "+    public void setDepartment(final String department) {",
                "+        this.department = department;",
                "+    }",
                "+",
                "+    public SCIMUserManager getManager() {",
                "+        return manager;",
                "+    }",
                "+",
                "+    public void setManager(final SCIMUserManager manager) {",
                "+        this.manager = manager;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public boolean isEmpty() {",
                "+        return employeeNumber == null",
                "+                && costCenter == null",
                "+                && organization == null",
                "+                && division == null",
                "+                && department == null",
                "+                && manager == null;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "index c76c0f027e..775b1ad721 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "@@ -26,3 +26,9 @@ import java.util.List;",
                "-@JsonPropertyOrder({ \"schemas\", \"id\", \"externalId\", \"userName\", \"active\", \"groups\", \"roles\", \"meta\" })",
                "+@JsonPropertyOrder({ \"schemas\", \"id\", \"externalId\",",
                "+    \"userName\", \"password\", \"active\",",
                "+    \"name\", \"displayName\", \"nickName\", \"profileUrl\", \"title\", \"userType\", \"preferredLanguage\", \"locale\", \"timezone\",",
                "+    \"emails\", \"phoneNumbers\", \"ims\", \"photos\", \"addresses\", \"x509Certificates\",",
                "+    \"groups\", \"entitlements\", \"roles\",",
                "+    \"enterpriseInfo\",",
                "+    \"meta\" })",
                " public class SCIMUser extends SCIMResource {",
                "@@ -33,7 +39,44 @@ public class SCIMUser extends SCIMResource {",
                "+    private String password;",
                "+",
                "     private final boolean active;",
                "+    private SCIMUserName name;",
                "+",
                "+    private String displayName;",
                "+",
                "+    private String nickName;",
                "+",
                "+    private String profileUrl;",
                "+",
                "+    private String title;",
                "+",
                "+    private String userType;",
                "+",
                "+    private String preferredLanguage;",
                "+",
                "+    private String locale;",
                "+",
                "+    private String timezone;",
                "+",
                "+    private final List<SCIMComplexValue> emails = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexValue> phoneNumbers = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexValue> ims = new ArrayList<>();",
                "+",
                "+    private final List<SCIMComplexValue> photos = new ArrayList<>();",
                "+",
                "+    private final List<SCIMUserAddress> addresses = new ArrayList<>();",
                "+",
                "+    private final List<Value> x509Certificates = new ArrayList<>();",
                "+",
                "     private final List<Group> groups = new ArrayList<>();",
                "-    private final List<Display> roles = new ArrayList<>();",
                "+    private final List<Value> entitlements = new ArrayList<>();",
                "+",
                "+    private final List<Value> roles = new ArrayList<>();",
                "+",
                "+    @JsonProperty(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\")",
                "+    private SCIMEnterpriseInfo enterpriseInfo;",
                "@@ -56,2 +99,10 @@ public class SCIMUser extends SCIMResource {",
                "+    public void setPassword(final String password) {",
                "+        this.password = password;",
                "+    }",
                "+",
                "+    public String getPassword() {",
                "+        return password;",
                "+    }",
                "+",
                "     public boolean isActive() {",
                "@@ -60,2 +111,98 @@ public class SCIMUser extends SCIMResource {",
                "+    public SCIMUserName getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public void setName(final SCIMUserName name) {",
                "+        this.name = name;",
                "+    }",
                "+",
                "+    public String getDisplayName() {",
                "+        return displayName;",
                "+    }",
                "+",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "+    public String getNickName() {",
                "+        return nickName;",
                "+    }",
                "+",
                "+    public void setNickName(final String nickName) {",
                "+        this.nickName = nickName;",
                "+    }",
                "+",
                "+    public String getProfileUrl() {",
                "+        return profileUrl;",
                "+    }",
                "+",
                "+    public void setProfileUrl(final String profileUrl) {",
                "+        this.profileUrl = profileUrl;",
                "+    }",
                "+",
                "+    public String getTitle() {",
                "+        return title;",
                "+    }",
                "+",
                "+    public void setTitle(final String title) {",
                "+        this.title = title;",
                "+    }",
                "+",
                "+    public String getUserType() {",
                "+        return userType;",
                "+    }",
                "+",
                "+    public void setUserType(final String userType) {",
                "+        this.userType = userType;",
                "+    }",
                "+",
                "+    public String getPreferredLanguage() {",
                "+        return preferredLanguage;",
                "+    }",
                "+",
                "+    public void setPreferredLanguage(final String preferredLanguage) {",
                "+        this.preferredLanguage = preferredLanguage;",
                "+    }",
                "+",
                "+    public String getLocale() {",
                "+        return locale;",
                "+    }",
                "+",
                "+    public void setLocale(final String locale) {",
                "+        this.locale = locale;",
                "+    }",
                "+",
                "+    public String getTimezone() {",
                "+        return timezone;",
                "+    }",
                "+",
                "+    public void setTimezone(final String timezone) {",
                "+        this.timezone = timezone;",
                "+    }",
                "+",
                "+    public List<SCIMComplexValue> getEmails() {",
                "+        return emails;",
                "+    }",
                "+",
                "+    public List<SCIMComplexValue> getPhoneNumbers() {",
                "+        return phoneNumbers;",
                "+    }",
                "+",
                "+    public List<SCIMComplexValue> getIms() {",
                "+        return ims;",
                "+    }",
                "+",
                "+    public List<SCIMComplexValue> getPhotos() {",
                "+        return photos;",
                "+    }",
                "+",
                "+    public List<SCIMUserAddress> getAddresses() {",
                "+        return addresses;",
                "+    }",
                "+",
                "+    public List<Value> getX509Certificates() {",
                "+        return x509Certificates;",
                "+    }",
                "+",
                "     public List<Group> getGroups() {",
                "@@ -64,3 +211,7 @@ public class SCIMUser extends SCIMResource {",
                "-    public List<Display> getRoles() {",
                "+    public List<Value> getEntitlements() {",
                "+        return entitlements;",
                "+    }",
                "+",
                "+    public List<Value> getRoles() {",
                "         return roles;",
                "@@ -68,2 +219,10 @@ public class SCIMUser extends SCIMResource {",
                "+    public SCIMEnterpriseInfo getEnterpriseInfo() {",
                "+        return enterpriseInfo;",
                "+    }",
                "+",
                "+    public void setEnterpriseInfo(final SCIMEnterpriseInfo enterpriseInfo) {",
                "+        this.enterpriseInfo = enterpriseInfo;",
                "+    }",
                "+",
                " }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserAddress.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserAddress.java",
                "new file mode 100644",
                "index 0000000000..3c1f0d935f",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserAddress.java",
                "@@ -0,0 +1,117 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+",
                "+public class SCIMUserAddress extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -7936040729842689890L;",
                "+",
                "+    private String formatted;",
                "+",
                "+    private String streetAddress;",
                "+",
                "+    private String locality;",
                "+",
                "+    private String region;",
                "+",
                "+    private String postalCode;",
                "+",
                "+    private String country;",
                "+",
                "+    private String type;",
                "+",
                "+    private boolean primary;",
                "+",
                "+    public String getFormatted() {",
                "+        return formatted;",
                "+    }",
                "+",
                "+    public void setFormatted(final String formatted) {",
                "+        this.formatted = formatted;",
                "+    }",
                "+",
                "+    public String getStreetAddress() {",
                "+        return streetAddress;",
                "+    }",
                "+",
                "+    public void setStreetAddress(final String streetAddress) {",
                "+        this.streetAddress = streetAddress;",
                "+    }",
                "+",
                "+    public String getLocality() {",
                "+        return locality;",
                "+    }",
                "+",
                "+    public void setLocality(final String locality) {",
                "+        this.locality = locality;",
                "+    }",
                "+",
                "+    public String getRegion() {",
                "+        return region;",
                "+    }",
                "+",
                "+    public void setRegion(final String region) {",
                "+        this.region = region;",
                "+    }",
                "+",
                "+    public String getPostalCode() {",
                "+        return postalCode;",
                "+    }",
                "+",
                "+    public void setPostalCode(final String postalCode) {",
                "+        this.postalCode = postalCode;",
                "+    }",
                "+",
                "+    public String getCountry() {",
                "+        return country;",
                "+    }",
                "+",
                "+    public void setCountry(final String country) {",
                "+        this.country = country;",
                "+    }",
                "+",
                "+    public String getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void setType(final String type) {",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    public boolean isPrimary() {",
                "+        return primary;",
                "+    }",
                "+",
                "+    public void setPrimary(final boolean primary) {",
                "+        this.primary = primary;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public boolean isEmpty() {",
                "+        return formatted == null",
                "+                && streetAddress == null",
                "+                && locality == null",
                "+                && region == null",
                "+                && postalCode == null",
                "+                && country == null",
                "+                && type == null;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserManager.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserManager.java",
                "new file mode 100644",
                "index 0000000000..c1294e9af8",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserManager.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class SCIMUserManager extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -4193118676994783252L;",
                "+",
                "+    private String value;",
                "+",
                "+    @JsonProperty(\"$ref\")",
                "+    private String ref;",
                "+",
                "+    private String displayName;",
                "+",
                "+    public String getValue() {",
                "+        return value;",
                "+    }",
                "+",
                "+    public void setValue(final String value) {",
                "+        this.value = value;",
                "+    }",
                "+",
                "+    public String getRef() {",
                "+        return ref;",
                "+    }",
                "+",
                "+    public void setRef(final String ref) {",
                "+        this.ref = ref;",
                "+    }",
                "+",
                "+    public String getDisplayName() {",
                "+        return displayName;",
                "+    }",
                "+",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public boolean isEmpty() {",
                "+        return value == null && ref == null && displayName == null;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserName.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserName.java",
                "new file mode 100644",
                "index 0000000000..0293e95a6a",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserName.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+",
                "+public class SCIMUserName extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5492302691746462480L;",
                "+",
                "+    private String formatted;",
                "+",
                "+    private String familyName;",
                "+",
                "+    private String givenName;",
                "+",
                "+    private String middleName;",
                "+",
                "+    private String honorificPrefix;",
                "+",
                "+    private String honorificSuffix;",
                "+",
                "+    public String getFormatted() {",
                "+        return formatted;",
                "+    }",
                "+",
                "+    public void setFormatted(final String formatted) {",
                "+        this.formatted = formatted;",
                "+    }",
                "+",
                "+    public String getFamilyName() {",
                "+        return familyName;",
                "+    }",
                "+",
                "+    public void setFamilyName(final String familyName) {",
                "+        this.familyName = familyName;",
                "+    }",
                "+",
                "+    public String getGivenName() {",
                "+        return givenName;",
                "+    }",
                "+",
                "+    public void setGivenName(final String givenName) {",
                "+        this.givenName = givenName;",
                "+    }",
                "+",
                "+    public String getMiddleName() {",
                "+        return middleName;",
                "+    }",
                "+",
                "+    public void setMiddleName(final String middleName) {",
                "+        this.middleName = middleName;",
                "+    }",
                "+",
                "+    public String getHonorificPrefix() {",
                "+        return honorificPrefix;",
                "+    }",
                "+",
                "+    public void setHonorificPrefix(final String honorificPrefix) {",
                "+        this.honorificPrefix = honorificPrefix;",
                "+    }",
                "+",
                "+    public String getHonorificSuffix() {",
                "+        return honorificSuffix;",
                "+    }",
                "+",
                "+    public void setHonorificSuffix(final String honorificSuffix) {",
                "+        this.honorificSuffix = honorificSuffix;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public boolean isEmpty() {",
                "+        return formatted == null",
                "+                && familyName == null",
                "+                && givenName == null",
                "+                && middleName == null",
                "+                && honorificPrefix == null",
                "+                && honorificSuffix == null;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "index 3014a6c2ac..75eec0aac9 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "@@ -22,2 +22,3 @@ import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                " import java.util.ArrayList;",
                "@@ -27,2 +28,4 @@ import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+@JsonPropertyOrder(",
                "+        { \"schemas\", \"patch\", \"bulk\", \"filter\", \"changePassword\", \"sort\", \"etag\", \"authenticationSchemes\", \"meta\" })",
                " public class ServiceProviderConfig extends SCIMBean {",
                "@@ -33,2 +36,4 @@ public class ServiceProviderConfig extends SCIMBean {",
                "+    private final Meta meta;",
                "+",
                "     private final ConfigurationOption patch;",
                "@@ -49,2 +54,3 @@ public class ServiceProviderConfig extends SCIMBean {",
                "     public ServiceProviderConfig(",
                "+            @JsonProperty(\"meta\") final Meta meta,",
                "             @JsonProperty(\"patch\") final ConfigurationOption patch,",
                "@@ -56,2 +62,3 @@ public class ServiceProviderConfig extends SCIMBean {",
                "+        this.meta = meta;",
                "         this.patch = patch;",
                "@@ -68,2 +75,6 @@ public class ServiceProviderConfig extends SCIMBean {",
                "+    public Meta getMeta() {",
                "+        return meta;",
                "+    }",
                "+",
                "     public ConfigurationOption getPatch() {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Value.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Value.java",
                "new file mode 100644",
                "index 0000000000..543f0003b2",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Value.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class Value extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5337055958765320091L;",
                "+",
                "+    private final String value;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public Value(@JsonProperty(\"value\") final String value) {",
                "+        this.value = value;",
                "+    }",
                "+",
                "+    public String getValue() {",
                "+        return value;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "index 8881ec8eda..196572ef4c 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "@@ -35,3 +35,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                " @Path(\"v2/Groups\")",
                "-public interface GroupService extends SCIMService<SCIMGroup> {",
                "+public interface GroupService extends SearchService<SCIMGroup> {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "index 1b2fd3f24d..606474745d 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "@@ -22,20 +22,38 @@ import java.util.List;",
                " import javax.ws.rs.GET;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.PathParam;",
                " import javax.ws.rs.Produces;",
                "-import javax.ws.rs.QueryParam;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "-import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "-import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "-public interface SCIMService<R extends SCIMResource> {",
                "+@Path(\"v2\")",
                "+public interface SCIMService extends SearchService<SCIMResource> {",
                "     @GET",
                "+    @Path(\"ServiceProviderConfig\")",
                "     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    ListResponse<R> search(",
                "-            @QueryParam(\"startIndex\") Integer startIndex,",
                "-            @QueryParam(\"count\") Integer count,",
                "-            @QueryParam(\"filter\") String filter,",
                "-            @QueryParam(\"sortBy\") String sortBy,",
                "-            @QueryParam(\"sortOrder\") SortOrder sortOrder,",
                "-            @QueryParam(\"attributes\") List<String> attributes);",
                "+    ServiceProviderConfig serviceProviderConfig();",
                "+",
                "+    @GET",
                "+    @Path(\"ResourceTypes\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    List<ResourceType> resourceTypes();",
                "+",
                "+    @GET",
                "+    @Path(\"ResourceTypes/{type}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ResourceType resourceType(@PathParam(\"type\") String type);",
                "+",
                "+    @GET",
                "+    @Path(\"Schemas\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response schemas();",
                "+",
                "+    @GET",
                "+    @Path(\"Schemas/{schema}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response schema(@PathParam(\"schema\") String schema);",
                " }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "new file mode 100644",
                "index 0000000000..fcd4789418",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import java.util.List;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.QueryParam;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public interface SearchService<R extends SCIMResource> {",
                "+",
                "+    @GET",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ListResponse<R> search(",
                "+            @QueryParam(\"startIndex\") Integer startIndex,",
                "+            @QueryParam(\"count\") Integer count,",
                "+            @QueryParam(\"filter\") String filter,",
                "+            @QueryParam(\"sortBy\") String sortBy,",
                "+            @QueryParam(\"sortOrder\") SortOrder sortOrder,",
                "+            @QueryParam(\"attributes\") List<String> attributes);",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "index 8003b66c4e..1135650e4a 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "@@ -35,3 +35,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                " @Path(\"v2/Users\")",
                "-public interface UserService extends SCIMService<SCIMUser> {",
                "+public interface UserService extends SearchService<SCIMUser> {",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "index 498ea954c4..d2c76a898d 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "@@ -48,3 +48,3 @@ public class AddETagFilter implements ContainerResponseFilter {",
                "                     if (StringUtils.isNotBlank(etagValue)) {",
                "-                        resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());",
                "+                        resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue, true).toString());",
                "                     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "new file mode 100644",
                "index 0000000000..5eeca49bdd",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -0,0 +1,160 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import javax.ws.rs.core.Context;",
                "+import javax.ws.rs.core.UriInfo;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.jaxrs.ext.MessageContext;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.lib.to.AnyTO;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.core.logic.AbstractAnyLogic;",
                "+import org.apache.syncope.core.logic.GroupLogic;",
                "+import org.apache.syncope.core.logic.SCIMDataBinder;",
                "+import org.apache.syncope.core.logic.UserLogic;",
                "+import org.apache.syncope.core.logic.scim.SearchCondConverter;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.apache.syncope.ext.scimv2.api.service.SearchService;",
                "+",
                "+abstract class AbstractService<R extends SCIMResource> implements SearchService<R> {",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractService.class);",
                "+",
                "+    @Context",
                "+    protected UriInfo uriInfo;",
                "+",
                "+    @Context",
                "+    protected MessageContext messageContext;",
                "+",
                "+    private UserLogic userLogic;",
                "+",
                "+    private GroupLogic groupLogic;",
                "+",
                "+    private SCIMDataBinder binder;",
                "+",
                "+    protected UserLogic userLogic() {",
                "+        synchronized (this) {",
                "+            if (userLogic == null) {",
                "+                userLogic = ApplicationContextProvider.getApplicationContext().getBean(UserLogic.class);",
                "+            }",
                "+        }",
                "+        return userLogic;",
                "+    }",
                "+",
                "+    protected GroupLogic groupLogic() {",
                "+        synchronized (this) {",
                "+            if (groupLogic == null) {",
                "+                groupLogic = ApplicationContextProvider.getApplicationContext().getBean(GroupLogic.class);",
                "+            }",
                "+        }",
                "+        return groupLogic;",
                "+    }",
                "+",
                "+    protected SCIMDataBinder binder() {",
                "+        synchronized (this) {",
                "+            if (binder == null) {",
                "+                binder = ApplicationContextProvider.getApplicationContext().getBean(SCIMDataBinder.class);",
                "+            }",
                "+        }",
                "+        return binder;",
                "+    }",
                "+",
                "+    protected AbstractAnyLogic<?, ?> anyLogic(final Resource type) {",
                "+        switch (type) {",
                "+            case User:",
                "+                return userLogic();",
                "+",
                "+            case Group:",
                "+                return groupLogic();",
                "+",
                "+            default:",
                "+                throw new UnsupportedOperationException();",
                "+        }",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected ListResponse<R> doSearch(",
                "+            final Resource type,",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        if (type == null) {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(",
                "+                StringUtils.isBlank(filter) ? null : SearchCondConverter.convert(filter),",
                "+                startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1,",
                "+                AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                Collections.<OrderByClause>emptyList(),",
                "+                SyncopeConstants.ROOT_REALM,",
                "+                false);",
                "+",
                "+        ListResponse<R> response = new ListResponse<>(",
                "+                result.getLeft(), startIndex == null || startIndex <= 1 ? 1 : startIndex, AnyDAO.DEFAULT_PAGE_SIZE);",
                "+",
                "+        for (AnyTO anyTO : result.getRight()) {",
                "+            SCIMResource resource = null;",
                "+            if (anyTO instanceof UserTO) {",
                "+                resource = binder().toSCIMUser(",
                "+                        (UserTO) anyTO,",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+            } else if (anyTO instanceof GroupTO) {",
                "+                resource = binder().toSCIMGroup(",
                "+                        (GroupTO) anyTO,",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+            }",
                "+",
                "+            if (resource != null) {",
                "+                response.getResources().add((R) resource);",
                "+            }",
                "+        }",
                "+",
                "+        return response;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListResponse<R> search(",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        return doSearch(null, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "index 85b9198a05..d03b57c6b8 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -29,3 +29,3 @@ import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "-public class GroupServiceImpl extends AbstractSCIMService<SCIMGroup> implements GroupService {",
                "+public class GroupServiceImpl extends AbstractService<SCIMGroup> implements GroupService {",
                "@@ -40,3 +40,3 @@ public class GroupServiceImpl extends AbstractSCIMService<SCIMGroup> implements",
                "     public SCIMGroup read(final String id) {",
                "-        return toSCIMGroup(groupLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+        return binder().toSCIMGroup(groupLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMServiceImpl.java",
                "new file mode 100644",
                "index 0000000000..65e4ad1992",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMServiceImpl.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.core.logic.SCIMLogic;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "+import org.apache.syncope.ext.scimv2.api.service.SCIMService;",
                "+",
                "+public class SCIMServiceImpl extends AbstractService<SCIMResource> implements SCIMService {",
                "+",
                "+    private SCIMLogic scimLogic;",
                "+",
                "+    private SCIMLogic scimLogic() {",
                "+        synchronized (this) {",
                "+            if (scimLogic == null) {",
                "+                scimLogic = ApplicationContextProvider.getApplicationContext().getBean(SCIMLogic.class);",
                "+            }",
                "+        }",
                "+        return scimLogic;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ServiceProviderConfig serviceProviderConfig() {",
                "+        return scimLogic().serviceProviderConfig(uriInfo.getAbsolutePathBuilder());",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<ResourceType> resourceTypes() {",
                "+        return scimLogic().resourceTypes(uriInfo.getAbsolutePathBuilder());",
                "+    }",
                "+",
                "+    @Override",
                "+    public ResourceType resourceType(final String type) {",
                "+        return scimLogic().resourceType(uriInfo.getAbsolutePathBuilder(), type);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response schemas() {",
                "+        return Response.ok(scimLogic().schemas()).build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response schema(final String schema) {",
                "+        return Response.ok(scimLogic().schema(schema)).build();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index c12ed6c4d1..67b9b47b14 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -29,3 +29,3 @@ import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "-public class UserServiceImpl extends AbstractSCIMService<SCIMUser> implements UserService {",
                "+public class UserServiceImpl extends AbstractService<SCIMUser> implements UserService {",
                "@@ -40,3 +40,3 @@ public class UserServiceImpl extends AbstractSCIMService<SCIMUser> implements Us",
                "     public SCIMUser read(final String id) {",
                "-        return toSCIMUser(userLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+        return binder().toSCIMUser(userLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "     }",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 5e2e207b2c..f0871efe48 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -70,2 +70,8 @@ under the License.",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 87348ff9cd..80ed2e629c 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -167,3 +167,21 @@ under the License.",
                "       <scope>test</scope>",
                "-    </dependency>  ",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "     <dependency>",
                "@@ -1052,2 +1070,7 @@ under the License.",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+          <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+          <version>${project.version}</version>",
                "+        </dependency>",
                "         <dependency>"
            ],
            "changed_files": [
                "archetype/src/main/resources/archetype-resources/console/pom.xml",
                "archetype/src/main/resources/archetype-resources/core/pom.xml",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConf.java",
                "ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/rest/SCIMConfRestClient.java",
                "ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.html",
                "ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf.properties",
                "ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_it.properties",
                "ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_pt_BR.properties",
                "ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConf_ru.properties",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMComplexConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/AddressCanonicalType.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/EmailCanonicalType.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/IMCanonicalType.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhoneNumberCanonicalType.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/PhotoCanonicalType.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/types/SCIMEntitlement.java",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMComplexValue.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMEnterpriseInfo.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserAddress.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserManager.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUserName.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Value.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7cd228925e538bd7743a22ac923bdee4b30a32e6"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entitlement",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3a4535d9b1a85157333c028e52316287f77d3932",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510677297,
            "hunks": 5,
            "message": "[SYNCOPE-1229] It is now possible to properly delete all task executions",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "index d40cf37038..58c8f5731b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "@@ -44,2 +44,3 @@ import org.apache.syncope.common.lib.to.BulkAction;",
                " import org.apache.syncope.common.lib.to.BulkActionResult;",
                "+import org.apache.syncope.common.lib.to.ExecTO;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -140,3 +141,4 @@ public class BulkContent<T extends Serializable, S> extends MultilevelPanel.Seco",
                "                         try {",
                "-                            if (items.iterator().next() instanceof StatusBean) {",
                "+                            T singleItem = items.iterator().next();",
                "+                            if (singleItem instanceof StatusBean) {",
                "                                 throw new IllegalArgumentException(\"Invalid items\");",
                "@@ -144,14 +146,32 @@ public class BulkContent<T extends Serializable, S> extends MultilevelPanel.Seco",
                "-                            final BulkAction bulkAction = new BulkAction();",
                "-                            bulkAction.setType(BulkAction.Type.valueOf(actionToBeAddresed.name()));",
                "-                            for (T item : items) {",
                "-                                try {",
                "-                                    bulkAction.getTargets().add(getTargetId(item, keyFieldName).toString());",
                "-                                } catch (IllegalAccessException | InvocationTargetException e) {",
                "-                                    LOG.error(\"Error retrieving item id {}\", keyFieldName, e);",
                "+                            if (singleItem instanceof ExecTO) {",
                "+                                res = new BulkActionResult();",
                "+                                for (T item : items) {",
                "+                                    ExecTO exec = ExecTO.class.cast(item);",
                "+                                    String key = exec.getKey();",
                "+",
                "+                                    try {",
                "+                                        bulkActionExecutor.getClass().getMethod(\"deleteExecution\",",
                "+                                                String.class).invoke(bulkActionExecutor, exec.getKey());",
                "+                                        res.getResults().put(String.valueOf(key), BulkActionResult.Status.SUCCESS);",
                "+                                    } catch (Exception e) {",
                "+                                        LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), key, e);",
                "+                                        res.getResults().put(String.valueOf(key), BulkActionResult.Status.FAILURE);",
                "+                                    }",
                "                                 }",
                "+                            } else {",
                "+                                final BulkAction bulkAction = new BulkAction();",
                "+                                bulkAction.setType(BulkAction.Type.valueOf(actionToBeAddresed.name()));",
                "+                                for (T item : items) {",
                "+                                    try {",
                "+                                        bulkAction.getTargets().add(getTargetId(item, keyFieldName).toString());",
                "+                                    } catch (IllegalAccessException | InvocationTargetException e) {",
                "+                                        LOG.error(\"Error retrieving item id {}\", keyFieldName, e);",
                "+                                    }",
                "+                                }",
                "+                                res = BulkActionResult.class.cast(",
                "+                                        bulkActionExecutor.getClass().getMethod(\"bulkAction\",",
                "+                                                BulkAction.class).invoke(bulkActionExecutor, bulkAction));",
                "                             }",
                "-                            res = BulkActionResult.class.cast(",
                "-                                    bulkActionExecutor.getClass().getMethod(\"bulkAction\", BulkAction.class).invoke(",
                "-                                    bulkActionExecutor, bulkAction));",
                "+",
                "                         } catch (IllegalArgumentException biae) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1229": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4434d414511f9b730616dca0384d71321df971f5"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: execution",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1229",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f0018fe490d54397643edaa52a8d524472fca344",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512125073,
            "hunks": 152,
            "message": "[SYNCOPE-1241] Avoid carrying around PropagationTask (JPA) instances, use PropagationTaskTO instead",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java",
                "index ab6c066bf5..3ef94de352 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java",
                "@@ -45,2 +45,4 @@ public class PropagationTaskTO extends AbstractTaskTO {",
                "+    private String anyType;",
                "+",
                "     private String entityKey;",
                "@@ -103,2 +105,10 @@ public class PropagationTaskTO extends AbstractTaskTO {",
                "+    public String getAnyType() {",
                "+        return anyType;",
                "+    }",
                "+",
                "+    public void setAnyType(final String anyType) {",
                "+        this.anyType = anyType;",
                "+    }",
                "+",
                "     public String getEntityKey() {",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "index a0e888f687..4c2a8cc952 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "@@ -28,2 +28,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "@@ -43,3 +44,2 @@ import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;",
                "@@ -123,3 +123,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "         });",
                "-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);",
                "@@ -145,3 +145,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);",
                "@@ -188,3 +188,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "         });",
                "-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "index 8bdb059485..834458d946 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "@@ -33,2 +33,3 @@ import org.apache.syncope.common.lib.to.ExecTO;",
                " import org.apache.syncope.common.lib.to.JobTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.SchedTaskTO;",
                "@@ -45,3 +46,2 @@ import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                " import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.SchedTask;",
                "@@ -193,6 +193,8 @@ public class TaskLogic extends AbstractExecutableLogic<AbstractTaskTO> {",
                "+        TaskUtils taskUtil = taskUtilsFactory.getInstance(task);",
                "+",
                "         ExecTO result = null;",
                "-        switch (taskUtilsFactory.getInstance(task).getType()) {",
                "+        switch (taskUtil.getType()) {",
                "             case PROPAGATION:",
                "-                TaskExec propExec = taskExecutor.execute((PropagationTask) task);",
                "+                TaskExec propExec = taskExecutor.execute((PropagationTaskTO) binder.getTaskTO(task, taskUtil, false));",
                "                 result = binder.getExecTO(propExec);",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java",
                "index 6f080e1895..62b43ae93d 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.common.lib.patch.AnyPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -29,3 +30,2 @@ import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "@@ -72,3 +72,3 @@ public class UserWorkflowLogic extends AbstractTransactionalLogic<WorkflowFormTO",
                "-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(",
                "                 new WorkflowResult<>(",
                "@@ -106,3 +106,3 @@ public class UserWorkflowLogic extends AbstractTransactionalLogic<WorkflowFormTO",
                "-            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(",
                "+            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(",
                "                     new WorkflowResult<>(",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "index caadb5bfec..6994a47f63 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.common.lib.patch.UserPatch;",
                " import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -28,3 +29,2 @@ import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -43,3 +43,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getCreateTasks(",
                "+    List<PropagationTaskTO> getCreateTasks(",
                "             AnyTypeKind kind,",
                "@@ -61,3 +61,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getUserCreateTasks(",
                "+    List<PropagationTaskTO> getUserCreateTasks(",
                "             String key,",
                "@@ -81,3 +81,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getUpdateTasks(",
                "+    List<PropagationTaskTO> getUpdateTasks(",
                "             AnyTypeKind kind,",
                "@@ -98,3 +98,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getUserUpdateTasks(",
                "+    List<PropagationTaskTO> getUserUpdateTasks(",
                "             WorkflowResult<Pair<UserPatch, Boolean>> wfResult,",
                "@@ -110,3 +110,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);",
                "+    List<PropagationTaskTO> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);",
                "@@ -121,3 +121,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> getDeleteTasks(",
                "+    List<PropagationTaskTO> getDeleteTasks(",
                "             AnyTypeKind kind,",
                "@@ -135,3 +135,3 @@ public interface PropagationManager {",
                "      */",
                "-    List<PropagationTask> createTasks(",
                "+    List<PropagationTaskTO> createTasks(",
                "             Realm realm,",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java",
                "index d96b1a7397..a27f02a5b5 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java",
                "@@ -23,4 +23,4 @@ import java.util.List;",
                " import org.apache.syncope.common.lib.to.PropagationStatus;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.identityconnectors.framework.common.objects.ConnectorObject;",
                "@@ -38,3 +38,3 @@ public interface PropagationReporter {",
                "      */",
                "-    void onPriorityResourceFailure(String failingResource, Collection<PropagationTask> tasks);",
                "+    void onPriorityResourceFailure(String failingResource, Collection<PropagationTaskTO> tasks);",
                "@@ -51,3 +51,3 @@ public interface PropagationReporter {",
                "     void onSuccessOrNonPriorityResourceFailures(",
                "-            PropagationTask propagationTask,",
                "+            PropagationTaskTO propagationTask,",
                "             PropagationTaskExecStatus execStatus,",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "index 84c486473b..d1e9c10ca1 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "@@ -21,3 +21,3 @@ package org.apache.syncope.core.provisioning.api.propagation;",
                " import java.util.concurrent.Callable;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.core.persistence.api.entity.task.TaskExec;",
                "@@ -28,3 +28,3 @@ public interface PropagationTaskCallable extends Callable<TaskExec> {",
                "-    void setTask(PropagationTask task);",
                "+    void setTaskTO(PropagationTaskTO taskTO);",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "index af661898da..af3bfc3487 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "@@ -21,3 +21,3 @@ package org.apache.syncope.core.provisioning.api.propagation;",
                " import java.util.Collection;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.core.persistence.api.entity.task.TaskExec;",
                "@@ -27,3 +27,3 @@ import org.apache.syncope.core.persistence.api.entity.task.TaskExec;",
                "  *",
                "- * @see PropagationTask",
                "+ * @see PropagationTaskTO",
                "  */",
                "@@ -49,3 +49,3 @@ public interface PropagationTaskExecutor {",
                "      */",
                "-    TaskExec execute(PropagationTask task);",
                "+    TaskExec execute(PropagationTaskTO task);",
                "@@ -60,3 +60,3 @@ public interface PropagationTaskExecutor {",
                "      */",
                "-    PropagationReporter execute(Collection<PropagationTask> tasks, boolean nullPriorityAsync);",
                "+    PropagationReporter execute(Collection<PropagationTaskTO> tasks, boolean nullPriorityAsync);",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "index e126281823..bffc136ed9 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.common.lib.to.PropagationStatus;",
                " import org.apache.syncope.common.lib.to.AnyObjectTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -33,3 +34,2 @@ import org.apache.syncope.common.lib.types.ResourceOperation;",
                " import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;",
                "@@ -77,3 +77,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "-        List<PropagationTask> tasks = propagationManager.getCreateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(",
                "                 AnyTypeKind.ANY_OBJECT,",
                "@@ -102,3 +102,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(",
                "                 AnyTypeKind.ANY_OBJECT,",
                "@@ -133,3 +133,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "         // impossible by NotificationManager to fetch required user information",
                "-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(",
                "                 AnyTypeKind.ANY_OBJECT,",
                "@@ -166,3 +166,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(",
                "                 AnyTypeKind.ANY_OBJECT,",
                "@@ -186,3 +186,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(",
                "                 AnyTypeKind.ANY_OBJECT,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "index 7ff1156d3f..ebf13765ef 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "@@ -35,2 +35,3 @@ import org.apache.syncope.common.lib.to.PropagationStatus;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -38,3 +39,2 @@ import org.apache.syncope.common.lib.types.ResourceOperation;",
                " import org.apache.syncope.core.persistence.api.dao.GroupDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;",
                "@@ -75,3 +75,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = propagationManager.getCreateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(",
                "                 AnyTypeKind.GROUP,",
                "@@ -102,3 +102,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = propagationManager.getCreateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(",
                "                 AnyTypeKind.GROUP,",
                "@@ -127,3 +127,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(",
                "                 AnyTypeKind.GROUP,",
                "@@ -150,3 +150,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = new ArrayList<>();",
                "+        List<PropagationTaskTO> tasks = new ArrayList<>();",
                "@@ -197,3 +197,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(",
                "                 AnyTypeKind.GROUP,",
                "@@ -217,3 +217,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(",
                "                 AnyTypeKind.GROUP,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java",
                "index a123683cea..e507bbdcd9 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java",
                "@@ -33,2 +33,3 @@ import org.apache.syncope.common.lib.patch.UserPatch;",
                " import org.apache.syncope.common.lib.to.PropagationStatus;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -43,3 +44,2 @@ import org.apache.syncope.common.lib.types.ResourceOperation;",
                " import org.apache.syncope.common.lib.types.StatusPatchType;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.propagation.PropagationException;",
                "@@ -101,3 +101,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getUserCreateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserCreateTasks(",
                "                 created.getResult().getLeft(),",
                "@@ -117,3 +117,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);",
                "         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);",
                "@@ -175,3 +175,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(",
                "                 updated, updated.getResult().getLeft().getPassword() != null, excludedResources);",
                "@@ -200,3 +200,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "         // impossible by NotificationManager to fetch required user information",
                "-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(",
                "                 AnyTypeKind.USER,",
                "@@ -265,3 +265,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "         propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());",
                "-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(",
                "                 AnyTypeKind.USER,",
                "@@ -287,6 +287,5 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(",
                "-                    new WorkflowResult<>(",
                "-                            Pair.of(userPatch, Boolean.FALSE),",
                "-                            updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));",
                "+            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(new WorkflowResult<>(",
                "+                    Pair.of(userPatch, Boolean.FALSE),",
                "+                    updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));",
                "             taskExecutor.execute(tasks, false);",
                "@@ -323,3 +322,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);",
                "         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);",
                "@@ -336,3 +335,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(",
                "+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(",
                "                 AnyTypeKind.USER,",
                "@@ -357,3 +356,3 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {",
                "-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);",
                "+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index de5513082c..b22d175019 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.provisioning.java.propagation;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -29,2 +30,3 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.common.lib.collections.IteratorChain;",
                "@@ -65,2 +67,3 @@ import org.apache.syncope.core.provisioning.api.notification.NotificationManager",
                " import org.apache.syncope.core.provisioning.api.propagation.PropagationException;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                " import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "@@ -156,3 +159,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "     @Override",
                "-    public TaskExec execute(final PropagationTask task) {",
                "+    public TaskExec execute(final PropagationTaskTO task) {",
                "         return execute(task, null);",
                "@@ -333,3 +336,18 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "-    protected TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {",
                "+    protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {",
                "+        PropagationTask task = entityFactory.newEntity(PropagationTask.class);",
                "+        task.setResource(resourceDAO.find(taskTO.getResource()));",
                "+        task.setObjectClassName(taskTO.getObjectClassName());",
                "+        task.setAnyTypeKind(taskTO.getAnyTypeKind());",
                "+        task.setAnyType(taskTO.getAnyType());",
                "+        task.setEntityKey(taskTO.getEntityKey());",
                "+        task.setOperation(taskTO.getOperation());",
                "+        task.setConnObjectKey(taskTO.getConnObjectKey());",
                "+        task.setOldConnObjectKey(taskTO.getOldConnObjectKey());",
                "+        Set<Attribute> attributes = new HashSet<>();",
                "+        if (StringUtils.isNotBlank(taskTO.getAttributes())) {",
                "+            attributes.addAll(Arrays.asList(POJOHelper.deserialize(taskTO.getAttributes(), Attribute[].class)));",
                "+        }",
                "+        task.setAttributes(attributes);",
                "+",
                "         List<PropagationActions> actions = getPropagationActions(task.getResource());",
                "@@ -461,5 +479,2 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "-                // ensure that the resource instance is refreshed, as it might have been read from another thread",
                "-                task.setResource(resourceDAO.find(task.getResource().getKey()));",
                "-",
                "                 taskDAO.save(task);",
                "@@ -471,3 +486,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "                 reporter.onSuccessOrNonPriorityResourceFailures(",
                "-                        task,",
                "+                        taskTO,",
                "                         PropagationTaskExecStatus.valueOf(execution.getStatus()),",
                "@@ -492,3 +507,2 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "             ExecTO execTO = taskDataBinder.getExecTO(execution);",
                "-            PropagationTaskTO taskTO = taskDataBinder.getTaskTO(task, taskUtilsFactory.getInstance(task), false);",
                "             notificationManager.createTasks(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource,",
                "@@ -511,6 +525,6 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "     protected abstract void doExecute(",
                "-            Collection<PropagationTask> tasks, PropagationReporter reporter, boolean nullPriorityAsync);",
                "+            Collection<PropagationTaskTO> tasks, PropagationReporter reporter, boolean nullPriorityAsync);",
                "     @Override",
                "-    public PropagationReporter execute(final Collection<PropagationTask> tasks, final boolean nullPriorityAsync) {",
                "+    public PropagationReporter execute(final Collection<PropagationTaskTO> tasks, final boolean nullPriorityAsync) {",
                "         PropagationReporter reporter = new DefaultPropagationReporter();",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java",
                "index c07431ccec..2932147bb6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java",
                "@@ -26,2 +26,3 @@ import java.util.Optional;",
                " import org.apache.syncope.common.lib.to.PropagationStatus;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;",
                "@@ -48,3 +49,3 @@ public class DefaultPropagationReporter implements PropagationReporter {",
                "     public void onSuccessOrNonPriorityResourceFailures(",
                "-            final PropagationTask propagationTask,",
                "+            final PropagationTaskTO taskTO,",
                "             final PropagationTaskExecStatus executionStatus,",
                "@@ -55,3 +56,3 @@ public class DefaultPropagationReporter implements PropagationReporter {",
                "         PropagationStatus status = new PropagationStatus();",
                "-        status.setResource(propagationTask.getResource().getKey());",
                "+        status.setResource(taskTO.getResource());",
                "         status.setStatus(executionStatus);",
                "@@ -71,7 +72,7 @@ public class DefaultPropagationReporter implements PropagationReporter {",
                "     @Override",
                "-    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTask> tasks) {",
                "+    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTaskTO> tasks) {",
                "         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);",
                "-        Optional<PropagationTask> propagationTask = tasks.stream().",
                "-                filter(task -> task.getResource().getKey().equals(failingResource)).findFirst();",
                "+        Optional<PropagationTaskTO> propagationTask = tasks.stream().",
                "+                filter(task -> task.getResource().equals(failingResource)).findFirst();",
                "@@ -79,3 +80,3 @@ public class DefaultPropagationReporter implements PropagationReporter {",
                "             PropagationStatus status = new PropagationStatus();",
                "-            status.setResource(propagationTask.get().getResource().getKey());",
                "+            status.setResource(propagationTask.get().getResource());",
                "             status.setStatus(PropagationTaskExecStatus.FAILURE);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "index e13864ef15..e714a5f86b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "@@ -21,5 +21,5 @@ package org.apache.syncope.core.provisioning.java.propagation;",
                " import java.util.Collection;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.TaskExec;",
                "@@ -50,3 +50,3 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "-    protected PropagationTask task;",
                "+    protected PropagationTaskTO taskTO;",
                "@@ -69,4 +69,4 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "     @Override",
                "-    public void setTask(final PropagationTask task) {",
                "-        this.task = task;",
                "+    public void setTaskTO(final PropagationTaskTO taskTO) {",
                "+        this.taskTO = taskTO;",
                "     }",
                "@@ -86,7 +86,7 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "-        LOG.debug(\"Execution started for {}\", task);",
                "+        LOG.debug(\"Execution started for {}\", taskTO);",
                "-        TaskExec execution = executor.execute(task, reporter);",
                "+        TaskExec execution = executor.execute(taskTO, reporter);",
                "-        LOG.debug(\"Execution completed for {}, {}\", task, execution);",
                "+        LOG.debug(\"Execution completed for {}, {}\", taskTO, execution);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "index c7f9ee5fb9..1b583e0c24 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "@@ -33,7 +33,9 @@ import java.util.concurrent.Future;",
                " import java.util.concurrent.TimeUnit;",
                "+import java.util.function.Function;",
                " import java.util.stream.Collectors;",
                " import javax.annotation.Resource;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.TaskExec;",
                "@@ -61,3 +63,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "      *",
                "-     * @param task to be executed",
                "+     * @param taskTO to be executed",
                "      * @param reporter to report propagation execution status",
                "@@ -67,3 +69,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "     protected PropagationTaskCallable newPropagationTaskCallable(",
                "-            final PropagationTask task, final PropagationReporter reporter) {",
                "+            final PropagationTaskTO taskTO, final PropagationReporter reporter) {",
                "@@ -72,3 +74,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "         callable.setExecutor(this);",
                "-        callable.setTask(task);",
                "+        callable.setTaskTO(taskTO);",
                "         callable.setReporter(reporter);",
                "@@ -80,3 +82,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "     protected void doExecute(",
                "-            final Collection<PropagationTask> tasks,",
                "+            final Collection<PropagationTaskTO> tasks,",
                "             final PropagationReporter reporter,",
                "@@ -84,8 +86,11 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "-        List<PropagationTask> prioritizedTasks = tasks.stream().",
                "-                filter(task -> task.getResource().getPropagationPriority() != null).collect(Collectors.toList());",
                "-        Collections.sort(prioritizedTasks, new PriorityComparator());",
                "+        Map<PropagationTaskTO, ExternalResource> taskToResource = tasks.stream().",
                "+                collect(Collectors.toMap(Function.identity(), task -> resourceDAO.find(task.getResource())));",
                "+",
                "+        List<PropagationTaskTO> prioritizedTasks = tasks.stream().",
                "+                filter(task -> taskToResource.get(task).getPropagationPriority() != null).collect(Collectors.toList());",
                "+        Collections.sort(prioritizedTasks, new PriorityComparator(taskToResource));",
                "         LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);",
                "-        Collection<PropagationTask> concurrentTasks = tasks.stream().",
                "+        Collection<PropagationTaskTO> concurrentTasks = tasks.stream().",
                "                 filter(task -> !prioritizedTasks.contains(task)).collect(Collectors.toSet());",
                "@@ -105,4 +110,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "             if (execStatus != PropagationTaskExecStatus.SUCCESS) {",
                "-                throw new PropagationException(",
                "-                        task.getResource().getKey(), execution == null ? null : execution.getMessage());",
                "+                throw new PropagationException(task.getResource(), execution == null ? null : execution.getMessage());",
                "             }",
                "@@ -112,3 +116,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "         final CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);",
                "-        Map<PropagationTask, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());",
                "+        Map<PropagationTaskTO, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());",
                "         concurrentTasks.forEach(task -> {",
                "@@ -157,3 +161,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "      */",
                "-    protected static class PriorityComparator implements Comparator<PropagationTask>, Serializable {",
                "+    protected static class PriorityComparator implements Comparator<PropagationTaskTO>, Serializable {",
                "@@ -161,6 +165,12 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "+        private final Map<PropagationTaskTO, ExternalResource> taskToResource;",
                "+",
                "+        public PriorityComparator(final Map<PropagationTaskTO, ExternalResource> taskToResource) {",
                "+            this.taskToResource = taskToResource;",
                "+        }",
                "+",
                "         @Override",
                "-        public int compare(final PropagationTask task1, final PropagationTask task2) {",
                "-            int prop1 = task1.getResource().getPropagationPriority();",
                "-            int prop2 = task2.getResource().getPropagationPriority();",
                "+        public int compare(final PropagationTaskTO task1, final PropagationTaskTO task2) {",
                "+            int prop1 = taskToResource.get(task1).getPropagationPriority();",
                "+            int prop2 = taskToResource.get(task2).getPropagationPriority();",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "index fb48708dce..f9986cba7a 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "@@ -33,2 +33,3 @@ import org.apache.syncope.common.lib.patch.UserPatch;",
                " import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -40,3 +41,2 @@ import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                " import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -58,2 +58,3 @@ import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                " import org.apache.syncope.core.provisioning.api.MappingManager;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                " import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "@@ -134,3 +135,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getCreateTasks(",
                "+    public List<PropagationTaskTO> getCreateTasks(",
                "             final AnyTypeKind kind,",
                "@@ -145,3 +146,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getUserCreateTasks(",
                "+    public List<PropagationTaskTO> getUserCreateTasks(",
                "             final String key,",
                "@@ -156,3 +157,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-    protected List<PropagationTask> getCreateTasks(",
                "+    protected List<PropagationTaskTO> getCreateTasks(",
                "             final Any<?> any,",
                "@@ -165,3 +166,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "         if (propByRes == null || propByRes.isEmpty()) {",
                "-            return Collections.<PropagationTask>emptyList();",
                "+            return Collections.<PropagationTaskTO>emptyList();",
                "         }",
                "@@ -176,3 +177,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getUpdateTasks(",
                "+    public List<PropagationTaskTO> getUpdateTasks(",
                "             final AnyTypeKind kind,",
                "@@ -189,3 +190,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getUserUpdateTasks(",
                "+    public List<PropagationTaskTO> getUserUpdateTasks(",
                "             final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,",
                "@@ -207,3 +208,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {",
                "+    public List<PropagationTaskTO> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {",
                "         UserPatch userPatch = wfResult.getResult().getKey();",
                "@@ -211,3 +212,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "         // Propagate password update only to requested resources",
                "-        List<PropagationTask> tasks = new ArrayList<>();",
                "+        List<PropagationTaskTO> tasks = new ArrayList<>();",
                "         if (userPatch.getPassword() == null) {",
                "@@ -249,3 +250,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-    protected List<PropagationTask> getUpdateTasks(",
                "+    protected List<PropagationTaskTO> getUpdateTasks(",
                "             final Any<?> any,",
                "@@ -273,3 +274,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> getDeleteTasks(",
                "+    public List<PropagationTaskTO> getDeleteTasks(",
                "             final AnyTypeKind kind,",
                "@@ -296,3 +297,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-    protected List<PropagationTask> getDeleteTasks(",
                "+    protected List<PropagationTaskTO> getDeleteTasks(",
                "             final Any<?> any,",
                "@@ -316,3 +317,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "      */",
                "-    protected List<PropagationTask> createTasks(final Any<?> any,",
                "+    protected List<PropagationTaskTO> createTasks(final Any<?> any,",
                "             final String password, final boolean changePwd,",
                "@@ -360,3 +361,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-        List<PropagationTask> tasks = new ArrayList<>();",
                "+        List<PropagationTaskTO> tasks = new ArrayList<>();",
                "@@ -378,4 +379,4 @@ public class PropagationManagerImpl implements PropagationManager {",
                "             } else {",
                "-                PropagationTask task = entityFactory.newEntity(PropagationTask.class);",
                "-                task.setResource(resource);",
                "+                PropagationTaskTO task = new PropagationTaskTO();",
                "+                task.setResource(resource.getKey());",
                "                 task.setObjectClassName(provision.getObjectClass().getObjectClassValue());",
                "@@ -420,3 +421,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-                task.setAttributes(preparedAttrs.getValue());",
                "+                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));",
                "@@ -432,3 +433,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "     @Override",
                "-    public List<PropagationTask> createTasks(",
                "+    public List<PropagationTaskTO> createTasks(",
                "             final Realm realm,",
                "@@ -447,3 +448,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-        List<PropagationTask> tasks = new ArrayList<>();",
                "+        List<PropagationTaskTO> tasks = new ArrayList<>();",
                "@@ -461,4 +462,4 @@ public class PropagationManagerImpl implements PropagationManager {",
                "             } else {",
                "-                PropagationTask task = entityFactory.newEntity(PropagationTask.class);",
                "-                task.setResource(resource);",
                "+                PropagationTaskTO task = new PropagationTaskTO();",
                "+                task.setResource(resource.getKey());",
                "                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());",
                "@@ -470,3 +471,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "                 task.setConnObjectKey(preparedAttrs.getKey());",
                "-                task.setAttributes(preparedAttrs.getValue());",
                "+                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index dae9b89050..c274dc6898 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -26,2 +26,3 @@ import org.apache.commons.lang3.exception.ExceptionUtils;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.RealmTO;",
                "@@ -42,3 +43,2 @@ import org.apache.syncope.core.persistence.api.entity.Realm;",
                " import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "@@ -238,3 +238,3 @@ public class DefaultRealmPullResultHandler",
                "             }",
                "-            List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+            List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "             taskExecutor.execute(tasks, false);",
                "@@ -321,3 +321,3 @@ public class DefaultRealmPullResultHandler",
                "-                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "                         taskExecutor.execute(tasks, false);",
                "@@ -609,3 +609,3 @@ public class DefaultRealmPullResultHandler",
                "                         }",
                "-                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "                         taskExecutor.execute(tasks, false);",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java",
                "index b84d9db529..3d35c937c0 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java",
                "@@ -26,4 +26,4 @@ import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -43,3 +43,3 @@ public class ConfirmPasswordResetProducer extends AbstractProducer {",
                "-            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);",
                "+            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(updated);",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "index 40a6f33991..7b49da6265 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "@@ -33,5 +33,5 @@ import org.apache.syncope.common.lib.to.AttrTO;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -57,3 +57,3 @@ public class CreateProducer extends AbstractProducer {",
                "-                List<PropagationTask> tasks = getPropagationManager().getUserCreateTasks(",
                "+                List<PropagationTaskTO> tasks = getPropagationManager().getUserCreateTasks(",
                "                         created.getResult().getKey(),",
                "@@ -79,3 +79,3 @@ public class CreateProducer extends AbstractProducer {",
                "-                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(",
                "+                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(",
                "                             AnyTypeKind.GROUP,",
                "@@ -89,3 +89,3 @@ public class CreateProducer extends AbstractProducer {",
                "                 } else {",
                "-                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(",
                "+                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(",
                "                             actual instanceof AnyObjectTO ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java",
                "index 35784612d6..2f22b1b27f 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java",
                "@@ -27,2 +27,3 @@ import org.apache.camel.Endpoint;",
                " import org.apache.camel.Exchange;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -30,3 +31,2 @@ import org.apache.syncope.common.lib.types.ResourceOperation;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                "@@ -60,3 +60,3 @@ public class DeleteProducer extends AbstractProducer {",
                "         if (null != getAnyTypeKind()) {",
                "-            List<PropagationTask> tasks;",
                "+            List<PropagationTaskTO> tasks;",
                "             PropagationReporter propagationReporter;",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java",
                "index 50f2713d23..5521782981 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java",
                "@@ -25,2 +25,3 @@ import org.apache.camel.Endpoint;",
                " import org.apache.camel.Exchange;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -30,3 +31,2 @@ import org.apache.syncope.core.persistence.api.dao.GroupDAO;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                "@@ -64,3 +64,3 @@ public class DeprovisionProducer extends AbstractProducer {",
                "             PropagationByResource propByRes = new PropagationByResource();",
                "-            List<PropagationTask> tasks;",
                "+            List<PropagationTaskTO> tasks;",
                "             PropagationReporter propagationReporter;",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java",
                "index 2377d4bd6c..fe533c16a3 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java",
                "@@ -30,2 +30,3 @@ import org.apache.syncope.common.lib.patch.StringPatchItem;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -33,3 +34,2 @@ import org.apache.syncope.common.lib.types.PatchOperation;",
                " import org.apache.syncope.common.lib.types.ResourceOperation;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                "@@ -72,3 +72,3 @@ public class ProvisionProducer extends AbstractProducer {",
                "-            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);",
                "+            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);",
                "             PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);",
                "@@ -85,3 +85,3 @@ public class ProvisionProducer extends AbstractProducer {",
                "-            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(",
                "+            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(",
                "                     anyTypeKind,",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java",
                "index 8fa02ad096..96983a4521 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.common.lib.patch.StatusPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -33,3 +34,2 @@ import org.apache.syncope.common.lib.types.StatusPatchType;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "@@ -94,3 +94,3 @@ public class StatusProducer extends AbstractProducer {",
                "             propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());",
                "-            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(",
                "+            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(",
                "                     AnyTypeKind.USER,",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java",
                "index ac43c7f99b..27feae8119 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java",
                "@@ -26,4 +26,4 @@ import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -48,3 +48,3 @@ public class SuspendProducer extends AbstractProducer {",
                "-                List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(",
                "+                List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(",
                "                         new WorkflowResult<>(",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java",
                "index bbff7e234b..f89182b171 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java",
                "@@ -29,4 +29,4 @@ import org.apache.syncope.common.lib.patch.AnyPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;",
                " import org.apache.syncope.core.provisioning.api.WorkflowResult;",
                "@@ -52,3 +52,3 @@ public class UpdateProducer extends AbstractProducer {",
                "-                List<PropagationTask> tasks;",
                "+                List<PropagationTaskTO> tasks;",
                "                 if (isPull()) {",
                "@@ -68,3 +68,3 @@ public class UpdateProducer extends AbstractProducer {",
                "-                List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(",
                "+                List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(",
                "                         actual instanceof AnyObjectPatch ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1241": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f7dcee1a7672e9a6ce1cbd5af24dcd3a92e5eed6"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1241",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48cc9d6acda6bc28fdfca1a73a3d4f8df2e4460a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516971393,
            "hunks": 87,
            "message": "[SYNCOPE-1262] Adding authorizations",
            "diff": [
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index 482e881e19..7f848b745c 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -50,2 +50,7 @@ under the License.",
                "+    <dependency>",
                "+      <groupId>io.swagger</groupId>",
                "+      <artifactId>swagger-annotations</artifactId>",
                "+    </dependency>      ",
                "+",
                "     <dependency>",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "index c66b7f3cfa..4b2fc5c75c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "@@ -20,2 +20,5 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.ApiOperation;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.ws.rs.BeanParam;",
                "@@ -34,2 +37,3 @@ import org.apache.syncope.common.rest.api.beans.AccessTokenQuery;",
                "  */",
                "+@Api(tags = \"AccessTokens\")",
                " @Path(\"accessTokens\")",
                "@@ -43,2 +47,4 @@ public interface AccessTokenService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\") })",
                "     @POST",
                "@@ -53,2 +59,4 @@ public interface AccessTokenService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"Bearer\") })",
                "     @POST",
                "@@ -62,2 +70,4 @@ public interface AccessTokenService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"Bearer\") })",
                "     @POST",
                "@@ -72,2 +82,5 @@ public interface AccessTokenService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @GET",
                "@@ -81,2 +94,5 @@ public interface AccessTokenService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @DELETE",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "index d5675ea8b0..6902227c48 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.NotNull;",
                "@@ -35,2 +37,5 @@ import org.apache.syncope.common.lib.to.AnyObjectTO;",
                "  */",
                "+@Api(tags = \"AnyObjects\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"anyObjects\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "index 74846a19b9..311ea9cb17 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.AnyTypeClassTO;",
                "  */",
                "+@Api(tags = \"AnyTypeClasses\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"anyTypeClasses\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "index 667009c52f..836889f588 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.AnyTypeTO;",
                "  */",
                "+@Api(tags = \"AnyTypes\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"anyTypes\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "index add8bd200d..aba2f44922 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -36,2 +38,5 @@ import org.apache.syncope.common.lib.to.AttrTO;",
                "  */",
                "+@Api(tags = \"Configuration\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"configurations\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "index f7f0466f15..26dc7fdb8c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -35,2 +37,5 @@ import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;",
                "  */",
                "+@Api(tags = \"ConnectorHistory\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"connectorsHistory\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "index 4a1adfe9e3..f78f4a94ec 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -41,2 +43,5 @@ import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                "  */",
                "+@Api(tags = \"Connectors\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"connectors\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "index 2e343b99c7..b8592c82d8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.DomainTO;",
                "  */",
                "+@Api(tags = \"Domains\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"domains\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "index 1ebea81eef..9b5549448b 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.DynRealmTO;",
                "  */",
                "+@Api(tags = \"DynamicRealms\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"dynRealms\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "index 7bba846e34..4d645806dc 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -40,2 +42,5 @@ import org.apache.syncope.common.lib.types.BulkMembersActionType;",
                "  */",
                "+@Api(tags = \"Groups\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"groups\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "index 9ff841353c..d4839616a1 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.ImplementationType;",
                "  */",
                "+@Api(tags = \"Implementations\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"implementations\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "index b1d889c1b7..23e8207409 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -40,2 +42,5 @@ import org.apache.syncope.common.lib.types.LoggerType;",
                "  */",
                "+@Api(tags = \"Loggers\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"loggers\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "index 1cd8e73d7d..20f87d1d95 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.io.InputStream;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.MailTemplateFormat;",
                "  */",
                "+@Api(tags = \"MailTemplates\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"mailTemplates\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "index 458ae63ef6..ba0f4c81cb 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -40,2 +42,6 @@ import org.apache.syncope.common.lib.types.JobAction;",
                "  */",
                "+@Api(tags = \"Notifications\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                "+",
                " @Path(\"notifications\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "index 7c621961ac..082446aab1 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.PolicyType;",
                "  */",
                "+@Api(tags = \"Policies\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"policies\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "index f096082243..a178531790 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.RealmTO;",
                "  */",
                "+@Api(tags = \"Realms\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"realms\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "index dfd516f585..74b5ae62e6 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.RelationshipTypeTO;",
                "  */",
                "+@Api(tags = \"RelationshipTypes\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"relationshipTypes\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "index 4db9321340..b2a91f15ed 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.ReportExecExportFormat;",
                "  */",
                "+@Api(tags = \"Reports\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"reports\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "index 6bfb151721..247bece987 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.io.InputStream;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.ReportTemplateFormat;",
                "  */",
                "+@Api(tags = \"ReportTemplates\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"reportTemplates\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "index 67c8d588a8..30dd52364e 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -35,2 +37,5 @@ import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;",
                "  */",
                "+@Api(tags = \"ResourceHistory\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"resourcesHistory\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "index e6adc5a460..bb7cbb9b19 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -43,2 +45,5 @@ import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;",
                "  */",
                "+@Api(tags = \"Resources\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"resources\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "index 557db7666c..0c961ee76f 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.io.InputStream;",
                "@@ -38,2 +40,5 @@ import org.apache.syncope.common.lib.to.RoleTO;",
                "  */",
                "+@Api(tags = \"Roles\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"roles\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "index 51403bde51..d60d1b286c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -40,2 +42,5 @@ import org.apache.syncope.common.rest.api.beans.SchemaQuery;",
                "  */",
                "+@Api(tags = \"Schemas\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"schemas\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "index 9b43250d7f..2d5b86eab8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.lib.to.SecurityQuestionTO;",
                "  */",
                "+@Api(tags = \"SecurityQuestions\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"securityQuestions\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "index e7819644f8..53d4bec8dc 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.Min;",
                "@@ -40,2 +42,5 @@ import org.apache.syncope.common.lib.to.TypeExtensionTO;",
                "  */",
                "+@Api(tags = \"Syncope\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "index 205e6cd1e2..dac39bb01b 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.NotNull;",
                "@@ -44,2 +46,5 @@ import org.apache.syncope.common.rest.api.beans.TaskQuery;",
                "  */",
                "+@Api(tags = \"Tasks\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"tasks\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "index f28d894bab..524f51e7e3 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "@@ -20,2 +20,5 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.ApiOperation;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.NotNull;",
                "@@ -40,2 +43,3 @@ import org.apache.syncope.common.lib.to.UserTO;",
                "  */",
                "+@Api(tags = \"UserSelf\")",
                " @Path(\"users/self\")",
                "@@ -49,2 +53,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @GET",
                "@@ -73,2 +80,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @PATCH",
                "@@ -85,2 +95,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @PUT",
                "@@ -98,2 +111,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @POST",
                "@@ -109,2 +125,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @DELETE",
                "@@ -120,2 +139,5 @@ public interface UserSelfService extends JAXRSService {",
                "      */",
                "+    @ApiOperation(value = \"\", authorizations = {",
                "+        @Authorization(value = \"BasicAuthentication\")",
                "+        , @Authorization(value = \"Bearer\") })",
                "     @POST",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "index 6525283691..a9d9fa675c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.NotNull;",
                "@@ -38,2 +40,5 @@ import org.apache.syncope.common.lib.to.UserTO;",
                "  */",
                "+@Api(tags = \"Users\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"users\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "index a4ecc46764..e1e79604b0 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -35,2 +37,5 @@ import org.apache.syncope.common.lib.to.WorkflowFormTO;",
                "  */",
                "+@Api(tags = \"UserWorkflow\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"userworkflow\")",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "index fcd6751d2d..1a81c9288c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -37,2 +39,5 @@ import org.apache.syncope.common.rest.api.RESTHeaders;",
                "  */",
                "+@Api(tags = \"Workflow\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"workflows\")",
                "diff --git a/core/rest-cxf/src/main/resources/restCXFContext.xml b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "index 2b79b316a3..6e6d778808 100644",
                "--- a/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "+++ b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "@@ -99,5 +99,10 @@ under the License.",
                "+  <bean id=\"basicAuth\" class=\"io.swagger.models.auth.BasicAuthDefinition\"/>",
                "+  <bean id=\"bearer\" class=\"io.swagger.models.auth.ApiKeyAuthDefinition\">",
                "+    <property name=\"name\" value=\"Authorization\"/>",
                "+    <property name=\"in\" value=\"HEADER\"/>",
                "+  </bean>",
                "   <bean id=\"swagger2customizer\" class=\"org.apache.syncope.core.rest.cxf.SyncopeSwagger2Customizer\">",
                "     <property name=\"dynamicBasePath\" value=\"true\"/>",
                "-    <property name=\"replaceTags\" value=\"true\"/>",
                "+    <property name=\"replaceTags\" value=\"false\"/>",
                "   </bean>",
                "@@ -114,2 +119,9 @@ under the License.",
                "     <property name=\"customizer\" ref=\"swagger2customizer\"/>",
                "+    ",
                "+    <property name=\"securityDefinitions\">",
                "+      <map>",
                "+        <entry key=\"BasicAuthentication\" value-ref=\"basicAuth\"/>",
                "+        <entry key=\"Bearer\" value-ref=\"bearer\"/>",
                "+      </map>",
                "+    </property>",
                "   </bean>",
                "diff --git a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "index e576b52398..44502088b5 100644",
                "--- a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "+++ b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.util.List;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "  */",
                "+@Api(tags = \"CamelRoutes\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"camelRoutes\")",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "index e273676741..fa5b5f3176 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import java.io.InputStream;",
                "@@ -39,2 +41,5 @@ import org.apache.syncope.common.lib.to.SAML2IdPTO;",
                "  */",
                "+@Api(tags = \"SAML2IdP\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"saml2sp/identityProviders\")",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "index ed964d608f..e67cc0b5a5 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.ws.rs.Consumes;",
                "@@ -35,2 +37,5 @@ import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;",
                "  */",
                "+@Api(tags = \"SAML2SP\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"saml2sp/serviceProvider\")",
                "diff --git a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "index 1efad9a464..e877f2d6d5 100644",
                "--- a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "+++ b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.annotations.Api;",
                "+import io.swagger.annotations.Authorization;",
                " import javax.validation.constraints.NotNull;",
                "@@ -33,2 +35,5 @@ import org.apache.syncope.common.lib.scim.SCIMConf;",
                "  */",
                "+@Api(tags = \"SCIMConf\", authorizations = {",
                "+    @Authorization(value = \"BasicAuthentication\")",
                "+    , @Authorization(value = \"Bearer\") })",
                " @Path(\"scimv2conf\")",
                "diff --git a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "index a3d3cb3711..075e2c663d 100644",
                "--- a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "+++ b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "@@ -106,3 +106,3 @@ window.onload = function() {",
                "     docExpansion: 'none',",
                "-    displayOperationId: true,",
                "+    displayOperationId: false,",
                "     operationsSorter: 'alpha',",
                "diff --git a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "index 51a22072bc..33807f2fb2 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "@@ -105,3 +105,8 @@ under the License.",
                "   </bean>",
                "-  ",
                "+",
                "+  <bean id=\"basicAuth\" class=\"io.swagger.models.auth.BasicAuthDefinition\"/>",
                "+  <bean id=\"bearer\" class=\"io.swagger.models.auth.ApiKeyAuthDefinition\">",
                "+    <property name=\"name\" value=\"Authorization\"/>",
                "+    <property name=\"in\" value=\"HEADER\"/>",
                "+  </bean>",
                "   <bean id=\"swagger2customizer\" class=\"org.apache.syncope.core.rest.cxf.SyncopeSwagger2Customizer\">",
                "@@ -128,2 +133,9 @@ under the License.",
                "     <property name=\"customizer\" ref=\"swagger2customizer\"/>",
                "+",
                "+    <property name=\"securityDefinitions\">",
                "+      <map>",
                "+        <entry key=\"BasicAuthentication\" value-ref=\"basicAuth\"/>",
                "+        <entry key=\"Bearer\" value-ref=\"bearer\"/>",
                "+      </map>",
                "+    </property>",
                "   </bean>",
                "diff --git a/pom.xml b/pom.xml",
                "index dfb8586bda..1ad4fa0fbf 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -607,2 +607,7 @@ under the License.",
                "       <!-- Swagger -->      ",
                "+      <dependency>",
                "+        <groupId>io.swagger</groupId>",
                "+        <artifactId>swagger-annotations</artifactId>",
                "+        <version>${swagger-core.version}</version>",
                "+      </dependency>      ",
                "       <dependency>"
            ],
            "changed_files": [
                "common/rest-api/pom.xml",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "core/rest-cxf/src/main/resources/restCXFContext.xml",
                "ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1262": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "28425614ebaee25e1235923e1a0dbff2ea88d83c"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: template, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1262",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c9354a5172586b3aebade0d365437c8fd74457de",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508145122,
            "hunks": 12,
            "message": "[SYNCOPE-1224] Properly using pagination for search",
            "diff": [
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java",
                "index d9110eba61..5a1dfc49a4 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java",
                "@@ -45,3 +45,3 @@ public class UserDetails extends AbstractUserCommand {",
                "                 final Map<String, String> details = new LinkedMap<>();",
                "-                final List<UserTO> usersTOs = userSyncopeOperations.list().getResult();",
                "+                final List<UserTO> users = userSyncopeOperations.list();",
                "                 int withoutResource = 0;",
                "@@ -50,3 +50,3 @@ public class UserDetails extends AbstractUserCommand {",
                "                 int suspendedStatus = 0;",
                "-                for (final UserTO userTO : usersTOs) {",
                "+                for (final UserTO userTO : users) {",
                "                     if (userTO.getResources().isEmpty()) {",
                "@@ -63,3 +63,3 @@ public class UserDetails extends AbstractUserCommand {",
                "                 }",
                "-                details.put(\"Total number\", String.valueOf(usersTOs.size()));",
                "+                details.put(\"Total number\", String.valueOf(users.size()));",
                "                 details.put(\"Active\", String.valueOf(activeStatus));",
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java",
                "index 48be66ccf0..d83b7345ec 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java",
                "@@ -23,4 +23,2 @@ import org.apache.syncope.client.cli.Input;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "-import org.apache.syncope.common.lib.to.PagedResult;",
                "-import org.apache.syncope.common.lib.to.UserTO;",
                " import org.slf4j.Logger;",
                "@@ -48,4 +46,3 @@ public class UserList extends AbstractUserCommand {",
                "                 if (\"yes\".equalsIgnoreCase(answer)) {",
                "-                    final PagedResult<UserTO> uResult = userSyncopeOperations.list();",
                "-                    userResultManager.printUsers(uResult.getResult());",
                "+                    userResultManager.printUsers(userSyncopeOperations.list());",
                "                 } else if (\"no\".equalsIgnoreCase(answer)) {",
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "index 4cd5227f8d..f63d934ece 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.client.cli.commands.user;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -26,3 +27,2 @@ import org.apache.syncope.common.lib.to.BulkAction;",
                " import org.apache.syncope.common.lib.to.BulkActionResult;",
                "-import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -47,4 +47,4 @@ public class UserSyncopeOperations {",
                "     public List<UserTO> searchByRole(final String realm, final String role) {",
                "-        return userService.search(new AnyQuery.Builder().realm(realm).",
                "-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role).query()).build()).getResult();",
                "+        return search(new AnyQuery.Builder().realm(realm).",
                "+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role).query()).build());",
                "     }",
                "@@ -52,4 +52,4 @@ public class UserSyncopeOperations {",
                "     public List<UserTO> searchByResource(final String realm, final String resource) {",
                "-        return userService.search(new AnyQuery.Builder().realm(realm).",
                "-                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(resource).query()).build()).getResult();",
                "+        return search(new AnyQuery.Builder().realm(realm).",
                "+                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(resource).query()).build());",
                "     }",
                "@@ -57,9 +57,26 @@ public class UserSyncopeOperations {",
                "     public List<UserTO> searchByAttribute(final String realm, final String attributeName, final String attributeValue) {",
                "-        return userService.search(new AnyQuery.Builder().realm(realm).",
                "+        return search(new AnyQuery.Builder().realm(realm).",
                "                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue).query()).",
                "-                build()).getResult();",
                "+                build());",
                "+    }",
                "+",
                "+    public List<UserTO> list() {",
                "+        return search(new AnyQuery());",
                "     }",
                "-    public PagedResult<UserTO> list() {",
                "-        return userService.search(new AnyQuery());",
                "+    private List<UserTO> search(final AnyQuery query) {",
                "+        query.setPage(0);",
                "+        query.setSize(0);",
                "+        int count = userService.search(query).getTotalCount();",
                "+",
                "+        List<UserTO> result = new ArrayList<>();",
                "+",
                "+        query.setSize(PAGE_SIZE);",
                "+        for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {",
                "+            query.setPage(page);",
                "+",
                "+            result.addAll(userService.search(query).getResult());",
                "+        }",
                "+",
                "+        return result;",
                "     }"
            ],
            "changed_files": [
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java",
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java",
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1224": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fdc991aa67cb9d3093948d7bb87f6b70317aa825"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: operation",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1224",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa25af970cacaf6675f78d4dc65d4c02a5b9bd5b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509116545,
            "hunks": 35,
            "message": "[SYNCOPE-152] Initial implementation as extension: user / group read and search (without filters, attributes or sort)",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "index 061f06eb86..5efe6a51eb 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "@@ -63,2 +63,4 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {",
                "+    private boolean suspended;",
                "+",
                "     private boolean mustChangePassword;",
                "@@ -188,2 +190,10 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {",
                "+    public boolean isSuspended() {",
                "+        return suspended;",
                "+    }",
                "+",
                "+    public void setSuspended(final boolean suspended) {",
                "+        this.suspended = suspended;",
                "+    }",
                "+",
                "     public boolean isMustChangePassword() {",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 031757a005..be5e3ced46 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -94,2 +94,3 @@ under the License.",
                "     <module>saml2sp</module>",
                "+    <module>scimv2</module>",
                "   </modules>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "new file mode 100644",
                "index 0000000000..ac554e39c2",
                "--- /dev/null",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -0,0 +1,45 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope</groupId>",
                "+    <artifactId>syncope-ext</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2</name>",
                "+  <description>Apache Syncope Ext: SCIMv2</description>",
                "+  <groupId>org.apache.syncope.ext</groupId>",
                "+  <artifactId>syncope-ext-scimv2</artifactId>",
                "+  <packaging>pom</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>",
                "+  </properties>",
                "+  ",
                "+  <modules>",
                "+    <module>scim-rest-api</module>",
                "+    <module>scim-rest-cxf</module>",
                "+  </modules>",
                "+",
                "+</project>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "new file mode 100644",
                "index 0000000000..0d0d1ae529",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -0,0 +1,70 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 SCIM REST API</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 SCIM REST API</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-scim-rest-api</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>javax.validation</groupId>",
                "+      <artifactId>validation-api</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>javax.ws.rs</groupId>",
                "+      <artifactId>javax.ws.rs-api</artifactId>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.jackson.core</groupId>",
                "+      <artifactId>jackson-annotations</artifactId>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.apache.cxf</groupId>",
                "+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>",
                "+    </dependency>",
                "+  </dependencies>",
                "+  ",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMConstants.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMConstants.java",
                "new file mode 100644",
                "index 0000000000..979decd010",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMConstants.java",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api;",
                "+",
                "+import javax.ws.rs.core.MediaType;",
                "+",
                "+public final class SCIMConstants {",
                "+",
                "+    public static final String APPLICATION_SCIM_JSON = \"application/scim+json\";",
                "+",
                "+    public static final MediaType APPLICATION_SCIM_JSON_TYPE = new MediaType(\"application\", \"scim+json\");",
                "+",
                "+    private SCIMConstants() {",
                "+        // private constructor for static utility class",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Display.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Display.java",
                "new file mode 100644",
                "index 0000000000..f79796c9fb",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Display.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class Display extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5337055958765320091L;",
                "+",
                "+    private final String value;",
                "+",
                "+    private final String display;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public Display(@JsonProperty(\"value\") final String value, @JsonProperty(\"display\") final String display) {",
                "+        this.value = value;",
                "+        this.display = display;",
                "+    }",
                "+",
                "+    public String getValue() {",
                "+        return value;",
                "+    }",
                "+",
                "+    public String getDisplay() {",
                "+        return display;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "new file mode 100644",
                "index 0000000000..f64b8371e9",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "+import org.apache.syncope.ext.scimv2.api.type.Function;",
                "+",
                "+@JsonPropertyOrder({ \"value\", \"$ref\", \"display\", \"type\" })",
                "+public class Group extends Reference {",
                "+",
                "+    private static final long serialVersionUID = -7184515273837918246L;",
                "+",
                "+    @JsonIgnore",
                "+    private final Function type;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public Group(",
                "+            @JsonProperty(\"value\") final String value,",
                "+            @JsonProperty(\"$ref\") final String ref,",
                "+            @JsonProperty(\"display\") final String display,",
                "+            @JsonProperty(\"type\") final Function type) {",
                "+",
                "+        super(value, ref, display);",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    @JsonProperty",
                "+    public String getType() {",
                "+        return type == null ? null : type.name();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "new file mode 100644",
                "index 0000000000..698363199e",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "@@ -0,0 +1,74 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+",
                "+public class ListResponse<R extends SCIMResource> extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -776611610457583160L;",
                "+",
                "+    private final List<String> schemas = Arrays.asList(ResourceType.ListResponse.getSchema());",
                "+",
                "+    private final int totalResults;",
                "+",
                "+    @JsonProperty(\"Resources\")",
                "+    private final List<R> resources = new ArrayList<>();",
                "+",
                "+    private final int startIndex;",
                "+",
                "+    private final int itemsPerPage;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public ListResponse(",
                "+            @JsonProperty(\"totalResults\") final int totalResults,",
                "+            @JsonProperty(\"startIndex\") final int startIndex,",
                "+            @JsonProperty(\"itemsPerPage\") final int itemsPerPage) {",
                "+",
                "+        this.totalResults = totalResults;",
                "+        this.startIndex = startIndex;",
                "+        this.itemsPerPage = itemsPerPage;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public int getTotalResults() {",
                "+        return totalResults;",
                "+    }",
                "+",
                "+    public List<R> getResources() {",
                "+        return resources;",
                "+    }",
                "+",
                "+    public int getStartIndex() {",
                "+        return startIndex;",
                "+    }",
                "+",
                "+    public int getItemsPerPage() {",
                "+        return itemsPerPage;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "new file mode 100644",
                "index 0000000000..73c25ebc5e",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+",
                "+@JsonPropertyOrder({ \"value\", \"$ref\", \"display\", \"type\" })",
                "+public class Member extends Reference {",
                "+",
                "+    private static final long serialVersionUID = 75245960461062907L;",
                "+",
                "+    @JsonIgnore",
                "+    private final ResourceType type;",
                "+",
                "+    public Member(",
                "+            @JsonProperty(\"value\") final String value,",
                "+            @JsonProperty(\"$ref\") final String ref,",
                "+            @JsonProperty(\"display\") final String display,",
                "+            @JsonProperty(\"type\") final ResourceType type) {",
                "+",
                "+        super(value, ref, display);",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    @JsonProperty",
                "+    public String getType() {",
                "+        return type == null ? null : type.name();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "new file mode 100644",
                "index 0000000000..7ecb4afe76",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.io.Serializable;",
                "+import java.util.Date;",
                "+import javax.ws.rs.core.EntityTag;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+",
                "+public class Meta implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 8976451652101091915L;",
                "+",
                "+    private final ResourceType resourceType;",
                "+",
                "+    private final Date created;",
                "+",
                "+    private final Date lastModified;",
                "+",
                "+    @JsonIgnore",
                "+    private final EntityTag version;",
                "+",
                "+    private final String location;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public Meta(",
                "+            @JsonProperty(\"resourceType\") final ResourceType resourceType,",
                "+            @JsonProperty(\"created\") final Date created,",
                "+            @JsonProperty(\"lastModified\") final Date lastModified,",
                "+            @JsonProperty(\"version\") final String version,",
                "+            @JsonProperty(\"location\") final String location) {",
                "+",
                "+        this.resourceType = resourceType;",
                "+        this.created = created;",
                "+        this.lastModified = lastModified;",
                "+        this.version = new EntityTag(version);",
                "+        this.location = location;",
                "+    }",
                "+",
                "+    public ResourceType getResourceType() {",
                "+        return resourceType;",
                "+    }",
                "+",
                "+    public Date getCreated() {",
                "+        return created;",
                "+    }",
                "+",
                "+    public Date getLastModified() {",
                "+        return lastModified;",
                "+    }",
                "+",
                "+    @JsonProperty",
                "+    public String getVersion() {",
                "+        return version == null ? null : version.toString();",
                "+    }",
                "+",
                "+    public String getLocation() {",
                "+        return location;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "new file mode 100644",
                "index 0000000000..d65f5e8815",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+abstract class Reference extends Display {",
                "+",
                "+    private static final long serialVersionUID = -6190164044699376089L;",
                "+",
                "+    @JsonProperty(\"$ref\")",
                "+    private final String ref;",
                "+",
                "+    Reference(final String value, final String display, final String ref) {",
                "+        super(value, display);",
                "+        this.ref = ref;",
                "+    }",
                "+",
                "+    public String getRef() {",
                "+        return ref;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "new file mode 100644",
                "index 0000000000..95334cf284",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import java.io.Serializable;",
                "+",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+abstract class SCIMBean implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 7604407251038024743L;",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "new file mode 100644",
                "index 0000000000..0657476e89",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "@@ -0,0 +1,55 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+@JsonPropertyOrder({ \"schemas\", \"id\", \"externalId\", \"displayName\", \"members\", \"meta\" })",
                "+public class SCIMGroup extends SCIMResource {",
                "+",
                "+    private static final long serialVersionUID = -2935466041674390279L;",
                "+",
                "+    private final String displayName;",
                "+",
                "+    private final List<Member> members = new ArrayList<>();",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public SCIMGroup(",
                "+            @JsonProperty(\"id\") final String id,",
                "+            @JsonProperty(\"schemas\") final List<String> schemas,",
                "+            @JsonProperty(\"meta\") final Meta meta,",
                "+            @JsonProperty(\"displayName\") final String displayName) {",
                "+",
                "+        super(id, schemas, meta);",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "+    public String getDisplayName() {",
                "+        return displayName;",
                "+    }",
                "+",
                "+    public List<Member> getMembers() {",
                "+        return members;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java",
                "new file mode 100644",
                "index 0000000000..fae74e14de",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+",
                "+public abstract class SCIMResource extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -8465880682458920021L;",
                "+",
                "+    private final String id;",
                "+",
                "+    private String externalId;",
                "+",
                "+    private final List<String> schemas;",
                "+",
                "+    private final Meta meta;",
                "+",
                "+    public SCIMResource(final String id, final List<String> schemas, final Meta meta) {",
                "+        this.id = id;",
                "+        this.schemas = schemas == null ? Collections.<String>emptyList() : schemas;",
                "+        this.meta = meta;",
                "+    }",
                "+",
                "+    public String getId() {",
                "+        return id;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public Meta getMeta() {",
                "+        return meta;",
                "+    }",
                "+",
                "+    public void setExternalId(final String externalId) {",
                "+        this.externalId = externalId;",
                "+    }",
                "+",
                "+    public String getExternalId() {",
                "+        return externalId;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "new file mode 100644",
                "index 0000000000..c76c0f027e",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+@JsonPropertyOrder({ \"schemas\", \"id\", \"externalId\", \"userName\", \"active\", \"groups\", \"roles\", \"meta\" })",
                "+public class SCIMUser extends SCIMResource {",
                "+",
                "+    private static final long serialVersionUID = -2935466041674390279L;",
                "+",
                "+    private final String userName;",
                "+",
                "+    private final boolean active;",
                "+",
                "+    private final List<Group> groups = new ArrayList<>();",
                "+",
                "+    private final List<Display> roles = new ArrayList<>();",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public SCIMUser(",
                "+            @JsonProperty(\"id\") final String id,",
                "+            @JsonProperty(\"schemas\") final List<String> schemas,",
                "+            @JsonProperty(\"meta\") final Meta meta,",
                "+            @JsonProperty(\"userName\") final String userName,",
                "+            @JsonProperty(\"active\") final boolean active) {",
                "+",
                "+        super(id, schemas, meta);",
                "+        this.userName = userName;",
                "+        this.active = active;",
                "+    }",
                "+",
                "+    public String getUserName() {",
                "+        return userName;",
                "+    }",
                "+",
                "+    public boolean isActive() {",
                "+        return active;",
                "+    }",
                "+",
                "+    public List<Group> getGroups() {",
                "+        return groups;",
                "+    }",
                "+",
                "+    public List<Display> getRoles() {",
                "+        return roles;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "new file mode 100644",
                "index 0000000000..c1bb82f82f",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "@@ -0,0 +1,64 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.DELETE;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.PUT;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.PathParam;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.jaxrs.ext.PATCH;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+",
                "+@Path(\"Groups\")",
                "+public interface GroupService extends SCIMService<SCIMGroup> {",
                "+",
                "+    @POST",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response create();",
                "+",
                "+    @GET",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    SCIMGroup read(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @PUT",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response replace(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @DELETE",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response delete(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @PATCH",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response update(@NotNull @PathParam(\"id\") String id);",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "new file mode 100644",
                "index 0000000000..8de7a0abe2",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "@@ -0,0 +1,45 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+",
                "+@Path(\"\")",
                "+public interface RootService extends SCIMService {",
                "+",
                "+    @GET",
                "+    @Path(\"ServiceProviderConfigs\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response serviceProviderConfigs();",
                "+",
                "+    @GET",
                "+    @Path(\"ResourceTypes\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response resourceTypes();",
                "+",
                "+    @GET",
                "+    @Path(\"Schemas\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response schemas();",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "new file mode 100644",
                "index 0000000000..1b2fd3f24d",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import java.util.List;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.QueryParam;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public interface SCIMService<R extends SCIMResource> {",
                "+",
                "+    @GET",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ListResponse<R> search(",
                "+            @QueryParam(\"startIndex\") Integer startIndex,",
                "+            @QueryParam(\"count\") Integer count,",
                "+            @QueryParam(\"filter\") String filter,",
                "+            @QueryParam(\"sortBy\") String sortBy,",
                "+            @QueryParam(\"sortOrder\") SortOrder sortOrder,",
                "+            @QueryParam(\"attributes\") List<String> attributes);",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "new file mode 100644",
                "index 0000000000..73518b5bb8",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "@@ -0,0 +1,64 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.service;",
                "+",
                "+import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.DELETE;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.PUT;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.PathParam;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.jaxrs.ext.PATCH;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "+",
                "+@Path(\"Users\")",
                "+public interface UserService extends SCIMService<SCIMUser> {",
                "+",
                "+    @POST",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response create();",
                "+",
                "+    @GET",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    SCIMUser read(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @PUT",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response replace(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @DELETE",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response delete(@NotNull @PathParam(\"id\") String id);",
                "+",
                "+    @PATCH",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response update(@NotNull @PathParam(\"id\") String id);",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Function.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Function.java",
                "new file mode 100644",
                "index 0000000000..49d4eef450",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Function.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.type;",
                "+",
                "+public enum Function {",
                "+    direct,",
                "+    indirect;",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ResourceType.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ResourceType.java",
                "new file mode 100644",
                "index 0000000000..faf5ccc619",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ResourceType.java",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.type;",
                "+",
                "+public enum ResourceType {",
                "+",
                "+    User(\"urn:ietf:params:scim:schemas:core:2.0:User\"),",
                "+    Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),",
                "+    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\");",
                "+",
                "+    private final String schema;",
                "+",
                "+    ResourceType(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    public String getSchema() {",
                "+        return schema;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/SortOrder.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/SortOrder.java",
                "new file mode 100644",
                "index 0000000000..6c7bf1617f",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/SortOrder.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.type;",
                "+",
                "+public enum SortOrder {",
                "+    ascending,",
                "+    descending;",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "new file mode 100644",
                "index 0000000000..3db0ae6e3f",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -0,0 +1,127 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 SCIM REST CXF</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 SCIM REST CXF</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency> ",
                "+      <groupId>javax.servlet</groupId> ",
                "+      <artifactId>javax.servlet-api</artifactId> ",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>slf4j-api</artifactId>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.springframework</groupId>",
                "+      <artifactId>spring-context</artifactId>",
                "+    </dependency>    ",
                "+    <dependency>",
                "+      <groupId>org.springframework</groupId>",
                "+      <artifactId>spring-web</artifactId>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.springframework.security</groupId>",
                "+      <artifactId>spring-security-web</artifactId>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.springframework.security</groupId>",
                "+      <artifactId>spring-security-config</artifactId>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.jackson.datatype</groupId>",
                "+      <artifactId>jackson-datatype-joda</artifactId>",
                "+    </dependency>    ",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.jackson.jaxrs</groupId>",
                "+      <artifactId>jackson-jaxrs-json-provider</artifactId>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.jackson.module</groupId>",
                "+      <artifactId>jackson-module-afterburner</artifactId>",
                "+    </dependency>",
                "+      ",
                "+    <dependency>",
                "+      <groupId>joda-time</groupId>",
                "+      <artifactId>joda-time</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.cxf</groupId>",
                "+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.cxf</groupId>",
                "+      <artifactId>cxf-rt-rs-service-description</artifactId>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.cxf</groupId>",
                "+      <artifactId>cxf-rt-rs-client</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-logic</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-scim-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>            ",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+    ",
                "+    <resources>",
                "+      <resource>",
                "+        <directory>src/main/resources</directory>",
                "+        <filtering>true</filtering>",
                "+      </resource>",
                "+    </resources>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/JacksonSCIMJsonProvider.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/JacksonSCIMJsonProvider.java",
                "new file mode 100644",
                "index 0000000000..28ca17334d",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/JacksonSCIMJsonProvider.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf;",
                "+",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.SerializationFeature;",
                "+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;",
                "+import java.text.SimpleDateFormat;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.ext.Provider;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+",
                "+@Provider",
                "+@Consumes(SCIMConstants.APPLICATION_SCIM_JSON)",
                "+@Produces(SCIMConstants.APPLICATION_SCIM_JSON)",
                "+public class JacksonSCIMJsonProvider extends JacksonJsonProvider {",
                "+",
                "+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {",
                "+",
                "+        @Override",
                "+        protected SimpleDateFormat initialValue() {",
                "+            SimpleDateFormat sdf = new SimpleDateFormat();",
                "+            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);",
                "+            return sdf;",
                "+        }",
                "+    };",
                "+",
                "+    public JacksonSCIMJsonProvider() {",
                "+        super(new ObjectMapper(), BASIC_ANNOTATIONS);",
                "+        _mapperConfig.getConfiguredMapper().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);",
                "+        _mapperConfig.getConfiguredMapper().setDateFormat(DATE_FORMAT.get());",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "new file mode 100644",
                "index 0000000000..cee06eb6e4",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "@@ -0,0 +1,235 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import javax.ws.rs.core.Context;",
                "+import javax.ws.rs.core.UriInfo;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.jaxrs.ext.MessageContext;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.lib.to.AnyTO;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.MembershipTO;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.core.logic.AbstractAnyLogic;",
                "+import org.apache.syncope.core.logic.GroupLogic;",
                "+import org.apache.syncope.core.logic.UserLogic;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.apache.syncope.ext.scimv2.api.data.Display;",
                "+import org.apache.syncope.ext.scimv2.api.data.Group;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.Member;",
                "+import org.apache.syncope.ext.scimv2.api.data.Meta;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "+import org.apache.syncope.ext.scimv2.api.service.SCIMService;",
                "+import org.apache.syncope.ext.scimv2.api.type.Function;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMService<R> {",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSCIMService.class);",
                "+",
                "+    @Context",
                "+    protected UriInfo uriInfo;",
                "+",
                "+    @Context",
                "+    protected MessageContext messageContext;",
                "+",
                "+    private UserLogic userLogic;",
                "+",
                "+    private GroupLogic groupLogic;",
                "+",
                "+    protected UserLogic userLogic() {",
                "+        synchronized (this) {",
                "+            if (userLogic == null) {",
                "+                userLogic = ApplicationContextProvider.getApplicationContext().getBean(UserLogic.class);",
                "+            }",
                "+        }",
                "+        return userLogic;",
                "+    }",
                "+",
                "+    protected GroupLogic groupLogic() {",
                "+        synchronized (this) {",
                "+            if (groupLogic == null) {",
                "+                groupLogic = ApplicationContextProvider.getApplicationContext().getBean(GroupLogic.class);",
                "+            }",
                "+        }",
                "+        return groupLogic;",
                "+    }",
                "+",
                "+    protected AbstractAnyLogic<?, ?> anyLogic(final ResourceType type) {",
                "+        switch (type) {",
                "+            case User:",
                "+                return userLogic();",
                "+",
                "+            case Group:",
                "+                return groupLogic();",
                "+",
                "+            default:",
                "+                throw new UnsupportedOperationException();",
                "+        }",
                "+    }",
                "+",
                "+    protected SCIMUser toSCIMUser(final UserTO userTO, final String location) {",
                "+        SCIMUser user = new SCIMUser(",
                "+                userTO.getKey(),",
                "+                Collections.singletonList(ResourceType.User.getSchema()),",
                "+                new Meta(",
                "+                        ResourceType.User,",
                "+                        userTO.getCreationDate(),",
                "+                        userTO.getLastChangeDate(),",
                "+                        userTO.getETagValue(),",
                "+                        location),",
                "+                userTO.getUsername(),",
                "+                !userTO.isSuspended());",
                "+",
                "+        for (MembershipTO membership : userTO.getMemberships()) {",
                "+            user.getGroups().add(new Group(",
                "+                    membership.getGroupKey(),",
                "+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                    membership.getGroupName(),",
                "+                    Function.direct));",
                "+        }",
                "+        for (MembershipTO membership : userTO.getDynMemberships()) {",
                "+            user.getGroups().add(new Group(",
                "+                    membership.getGroupKey(),",
                "+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),",
                "+                    membership.getGroupName(),",
                "+                    Function.indirect));",
                "+        }",
                "+",
                "+        for (String role : userTO.getRoles()) {",
                "+            user.getRoles().add(new Display(role, null));",
                "+        }",
                "+",
                "+        return user;",
                "+    }",
                "+",
                "+    protected SCIMGroup toSCIMGroup(final GroupTO groupTO, final String location) {",
                "+        SCIMGroup group = new SCIMGroup(",
                "+                groupTO.getKey(),",
                "+                Collections.singletonList(ResourceType.Group.getSchema()),",
                "+                new Meta(",
                "+                        ResourceType.Group,",
                "+                        groupTO.getCreationDate(),",
                "+                        groupTO.getLastChangeDate(),",
                "+                        groupTO.getETagValue(),",
                "+                        location),",
                "+                groupTO.getName());",
                "+",
                "+        MembershipCond membCond = new MembershipCond();",
                "+        membCond.setGroup(groupTO.getKey());",
                "+        SearchCond searchCond = SearchCond.getLeafCond(membCond);",
                "+",
                "+        int count = userLogic().",
                "+                search(searchCond, 1, 1, Collections.<OrderByClause>emptyList(), SyncopeConstants.ROOT_REALM, false).",
                "+                getLeft();",
                "+",
                "+        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+            List<UserTO> users = userLogic().search(",
                "+                    searchCond,",
                "+                    page,",
                "+                    AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                    Collections.<OrderByClause>emptyList(),",
                "+                    SyncopeConstants.ROOT_REALM,",
                "+                    false).",
                "+                    getRight();",
                "+            for (UserTO userTO : users) {",
                "+                group.getMembers().add(new Member(",
                "+                        userTO.getKey(),",
                "+                        StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),",
                "+                        userTO.getUsername(),",
                "+                        ResourceType.User));",
                "+            }",
                "+        }",
                "+",
                "+        return group;",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected ListResponse<R> doSearch(",
                "+            final ResourceType type,",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        if (type == null) {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        int page = startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1;",
                "+",
                "+        Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(",
                "+                null,",
                "+                page,",
                "+                AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                Collections.<OrderByClause>emptyList(),",
                "+                SyncopeConstants.ROOT_REALM,",
                "+                false);",
                "+",
                "+        ListResponse<R> response = new ListResponse<>(",
                "+                result.getLeft(), startIndex == null || startIndex <= 1 ? 1 : startIndex, AnyDAO.DEFAULT_PAGE_SIZE);",
                "+",
                "+        for (AnyTO anyTO : result.getRight()) {",
                "+            SCIMResource resource = null;",
                "+            if (anyTO instanceof UserTO) {",
                "+                resource = toSCIMUser(",
                "+                        (UserTO) anyTO,",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+            } else if (anyTO instanceof GroupTO) {",
                "+                resource = toSCIMGroup(",
                "+                        (GroupTO) anyTO,",
                "+                        uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString());",
                "+            }",
                "+",
                "+            if (resource != null) {",
                "+                response.getResources().add((R) resource);",
                "+            }",
                "+        }",
                "+",
                "+        return response;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListResponse<R> search(",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        return doSearch(null, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "new file mode 100644",
                "index 0000000000..151762a57c",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import java.util.List;",
                "+import java.util.UUID;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+import org.apache.syncope.ext.scimv2.api.service.GroupService;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public class GroupServiceImpl extends AbstractSCIMService<SCIMGroup> implements GroupService {",
                "+",
                "+    @Override",
                "+    public Response create() {",
                "+        return Response.",
                "+                created(uriInfo.getAbsolutePathBuilder().path(UUID.randomUUID().toString()).build()).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public SCIMGroup read(final String id) {",
                "+        return toSCIMGroup(groupLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response replace(final String id) {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response delete(final String id) {",
                "+        return Response.noContent().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final String id) {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListResponse<SCIMGroup> search(",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        return doSearch(ResourceType.Group, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "new file mode 100644",
                "index 0000000000..0172e7d0e0",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.service.RootService;",
                "+",
                "+public class RootServiceImpl extends AbstractSCIMService implements RootService {",
                "+",
                "+    @Override",
                "+    public Response serviceProviderConfigs() {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response resourceTypes() {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response schemas() {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "new file mode 100644",
                "index 0000000000..6d51ca32ef",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf.service;",
                "+",
                "+import java.util.List;",
                "+import java.util.UUID;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "+import org.apache.syncope.ext.scimv2.api.service.UserService;",
                "+import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public class UserServiceImpl extends AbstractSCIMService<SCIMUser> implements UserService {",
                "+",
                "+    @Override",
                "+    public Response create() {",
                "+        return Response.",
                "+                created(uriInfo.getAbsolutePathBuilder().path(UUID.randomUUID().toString()).build()).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public SCIMUser read(final String id) {",
                "+        return toSCIMUser(userLogic().read(id), uriInfo.getAbsolutePathBuilder().build().toASCIIString());",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response replace(final String id) {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response delete(final String id) {",
                "+        return Response.noContent().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final String id) {",
                "+        return Response.ok().build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ListResponse<SCIMUser> search(",
                "+            final Integer startIndex,",
                "+            final Integer count,",
                "+            final String filter,",
                "+            final String sortBy,",
                "+            final SortOrder sortOrder,",
                "+            final List<String> attributes) {",
                "+",
                "+        return doSearch(ResourceType.User, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/cxf/org.apache.cxf.Logger b/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/cxf/org.apache.cxf.Logger",
                "new file mode 100644",
                "index 0000000000..6e7bd364d3",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/cxf/org.apache.cxf.Logger",
                "@@ -0,0 +1 @@",
                "+org.apache.cxf.common.logging.Slf4jLogger",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/web-fragment.xml b/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "new file mode 100644",
                "index 0000000000..5a021aecce",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "@@ -0,0 +1,70 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<web-fragment xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"",
                "+              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee ",
                "+                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd\"",
                "+              id=\"${pom.artifactId}\" version=\"3.1\">",
                "+  ",
                "+  <listener>",
                "+    <listener-class>org.apache.syncope.core.rest.cxf.ThreadLocalCleanupListener</listener-class>",
                "+  </listener>",
                "+  ",
                "+  <servlet>",
                "+    <servlet-name>SCIMv2CXFServlet</servlet-name>",
                "+    <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>",
                "+    <init-param>",
                "+      <param-name>config-location</param-name>",
                "+      <param-value>classpath*:/restSCIMv2CXFContext.xml</param-value>",
                "+    </init-param>",
                "+    <load-on-startup>1</load-on-startup> ",
                "+  </servlet>",
                "+  <servlet-mapping>",
                "+    <servlet-name>SCIMv2CXFServlet</servlet-name>",
                "+    <url-pattern>/scim/*</url-pattern>",
                "+  </servlet-mapping>",
                "+",
                "+  <filter>",
                "+    <filter-name>encodingFilter</filter-name>",
                "+    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>",
                "+    <init-param>",
                "+      <param-name>encoding</param-name>",
                "+      <param-value>UTF-8</param-value>",
                "+    </init-param>",
                "+    <init-param>",
                "+      <param-name>forceEncoding</param-name>",
                "+      <param-value>true</param-value>",
                "+    </init-param>",
                "+  </filter>",
                "+  <filter>",
                "+    <filter-name>springSecurityFilterChain</filter-name>",
                "+    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>",
                "+  </filter>",
                "+",
                "+  <filter-mapping>",
                "+    <filter-name>encodingFilter</filter-name>",
                "+    <url-pattern>/*</url-pattern>",
                "+  </filter-mapping>",
                "+  <filter-mapping>",
                "+    <filter-name>springSecurityFilterChain</filter-name>",
                "+    <url-pattern>/*</url-pattern>",
                "+  </filter-mapping>",
                "+",
                "+</web-fragment>",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "new file mode 100644",
                "index 0000000000..7293b26732",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "@@ -0,0 +1,83 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<beans xmlns=\"http://www.springframework.org/schema/beans\"",
                "+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+       xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"",
                "+       xmlns:context=\"http://www.springframework.org/schema/context\"",
                "+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans",
                "+                           http://www.springframework.org/schema/beans/spring-beans.xsd",
                "+                           http://cxf.apache.org/jaxrs",
                "+                           http://cxf.apache.org/schemas/jaxrs.xsd",
                "+                           http://www.springframework.org/schema/context",
                "+                           http://www.springframework.org/schema/context/spring-context.xsd\">",
                "+",
                "+  <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>",
                "+  <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>",
                "+",
                "+  <context:component-scan base-package=\"org.apache.syncope.ext.scimv2.cxf.service\"/>  ",
                "+  ",
                "+  <bean id=\"jsonProvider\" class=\"org.apache.syncope.ext.scimv2.cxf.JacksonSCIMJsonProvider\"/>",
                "+",
                "+  <bean id=\"validationProvider\" class=\"org.apache.cxf.validation.BeanValidationProvider\"/>",
                "+  <bean id=\"validationInInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor\">",
                "+    <property name=\"provider\" ref=\"validationProvider\"/>",
                "+  </bean>",
                "+  <bean id=\"validationOutInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationOutInterceptor\">",
                "+    <property name=\"provider\" ref=\"validationProvider\"/>",
                "+  </bean>   ",
                "+  ",
                "+  <bean id=\"gzipInInterceptor\" class=\"org.apache.cxf.transport.common.gzip.GZIPInInterceptor\"/>",
                "+  <bean id=\"gzipOutInterceptor\" class=\"org.apache.cxf.transport.common.gzip.GZIPOutInterceptor\">",
                "+    <property name=\"threshold\" value=\"0\"/>",
                "+    <property name=\"force\" value=\"true\"/>",
                "+  </bean>",
                "+",
                "+  <bean id=\"wadlGenerator\" class=\"org.apache.cxf.jaxrs.model.wadl.WadlGenerator\">",
                "+    <property name=\"applicationTitle\" value=\"Apache Syncope SCIMv2 ${syncope.version}\"/>",
                "+    <property name=\"namespacePrefix\" value=\"syncope2\"/>",
                "+    <property name=\"incrementNamespacePrefix\" value=\"false\"/>    ",
                "+    <property name=\"linkAnyMediaTypeToXmlSchema\" value=\"true\"/>",
                "+    <property name=\"useJaxbContextForQnames\" value=\"true\"/>",
                "+    <property name=\"addResourceAndMethodIds\" value=\"true\"/>",
                "+    <property name=\"ignoreMessageWriters\" value=\"true\"/>",
                "+    <property name=\"usePathParamsToCompareOperations\" value=\"false\"/>",
                "+  </bean>",
                "+  ",
                "+  <jaxrs:server id=\"scimv2Container\" address=\"/\"",
                "+                basePackages=\"org.apache.syncope.ext.scimv2.api.service, org.apache.syncope.ext.scimv2.cxf.service\" ",
                "+                staticSubresourceResolution=\"true\">",
                "+    <jaxrs:properties>",
                "+      <entry key=\"convert.wadl.resources.to.dom\" value=\"false\"/>",
                "+    </jaxrs:properties> ",
                "+    <jaxrs:inInterceptors>",
                "+      <ref bean=\"gzipInInterceptor\"/>",
                "+      <ref bean=\"validationInInterceptor\"/>",
                "+    </jaxrs:inInterceptors>  ",
                "+    <jaxrs:outInterceptors>",
                "+      <ref bean=\"gzipOutInterceptor\"/>",
                "+      <ref bean=\"validationOutInterceptor\"/>",
                "+    </jaxrs:outInterceptors>",
                "+    <jaxrs:providers>",
                "+      <ref bean=\"jsonProvider\"/>",
                "+      <ref bean=\"wadlGenerator\"/>",
                "+    </jaxrs:providers>",
                "+  </jaxrs:server>",
                "+",
                "+</beans>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 7ea19b6a01..87348ff9cd 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1052,2 +1052,8 @@ under the License.",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+          <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+          <version>${project.version}</version>",
                "+        </dependency>",
                "+        ",
                "         <dependency>",
                "diff --git a/fit/core-reference/src/main/webapp/WEB-INF/web.xml b/fit/core-reference/src/main/webapp/WEB-INF/web.xml",
                "index 49a82fe476..ad39dab3f8 100644",
                "--- a/fit/core-reference/src/main/webapp/WEB-INF/web.xml",
                "+++ b/fit/core-reference/src/main/webapp/WEB-INF/web.xml",
                "@@ -48,2 +48,2 @@ under the License.",
                "-</web-app>",
                "\\ No newline at end of file",
                "+</web-app>"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "ext/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMConstants.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Display.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMBean.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Function.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ResourceType.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/SortOrder.java",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/JacksonSCIMJsonProvider.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/cxf/org.apache.cxf.Logger",
                "ext/scimv2/scim-rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bc3c6e6165b670c6c0fb0c1951dfa1f45875c6cb"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: read",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c9018fff5c6353a9a7eab3338ba7d691685209c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508226602,
            "hunks": 103,
            "message": "[SYNCOPE-1138] Replacing left and right with otherEnd",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "index 334a97f3e1..75ca867703 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "@@ -217,3 +217,3 @@ public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardSt",
                "         try {",
                "-            final GroupTO groupTO = groupRestClient.read(membershipTO.getRightKey());",
                "+            final GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());",
                "             return groupTO.getTypeExtension(anyType).getAuxClasses();",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "index 499bc261af..2c28a23df0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "@@ -157,3 +157,3 @@ public class Groups extends WizardStep implements ICondition {",
                "                                     SyncopeClient.getGroupSearchConditionBuilder().",
                "-                                    isAssignable().and().is(\"name\").equalTo(filter).query(),",
                "+                                            isAssignable().and().is(\"name\").equalTo(filter).query(),",
                "                                     1, MAX_GROUP_LIST_CARDINALITY,",
                "@@ -225,3 +225,3 @@ public class Groups extends WizardStep implements ICondition {",
                "                 && SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().",
                "-                isActionAuthorized(this, RENDER);",
                "+                        isActionAuthorized(this, RENDER);",
                "     }",
                "@@ -292,4 +292,4 @@ public class Groups extends WizardStep implements ICondition {",
                "             for (MembershipTO membership : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {",
                "-                if (assignedGroups.containsKey(membership.getRightKey())) {",
                "-                    membership.setGroupName(assignedGroups.get(membership.getRightKey()).getName());",
                "+                if (assignedGroups.containsKey(membership.getGroupKey())) {",
                "+                    membership.setGroupName(assignedGroups.get(membership.getGroupKey()).getName());",
                "                 } else {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "index 115da51e23..5fd47266ad 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.client.console.wizards.any;",
                "-",
                " import java.util.ArrayList;",
                "@@ -97,3 +96,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "     private final AnyTO anyTO;",
                "-    ",
                "+",
                "     private final RelationshipTypeRestClient relationshipTypeRestClient = new RelationshipTypeRestClient();",
                "@@ -151,3 +150,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                                         setItems(relationships.get(input)).",
                "-                                        includes(\"rightType\", \"rightKey\").",
                "+                                        includes(\"otherEndType\", \"otherEndKey\").",
                "                                         addAction(new ActionLink<RelationshipTO>() {",
                "@@ -277,4 +276,4 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "-            final AjaxDropDownChoicePanel<AnyTypeTO> rightType = new AjaxDropDownChoicePanel<>(",
                "-                    \"rightType\", \"rightType\", new PropertyModel<AnyTypeTO>(rel, \"rightType\") {",
                "+            final AjaxDropDownChoicePanel<AnyTypeTO> otherType = new AjaxDropDownChoicePanel<>(",
                "+                    \"otherType\", \"otherType\", new PropertyModel<AnyTypeTO>(rel, \"otherType\") {",
                "@@ -285,3 +284,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                     for (AnyTypeTO obj : availableTypes) {",
                "-                        if (obj.getKey().equals(rel.getRightType())) {",
                "+                        if (obj.getKey().equals(rel.getOtherEndType())) {",
                "                             return obj;",
                "@@ -294,7 +293,7 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                 public void setObject(final AnyTypeTO object) {",
                "-                    rel.setRightType(object == null ? null : object.getKey());",
                "+                    rel.setOtherEndType(object == null ? null : object.getKey());",
                "                 }",
                "             }, false);",
                "-            rightType.setChoices(availableTypes);",
                "-            rightType.setChoiceRenderer(new IChoiceRenderer<AnyTypeTO>() {",
                "+            otherType.setChoices(availableTypes);",
                "+            otherType.setChoiceRenderer(new IChoiceRenderer<AnyTypeTO>() {",
                "@@ -323,5 +322,5 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "             });",
                "-            // enable \"rightType\" dropdown only if \"type\" option is selected - SYNCOPE-1140",
                "-            rightType.setEnabled(false);",
                "-            add(rightType);",
                "+            // enable \"otherType\" dropdown only if \"type\" option is selected - SYNCOPE-1140",
                "+            otherType.setEnabled(false);",
                "+            add(otherType);",
                "@@ -342,6 +341,6 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                     container.addOrReplace(emptyFragment.setRenderBodyOnly(true));",
                "-                    rightType.setModelObject(null);",
                "-                    // enable \"rightType\" dropdown only if \"type\" option is selected - SYNCOPE-1140",
                "-                    rightType.setEnabled(type.getModelObject() != null && !type.getModelObject().isEmpty());",
                "-                    target.add(rightType);",
                "+                    otherType.setModelObject(null);",
                "+                    // enable \"otherType\" dropdown only if \"type\" option is selected - SYNCOPE-1140",
                "+                    otherType.setEnabled(type.getModelObject() != null && !type.getModelObject().isEmpty());",
                "+                    target.add(otherType);",
                "                     target.add(container);",
                "@@ -350,3 +349,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "-            rightType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+            otherType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "@@ -356,3 +355,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                 protected void onUpdate(final AjaxRequestTarget target) {",
                "-                    final AnyTypeTO anyType = rightType.getModelObject();",
                "+                    final AnyTypeTO anyType = otherType.getModelObject();",
                "                     if (anyType == null) {",
                "@@ -398,3 +397,3 @@ public class Relationships extends WizardStep implements WizardModel.ICondition",
                "                 AnyTO right = AnySelectionDirectoryPanel.ItemSelection.class.cast(event.getPayload()).getSelection();",
                "-                rel.setRightKey(right.getKey());",
                "+                rel.setOtherEndKey(right.getKey());",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html",
                "index cce2c7ccf7..83ab31d469 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html",
                "@@ -27,3 +27,3 @@ under the License.",
                "       <div class=\"form-group\">",
                "-        <span wicket:id=\"rightType\"/>",
                "+        <span wicket:id=\"otherType\"/>",
                "       </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "index cfc57ed553..acf8a061fb 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "@@ -223,3 +223,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           for (var i in response) {",
                "-            $scope.dynamicForm.groups.push({\"rightKey\": response[i].key, \"groupName\": response[i].name});",
                "+            $scope.dynamicForm.groups.push({\"groupKey\": response[i].key, \"groupName\": response[i].name});",
                "           }",
                "@@ -286,3 +286,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "                     {",
                "-                      \"rightKey\": $scope.user.memberships[index][\"rightKey\"].toString(),",
                "+                      \"groupKey\": $scope.user.memberships[index][\"groupKey\"].toString(),",
                "                       \"groupName\": $scope.user.memberships[index][\"groupName\"]",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "index 330b1a482e..8cb89a9363 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "@@ -35,6 +35,6 @@ angular.module('self')",
                "               };",
                "-              ",
                "+",
                "               $scope.addGroup = function (item, model) {",
                "                 var membership = item;",
                "-                $scope.user.memberships.push({\"rightKey\": membership.rightKey, \"groupName\": membership.groupName});",
                "+                $scope.user.memberships.push({\"groupKey\": membership.groupKey, \"groupName\": membership.groupName});",
                "                 $scope.$emit(\"groupAdded\", membership.groupName);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/filters/propsFilter.js b/client/enduser/src/main/resources/META-INF/resources/app/js/filters/propsFilter.js",
                "index fe23dceb1e..51e01593ad 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/filters/propsFilter.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/filters/propsFilter.js",
                "@@ -31,5 +31,5 @@ angular.module(\"self\")",
                "           return function (items, props) {",
                "-            var out = [];            ",
                "+            var out = [];",
                "             if (items && items.length && props.selected && props.selected.length) {",
                "-              var selected = props.selected;              ",
                "+              var selected = props.selected;",
                "               for (var i = 0; i < items.length; i++) {",
                "@@ -37,3 +37,3 @@ angular.module(\"self\")",
                "                 for (var j = 0; j < selected.length; j++) {",
                "-                  if (item.rightKey == selected[j].rightKey) {",
                "+                  if (item.groupKey == selected[j].groupKey) {",
                "                     itemMisses = false;",
                "@@ -42,3 +42,3 @@ angular.module(\"self\")",
                "                 }",
                "-                if(itemMisses){",
                "+                if (itemMisses) {",
                "                   out.push(item);",
                "@@ -46,4 +46,3 @@ angular.module(\"self\")",
                "               }",
                "-            }",
                "-            else{",
                "+            } else {",
                "               out = items;",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html b/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "index ef77ae143f..38e6a29910 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "@@ -27,3 +27,3 @@ under the License.",
                "     <ui-select-choices repeat=\"group in dynamicForm.groups | propsFilter: {selected: dynamicForm.selectedGroups} ",
                "-                       track by group.rightKey\" class=\"ui-select-choices\">",
                "+                       track by group.groupKey\" class=\"ui-select-choices\">",
                "       <div id=\"{{group.groupName}}\" ng-bind-html=\"group.groupName | highlight: $select.search\"></div>",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java b/common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java",
                "index dfc0a1e629..d42a62545d 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java",
                "@@ -57,3 +57,3 @@ public final class EntityTOUtils {",
                "         for (RelationshipTO relationship : relationships) {",
                "-            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);",
                "+            result.put(Pair.of(relationship.getType(), relationship.getOtherEndKey()), relationship);",
                "         }",
                "@@ -66,3 +66,3 @@ public final class EntityTOUtils {",
                "         for (MembershipTO membership : memberships) {",
                "-            result.put(membership.getRightKey(), membership);",
                "+            result.put(membership.getGroupKey(), membership);",
                "         }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java",
                "index af8b0eae41..9581cd90a1 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java",
                "@@ -55,3 +55,3 @@ public class AnyObjectTO extends AnyTO implements GroupableRelatableTO {",
                "     @Override",
                "-    public RelationshipTO getRelationship(final String type, final String rightKey) {",
                "+    public RelationshipTO getRelationship(final String type, final String otherKey) {",
                "         return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {",
                "@@ -60,3 +60,3 @@ public class AnyObjectTO extends AnyTO implements GroupableRelatableTO {",
                "             public boolean evaluate(final RelationshipTO object) {",
                "-                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());",
                "+                return type.equals(object.getType()) && otherKey.equals(object.getOtherEndKey());",
                "             }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java",
                "index f2b8dbc2a9..ee0ed63548 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java",
                "@@ -30,3 +30,3 @@ public interface GroupableRelatableTO {",
                "-    RelationshipTO getRelationship(String type, String rightKey);",
                "+    RelationshipTO getRelationship(String type, String otherKey);",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java",
                "index 5737c7f9ed..1003a50a79 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java",
                "@@ -30,3 +30,3 @@ import org.apache.commons.collections4.IterableUtils;",
                " import org.apache.commons.collections4.Predicate;",
                "-import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "@@ -34,3 +34,3 @@ import org.apache.syncope.common.lib.types.AnyTypeKind;",
                " @XmlType",
                "-public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "+public class MembershipTO extends AbstractBaseBean implements AttributableTO {",
                "@@ -43,3 +43,3 @@ public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "         public Builder group(final String groupKey) {",
                "-            instance.setRightKey(groupKey);",
                "+            instance.setGroupKey(groupKey);",
                "             return this;",
                "@@ -48,3 +48,3 @@ public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "         public Builder group(final String groupKey, final String groupName) {",
                "-            instance.setRightKey(groupKey);",
                "+            instance.setGroupKey(groupKey);",
                "             instance.setGroupName(groupName);",
                "@@ -58,2 +58,4 @@ public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "+    private String groupKey;",
                "+",
                "     private String groupName;",
                "@@ -66,25 +68,4 @@ public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "-    @Override",
                "-    public String getType() {",
                "-        return \"Membership\";",
                "-    }",
                "-",
                "-    @Override",
                "-    public void setType(final String relationshipType) {",
                "-        // ignore",
                "-    }",
                "-",
                "-    @Override",
                "-    public String getRightType() {",
                "-        return AnyTypeKind.GROUP.name();",
                "-    }",
                "-",
                "-    @Override",
                "-    public void setRightType(final String rightType) {",
                "-        // ignore",
                "-    }",
                "-",
                "-    @JsonIgnore",
                "     public String getGroupKey() {",
                "-        return getRightKey();",
                "+        return groupKey;",
                "     }",
                "@@ -92,3 +73,3 @@ public class MembershipTO extends RelationshipTO implements AttributableTO {",
                "     public void setGroupKey(final String groupKey) {",
                "-        setRightKey(groupKey);",
                "+        this.groupKey = groupKey;",
                "     }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "index fc5de4ff76..015e18c333 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "@@ -4,3 +4,3 @@",
                "  * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "+ * regarding copyother ownership.  The ASF licenses this file",
                "  * to you under the Apache License, Version 2.0 (the",
                "@@ -39,5 +39,5 @@ public class RelationshipTO extends AbstractBaseBean {",
                "-        public Builder right(final String rightType, final String rightKey) {",
                "-            instance.setRightType(rightType);",
                "-            instance.setRightKey(rightKey);",
                "+        public Builder otherEnd(final String otherEndType, final String otherEndKey) {",
                "+            instance.setOtherEndType(otherEndType);",
                "+            instance.setOtherEndKey(otherEndKey);",
                "             return this;",
                "@@ -52,5 +52,5 @@ public class RelationshipTO extends AbstractBaseBean {",
                "-    private String rightType;",
                "+    private String otherEndType;",
                "-    private String rightKey;",
                "+    private String otherEndKey;",
                "@@ -64,16 +64,16 @@ public class RelationshipTO extends AbstractBaseBean {",
                "-    public String getRightType() {",
                "-        return rightType;",
                "+    public String getOtherEndType() {",
                "+        return otherEndType;",
                "     }",
                "-    public void setRightType(final String rightType) {",
                "-        this.rightType = rightType;",
                "+    public void setOtherEndType(final String otherEndType) {",
                "+        this.otherEndType = otherEndType;",
                "     }",
                "-    public String getRightKey() {",
                "-        return rightKey;",
                "+    public String getOtherEndKey() {",
                "+        return otherEndKey;",
                "     }",
                "-    public void setRightKey(final String rightKey) {",
                "-        this.rightKey = rightKey;",
                "+    public void setOtherEndKey(final String otherEndKey) {",
                "+        this.otherEndKey = otherEndKey;",
                "     }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "index 8acca6f0df..061f06eb86 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "@@ -198,3 +198,3 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {",
                "     @Override",
                "-    public RelationshipTO getRelationship(final String type, final String rightKey) {",
                "+    public RelationshipTO getRelationship(final String type, final String otherKey) {",
                "         return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {",
                "@@ -202,4 +202,4 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {",
                "             @Override",
                "-            public boolean evaluate(final RelationshipTO object) {",
                "-                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());",
                "+            public boolean evaluate(final RelationshipTO relationship) {",
                "+                return type.equals(relationship.getType()) && otherKey.equals(relationship.getOtherEndKey());",
                "             }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "index 518575b0c9..f001204ba0 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "@@ -25,4 +25,5 @@ import java.util.Set;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                " import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "-import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;",
                "+import org.apache.syncope.core.persistence.api.entity.Relationship;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "@@ -47,3 +48,3 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {",
                "-    List<ARelationship> findAllRelationships(AnyObject anyObject);",
                "+    List<Relationship<Any<?>, Any<?>>> findAllRelationships(AnyObject anyObject);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "index 1c2aaf4601..cab4a22cc7 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "@@ -47,2 +47,3 @@ import org.apache.syncope.core.persistence.api.dao.GroupDAO;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                " import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "@@ -50,2 +51,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "+import org.apache.syncope.core.persistence.api.entity.Relationship;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "@@ -179,9 +181,22 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "     @Override",
                "-    public List<ARelationship> findAllRelationships(final AnyObject anyObject) {",
                "-        TypedQuery<ARelationship> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()",
                "-                + \" e WHERE e.rightEnd=:anyObject OR e.leftEnd=:anyObject\", ARelationship.class);",
                "-        query.setParameter(\"anyObject\", anyObject);",
                "+    public List<Relationship<Any<?>, Any<?>>> findAllRelationships(final AnyObject anyObject) {",
                "+        List<Relationship<Any<?>, Any<?>>> result = new ArrayList<>();",
                "-        return query.getResultList();",
                "+        @SuppressWarnings(\"unchecked\")",
                "+        TypedQuery<Relationship<Any<?>, Any<?>>> aquery =",
                "+                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(",
                "+                        \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()",
                "+                        + \" e WHERE e.rightEnd=:anyObject OR e.leftEnd=:anyObject\");",
                "+        aquery.setParameter(\"anyObject\", anyObject);",
                "+        result.addAll(aquery.getResultList());",
                "+",
                "+        @SuppressWarnings(\"unchecked\")",
                "+        TypedQuery<Relationship<Any<?>, Any<?>>> uquery =",
                "+                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(",
                "+                        \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()",
                "+                        + \" e WHERE e.rightEnd=:anyObject\");",
                "+        uquery.setParameter(\"anyObject\", anyObject);",
                "+        result.addAll(uquery.getResultList());",
                "+",
                "+        return result;",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java",
                "index a2a41fac62..1612db4c2e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java",
                "@@ -123,15 +123,2 @@ public abstract class AbstractGroupableRelatable<",
                "-    @Override",
                "-    public REL getRelationship(final RelationshipType relationshipType, final String otherEndKey) {",
                "-        return IterableUtils.find(getRelationships(), new Predicate<REL>() {",
                "-",
                "-            @Override",
                "-            public boolean evaluate(final REL relationship) {",
                "-                return otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey())",
                "-                        && ((relationshipType == null && relationship.getType() == null)",
                "-                        || (relationshipType != null && relationshipType.equals(relationship.getType())));",
                "-            }",
                "-        });",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "index 32bd4c0efc..16f94e554b 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "@@ -35,4 +35,7 @@ import javax.validation.Valid;",
                " import javax.validation.constraints.NotNull;",
                "+import org.apache.commons.collections4.IterableUtils;",
                "+import org.apache.commons.collections4.Predicate;",
                " import org.apache.syncope.core.persistence.api.entity.AnyType;",
                " import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                "+import org.apache.syncope.core.persistence.api.entity.RelationshipType;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "@@ -153,2 +156,16 @@ public class JPAAnyObject",
                "+    @Override",
                "+    public ARelationship getRelationship(final RelationshipType relationshipType, final String otherEndKey) {",
                "+        return IterableUtils.find(getRelationships(), new Predicate<ARelationship>() {",
                "+",
                "+            @Override",
                "+            public boolean evaluate(final ARelationship relationship) {",
                "+                return relationshipType.equals(relationship.getType())",
                "+                        && otherEndKey != null",
                "+                        && (otherEndKey.equals(relationship.getLeftEnd().getKey())",
                "+                        || otherEndKey.equals(relationship.getRightEnd().getKey()));",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "index 0dddb7787d..15407d9655 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "@@ -48,2 +48,4 @@ import javax.validation.constraints.Min;",
                " import javax.validation.constraints.NotNull;",
                "+import org.apache.commons.collections4.IterableUtils;",
                "+import org.apache.commons.collections4.Predicate;",
                " import org.apache.syncope.common.lib.types.CipherAlgorithm;",
                "@@ -60,2 +62,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyType;",
                " import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                "+import org.apache.syncope.core.persistence.api.entity.RelationshipType;",
                " import org.apache.syncope.core.persistence.api.entity.Role;",
                "@@ -512,2 +515,14 @@ public class JPAUser",
                "+    @Override",
                "+    public URelationship getRelationship(final RelationshipType relationshipType, final String otherEndKey) {",
                "+        return IterableUtils.find(getRelationships(), new Predicate<URelationship>() {",
                "+",
                "+            @Override",
                "+            public boolean evaluate(final URelationship relationship) {",
                "+                return relationshipType.equals(relationship.getType())",
                "+                        && otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey());",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "index 5b8d6931ef..8e2b83c53b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "@@ -67,5 +67,3 @@ import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "-import org.apache.syncope.core.persistence.api.entity.Relationship;",
                " import org.apache.syncope.core.persistence.api.entity.VirSchema;",
                "-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                " import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "@@ -590,6 +588,5 @@ abstract class AbstractAnyDataBinder {",
                "-    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?>, AnyObject> relationship) {",
                "+    protected RelationshipTO getRelationshipTO(final String relationshipType, final Any<?> otherEnd) {",
                "         return new RelationshipTO.Builder().",
                "-                type(relationship.getType().getKey()).",
                "-                right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).",
                "+                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey()).",
                "                 build();",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 0173d5b55b..f5cca666b8 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -49,2 +49,3 @@ import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                " import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "@@ -53,2 +54,3 @@ import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "+import org.apache.syncope.core.persistence.api.entity.Relationship;",
                " import org.apache.syncope.core.persistence.api.entity.RelationshipType;",
                "@@ -107,9 +109,13 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             // relationships",
                "-            CollectionUtils.collect(anyObject.getRelationships(), new Transformer<ARelationship, RelationshipTO>() {",
                "+            CollectionUtils.collect(anyObjectDAO.findAllRelationships(anyObject), ",
                "+                    new Transformer<Relationship<Any<?>, Any<?>>, RelationshipTO>() {",
                "                 @Override",
                "-                public RelationshipTO transform(final ARelationship relationship) {",
                "-                    return AnyObjectDataBinderImpl.this.getRelationshipTO(relationship);",
                "+                public RelationshipTO transform(final Relationship<Any<?>, Any<?>> relationship) {",
                "+                    return getRelationshipTO(",
                "+                            relationship.getType().getKey(),",
                "+                            relationship.getLeftEnd().getKey().equals(anyObject.getKey())",
                "+                            ? relationship.getRightEnd()",
                "+                            : relationship.getLeftEnd());",
                "                 }",
                "-",
                "             }, anyObjectTO.getRelationships());",
                "@@ -182,5 +188,5 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {",
                "-                if (StringUtils.isBlank(relationshipTO.getRightType())",
                "-                        || AnyTypeKind.USER.name().equals(relationshipTO.getRightType())",
                "-                        || AnyTypeKind.GROUP.name().equals(relationshipTO.getRightType())) {",
                "+                if (StringUtils.isBlank(relationshipTO.getOtherEndType())",
                "+                        || AnyTypeKind.USER.name().equals(relationshipTO.getOtherEndType())",
                "+                        || AnyTypeKind.GROUP.name().equals(relationshipTO.getOtherEndType())) {",
                "@@ -189,8 +195,8 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                     invalidAnyType.getElements().add(AnyType.class.getSimpleName()",
                "-                            + \" not allowed for relationship: \" + relationshipTO.getRightType());",
                "+                            + \" not allowed for relationship: \" + relationshipTO.getOtherEndType());",
                "                     scce.addException(invalidAnyType);",
                "                 } else {",
                "-                    AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());",
                "+                    AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getOtherEndKey());",
                "                     if (otherEnd == null) {",
                "-                        LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());",
                "+                        LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getOtherEndKey());",
                "                     } else if (anyObject.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {",
                "@@ -220,8 +226,8 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {",
                "-                Group group = membershipTO.getRightKey() == null",
                "+                Group group = membershipTO.getGroupKey() == null",
                "                         ? groupDAO.findByName(membershipTO.getGroupName())",
                "-                        : groupDAO.find(membershipTO.getRightKey());",
                "+                        : groupDAO.find(membershipTO.getGroupKey());",
                "                 if (group == null) {",
                "                     LOG.debug(\"Ignoring invalid group \"",
                "-                            + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());",
                "+                            + membershipTO.getGroupKey() + \" / \" + membershipTO.getGroupName());",
                "                 } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {",
                "@@ -292,3 +298,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                     ARelationship relationship =",
                "-                            anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());",
                "+                            anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey());",
                "                     if (relationship != null) {",
                "@@ -296,2 +302,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                         relationship.setLeftEnd(null);",
                "+                        relationship.setRightEnd(null);",
                "                     }",
                "@@ -299,5 +306,5 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                     if (patch.getOperation() == PatchOperation.ADD_REPLACE) {",
                "-                        if (StringUtils.isBlank(patch.getRelationshipTO().getRightType())",
                "-                                || AnyTypeKind.USER.name().equals(patch.getRelationshipTO().getRightType())",
                "-                                || AnyTypeKind.GROUP.name().equals(patch.getRelationshipTO().getRightType())) {",
                "+                        if (StringUtils.isBlank(patch.getRelationshipTO().getOtherEndType())",
                "+                                || AnyTypeKind.USER.name().equals(patch.getRelationshipTO().getOtherEndType())",
                "+                                || AnyTypeKind.GROUP.name().equals(patch.getRelationshipTO().getOtherEndType())) {",
                "@@ -306,8 +313,8 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                             invalidAnyType.getElements().add(AnyType.class.getSimpleName()",
                "-                                    + \" not allowed for relationship: \" + patch.getRelationshipTO().getRightType());",
                "+                                    + \" not allowed for relationship: \" + patch.getRelationshipTO().getOtherEndType());",
                "                             scce.addException(invalidAnyType);",
                "                         } else {",
                "-                            AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());",
                "+                            AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getOtherEndKey());",
                "                             if (otherEnd == null) {",
                "-                                LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());",
                "+                                LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getOtherEndKey());",
                "                             } else if (anyObject.getRealm().getFullPath().",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index 0f47f70b51..4b3c517675 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -216,5 +216,5 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "             for (RelationshipTO relationshipTO : userTO.getRelationships()) {",
                "-                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());",
                "+                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getOtherEndKey());",
                "                 if (otherEnd == null) {",
                "-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());",
                "+                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getOtherEndKey());",
                "                 } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {",
                "@@ -243,8 +243,8 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "             for (MembershipTO membershipTO : userTO.getMemberships()) {",
                "-                Group group = membershipTO.getRightKey() == null",
                "+                Group group = membershipTO.getGroupKey() == null",
                "                         ? groupDAO.findByName(membershipTO.getGroupName())",
                "-                        : groupDAO.find(membershipTO.getRightKey());",
                "+                        : groupDAO.find(membershipTO.getGroupKey());",
                "                 if (group == null) {",
                "                     LOG.debug(\"Ignoring invalid group \"",
                "-                            + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());",
                "+                            + membershipTO.getGroupKey() + \" / \" + membershipTO.getGroupName());",
                "                 } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {",
                "@@ -390,3 +390,3 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                     URelationship relationship =",
                "-                            user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());",
                "+                            user.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey());",
                "                     if (relationship != null) {",
                "@@ -397,5 +397,5 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                     if (patch.getOperation() == PatchOperation.ADD_REPLACE) {",
                "-                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());",
                "+                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getOtherEndKey());",
                "                         if (otherEnd == null) {",
                "-                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());",
                "+                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getOtherEndKey());",
                "                         } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {",
                "@@ -625,5 +625,4 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                 public RelationshipTO transform(final URelationship relationship) {",
                "-                    return UserDataBinderImpl.this.getRelationshipTO(relationship);",
                "+                    return getRelationshipTO(relationship.getType().getKey(), relationship.getRightEnd());",
                "                 }",
                "-",
                "             }, userTO.getRelationships());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java",
                "index 2e4314d4bf..5ab0e789da 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java",
                "@@ -262,3 +262,3 @@ public class UserReportlet extends AbstractReportlet {",
                "                     atts.addAttribute(\"\", \"\", \"anyObjectKey\",",
                "-                            ReportXMLConst.XSD_STRING, rel.getRightKey());",
                "+                            ReportXMLConst.XSD_STRING, rel.getOtherEndKey());",
                "                     handler.startElement(\"\", \"\", \"relationship\", atts);",
                "@@ -266,3 +266,3 @@ public class UserReportlet extends AbstractReportlet {",
                "                     if (conf.getFeatures().contains(Feature.resources)) {",
                "-                        for (URelationship actualRel : user.getRelationships(rel.getRightKey())) {",
                "+                        for (URelationship actualRel : user.getRelationships(rel.getOtherEndKey())) {",
                "                             doExtractResources(",
                "@@ -284,3 +284,3 @@ public class UserReportlet extends AbstractReportlet {",
                "                     atts.addAttribute(\"\", \"\", \"groupKey\",",
                "-                            ReportXMLConst.XSD_STRING, memb.getRightKey());",
                "+                            ReportXMLConst.XSD_STRING, memb.getGroupKey());",
                "                     atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, memb.getGroupName());",
                "@@ -289,6 +289,6 @@ public class UserReportlet extends AbstractReportlet {",
                "                     if (conf.getFeatures().contains(Feature.resources)) {",
                "-                        UMembership actualMemb = user.getMembership(memb.getRightKey());",
                "+                        UMembership actualMemb = user.getMembership(memb.getGroupKey());",
                "                         if (actualMemb == null) {",
                "                             LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\",",
                "-                                    memb.getRightKey(), user);",
                "+                                    memb.getGroupKey(), user);",
                "                         } else {",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "index ef47ef17b1..2b342af2a9 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "@@ -111,3 +111,3 @@ public class TemplateUtils {",
                "         for (RelationshipTO relationship : template.getRelationships()) {",
                "-            if (any.getRelationship(relationship.getRightKey(), relationship.getRightKey()) == null) {",
                "+            if (any.getRelationship(relationship.getType(), relationship.getOtherEndKey()) == null) {",
                "                 any.getRelationships().add(relationship);",
                "diff --git a/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java b/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java",
                "index 9bcea18166..09c763895a 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java",
                "+++ b/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java",
                "@@ -33,5 +33,5 @@ import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.Relationship;",
                " import org.apache.syncope.core.persistence.api.entity.Role;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "-import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "@@ -122,3 +122,3 @@ public class ElasticsearchUtils {",
                "             List<Object> relationshipTypes = new ArrayList<>();",
                "-            for (ARelationship relationship : anyObjectDAO.findAllRelationships(anyObject)) {",
                "+            for (Relationship<Any<?>, Any<?>> relationship : anyObjectDAO.findAllRelationships(anyObject)) {",
                "                 relationships.add(relationship.getRightEnd().getKey());"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/filters/propsFilter.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java",
                "ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1138": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1d74b79c26f38c33675b83e0cd7610c466210207"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: template, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1138",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79b66960301b4b238037c00c570f46b88fb9c2aa",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516617381,
            "hunks": 5,
            "message": "[SYNCOPE-1263] Now checking for invalid JWT string",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java b/common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java",
                "index 8a7fe36c3e..99c66d7cb5 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java",
                "@@ -280,5 +280,5 @@ public final class StandardEntitlement {",
                "-    public static final String ACCESS_TOKEN_LIST = \"TASK_LIST\";",
                "+    public static final String ACCESS_TOKEN_LIST = \"ACCESS_TOKEN_LIST\";",
                "-    public static final String ACCESS_TOKEN_DELETE = \"TASK_DELETE\";",
                "+    public static final String ACCESS_TOKEN_DELETE = \"ACCESS_TOKEN_DELETE\";",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java",
                "index faf0576092..8a2812d5c3 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java",
                "@@ -26,3 +26,3 @@ import javax.servlet.http.HttpServletResponse;",
                " import javax.ws.rs.core.HttpHeaders;",
                "-",
                "+import org.apache.cxf.rs.security.jose.jws.JwsException;",
                " import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;",
                "@@ -96,3 +96,2 @@ public class JWTAuthenticationFilter extends OncePerRequestFilter {",
                "-        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(stringToken);",
                "         try {",
                "@@ -100,2 +99,3 @@ public class JWTAuthenticationFilter extends OncePerRequestFilter {",
                "+            JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(stringToken);",
                "             JWTSSOProvider jwtSSOProvider = dataAccessor.getJWTSSOProvider(consumer.getJwtClaims().getIssuer());",
                "@@ -110,2 +110,6 @@ public class JWTAuthenticationFilter extends OncePerRequestFilter {",
                "             chain.doFilter(request, response);",
                "+        } catch (JwsException e) {",
                "+            SecurityContextHolder.clearContext();",
                "+            this.authenticationEntryPoint.commence(",
                "+                    request, response, new BadCredentialsException(\"Invalid JWT: \" + stringToken, e));",
                "         } catch (AuthenticationException e) {"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1263": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "227f085161f3027d1ab200a07d8460f3a644b75f"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entitlement",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a799dbc0bbcce4635ab41cd8e6867431aa434702",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508143099,
            "hunks": 7,
            "message": "[SYNCOPE-1224] Properly using pagination for bulk delete",
            "diff": [
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "index cbd0eb510b..6efa5447bb 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java",
                "@@ -22,2 +22,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.stream.Collectors;",
                " import org.apache.syncope.client.cli.SyncopeServices;",
                "@@ -26,2 +27,3 @@ import org.apache.syncope.common.lib.to.BulkAction;",
                " import org.apache.syncope.common.lib.to.BulkActionResult;",
                "+import org.apache.syncope.common.lib.to.EntityTO;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "@@ -33,2 +35,4 @@ public class UserSyncopeOperations {",
                "+    private static final int PAGE_SIZE = 100;",
                "+",
                "     private final UserService userService = SyncopeServices.get(UserService.class);",
                "@@ -74,6 +78,6 @@ public class UserSyncopeOperations {",
                "             final String realm, final String attributeName, final String attributeValue) {",
                "-        final List<UserTO> users = userService.search(new AnyQuery.Builder().realm(realm).",
                "-                fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue)",
                "-                        .query()).build()).getResult();",
                "-        return deleteBulk(users);",
                "+",
                "+        return bulkDelete(new AnyQuery.Builder().realm(realm).fiql(",
                "+                SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue).query()).",
                "+                build());",
                "     }",
                "@@ -81,13 +85,22 @@ public class UserSyncopeOperations {",
                "     public Map<String, BulkActionResult.Status> deleteAll(final String realm) {",
                "-        return deleteBulk(userService.search(new AnyQuery.Builder().realm(realm).details(false).build()).getResult());",
                "+        return bulkDelete(new AnyQuery.Builder().realm(realm).details(false).build());",
                "     }",
                "-    private Map<String, BulkActionResult.Status> deleteBulk(final List<UserTO> users) {",
                "-        final BulkAction bulkAction = new BulkAction();",
                "+    private Map<String, BulkActionResult.Status> bulkDelete(final AnyQuery query) {",
                "+        query.setPage(0);",
                "+        query.setSize(0);",
                "+        int count = userService.search(query).getTotalCount();",
                "+",
                "+        BulkAction bulkAction = new BulkAction();",
                "         bulkAction.setType(BulkAction.Type.DELETE);",
                "-        users.forEach(user -> {",
                "-            bulkAction.getTargets().add(user.getKey());",
                "-        });",
                "-        final BulkActionResult bulkResult = userService.bulk(bulkAction).readEntity(BulkActionResult.class);",
                "-        return bulkResult.getResults();",
                "+",
                "+        query.setSize(PAGE_SIZE);",
                "+        for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {",
                "+            query.setPage(page);",
                "+",
                "+            bulkAction.getTargets().addAll(userService.search(query).getResult().stream().",
                "+                    map(EntityTO::getKey).collect(Collectors.toList()));",
                "+        }",
                "+",
                "+        return userService.bulk(bulkAction).readEntity(BulkActionResult.class).getResults();",
                "     }"
            ],
            "changed_files": [
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1224": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e3a20935270457f85da4822e7b02eb837e25a8be"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: operation",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1224",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39d507d4945489546cba69cb160996d4798c72a2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510817915,
            "hunks": 4,
            "message": "[SYNCOPE-1234] Forgot to consider the profile parameter",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "index bcf20c3727..d367a7e9e4 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "@@ -35,2 +35,3 @@ public interface PullActions extends ProvisioningActions {",
                "      *",
                "+     * @param profile profile of the pull being executed.",
                "      * @param delta retrieved pull information",
                "@@ -38,3 +39,3 @@ public interface PullActions extends ProvisioningActions {",
                "      */",
                "-    default SyncDelta preprocess(final SyncDelta delta) {",
                "+    default SyncDelta preprocess(ProvisioningProfile<?, ?> profile, SyncDelta delta) {",
                "         return delta;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "index dd7e4eff1b..0a74cb399b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "@@ -729,3 +729,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         for (PullActions action : profile.getActions()) {",
                "-            processed = action.preprocess(processed);",
                "+            processed = action.preprocess(profile, processed);",
                "         }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index b3b12ea01e..dae9b89050 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -673,3 +673,3 @@ public class DefaultRealmPullResultHandler",
                "         for (PullActions action : profile.getActions()) {",
                "-            processed = action.preprocess(processed);",
                "+            processed = action.preprocess(profile, processed);",
                "         }"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1234": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "50b74686ce9b6e08adf6eca632a88cb211004460"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1234",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "92646028fce5f47913f78debebbe75da2c9dd2b4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513882726,
            "hunks": 33,
            "message": "[SYNCOPE-1255] provides max execution time for all operations executed through submittable modals",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "index cfcdfbf7c0..eb43a2e27d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "@@ -111,2 +111,4 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+    private Integer maxWaitTime;",
                "+",
                "     private List<String> domains;",
                "@@ -164,2 +166,4 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+        maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));",
                "+",
                "         String csrf = props.getProperty(\"csrf\");",
                "@@ -316,2 +320,6 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+    public Integer getMaxWaitTimeInSeconds() {",
                "+        return maxWaitTime;",
                "+    }",
                "+",
                "     public SyncopeClientFactoryBean newClientFactory() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "index ab84d10b58..747e141ac5 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "@@ -28,3 +28,5 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.Callable;",
                " import java.util.concurrent.Executors;",
                "+import java.util.concurrent.Future;",
                " import java.util.concurrent.ScheduledExecutorService;",
                "@@ -124,2 +126,6 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "+    public <T> Future<T> execute(final Callable<T> command) {",
                "+        return executorService.submit(command);",
                "+    }",
                "+",
                "     public PlatformInfo getPlatformInfo() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java",
                "index b11319562b..221ae41e28 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java",
                "@@ -49,3 +49,3 @@ public class NotificationPanel extends Panel implements IFeedback, IGenericCompo",
                "                 + \" { type: 'error', template: $('#errorTemplate').html() },\"",
                "-                + \" { type: 'warning', template: $('#errorTemplate').html() } ] \");",
                "+                + \" { type: 'warning', template: $('#warningTemplate').html() } ] \");",
                "@@ -68,2 +68,6 @@ public class NotificationPanel extends Panel implements IFeedback, IGenericCompo",
                "                 this.notification.error(handler, message.getMessage());",
                "+            } else if (message.isWarning()) {",
                "+                // this is necessary before check for success and info in order to show warnings: isSuccess and isInfo",
                "+                // return true also in case of warnings ...",
                "+                this.notification.warn(handler, message.getMessage());",
                "             } else if (message.isSuccess() || message.isInfo()) {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizard.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizard.java",
                "index 04449e212e..a26f6b723c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizard.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizard.java",
                "@@ -24,3 +24,10 @@ import java.util.Iterator;",
                " import java.util.List;",
                "+import java.util.concurrent.Callable;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.Future;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.client.console.SyncopeConsoleApplication;",
                " import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "@@ -43,3 +50,6 @@ import org.apache.syncope.client.console.panels.SubmitableModalPanel;",
                " import org.apache.syncope.client.console.panels.WizardModalPanel;",
                "+import org.apache.wicket.Application;",
                " import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.Session;",
                "+import org.apache.wicket.ThreadContext;",
                " import org.apache.wicket.markup.html.list.ListItem;",
                "@@ -151,3 +161,9 @@ public abstract class AjaxWizard<T extends Serializable> extends Wizard",
                "-    protected abstract Serializable onApplyInternal(final AjaxRequestTarget target);",
                "+    /**",
                "+     * Apply operation",
                "+     *",
                "+     * @param target request target",
                "+     * @return a pair of payload (maybe null) and resulting object.",
                "+     */",
                "+    protected abstract Pair<Serializable, Serializable> onApplyInternal(final AjaxRequestTarget target);",
                "@@ -181,3 +197,3 @@ public abstract class AjaxWizard<T extends Serializable> extends Wizard",
                "         try {",
                "-            final Serializable res = onApplyInternal(target);",
                "+            final Serializable res = onApply(target);",
                "             if (eventSink == null) {",
                "@@ -187,2 +203,11 @@ public abstract class AjaxWizard<T extends Serializable> extends Wizard",
                "             }",
                "+        } catch (TimeoutException te) {",
                "+            LOG.warn(\"Operation applying took to long\", te);",
                "+            if (eventSink == null) {",
                "+                send(AjaxWizard.this, Broadcast.BUBBLE, new NewItemCancelEvent<>(item, target));",
                "+            } else {",
                "+                send(eventSink, Broadcast.EXACT, new NewItemCancelEvent<>(item, target));",
                "+            }",
                "+            SyncopeConsoleSession.get().warn(getString(\"timeout\"));",
                "+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "         } catch (Exception e) {",
                "@@ -339,3 +364,10 @@ public abstract class AjaxWizard<T extends Serializable> extends Wizard",
                "     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {",
                "-        onApplyInternal(target);",
                "+        try {",
                "+            onApply(target);",
                "+        } catch (TimeoutException te) {",
                "+            LOG.warn(\"Operation applying took to long\", te);",
                "+            send(eventSink, Broadcast.EXACT, new NewItemCancelEvent<>(item, target));",
                "+            SyncopeConsoleSession.get().warn(getString(\"timeout\"));",
                "+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+        }",
                "     }",
                "@@ -346,2 +378,52 @@ public abstract class AjaxWizard<T extends Serializable> extends Wizard",
                "     }",
                "+",
                "+    private Serializable onApply(final AjaxRequestTarget target) throws TimeoutException {",
                "+        try {",
                "+            final Future<Pair<Serializable, Serializable>> executor",
                "+                    = SyncopeConsoleSession.get().execute(new ApplyFuture(target));",
                "+",
                "+            final Pair<Serializable, Serializable> res",
                "+                    = executor.get(SyncopeConsoleApplication.get().getMaxWaitTimeInSeconds(), TimeUnit.SECONDS);",
                "+",
                "+            if (res.getLeft() != null) {",
                "+                send(pageRef.getPage(), Broadcast.BUBBLE, res.getLeft());",
                "+            }",
                "+",
                "+            return res.getRight();",
                "+        } catch (InterruptedException | ExecutionException e) {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                "+",
                "+    private class ApplyFuture implements Callable<Pair<Serializable, Serializable>>, Serializable {",
                "+",
                "+        private static final long serialVersionUID = -4657123322652656848L;",
                "+",
                "+        private final AjaxRequestTarget target;",
                "+",
                "+        private final Application application;",
                "+",
                "+        private final RequestCycle requestCycle;",
                "+",
                "+        private final Session session;",
                "+",
                "+        ApplyFuture(final AjaxRequestTarget target) {",
                "+            this.target = target;",
                "+            this.application = Application.get();",
                "+            this.requestCycle = RequestCycle.get();",
                "+            this.session = Session.exists() ? Session.get() : null;",
                "+        }",
                "+",
                "+        @Override",
                "+        public Pair<Serializable, Serializable> call() throws Exception {",
                "+            try {",
                "+                ThreadContext.setApplication(this.application);",
                "+                ThreadContext.setRequestCycle(this.requestCycle);",
                "+                ThreadContext.setSession(this.session);",
                "+                return AjaxWizard.this.onApplyInternal(this.target);",
                "+            } finally {",
                "+                ThreadContext.detach();",
                "+            }",
                "+        }",
                "+    }",
                " }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java",
                "index 32514ad64a..f43b57b43a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java",
                "@@ -24,2 +24,3 @@ import java.util.Arrays;",
                " import java.util.List;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.wicket.Component;",
                "@@ -27,3 +28,2 @@ import org.apache.wicket.PageReference;",
                " import org.apache.wicket.ajax.AjaxRequestTarget;",
                "-import org.apache.wicket.event.Broadcast;",
                " import org.apache.wicket.extensions.wizard.WizardModel;",
                "@@ -102,4 +102,4 @@ public abstract class AjaxWizardBuilder<T extends Serializable> extends Abstract",
                "             @Override",
                "-            protected Serializable onApplyInternal(final AjaxRequestTarget target) {",
                "-                final Serializable res = AjaxWizardBuilder.this.onApplyInternal(modelObject);",
                "+            protected Pair<Serializable, Serializable> onApplyInternal(final AjaxRequestTarget target) {",
                "+                Serializable res = AjaxWizardBuilder.this.onApplyInternal(modelObject);",
                "@@ -118,7 +118,3 @@ public abstract class AjaxWizardBuilder<T extends Serializable> extends Abstract",
                "-                if (payload != null) {",
                "-                    send(pageRef.getPage(), Broadcast.BUBBLE, payload);",
                "-                }",
                "-",
                "-                return res;",
                "+                return Pair.of(payload, res);",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java",
                "index 14187b0ee1..b08e29b2f8 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java",
                "@@ -83,9 +83,9 @@ public class ResourceWizardBuilder extends AbstractResourceWizardBuilder<Resourc",
                "     protected ResourceTO onApplyInternal(final Serializable modelObject) {",
                "-        final ResourceTO resourceTO = ResourceTO.class.cast(modelObject);",
                "+        ResourceTO resourceTO = ResourceTO.class.cast(modelObject);",
                "         if (createFlag) {",
                "-            return resourceRestClient.create(resourceTO);",
                "+            resourceTO = resourceRestClient.create(resourceTO);",
                "         } else {",
                "             resourceRestClient.update(resourceTO);",
                "-            return resourceTO;",
                "         }",
                "+        return resourceTO;",
                "     }",
                "diff --git a/client/console/src/main/resources/console.properties b/client/console/src/main/resources/console.properties",
                "index abe33c1a6b..0bb81710c5 100644",
                "--- a/client/console/src/main/resources/console.properties",
                "+++ b/client/console/src/main/resources/console.properties",
                "@@ -30,2 +30,5 @@ maxUploadFileSizeMB=5",
                "+# Max wait time on apply changes from modals/wizards (given in seconds)",
                "+maxWaitTimeOnApplyChanges=30",
                "+",
                " csrf=true",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication.properties b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication.properties",
                "index 59143bf4eb..76fe2d00ac 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication.properties",
                "@@ -73 +73,3 @@ confirmGlobalLogout=Do you really want to perform global logout?",
                " administration=Administration",
                "+",
                "+timeout=Operation is taking to long: it will be executed in background. Please check later for the result (errors won't be triggered).",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_it.properties",
                "index 1f13919120..c8b1529f10 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_it.properties",
                "@@ -73 +73,3 @@ confirmGlobalLogout=Vuoi davvero procedere al logout globale?",
                " administration=Amministrazione",
                "+",
                "+timeout=L'operazione sta durando troppo: sar\\u00e0 eseguita in background. Verifica il risultato pi\\u00f9 tardi (gli errori non saranno notificati).",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_pt_BR.properties",
                "index b292d5058c..492c0c4fbe 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_pt_BR.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_pt_BR.properties",
                "@@ -73 +73,3 @@ confirmGlobalLogout=Do you really want to perform global logout?",
                " administration=Administra\\u00e7\\u00e3o",
                "+",
                "+timeout=Operation is taking to long: it will be executed in background. Please check later for the result (errors won't be triggered).",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ru.properties",
                "index 62183d7972..b39225da09 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ru.properties",
                "@@ -33,3 +33,3 @@ confirmDeprovision=\\u0412\\u044b \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442",
                " confirmProvision=\\u0412\\u044b \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e \\u0445\\u043e\\u0442\\u0438\\u0442\\u0435 \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044c \\u0432\\u044b\\u0431\\u0440\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u044b?",
                "-confirmClone=\\u0412\\u044b \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e \\u0445\\u043e\\u0442\\u0438\\u0442\\u0435 \\u043a\\u043b\\u043e\\u043d\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0432\\u044b\\u0431\\u0440\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u044b\\u003f",
                "+confirmClone=\\u0412\\u044b \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e \\u0445\\u043e\\u0442\\u0438\\u0442\\u0435 \\u043a\\u043b\\u043e\\u043d\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0432\\u044b\\u0431\\u0440\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u044b?",
                " dropDownChoiceField.nullValid=\\u0412\\u044b\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u0435",
                "@@ -72 +72,3 @@ confirmGlobalLogout=Do you really want to perform global logout?",
                " administration=Administration",
                "+",
                "+timeout=Operation is taking to long: it will be executed in background. Please check later for the result (errors won't be triggered).",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/NotificationPanel.html b/client/console/src/main/resources/org/apache/syncope/client/console/panels/NotificationPanel.html",
                "index 2870588b5f..1d5a8a29b5 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/NotificationPanel.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/NotificationPanel.html",
                "@@ -42,2 +42,10 @@ under the License.",
                "     </script>",
                "+    ",
                "+    <script id=\"warningTemplate\" type=\"text/x-kendo-template\">",
                "+      <div class=\"alert alert-warning alert-dismissible\" style=\"margin-bottom: 0px; min-width: 370px\">",
                "+      <button aria-hidden=\"true\" data-dismiss=\"alert\" class=\"close\" type=\"button\">\u00c3\u0097</button>",
                "+      <h4><i class=\"icon fa fa-ban\"></i> Warning!</h4>",
                "+      #= message #     ",
                "+      </div>",
                "+    </script>",
                "diff --git a/fit/console-reference/src/main/resources/console.properties b/fit/console-reference/src/main/resources/console.properties",
                "index ba3bd82edb..6bd549c02b 100644",
                "--- a/fit/console-reference/src/main/resources/console.properties",
                "+++ b/fit/console-reference/src/main/resources/console.properties",
                "@@ -30,2 +30,5 @@ maxUploadFileSizeMB=5",
                "+# Max wait time on apply changes from modals/wizards (given in seconds)",
                "+maxWaitTimeOnApplyChanges=30",
                "+",
                " csrf=true"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizard.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java",
                "client/console/src/main/resources/console.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ru.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/NotificationPanel.html",
                "fit/console-reference/src/main/resources/console.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1255": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f5905afc133ab3cfa79e3689ed936422608ca9ec"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: operation, execution",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e7f03f43dbe72d036a6df1da56dc0db26045dcae",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510573367,
            "hunks": 1,
            "message": "[SYNCOPE-1227] JEXL expression in Pull Template is now not mandatory",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java",
                "index a54c6caf96..83b9ea72aa 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java",
                "@@ -61,3 +61,3 @@ public class PasswordPanel extends Panel {",
                "                     \"password\", \"password\", new PropertyModel<>(wrapper.getInnerObject(), \"password\"), false);",
                "-            passwordField.setRequired(true);",
                "+            passwordField.setRequired(false); // [SYNCOPE-1227]",
                "             passwordField.setMarkupId(\"password\");"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1227": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1965e5b100cefed0ca853c8b0fcf7698cf15190a"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: template",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1227",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a69afb927da75431d4963fbf62ee124da4f0aa3f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513157046,
            "hunks": 5,
            "message": "[SYNCOPE-1250] splits filtering (performed on schema set) and sorting (performed on attributes)",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "index 2e77c8cc85..bae86f175d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "@@ -24,3 +24,2 @@ import java.util.Collections;",
                " import java.util.Comparator;",
                "-import java.util.HashMap;",
                " import java.util.LinkedHashMap;",
                "@@ -163,23 +162,7 @@ public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardSt",
                "                     filter(schemaTO -> !whichAttrs.contains(schemaTO.getKey())).collect(Collectors.toSet()));",
                "-",
                "-            // 2. sort remainig attributes according to configuration, e.g. attrLayout",
                "-            final Map<String, Integer> attrLayoutMap = new HashMap<>(whichAttrs.size());",
                "-            for (int i = 0; i < whichAttrs.size(); i++) {",
                "-                attrLayoutMap.put(whichAttrs.get(i), i);",
                "-            }",
                "-            Collections.sort(allSchemas, (schema1, schema2) -> {",
                "-                int value = 0;",
                "-",
                "-                if (attrLayoutMap.get(schema1.getKey()) > attrLayoutMap.get(schema2.getKey())) {",
                "-                    value = 1;",
                "-                } else if (attrLayoutMap.get(schema1.getKey()) < attrLayoutMap.get(schema2.getKey())) {",
                "-                    value = -1;",
                "-                }",
                "-",
                "-                return value;",
                "-            });",
                "-        }",
                "+        ",
                "         allSchemas.forEach(schemaTO -> {",
                "             scs.put(schemaTO.getKey(), schemaTO);",
                "-        });",
                "+            });",
                "+        }",
                "     }",
                "@@ -227,3 +210,3 @@ public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardSt",
                "-    protected static class AttrComparator implements Comparator<AttrTO>, Serializable {",
                "+    protected class AttrComparator implements Comparator<AttrTO>, Serializable {",
                "@@ -238,2 +221,13 @@ public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardSt",
                "                 return 1;",
                "+            } else if (AbstractAttrs.this.reoderSchemas()) {",
                "+                int leftIndex = AbstractAttrs.this.whichAttrs.indexOf(left.getSchema());",
                "+                int rightIndex = AbstractAttrs.this.whichAttrs.indexOf(right.getSchema());",
                "+",
                "+                if (leftIndex > rightIndex) {",
                "+                    return 1;",
                "+                } else if (leftIndex < rightIndex) {",
                "+                    return -1;",
                "+                } else {",
                "+                    return 0;",
                "+                }",
                "             } else {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1250": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1c6aae6f572927d48b432b89014c810c37d55f03"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: perform",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1250",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23b0a33fe83ae888f2f2f611c33a4ee1bd4f8603",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513756938,
            "hunks": 19,
            "message": "Updating downloads site page for release",
            "diff": [
                "diff --git a/src/site/xdoc/downloads.xml b/src/site/xdoc/downloads.xml",
                "index c562456a25..f5c9b0f3e4 100644",
                "--- a/src/site/xdoc/downloads.xml",
                "+++ b/src/site/xdoc/downloads.xml",
                "@@ -51,4 +51,4 @@ under the License.",
                "-      <subsection name=\"2.0.6 Jazz\">",
                "-        <p>Release date: October 9th 2017</p>",
                "+      <subsection name=\"2.0.7 Jazz\">",
                "+        <p>Release date: December 20th 2017</p>",
                "         <p>",
                "@@ -66,8 +66,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-2.0.6-source-release.zip\">syncope-2.0.6-source-release.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-2.0.7-source-release.zip\">syncope-2.0.7-source-release.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -76,8 +76,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip\">syncope-standalone-2.0.6-distribution.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip\">syncope-standalone-2.0.7-distribution.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -86,8 +86,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-2.0.6.deb\">apache-syncope-2.0.6.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-2.0.7.deb\">apache-syncope-2.0.7.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -96,8 +96,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-console-2.0.6.deb\">apache-syncope-console-2.0.6.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-console-2.0.7.deb\">apache-syncope-console-2.0.7.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -106,8 +106,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb\">apache-syncope-enduser-2.0.6.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb\">apache-syncope-enduser-2.0.7.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -116,8 +116,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-installer-2.0.6-uber.jar\">syncope-installer-2.0.6.jar</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-installer-2.0.7-uber.jar\">syncope-installer-2.0.7.jar</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.sha1\">sha1</a>",
                "               </td>",
                "@@ -126,8 +126,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-client-cli-2.0.6.zip\">syncope-client-cli-2.0.6.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-client-cli-2.0.7.zip\">syncope-client-cli-2.0.7.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -136,8 +136,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip\">org.apache.syncope.ide.eclipse.site-2.0.6.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip\">org.apache.syncope.ide.eclipse.site-2.0.7.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -146,8 +146,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm\">syncope-ide-netbeans-2.0.6.nbm</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm\">syncope-ide-netbeans-2.0.7.nbm</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.sha1\">sha1</a>",
                "               </td>"
            ],
            "changed_files": [
                "src/site/xdoc/downloads.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8a8f608fbc068ef84d2b22083633edcd354f36a0"
                ],
                [
                    "no-tag",
                    "7df9dc5ae6477206d397d1c32f12e0075120f2b4"
                ],
                [
                    "no-tag",
                    "2645706440681cac1c985476fa78877e507cff3f"
                ],
                [
                    "no-tag",
                    "a9f101cf226c33d686058cb9133a763e63151934"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c96d5129f8e8860be2983579d5d3938cdbe70f3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517221095,
            "hunks": 1,
            "message": "Upgrading Bootstrap Select and FileInput",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5d8d5f19ea..f93a5a40d6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -431,4 +431,4 @@ under the License.",
                "     <bootstrap.version>3.3.7</bootstrap.version>",
                "-    <bootstrap-select.version>1.12.2</bootstrap-select.version>",
                "-    <bootstrap-fileinput.version>4.4.6</bootstrap-fileinput.version>",
                "+    <bootstrap-select.version>1.12.4</bootstrap-select.version>",
                "+    <bootstrap-fileinput.version>4.4.7</bootstrap-fileinput.version>",
                "     <bootbox.version>4.4.0</bootbox.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c1975406a9fa6e46b8157ee5c4f866615cc5db2c"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3bf402797f161c4caa8d02d4a78b836aec2e545d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516894704,
            "hunks": 29,
            "message": "Upgrading Jackson and Spring Security",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java b/common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java",
                "index 6176b95efc..c12f1a3920 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.info;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -72,3 +71,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Integer> usersByRealm = new HashMap<>();",
                "@@ -76,3 +74,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Integer> usersByStatus = new HashMap<>();",
                "@@ -82,3 +79,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Integer> groupsByRealm = new HashMap<>();",
                "@@ -90,3 +86,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Integer> any1ByRealm = new HashMap<>();",
                "@@ -98,3 +93,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Integer> any2ByRealm = new HashMap<>();",
                "@@ -106,3 +100,2 @@ public class NumbersInfo extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Boolean> confCompleteness = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java b/common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java",
                "index 0cf5f311eb..027ba415f6 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java",
                "@@ -51,3 +51,2 @@ public class GroupPatch extends AnyPatch {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> adynMembershipConds = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "index a6b533803b..9d9aa72bff 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.policy;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -46,3 +45,2 @@ public class PullPolicySpec extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> correlationRules = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java",
                "index c2e67f4f31..da908d5ecf 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java",
                "@@ -59,3 +59,2 @@ public class BulkActionResult extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, Status> results = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java",
                "index d3fff016fe..675020f415 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -40,3 +39,2 @@ public class DynRealmTO extends AbstractBaseBean implements EntityTO {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> dynMembershipConds = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "index 4b6d1a170e..82c4fe38d1 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "@@ -59,3 +59,2 @@ public class GroupTO extends AnyTO {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> adynMembershipConds = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java",
                "index 428efdeb23..2288c11ca2 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -47,3 +46,2 @@ public class NotificationTO extends AbstractBaseBean implements EntityTO {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> abouts = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java",
                "index 3fe4790130..c36f97e5d0 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -41,3 +40,2 @@ public class ProvisioningResult<E extends EntityTO> extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlEntityTOAdapter.class)",
                "-    @JsonIgnore",
                "     private E entity;",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java",
                "index 9aaccf2c05..c65d592b88 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -46,3 +45,2 @@ public class PullTaskTO extends AbstractProvisioningTaskTO implements Templatabl",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, AnyTO> templates = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java",
                "index 4528f11b4c..7dfc623014 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -41,3 +40,2 @@ public class PushTaskTO extends AbstractProvisioningTaskTO {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> filters = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java",
                "index db770e7a21..3902cd32b2 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -56,3 +55,2 @@ public class RealmTO extends AbstractBaseBean implements EntityTO, TemplatableTO",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, AnyTO> templates = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java",
                "index 9fa592847c..59bfc1ebea 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.common.lib.to;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -54,3 +53,2 @@ public class WorkflowFormPropertyTO extends AbstractBaseBean {",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "     private final Map<String, String> enumValues = new HashMap<>();",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java b/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "index 1927737bf1..6e9f50982a 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "@@ -69,3 +69,2 @@ public enum ClientExceptionType {",
                "     NotFound(Response.Status.NOT_FOUND),",
                "-    RejectedUserCreate(Response.Status.BAD_REQUEST),",
                "     RequiredValuesMissing(Response.Status.BAD_REQUEST),",
                "diff --git a/pom.xml b/pom.xml",
                "index 3f9eb09fc9..422b281919 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -369,6 +369,6 @@ under the License.",
                "-    <jackson.version>2.9.3</jackson.version>",
                "+    <jackson.version>2.9.4</jackson.version>",
                "     <spring.version>4.3.14.RELEASE</spring.version>",
                "-    <spring-security.version>4.2.3.RELEASE</spring-security.version>",
                "+    <spring-security.version>4.2.4.RELEASE</spring-security.version>"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "90ef367412c333f44042b9bd3b7d43601dbda252"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c826f69ec9ed9f21f34ee2029a09a973bbad5100",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509010743,
            "hunks": 6,
            "message": "Extend ReconciliationFilterBuilder scope with OperationOptions customization",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java",
                "index 579e5caeef..6ab2b6fdf2 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.provisioning.api.pushpull;",
                "+import org.identityconnectors.framework.common.objects.OperationOptions;",
                " import org.identityconnectors.framework.common.objects.filter.Filter;",
                "@@ -29,2 +30,4 @@ public interface ReconciliationFilterBuilder {",
                "     Filter build();",
                "+",
                "+    OperationOptions build(OperationOptions initialOptions);",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "index de4aeba07a..8680f83324 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "@@ -323,3 +323,10 @@ public class ConnectorFacadeProxy implements Connector {",
                "-        search(objectClass, filterBuilder == null ? null : filterBuilder.build(), new ResultsHandler() {",
                "+        Filter filter = null;",
                "+        OperationOptions actualOptions = options;",
                "+        if (filterBuilder != null) {",
                "+            filter = filterBuilder.build();",
                "+            actualOptions = filterBuilder.build(actualOptions);",
                "+        }",
                "+",
                "+        search(objectClass, filter, new ResultsHandler() {",
                "@@ -335,3 +342,3 @@ public class ConnectorFacadeProxy implements Connector {",
                "             }",
                "-        }, options);",
                "+        }, actualOptions);",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultReconciliationFilterBuilder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultReconciliationFilterBuilder.java",
                "index c46c0fb0b6..e42cf80f63 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultReconciliationFilterBuilder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultReconciliationFilterBuilder.java",
                "@@ -24,2 +24,3 @@ import org.identityconnectors.framework.common.objects.filter.Filter;",
                " import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;",
                "+import org.identityconnectors.framework.common.objects.OperationOptions;",
                "@@ -37,2 +38,7 @@ public abstract class DefaultReconciliationFilterBuilder implements Reconciliati",
                "+    @Override",
                "+    public OperationOptions build(final OperationOptions initialOptions) {",
                "+        return initialOptions;",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ReconciliationFilterBuilder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultReconciliationFilterBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cd720ceb2e96c9d0adda012a62ace16b4a5497bf"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: operation",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9061b45e8844ee327581987d8ec9a0c9ac3ca764",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513936308,
            "hunks": 4,
            "message": "Updating Eclipse files for next development iteration",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "index daf2ce5031..da05f1a8fb 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: Apache Syncope Eclipse Plugin",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.plugin;singleton:=true",
                "-Bundle-Version: 2.0.7",
                "+Bundle-Version: 2.0.8.qualifier",
                " Bundle-Activator: org.apache.syncope.ide.eclipse.plugin.Activator",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "index 596f890ae2..cdb112d22e 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: org.apache.syncope.ide.eclipse.tests",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.tests;singleton:=true",
                "-Bundle-Version: 2.0.7",
                "+Bundle-Version: 2.0.8.qualifier",
                " Bundle-ActivationPolicy: lazy",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "index ec03da74ec..1bbfe4ea63 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.7-SNAPSHOT</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "index f3e43a67c4..cf67270942 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "@@ -20,3 +20,3 @@ under the License.",
                " <site>",
                "-   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.7\">",
                "+   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.8.qualifier\">",
                "       <category name=\"apachesyncope\"/>"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ad40932b99ee2c133a2c5230b9a803f7de30d463"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "de750537b9e7a71887e382f6f30af30d59657790",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508405639,
            "hunks": 21,
            "message": "Small cleanup",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java",
                "index 83eb098bc6..4c02da1b83 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.core.provisioning.api.pushpull;",
                " import java.util.ArrayList;",
                "-import java.util.Collection;",
                " import java.util.List;",
                "@@ -54,3 +53,3 @@ public class ProvisioningProfile<T extends ProvisioningTask, A extends Provision",
                "-    public Collection<ProvisioningReport> getResults() {",
                "+    public List<ProvisioningReport> getResults() {",
                "         return results;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "index 6c54260b7a..e09f39b82d 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "@@ -297,3 +297,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "     protected List<ProvisioningReport> update(",
                "-            final SyncDelta delta, final List<String> anys, final Provision provision) throws JobExecutionException {",
                "+            final SyncDelta delta, final List<String> anyKeys, final Provision provision) throws JobExecutionException {",
                "@@ -305,3 +305,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        LOG.debug(\"About to update {}\", anys);",
                "+        LOG.debug(\"About to update {}\", anyKeys);",
                "@@ -310,3 +310,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         SyncDelta workingDelta = delta;",
                "-        for (String key : anys) {",
                "+        for (String key : anyKeys) {",
                "             LOG.debug(\"About to update {}\", key);",
                "@@ -389,3 +389,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             final SyncDelta delta,",
                "-            final List<String> anys,",
                "+            final List<String> anyKeys,",
                "             final Provision provision,",
                "@@ -402,3 +402,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        LOG.debug(\"About to deprovision {}\", anys);",
                "+        LOG.debug(\"About to deprovision {}\", anyKeys);",
                "@@ -406,3 +406,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        for (String key : anys) {",
                "+        for (String key : anyKeys) {",
                "             LOG.debug(\"About to unassign resource {}\", key);",
                "@@ -502,3 +502,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             final SyncDelta delta,",
                "-            final List<String> anys,",
                "+            final List<String> anyKeys,",
                "             final Provision provision,",
                "@@ -515,3 +515,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        LOG.debug(\"About to update {}\", anys);",
                "+        LOG.debug(\"About to update {}\", anyKeys);",
                "@@ -519,3 +519,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        for (String key : anys) {",
                "+        for (String key : anyKeys) {",
                "             LOG.debug(\"About to unassign resource {}\", key);",
                "@@ -603,3 +603,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             final SyncDelta delta,",
                "-            final List<String> anys,",
                "+            final List<String> anyKeys,",
                "             final Provision provision)",
                "@@ -613,3 +613,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        LOG.debug(\"About to delete {}\", anys);",
                "+        LOG.debug(\"About to delete {}\", anyKeys);",
                "@@ -618,3 +618,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         SyncDelta workingDelta = delta;",
                "-        for (String key : anys) {",
                "+        for (String key : anyKeys) {",
                "             Object output;",
                "@@ -671,6 +671,8 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-    protected ProvisioningReport ignore(",
                "+    protected List<ProvisioningReport> ignore(",
                "             final SyncDelta delta,",
                "+            final List<String> anyKeys,",
                "             final Provision provision,",
                "-            final boolean matching)",
                "+            final boolean matching,",
                "+            final String... message)",
                "             throws JobExecutionException {",
                "@@ -679,9 +681,31 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        ProvisioningReport result = new ProvisioningReport();",
                "+        List<ProvisioningReport> results = new ArrayList<>();",
                "-        result.setKey(null);",
                "-        result.setName(delta.getObject().getUid().getUidValue());",
                "-        result.setOperation(ResourceOperation.NONE);",
                "-        result.setAnyType(provision.getAnyType().getKey());",
                "-        result.setStatus(ProvisioningReport.Status.SUCCESS);",
                "+        if (anyKeys == null) {",
                "+            ProvisioningReport report = new ProvisioningReport();",
                "+            report.setKey(null);",
                "+            report.setName(delta.getObject().getUid().getUidValue());",
                "+            report.setOperation(ResourceOperation.NONE);",
                "+            report.setAnyType(provision.getAnyType().getKey());",
                "+            report.setStatus(ProvisioningReport.Status.SUCCESS);",
                "+            if (message != null && message.length >= 1) {",
                "+                report.setMessage(message[0]);",
                "+            }",
                "+",
                "+            results.add(report);",
                "+        } else {",
                "+            for (String anyKey : anyKeys) {",
                "+                ProvisioningReport report = new ProvisioningReport();",
                "+                report.setKey(anyKey);",
                "+                report.setName(delta.getObject().getUid().getUidValue());",
                "+                report.setOperation(ResourceOperation.NONE);",
                "+                report.setAnyType(provision.getAnyType().getKey());",
                "+                report.setStatus(ProvisioningReport.Status.SUCCESS);",
                "+                if (message != null && message.length >= 1) {",
                "+                    report.setMessage(message[0]);",
                "+                }",
                "+",
                "+                results.add(report);",
                "+            }",
                "+        }",
                "@@ -691,3 +715,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        return result;",
                "+        return results;",
                "     }",
                "@@ -746,3 +770,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case IGNORE:",
                "-                            profile.getResults().add(ignore(delta, provision, false));",
                "+                            profile.getResults().addAll(ignore(delta, null, provision, false));",
                "                             break;",
                "@@ -796,3 +820,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case IGNORE:",
                "-                            profile.getResults().add(ignore(delta, provision, true));",
                "+                            profile.getResults().addAll(ignore(delta, anyKeys, provision, true));",
                "                             break;"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0984dfd22cca30034933941fc9f804e5922bb8c1"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75ee922abd7072ef1d87824e1388eaa5facfcd04",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514303625,
            "hunks": 357,
            "message": "Enhancing Swagger friendliness for REST services",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "index 0445f8310c..b9412808e6 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "@@ -186,4 +186,4 @@ public class BulkContent<T extends Serializable, S> extends MultilevelPanel.Seco",
                "-                            final AbstractAnyRestClient<?, ?> anyRestClient = AbstractAnyRestClient.class.cast(",
                "-                                    bulkActionExecutor);",
                "+                            final AbstractAnyRestClient<?> anyRestClient = AbstractAnyRestClient.class.",
                "+                                    cast(bulkActionExecutor);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "index 8b3c67b8b9..ff4161c576 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "@@ -44,3 +44,3 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "-    private final AbstractAnyRestClient<A, ?> restClient;",
                "+    private final AbstractAnyRestClient<A> restClient;",
                "@@ -57,3 +57,3 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "     public AnyDataProvider(",
                "-            final AbstractAnyRestClient<A, ?> restClient,",
                "+            final AbstractAnyRestClient<A> restClient,",
                "             final int paginatorRows,",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java",
                "index f925271e14..3ce39ea42f 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java",
                "@@ -50,3 +50,3 @@ public class ResourceStatusDataProvider extends DirectoryDataProvider<StatusBean",
                "-    private final AbstractAnyRestClient<? extends AnyTO, ?> restClient;",
                "+    private final AbstractAnyRestClient<? extends AnyTO> restClient;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "index bc2e99fa52..427953b749 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "@@ -63,3 +63,3 @@ import org.springframework.util.ReflectionUtils;",
                "-public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>",
                "+public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A>>",
                "         extends DirectoryPanel<A, AnyWrapper<A>, AnyDataProvider<A>, E> {",
                "@@ -236,3 +236,3 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "-    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>",
                "+    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A>>",
                "             extends DirectoryPanel.Builder<A, AnyWrapper<A>, E>",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java",
                "index 7eeb59cf50..3ce4143d5b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java",
                "@@ -37,3 +37,3 @@ import org.apache.wicket.model.IModel;",
                "-public abstract class AnySelectionDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>",
                "+public abstract class AnySelectionDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A>>",
                "         extends AnyDirectoryPanel<A, E> {",
                "@@ -73,3 +73,3 @@ public abstract class AnySelectionDirectoryPanel<A extends AnyTO, E extends Abst",
                "-    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>",
                "+    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A>>",
                "             extends AnyDirectoryPanel.Builder<A, E> {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java",
                "index 4796ddb5ee..4cfdddbc69 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java",
                "@@ -22,6 +22,4 @@ import java.util.List;",
                " import javax.ws.rs.core.GenericType;",
                "-import javax.ws.rs.core.Response;",
                " import org.apache.syncope.client.console.commons.status.StatusBean;",
                " import org.apache.syncope.client.console.commons.status.StatusUtils;",
                "-import org.apache.syncope.common.lib.patch.AnyPatch;",
                " import org.apache.syncope.common.lib.patch.AssociationPatch;",
                "@@ -38,3 +36,3 @@ import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "-public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch> extends BaseRestClient {",
                "+public abstract class AbstractAnyRestClient<TO extends AnyTO> extends BaseRestClient {",
                "@@ -42,3 +40,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "-    protected abstract Class<? extends AnyService<TO, P>> getAnyServiceClass();",
                "+    protected abstract Class<? extends AnyService<TO>> getAnyServiceClass();",
                "@@ -52,19 +50,2 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "-    public ProvisioningResult<TO> create(final TO to) {",
                "-        Response response = getService(getAnyServiceClass()).create(to);",
                "-        return response.readEntity(new GenericType<ProvisioningResult<TO>>() {",
                "-        });",
                "-    }",
                "-",
                "-    public ProvisioningResult<TO> update(final String etag, final P patch) {",
                "-        ProvisioningResult<TO> result;",
                "-        synchronized (this) {",
                "-            result = getService(etag, getAnyServiceClass()).update(patch).",
                "-                    readEntity(new GenericType<ProvisioningResult<TO>>() {",
                "-                    });",
                "-            resetClient(getAnyServiceClass());",
                "-        }",
                "-        return result;",
                "-    }",
                "-",
                "     public ProvisioningResult<TO> delete(final String etag, final String key) {",
                "@@ -83,3 +64,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "@@ -99,3 +80,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "@@ -118,3 +99,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "@@ -134,3 +115,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "@@ -153,3 +134,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "@@ -169,3 +150,3 @@ public abstract class AbstractAnyRestClient<TO extends AnyTO, P extends AnyPatch",
                "         synchronized (this) {",
                "-            AnyService<?, ?> service = getService(etag, getAnyServiceClass());",
                "+            AnyService<?> service = getService(etag, getAnyServiceClass());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java",
                "index 4e6092c8ce..31cd3a87a3 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java",
                "@@ -20,5 +20,10 @@ package org.apache.syncope.client.console.rest;",
                "+import static org.apache.syncope.client.console.rest.BaseRestClient.getService;",
                "+",
                " import java.util.List;",
                "+import javax.ws.rs.core.GenericType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.patch.AnyObjectPatch;",
                " import org.apache.syncope.common.lib.to.AnyObjectTO;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                " import org.apache.syncope.common.rest.api.beans.AnyQuery;",
                "@@ -31,3 +36,3 @@ import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "  */",
                "-public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO, AnyObjectPatch> {",
                "+public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO> {",
                "@@ -36,3 +41,3 @@ public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO, AnyO",
                "     @Override",
                "-    protected Class<? extends AnyService<AnyObjectTO, AnyObjectPatch>> getAnyServiceClass() {",
                "+    protected Class<? extends AnyService<AnyObjectTO>> getAnyServiceClass() {",
                "         return AnyObjectService.class;",
                "@@ -40,2 +45,19 @@ public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO, AnyO",
                "+    public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO) {",
                "+        Response response = getService(AnyObjectService.class).create(anyObjectTO);",
                "+        return response.readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {",
                "+        });",
                "+    }",
                "+",
                "+    public ProvisioningResult<AnyObjectTO> update(final String etag, final AnyObjectPatch patch) {",
                "+        ProvisioningResult<AnyObjectTO> result;",
                "+        synchronized (this) {",
                "+            result = getService(etag, AnyObjectService.class).update(patch).",
                "+                    readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {",
                "+                    });",
                "+            resetClient(getAnyServiceClass());",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     @Override",
                "@@ -54,3 +76,3 @@ public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO, AnyO",
                "                 new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).",
                "-                orderBy(toOrderBy(sort)).details(false).build()).getResult();",
                "+                        orderBy(toOrderBy(sort)).details(false).build()).getResult();",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "index 60ec367216..c7ff004f81 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "@@ -22,2 +22,4 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import javax.ws.rs.core.GenericType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.patch.GroupPatch;",
                "@@ -25,2 +27,3 @@ import org.apache.syncope.common.lib.to.GroupTO;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                " import org.apache.syncope.common.lib.types.BulkMembersActionType;",
                "@@ -34,3 +37,3 @@ import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "  */",
                "-public class GroupRestClient extends AbstractAnyRestClient<GroupTO, GroupPatch> {",
                "+public class GroupRestClient extends AbstractAnyRestClient<GroupTO> {",
                "@@ -39,3 +42,3 @@ public class GroupRestClient extends AbstractAnyRestClient<GroupTO, GroupPatch>",
                "     @Override",
                "-    protected Class<? extends AnyService<GroupTO, GroupPatch>> getAnyServiceClass() {",
                "+    protected Class<? extends AnyService<GroupTO>> getAnyServiceClass() {",
                "         return GroupService.class;",
                "@@ -43,2 +46,19 @@ public class GroupRestClient extends AbstractAnyRestClient<GroupTO, GroupPatch>",
                "+    public ProvisioningResult<GroupTO> create(final GroupTO groupTO) {",
                "+        Response response = getService(GroupService.class).create(groupTO);",
                "+        return response.readEntity(new GenericType<ProvisioningResult<GroupTO>>() {",
                "+        });",
                "+    }",
                "+",
                "+    public ProvisioningResult<GroupTO> update(final String etag, final GroupPatch patch) {",
                "+        ProvisioningResult<GroupTO> result;",
                "+        synchronized (this) {",
                "+            result = getService(etag, GroupService.class).update(patch).",
                "+                    readEntity(new GenericType<ProvisioningResult<GroupTO>>() {",
                "+                    });",
                "+            resetClient(getAnyServiceClass());",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java",
                "index 68e3a0173d..b64ff9b9db 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java",
                "@@ -44,3 +44,3 @@ import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "  */",
                "-public class UserRestClient extends AbstractAnyRestClient<UserTO, UserPatch> {",
                "+public class UserRestClient extends AbstractAnyRestClient<UserTO> {",
                "@@ -49,3 +49,3 @@ public class UserRestClient extends AbstractAnyRestClient<UserTO, UserPatch> {",
                "     @Override",
                "-    protected Class<? extends AnyService<UserTO, UserPatch>> getAnyServiceClass() {",
                "+    protected Class<? extends AnyService<UserTO>> getAnyServiceClass() {",
                "         return UserService.class;",
                "@@ -59,2 +59,13 @@ public class UserRestClient extends AbstractAnyRestClient<UserTO, UserPatch> {",
                "+    public ProvisioningResult<UserTO> update(final String etag, final UserPatch patch) {",
                "+        ProvisioningResult<UserTO> result;",
                "+        synchronized (this) {",
                "+            result = getService(etag, UserService.class).update(patch).",
                "+                    readEntity(new GenericType<ProvisioningResult<UserTO>>() {",
                "+                    });",
                "+            resetClient(getAnyServiceClass());",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java",
                "index 124a3c46fd..9f9dbd8628 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java",
                "@@ -61,3 +61,3 @@ import org.apache.wicket.model.StringResourceModel;",
                " public class AnyStatusDirectoryPanel",
                "-        extends DirectoryPanel<StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?, ?>>",
                "+        extends DirectoryPanel<StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>>",
                "         implements ModalPanel {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java b/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java",
                "index 3d069f0bb8..c51981c60c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java",
                "@@ -44,3 +44,3 @@ public class AnyStatusModal<T extends AnyTO> extends StatusModal<T> {",
                "     protected DirectoryPanel<",
                "-        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?, ?>> getStatusDirectoryPanel(",
                "+        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(",
                "             final MultilevelPanel mlp,",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java",
                "index 3d50d634bd..a37ab4a39d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java",
                "@@ -52,3 +52,3 @@ import org.apache.wicket.model.StringResourceModel;",
                " public class ResourceStatusDirectoryPanel",
                "-        extends DirectoryPanel<StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?, ?>>",
                "+        extends DirectoryPanel<StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>>",
                "         implements ModalPanel {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java b/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java",
                "index 0596ea303f..25badd6907 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java",
                "@@ -76,3 +76,3 @@ public class ResourceStatusModal extends StatusModal<ResourceTO> {",
                "     protected DirectoryPanel<",
                "-        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?, ?>> getStatusDirectoryPanel(",
                "+        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(",
                "             final MultilevelPanel mlp,",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java b/client/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java",
                "index 1059919915..baba5a5abe 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java",
                "@@ -54,3 +54,3 @@ public abstract class StatusModal<T extends Serializable> extends Panel implemen",
                "     protected abstract DirectoryPanel<",
                "-        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?, ?>> getStatusDirectoryPanel(",
                "+        StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(",
                "             final MultilevelPanel mlp,",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "index e9f5ff396e..c66b7f3cfa 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "@@ -59,2 +59,4 @@ public interface AccessTokenService extends JAXRSService {",
                "      * Invalidates the access token of the requesting user.",
                "+     *",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -62,3 +64,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"logout\")",
                "-    void logout();",
                "+    Response logout();",
                "@@ -77,2 +79,3 @@ public interface AccessTokenService extends JAXRSService {",
                "      * @param key access token key",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -80,3 +83,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@PathParam(\"key\") String key);",
                "+    Response delete(@PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "index 4127345089..144fcf229b 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "@@ -20,3 +20,11 @@ package org.apache.syncope.common.rest.api.service;",
                "+import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.PUT;",
                " import javax.ws.rs.Path;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.AnyObjectPatch;",
                "@@ -28,3 +36,41 @@ import org.apache.syncope.common.lib.to.AnyObjectTO;",
                " @Path(\"anyObjects\")",
                "-public interface AnyObjectService extends AnyService<AnyObjectTO, AnyObjectPatch> {",
                "+public interface AnyObjectService extends AnyService<AnyObjectTO> {",
                "+",
                "+    /**",
                "+     * Creates a new any object.",
                "+     *",
                "+     * @param anyObjectTO any object to be created",
                "+     * @return Response object featuring Location header of created any object as well as the any",
                "+     * object itself enriched with propagation status information - ProvisioningResult as Entity",
                "+     */",
                "+    @POST",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response create(@NotNull AnyObjectTO anyObjectTO);",
                "+",
                "+    /**",
                "+     * Updates any object matching the provided key.",
                "+     *",
                "+     * @param anyObjectPatch modification to be applied to any object matching the provided key",
                "+     * @return Response object featuring the updated any object enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PATCH",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull AnyObjectPatch anyObjectPatch);",
                "+",
                "+    /**",
                "+     * Updates any object matching the provided key.",
                "+     *",
                "+     * @param anyObjectTO complete update",
                "+     * @return Response object featuring the updated any object enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PUT",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull AnyObjectTO anyObjectTO);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "index ac2fc20b64..a72cc16bcf 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "@@ -33,4 +33,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.cxf.jaxrs.ext.PATCH;",
                "-import org.apache.syncope.common.lib.patch.AnyPatch;",
                " import org.apache.syncope.common.lib.patch.AssociationPatch;",
                "@@ -44,3 +42,3 @@ import org.apache.syncope.common.rest.api.beans.AnyQuery;",
                "-public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSService {",
                "+public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "@@ -104,27 +102,2 @@ public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSS",
                "-    /**",
                "-     * Creates a new any object.",
                "-     *",
                "-     * @param anyTO any object to be created",
                "-     * @return Response object featuring Location header of created any object as well as the any",
                "-     * object itself enriched with propagation status information - ProvisioningResult as Entity",
                "-     */",
                "-    @POST",
                "-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    Response create(@NotNull TO anyTO);",
                "-",
                "-    /**",
                "-     * Updates any object matching the provided key.",
                "-     *",
                "-     * @param anyPatch modification to be applied to any object matching the provided key",
                "-     * @return Response object featuring the updated any object enriched with propagation status information",
                "-     * - ProvisioningResult as Entity",
                "-     */",
                "-    @PATCH",
                "-    @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    Response update(@NotNull P anyPatch);",
                "-",
                "     /**",
                "@@ -146,15 +119,2 @@ public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSS",
                "-    /**",
                "-     * Updates any object matching the provided key.",
                "-     *",
                "-     * @param anyTO complete update",
                "-     * @return Response object featuring the updated any object enriched with propagation status information",
                "-     * - ProvisioningResult as Entity",
                "-     */",
                "-    @PUT",
                "-    @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    Response update(@NotNull TO anyTO);",
                "-",
                "     /**",
                "@@ -165,2 +125,3 @@ public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSS",
                "      * @param schema schema",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -170,3 +131,3 @@ public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSS",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void delete(",
                "+    Response delete(",
                "             @NotNull @PathParam(\"key\") String key,",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "index 3a91e4aa58..74846a19b9 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "@@ -74,2 +74,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "      * @param anyTypeClassTO anyTypeClass to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull AnyTypeClassTO anyTypeClassTO);",
                "+    Response update(@NotNull AnyTypeClassTO anyTypeClassTO);",
                "@@ -84,2 +85,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "      * @param key anyTypeClass key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "index aa639e82e4..667009c52f 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "@@ -74,2 +74,3 @@ public interface AnyTypeService extends JAXRSService {",
                "      * @param anyTypeTO anyType to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull AnyTypeTO anyTypeTO);",
                "+    Response update(@NotNull AnyTypeTO anyTypeTO);",
                "@@ -84,2 +85,3 @@ public interface AnyTypeService extends JAXRSService {",
                "      * @param key anyType key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "index 41466e288f..add8bd200d 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "@@ -72,2 +72,3 @@ public interface ConfigurationService extends JAXRSService {",
                "      * @param value parameter value",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -76,3 +77,3 @@ public interface ConfigurationService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void set(@NotNull AttrTO value);",
                "+    Response set(@NotNull AttrTO value);",
                "@@ -82,2 +83,3 @@ public interface ConfigurationService extends JAXRSService {",
                "      * @param schema configuration parameter schema",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -86,3 +88,3 @@ public interface ConfigurationService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void delete(@NotNull @PathParam(\"schema\") String schema);",
                "+    Response delete(@NotNull @PathParam(\"schema\") String schema);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "index 1825d08328..f7f0466f15 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "@@ -29,2 +29,3 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;",
                "@@ -52,2 +53,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "      * @param key connector configuration history instance key to be restored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -55,3 +57,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void restore(@NotNull @PathParam(\"key\") String key);",
                "+    Response restore(@NotNull @PathParam(\"key\") String key);",
                "@@ -61,2 +63,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "      * @param key connector configuration history instance key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -64,3 +67,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "index 4c63bd2e28..4a1adfe9e3 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "@@ -125,2 +125,3 @@ public interface ConnectorService extends JAXRSService {",
                "      * @param connInstanceTO connector instance to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -129,3 +130,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull ConnInstanceTO connInstanceTO);",
                "+    Response update(@NotNull ConnInstanceTO connInstanceTO);",
                "@@ -135,2 +136,3 @@ public interface ConnectorService extends JAXRSService {",
                "      * @param key connector instance key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -138,3 +140,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -144,2 +146,3 @@ public interface ConnectorService extends JAXRSService {",
                "      * @param connInstanceTO connector instance to be used for connection check",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -148,3 +151,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void check(@NotNull ConnInstanceTO connInstanceTO);",
                "+    Response check(@NotNull ConnInstanceTO connInstanceTO);",
                "@@ -152,2 +155,4 @@ public interface ConnectorService extends JAXRSService {",
                "      * Reload all connector bundles and instances.",
                "+     *",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -155,3 +160,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"reload\")",
                "-    void reload();",
                "+    Response reload();",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "index 3443ff68f4..2e343b99c7 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "@@ -74,2 +74,3 @@ public interface DomainService extends JAXRSService {",
                "      * @param domainTO domain to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface DomainService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull DomainTO domainTO);",
                "+    Response update(@NotNull DomainTO domainTO);",
                "@@ -84,2 +85,3 @@ public interface DomainService extends JAXRSService {",
                "      * @param key domain key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface DomainService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "index dc9836d173..1ebea81eef 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "@@ -74,2 +74,3 @@ public interface DynRealmService extends JAXRSService {",
                "      * @param dynDynRealmTO dynamic realm to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface DynRealmService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull DynRealmTO dynDynRealmTO);",
                "+    Response update(@NotNull DynRealmTO dynDynRealmTO);",
                "@@ -84,2 +85,3 @@ public interface DynRealmService extends JAXRSService {",
                "      * @param key dynamic realm key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface DynRealmService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "index b97f252ad2..11fd1dccf7 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "@@ -33,2 +33,3 @@ import javax.ws.rs.QueryParam;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.BulkActionResult;",
                "@@ -70,2 +71,3 @@ public interface ExecutableService extends JAXRSService {",
                "      * @param executionKey key of executable execution to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -73,3 +75,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"executions/{executionKey}\")",
                "-    void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);",
                "+    Response deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);",
                "@@ -112,2 +114,3 @@ public interface ExecutableService extends JAXRSService {",
                "      * @param action action to execute",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -115,3 +118,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"jobs/{key}\")",
                "-    void actionJob(@NotNull @PathParam(\"key\") String key, @QueryParam(\"action\") JobAction action);",
                "+    Response actionJob(@NotNull @PathParam(\"key\") String key, @QueryParam(\"action\") JobAction action);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "index 549b41a993..c060bdbec2 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "@@ -22,4 +22,6 @@ import java.util.List;",
                " import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                " import javax.ws.rs.GET;",
                " import javax.ws.rs.POST;",
                "+import javax.ws.rs.PUT;",
                " import javax.ws.rs.Path;",
                "@@ -28,2 +30,4 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.GroupPatch;",
                "@@ -37,6 +41,44 @@ import org.apache.syncope.common.lib.types.BulkMembersActionType;",
                " @Path(\"groups\")",
                "-public interface GroupService extends AnyService<GroupTO, GroupPatch> {",
                "+public interface GroupService extends AnyService<GroupTO> {",
                "     /**",
                "-     * This method is similar to read() but uses different authentication handling to ensure that a user",
                "+     * Creates a new group.",
                "+     *",
                "+     * @param groupTO group to be created",
                "+     * @return Response object featuring Location header of created group as well as the any",
                "+     * object itself enriched with propagation status information - ProvisioningResult as Entity",
                "+     */",
                "+    @POST",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response create(@NotNull GroupTO groupTO);",
                "+",
                "+    /**",
                "+     * Updates group matching the provided key.",
                "+     *",
                "+     * @param groupPatch modification to be applied to group matching the provided key",
                "+     * @return Response object featuring the updated group enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PATCH",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull GroupPatch groupPatch);",
                "+",
                "+    /**",
                "+     * Updates group matching the provided key.",
                "+     *",
                "+     * @param groupTO complete update",
                "+     * @return Response object featuring the updated group enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PUT",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull GroupTO groupTO);",
                "+",
                "+    /**",
                "+     * This method is similar to read() but uses different authentication handling to ensure that a group",
                "      * can read his own groups.",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "index 4dffa0d74c..9ff841353c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "@@ -77,2 +77,3 @@ public interface ImplementationService extends JAXRSService {",
                "      * @param implementationTO implementation.",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -80,3 +81,3 @@ public interface ImplementationService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull ImplementationTO implementationTO);",
                "+    Response update(@NotNull ImplementationTO implementationTO);",
                "@@ -86,2 +87,3 @@ public interface ImplementationService extends JAXRSService {",
                "      * @param key key for implementation to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -89,3 +91,3 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "index 4b9aa83db6..b1d889c1b7 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "@@ -30,2 +30,3 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "@@ -101,2 +102,3 @@ public interface LoggerService extends JAXRSService {",
                "      * @param logger Logger to be created or updated",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -105,3 +107,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);",
                "+    Response update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);",
                "@@ -112,2 +114,3 @@ public interface LoggerService extends JAXRSService {",
                "      * @param name Logger name to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -115,3 +118,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"{type}/{name}\")",
                "-    void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);",
                "+    Response delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "index 15f7703e8d..1cd8e73d7d 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "@@ -76,2 +76,3 @@ public interface MailTemplateService extends JAXRSService {",
                "      * @param key key for mail template to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -79,3 +80,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -100,2 +101,3 @@ public interface MailTemplateService extends JAXRSService {",
                "      * @param templateIn template to be set",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -103,3 +105,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    void setFormat(",
                "+    Response setFormat(",
                "             @NotNull @PathParam(\"key\") String key,",
                "@@ -113,2 +115,3 @@ public interface MailTemplateService extends JAXRSService {",
                "      * @param format template format",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -116,3 +119,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    void removeFormat(",
                "+    Response removeFormat(",
                "             @NotNull @PathParam(\"key\") String key,",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "index 3baf31096c..458ae63ef6 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "@@ -77,2 +77,3 @@ public interface NotificationService extends JAXRSService {",
                "      * @param notificationTO notification to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -81,3 +82,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull NotificationTO notificationTO);",
                "+    Response update(@NotNull NotificationTO notificationTO);",
                "@@ -87,2 +88,3 @@ public interface NotificationService extends JAXRSService {",
                "      * @param key key for notification to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -90,3 +92,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -106,2 +108,3 @@ public interface NotificationService extends JAXRSService {",
                "      * @param action action to execute",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -109,3 +112,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"job\")",
                "-    void actionJob(@QueryParam(\"action\") JobAction action);",
                "+    Response actionJob(@QueryParam(\"action\") JobAction action);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "index 2177d5115a..7c621961ac 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "@@ -79,2 +79,3 @@ public interface PolicyService extends JAXRSService {",
                "      * @param policyTO Policy to replace existing policy",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -83,3 +84,3 @@ public interface PolicyService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull AbstractPolicyTO policyTO);",
                "+    Response update(@NotNull AbstractPolicyTO policyTO);",
                "@@ -89,2 +90,3 @@ public interface PolicyService extends JAXRSService {",
                "      * @param key key of policy to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -92,3 +94,3 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "index 4b3c64085e..dfd516f585 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "@@ -74,2 +74,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "      * @param relationshipTypeTO relationshipType to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull RelationshipTypeTO relationshipTypeTO);",
                "+    Response update(@NotNull RelationshipTypeTO relationshipTypeTO);",
                "@@ -84,2 +85,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "      * @param key relationshipType key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "index cf79682069..4db9321340 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "@@ -76,2 +76,3 @@ public interface ReportService extends ExecutableService {",
                "      * @param reportTO report to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -80,3 +81,3 @@ public interface ReportService extends ExecutableService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull ReportTO reportTO);",
                "+    Response update(@NotNull ReportTO reportTO);",
                "@@ -86,2 +87,3 @@ public interface ReportService extends ExecutableService {",
                "      * @param key Deletes report with matching key",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -89,3 +91,3 @@ public interface ReportService extends ExecutableService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "index 12c197a9a4..6bfb151721 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "@@ -76,2 +76,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "      * @param key key for report template to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -79,3 +80,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -87,2 +88,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "      * @return report template with matching key and format, if available",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -100,2 +102,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "      * @param templateIn template to be set",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -103,3 +106,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    void setFormat(",
                "+    Response setFormat(",
                "             @NotNull @PathParam(\"key\") String key,",
                "@@ -113,2 +116,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "      * @param format template format",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -116,3 +120,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    void removeFormat(",
                "+    Response removeFormat(",
                "             @NotNull @PathParam(\"key\") String key,",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "index fbf748a559..67c8d588a8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "@@ -29,2 +29,3 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;",
                "@@ -52,2 +53,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "      * @param key resource configuration history key to be restored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -55,3 +57,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void restore(@NotNull @PathParam(\"key\") String key);",
                "+    Response restore(@NotNull @PathParam(\"key\") String key);",
                "@@ -61,2 +63,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "      * @param key resource configuration history key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -64,3 +67,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "index 1ec1f4f6c6..e6adc5a460 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "@@ -113,2 +113,3 @@ public interface ResourceService extends JAXRSService {",
                "      * @param resourceTO resource to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -117,3 +118,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull ResourceTO resourceTO);",
                "+    Response update(@NotNull ResourceTO resourceTO);",
                "@@ -125,2 +126,3 @@ public interface ResourceService extends JAXRSService {",
                "      * @param anyTypeKey any type",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -128,3 +130,5 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}\")",
                "-    void setLatestSyncToken(@NotNull @PathParam(\"key\") String key, @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);",
                "+    Response setLatestSyncToken(",
                "+            @NotNull @PathParam(\"key\") String key,",
                "+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);",
                "@@ -135,2 +139,3 @@ public interface ResourceService extends JAXRSService {",
                "      * @param anyTypeKey any type",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -138,3 +143,5 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}\")",
                "-    void removeSyncToken(@NotNull @PathParam(\"key\") String key, @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);",
                "+    Response removeSyncToken(",
                "+            @NotNull @PathParam(\"key\") String key,",
                "+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey);",
                "@@ -144,2 +151,3 @@ public interface ResourceService extends JAXRSService {",
                "      * @param key name of resource to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -148,3 +156,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -154,2 +162,3 @@ public interface ResourceService extends JAXRSService {",
                "      * @param resourceTO resource to be checked",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -159,3 +168,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void check(@NotNull ResourceTO resourceTO);",
                "+    Response check(@NotNull ResourceTO resourceTO);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "index 782a3d26cb..557db7666c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "@@ -75,2 +75,3 @@ public interface RoleService extends JAXRSService {",
                "      * @param roleTO role to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -79,3 +80,3 @@ public interface RoleService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull RoleTO roleTO);",
                "+    Response update(@NotNull RoleTO roleTO);",
                "@@ -85,2 +86,3 @@ public interface RoleService extends JAXRSService {",
                "      * @param key role key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -88,3 +90,3 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -106,2 +108,3 @@ public interface RoleService extends JAXRSService {",
                "      * @param consoleLayoutInfoIn console layout information to be set",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -110,3 +113,3 @@ public interface RoleService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON })",
                "-    void setConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key, InputStream consoleLayoutInfoIn);",
                "+    Response setConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key, InputStream consoleLayoutInfoIn);",
                "@@ -116,2 +119,3 @@ public interface RoleService extends JAXRSService {",
                "      * @param key role key",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -119,3 +123,3 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}/consoleLayout\")",
                "-    void removeConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);",
                "+    Response removeConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "index 1f9f9a0ec5..51403bde51 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "@@ -86,2 +86,3 @@ public interface SchemaService extends JAXRSService {",
                "      * @param schemaTO updated schema to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -90,3 +91,3 @@ public interface SchemaService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);",
                "+    Response update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);",
                "@@ -97,2 +98,3 @@ public interface SchemaService extends JAXRSService {",
                "      * @param key name of schema to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -100,3 +102,3 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    void delete(@NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "index 08ebbfe58e..9b43250d7f 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "@@ -74,2 +74,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "      * @param securityQuestionTO security question to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -78,3 +79,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull SecurityQuestionTO securityQuestionTO);",
                "+    Response update(@NotNull SecurityQuestionTO securityQuestionTO);",
                "@@ -84,2 +85,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "      * @param key security question key to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -87,3 +89,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "index 0d1bf41eed..205e6cd1e2 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "@@ -87,2 +87,3 @@ public interface TaskService extends ExecutableService {",
                "      * @param taskTO updated task to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -91,3 +92,3 @@ public interface TaskService extends ExecutableService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull AbstractTaskTO taskTO);",
                "+    Response update(@NotNull AbstractTaskTO taskTO);",
                "@@ -97,2 +98,3 @@ public interface TaskService extends ExecutableService {",
                "      * @param key key of task to be deleted",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -100,3 +102,3 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{key}\")",
                "-    void delete(@NotNull @PathParam(\"key\") String key);",
                "+    Response delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "index ff95a55ed6..651c9d05a7 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "@@ -118,2 +118,3 @@ public interface UserSelfService extends JAXRSService {",
                "      * @param securityAnswer actual answer text",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -121,3 +122,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"requestPasswordReset\")",
                "-    void requestPasswordReset(@NotNull @QueryParam(\"username\") String username, String securityAnswer);",
                "+    Response requestPasswordReset(@NotNull @QueryParam(\"username\") String username, String securityAnswer);",
                "@@ -131,2 +132,3 @@ public interface UserSelfService extends JAXRSService {",
                "      * @param password new password to be set",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -134,3 +136,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"confirmPasswordReset\")",
                "-    void confirmPasswordReset(@NotNull @QueryParam(\"token\") String token, String password);",
                "+    Response confirmPasswordReset(@NotNull @QueryParam(\"token\") String token, String password);",
                " }",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "index 9157b27ceb..310e631f6a 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "@@ -24,2 +24,3 @@ import javax.ws.rs.DefaultValue;",
                " import javax.ws.rs.POST;",
                "+import javax.ws.rs.PUT;",
                " import javax.ws.rs.Path;",
                "@@ -29,2 +30,3 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;",
                "@@ -37,3 +39,3 @@ import org.apache.syncope.common.lib.to.UserTO;",
                " @Path(\"users\")",
                "-public interface UserService extends AnyService<UserTO, UserPatch> {",
                "+public interface UserService extends AnyService<UserTO> {",
                "@@ -54,2 +56,28 @@ public interface UserService extends AnyService<UserTO, UserPatch> {",
                "+    /**",
                "+     * Updates user matching the provided key.",
                "+     *",
                "+     * @param userPatch modification to be applied to user matching the provided key",
                "+     * @return Response object featuring the updated user enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PATCH",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull UserPatch userPatch);",
                "+",
                "+    /**",
                "+     * Updates user matching the provided key.",
                "+     *",
                "+     * @param userTO complete update",
                "+     * @return Response object featuring the updated user enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @PUT",
                "+    @Path(\"{key}\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response update(@NotNull UserTO userTO);",
                "+",
                "     /**",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "index cb1cc4abbb..fcd6751d2d 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "@@ -85,2 +85,3 @@ public interface WorkflowService extends JAXRSService {",
                "      * @param definition workflow definition for matching kind",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -89,3 +90,3 @@ public interface WorkflowService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void set(",
                "+    Response set(",
                "             @NotNull @PathParam(\"anyType\") String anyType,",
                "@@ -99,2 +100,3 @@ public interface WorkflowService extends JAXRSService {",
                "      * @param key workflow definition key",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -102,3 +104,3 @@ public interface WorkflowService extends JAXRSService {",
                "     @Path(\"{anyType}/{key}\")",
                "-    void delete(",
                "+    Response delete(",
                "             @NotNull @PathParam(\"anyType\") String anyType,",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "index fa3ca9808f..abff7a35df 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "@@ -249,8 +249,2 @@ public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> ext",
                "-    public abstract ProvisioningResult<TO> create(TO anyTO, boolean nullPriorityAsync);",
                "-",
                "-    public abstract ProvisioningResult<TO> update(P anyPatch, boolean nullPriorityAsync);",
                "-",
                "-    public abstract ProvisioningResult<TO> delete(String key, boolean nullPriorityAsync);",
                "-",
                "     public abstract Pair<Integer, List<TO>> search(",
                "@@ -260,2 +254,6 @@ public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> ext",
                "             boolean details);",
                "+",
                "+    public abstract ProvisioningResult<TO> update(P anyPatch, boolean nullPriorityAsync);",
                "+",
                "+    public abstract ProvisioningResult<TO> delete(String key, boolean nullPriorityAsync);",
                " }",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java",
                "index 5857513477..3acbc209f0 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java",
                "@@ -101,3 +101,2 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch",
                "-    @Override",
                "     public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "index 103dae82ec..cbda5b6964 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "@@ -175,3 +175,2 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_CREATE + \"')\")",
                "-    @Override",
                "     public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean nullPriorityAsync) {",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "index 2b0b5ccb7c..b4fb038c9e 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "@@ -126,8 +126,2 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")",
                "-    @Override",
                "-    public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean nullPriorityAsync) {",
                "-        return doCreate(userTO, true, false, nullPriorityAsync);",
                "-    }",
                "-",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "index ee8489c3cb..c8c05724b3 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "@@ -28,3 +28,2 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "-import org.apache.syncope.common.lib.AnyOperations;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "@@ -59,3 +58,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "         extends AbstractServiceImpl",
                "-        implements AnyService<TO, P> {",
                "+        implements AnyService<TO> {",
                "@@ -67,3 +66,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-    private String getActualKey(final String key) {",
                "+    protected String getActualKey(final String key) {",
                "         String actualKey = key;",
                "@@ -154,8 +153,2 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-    @Override",
                "-    public Response create(final TO anyTO) {",
                "-        ProvisioningResult<TO> created = getAnyLogic().create(anyTO, isNullPriorityAsync());",
                "-        return createResponse(created);",
                "-    }",
                "-",
                "     protected Date findLastChange(final String key) {",
                "@@ -169,4 +162,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-    @Override",
                "-    public Response update(final P anyPatch) {",
                "+    protected Response doUpdate(final P anyPatch) {",
                "         anyPatch.setKey(getActualKey(anyPatch.getKey()));",
                "@@ -201,3 +193,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-        update(patch);",
                "+        doUpdate(patch);",
                "     }",
                "@@ -212,15 +204,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "     @Override",
                "-    public Response update(final TO anyTO) {",
                "-        anyTO.setKey(getActualKey(anyTO.getKey()));",
                "-        TO before = getAnyLogic().read(anyTO.getKey());",
                "-",
                "-        checkETag(before.getETagValue());",
                "-",
                "-        ProvisioningResult<TO> updated = getAnyLogic().update(AnyOperations.<TO, P>diff(anyTO, before, false),",
                "-                isNullPriorityAsync());",
                "-        return modificationResponse(updated);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void delete(final String key, final SchemaType schemaType, final String schema) {",
                "+    public Response delete(final String key, final SchemaType schemaType, final String schema) {",
                "         String actualKey = getActualKey(key);",
                "@@ -228,2 +208,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "                 actualKey, schemaType, new AttrTO.Builder().schema(schema).build(), PatchOperation.DELETE);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "index aadbaf3327..c5f3c89987 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.rest.cxf.service;",
                " import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "@@ -53,4 +54,5 @@ public abstract class AbstractExecutableService extends AbstractServiceImpl impl",
                "     @Override",
                "-    public void deleteExecution(final String executionKey) {",
                "+    public Response deleteExecution(final String executionKey) {",
                "         getExecutableLogic().deleteExecution(executionKey);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -78,4 +80,5 @@ public abstract class AbstractExecutableService extends AbstractServiceImpl impl",
                "     @Override",
                "-    public void actionJob(final String key, final JobAction action) {",
                "+    public Response actionJob(final String key, final JobAction action) {",
                "         getExecutableLogic().actionJob(key, action);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java",
                "index 2b093242c7..150829812b 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java",
                "@@ -61,4 +61,5 @@ public class AccessTokenServiceImpl extends AbstractServiceImpl implements Acces",
                "     @Override",
                "-    public void logout() {",
                "+    public Response logout() {",
                "         logic.logout();",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -75,4 +76,5 @@ public class AccessTokenServiceImpl extends AbstractServiceImpl implements Acces",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java",
                "index cf17f80976..961a32863e 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java",
                "@@ -20,3 +20,5 @@ package org.apache.syncope.core.rest.cxf.service;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "@@ -26,2 +28,3 @@ import org.apache.syncope.common.lib.to.AnyObjectTO;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                " import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "@@ -62,2 +65,25 @@ public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObj",
                "+    @Override",
                "+    public Response create(final AnyObjectTO anyObjectTO) {",
                "+        ProvisioningResult<AnyObjectTO> created = logic.create(anyObjectTO, isNullPriorityAsync());",
                "+        return createResponse(created);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final AnyObjectTO anyObjectTO) {",
                "+        anyObjectTO.setKey(getActualKey(anyObjectTO.getKey()));",
                "+        AnyObjectTO before = logic.read(anyObjectTO.getKey());",
                "+",
                "+        checkETag(before.getETagValue());",
                "+",
                "+        ProvisioningResult<AnyObjectTO> updated =",
                "+                logic.update(AnyOperations.diff(anyObjectTO, before, false), isNullPriorityAsync());",
                "+        return modificationResponse(updated);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final AnyObjectPatch anyObjectPatch) {",
                "+        return doUpdate(anyObjectPatch);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java",
                "index bd3149f9c6..336cea4911 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class AnyTypeClassServiceImpl extends AbstractServiceImpl implements AnyT",
                "     @Override",
                "-    public void update(final AnyTypeClassTO anyTypeTO) {",
                "+    public Response update(final AnyTypeClassTO anyTypeTO) {",
                "         logic.update(anyTypeTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -61,4 +62,5 @@ public class AnyTypeClassServiceImpl extends AbstractServiceImpl implements AnyT",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java",
                "index 9dd4982620..c5802416bb 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class AnyTypeServiceImpl extends AbstractServiceImpl implements AnyTypeSe",
                "     @Override",
                "-    public void update(final AnyTypeTO anyTypeTO) {",
                "+    public Response update(final AnyTypeTO anyTypeTO) {",
                "         logic.update(anyTypeTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -61,4 +62,5 @@ public class AnyTypeServiceImpl extends AbstractServiceImpl implements AnyTypeSe",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java",
                "index 4a40a7566e..befd5b3d86 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java",
                "@@ -52,4 +52,5 @@ public class ConfigurationServiceImpl extends AbstractServiceImpl implements Con",
                "     @Override",
                "-    public void delete(final String schema) {",
                "+    public Response delete(final String schema) {",
                "         logic.delete(schema);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -67,4 +68,5 @@ public class ConfigurationServiceImpl extends AbstractServiceImpl implements Con",
                "     @Override",
                "-    public void set(final AttrTO value) {",
                "+    public Response set(final AttrTO value) {",
                "         logic.set(value);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java",
                "index 3424c5ea4f..205b3e0f95 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.rest.cxf.service;",
                " import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;",
                "@@ -39,4 +40,5 @@ public class ConnectorHistoryServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void restore(final String key) {",
                "+    public Response restore(final String key) {",
                "         logic.restore(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -44,4 +46,5 @@ public class ConnectorHistoryServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java",
                "index 45da75822e..082d89ea7f 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java",
                "@@ -48,4 +48,5 @@ public class ConnectorServiceImpl extends AbstractServiceImpl implements Connect",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -80,4 +81,5 @@ public class ConnectorServiceImpl extends AbstractServiceImpl implements Connect",
                "     @Override",
                "-    public void update(final ConnInstanceTO connInstanceTO) {",
                "+    public Response update(final ConnInstanceTO connInstanceTO) {",
                "         logic.update(connInstanceTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -85,4 +87,5 @@ public class ConnectorServiceImpl extends AbstractServiceImpl implements Connect",
                "     @Override",
                "-    public void check(final ConnInstanceTO connInstanceTO) {",
                "+    public Response check(final ConnInstanceTO connInstanceTO) {",
                "         logic.check(connInstanceTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -90,4 +93,5 @@ public class ConnectorServiceImpl extends AbstractServiceImpl implements Connect",
                "     @Override",
                "-    public void reload() {",
                "+    public Response reload() {",
                "         logic.reload();",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java",
                "index daa8aad388..168c3cda27 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class DomainServiceImpl extends AbstractServiceImpl implements DomainServ",
                "     @Override",
                "-    public void update(final DomainTO anyTypeTO) {",
                "+    public Response update(final DomainTO anyTypeTO) {",
                "         logic.update(anyTypeTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -61,4 +62,5 @@ public class DomainServiceImpl extends AbstractServiceImpl implements DomainServ",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java",
                "index 41e3bad4fb..dec464b4dd 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class DynRealmServiceImpl extends AbstractServiceImpl implements DynRealm",
                "     @Override",
                "-    public void update(final DynRealmTO roleTO) {",
                "+    public Response update(final DynRealmTO roleTO) {",
                "         logic.update(roleTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -61,4 +62,5 @@ public class DynRealmServiceImpl extends AbstractServiceImpl implements DynRealm",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java",
                "index 94c41c4fab..4e23d2272c 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java",
                "@@ -21,2 +21,4 @@ package org.apache.syncope.core.rest.cxf.service;",
                " import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                " import org.apache.syncope.common.lib.patch.GroupPatch;",
                "@@ -24,2 +26,3 @@ import org.apache.syncope.common.lib.to.ExecTO;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                " import org.apache.syncope.common.lib.types.BulkMembersActionType;",
                "@@ -59,2 +62,25 @@ public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupPatch> im",
                "+    @Override",
                "+    public Response create(final GroupTO groupTO) {",
                "+        ProvisioningResult<GroupTO> created = logic.create(groupTO, isNullPriorityAsync());",
                "+        return createResponse(created);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final GroupTO groupTO) {",
                "+        groupTO.setKey(getActualKey(groupTO.getKey()));",
                "+        GroupTO before = logic.read(groupTO.getKey());",
                "+",
                "+        checkETag(before.getETagValue());",
                "+",
                "+        ProvisioningResult<GroupTO> updated =",
                "+                logic.update(AnyOperations.diff(groupTO, before, false), isNullPriorityAsync());",
                "+        return modificationResponse(updated);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final GroupPatch groupPatch) {",
                "+        return doUpdate(groupPatch);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java",
                "index c3190affbf..c85793b91b 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java",
                "@@ -57,4 +57,5 @@ public class ImplementationServiceImpl extends AbstractServiceImpl implements Im",
                "     @Override",
                "-    public void update(final ImplementationTO implementationTO) {",
                "+    public Response update(final ImplementationTO implementationTO) {",
                "         logic.update(implementationTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -62,4 +63,5 @@ public class ImplementationServiceImpl extends AbstractServiceImpl implements Im",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "index c62a55c061..4f8c2f4c45 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "@@ -23,2 +23,3 @@ import java.util.List;",
                " import javax.ws.rs.BadRequestException;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "@@ -52,3 +53,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "     @Override",
                "-    public void delete(final LoggerType type, final String name) {",
                "+    public Response delete(final LoggerType type, final String name) {",
                "         switch (type) {",
                "@@ -69,3 +70,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "         }",
                "-",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -102,3 +103,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "     @Override",
                "-    public void update(final LoggerType type, final LoggerTO logger) {",
                "+    public Response update(final LoggerType type, final LoggerTO logger) {",
                "         switch (type) {",
                "@@ -119,2 +120,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "         }",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java",
                "index 2c1a4348b2..ff5cb133f4 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java",
                "@@ -63,4 +63,5 @@ public class MailTemplateServiceImpl extends AbstractServiceImpl implements Mail",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -78,5 +79,6 @@ public class MailTemplateServiceImpl extends AbstractServiceImpl implements Mail",
                "     @Override",
                "-    public void setFormat(final String key, final MailTemplateFormat format, final InputStream templateIn) {",
                "+    public Response setFormat(final String key, final MailTemplateFormat format, final InputStream templateIn) {",
                "         try {",
                "             logic.setFormat(key, format, IOUtils.toString(templateIn, StandardCharsets.UTF_8));",
                "+            return Response.noContent().build();",
                "         } catch (final IOException e) {",
                "@@ -88,4 +90,5 @@ public class MailTemplateServiceImpl extends AbstractServiceImpl implements Mail",
                "     @Override",
                "-    public void removeFormat(final String key, final MailTemplateFormat format) {",
                "+    public Response removeFormat(final String key, final MailTemplateFormat format) {",
                "         logic.setFormat(key, format, null);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java",
                "index 874f138f84..9671f937f2 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java",
                "@@ -58,4 +58,5 @@ public class NotificationServiceImpl extends AbstractServiceImpl implements Noti",
                "     @Override",
                "-    public void update(final NotificationTO notificationTO) {",
                "+    public Response update(final NotificationTO notificationTO) {",
                "         logic.update(notificationTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -63,4 +64,5 @@ public class NotificationServiceImpl extends AbstractServiceImpl implements Noti",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -73,4 +75,5 @@ public class NotificationServiceImpl extends AbstractServiceImpl implements Noti",
                "     @Override",
                "-    public void actionJob(final JobAction action) {",
                "+    public Response actionJob(final JobAction action) {",
                "         logic.actionJob(action);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java",
                "index 8d6709a55d..64f765d02d 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java",
                "@@ -47,4 +47,5 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -62,4 +63,5 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ",
                "     @Override",
                "-    public void update(final AbstractPolicyTO policyTO) {",
                "+    public Response update(final AbstractPolicyTO policyTO) {",
                "         logic.update(policyTO);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java",
                "index 1cdc1d4b6b..ffff1b36e3 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class RelationshipTypeServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void update(final RelationshipTypeTO anyTypeTO) {",
                "+    public Response update(final RelationshipTypeTO anyTypeTO) {",
                "         logic.update(anyTypeTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -61,4 +62,5 @@ public class RelationshipTypeServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java",
                "index 5a44cb0854..65e1b43e86 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java",
                "@@ -56,4 +56,5 @@ public class ReportServiceImpl extends AbstractExecutableService implements Repo",
                "     @Override",
                "-    public void update(final ReportTO reportTO) {",
                "+    public Response update(final ReportTO reportTO) {",
                "         logic.update(reportTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -83,4 +84,5 @@ public class ReportServiceImpl extends AbstractExecutableService implements Repo",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java",
                "index 9fc47d0d63..98dbc16183 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java",
                "@@ -64,4 +64,5 @@ public class ReportTemplateServiceImpl extends AbstractServiceImpl implements Re",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -79,5 +80,6 @@ public class ReportTemplateServiceImpl extends AbstractServiceImpl implements Re",
                "     @Override",
                "-    public void setFormat(final String key, final ReportTemplateFormat format, final InputStream templateIn) {",
                "+    public Response setFormat(final String key, final ReportTemplateFormat format, final InputStream templateIn) {",
                "         try {",
                "             logic.setFormat(key, format, IOUtils.toString(templateIn, StandardCharsets.UTF_8.name()));",
                "+            return Response.noContent().build();",
                "         } catch (final IOException e) {",
                "@@ -89,4 +91,5 @@ public class ReportTemplateServiceImpl extends AbstractServiceImpl implements Re",
                "     @Override",
                "-    public void removeFormat(final String key, final ReportTemplateFormat format) {",
                "+    public Response removeFormat(final String key, final ReportTemplateFormat format) {",
                "         logic.setFormat(key, format, null);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java",
                "index b69b5bee7f..ef5aead8d9 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.rest.cxf.service;",
                " import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;",
                "@@ -39,4 +40,5 @@ public class ResourceHistoryServiceImpl extends AbstractServiceImpl implements R",
                "     @Override",
                "-    public void restore(final String key) {",
                "+    public Response restore(final String key) {",
                "         logic.restore(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -44,4 +46,5 @@ public class ResourceHistoryServiceImpl extends AbstractServiceImpl implements R",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "index 2b76dfc2f0..e3c99928d3 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "@@ -74,4 +74,5 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "     @Override",
                "-    public void update(final ResourceTO resourceTO) {",
                "+    public Response update(final ResourceTO resourceTO) {",
                "         logic.update(resourceTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -79,4 +80,5 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "     @Override",
                "-    public void setLatestSyncToken(final String key, final String anyTypeKey) {",
                "+    public Response setLatestSyncToken(final String key, final String anyTypeKey) {",
                "         logic.setLatestSyncToken(key, anyTypeKey);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -84,4 +86,5 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "     @Override",
                "-    public void removeSyncToken(final String key, final String anyTypeKey) {",
                "+    public Response removeSyncToken(final String key, final String anyTypeKey) {",
                "         logic.removeSyncToken(key, anyTypeKey);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -89,4 +92,5 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -140,4 +144,5 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "     @Override",
                "-    public void check(final ResourceTO resourceTO) {",
                "+    public Response check(final ResourceTO resourceTO) {",
                "         logic.check(resourceTO);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java",
                "index 6a0a75adf1..b31b4e1d48 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java",
                "@@ -63,4 +63,5 @@ public class RoleServiceImpl extends AbstractServiceImpl implements RoleService",
                "     @Override",
                "-    public void update(final RoleTO roleTO) {",
                "+    public Response update(final RoleTO roleTO) {",
                "         logic.update(roleTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -68,4 +69,5 @@ public class RoleServiceImpl extends AbstractServiceImpl implements RoleService",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -83,5 +85,6 @@ public class RoleServiceImpl extends AbstractServiceImpl implements RoleService",
                "     @Override",
                "-    public void setConsoleLayoutInfo(final String key, final InputStream consoleLayoutIn) {",
                "+    public Response setConsoleLayoutInfo(final String key, final InputStream consoleLayoutIn) {",
                "         try {",
                "             logic.setConsoleLayoutInfo(key, IOUtils.toString(consoleLayoutIn, StandardCharsets.UTF_8.name()));",
                "+            return Response.noContent().build();",
                "         } catch (final IOException e) {",
                "@@ -93,4 +96,5 @@ public class RoleServiceImpl extends AbstractServiceImpl implements RoleService",
                "     @Override",
                "-    public void removeConsoleLayoutInfo(final String key) {",
                "+    public Response removeConsoleLayoutInfo(final String key) {",
                "         logic.setConsoleLayoutInfo(key, null);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java",
                "index 810c520277..b6c739749c 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java",
                "@@ -49,4 +49,5 @@ public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaServ",
                "     @Override",
                "-    public void delete(final SchemaType schemaType, final String key) {",
                "+    public Response delete(final SchemaType schemaType, final String key) {",
                "         logic.delete(schemaType, key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -64,4 +65,5 @@ public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaServ",
                "     @Override",
                "-    public void update(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {",
                "+    public Response update(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {",
                "         logic.update(schemaType, schemaTO);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java",
                "index 5dca5032b6..fbfd00a5da 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java",
                "@@ -57,4 +57,5 @@ public class SecurityQuestionServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void update(final SecurityQuestionTO securityQuestionTO) {",
                "+    public Response update(final SecurityQuestionTO securityQuestionTO) {",
                "         logic.update(securityQuestionTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -62,4 +63,5 @@ public class SecurityQuestionServiceImpl extends AbstractServiceImpl implements",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java",
                "index ea9f5af841..47a860c6d1 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java",
                "@@ -65,4 +65,5 @@ public class TaskServiceImpl extends AbstractExecutableService implements TaskSe",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -91,5 +92,6 @@ public class TaskServiceImpl extends AbstractExecutableService implements TaskSe",
                "     @Override",
                "-    public void update(final AbstractTaskTO taskTO) {",
                "+    public Response update(final AbstractTaskTO taskTO) {",
                "         if (taskTO instanceof SchedTaskTO) {",
                "             logic.updateSchedTask((SchedTaskTO) taskTO);",
                "+            return Response.noContent().build();",
                "         } else {",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "index c76986efe5..f6a800f1d0 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "@@ -91,3 +91,3 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf",
                "     @Override",
                "-    public void requestPasswordReset(final String username, final String securityAnswer) {",
                "+    public Response requestPasswordReset(final String username, final String securityAnswer) {",
                "         if (!syncopeLogic.isPwdResetAllowed()) {",
                "@@ -99,2 +99,3 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf",
                "         logic.requestPasswordReset(username, securityAnswer);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -102,3 +103,3 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf",
                "     @Override",
                "-    public void confirmPasswordReset(final String token, final String password) {",
                "+    public Response confirmPasswordReset(final String token, final String password) {",
                "         if (!syncopeLogic.isPwdResetAllowed()) {",
                "@@ -110,2 +111,3 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf",
                "         logic.confirmPasswordReset(token, password);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java",
                "index 90c706a725..4af144bd24 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java",
                "@@ -22,2 +22,3 @@ import java.util.Date;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;",
                "@@ -66,2 +67,19 @@ public class UserServiceImpl extends AbstractAnyService<UserTO, UserPatch> imple",
                "+    @Override",
                "+    public Response update(final UserTO userTO) {",
                "+        userTO.setKey(getActualKey(userTO.getKey()));",
                "+        UserTO before = logic.read(userTO.getKey());",
                "+",
                "+        checkETag(before.getETagValue());",
                "+",
                "+        ProvisioningResult<UserTO> updated =",
                "+                logic.update(AnyOperations.diff(userTO, before, false), isNullPriorityAsync());",
                "+        return modificationResponse(updated);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response update(final UserPatch userPatch) {",
                "+        return doUpdate(userPatch);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/WorkflowServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/WorkflowServiceImpl.java",
                "index 2321e0adbc..b67e5bb68b 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/WorkflowServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/WorkflowServiceImpl.java",
                "@@ -68,3 +68,3 @@ public class WorkflowServiceImpl extends AbstractServiceImpl implements Workflow",
                "     @Override",
                "-    public void set(final String anyType, final String key, final String definition) {",
                "+    public Response set(final String anyType, final String key, final String definition) {",
                "         WorkflowDefinitionFormat format =",
                "@@ -75,2 +75,3 @@ public class WorkflowServiceImpl extends AbstractServiceImpl implements Workflow",
                "         logic.importDefinition(anyType, key, format, definition);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -78,4 +79,5 @@ public class WorkflowServiceImpl extends AbstractServiceImpl implements Workflow",
                "     @Override",
                "-    public void delete(final String anyType, final String key) {",
                "+    public Response delete(final String anyType, final String key) {",
                "         logic.delete(anyType, key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "index 3346c5c732..e576b52398 100644",
                "--- a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "+++ b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "@@ -31,2 +31,3 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.CamelMetrics;",
                "@@ -66,2 +67,3 @@ public interface CamelRouteService extends JAXRSService {",
                "      * @param route to be updated",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -70,3 +72,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull CamelRouteTO route);",
                "+    Response update(@NotNull CamelRouteTO route);",
                "@@ -74,2 +76,4 @@ public interface CamelRouteService extends JAXRSService {",
                "      * Restart the underlying Apache Camel context.",
                "+     *",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -77,3 +81,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"restartContext\")",
                "-    void restartContext();",
                "+    Response restartContext();",
                "diff --git a/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java b/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java",
                "index 163847f0cb..a7f6fbd034 100644",
                "--- a/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java",
                "+++ b/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.rest.cxf.service;",
                " import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.to.CamelMetrics;",
                "@@ -46,4 +47,5 @@ public class CamelRouteServiceImpl extends AbstractServiceImpl implements CamelR",
                "     @Override",
                "-    public void update(final CamelRouteTO route) {",
                "+    public Response update(final CamelRouteTO route) {",
                "         logic.update(route);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -51,4 +53,5 @@ public class CamelRouteServiceImpl extends AbstractServiceImpl implements CamelR",
                "     @Override",
                "-    public void restartContext() {",
                "+    public Response restartContext() {",
                "         logic.restartContext();",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "index 0d528c3999..e273676741 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "@@ -86,2 +86,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "      * @param saml2IdpTO idp configuration to be stored",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -90,3 +91,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void update(@NotNull SAML2IdPTO saml2IdpTO);",
                "+    Response update(@NotNull SAML2IdPTO saml2IdpTO);",
                "@@ -96,2 +97,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "      * @param key SAML 2.0 Identity Provider's entityID",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -99,3 +101,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    void delete(@PathParam(\"key\") String key);",
                "+    Response delete(@PathParam(\"key\") String key);",
                " }",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "index f3d420c92e..ed964d608f 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "@@ -90,2 +90,3 @@ public interface SAML2SPService extends JAXRSService {",
                "      * @param response SAML response and relay state",
                "+     * @return an empty response if operation was successful",
                "      */",
                "@@ -95,3 +96,3 @@ public interface SAML2SPService extends JAXRSService {",
                "     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void validateLogoutResponse(SAML2ReceivedResponseTO response);",
                "+    Response validateLogoutResponse(SAML2ReceivedResponseTO response);",
                " }",
                "diff --git a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "index ebda30da3e..bd2f5f9557 100644",
                "--- a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "+++ b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "@@ -63,4 +63,5 @@ public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdP",
                "     @Override",
                "-    public void update(final SAML2IdPTO saml2IdpTO) {",
                "+    public Response update(final SAML2IdPTO saml2IdpTO) {",
                "         logic.update(saml2IdpTO);",
                "+        return Response.noContent().build();",
                "     }",
                "@@ -68,4 +69,5 @@ public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdP",
                "     @Override",
                "-    public void delete(final String key) {",
                "+    public Response delete(final String key) {",
                "         logic.delete(key);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java",
                "index 4ec2074f19..93cd87b571 100644",
                "--- a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java",
                "+++ b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java",
                "@@ -68,4 +68,5 @@ public class SAML2SPServiceImpl extends AbstractServiceImpl implements SAML2SPSe",
                "     @Override",
                "-    public void validateLogoutResponse(final SAML2ReceivedResponseTO response) {",
                "+    public Response validateLogoutResponse(final SAML2ReceivedResponseTO response) {",
                "         logic.validateLogoutResponse(getJWTToken(), response);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "index fdc4da3add..1efad9a464 100644",
                "--- a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "+++ b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "@@ -27,2 +27,3 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.scim.SCIMConf;",
                "@@ -48,2 +49,3 @@ public interface SCIMConfService extends JAXRSService {",
                "      * @param conf SCIM configuration",
                "+     * @return Response.noContent().build();",
                "      */",
                "@@ -51,3 +53,3 @@ public interface SCIMConfService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "-    void set(@NotNull SCIMConf conf);",
                "+    Response set(@NotNull SCIMConf conf);",
                " }",
                "diff --git a/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java b/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "index 223aca7e4c..1d147013dc 100644",
                "--- a/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "+++ b/ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.rest.cxf.service;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.scim.SCIMConf;",
                "@@ -36,4 +37,5 @@ public class SCIMConfServiceImpl extends AbstractServiceImpl implements SCIMConf",
                "     @Override",
                "-    public void set(final SCIMConf conf) {",
                "+    public Response set(final SCIMConf conf) {",
                "         manager.set(conf);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index 2c73f44763..4ecc966891 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -42,3 +42,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public Response create(final SCIMUser user) {",
                "-        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserTO(user), false);",
                "+        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserTO(user), true, false);",
                "         return createResponse("
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java",
                "client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java",
                "client/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/WorkflowServiceImpl.java",
                "ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java",
                "ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SCIMConfServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "130c4a084710b77eb7005bf0885cfccaa5d39558"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: template, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "17174c7a3f2288a598cc6b1e216fdb811f18659d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508421642,
            "hunks": 95,
            "message": "[SYNCOPE-956] PullCorrelationRule as AccountRule and PasswordRule",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java b/client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java",
                "index ed60e6c9bb..415e7c4bc6 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java",
                "@@ -38,2 +38,3 @@ import org.apache.syncope.common.lib.policy.AccountRuleConf;",
                " import org.apache.syncope.common.lib.policy.PasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.report.ReportletConf;",
                "@@ -67,2 +68,4 @@ public class ClassPathScanImplementationLookup {",
                "+    private Map<String, Class<? extends PullCorrelationRuleConf>> pullCorrelationRuleConfs;",
                "+",
                "     /**",
                "@@ -86,2 +89,3 @@ public class ClassPathScanImplementationLookup {",
                "         passwordRuleConfs = new HashMap<>();",
                "+        pullCorrelationRuleConfs = new HashMap<>();",
                "@@ -96,2 +100,3 @@ public class ClassPathScanImplementationLookup {",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRuleConf.class));",
                "+        scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRuleConf.class));",
                "@@ -130,2 +135,4 @@ public class ClassPathScanImplementationLookup {",
                "                         passwordRuleConfs.put(clazz.getName(), (Class<? extends PasswordRuleConf>) clazz);",
                "+                    } else if (PullCorrelationRuleConf.class.isAssignableFrom(clazz)) {",
                "+                        pullCorrelationRuleConfs.put(clazz.getName(), (Class<? extends PullCorrelationRuleConf>) clazz);",
                "                     }",
                "@@ -156,2 +163,3 @@ public class ClassPathScanImplementationLookup {",
                "         passwordRuleConfs = Collections.unmodifiableMap(passwordRuleConfs);",
                "+        pullCorrelationRuleConfs = Collections.unmodifiableMap(pullCorrelationRuleConfs);",
                "@@ -164,2 +172,3 @@ public class ClassPathScanImplementationLookup {",
                "         LOG.debug(\"Password Rule configurations found: {}\", passwordRuleConfs);",
                "+        LOG.debug(\"Pull Correlation Rule configurations found: {}\", pullCorrelationRuleConfs);",
                "     }",
                "@@ -208,2 +217,6 @@ public class ClassPathScanImplementationLookup {",
                "+    public Map<String, Class<? extends PullCorrelationRuleConf>> getPullCorrelationRuleConfs() {",
                "+        return pullCorrelationRuleConfs;",
                "+    }",
                "+",
                " }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "index d30bdbee9e..96ee931189 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "@@ -47,3 +47,3 @@ import org.apache.syncope.client.lib.SyncopeClient;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "-import org.apache.syncope.common.lib.report.Schema;",
                "+import org.apache.syncope.common.lib.Schema;",
                " import org.apache.syncope.common.lib.report.SearchCondition;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java",
                "index a2d4690584..0e23e1bd0b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java",
                "@@ -88,2 +88,3 @@ public class ImplementationModalPanel extends AbstractModalPanel<ImplementationT",
                "                 || implementation.getType() == ImplementationType.PASSWORD_RULE",
                "+                || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE",
                "                 ? ViewMode.JSON_BODY",
                "@@ -124,2 +125,7 @@ public class ImplementationModalPanel extends AbstractModalPanel<ImplementationT",
                "+                case PULL_CORRELATION_RULE:",
                "+                    classes = implementationLookup.getPullCorrelationRuleConfs().keySet().stream().",
                "+                            collect(Collectors.toList());",
                "+                    break;",
                "+",
                "                 default:",
                "@@ -268,2 +274,6 @@ public class ImplementationModalPanel extends AbstractModalPanel<ImplementationT",
                "+                    case PULL_CORRELATION_RULE:",
                "+                        clazz = implementationLookup.getPullCorrelationRuleConfs().get(jsonClass.getModelObject());",
                "+                        break;",
                "+",
                "                     default:",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java",
                "index 91b24d01e3..3fcb08e817 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java",
                "@@ -20,3 +20,5 @@ package org.apache.syncope.client.console.policies;",
                "+import java.io.Serializable;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.List;",
                "@@ -33,2 +35,3 @@ import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.Bas",
                " import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;",
                " import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;",
                "@@ -42,3 +45,5 @@ import org.apache.syncope.common.lib.policy.AccountPolicyTO;",
                " import org.apache.syncope.common.lib.policy.PasswordPolicyTO;",
                "+import org.apache.syncope.common.lib.policy.PullPolicyTO;",
                " import org.apache.syncope.common.lib.to.EntityTO;",
                "+import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                " import org.apache.wicket.Component;",
                "@@ -117,5 +122,3 @@ public class PolicyModalPanelBuilder<T extends AbstractPolicyTO> extends Abstrac",
                "                         new ListModel<String>(resources.getObject())));",
                "-            }",
                "-",
                "-            if (policyTO instanceof PasswordPolicyTO) {",
                "+            } else if (policyTO instanceof PasswordPolicyTO) {",
                "                 fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(",
                "@@ -131,2 +134,8 @@ public class PolicyModalPanelBuilder<T extends AbstractPolicyTO> extends Abstrac",
                "                         false));",
                "+            } else if (policyTO instanceof PullPolicyTO) {",
                "+                fields.add(new AjaxDropDownChoicePanel<>(",
                "+                        \"field\",",
                "+                        \"conflictResolutionAction\",",
                "+                        new PropertyModel<>(policyTO, \"conflictResolutionAction\")).",
                "+                        setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java",
                "index 2b5f8d4858..1cddad3bd0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java",
                "@@ -28,3 +28,2 @@ import java.util.List;",
                " import java.util.stream.Collectors;",
                "-import org.apache.commons.lang3.SerializationUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -136,15 +135,2 @@ public class PolicyRuleDirectoryPanel<T extends AbstractPolicyTO> extends Direct",
                "-        panel.add(new ActionLink<PolicyRuleWrapper>() {",
                "-",
                "-            private static final long serialVersionUID = -3722207913631435501L;",
                "-",
                "-            @Override",
                "-            public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {",
                "-                RuleConf clone = SerializationUtils.clone(model.getObject().getConf());",
                "-",
                "-                PolicyRuleDirectoryPanel.this.getTogglePanel().close(target);",
                "-                send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,",
                "-                        new AjaxWizard.EditItemActionEvent<>(new PolicyRuleWrapper(true).setConf(clone), target));",
                "-            }",
                "-        }, ActionLink.ActionType.CLONE, StandardEntitlement.POLICY_CREATE);",
                "         panel.add(new ActionLink<PolicyRuleWrapper>() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "deleted file mode 100644",
                "index 4280996c90..0000000000",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "+++ /dev/null",
                "@@ -1,344 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.client.console.policies;",
                "-",
                "-import com.fasterxml.jackson.databind.JsonNode;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-import java.io.IOException;",
                "-import java.io.Serializable;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "-import java.util.stream.Collectors;",
                "-import org.apache.commons.lang3.StringUtils;",
                "-import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "-import org.apache.syncope.client.console.commons.Constants;",
                "-import org.apache.syncope.client.console.pages.BasePage;",
                "-import org.apache.syncope.client.console.panels.AbstractModalPanel;",
                "-import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "-import org.apache.syncope.client.console.rest.ImplementationRestClient;",
                "-import org.apache.syncope.client.console.rest.PolicyRestClient;",
                "-import org.apache.syncope.client.console.rest.SchemaRestClient;",
                "-import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;",
                "-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;",
                "-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;",
                "-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;",
                "-import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;",
                "-import org.apache.syncope.common.lib.policy.PullPolicyTO;",
                "-import org.apache.syncope.common.lib.to.EntityTO;",
                "-import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                "-import org.apache.syncope.common.lib.types.ImplementationType;",
                "-import org.apache.syncope.common.lib.types.SchemaType;",
                "-import org.apache.wicket.PageReference;",
                "-import org.apache.wicket.ajax.AjaxRequestTarget;",
                "-import org.apache.wicket.markup.html.form.Form;",
                "-import org.apache.wicket.markup.html.list.ListItem;",
                "-import org.apache.wicket.markup.html.panel.Panel;",
                "-import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.model.Model;",
                "-import org.apache.wicket.model.PropertyModel;",
                "-",
                "-public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "-",
                "-    private static final long serialVersionUID = 5945391813567245081L;",
                "-",
                "-    private enum CorrelationRuleType {",
                "-        PLAIN_ATTRIBUTES,",
                "-        CUSTOM;",
                "-",
                "-    }",
                "-",
                "-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();",
                "-",
                "-    private final IModel<List<CorrelationRule>> model;",
                "-",
                "-    private final PolicyRestClient restClient = new PolicyRestClient();",
                "-",
                "-    public PolicySpecModalPanel(",
                "-            final PullPolicyTO policyTO, final BaseModal<PullPolicyTO> modal, final PageReference pageRef) {",
                "-",
                "-        super(modal, pageRef);",
                "-        modal.setFormModel(policyTO);",
                "-",
                "-        add(new AjaxDropDownChoicePanel<>(",
                "-                \"conflictResolutionAction\",",
                "-                \"conflictResolutionAction\",",
                "-                new PropertyModel<>(policyTO, \"conflictResolutionAction\")).",
                "-                setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));",
                "-",
                "-        model = new PropertyModel<List<CorrelationRule>>(policyTO, \"correlationRules\") {",
                "-",
                "-            private static final long serialVersionUID = -8168676563540297301L;",
                "-",
                "-            private List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().",
                "-                    map(rule -> new CorrelationRule(rule, policyTO.getCorrelationRules().get(rule))).",
                "-                    collect(Collectors.toList());",
                "-",
                "-            @Override",
                "-            public List<CorrelationRule> getObject() {",
                "-                return rules;",
                "-            }",
                "-",
                "-            @Override",
                "-            public void setObject(final List<CorrelationRule> object) {",
                "-                policyTO.getCorrelationRules().clear();",
                "-                rules.forEach(rule -> {",
                "-                    policyTO.getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "-                });",
                "-            }",
                "-        };",
                "-",
                "-        add(new MultiPanel<CorrelationRule>(\"correlationRules\", \"correlationRules\", model) {",
                "-",
                "-            private static final long serialVersionUID = -2481579077338205547L;",
                "-",
                "-            @Override",
                "-            protected CorrelationRule newModelObject() {",
                "-                return new CorrelationRule();",
                "-            }",
                "-",
                "-            @Override",
                "-            protected CorrelationRulePanel getItemPanel(final ListItem<CorrelationRule> item) {",
                "-                return new CorrelationRulePanel(\"panel\", Model.of(item.getModelObject()));",
                "-            }",
                "-        });",
                "-    }",
                "-",
                "-    @Override",
                "-    public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {",
                "-        try {",
                "-            getItem().getCorrelationRules().clear();",
                "-            model.getObject().forEach(rule -> {",
                "-                getItem().getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "-            });",
                "-            restClient.updatePolicy(getItem());",
                "-            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "-            this.modal.close(target);",
                "-        } catch (Exception e) {",
                "-            LOG.error(\"While creating/updating policy\", e);",
                "-            SyncopeConsoleSession.get().error(",
                "-                    StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());",
                "-        }",
                "-        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "-    }",
                "-",
                "-    public static class CorrelationRulePanel extends Panel {",
                "-",
                "-        private static final long serialVersionUID = -4708008994320210839L;",
                "-",
                "-        private final ImplementationRestClient implRestClient = new ImplementationRestClient();",
                "-",
                "-        CorrelationRulePanel(final String id, final IModel<CorrelationRule> rule) {",
                "-            super(id);",
                "-",
                "-            AjaxDropDownChoicePanel<String> anyType = new AjaxDropDownChoicePanel<>(",
                "-                    \"anyType\", \"any.type\", new PropertyModel<String>(rule.getObject(), \"any\")).",
                "-                    setNullValid(true).",
                "-                    setChoices(new AnyTypeRestClient().list());",
                "-            add(anyType);",
                "-",
                "-            final AjaxDropDownChoicePanel<CorrelationRuleType> ruleType = new AjaxDropDownChoicePanel<>(",
                "-                    \"ruleType\", \"rule.type\", new PropertyModel<CorrelationRuleType>(rule.getObject(), \"type\"), false).",
                "-                    setNullValid(true).",
                "-                    setChoices(Arrays.stream(CorrelationRuleType.values()).collect(Collectors.toList()));",
                "-            add(ruleType);",
                "-",
                "-            // ---------------------------------------------------------------",
                "-            // Custom rule palette",
                "-            // ---------------------------------------------------------------",
                "-            List<String> rules = implRestClient.list(ImplementationType.PULL_CORRELATION_RULE).stream().",
                "-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());",
                "-            final AjaxDropDownChoicePanel<String> customRule = new AjaxDropDownChoicePanel<>(",
                "-                    \"customRule\", \"rule.custom\", new PropertyModel<String>(rule.getObject(), \"rule\")).setChoices(rules);",
                "-            customRule.setOutputMarkupPlaceholderTag(true);",
                "-            add(customRule.setVisible(CorrelationRuleType.CUSTOM == rule.getObject().getType()));",
                "-            // ---------------------------------------------------------------",
                "-",
                "-            // ---------------------------------------------------------------",
                "-            // JSON rule palette",
                "-            // ---------------------------------------------------------------",
                "-            AjaxPalettePanel.Builder<String> jsonRuleBuilder =",
                "-                    new AjaxPalettePanel.Builder<String>().setName(\"rule.json\");",
                "-",
                "-            final PropertyModel<List<String>> jsonRuleModel =",
                "-                    new PropertyModel<List<String>>(rule.getObject(), \"rule\") {",
                "-",
                "-                private static final long serialVersionUID = 3799387950428254072L;",
                "-",
                "-                @Override",
                "-                public List<String> getObject() {",
                "-                    final List<String> res = new ArrayList<>();",
                "-                    try {",
                "-                        JsonNode obj = OBJECT_MAPPER.readTree(rule.getObject().getRule());",
                "-                        if (obj.isArray()) {",
                "-                            for (final JsonNode objNode : obj) {",
                "-                                res.add(objNode.asText());",
                "-                            }",
                "-                        }",
                "-                    } catch (IOException e) {",
                "-                        LOG.warn(\"Error deserializing json tree\", e);",
                "-                    }",
                "-                    return res;",
                "-                }",
                "-",
                "-                @Override",
                "-                public void setObject(final List<String> object) {",
                "-                    final StringBuilder bld = new StringBuilder();",
                "-                    bld.append(\"[\");",
                "-",
                "-                    boolean comma = false;",
                "-                    for (String obj : object) {",
                "-                        if (comma) {",
                "-                            bld.append(\",\");",
                "-                        } else {",
                "-                            comma = true;",
                "-                        }",
                "-                        bld.append(\"\\\"\").append(obj).append(\"\\\"\");",
                "-                    }",
                "-                    bld.append(\"]\");",
                "-                    rule.getObject().setRule(bld.toString());",
                "-                }",
                "-            };",
                "-",
                "-            final AjaxPalettePanel<String> jsonRule =",
                "-                    jsonRuleBuilder.build(\"jsonRule\", jsonRuleModel, new AjaxPalettePanel.Builder.Query<String>() {",
                "-",
                "-                        private static final long serialVersionUID = -7223078772249308813L;",
                "-",
                "-                        @Override",
                "-                        public List<String> execute(final String filter) {",
                "-                            return getPlainSchemas(rule.getObject());",
                "-                        }",
                "-                    });",
                "-            jsonRule.hideLabel().setOutputMarkupPlaceholderTag(true);",
                "-",
                "-            anyType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "-",
                "-                private static final long serialVersionUID = -1107858522700306810L;",
                "-",
                "-                @Override",
                "-                protected void onUpdate(final AjaxRequestTarget target) {",
                "-                    if (jsonRule.isVisibleInHierarchy()) {",
                "-                        rule.getObject().setRule(\"[]\");",
                "-                        jsonRule.reload(target);",
                "-                        target.add(jsonRule);",
                "-                    }",
                "-                }",
                "-            });",
                "-",
                "-            add(jsonRule.setVisible(CorrelationRuleType.PLAIN_ATTRIBUTES == rule.getObject().getType()));",
                "-            // ---------------------------------------------------------------",
                "-",
                "-            ruleType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "-",
                "-                private static final long serialVersionUID = -1107858522700306810L;",
                "-",
                "-                @Override",
                "-                protected void onUpdate(final AjaxRequestTarget target) {",
                "-                    switch (ruleType.getModelObject()) {",
                "-                        case PLAIN_ATTRIBUTES:",
                "-                            jsonRule.setVisible(true);",
                "-                            customRule.setVisible(false);",
                "-                            jsonRule.reload(target);",
                "-                            break;",
                "-",
                "-                        case CUSTOM:",
                "-                            jsonRule.setVisible(false);",
                "-                            customRule.setVisible(true);",
                "-                            break;",
                "-",
                "-                        default:",
                "-                            customRule.setVisible(false);",
                "-                            jsonRule.setVisible(false);",
                "-",
                "-                    }",
                "-                    target.add(jsonRule);",
                "-                    target.add(customRule);",
                "-                }",
                "-            });",
                "-        }",
                "-",
                "-        private static List<String> getPlainSchemas(final CorrelationRule rule) {",
                "-            final List<String> choices = StringUtils.isEmpty(rule.getAny())",
                "-                    ? new ArrayList<>()",
                "-                    : new SchemaRestClient().getSchemas(SchemaType.PLAIN,",
                "-                            rule.getAny().equals(AnyTypeKind.USER.name())",
                "-                            ? AnyTypeKind.USER",
                "-                            : rule.getAny().equals(AnyTypeKind.GROUP.name())",
                "-                            ? AnyTypeKind.GROUP",
                "-                            : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).",
                "-                            collect(Collectors.toList());",
                "-",
                "-            choices.add(\"key\");",
                "-            choices.add(rule.getAny().equals(AnyTypeKind.USER.name()) ? \"username\" : \"name\");",
                "-            Collections.sort(choices);",
                "-            return choices;",
                "-        }",
                "-    }",
                "-",
                "-    private static class CorrelationRule implements Serializable {",
                "-",
                "-        private static final long serialVersionUID = 5250228867297353011L;",
                "-",
                "-        private String any;",
                "-",
                "-        private CorrelationRuleType type;",
                "-",
                "-        private String rule;",
                "-",
                "-        CorrelationRule() {",
                "-            this.any = AnyTypeKind.USER.name();",
                "-            this.type = CorrelationRuleType.PLAIN_ATTRIBUTES;",
                "-            this.rule = \"[]\";",
                "-        }",
                "-",
                "-        CorrelationRule(final String any, final String rule) {",
                "-            this.any = any;",
                "-            this.type = StringUtils.isEmpty(rule) || rule.trim().startsWith(\"[\") ? CorrelationRuleType.PLAIN_ATTRIBUTES",
                "-                    : CorrelationRuleType.CUSTOM;",
                "-            this.rule = rule;",
                "-        }",
                "-",
                "-        public String getAny() {",
                "-            return any;",
                "-        }",
                "-",
                "-        public CorrelationRuleType getType() {",
                "-            return type;",
                "-        }",
                "-",
                "-        public String getRule() {",
                "-            return rule;",
                "-        }",
                "-",
                "-        public void setAny(final String any) {",
                "-            this.any = any;",
                "-        }",
                "-",
                "-        public void setType(final CorrelationRuleType type) {",
                "-            this.type = type;",
                "-        }",
                "-",
                "-        public void setRule(final String rule) {",
                "-            this.rule = rule;",
                "-        }",
                "-    }",
                "-}",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "index 5a29cae5dd..735aa24919 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.client.console.policies;",
                "+import java.util.List;",
                " import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;",
                "@@ -28,2 +29,4 @@ import org.apache.wicket.ajax.AjaxRequestTarget;",
                " import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;",
                " import org.apache.wicket.model.IModel;",
                "@@ -51,2 +54,8 @@ public class PullPolicyDirectoryPanel extends PolicyDirectoryPanel<PullPolicyTO>",
                "+    @Override",
                "+    protected void addCustomColumnFields(final List<IColumn<PullPolicyTO, String>> columns) {",
                "+        columns.add(new PropertyColumn<>(new StringResourceModel(",
                "+                \"conflictResolutionAction\", this), \"conflictResolutionAction\", \"conflictResolutionAction\"));",
                "+    }",
                "+",
                "     @Override",
                "@@ -60,3 +69,3 @@ public class PullPolicyDirectoryPanel extends PolicyDirectoryPanel<PullPolicyTO>",
                "                 target.add(policySpecModal.setContent(",
                "-                        new PolicySpecModalPanel(model.getObject(), policySpecModal, pageRef)));",
                "+                        new PullPolicyModalPanel(model.getObject(), policySpecModal, pageRef)));",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java",
                "new file mode 100644",
                "index 0000000000..23a228363a",
                "--- /dev/null",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java",
                "@@ -0,0 +1,338 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.policies;",
                "+",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.function.Function;",
                "+import java.util.stream.Collectors;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.pages.BasePage;",
                "+import org.apache.syncope.client.console.panels.AbstractModalPanel;",
                "+import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "+import org.apache.syncope.client.console.rest.ImplementationRestClient;",
                "+import org.apache.syncope.client.console.rest.PolicyRestClient;",
                "+import org.apache.syncope.client.console.rest.SchemaRestClient;",
                "+import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;",
                "+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;",
                "+import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullPolicyTO;",
                "+import org.apache.syncope.common.lib.to.EntityTO;",
                "+import org.apache.syncope.common.lib.to.ImplementationTO;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.lib.types.ImplementationEngine;",
                "+import org.apache.syncope.common.lib.types.ImplementationType;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.markup.html.form.Form;",
                "+import org.apache.wicket.markup.html.list.ListItem;",
                "+import org.apache.wicket.markup.html.panel.Panel;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.LoadableDetachableModel;",
                "+import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.model.PropertyModel;",
                "+",
                "+public class PullPolicyModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "+",
                "+    private static final long serialVersionUID = 2988891313881271124L;",
                "+",
                "+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();",
                "+",
                "+    private final PolicyRestClient restClient = new PolicyRestClient();",
                "+",
                "+    private final ImplementationRestClient implRestClient = new ImplementationRestClient();",
                "+",
                "+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();",
                "+",
                "+    private final LoadableDetachableModel<Map<String, ImplementationTO>> implementations =",
                "+            new LoadableDetachableModel<Map<String, ImplementationTO>>() {",
                "+",
                "+        private static final long serialVersionUID = 5275935387613157437L;",
                "+",
                "+        @Override",
                "+        protected Map<String, ImplementationTO> load() {",
                "+            return implRestClient.list(ImplementationType.PULL_CORRELATION_RULE).stream().",
                "+                    collect(Collectors.toMap(EntityTO::getKey, Function.identity()));",
                "+        }",
                "+    };",
                "+",
                "+    private final IModel<List<CorrelationRule>> model;",
                "+",
                "+    public PullPolicyModalPanel(",
                "+            final PullPolicyTO policyTO,",
                "+            final BaseModal<PullPolicyTO> modal,",
                "+            final PageReference pageRef) {",
                "+",
                "+        super(modal, pageRef);",
                "+        modal.setFormModel(policyTO);",
                "+",
                "+        model = new PropertyModel<List<CorrelationRule>>(policyTO, \"correlationRules\") {",
                "+",
                "+            private static final long serialVersionUID = -8168676563540297301L;",
                "+",
                "+            private final List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().",
                "+                    map(anyType -> new CorrelationRule(anyType,",
                "+                    implementations.getObject().get(policyTO.getCorrelationRules().get(anyType)))).",
                "+                    collect(Collectors.toList());",
                "+",
                "+            @Override",
                "+            public List<CorrelationRule> getObject() {",
                "+                return rules;",
                "+            }",
                "+",
                "+            @Override",
                "+            public void setObject(final List<CorrelationRule> object) {",
                "+                policyTO.getCorrelationRules().clear();",
                "+                rules.forEach(rule -> {",
                "+                    policyTO.getCorrelationRules().put(rule.getAnyType(), rule.getImpl().getKey());",
                "+                });",
                "+            }",
                "+        };",
                "+",
                "+        add(new MultiPanel<CorrelationRule>(\"correlationRules\", \"correlationRules\", model) {",
                "+",
                "+            private static final long serialVersionUID = -2481579077338205547L;",
                "+",
                "+            @Override",
                "+            protected CorrelationRule newModelObject() {",
                "+                return new CorrelationRule();",
                "+            }",
                "+",
                "+            @Override",
                "+            protected CorrelationRulePanel getItemPanel(final ListItem<CorrelationRule> item) {",
                "+                return new CorrelationRulePanel(\"panel\", Model.of(item.getModelObject()));",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "+    @Override",
                "+    public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {",
                "+        try {",
                "+            getItem().getCorrelationRules().clear();",
                "+            model.getObject().forEach(rule -> {",
                "+                getItem().getCorrelationRules().put(rule.getAnyType(), rule.getImplKey());",
                "+",
                "+                if (rule.getImpl().getEngine() == ImplementationEngine.JAVA && rule.getDefaultRuleConf() != null) {",
                "+                    try {",
                "+                        implRestClient.update(rule.getImpl());",
                "+                    } catch (Exception e) {",
                "+                        throw new RuntimeException(e);",
                "+                    }",
                "+                }",
                "+            });",
                "+            restClient.updatePolicy(getItem());",
                "+",
                "+            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+            this.modal.close(target);",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"While creating/updating policy\", e);",
                "+            SyncopeConsoleSession.get().error(",
                "+                    StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());",
                "+        }",
                "+        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+    }",
                "+",
                "+    protected class CorrelationRulePanel extends Panel {",
                "+",
                "+        private static final long serialVersionUID = -5380414818290018189L;",
                "+",
                "+        CorrelationRulePanel(final String id, final IModel<CorrelationRule> correlationRule) {",
                "+            super(id);",
                "+",
                "+            AjaxDropDownChoicePanel<String> anyType = new AjaxDropDownChoicePanel<>(",
                "+                    \"anyType\", \"anyType\", new PropertyModel<String>(correlationRule.getObject(), \"anyType\")).",
                "+                    setNullValid(true).",
                "+                    setChoices(new AnyTypeRestClient().list());",
                "+            anyType.setNullValid(false);",
                "+            anyType.setRequired(true);",
                "+            anyType.setOutputMarkupId(true);",
                "+            add(anyType);",
                "+",
                "+            AjaxDropDownChoicePanel<String> rule = new AjaxDropDownChoicePanel<>(",
                "+                    \"rule\", \"rule\", new PropertyModel<String>(correlationRule.getObject(), \"implKey\")).",
                "+                    setChoices(implementations.getObject().keySet().stream().sorted().collect(Collectors.toList()));",
                "+            rule.setNullValid(false);",
                "+            rule.setRequired(true);",
                "+            rule.setOutputMarkupId(true);",
                "+            add(rule);",
                "+",
                "+            PropertyModel<List<String>> defaultRuleConfModel =",
                "+                    new PropertyModel<List<String>>(correlationRule.getObject().getDefaultRuleConf(), \"schemas\") {",
                "+",
                "+                private static final long serialVersionUID = 3799387950428254072L;",
                "+",
                "+                @Override",
                "+                public List<String> getObject() {",
                "+                    List<String> schemas = new ArrayList<>();",
                "+                    if (correlationRule.getObject().getDefaultRuleConf() != null) {",
                "+                        schemas.addAll(correlationRule.getObject().getDefaultRuleConf().getSchemas());",
                "+                    }",
                "+                    return schemas;",
                "+                }",
                "+",
                "+                @Override",
                "+                public void setObject(final List<String> object) {",
                "+                    if (correlationRule.getObject().getDefaultRuleConf() != null) {",
                "+                        correlationRule.getObject().getDefaultRuleConf().getSchemas().clear();",
                "+                        correlationRule.getObject().getDefaultRuleConf().getSchemas().addAll(object);",
                "+                    }",
                "+                }",
                "+            };",
                "+",
                "+            AjaxPalettePanel<String> defaultRuleConf = new AjaxPalettePanel.Builder<String>().",
                "+                    setName(\"defaultRuleConf\").build(\"defaultRuleConf\",",
                "+                    defaultRuleConfModel, new AjaxPalettePanel.Builder.Query<String>() {",
                "+",
                "+                private static final long serialVersionUID = -7223078772249308813L;",
                "+",
                "+                @Override",
                "+                public List<String> execute(final String filter) {",
                "+                    return getSchemas(correlationRule.getObject());",
                "+                }",
                "+            });",
                "+            defaultRuleConf.hideLabel().setOutputMarkupPlaceholderTag(true);",
                "+            add(defaultRuleConf.setVisible(correlationRule.getObject().getDefaultRuleConf() != null));",
                "+",
                "+            anyType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+",
                "+                private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+                @Override",
                "+                protected void onUpdate(final AjaxRequestTarget target) {",
                "+                    if (defaultRuleConf.isVisibleInHierarchy()) {",
                "+                        correlationRule.getObject().setImpl(null);",
                "+                        defaultRuleConf.reload(target);",
                "+                        target.add(defaultRuleConf);",
                "+                    }",
                "+                }",
                "+            });",
                "+",
                "+            rule.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+",
                "+                private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+                @Override",
                "+                protected void onUpdate(final AjaxRequestTarget target) {",
                "+                    if (correlationRule.getObject().getDefaultRuleConf() == null) {",
                "+                        defaultRuleConf.setVisible(false);",
                "+                    } else {",
                "+                        defaultRuleConf.setVisible(true);",
                "+                    }",
                "+                    target.add(defaultRuleConf);",
                "+                }",
                "+            });",
                "+        }",
                "+",
                "+        private List<String> getSchemas(final CorrelationRule rule) {",
                "+            List<String> choices = StringUtils.isEmpty(rule.getAnyType())",
                "+                    ? new ArrayList<>()",
                "+                    : schemaRestClient.getSchemas(SchemaType.PLAIN,",
                "+                            rule.getAnyType().equals(AnyTypeKind.USER.name())",
                "+                            ? AnyTypeKind.USER",
                "+                            : rule.getAnyType().equals(AnyTypeKind.GROUP.name())",
                "+                            ? AnyTypeKind.GROUP",
                "+                            : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).",
                "+                            collect(Collectors.toList());",
                "+            choices.add(\"key\");",
                "+            choices.add(rule.getAnyType().equals(AnyTypeKind.USER.name()) ? \"username\" : \"name\");",
                "+            Collections.sort(choices);",
                "+            return choices;",
                "+        }",
                "+    }",
                "+",
                "+    private class CorrelationRule implements Serializable {",
                "+",
                "+        private static final long serialVersionUID = 4221521483948294336L;",
                "+",
                "+        private String anyType;",
                "+",
                "+        private ImplementationTO impl;",
                "+",
                "+        private DefaultPullCorrelationRuleConf defaultRuleConf;",
                "+",
                "+        CorrelationRule() {",
                "+            this.anyType = AnyTypeKind.USER.name();",
                "+        }",
                "+",
                "+        CorrelationRule(final String anyType, final ImplementationTO impl) {",
                "+            this.anyType = anyType;",
                "+            setImpl(impl);",
                "+        }",
                "+",
                "+        public String getAnyType() {",
                "+            return anyType;",
                "+        }",
                "+",
                "+        public void setAnyType(final String anyType) {",
                "+            this.anyType = anyType;",
                "+        }",
                "+",
                "+        public String getImplKey() {",
                "+            return impl == null ? null : impl.getKey();",
                "+        }",
                "+",
                "+        public void setImplKey(final String key) {",
                "+            setImpl(implementations.getObject().get(key));",
                "+        }",
                "+",
                "+        public final void setImpl(final ImplementationTO impl) {",
                "+            this.impl = impl;",
                "+            if (impl != null) {",
                "+                this.defaultRuleConf = null;",
                "+                try {",
                "+                    this.defaultRuleConf = OBJECT_MAPPER.readValue(",
                "+                            impl.getBody(), DefaultPullCorrelationRuleConf.class);",
                "+                } catch (Exception e) {",
                "+                    LOG.debug(\"Could not deserialize {} as {}\",",
                "+                            impl.getBody(), DefaultPullCorrelationRuleConf.class.getName());",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        public ImplementationTO getImpl() {",
                "+            if (defaultRuleConf != null) {",
                "+                try {",
                "+                    this.impl.setBody(OBJECT_MAPPER.writeValueAsString(defaultRuleConf));",
                "+                } catch (Exception e) {",
                "+                    LOG.error(\"Could not serialize {}\", defaultRuleConf);",
                "+                }",
                "+            }",
                "+            return impl;",
                "+        }",
                "+",
                "+        public void setDefaultRuleConf(final DefaultPullCorrelationRuleConf defaultRuleConf) {",
                "+            this.defaultRuleConf = defaultRuleConf;",
                "+        }",
                "+",
                "+        public DefaultPullCorrelationRuleConf getDefaultRuleConf() {",
                "+            return defaultRuleConf;",
                "+        }",
                "+",
                "+    }",
                "+}",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java",
                "index 667cc92e80..db7f4b80b5 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java",
                "@@ -28,3 +28,2 @@ import java.util.List;",
                " import java.util.stream.Collectors;",
                "-import org.apache.commons.lang3.SerializationUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -133,16 +132,2 @@ public class ReportletDirectoryPanel extends DirectoryPanel<",
                "-        panel.add(new ActionLink<ReportletWrapper>() {",
                "-",
                "-            private static final long serialVersionUID = -3722207913631435501L;",
                "-",
                "-            @Override",
                "-            public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignore) {",
                "-                ReportletDirectoryPanel.this.getTogglePanel().close(target);",
                "-                ReportletConf clone = SerializationUtils.clone(model.getObject().getConf());",
                "-",
                "-                send(ReportletDirectoryPanel.this, Broadcast.EXACT,",
                "-                        new AjaxWizard.EditItemActionEvent<>(",
                "-                                new ReportletWrapper(true).setConf(clone), target));",
                "-            }",
                "-        }, ActionLink.ActionType.CLONE, StandardEntitlement.REPORT_CREATE);",
                "         panel.add(new ActionLink<ReportletWrapper>() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "index 7d64b7d3ae..06e126b06a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "@@ -138,3 +138,3 @@ public class Relationships extends WizardStep implements ICondition {",
                "                             setItems(relationships.get(relationship)).",
                "-                            includes(\"rightType\", \"rightKey\").",
                "+                            includes(\"otherEndType\", \"otherEndKey\").",
                "                             addAction(new ActionLink<RelationshipTO>() {",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy",
                "index 6f48a4cabe..bb56ebe04e 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy",
                "@@ -19,4 +19,5 @@",
                " import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule",
                " import org.apache.syncope.core.persistence.api.dao.search.SearchCond",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision",
                " import org.identityconnectors.framework.common.objects.ConnectorObject",
                "@@ -27,3 +28,3 @@ class MyPullCorrelationRule implements PullCorrelationRule {",
                "   @Override",
                "-  SearchCond getSearchCond(ConnectorObject connObj) {",
                "+  SearchCond getSearchCond(ConnectorObject connObj, Provision provision) {",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties",
                "index be212f80b7..b9074b2a55 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties",
                "@@ -30 +30,2 @@ any.cancel=Cancel ${description}",
                " compose.title=rules",
                "+conflictResolutionAction=Conflict Resolution Action",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties",
                "index 9a00b8d55b..f93168d16a 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties",
                "@@ -30 +30,2 @@ any.cancel=Annulla ${description}",
                " compose.title=regole",
                "+conflictResolutionAction=Azione di Risoluzione Conflitti",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties",
                "index be212f80b7..b9074b2a55 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties",
                "@@ -30 +30,2 @@ any.cancel=Cancel ${description}",
                " compose.title=rules",
                "+conflictResolutionAction=Conflict Resolution Action",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties",
                "index afbd430234..d161fdc904 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties",
                "@@ -31 +31,2 @@ any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${description}",
                " compose.title=rules",
                "+conflictResolutionAction=Conflict Resolution Action",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel$CorrelationRulePanel.html b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel$CorrelationRulePanel.html",
                "new file mode 100644",
                "index 0000000000..00924175b9",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel$CorrelationRulePanel.html",
                "@@ -0,0 +1,31 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:panel>",
                "+    <div class=\"form-group\">",
                "+      <span wicket:id=\"anyType\"/>",
                "+    </div>",
                "+    <div class=\"form-group\">",
                "+      <span wicket:id=\"rule\"/>",
                "+    </div>",
                "+    <div class=\"form-group\">",
                "+      <span wicket:id=\"defaultRuleConf\"/>",
                "+    </div>",
                "+  </wicket:panel>",
                "+</html>",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.html b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.html",
                "new file mode 100644",
                "index 0000000000..5ade68c398",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.html",
                "@@ -0,0 +1,25 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:panel>",
                "+    <div class=\"form-group\">",
                "+      <span wicket:id=\"correlationRules\"/>",
                "+    </div>",
                "+  </wicket:panel>",
                "+</html>",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.properties",
                "new file mode 100644",
                "index 0000000000..a661523628",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.properties",
                "@@ -0,0 +1,19 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+rule=Rule",
                "+anyType=Applies to",
                "+correlationRules=Correlation Rules",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_it.properties",
                "new file mode 100644",
                "index 0000000000..18420ca962",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_it.properties",
                "@@ -0,0 +1,20 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+#",
                "+rule=Regola",
                "+anyType=Applicata a",
                "+correlationRules=Regole di Correlazione",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..e8338c279d",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_pt_BR.properties",
                "@@ -0,0 +1,20 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+#",
                "+rule=Rule",
                "+anyType=Applies to",
                "+correlationRules=Correlation Rules",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ru.properties",
                "new file mode 100644",
                "index 0000000000..39701d7dfb",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ru.properties",
                "@@ -0,0 +1,20 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+#",
                "+rule=Rule",
                "+anyType=\\u041e\\u0431\\u044a\\u0435\\u043a\\u0442 \\u043f\\u0440\\u0438\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u044f \\u043f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0438",
                "+correlationRules=\\u041f\\u0440\\u0430\\u0432\\u0438\\u043b\\u0430 \\u043a\\u043e\\u0440\\u0440\\u0435\\u043b\\u044f\\u0446\\u0438\\u0438",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java b/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "new file mode 100644",
                "index 0000000000..625e31dbe4",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                "+",
                "+@Target({ ElementType.FIELD })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+public @interface Schema {",
                "+",
                "+    SchemaType[] type() default { SchemaType.PLAIN };",
                "+",
                "+    AnyTypeKind anyTypeKind() default AnyTypeKind.USER;",
                "+",
                "+    boolean includeFields() default false;",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPullCorrelationRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPullCorrelationRuleConf.java",
                "new file mode 100644",
                "index 0000000000..c545b9d028",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPullCorrelationRuleConf.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.policy;",
                "+",
                "+import javax.xml.bind.annotation.XmlSeeAlso;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+",
                "+@XmlType",
                "+@XmlSeeAlso({ DefaultPullCorrelationRuleConf.class })",
                "+public abstract class AbstractPullCorrelationRuleConf extends AbstractBaseBean implements PullCorrelationRuleConf {",
                "+",
                "+    private static final long serialVersionUID = -4080475005967851092L;",
                "+",
                "+    private String name;",
                "+",
                "+    public AbstractPullCorrelationRuleConf() {",
                "+        this(StringUtils.EMPTY);",
                "+        setName(getClass().getName());",
                "+    }",
                "+",
                "+    public AbstractPullCorrelationRuleConf(final String name) {",
                "+        super();",
                "+        this.name = name;",
                "+    }",
                "+",
                "+    @Override",
                "+    public final String getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public final void setName(final String name) {",
                "+        this.name = name;",
                "+    }",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java",
                "index 2788a4abf8..81b86c2608 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java",
                "@@ -27,3 +27,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                " import javax.xml.bind.annotation.XmlType;",
                "-import org.apache.syncope.common.lib.report.Schema;",
                "+import org.apache.syncope.common.lib.Schema;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java",
                "index b62254608e..71e74880dd 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java",
                "@@ -27,3 +27,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                " import javax.xml.bind.annotation.XmlType;",
                "-import org.apache.syncope.common.lib.report.Schema;",
                "+import org.apache.syncope.common.lib.Schema;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "new file mode 100644",
                "index 0000000000..c781f50557",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "@@ -0,0 +1,47 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.policy;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.xml.bind.annotation.XmlElement;",
                "+import javax.xml.bind.annotation.XmlElementWrapper;",
                "+import javax.xml.bind.annotation.XmlRootElement;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.Schema;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                "+",
                "+@XmlRootElement(name = \"defaultPullCorrelationRuleConf\")",
                "+@XmlType",
                "+public class DefaultPullCorrelationRuleConf extends AbstractPullCorrelationRuleConf implements PullCorrelationRuleConf {",
                "+",
                "+    private static final long serialVersionUID = 429126085793346273L;",
                "+",
                "+    @Schema(type = { SchemaType.PLAIN }, includeFields = true)",
                "+    private final List<String> schemas = new ArrayList<>();",
                "+",
                "+    @XmlElementWrapper(name = \"schemas\")",
                "+    @XmlElement(name = \"schema\")",
                "+    @JsonProperty(\"schemas\")",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullCorrelationRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullCorrelationRuleConf.java",
                "new file mode 100644",
                "index 0000000000..6b840fea84",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullCorrelationRuleConf.java",
                "@@ -0,0 +1,23 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.policy;",
                "+",
                "+public interface PullCorrelationRuleConf extends RuleConf {",
                "+",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java",
                "index 6f3800ac11..69b2c45fb8 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.common.lib.report;",
                "+import org.apache.syncope.common.lib.Schema;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java",
                "index 0a5455d35c..1608563262 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java",
                "@@ -28,2 +28,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                " import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.Schema;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java b/core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java",
                "index 8aa628fe03..3b824c5d1e 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.common.lib.policy.AccountRuleConf;",
                " import org.apache.syncope.common.lib.policy.PasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.report.ReportletConf;",
                "@@ -46,3 +47,4 @@ import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;",
                " import org.apache.syncope.core.provisioning.api.pushpull.PullActions;",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;",
                " import org.apache.syncope.core.provisioning.api.pushpull.PushActions;",
                "@@ -51,3 +53,2 @@ import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;",
                " import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;",
                "-import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;",
                " import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;",
                "@@ -80,2 +81,4 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "+    private Map<Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> correlationRuleClasses;",
                "+",
                "     private Set<Class<?>> auditAppenderClasses;",
                "@@ -108,2 +111,3 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "         passwordRuleClasses = new HashMap<>();",
                "+        correlationRuleClasses = new HashMap<>();",
                "         auditAppenderClasses = new HashSet<>();",
                "@@ -115,2 +119,3 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));",
                "+        scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(ItemTransformer.class));",
                "@@ -122,3 +127,2 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));",
                "-        scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));",
                "@@ -168,2 +172,12 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "+                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbstractClazz) {",
                "+                    PullCorrelationRuleConfClass annotation = clazz.getAnnotation(PullCorrelationRuleConfClass.class);",
                "+                    if (annotation == null) {",
                "+                        LOG.warn(\"Found pull correlation rule {} without declared configuration\", clazz.getName());",
                "+                    } else {",
                "+                        classNames.get(ImplementationType.ACCOUNT_RULE).add(clazz.getName());",
                "+                        correlationRuleClasses.put(annotation.value(), (Class<? extends PullCorrelationRule>) clazz);",
                "+                    }",
                "+                }",
                "+",
                "                 if (ItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz",
                "@@ -202,8 +216,2 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "-                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbstractClazz",
                "-                        && !PlainAttrsPullCorrelationRule.class.isAssignableFrom(clazz)) {",
                "-",
                "-                    classNames.get(ImplementationType.PULL_CORRELATION_RULE).add(bd.getBeanClassName());",
                "-                }",
                "-",
                "                 if (Validator.class.isAssignableFrom(clazz) && !isAbstractClazz) {",
                "@@ -232,2 +240,3 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "         passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);",
                "+        correlationRuleClasses = Collections.unmodifiableMap(correlationRuleClasses);",
                "         auditAppenderClasses = Collections.unmodifiableSet(auditAppenderClasses);",
                "@@ -266,2 +275,9 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {",
                "+    @Override",
                "+    public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(",
                "+            final Class<? extends PullCorrelationRuleConf> correlationRuleConfClass) {",
                "+",
                "+        return correlationRuleClasses.get(correlationRuleConfClass);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java",
                "index 774928d3e9..fce4be4f66 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java",
                "@@ -23,2 +23,3 @@ import org.apache.syncope.common.lib.policy.AccountRuleConf;",
                " import org.apache.syncope.common.lib.policy.PasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.report.ReportletConf;",
                "@@ -27,2 +28,3 @@ import org.apache.syncope.core.persistence.api.dao.AccountRule;",
                " import org.apache.syncope.core.persistence.api.dao.PasswordRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.persistence.api.dao.Reportlet;",
                "@@ -35,7 +37,13 @@ public interface ImplementationLookup extends SyncopeLoader {",
                "-    Class<? extends Reportlet> getReportletClass(Class<? extends ReportletConf> reportletConfClass);",
                "+    Class<? extends Reportlet> getReportletClass(",
                "+            Class<? extends ReportletConf> reportletConfClass);",
                "-    Class<? extends AccountRule> getAccountRuleClass(Class<? extends AccountRuleConf> accountRuleConfClass);",
                "+    Class<? extends AccountRule> getAccountRuleClass(",
                "+            Class<? extends AccountRuleConf> accountRuleConfClass);",
                "-    Class<? extends PasswordRule> getPasswordRuleClass(Class<? extends PasswordRuleConf> passwordRuleConfClass);",
                "+    Class<? extends PasswordRule> getPasswordRuleClass(",
                "+            Class<? extends PasswordRuleConf> passwordRuleConfClass);",
                "+",
                "+    Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(",
                "+            Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java",
                "new file mode 100644",
                "index 0000000000..83a82f71b1",
                "--- /dev/null",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java",
                "@@ -0,0 +1,42 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.dao;",
                "+",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "+import org.identityconnectors.framework.common.objects.ConnectorObject;",
                "+",
                "+/**",
                "+ * Interface for correlation rule to be evaluated during PullJob execution.",
                "+ */",
                "+public interface PullCorrelationRule {",
                "+",
                "+    default void setConf(PullCorrelationRuleConf conf) {",
                "+    }",
                "+",
                "+    /**",
                "+     * Return a search condition.",
                "+     *",
                "+     * @param connObj connector object.",
                "+     * @param provision resource provision",
                "+     * @return search condition.",
                "+     */",
                "+    SearchCond getSearchCond(ConnectorObject connObj, Provision provision);",
                "+}",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRuleConfClass.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRuleConfClass.java",
                "new file mode 100644",
                "index 0000000000..b96a699756",
                "--- /dev/null",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRuleConfClass.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.dao;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                "+",
                "+@Target({ ElementType.TYPE })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+public @interface PullCorrelationRuleConfClass {",
                "+",
                "+    Class<? extends PullCorrelationRuleConf> value();",
                "+",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java",
                "index 6faf055d09..636b78874f 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java",
                "@@ -45,3 +45,2 @@ public class DefaultAccountRule implements AccountRule {",
                "         }",
                "-",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java",
                "new file mode 100644",
                "index 0000000000..02cc56888b",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java",
                "@@ -0,0 +1,113 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.Map;",
                "+import java.util.function.Function;",
                "+import java.util.stream.Collectors;",
                "+import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Item;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "+import org.identityconnectors.framework.common.objects.Attribute;",
                "+import org.identityconnectors.framework.common.objects.ConnectorObject;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;",
                "+",
                "+@PullCorrelationRuleConfClass(DefaultPullCorrelationRuleConf.class)",
                "+public class DefaultPullCorrelationRule implements PullCorrelationRule {",
                "+",
                "+    private DefaultPullCorrelationRuleConf conf;",
                "+",
                "+    @Override",
                "+    public void setConf(final PullCorrelationRuleConf conf) {",
                "+        if (conf instanceof DefaultPullCorrelationRuleConf) {",
                "+            this.conf = DefaultPullCorrelationRuleConf.class.cast(conf);",
                "+        } else {",
                "+            throw new IllegalArgumentException(",
                "+                    DefaultPullCorrelationRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond getSearchCond(final ConnectorObject connObj, final Provision provision) {",
                "+        Map<String, Item> mappingItems = provision.getMapping().getItems().stream().",
                "+                collect(Collectors.toMap(Item::getIntAttrName, Function.identity()));",
                "+",
                "+        // search for anys by attribute(s) specified in the policy",
                "+        SearchCond searchCond = null;",
                "+",
                "+        for (String schema : conf.getSchemas()) {",
                "+            Item mappingItem = mappingItems.get(schema);",
                "+            Attribute attr = mappingItem == null",
                "+                    ? null",
                "+                    : connObj.getAttributeByName(mappingItem.getExtAttrName());",
                "+            if (attr == null) {",
                "+                throw new IllegalArgumentException(",
                "+                        \"Connector object does not contains the attributes to perform the search: \" + schema);",
                "+            }",
                "+",
                "+            AttributeCond.Type type;",
                "+            String expression = null;",
                "+",
                "+            if (attr.getValue() == null || attr.getValue().isEmpty()",
                "+                    || (attr.getValue().size() == 1 && attr.getValue().get(0) == null)) {",
                "+",
                "+                type = AttributeCond.Type.ISNULL;",
                "+            } else {",
                "+                type = AttributeCond.Type.EQ;",
                "+                expression = attr.getValue().size() > 1",
                "+                        ? attr.getValue().toString()",
                "+                        : attr.getValue().get(0).toString();",
                "+            }",
                "+",
                "+            SearchCond nodeCond;",
                "+            // users: just key or username can be selected",
                "+            // groups: just key or name can be selected",
                "+            // any objects: just key or name can be selected",
                "+            if (\"key\".equalsIgnoreCase(schema)",
                "+                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {",
                "+",
                "+                AnyCond cond = new AnyCond();",
                "+                cond.setSchema(schema);",
                "+                cond.setType(type);",
                "+                cond.setExpression(expression);",
                "+",
                "+                nodeCond = SearchCond.getLeafCond(cond);",
                "+            } else {",
                "+                AttributeCond cond = new AttributeCond();",
                "+                cond.setSchema(schema);",
                "+                cond.setType(type);",
                "+                cond.setExpression(expression);",
                "+",
                "+                nodeCond = SearchCond.getLeafCond(cond);",
                "+            }",
                "+",
                "+            searchCond = searchCond == null",
                "+                    ? nodeCond",
                "+                    : SearchCond.getAndCond(searchCond, nodeCond);",
                "+        }",
                "+",
                "+        return searchCond;",
                "+    }",
                "+",
                "+}",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "index 65aa6f6947..73d653ef84 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "@@ -41,3 +41,3 @@ import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;",
                " import org.apache.syncope.core.provisioning.api.pushpull.PullActions;",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.provisioning.api.pushpull.PushActions;",
                "@@ -153,3 +153,4 @@ public class ImplementationDataBinderImpl implements ImplementationDataBinder {",
                "             } else if (implementation.getType() == ImplementationType.ACCOUNT_RULE",
                "-                    || implementation.getType() == ImplementationType.PASSWORD_RULE) {",
                "+                    || implementation.getType() == ImplementationType.PASSWORD_RULE",
                "+                    || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE) {",
                "@@ -157,3 +158,4 @@ public class ImplementationDataBinderImpl implements ImplementationDataBinder {",
                "                 if (rule == null) {",
                "-                    sce.getElements().add(\"Could not deserialize as neither Account nor Password RuleConf\");",
                "+                    sce.getElements().",
                "+                            add(\"Could not deserialize as neither Account, Password nor PullCorrelation RuleConf\");",
                "                     throw sce;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "index fe826f41ad..e39f3291ac 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;",
                " import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                " import org.apache.syncope.core.persistence.api.dao.RealmDAO;",
                "@@ -144,3 +145,3 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "                         correlationRule = entityFactory.newEntity(CorrelationRule.class);",
                "-                        correlationRule.setAnyType(anyTypeDAO.find(entry.getKey()));",
                "+                        correlationRule.setAnyType(anyType);",
                "                         correlationRule.setPullPolicy(pullPolicy);",
                "@@ -151,7 +152,5 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "                     if (implementation == null) {",
                "-                        LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",",
                "-                                entry.getValue());",
                "-                    } else {",
                "-                        correlationRule.setImplementation(implementation);",
                "+                        throw new NotFoundException(\"Implementation \" + entry.getValue());",
                "                     }",
                "+                    correlationRule.setImplementation(implementation);",
                "                 }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "index 32e2118401..094e88b183 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "@@ -26,3 +26,2 @@ import java.util.stream.Collectors;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                " import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;",
                "@@ -68,3 +67,3 @@ import org.springframework.stereotype.Component;",
                " import org.springframework.transaction.annotation.Transactional;",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "@@ -269,5 +268,8 @@ public class PullUtils {",
                "     private List<String> findByCorrelationRule(",
                "-            final ConnectorObject connObj, final PullCorrelationRule rule, final AnyTypeKind type) {",
                "+            final ConnectorObject connObj,",
                "+            final Provision provision,",
                "+            final PullCorrelationRule rule,",
                "+            final AnyTypeKind type) {",
                "-        return searchDAO.search(rule.getSearchCond(connObj), type).stream().",
                "+        return searchDAO.search(rule.getSearchCond(connObj, provision), type).stream().",
                "                 map(Entity::getKey).collect(Collectors.toList());",
                "@@ -294,13 +296,8 @@ public class PullUtils {",
                "-        PullCorrelationRule rule = null;",
                "+        Optional<PullCorrelationRule> rule = Optional.empty();",
                "         if (correlationRule.isPresent()) {",
                "-            if (correlationRule.get().getImplementation().getBody().charAt(0) == '[') {",
                "-                rule = new PlainAttrsPullCorrelationRule(POJOHelper.deserialize(",
                "-                        correlationRule.get().getImplementation().getBody(), String[].class), provision);",
                "-            } else {",
                "-                try {",
                "-                    rule = ImplementationManager.build(correlationRule.get().getImplementation());",
                "-                } catch (Exception e) {",
                "-                    LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);",
                "-                }",
                "+            try {",
                "+                rule = ImplementationManager.buildPullCorrelationRule(correlationRule.get().getImplementation());",
                "+            } catch (Exception e) {",
                "+                LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);",
                "             }",
                "@@ -309,5 +306,5 @@ public class PullUtils {",
                "         try {",
                "-            return rule == null",
                "-                    ? findByConnObjectKeyItem(uid, provision, anyUtils)",
                "-                    : findByCorrelationRule(connObj, rule, anyUtils.getAnyTypeKind());",
                "+            return rule.isPresent()",
                "+                    ? findByCorrelationRule(connObj, provision, rule.get(), anyUtils.getAnyTypeKind())",
                "+                    : findByConnObjectKeyItem(uid, provision, anyUtils);",
                "         } catch (RuntimeException e) {",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java b/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "index 51c9bf652d..dfa4eadd14 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "@@ -27,2 +27,3 @@ import org.apache.syncope.common.lib.policy.AccountRuleConf;",
                " import org.apache.syncope.common.lib.policy.PasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.report.ReportletConf;",
                "@@ -33,2 +34,3 @@ import org.apache.syncope.core.persistence.api.dao.Reportlet;",
                " import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "@@ -95,3 +97,3 @@ public final class ImplementationManager {",
                "                 if (ruleClass == null) {",
                "-                    LOG.warn(\"Could not find matching password rule for {}\", impl.getClass());",
                "+                    LOG.warn(\"Could not find matching account rule for {}\", impl.getClass());",
                "                 } else {",
                "@@ -148,2 +150,37 @@ public final class ImplementationManager {",
                "+    public static Optional<PullCorrelationRule> buildPullCorrelationRule(final Implementation impl)",
                "+            throws InstantiationException, IllegalAccessException {",
                "+",
                "+        switch (impl.getEngine()) {",
                "+            case GROOVY:",
                "+                return Optional.of(ImplementationManager.<PullCorrelationRule>buildGroovy(impl));",
                "+",
                "+            case JAVA:",
                "+            default:",
                "+                PullCorrelationRule rule = null;",
                "+",
                "+                PullCorrelationRuleConf ruleConf =",
                "+                        POJOHelper.deserialize(impl.getBody(), PullCorrelationRuleConf.class);",
                "+                Class<? extends PullCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().",
                "+                        getBean(ImplementationLookup.class).getPullCorrelationRuleClass(ruleConf.getClass());",
                "+                if (ruleClass == null) {",
                "+                    LOG.warn(\"Could not find matching pull correlation rule for {}\", impl.getClass());",
                "+                } else {",
                "+                    // fetch (or create) rule",
                "+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {",
                "+                        rule = (PullCorrelationRule) ApplicationContextProvider.getBeanFactory().",
                "+                                getSingleton(ruleClass.getName());",
                "+                    } else {",
                "+                        rule = (PullCorrelationRule) ApplicationContextProvider.getBeanFactory().",
                "+                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);",
                "+                        ApplicationContextProvider.getBeanFactory().",
                "+                                registerSingleton(ruleClass.getName(), rule);",
                "+                    }",
                "+                    rule.setConf(ruleConf);",
                "+                }",
                "+",
                "+                return Optional.ofNullable(rule);",
                "+        }",
                "+    }",
                "+",
                "     public static <T> T build(final Implementation impl)",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java",
                "new file mode 100644",
                "index 0000000000..293003839b",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.fit.core.reference;",
                "+",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "+import org.identityconnectors.framework.common.objects.ConnectorObject;",
                "+",
                "+@PullCorrelationRuleConfClass(DummyPullCorrelationRuleConf.class)",
                "+public class DummyPullCorrelationRule implements PullCorrelationRule {",
                "+",
                "+    @Override",
                "+    public SearchCond getSearchCond(final ConnectorObject connObj, final Provision provision) {",
                "+        return new SearchCond();",
                "+    }",
                "+",
                "+}",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRuleConf.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRuleConf.java",
                "new file mode 100644",
                "index 0000000000..e54482344d",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRuleConf.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.fit.core.reference;",
                "+",
                "+import org.apache.syncope.common.lib.policy.AbstractPullCorrelationRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                "+",
                "+public class DummyPullCorrelationRuleConf",
                "+        extends AbstractPullCorrelationRuleConf implements PullCorrelationRuleConf {",
                "+",
                "+    private static final long serialVersionUID = -2984203196323732531L;",
                "+",
                "+}",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "index d4467e8f8f..d285ba6b82 100644",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "@@ -30,3 +30,5 @@ import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;",
                " import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.policy.PasswordRuleConf;",
                "+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;",
                " import org.apache.syncope.common.lib.report.AuditReportletConf;",
                "@@ -53,2 +55,3 @@ import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;",
                " import org.apache.syncope.core.persistence.api.dao.PasswordRule;",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.persistence.api.dao.Reportlet;",
                "@@ -61,2 +64,3 @@ import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;",
                " import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;",
                "+import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;",
                " import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;",
                "@@ -118,2 +122,14 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "+    private static final Map<",
                "+            Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> CORRELATION_RULE_CLASSES =",
                "+            new HashMap<Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>>() {",
                "+",
                "+        private static final long serialVersionUID = 3109256773218160485L;",
                "+",
                "+        {",
                "+            put(DummyPullCorrelationRuleConf.class, DummyPullCorrelationRule.class);",
                "+            put(DefaultPullCorrelationRuleConf.class, DefaultPullCorrelationRule.class);",
                "+        }",
                "+    };",
                "+",
                "     private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(",
                "@@ -178,2 +194,3 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "             classNames = new HashSet<>();",
                "+            classNames.add(DummyPullCorrelationRule.class.getName());",
                "             put(ImplementationType.PULL_CORRELATION_RULE, classNames);",
                "@@ -279,2 +296,9 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "+    @Override",
                "+    public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(",
                "+            final Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass) {",
                "+",
                "+        return CORRELATION_RULE_CLASSES.get(pullCorrelationRuleConfClass);",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullCorrelationRule.groovy",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel$CorrelationRulePanel.html",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.html",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ru.properties",
                "common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPullCorrelationRuleConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullCorrelationRuleConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRuleConfClass.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRuleConf.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: report",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16a55aa1548a215580b9b298edee5197772361b1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508407724,
            "hunks": 1,
            "message": "Removing some duplicate code + another typo",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "index 4bf11888f0..cfcdfbf7c0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "@@ -117,3 +117,3 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "     protected void populatePageClasses(final Properties props) {",
                "-        Enumeration<String> propNames = (Enumeration<String>) props.<String>propertyNames();",
                "+        Enumeration<String> propNames = (Enumeration<String>) props.propertyNames();",
                "         while (propNames.hasMoreElements()) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3f47e9bdee9e8ffeb606b2717e34ecbfe2801fb4"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fe797ec2abd16016db90b52c16d3615251199d9b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507537786,
            "hunks": 3,
            "message": "Updating Eclipse files for release",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "index 6c39cc3a6e..19819cd164 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: Apache Syncope Eclipse Plugin",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.plugin;singleton:=true",
                "-Bundle-Version: 2.0.6.qualifier",
                "+Bundle-Version: 2.0.6",
                " Bundle-Activator: org.apache.syncope.ide.eclipse.plugin.Activator",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "index c71210c56f..18c3fb100c 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: org.apache.syncope.ide.eclipse.tests",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.tests;singleton:=true",
                "-Bundle-Version: 2.0.6.qualifier",
                "+Bundle-Version: 2.0.6",
                " Bundle-ActivationPolicy: lazy",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "index a5a628ee8f..544c4df40c 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "@@ -20,3 +20,3 @@ under the License.",
                " <site>",
                "-   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.6.qualifier\">",
                "+   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.6\">",
                "       <category name=\"apachesyncope\"/>"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "05312bbe01bc0dbf0b0aabae4c38b0e067b0363b"
                ],
                [
                    "no-tag",
                    "dac8594b4bd3e140271044c00bdeb65dd5f31413"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.6",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release, file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b47d4328687d173dfd220f6e6f107f042438d8cd",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507611247,
            "hunks": 100,
            "message": "[SYNCOPE-956] Protecting delete when Implementation is in use + refining Pull correlation rules",
            "diff": [
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java",
                "index 11ec813f2a..4bdba0d702 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java",
                "@@ -105,8 +105,6 @@ public class PolicyResultManager extends CommonsResultManager {",
                "         System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());",
                "-        if (policyTO.getSpecification() != null) {",
                "-            System.out.println(\"    conflict resolution action: \"",
                "-                    + policyTO.getSpecification().getConflictResolutionAction().name());",
                "-            System.out.println(\"    correlation rule : \"",
                "-                    + policyTO.getSpecification().getCorrelationRules().toString());",
                "-        }",
                "+        System.out.println(\"    conflict resolution action: \"",
                "+                + policyTO.getConflictResolutionAction().name());",
                "+        System.out.println(\"    correlation rules : \"",
                "+                + policyTO.getCorrelationRules().toString());",
                "         System.out.println(\"\");",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "index c6663130bc..c964c29089 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.client.console.panels;",
                "-import static org.apache.syncope.client.console.panels.DirectoryPanel.LOG;",
                "-",
                " import java.util.ArrayList;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "index 313d869f51..4280996c90 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "@@ -83,6 +83,6 @@ public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "                 \"conflictResolutionAction\",",
                "-                new PropertyModel<>(policyTO.getSpecification(), \"conflictResolutionAction\")).",
                "+                new PropertyModel<>(policyTO, \"conflictResolutionAction\")).",
                "                 setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));",
                "-        model = new PropertyModel<List<CorrelationRule>>(policyTO.getSpecification(), \"correlationRules\") {",
                "+        model = new PropertyModel<List<CorrelationRule>>(policyTO, \"correlationRules\") {",
                "@@ -90,4 +90,4 @@ public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "-            private List<CorrelationRule> rules = policyTO.getSpecification().getCorrelationRules().keySet().stream().",
                "-                    map(rule -> new CorrelationRule(rule, policyTO.getSpecification().getCorrelationRules().get(rule))).",
                "+            private List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().",
                "+                    map(rule -> new CorrelationRule(rule, policyTO.getCorrelationRules().get(rule))).",
                "                     collect(Collectors.toList());",
                "@@ -101,5 +101,5 @@ public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "             public void setObject(final List<CorrelationRule> object) {",
                "-                policyTO.getSpecification().getCorrelationRules().clear();",
                "+                policyTO.getCorrelationRules().clear();",
                "                 rules.forEach(rule -> {",
                "-                    policyTO.getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "+                    policyTO.getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "                 });",
                "@@ -127,5 +127,5 @@ public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {",
                "         try {",
                "-            getItem().getSpecification().getCorrelationRules().clear();",
                "+            getItem().getCorrelationRules().clear();",
                "             model.getObject().forEach(rule -> {",
                "-                getItem().getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "+                getItem().getCorrelationRules().put(rule.getAny(), rule.getRule());",
                "             });",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "index 4d55249b14..5a29cae5dd 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "@@ -22,3 +22,2 @@ import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;",
                " import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                " import org.apache.syncope.common.lib.policy.PullPolicyTO;",
                "@@ -44,3 +43,2 @@ public class PullPolicyDirectoryPanel extends PolicyDirectoryPanel<PullPolicyTO>",
                "         final PullPolicyTO defaultItem = new PullPolicyTO();",
                "-        defaultItem.setSpecification(new PullPolicySpec());",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "deleted file mode 100644",
                "index a6b533803b..0000000000",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "+++ /dev/null",
                "@@ -1,64 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.common.lib.policy;",
                "-",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                "-import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-import javax.xml.bind.annotation.XmlType;",
                "-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
                "-import org.apache.syncope.common.lib.AbstractBaseBean;",
                "-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;",
                "-import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                "-",
                "-@XmlType",
                "-public class PullPolicySpec extends AbstractBaseBean {",
                "-",
                "-    private static final long serialVersionUID = -3144027171719498127L;",
                "-",
                "-    private ConflictResolutionAction conflictResolutionAction;",
                "-",
                "-    /**",
                "-     * Associates anyTypeKey to either:",
                "-     * <ol>",
                "-     * <li>Java class name, implementing {@code PullCorrelationRule}</li>",
                "-     * <li>JSON array containing plain schema names - this will be used to feed",
                "-     * {@code PlainAttrsPullCorrelationRule}</li>",
                "-     * </ol>",
                "-     */",
                "-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "-    @JsonIgnore",
                "-    private final Map<String, String> correlationRules = new HashMap<>();",
                "-",
                "-    public ConflictResolutionAction getConflictResolutionAction() {",
                "-        return conflictResolutionAction == null",
                "-                ? ConflictResolutionAction.IGNORE",
                "-                : conflictResolutionAction;",
                "-    }",
                "-",
                "-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {",
                "-        this.conflictResolutionAction = conflictResolutionAction;",
                "-    }",
                "-",
                "-    @JsonProperty",
                "-    public Map<String, String> getCorrelationRules() {",
                "-        return correlationRules;",
                "-    }",
                "-}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java",
                "index 2618e43025..1ab6000dd2 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java",
                "@@ -20,4 +20,11 @@ package org.apache.syncope.common.lib.policy;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                " import javax.xml.bind.annotation.XmlRootElement;",
                " import javax.xml.bind.annotation.XmlType;",
                "+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
                "+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;",
                "+import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                "@@ -29,12 +36,22 @@ public class PullPolicyTO extends AbstractPolicyTO {",
                "-    private PullPolicySpec specification;",
                "+    private ConflictResolutionAction conflictResolutionAction;",
                "-    public PullPolicySpec getSpecification() {",
                "-        return specification;",
                "+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "+    @JsonIgnore",
                "+    private final Map<String, String> correlationRules = new HashMap<>();",
                "+",
                "+    public ConflictResolutionAction getConflictResolutionAction() {",
                "+        return conflictResolutionAction == null",
                "+                ? ConflictResolutionAction.IGNORE",
                "+                : conflictResolutionAction;",
                "     }",
                "-    public void setSpecification(final PullPolicySpec specification) {",
                "-        this.specification = specification;",
                "+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {",
                "+        this.conflictResolutionAction = conflictResolutionAction;",
                "     }",
                "+    @JsonProperty",
                "+    public Map<String, String> getCorrelationRules() {",
                "+        return correlationRules;",
                "+    }",
                " }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java b/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "index 92238d8955..c75ab5b54a 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "@@ -74,3 +74,3 @@ public enum ClientExceptionType {",
                "     GroupOwnership(Response.Status.BAD_REQUEST),",
                "-    InUseByNotifications(Response.Status.BAD_REQUEST),",
                "+    InUse(Response.Status.BAD_REQUEST),",
                "     Scheduling(Response.Status.BAD_REQUEST),",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "index 077b6df3ce..d4915ceacc 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.logic;",
                "-import static org.apache.syncope.core.logic.AbstractLogic.LOG;",
                "-",
                " import java.lang.reflect.Method;",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java",
                "index fadaa15140..65e629063a 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java",
                "@@ -31,4 +31,11 @@ import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.core.persistence.api.dao.DuplicateException;",
                "+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;",
                " import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;",
                " import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                "+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.RealmDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.ReportDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.TaskDAO;",
                " import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "@@ -48,2 +55,23 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati",
                "+    @Autowired",
                "+    private ReportDAO reportDAO;",
                "+",
                "+    @Autowired",
                "+    private PolicyDAO policyDAO;",
                "+",
                "+    @Autowired",
                "+    private ExternalResourceDAO resourceDAO;",
                "+",
                "+    @Autowired",
                "+    private TaskDAO taskDAO;",
                "+",
                "+    @Autowired",
                "+    private RealmDAO realmDAO;",
                "+",
                "+    @Autowired",
                "+    private PlainSchemaDAO plainSchemaDAO;",
                "+",
                "+    @Autowired",
                "+    private NotificationDAO notificationDAO;",
                "+",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")",
                "@@ -106,2 +134,65 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati",
                "+        boolean inUse = false;",
                "+        switch (implementation.getType()) {",
                "+            case REPORTLET:",
                "+                inUse = !reportDAO.findByReportlet(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case ACCOUNT_RULE:",
                "+                inUse = !policyDAO.findByAccountRule(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case PASSWORD_RULE:",
                "+                inUse = !policyDAO.findByPasswordRule(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case ITEM_TRANSFORMER:",
                "+                inUse = !resourceDAO.findByTransformer(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case TASKJOB_DELEGATE:",
                "+                inUse = !taskDAO.findByDelegate(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case RECON_FILTER_BUILDER:",
                "+                inUse = !taskDAO.findByReconFilterBuilder(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case LOGIC_ACTIONS:",
                "+                inUse = !realmDAO.findByLogicActions(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case PROPAGATION_ACTIONS:",
                "+                inUse = !resourceDAO.findByPropagationActions(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case PULL_ACTIONS:",
                "+                inUse = !taskDAO.findByPullActions(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case PUSH_ACTIONS:",
                "+                inUse = !taskDAO.findByPushActions(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case PULL_CORRELATION_RULE:",
                "+                inUse = !policyDAO.findByCorrelationRule(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case VALIDATOR:",
                "+                inUse = !plainSchemaDAO.findByValidator(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            case RECIPIENTS_PROVIDER:",
                "+                inUse = !notificationDAO.findByRecipientsProvider(implementation).isEmpty();",
                "+                break;",
                "+",
                "+            default:",
                "+        }",
                "+",
                "+        if (inUse) {",
                "+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);",
                "+            sce.getElements().add(\"This implementation is in use\");",
                "+            throw sce;",
                "+        }",
                "+",
                "         implementationDAO.delete(key);",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java",
                "index ff742c5fa0..3f2b7c834e 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java",
                "@@ -140,3 +140,3 @@ public class MailTemplateLogic extends AbstractTransactionalLogic<MailTemplateTO",
                "         if (!notifications.isEmpty()) {",
                "-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);",
                "+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);",
                "             sce.getElements().addAll(notifications.stream().map(Entity::getKey).collect(Collectors.toList()));",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java",
                "index 4d150d9ed5..d59831cc31 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java",
                "@@ -152,3 +152,3 @@ public class ReportTemplateLogic extends AbstractTransactionalLogic<ReportTempla",
                "         if (!reports.isEmpty()) {",
                "-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);",
                "+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);",
                "             sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java",
                "index b48fd79c6c..ea1ceb887a 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java",
                "@@ -22,4 +22,6 @@ import java.util.List;",
                " import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Policy;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;",
                " import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "@@ -36,2 +38,6 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {",
                "+    List<MappingItem> findByTransformer(Implementation transformer);",
                "+",
                "+    List<ExternalResource> findByPropagationActions(Implementation propagationActions);",
                "+",
                "     List<ExternalResource> findByPolicy(Policy policy);",
                "@@ -45,2 +51,3 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {",
                "     void delete(String key);",
                "+",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java",
                "index 569e6db196..48f410dbae 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.persistence.api.dao;",
                " import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.MailTemplate;",
                "@@ -30,2 +31,4 @@ public interface NotificationDAO extends DAO<Notification> {",
                "+    List<Notification> findByRecipientsProvider(Implementation recipientsProvider);",
                "+",
                "     List<Notification> findAll();",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java",
                "index c832cdccd8..7f066acab4 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.persistence.api.dao;",
                " import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "@@ -28,2 +29,3 @@ public interface PlainSchemaDAO extends SchemaDAO<PlainSchema> {",
                "+    List<PlainSchema> findByValidator(Implementation validator);",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java",
                "index 245758b5b6..456850c7b1 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java",
                "@@ -21,5 +21,8 @@ package org.apache.syncope.core.persistence.api.dao;",
                " import java.util.List;",
                "-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                " import org.apache.syncope.core.persistence.api.entity.Policy;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;",
                "@@ -31,2 +34,8 @@ public interface PolicyDAO extends DAO<Policy> {",
                "+    List<AccountPolicy> findByAccountRule(Implementation accountRule);",
                "+",
                "+    List<PasswordPolicy> findByPasswordRule(Implementation passwordRule);",
                "+",
                "+    List<PullPolicy> findByCorrelationRule(Implementation correlationRule);",
                "+",
                "     List<AccountPolicy> findByResource(ExternalResource resource);",
                "@@ -38,2 +47,3 @@ public interface PolicyDAO extends DAO<Policy> {",
                "     <T extends Policy> void delete(T policy);",
                "+",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java",
                "index de236014cc..c838338720 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java",
                "@@ -22,2 +22,3 @@ import java.util.List;",
                " import java.util.regex.Pattern;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Policy;",
                "@@ -42,2 +43,4 @@ public interface RealmDAO extends DAO<Realm> {",
                "+    List<Realm> findByLogicActions(Implementation logicActions);",
                "+",
                "     List<Realm> findAncestors(Realm realm);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java",
                "index 89f07ff641..50d2c5ea4c 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.persistence.api.dao;",
                " import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Report;",
                "@@ -28,2 +29,4 @@ public interface ReportDAO extends DAO<Report> {",
                "+    List<Report> findByReportlet(Implementation reportlet);",
                "+",
                "     List<Report> findByTemplate(ReportTemplate template);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java",
                "index 603cfabdae..f61915457b 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java",
                "@@ -24,4 +24,8 @@ import org.apache.syncope.common.lib.types.TaskType;",
                " import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Notification;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "+import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "+import org.apache.syncope.core.persistence.api.entity.task.PushTask;",
                "+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.Task;",
                "@@ -34,2 +38,10 @@ public interface TaskDAO extends DAO<Task> {",
                "+    List<SchedTask> findByDelegate(Implementation delegate);",
                "+",
                "+    List<PullTask> findByReconFilterBuilder(Implementation reconFilterBuilder);",
                "+",
                "+    List<PullTask> findByPullActions(Implementation pullActions);",
                "+",
                "+    List<PushTask> findByPushActions(Implementation pushActions);",
                "+",
                "     <T extends Task> List<T> findToExec(TaskType type);",
                "@@ -62,2 +74,3 @@ public interface TaskDAO extends DAO<Task> {",
                "     void deleteAll(ExternalResource resource, TaskType type);",
                "+",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java",
                "new file mode 100644",
                "index 0000000000..69ad1de8b0",
                "--- /dev/null",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.entity.policy;",
                "+",
                "+import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+",
                "+public interface CorrelationRule extends Entity {",
                "+",
                "+    PullPolicy getPullPolicy();",
                "+",
                "+    void setPullPolicy(PullPolicy pullPolicy);",
                "+",
                "+    AnyType getAnyType();",
                "+",
                "+    void setAnyType(AnyType anyType);",
                "+",
                "+    Implementation getImplementation();",
                "+",
                "+    void setImplementation(Implementation implementation);",
                "+}",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java",
                "index da82cb714e..6612fe51bc 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java",
                "@@ -20,3 +20,6 @@ package org.apache.syncope.core.persistence.api.entity.policy;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyType;",
                " import org.apache.syncope.core.persistence.api.entity.Policy;",
                "@@ -25,6 +28,11 @@ public interface PullPolicy extends Policy {",
                "-    PullPolicySpec getSpecification();",
                "+    ConflictResolutionAction getConflictResolutionAction();",
                "-    void setSpecification(PullPolicySpec spec);",
                "+    void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction);",
                "+    boolean add(CorrelationRule rule);",
                "+",
                "+    Optional<? extends CorrelationRule> getCorrelationRule(AnyType anyType);",
                "+",
                "+    List<? extends CorrelationRule> getCorrelationRules();",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "index 8e6485fe40..530b539cdc 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "@@ -40,2 +40,3 @@ import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;",
                " import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;",
                "@@ -197,2 +198,22 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem",
                "+    @Override",
                "+    public List<MappingItem> findByTransformer(final Implementation transformer) {",
                "+        TypedQuery<MappingItem> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAMappingItem.class.getSimpleName()",
                "+                + \" e WHERE :transformer MEMBER OF e.transformers\", MappingItem.class);",
                "+        query.setParameter(\"transformer\", transformer);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<ExternalResource> findByPropagationActions(final Implementation propagationActions) {",
                "+        TypedQuery<ExternalResource> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAExternalResource.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :propagationActions MEMBER OF e.propagationActions\", ExternalResource.class);",
                "+        query.setParameter(\"propagationActions\", propagationActions);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java",
                "index ca5f0c4430..1005ac7d82 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java",
                "@@ -28,2 +28,3 @@ import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                " import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.MailTemplate;",
                "@@ -57,2 +58,12 @@ public class JPANotificationDAO extends AbstractDAO<Notification> implements Not",
                "+    @Override",
                "+    public List<Notification> findByRecipientsProvider(final Implementation recipientsProvider) {",
                "+        TypedQuery<Notification> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPANotification.class.getSimpleName()",
                "+                + \" e WHERE e.recipientsProvider=:recipientsProvider\", Notification.class);",
                "+        query.setParameter(\"recipientsProvider\", recipientsProvider);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     @Transactional(readOnly = true)",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "index dfc3840a25..eef9ff1f1c 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "@@ -30,2 +30,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "@@ -75,2 +76,12 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "+    @Override",
                "+    public List<PlainSchema> findByValidator(final Implementation validator) {",
                "+        TypedQuery<PlainSchema> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName()",
                "+                + \" e WHERE e.validator=:validator\", PlainSchema.class);",
                "+        query.setParameter(\"validator\", validator);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java",
                "index 4c76f449b3..38d260fdbd 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java",
                "@@ -24,2 +24,3 @@ import org.apache.syncope.core.persistence.api.dao.PolicyDAO;",
                " import org.apache.syncope.core.persistence.api.dao.RealmDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;",
                "@@ -33,2 +34,3 @@ import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;",
                " import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;",
                "+import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;",
                " import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;",
                "@@ -71,2 +73,32 @@ public class JPAPolicyDAO extends AbstractDAO<Policy> implements PolicyDAO {",
                "+    @Override",
                "+    public List<AccountPolicy> findByAccountRule(final Implementation accountRule) {",
                "+        TypedQuery<AccountPolicy> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAAccountPolicy.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :accountRule MEMBER OF e.rules\", AccountPolicy.class);",
                "+        query.setParameter(\"accountRule\", accountRule);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PasswordPolicy> findByPasswordRule(final Implementation passwordRule) {",
                "+        TypedQuery<PasswordPolicy> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAPasswordPolicy.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :passwordRule MEMBER OF e.rules\", PasswordPolicy.class);",
                "+        query.setParameter(\"passwordRule\", passwordRule);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PullPolicy> findByCorrelationRule(final Implementation correlationRule) {",
                "+        TypedQuery<PullPolicy> query = entityManager().createQuery(",
                "+                \"SELECT DISTINCT e.pullPolicy FROM \" + JPACorrelationRule.class.getSimpleName() + \" e \"",
                "+                + \"WHERE e.implementation=:correlationRule\", PullPolicy.class);",
                "+        query.setParameter(\"correlationRule\", correlationRule);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java",
                "index a03451f715..3594b70dab 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java",
                "@@ -31,2 +31,3 @@ import org.apache.syncope.core.persistence.api.dao.RealmDAO;",
                " import org.apache.syncope.core.persistence.api.dao.RoleDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;",
                "@@ -153,2 +154,12 @@ public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {",
                "+    @Override",
                "+    public List<Realm> findByLogicActions(final Implementation logicActions) {",
                "+        TypedQuery<Realm> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :logicActions MEMBER OF e.actions\", Realm.class);",
                "+        query.setParameter(\"logicActions\", logicActions);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     private void findAncestors(final List<Realm> result, final Realm realm) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java",
                "index 959eac2bae..a281e2b26f 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java",
                "@@ -23,2 +23,3 @@ import javax.persistence.TypedQuery;",
                " import org.apache.syncope.core.persistence.api.dao.ReportDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Report;",
                "@@ -38,2 +39,11 @@ public class JPAReportDAO extends AbstractDAO<Report> implements ReportDAO {",
                "+    @Override",
                "+    public List<Report> findByReportlet(final Implementation reportlet) {",
                "+        TypedQuery<Report> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :reportlet MEMBER OF e.reportlets\", Report.class);",
                "+        query.setParameter(\"reportlet\", reportlet);",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     @Transactional(readOnly = true)",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java",
                "index 55ca24144e..792a661982 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java",
                "@@ -23,2 +23,3 @@ import java.util.List;",
                " import javax.persistence.Query;",
                "+import javax.persistence.TypedQuery;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -29,4 +30,8 @@ import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                " import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.Notification;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "+import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "+import org.apache.syncope.core.persistence.api.entity.task.PushTask;",
                "+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;",
                " import org.apache.syncope.core.persistence.api.entity.task.Task;",
                "@@ -83,2 +88,42 @@ public class JPATaskDAO extends AbstractDAO<Task> implements TaskDAO {",
                "+    @Override",
                "+    public List<SchedTask> findByDelegate(final Implementation delegate) {",
                "+        TypedQuery<SchedTask> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPASchedTask.class.getSimpleName()",
                "+                + \" e WHERE e.jobDelegate=:delegate\", SchedTask.class);",
                "+        query.setParameter(\"delegate\", delegate);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PullTask> findByReconFilterBuilder(final Implementation reconFilterBuilder) {",
                "+        TypedQuery<PullTask> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAPullTask.class.getSimpleName()",
                "+                + \" e WHERE e.reconFilterBuilder=:reconFilterBuilder\", PullTask.class);",
                "+        query.setParameter(\"reconFilterBuilder\", reconFilterBuilder);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PullTask> findByPullActions(final Implementation pullActions) {",
                "+        TypedQuery<PullTask> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAPullTask.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :pullActions MEMBER OF e.actions\", PullTask.class);",
                "+        query.setParameter(\"pullActions\", pullActions);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PushTask> findByPushActions(final Implementation pushActions) {",
                "+        TypedQuery<PushTask> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + JPAPushTask.class.getSimpleName() + \" e \"",
                "+                + \"WHERE :pushActions MEMBER OF e.actions\", PushTask.class);",
                "+        query.setParameter(\"pushActions\", pushActions);",
                "+",
                "+        return query.getResultList();",
                "+    }",
                "+",
                "     private <T extends Task> StringBuilder buildFindAllQuery(final TaskType type) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "index 3223f18521..fe3a0370d6 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "@@ -130,4 +130,6 @@ import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;",
                " import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;",
                " import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;",
                "+import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;",
                " import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;",
                "@@ -161,2 +163,4 @@ public class JPAEntityFactory implements EntityFactory {",
                "             result = (E) new JPAPullPolicy();",
                "+        } else if (reference.equals(CorrelationRule.class)) {",
                "+            result = (E) new JPACorrelationRule();",
                "         } else if (reference.equals(AnyTypeClass.class)) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java",
                "index b895d6511a..aec4e9b1a2 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java",
                "@@ -35,3 +35,2 @@ import javax.persistence.ManyToOne;",
                " import javax.persistence.OneToMany;",
                "-import javax.persistence.OneToOne;",
                " import javax.persistence.Table;",
                "@@ -78,3 +77,3 @@ public class JPANotification extends AbstractGeneratedKeyEntity implements Notif",
                "-    @OneToOne",
                "+    @ManyToOne",
                "     private JPAImplementation recipientsProvider;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java",
                "index e97017f4f4..d4c7bb7d1e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java",
                "@@ -83,5 +83,2 @@ public class JPAPlainSchema extends AbstractSchema implements PlainSchema {",
                "-    @Column(nullable = true)",
                "-    private String validatorClass;",
                "-",
                "     @Column(nullable = true)",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java",
                "new file mode 100644",
                "index 0000000000..7b4bb1cefa",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.policy;",
                "+",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.ManyToOne;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.UniqueConstraint;",
                "+import org.apache.syncope.common.lib.types.ImplementationType;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;",
                "+",
                "+@Entity",
                "+@Table(name = JPACorrelationRule.TABLE, uniqueConstraints =",
                "+        @UniqueConstraint(columnNames = { \"pullPolicy_id\", \"anyType_id\" }))",
                "+public class JPACorrelationRule extends AbstractGeneratedKeyEntity implements CorrelationRule {",
                "+",
                "+    private static final long serialVersionUID = 4276417265524083919L;",
                "+",
                "+    public static final String TABLE = \"CorrelationRule\";",
                "+",
                "+    @ManyToOne(optional = false)",
                "+    private JPAPullPolicy pullPolicy;",
                "+",
                "+    @ManyToOne(optional = false)",
                "+    private JPAAnyType anyType;",
                "+",
                "+    @ManyToOne(optional = false)",
                "+    private JPAImplementation implementation;",
                "+",
                "+    @Override",
                "+    public PullPolicy getPullPolicy() {",
                "+        return pullPolicy;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPullPolicy(final PullPolicy pullPolicy) {",
                "+        checkType(pullPolicy, JPAPullPolicy.class);",
                "+        this.pullPolicy = (JPAPullPolicy) pullPolicy;",
                "+    }",
                "+",
                "+    @Override",
                "+    public AnyType getAnyType() {",
                "+        return anyType;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAnyType(final AnyType anyType) {",
                "+        checkType(anyType, JPAAnyType.class);",
                "+        this.anyType = (JPAAnyType) anyType;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Implementation getImplementation() {",
                "+        return implementation;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setImplementation(final Implementation implementation) {",
                "+        checkType(implementation, JPAImplementation.class);",
                "+        checkImplementationType(implementation, ImplementationType.PULL_CORRELATION_RULE);",
                "+        this.implementation = (JPAImplementation) implementation;",
                "+    }",
                "+",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java",
                "index e5fb20f6df..b7d0720dfc 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java",
                "@@ -20,7 +20,16 @@ package org.apache.syncope.core.persistence.jpa.entity.policy;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+import javax.persistence.CascadeType;",
                " import javax.persistence.Entity;",
                "-import javax.persistence.Lob;",
                "+import javax.persistence.EnumType;",
                "+import javax.persistence.Enumerated;",
                "+import javax.persistence.FetchType;",
                "+import javax.persistence.OneToMany;",
                " import javax.persistence.Table;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                "-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import javax.validation.constraints.NotNull;",
                "+import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;",
                " import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;",
                "@@ -35,8 +44,29 @@ public class JPAPullPolicy extends AbstractPolicy implements PullPolicy {",
                "-    @Lob",
                "-    private String specification;",
                "+    @Enumerated(EnumType.STRING)",
                "+    @NotNull",
                "+    private ConflictResolutionAction conflictResolutionAction;",
                "+",
                "+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullPolicy\")",
                "+    private List<JPACorrelationRule> correlationRules = new ArrayList<>();",
                "+",
                "+    @Override",
                "+    public ConflictResolutionAction getConflictResolutionAction() {",
                "+        return conflictResolutionAction;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {",
                "+        this.conflictResolutionAction = conflictResolutionAction;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final CorrelationRule filter) {",
                "+        checkType(filter, JPACorrelationRule.class);",
                "+        return this.correlationRules.add((JPACorrelationRule) filter);",
                "+    }",
                "     @Override",
                "-    public PullPolicySpec getSpecification() {",
                "-        return POJOHelper.deserialize(specification, PullPolicySpec.class);",
                "+    public Optional<? extends CorrelationRule> getCorrelationRule(final AnyType anyType) {",
                "+        return correlationRules.stream().",
                "+                filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();",
                "     }",
                "@@ -44,4 +74,4 @@ public class JPAPullPolicy extends AbstractPolicy implements PullPolicy {",
                "     @Override",
                "-    public void setSpecification(final PullPolicySpec policy) {",
                "-        this.specification = POJOHelper.serialize(policy);",
                "+    public List<? extends CorrelationRule> getCorrelationRules() {",
                "+        return correlationRules;",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java",
                "index df2f62c52c..434e92155a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java",
                "@@ -40,6 +40,6 @@ public class JPAPushTaskAnyFilter extends AbstractGeneratedKeyEntity implements",
                "-    @ManyToOne",
                "+    @ManyToOne(optional = false)",
                "     private JPAPushTask pushTask;",
                "-    @ManyToOne",
                "+    @ManyToOne(optional = false)",
                "     private JPAAnyType anyType;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "index 267a6a26a1..fe826f41ad 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.core.provisioning.java.data;",
                " import java.util.stream.Collectors;",
                "-import org.apache.commons.lang3.SerializationUtils;",
                " import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;",
                "@@ -26,3 +25,2 @@ import org.apache.syncope.common.lib.policy.AccountPolicyTO;",
                " import org.apache.syncope.common.lib.policy.PasswordPolicyTO;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                " import org.apache.syncope.common.lib.policy.PullPolicyTO;",
                "@@ -41,2 +39,3 @@ import org.apache.syncope.core.persistence.api.entity.Policy;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;",
                " import org.slf4j.Logger;",
                "@@ -135,12 +134,19 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "-            PullPolicySpec pullPolicySpec = SerializationUtils.clone(pullPolicyTO.getSpecification());",
                "-            pullPolicySpec.getCorrelationRules().clear();",
                "-            pullPolicyTO.getSpecification().getCorrelationRules().entrySet().forEach(entry -> {",
                "+            pullPolicy.setConflictResolutionAction(pullPolicyTO.getConflictResolutionAction());",
                "+",
                "+            pullPolicyTO.getCorrelationRules().entrySet().forEach(entry -> {",
                "                 AnyType anyType = anyTypeDAO.find(entry.getKey());",
                "                 if (anyType == null) {",
                "-                    LOG.debug(\"Invalid \" + AnyType.class.getSimpleName() + \" {}, ignoring...\",",
                "-                            entry.getKey());",
                "+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());",
                "                 } else {",
                "-                    Implementation rule = implementationDAO.find(entry.getValue());",
                "-                    if (rule == null) {",
                "+                    CorrelationRule correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);",
                "+                    if (correlationRule == null) {",
                "+                        correlationRule = entityFactory.newEntity(CorrelationRule.class);",
                "+                        correlationRule.setAnyType(anyTypeDAO.find(entry.getKey()));",
                "+                        correlationRule.setPullPolicy(pullPolicy);",
                "+                        pullPolicy.add(correlationRule);",
                "+                    }",
                "+",
                "+                    Implementation implementation = implementationDAO.find(entry.getValue());",
                "+                    if (implementation == null) {",
                "                         LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",",
                "@@ -148,3 +154,3 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "                     } else {",
                "-                        pullPolicySpec.getCorrelationRules().put(anyType.getKey(), rule.getKey());",
                "+                        correlationRule.setImplementation(implementation);",
                "                     }",
                "@@ -152,3 +158,7 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "             });",
                "-            pullPolicy.setSpecification(pullPolicySpec);",
                "+            // remove all rules not contained in the TO",
                "+            pullPolicy.getCorrelationRules().removeAll(",
                "+                    pullPolicy.getCorrelationRules().stream().filter(anyFilter",
                "+                            -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey())).",
                "+                            collect(Collectors.toList()));",
                "         }",
                "@@ -201,4 +211,10 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {",
                "         } else if (policy instanceof PullPolicy) {",
                "-            policyTO = (T) new PullPolicyTO();",
                "-            ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());",
                "+            PullPolicy pullPolicy = PullPolicy.class.cast(policy);",
                "+            PullPolicyTO pullPolicyTO = new PullPolicyTO();",
                "+            policyTO = (T) pullPolicyTO;",
                "+",
                "+            pullPolicyTO.setConflictResolutionAction(((PullPolicy) policy).getConflictResolutionAction());",
                "+            pullPolicy.getCorrelationRules().forEach(rule -> {",
                "+                pullPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());",
                "+            });",
                "         }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java",
                "index 8f3ee71128..05d7112e21 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java",
                "@@ -30,3 +30,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.common.lib.collections.IteratorChain;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                "+import org.apache.syncope.common.lib.types.ConflictResolutionAction;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -40,3 +40,2 @@ import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;",
                " import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "-import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;",
                " import org.apache.syncope.core.provisioning.api.Connector;",
                "@@ -184,3 +183,5 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i",
                "         profile.setDryRun(dryRun);",
                "-        profile.setResAct(getPullPolicySpec(pullTask).getConflictResolutionAction());",
                "+        profile.setResAct(pullTask.getResource().getPullPolicy() == null",
                "+                ? ConflictResolutionAction.IGNORE",
                "+                : pullTask.getResource().getPullPolicy().getConflictResolutionAction());",
                "@@ -329,17 +330,2 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i",
                "     }",
                "-",
                "-    protected PullPolicySpec getPullPolicySpec(final ProvisioningTask task) {",
                "-        PullPolicySpec pullPolicySpec;",
                "-",
                "-        if (task instanceof PullTask) {",
                "-            pullPolicySpec = task.getResource().getPullPolicy() == null",
                "-                    ? null",
                "-                    : task.getResource().getPullPolicy().getSpecification();",
                "-        } else {",
                "-            pullPolicySpec = null;",
                "-        }",
                "-",
                "-        // step required because the call <policy>.getSpecification() could return a null value",
                "-        return pullPolicySpec == null ? new PullPolicySpec() : pullPolicySpec;",
                "-    }",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "index 44c80bdc7f..32e2118401 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "@@ -26,3 +26,2 @@ import java.util.stream.Collectors;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "-import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "@@ -42,3 +41,2 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.api.entity.Entity;",
                "-import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "@@ -48,2 +46,3 @@ import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                " import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "@@ -276,27 +275,2 @@ public class PullUtils {",
                "-    private PullCorrelationRule getCorrelationRule(final Provision provision, final PullPolicySpec policySpec) {",
                "-        PullCorrelationRule rule = null;",
                "-",
                "-        String pullCorrelationRule = policySpec.getCorrelationRules().get(provision.getAnyType().getKey());",
                "-        if (pullCorrelationRule != null) {",
                "-            if (pullCorrelationRule.charAt(0) == '[') {",
                "-                rule = new PlainAttrsPullCorrelationRule(",
                "-                        POJOHelper.deserialize(pullCorrelationRule, String[].class), provision);",
                "-            } else {",
                "-                Implementation impl = implementationDAO.find(pullCorrelationRule);",
                "-                if (impl == null) {",
                "-                    LOG.error(\"Could not find any Implementation matching '{}'\", pullCorrelationRule);",
                "-                } else {",
                "-                    try {",
                "-                        rule = ImplementationManager.build(impl);",
                "-                    } catch (Exception e) {",
                "-                        LOG.error(\"While building {}\", impl, e);",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return rule;",
                "-    }",
                "-",
                "     /**",
                "@@ -316,10 +290,18 @@ public class PullUtils {",
                "-        PullPolicySpec pullPolicySpec = null;",
                "-        if (provision.getResource().getPullPolicy() != null) {",
                "-            pullPolicySpec = provision.getResource().getPullPolicy().getSpecification();",
                "-        }",
                "+        Optional<? extends CorrelationRule> correlationRule = provision.getResource().getPullPolicy() == null",
                "+                ? Optional.empty()",
                "+                : provision.getResource().getPullPolicy().getCorrelationRule(provision.getAnyType());",
                "-        PullCorrelationRule pullRule = null;",
                "-        if (pullPolicySpec != null) {",
                "-            pullRule = getCorrelationRule(provision, pullPolicySpec);",
                "+        PullCorrelationRule rule = null;",
                "+        if (correlationRule.isPresent()) {",
                "+            if (correlationRule.get().getImplementation().getBody().charAt(0) == '[') {",
                "+                rule = new PlainAttrsPullCorrelationRule(POJOHelper.deserialize(",
                "+                        correlationRule.get().getImplementation().getBody(), String[].class), provision);",
                "+            } else {",
                "+                try {",
                "+                    rule = ImplementationManager.build(correlationRule.get().getImplementation());",
                "+                } catch (Exception e) {",
                "+                    LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);",
                "+                }",
                "+            }",
                "         }",
                "@@ -327,5 +309,5 @@ public class PullUtils {",
                "         try {",
                "-            return pullRule == null",
                "+            return rule == null",
                "                     ? findByConnObjectKeyItem(uid, provision, anyUtils)",
                "-                    : findByCorrelationRule(connObj, pullRule, anyUtils.getAnyTypeKind());",
                "+                    : findByCorrelationRule(connObj, rule, anyUtils.getAnyTypeKind());",
                "         } catch (RuntimeException e) {"
            ],
            "changed_files": [
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: template, report",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d9da82f6ae760c5b612462b064a7ba5fa9b97179",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507538107,
            "hunks": 68,
            "message": "[maven-release-plugin] prepare release syncope-2.0.6",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index daac8550d8..2f21d583da 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 17f4077eda..fe53124e2d 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 9fb32c1bd0..b227d13e53 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index 1077ba7251..195f0ce0ac 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index b59d12cba8..ced83683c0 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index da6548bc7e..38eabd6ef5 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index 1d897343b6..8d73e66ba8 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index b9fbbf14e7..922cecea96 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index cd1e6bdd79..51385e18f3 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index 26bdc03983..85e96197f0 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/migration/pom.xml b/core/migration/pom.xml",
                "index a028c06dd6..07dd43a178 100644",
                "--- a/core/migration/pom.xml",
                "+++ b/core/migration/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index b1bbdec845..50013a66bb 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index ab3aebcc5f..27f48dd0c0 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 5db10081c3..6546235ffd 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index bc466440e2..84cacd7d1d 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index c03c98c3f2..e415cc2b7e 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index f3bf38c46d..757137593c 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index fc53171f1e..16669f1a56 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/workflow-activiti/pom.xml b/core/workflow-activiti/pom.xml",
                "index a3f62442ad..602cc4d5d4 100644",
                "--- a/core/workflow-activiti/pom.xml",
                "+++ b/core/workflow-activiti/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index ac3886be3e..5c00770eb6 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/workflow-flowable/pom.xml b/core/workflow-flowable/pom.xml",
                "index 3d371d7827..ef55e1c9e9 100644",
                "--- a/core/workflow-flowable/pom.xml",
                "+++ b/core/workflow-flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index cf9dc364dc..1e7c68cd20 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index c6bd56f043..87853f16ec 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index 4a83ad7e6d..7f7d3b7f17 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index acd658ac68..6f69d29931 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 2bba208ce3..8a60b68e9c 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index 6652c67c14..18c590a055 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index 42dca9d78a..264e99ffd4 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index d3d73059c2..37b57d0655 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index 1235fcb6b5..e89dc80f82 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index 9087353fb9..34aa1901e5 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index a359531e5e..6f418e713e 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index ae4487c2d8..6e9909ed39 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index de47e7143c..c08fc2b324 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index 5fed284b70..0a3cb382e8 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index bf01533a50..5349f49b46 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index e7b4a9e591..eedcd24b89 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index 98d515aaf3..756cde9f3f 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index 317ab97fd4..a7b677427f 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index 941f555969..1d9768773f 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 4d9619faef..458297a4cd 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 386fcf4748..e51d168799 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index 7e5fdcd39e..89a00c25ff 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index 96c036c46b..61d1ce6f30 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index d9c194ecd2..cccef6b907 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index 2b76833a60..ce6f13884e 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 78845560c2..cd6b58ccb2 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index 932aeace79..07c30e8cbe 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index e367f9ae62..98b682c175 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index eb44901878..6c942fb349 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index 2f80228ddb..e895180840 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index b3459458ab..7705edbd6b 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index 0030b1cfb7..53c2a4a6b5 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index ad5b765706..5088654ca9 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 03bd932091..94ff73d1be 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 8baa7616e3..38b7ab0896 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index ca4c358bf1..16aab746de 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index 2fef9f030a..1ac2eb130d 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index 9c7ad220d5..2185a5aeeb 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index 529caef261..58dcb6e880 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index 9da82f3b20..1d2c728ddd 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index fa66c1d389..e52135d167 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 736753c41c..e516cc471c 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index 9201a67919..30e049f2fd 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index 5576b0e393..cd08df46ae 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 4285cca0e5..05ac4de0e1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.0.6-SNAPSHOT</version>",
                "+  <version>2.0.6</version>",
                "   <packaging>pom</packaging>",
                "@@ -54,3 +54,3 @@ under the License.",
                "     <url>https://git-wip-us.apache.org/repos/asf?p=syncope.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>syncope-2.0.6</tag>",
                "   </scm>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index fe554b84ae..9390d50466 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.6-SNAPSHOT</version>",
                "+    <version>2.0.6</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/migration/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/workflow-activiti/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-flowable/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c9b653853160ebc838fe18f9e5d557aa73f1b8d9"
                ],
                [
                    "no-tag",
                    "6cb9cfc146c24b501ef041e8026e33e1476df847"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.6",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a95ff23803fe689007622e7b5e5023a0e5018a11",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509374479,
            "hunks": 5,
            "message": "Improved the reading of the fields of a bean for the building of the form",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "index c09fb43d15..56c897dd52 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java",
                "@@ -67,2 +67,5 @@ import org.springframework.beans.PropertyAccessorFactory;",
                " import org.springframework.util.ClassUtils;",
                "+import org.springframework.util.ReflectionUtils;",
                "+import org.springframework.util.ReflectionUtils.FieldCallback;",
                "+import org.springframework.util.ReflectionUtils.FieldFilter;",
                "@@ -102,12 +105,19 @@ public class BeanPanel<T extends Serializable> extends Panel {",
                "             protected List<String> load() {",
                "-                List<String> result = new ArrayList<>();",
                "+                final List<String> result = new ArrayList<>();",
                "                 if (BeanPanel.this.getDefaultModelObject() != null) {",
                "-                    for (Field field : BeanPanel.this.getDefaultModelObject().getClass().getDeclaredFields()) {",
                "-                        if (!BeanPanel.this.excluded.contains(field.getName())) {",
                "+                    ReflectionUtils.doWithFields(BeanPanel.this.getDefaultModelObject().getClass(),",
                "+                            new FieldCallback() {",
                "+",
                "+                        public void doWith(final Field field) throws IllegalArgumentException, IllegalAccessException {",
                "                             result.add(field.getName());",
                "                         }",
                "-                    }",
                "-                }",
                "+                    }, new FieldFilter() {",
                "+",
                "+                        public boolean matches(final Field field) {",
                "+                            return !BeanPanel.this.excluded.contains(field.getName());",
                "+                        }",
                "+                    });",
                "+                }",
                "                 return result;",
                "@@ -127,8 +137,3 @@ public class BeanPanel<T extends Serializable> extends Panel {",
                "-                Field field = null;",
                "-                try {",
                "-                    field = bean.getObject().getClass().getDeclaredField(fieldName);",
                "-                } catch (NoSuchFieldException | SecurityException e) {",
                "-                    LOG.error(\"Could not find field {} in class {}\", fieldName, bean.getObject().getClass(), e);",
                "-                }",
                "+                Field field = ReflectionUtils.findField(bean.getObject().getClass(), fieldName);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5697a5f90a9e26547012f37040efff1eba90ba34"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: read",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2fed050f32c6b04209411076c06742c12cb472e6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514981177,
            "hunks": 22,
            "message": "[SYNCOPE-1259] Aligning translation keys for 2_0_X",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ja.properties",
                "index 9c66b4403f..d69adc5c7d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ja.properties",
                "@@ -72,3 +72,2 @@ confirmGlobalLogout=\\u30b0\\u30ed\\u30fc\\u30d0\\u30eb\\u30ed\\u30b0\\u30a2\\u30a6\\u30c8",
                " administration=\\u7ba1\\u7406",
                "-implementations=\\u5c0e\\u5165",
                " timeout=\\u64cd\\u4f5c\\u306b\\u9577\\u6642\\u9593\\u304b\\u304b\\u3063\\u3066\\u3044\\u307e\\u3059\\: \\u30d0\\u30c3\\u30af\\u30b0\\u30e9\\u30a6\\u30f3\\u30c9\\u3067\\u5b9f\\u884c\\u3055\\u308c\\u307e\\u3059\\u3002 \\u7d50\\u679c\\u3092\\u5f8c\\u3067\\u78ba\\u8a8d\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044 (\\u30a8\\u30e9\\u30fc\\u306f\\u5f15\\u304d\\u8d77\\u3053\\u3057\\u307e\\u305b\\u3093)\\u3002",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/notifications/NotificationWizardBuilder$Recipients_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/notifications/NotificationWizardBuilder$Recipients_ja.properties",
                "index 628092b412..e51b75f035 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/notifications/NotificationWizardBuilder$Recipients_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/notifications/NotificationWizardBuilder$Recipients_ja.properties",
                "@@ -17,3 +17,3 @@",
                " recipients=\\u53d7\\u4fe1\\u8005",
                "-recipientsProvider=\\u901a\\u77e5\\u53d7\\u4fe1\\u30d7\\u30ed\\u30d0\\u30a4\\u30c0\\u30fc",
                "+recipientsProviderClassName=Notification recipient provider",
                " staticRecipients=\\u9759\\u7684\\u53d7\\u4fe1\\u8005",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ja.properties",
                "index 11bb74aa6e..702f5ba7d3 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ja.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-noFlowableEnabledForUsers=\\u30d5\\u30ed\\u30fc\\u53ef\\u80fd\\u306f\\u30e6\\u30fc\\u30b6\\u30fc\\u306b\\u5bfe\\u3057\\u3066\\u6709\\u52b9\\u3067\\u306f\\u3042\\u308a\\u307e\\u305b\\u3093",
                "+disabled=Edit the workflow definition is not supported by the configured Workflow Adapter.",
                " xmlEditorTitle=\\u30ef\\u30fc\\u30af\\u30d5\\u30ed\\u30fc XML \\u30a8\\u30c7\\u30a3\\u30bf\\u30fc",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ru.properties",
                "index 5b53981c62..c340e3749e 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ru.properties",
                "@@ -17,5 +17,3 @@",
                " #",
                "-# noActivitiEnabledForUsers=Activiti \\u00d0\\u00be\\u00d1\\u0082\\u00d0\\u00ba\\u00d0\\u00bb\\u00d1\\u008e\\u00d1\\u0087\\u00d0\\u00b5\\u00d0\\u00bd \\u00d0\\u00b4\\u00d0\\u00bb\\u00d1\\u008f \\u00d0\\u00bf\\u00d0\\u00be\\u00d0\\u00bb\\u00d1\\u008c\\u00d0\\u00b7\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b5\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00b9",
                " disabled=Edit the workflow definition is not supported by the configured Workflow Adapter.",
                "-# xmlEditorTitle=XML \\u00d1\\u0080\\u00d0\\u00b5\\u00d0\\u00b4\\u00d0\\u00b0\\u00d0\\u00ba\\u00d1\\u0082\\u00d0\\u00be\\u00d1\\u0080 \\u00d0\\u00bf\\u00d1\\u0080\\u00d0\\u00be\\u00d1\\u0086\\u00d0\\u00b5\\u00d1\\u0081\\u00d1\\u0081\\u00d0\\u00b0 \\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00bb\\u00d0\\u00b0\\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f",
                " xmlEditorTitle=XML \\u0440\\u0435\\u0434\\u0430\\u043a\\u0442\\u043e\\u0440 \\u043f\\u0440\\u043e\\u0446\\u0435\\u0441\\u0441\\u0430 \\u0441\\u043e\\u0433\\u043b\\u0430\\u0441\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties",
                "index eb9c986939..a9380dc9cc 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties",
                "@@ -1,2 +1,2 @@",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "+# licensed to the Apache Software Foundation (ASF) under one",
                " # or more contributor license agreements.  See the NOTICE file",
                "@@ -24,3 +24,2 @@ multivalueAndUniqueConstr.validation='\\u8907\\u6570\\u5024' \\u3068 '\\u4e00\\u610f\\u",
                " type=\\u30bf\\u30a4\\u30d7",
                "-validator=\\u30d0\\u30ea\\u30c7\\u30fc\\u30bf\\u30fc",
                " conversionPattern=\\u5909\\u63db\\u30d1\\u30bf\\u30fc\\u30f3",
                "@@ -33 +32,2 @@ cipherAlgorithm=\\u6697\\u53f7\\u5316\\u30a2\\u30eb\\u30b4\\u30ea\\u30ba\\u30e0",
                " mimeType=MIME \\u30bf\\u30a4\\u30d7",
                "+validatorClass=Validator class",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_ja.properties",
                "index 0b1d84881f..6efc598da6 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_ja.properties",
                "@@ -19,3 +19,3 @@ accountPolicy=\\u30a2\\u30ab\\u30a6\\u30f3\\u30c8\\u30dd\\u30ea\\u30b7\\u30fc",
                " passwordPolicy=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30dd\\u30ea\\u30b7\\u30fc",
                "-actions=\\u30a2\\u30af\\u30b7\\u30e7\\u30f3",
                "+actionsClassNames=\\u30a2\\u30af\\u30b7\\u30e7\\u30f3",
                " resources=\\u5272\\u308a\\u5f53\\u3066\\u3089\\u308c\\u305f\\u30ea\\u30bd\\u30fc\\u30b9",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties",
                "index 54b0d64f93..f28e170636 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties",
                "@@ -24,3 +24,3 @@ historyLength=\\u5c65\\u6b74\\u9577",
                " allowNullPassword=\\u7a7a\\u306e\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u3092\\u8a31\\u53ef",
                "-policy.rules=${description} \\u30eb\\u30fc\\u30eb",
                "+policy.rule.conf=Policy '${description}' Rule Configuration",
                " any.edit=${description} \\u3092\\u7de8\\u96c6",
                "@@ -29,3 +29 @@ any.finish=${description} \\u3092\\u5b9f\\u884c",
                " any.cancel=${description} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb",
                "-compose.title=\\u30eb\\u30fc\\u30eb",
                "-conflictResolutionAction=\\u7af6\\u5408\\u89e3\\u6c7a\\u30a2\\u30af\\u30b7\\u30e7\\u30f3",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ja.properties",
                "index 9bd5c10d94..1e8dd685bd 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ja.properties",
                "@@ -16,4 +16,3 @@",
                " # under the License.",
                "-rule=\\u30eb\\u30fc\\u30eb",
                "+ruleConf=\\u30eb\\u30fc\\u30eb",
                " configuration=\\u8a2d\\u5b9a",
                "-noConf=\\u8a2d\\u5b9a\\u304c\\u3042\\u308a\\u307e\\u305b\\u3093",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletDirectoryPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletDirectoryPanel_ja.properties",
                "index 3bbdb9b271..27c83f027a 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletDirectoryPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletDirectoryPanel_ja.properties",
                "@@ -19,2 +19 @@ profile=\\u30d7\\u30ed\\u30d5\\u30a1\\u30a4\\u30eb",
                " configuration=\\u8a2d\\u5b9a",
                "-noConf=\\u8a2d\\u5b9a\\u304c\\u3042\\u308a\\u307e\\u305b\\u3093",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Profile_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Profile_ja.properties",
                "index 86c09938fd..bef705cc34 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Profile_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Profile_ja.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-reportlet=\\u30ec\\u30dd\\u30fc\\u30c8\\u30ec\\u30c3\\u30c8",
                "+name=\\u30ec\\u30dd\\u30fc\\u30c8\\u30ec\\u30c3\\u30c8",
                " configuration=\\u8a2d\\u5b9a",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties",
                "index e30d011da2..69e833a0cc 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties",
                "@@ -19,3 +19,2 @@ description=\\u8aac\\u660e",
                " destinationRealm=\\u5b9b\\u5148\\u30ec\\u30eb\\u30e0",
                "-jobDelegate=\\u30b8\\u30e7\\u30d6\\u59d4\\u4efb",
                " lastExec=\\u6700\\u7d42\\u5b9f\\u884c",
                "@@ -23,2 +22,3 @@ nextExec=\\u6b21\\u306e\\u5b9f\\u884c",
                " active=\\u30a2\\u30af\\u30c6\\u30a3\\u30d6",
                "+jobDelegateClassName=Job Delegate",
                "@@ -29,4 +29,4 @@ any.cancel=${name} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb",
                " pullMode=\\u30d7\\u30eb\\u30e2\\u30fc\\u30c9",
                "-reconFilterBuilder=\\u30d5\\u30a3\\u30eb\\u30bf\\u30fc\\u30d3\\u30eb\\u30c0\\u30fc\\u306e\\u7167\\u5408",
                "-actions=\\u30a2\\u30af\\u30b7\\u30e7\\u30f3",
                " sourceRealm=\\u30bd\\u30fc\\u30b9\\u30ec\\u30eb\\u30e0",
                "+reconciliationFilterBuilderClassName=Reconciliation Filter Builder",
                "+actionsClassNames=Actions",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties",
                "index b1b725cb49..6255df226d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties",
                "@@ -18,3 +18,3 @@ name=\\u540d\\u524d",
                " description=\\u8aac\\u660e",
                "-jobDelegate=\\u30af\\u30e9\\u30b9",
                "+jobDelegateClassName=\\u30af\\u30e9\\u30b9",
                " matchingRule=\\u4e00\\u81f4\\u30eb\\u30fc\\u30eb",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel_ja.properties",
                "index 7636f94d56..99ea1da1a6 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel_ja.properties",
                "@@ -21,3 +21,2 @@ propagationPriority=\\u4f1d\\u64ad\\u512a\\u5148\\u5ea6",
                " randomPwdIfNotProvided=\\u898b\\u3064\\u304b\\u3089\\u306a\\u3044\\u5834\\u5408\\u306f\\u30e9\\u30f3\\u30c0\\u30e0\\u306a\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u3092\\u751f\\u6210",
                "-propagationActions=\\u4f1d\\u64ad\\u30a2\\u30af\\u30b7\\u30e7\\u30f3",
                " createTraceLevel=\\u4f1d\\u64ad: \\u4f5c\\u6210\\u30c8\\u30ec\\u30fc\\u30b9\\u30ec\\u30d9\\u30eb",
                "@@ -26 +25,2 @@ deleteTraceLevel=\\u4f1d\\u64ad: \\u524a\\u9664\\u30c8\\u30ec\\u30fc\\u30b9\\u30ec\\u30d9\\",
                " provisioningTraceLevel=\\u30d7\\u30eb / \\u30d7\\u30c3\\u30b7\\u30e5\\u30c8\\u30ec\\u30fc\\u30b9\\u30ec\\u30d9\\u30eb",
                "+propagationActionsClassNames=Propagation Actions"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/SyncopeConsoleApplication_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/notifications/NotificationWizardBuilder$Recipients_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow_ru.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletDirectoryPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Profile_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel_ja.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1259": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, report",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f4b59f6768cb186d6c2e065d7874a44ad13dce4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514883732,
            "hunks": 4,
            "message": "Upgrade CodeMirror, Wicket-jQuery UI, maven-site-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b02fe04478..5d4b8862bb 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -433,3 +433,3 @@ under the License.",
                "     <highlightjs.version>9.8.0</highlightjs.version>",
                "-    <codemirror.version>5.24.2</codemirror.version>",
                "+    <codemirror.version>5.33.0</codemirror.version>",
                "     <googlediffmatchpath.version>20121119-1</googlediffmatchpath.version>",
                "@@ -438,3 +438,3 @@ under the License.",
                "     <wicket.version>7.9.0</wicket.version>",
                "-    <wicket-jqueryui.version>7.9.0</wicket-jqueryui.version>",
                "+    <wicket-jqueryui.version>7.9.2</wicket-jqueryui.version>",
                "     <wicket-bootstrap.version>0.10.16</wicket-bootstrap.version>",
                "@@ -442,3 +442,3 @@ under the License.",
                "-    <angular.version>1.6.6</angular.version>",
                "+    <angular.version>1.6.8</angular.version>",
                "     <angular-ui-router.version>0.3.2</angular-ui-router.version>",
                "@@ -2411,3 +2411,3 @@ under the License.",
                "             <artifactId>maven-site-plugin</artifactId>",
                "-            <version>3.6</version>",
                "+            <version>3.7</version>",
                "             <dependencies>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "00ea0ef28b0ac262931b788b480715968b28ab3a"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e90d40c5c736a16905708853f1179cbd4942737",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513930451,
            "hunks": 76,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 336ebc7536..9eb78a17a8 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 5210b38f14..1051acf9f8 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 78d865ae16..662a1530b8 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index 4967229496..d6b8e306f4 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index bcf0fa54a8..ecc1276a5b 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 7bd1997492..ef9de007a5 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index 3158768722..41d0587bdb 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index bdecbfd992..087c8338cc 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index fb137444d8..a76dc16794 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index ee8131c476..a0b9728fcf 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/migration/pom.xml b/core/migration/pom.xml",
                "index 68e5cc62d5..37ef4d7c77 100644",
                "--- a/core/migration/pom.xml",
                "+++ b/core/migration/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index 3d3cdba153..5a319262a6 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index fb9135d64e..8fe5e49ab9 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 471fdb0564..75f1dae7e9 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index 10df27429b..7958210cc4 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 6bdb82bfab..078ec3d7d3 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index 8b1f0099a6..bd0459c20e 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index f1b4ca2baa..74a2d9b938 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-activiti/pom.xml b/core/workflow-activiti/pom.xml",
                "index 77c14be9df..c5edad5586 100644",
                "--- a/core/workflow-activiti/pom.xml",
                "+++ b/core/workflow-activiti/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index a8bcf05ef3..01fe2b674b 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-flowable/pom.xml b/core/workflow-flowable/pom.xml",
                "index 4f54bb4ca2..6a1351e403 100644",
                "--- a/core/workflow-flowable/pom.xml",
                "+++ b/core/workflow-flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index e53b235e27..4711e74773 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index fef2c79365..c4af28affd 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index fd967864b4..2cf02613d4 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 8d86568d86..7a8772bab7 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index dcc0f7726c..1d3f0e771f 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index 0a36f19244..4898bc6176 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index e5513aee27..57009bca2e 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index 3649dc7df1..b2bb8ec060 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index fbcee43358..483b007b7b 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index f148a140d4..eac8787d59 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index c60b664a98..d198844f77 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index 0bf0affdb8..b71be9234a 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index 856f36d9e1..ada27c6781 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index d36e1b7f44..e06b95bf73 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index 627d8e4c35..3d4ecced88 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index d423289456..68f400a0a6 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index 308f9ae6e5..1de9af8675 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index 72c92e6638..8331ce0e58 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index f5994dc26a..671e093b93 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 5ebee223f1..f4578beb0a 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 6a318a02f6..e8b0a62466 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index 27d96bef40..d28e6170db 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index c410276413..e8d94e40b6 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index c5f41cfb81..6f70a6f251 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index f541984b4e..d6411e86b4 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 5092a86902..682f6690dd 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index 3c2ad5d2ed..7cba3647a3 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index 87cfeaff0e..dc0a39cb33 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index dbbd24c068..546d20d0a5 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index 0c01a82394..9944ddf95e 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index cea0066f27..89bfb3533b 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index 3118f25e4e..dff3610d14 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index 0c60e172c3..bfd7ad0da0 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index 0b726d9ec5..ab014f9ef7 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index 0c6fa642a7..e79f185336 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index 3bb8df199d..e87917b288 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index dd48e3185b..89d3404eca 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index 84fd9cf991..2b6c277926 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index 3762e7a846..7f4a78723c 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index 0bdb9f59d8..007877ace0 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index bc9006c11a..8da3f1d738 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 8b4a4ee7c2..4c63a9c3e9 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 2e59f0c6f7..cab1b03af1 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 92b9c122c8..f6ab69dbf3 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index bec1fc7248..e9ea55c255 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index 9d66b18ce5..e2a72a1366 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index a524cadd56..c2c21d02b2 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index 40e3b47fa9..6a447bcf8b 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index b2e7c1c174..50c9a062c8 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 99cc4e3968..27dec6d974 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index 8fa6a800a0..af6614f752 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index d388d28da4..bb66656f36 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index ccc14be2e2..2ae79f0d37 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.0.7</version>",
                "+  <version>2.0.8-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "@@ -54,3 +54,3 @@ under the License.",
                "     <url>https://git-wip-us.apache.org/repos/asf?p=syncope.git</url>",
                "-    <tag>syncope-2.0.7</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index 182db2a518..60a60b704d 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.7</version>",
                "+    <version>2.0.8-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/migration/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/workflow-activiti/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-flowable/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3032154d56beed69cc34039570c92e36bd0ae495"
                ],
                [
                    "no-tag",
                    "cba05f88e35c3dfd43cc47e217c85f4c119e1f0b"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "13ab04c345e34b53d54fedc2f67bf333be3dca46",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508248544,
            "hunks": 2,
            "message": "Fixing sample entitlements list",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/roles.adoc b/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "index 63949f4557..f45c0a1cc1 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "@@ -97,3 +97,2 @@ For example, the following entitlements are normally required to be granted for",
                " . `USER_SEARCH`",
                "-. `USER_LIST`",
                " . `ANYTYPECLASS_READ`",
                "@@ -101,2 +100,3 @@ For example, the following entitlements are normally required to be granted for",
                " . `ANYTYPECLASS_LIST`",
                "+. `RELATIONSHIPTYPE_LIST`",
                " . `USER_READ`"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/roles.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6fbd41a2c80bf4ca2e4b1df8a917b312790e4cac"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entitlement",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7aeafedaf8a209eaa00ad5a8bbd71328b592480c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512378704,
            "hunks": 2,
            "message": "[SYNCOPE-1242] Added 'title' html attribute to option elements in Palette Panel",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java",
                "index b705f5945e..c2313a5047 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java",
                "@@ -21,2 +21,4 @@ package org.apache.syncope.client.console.wicket.markup.html.form;",
                " import java.util.Collection;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                " import org.apache.wicket.Component;",
                "@@ -52,3 +54,18 @@ public class NonI18nPalette<T> extends Palette<T> {",
                "         return super.newSelectedHeader(componentId);",
                "-    }   ",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Map<String, String> getAdditionalAttributesForChoices(final Object choice) {",
                "+        Map<String, String> map = new LinkedHashMap<>();",
                "+        map.put(\"title\", choice.toString());",
                "+        return map;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Map<String, String> getAdditionalAttributesForSelection(final Object choice) {",
                "+        Map<String, String> map = new LinkedHashMap<>();",
                "+        map.put(\"title\", choice.toString());",
                "+        return map;",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1242": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7f56fdbdb9b4321dde61718a3415192f4b220146"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1242",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6cf810946f8f6073bf072af15673c24db6bca9d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510915324,
            "hunks": 1,
            "message": "[SYNCOPE-1236] Fix pagition size error for list of executed notification tasks",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "index 70dae9b7c5..5ed2e0590e 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "@@ -220,3 +220,3 @@ public abstract class NotificationTaskDirectoryPanel",
                "         public long size() {",
                "-            return restClient.count(TaskType.NOTIFICATION);",
                "+            return restClient.listNotificationTasks(notification, anyTypeKind, entityKey, 1, -1, getSort()).size();",
                "         }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1236": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "31a7d92c8b4d8001151e09d229eea4bc601c3887"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1236",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fac9d3d42d4c00826343a85d29aba7e590a9af95",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509459024,
            "hunks": 60,
            "message": "[SYNCOPE-152] Implementations for /ServiceProviderConfig /ResourceTypes and /Schemas - still static",
            "diff": [
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "new file mode 100644",
                "index 0000000000..b127fb8e1f",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -0,0 +1,62 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope.ext</groupId>",
                "+    <artifactId>syncope-ext-scimv2</artifactId>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Ext: SCIMv2 Logic</name>",
                "+  <description>Apache Syncope Ext: SCIMv2 Logic</description>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-logic</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-logic</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-scim-rest-api</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/RootLogic.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/RootLogic.java",
                "new file mode 100644",
                "index 0000000000..75d0ecfc92",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/RootLogic.java",
                "@@ -0,0 +1,143 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic;",
                "+",
                "+import java.lang.reflect.Method;",
                "+import java.net.URI;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import javax.ws.rs.NotFoundException;",
                "+import javax.ws.rs.core.UriBuilder;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+import org.apache.syncope.core.logic.init.SCIMLoader;",
                "+import org.apache.syncope.ext.scimv2.api.data.AuthenticationScheme;",
                "+import org.apache.syncope.ext.scimv2.api.data.BulkConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.ConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.FilterConfigurationOption;",
                "+import org.apache.syncope.ext.scimv2.api.data.Meta;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.data.SchemaExtension;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.security.access.prepost.PreAuthorize;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class RootLogic extends AbstractLogic<AbstractBaseBean> {",
                "+",
                "+    private static final Object MONITOR = new Object();",
                "+",
                "+    private static ServiceProviderConfig SERVICE_PROVIDER_CONFIG;",
                "+",
                "+    private static ResourceType USER;",
                "+",
                "+    private static ResourceType GROUP;",
                "+",
                "+    @Autowired",
                "+    private SCIMLoader loader;",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public ServiceProviderConfig serviceProviderConfig() {",
                "+        synchronized (MONITOR) {",
                "+            if (SERVICE_PROVIDER_CONFIG == null) {",
                "+                SERVICE_PROVIDER_CONFIG = new ServiceProviderConfig(",
                "+                        new ConfigurationOption(true),",
                "+                        new BulkConfigurationOption(",
                "+                                true, loader.getBulkMaxOperations(), loader.getBulkMaxPayloadSize()),",
                "+                        new FilterConfigurationOption(true, loader.getFilterMaxResults()),",
                "+                        new ConfigurationOption(true),",
                "+                        new ConfigurationOption(true),",
                "+                        new ConfigurationOption(true));",
                "+                SERVICE_PROVIDER_CONFIG.getAuthenticationSchemes().add(new AuthenticationScheme(",
                "+                        \"JSON Web Token\",",
                "+                        \"Apache Syncope JWT authentication\",",
                "+                        URI.create(\"http://www.rfc-editor.org/info/rfc6750\"),",
                "+                        URI.create(\"https://syncope.apache.org/docs/\"",
                "+                                + \"reference-guide.html#rest-authentication-and-authorization\"),",
                "+                        \"oauthbearertoken\",",
                "+                        true));",
                "+                SERVICE_PROVIDER_CONFIG.getAuthenticationSchemes().add(new AuthenticationScheme(",
                "+                        \"HTTP Basic\",",
                "+                        \"Apache Syncope HTTP Basic authentication\",",
                "+                        URI.create(\"http://www.rfc-editor.org/info/rfc2617\"),",
                "+                        URI.create(\"https://syncope.apache.org/docs/\"",
                "+                                + \"reference-guide.html#rest-authentication-and-authorization\"),",
                "+                        \"httpbasic\",",
                "+                        false));",
                "+            }",
                "+        }",
                "+        return SERVICE_PROVIDER_CONFIG;",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public List<ResourceType> resourceTypes(final UriBuilder uriBuilder) {",
                "+        synchronized (MONITOR) {",
                "+            if (USER == null) {",
                "+                USER = new ResourceType(\"User\", \"User\", \"/Users\", \"User Account\", Resource.User.schema(),",
                "+                        new Meta(Resource.ResourceType,",
                "+                                null, null, null, uriBuilder.path(\"User\").build().toASCIIString()));",
                "+                USER.getSchemaExtensions().add(new SchemaExtension(Resource.EnterpriseUser.schema(), true));",
                "+            }",
                "+            if (GROUP == null) {",
                "+                GROUP = new ResourceType(\"Group\", \"Group\", \"/Groups\", \"Group\", Resource.Group.schema(),",
                "+                        new Meta(Resource.ResourceType,",
                "+                                null, null, null, uriBuilder.path(\"Group\").build().toASCIIString()));",
                "+            }",
                "+        }",
                "+",
                "+        return Arrays.asList(USER, GROUP);",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public ResourceType resourceType(final UriBuilder uriBuilder, final String type) {",
                "+        if (Resource.User.name().equals(type)) {",
                "+            resourceTypes(uriBuilder);",
                "+            return USER;",
                "+        } else if (Resource.Group.name().equals(type)) {",
                "+            resourceTypes(uriBuilder);",
                "+            return GROUP;",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"Unsupported resource type: \" + type);",
                "+        }",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public String schemas() {",
                "+        return loader.getSchemas();",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public String schema(final String schema) {",
                "+        String found = loader.getSchema(schema);",
                "+        if (found == null) {",
                "+            throw new NotFoundException(\"Schema \" + schema);",
                "+        }",
                "+",
                "+        return found;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected AbstractBaseBean resolveReference(final Method method, final Object... args)",
                "+            throws UnresolvedReferenceException {",
                "+",
                "+        throw new UnresolvedReferenceException();",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "new file mode 100644",
                "index 0000000000..894ba24c41",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "@@ -0,0 +1,106 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic.init;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import java.io.IOException;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.common.lib.PropertyUtils;",
                "+import org.apache.syncope.core.persistence.api.SyncopeLoader;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class SCIMLoader implements SyncopeLoader {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(SCIMLoader.class);",
                "+",
                "+    private static final String SCIMV2_LOGIC_PROPERTIES = \"scimv2-logic.properties\";",
                "+",
                "+    private static final String SCHEMAS = \"schemas.json\";",
                "+",
                "+    private int bulkMaxOperations = 0;",
                "+",
                "+    private int bulkMaxPayloadSize = 0;",
                "+",
                "+    private int filterMaxResults = 0;",
                "+",
                "+    private String schemas;",
                "+",
                "+    private final Map<String, String> schemaMap = new HashMap<>();",
                "+",
                "+    @Override",
                "+    public Integer getPriority() {",
                "+        return 1000;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void load() {",
                "+        Pair<Properties, String> init = PropertyUtils.read(getClass(), SCIMV2_LOGIC_PROPERTIES, \"conf.directory\");",
                "+        Properties props = init.getLeft();",
                "+",
                "+        bulkMaxOperations = Integer.valueOf(props.getProperty(\"bulk.maxOperations\"));",
                "+        bulkMaxPayloadSize = Integer.valueOf(props.getProperty(\"bulk.maxPayloadSize\"));",
                "+        filterMaxResults = Integer.valueOf(props.getProperty(\"filter.maxResults\"));",
                "+",
                "+        try {",
                "+            ObjectMapper mapper = new ObjectMapper();",
                "+            JsonNode tree = mapper.readTree(getClass().getResourceAsStream(\"/\" + SCHEMAS));",
                "+            if (!tree.isArray()) {",
                "+                throw new IOException(\"JSON node is not a tree\");",
                "+            }",
                "+",
                "+            ArrayNode schemaArray = (ArrayNode) tree;",
                "+            schemas = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree);",
                "+",
                "+            for (JsonNode schema : schemaArray) {",
                "+                schemaMap.put(schema.get(\"id\").asText(), mapper.writeValueAsString(schema));",
                "+            }",
                "+        } catch (IOException e) {",
                "+            LOG.error(\"Could not parse the default schema definitions\", e);",
                "+        }",
                "+    }",
                "+",
                "+    public int getBulkMaxOperations() {",
                "+        return bulkMaxOperations;",
                "+    }",
                "+",
                "+    public int getBulkMaxPayloadSize() {",
                "+        return bulkMaxPayloadSize;",
                "+    }",
                "+",
                "+    public int getFilterMaxResults() {",
                "+        return filterMaxResults;",
                "+    }",
                "+",
                "+    public String getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public String getSchema(final String schema) {",
                "+        return schemaMap.get(schema);",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/resources/schemas.json b/ext/scimv2/logic/src/main/resources/schemas.json",
                "new file mode 100644",
                "index 0000000000..2b9558b931",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/resources/schemas.json",
                "@@ -0,0 +1,960 @@",
                "+[",
                "+  {",
                "+    \"id\": \"urn:ietf:params:scim:schemas:core:2.0:User\",",
                "+    \"name\": \"User\",",
                "+    \"description\": \"User Account\",",
                "+    \"attributes\": [",
                "+      {",
                "+        \"name\": \"userName\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Unique identifier for the User, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users. REQUIRED.\",",
                "+        \"required\": true,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"server\"",
                "+      },",
                "+      {",
                "+        \"name\": \"name\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The components of the user's real name. Providers MAY return just the full name as a single string in the formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY return both. If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the component attributes should be combined.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"formatted\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The full name, including all middle names, titles, and suffixes as appropriate, formatted for display 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"familyName\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The family name of the User, or last name in most Western languages (e.g., 'Jensen' given the full name 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"givenName\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The given name of the User, or first name in most Western languages (e.g., 'Barbara' given the full name 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"middleName\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The middle name(s) of the User (e.g., 'Jane' given the full name 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"honorificPrefix\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The honorific prefix(es) of the User, or title in most Western languages (e.g., 'Ms.' given the full name 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"honorificSuffix\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The honorific suffix(es) of the User, or suffix in most Western languages (e.g., 'III' given the full name 'Ms. Barbara J Jensen, III').\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"displayName\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The name of the User, suitable for display to end-users. The name SHOULD be the full name of the User being described, if known.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"nickName\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The casual way to address the user in real life, e.g., 'Bob' or 'Bobby' instead of 'Robert'. This attribute SHOULD NOT be used to represent a User's username (e.g., 'bjensen' or 'mpepperidge').\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"profileUrl\",",
                "+        \"type\": \"reference\",",
                "+        \"referenceTypes\": [\"external\"],",
                "+        \"multiValued\": false,",
                "+        \"description\": \"A fully qualified URL pointing to a page representing the User's online profile.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"title\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The user's title, such as \\\"Vice President.\\\"\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"userType\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Used to identify the relationship between the organization and the user. Typical values used might be 'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"preferredLanguage\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Indicates the User's preferred written or spoken language. Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country US.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"locale\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Used to indicate the User's default location for purposes of localizing items such as currency, date time format, or numerical representations.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"timezone\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The User's time zone in the 'Olson' time zone database format, e.g., 'America/Los_Angeles'.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"active\",",
                "+        \"type\": \"boolean\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"A Boolean value indicating the User's administrative status.\",",
                "+        \"required\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"password\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The User's cleartext password. This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"writeOnly\",",
                "+        \"returned\": \"never\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"emails\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, e.g., 'work' or 'home'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"work\",",
                "+              \"home\",",
                "+              \"other\"",
                "+            ],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred mailing address or primary email address. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"phoneNumbers\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"Phone numbers for the User. The value SHOULD be canonicalized by the service provider according to the format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'. Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager', and 'other'.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"Phone number of the User.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, e.g., 'work', 'home', 'mobile'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"work\",",
                "+              \"home\",",
                "+              \"mobile\",",
                "+              \"fax\",",
                "+              \"pager\",",
                "+              \"other\"",
                "+            ],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred phone number or primary phone number. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"ims\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"Instant messaging addresses for the User.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"Instant messaging address for the User.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, e.g., 'aim', 'gtalk', 'xmpp'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"aim\",",
                "+              \"gtalk\",",
                "+              \"icq\",",
                "+              \"xmpp\",",
                "+              \"msn\",",
                "+              \"skype\",",
                "+              \"qq\",",
                "+              \"yahoo\"",
                "+            ],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred messenger or primary messenger. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"photos\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"URLs of photos of the User.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"reference\",",
                "+            \"referenceTypes\": [\"external\"],",
                "+            \"multiValued\": false,",
                "+            \"description\": \"URL of a photo of the User.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, i.e., 'photo' or 'thumbnail'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"photo\",",
                "+              \"thumbnail\"",
                "+            ],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred photo or thumbnail. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"addresses\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A physical mailing address for this User. Canonical type values of 'work', 'home', and 'other'. This attribute is a complex type with the following sub-attributes.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"formatted\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The full mailing address, formatted for display or use with a mailing label. This attribute MAY contain newlines.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"streetAddress\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information. This attribute MAY contain newlines.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"locality\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The city or locality component.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"region\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The state or region component.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"postalCode\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The zip code or postal code component.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"country\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The country name component.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, e.g., 'work' or 'home'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"work\",",
                "+              \"home\",",
                "+              \"other\"",
                "+            ],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"groups\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The identifier of the User's group.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readOnly\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"$ref\",",
                "+            \"type\": \"reference\",",
                "+            \"referenceTypes\": [",
                "+              \"User\",",
                "+              \"Group\"",
                "+            ],",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The URI of the corresponding 'Group' resource to which the user belongs.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readOnly\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readOnly\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function, e.g., 'direct' or 'indirect'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"direct\",",
                "+              \"indirect\"",
                "+            ],",
                "+            \"mutability\": \"readOnly\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readOnly\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"entitlements\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A list of entitlements for the User that represent a thing the User has.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The value of an entitlement.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"roles\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The value of a role.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      },",
                "+      {",
                "+        \"name\": \"x509Certificates\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A list of certificates issued to the User.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"binary\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The value of an X.509 certificate.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"display\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A human-readable name, primarily used for display purposes. READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the attribute's function.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [],",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"primary\",",
                "+            \"type\": \"boolean\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.\",",
                "+            \"required\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      }",
                "+    ],",
                "+    \"meta\": {",
                "+      \"resourceType\": \"Schema\",",
                "+      \"location\":",
                "+              \"/v2/Schemas/urn:ietf:params:scim:schemas:core:2.0:User\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"id\": \"urn:ietf:params:scim:schemas:core:2.0:Group\",",
                "+    \"name\": \"Group\",",
                "+    \"description\": \"Group\",",
                "+    \"attributes\": [",
                "+      {",
                "+        \"name\": \"displayName\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"A human-readable name for the Group. REQUIRED.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"members\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": true,",
                "+        \"description\": \"A list of members of the Group.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"Identifier of the member of this Group.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"immutable\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"$ref\",",
                "+            \"type\": \"reference\",",
                "+            \"referenceTypes\": [",
                "+              \"User\",",
                "+              \"Group\"",
                "+            ],",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The URI corresponding to a SCIM resource that is a member of this Group.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"immutable\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"type\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"A label indicating the type of resource, e.g., 'User' or 'Group'.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"canonicalValues\": [",
                "+              \"User\",",
                "+              \"Group\"",
                "+            ],",
                "+            \"mutability\": \"immutable\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      }",
                "+    ],",
                "+    \"meta\": {",
                "+      \"resourceType\": \"Schema\",",
                "+      \"location\":",
                "+              \"/v2/Schemas/urn:ietf:params:scim:schemas:core:2.0:Group\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"id\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\",",
                "+    \"name\": \"EnterpriseUser\",",
                "+    \"description\": \"Enterprise User\",",
                "+    \"attributes\": [",
                "+      {",
                "+        \"name\": \"employeeNumber\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Numeric or alphanumeric identifier assigned to a person, typically based on order of hire or association with an organization.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"costCenter\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Identifies the name of a cost center.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"organization\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Identifies the name of an organization.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"division\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Identifies the name of a division.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"department\",",
                "+        \"type\": \"string\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"Identifies the name of a department.\",",
                "+        \"required\": false,",
                "+        \"caseExact\": false,",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\",",
                "+        \"uniqueness\": \"none\"",
                "+      },",
                "+      {",
                "+        \"name\": \"manager\",",
                "+        \"type\": \"complex\",",
                "+        \"multiValued\": false,",
                "+        \"description\": \"The User's manager. A complex type that optionally allows service providers to represent organizational hierarchy by referencing the 'id' attribute of another User.\",",
                "+        \"required\": false,",
                "+        \"subAttributes\": [",
                "+          {",
                "+            \"name\": \"value\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The id of the SCIM resource representing the User's manager. REQUIRED.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"$ref\",",
                "+            \"type\": \"reference\",",
                "+            \"referenceTypes\": [",
                "+              \"User\"",
                "+            ],",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The URI of the SCIM resource representing the User's manager. REQUIRED.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readWrite\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          },",
                "+          {",
                "+            \"name\": \"displayName\",",
                "+            \"type\": \"string\",",
                "+            \"multiValued\": false,",
                "+            \"description\": \"The displayName of the User's manager. OPTIONAL and READ-ONLY.\",",
                "+            \"required\": false,",
                "+            \"caseExact\": false,",
                "+            \"mutability\": \"readOnly\",",
                "+            \"returned\": \"default\",",
                "+            \"uniqueness\": \"none\"",
                "+          }",
                "+        ],",
                "+        \"mutability\": \"readWrite\",",
                "+        \"returned\": \"default\"",
                "+      }",
                "+    ],",
                "+    \"meta\": {",
                "+      \"resourceType\": \"Schema\",",
                "+      \"location\": \"/v2/Schemas/urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
                "+    }",
                "+  }",
                "+]",
                "\\ No newline at end of file",
                "diff --git a/ext/scimv2/logic/src/main/resources/scimv2-logic.properties b/ext/scimv2/logic/src/main/resources/scimv2-logic.properties",
                "new file mode 100644",
                "index 0000000000..2d85a37ec7",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/resources/scimv2-logic.properties",
                "@@ -0,0 +1,21 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+conf.directory=${conf.directory}",
                "+",
                "+bulk.maxOperations=1000",
                "+bulk.maxPayloadSize=1048576",
                "+filter.maxResults=200",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index ac554e39c2..409f64223a 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -42,2 +42,3 @@ under the License.",
                "     <module>scim-rest-cxf</module>",
                "+    <module>logic</module>",
                "   </modules>",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/AuthenticationScheme.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/AuthenticationScheme.java",
                "new file mode 100644",
                "index 0000000000..10e3f7722e",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/AuthenticationScheme.java",
                "@@ -0,0 +1,82 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.net.URI;",
                "+",
                "+public class AuthenticationScheme extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -1326661422976856869L;",
                "+",
                "+    private final String name;",
                "+",
                "+    private final String description;",
                "+",
                "+    private final URI specUri;",
                "+",
                "+    private final URI documentationUri;",
                "+",
                "+    private final String type;",
                "+",
                "+    private final boolean primary;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public AuthenticationScheme(",
                "+            @JsonProperty(\"name\") final String name,",
                "+            @JsonProperty(\"description\") final String description,",
                "+            @JsonProperty(\"specUri\") final URI specUri,",
                "+            @JsonProperty(\"documentationUri\") final URI documentationUri,",
                "+            @JsonProperty(\"type\") final String type,",
                "+            @JsonProperty(\"primary\") final boolean primary) {",
                "+",
                "+        this.name = name;",
                "+        this.description = description;",
                "+        this.specUri = specUri;",
                "+        this.documentationUri = documentationUri;",
                "+        this.type = type;",
                "+        this.primary = primary;",
                "+    }",
                "+",
                "+    public String getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public String getDescription() {",
                "+        return description;",
                "+    }",
                "+",
                "+    public URI getSpecUri() {",
                "+        return specUri;",
                "+    }",
                "+",
                "+    public URI getDocumentationUri() {",
                "+        return documentationUri;",
                "+    }",
                "+",
                "+    public String getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public boolean isPrimary() {",
                "+        return primary;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/BulkConfigurationOption.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/BulkConfigurationOption.java",
                "new file mode 100644",
                "index 0000000000..b81b652e9c",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/BulkConfigurationOption.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class BulkConfigurationOption extends ConfigurationOption {",
                "+",
                "+    private static final long serialVersionUID = 8218541842239260269L;",
                "+",
                "+    private final int maxOperations;",
                "+",
                "+    private final int maxPayloadSize;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public BulkConfigurationOption(",
                "+            @JsonProperty(\"supported\") final boolean supported,",
                "+            @JsonProperty(\"maxOperations\") final int maxOperations,",
                "+            @JsonProperty(\"maxPayloadSize\") final int maxPayloadSize) {",
                "+",
                "+        super(supported);",
                "+        this.maxOperations = maxOperations;",
                "+        this.maxPayloadSize = maxPayloadSize;",
                "+    }",
                "+",
                "+    public int getMaxOperations() {",
                "+        return maxOperations;",
                "+    }",
                "+",
                "+    public int getMaxPayloadSize() {",
                "+        return maxPayloadSize;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ConfigurationOption.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ConfigurationOption.java",
                "new file mode 100644",
                "index 0000000000..821cae451d",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ConfigurationOption.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class ConfigurationOption extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5165678196717776426L;",
                "+",
                "+    private final boolean supported;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public ConfigurationOption(@JsonProperty(\"supported\") final boolean supported) {",
                "+        this.supported = supported;",
                "+    }",
                "+",
                "+    public boolean isSupported() {",
                "+        return supported;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/FilterConfigurationOption.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/FilterConfigurationOption.java",
                "new file mode 100644",
                "index 0000000000..3eda87ed57",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/FilterConfigurationOption.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class FilterConfigurationOption extends ConfigurationOption {",
                "+",
                "+    private static final long serialVersionUID = 8218541842239260269L;",
                "+",
                "+    private final int maxResults;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public FilterConfigurationOption(",
                "+            @JsonProperty(\"supported\") final boolean supported,",
                "+            @JsonProperty(\"maxResults\") final int maxResults) {",
                "+",
                "+        super(supported);",
                "+        this.maxResults = maxResults;",
                "+    }",
                "+",
                "+    public int getMaxResults() {",
                "+        return maxResults;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "index 698363199e..d20f50a78f 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "@@ -25,3 +25,3 @@ import java.util.Arrays;",
                " import java.util.List;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -31,3 +31,3 @@ public class ListResponse<R extends SCIMResource> extends SCIMBean {",
                "-    private final List<String> schemas = Arrays.asList(ResourceType.ListResponse.getSchema());",
                "+    private final List<String> schemas = Arrays.asList(Resource.ListResponse.schema());",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "index 73c25ebc5e..aa2f5dd418 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "@@ -23,3 +23,3 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -31,3 +31,3 @@ public class Member extends Reference {",
                "     @JsonIgnore",
                "-    private final ResourceType type;",
                "+    private final Resource type;",
                "@@ -37,3 +37,3 @@ public class Member extends Reference {",
                "             @JsonProperty(\"display\") final String display,",
                "-            @JsonProperty(\"type\") final ResourceType type) {",
                "+            @JsonProperty(\"type\") final Resource type) {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "index 7ecb4afe76..661ec86b96 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "@@ -23,8 +23,7 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import java.io.Serializable;",
                " import java.util.Date;",
                " import javax.ws.rs.core.EntityTag;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "-public class Meta implements Serializable {",
                "+public class Meta extends SCIMBean {",
                "@@ -32,3 +31,3 @@ public class Meta implements Serializable {",
                "-    private final ResourceType resourceType;",
                "+    private final Resource resourceType;",
                "@@ -45,3 +44,3 @@ public class Meta implements Serializable {",
                "     public Meta(",
                "-            @JsonProperty(\"resourceType\") final ResourceType resourceType,",
                "+            @JsonProperty(\"resourceType\") final Resource resourceType,",
                "             @JsonProperty(\"created\") final Date created,",
                "@@ -54,3 +53,3 @@ public class Meta implements Serializable {",
                "         this.lastModified = lastModified;",
                "-        this.version = new EntityTag(version);",
                "+        this.version = version == null ? null : new EntityTag(version, true);",
                "         this.location = location;",
                "@@ -58,3 +57,3 @@ public class Meta implements Serializable {",
                "-    public ResourceType getResourceType() {",
                "+    public Resource getResourceType() {",
                "         return resourceType;",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java",
                "new file mode 100644",
                "index 0000000000..19dceacd55",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java",
                "@@ -0,0 +1,97 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+",
                "+public class ResourceType extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -6559584102333757279L;",
                "+",
                "+    private final List<String> schemas = Arrays.asList(Resource.ResourceType.schema());",
                "+",
                "+    private final String id;",
                "+",
                "+    private final String name;",
                "+",
                "+    private final String endpoint;",
                "+",
                "+    private final String description;",
                "+",
                "+    private final String schema;",
                "+",
                "+    private final List<SchemaExtension> schemaExtensions = new ArrayList<>();",
                "+",
                "+    private final Meta meta;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public ResourceType(",
                "+            @JsonProperty(\"id\") final String id,",
                "+            @JsonProperty(\"name\") final String name,",
                "+            @JsonProperty(\"endpoint\") final String endpoint,",
                "+            @JsonProperty(\"description\") final String description,",
                "+            @JsonProperty(\"schema\") final String schema,",
                "+            @JsonProperty(\"meta\") final Meta meta) {",
                "+",
                "+        this.id = id;",
                "+        this.name = name;",
                "+        this.endpoint = endpoint;",
                "+        this.description = description;",
                "+        this.schema = schema;",
                "+        this.meta = meta;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public String getId() {",
                "+        return id;",
                "+    }",
                "+",
                "+    public String getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public String getEndpoint() {",
                "+        return endpoint;",
                "+    }",
                "+",
                "+    public String getDescription() {",
                "+        return description;",
                "+    }",
                "+",
                "+    public String getSchema() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    public List<SchemaExtension> getSchemaExtensions() {",
                "+        return schemaExtensions;",
                "+    }",
                "+",
                "+    public Meta getMeta() {",
                "+        return meta;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SchemaExtension.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SchemaExtension.java",
                "new file mode 100644",
                "index 0000000000..fb2fe2e548",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SchemaExtension.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class SchemaExtension extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -2891887818183122384L;",
                "+",
                "+    private final String schema;",
                "+",
                "+    private final boolean required;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public SchemaExtension(",
                "+            @JsonProperty(\"schema\") final String schema,",
                "+            @JsonProperty(\"required\") final boolean required) {",
                "+",
                "+        this.schema = schema;",
                "+        this.required = required;",
                "+    }",
                "+",
                "+    public String getSchema() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    public boolean isRequired() {",
                "+        return required;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "new file mode 100644",
                "index 0000000000..3014a6c2ac",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "@@ -0,0 +1,97 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+",
                "+public class ServiceProviderConfig extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 1027738509789460252L;",
                "+",
                "+    private final List<String> schemas = Arrays.asList(Resource.ServiceProviderConfig.schema());",
                "+",
                "+    private final ConfigurationOption patch;",
                "+",
                "+    private final BulkConfigurationOption bulk;",
                "+",
                "+    private final FilterConfigurationOption filter;",
                "+",
                "+    private final ConfigurationOption changePassword;",
                "+",
                "+    private final ConfigurationOption sort;",
                "+",
                "+    private final ConfigurationOption etag;",
                "+",
                "+    private final List<AuthenticationScheme> authenticationSchemes = new ArrayList<>();",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public ServiceProviderConfig(",
                "+            @JsonProperty(\"patch\") final ConfigurationOption patch,",
                "+            @JsonProperty(\"bulk\") final BulkConfigurationOption bulk,",
                "+            @JsonProperty(\"filter\") final FilterConfigurationOption filter,",
                "+            @JsonProperty(\"changePassword\") final ConfigurationOption changePassword,",
                "+            @JsonProperty(\"sort\") final ConfigurationOption sort,",
                "+            @JsonProperty(\"etag\") final ConfigurationOption etag) {",
                "+",
                "+        this.patch = patch;",
                "+        this.bulk = bulk;",
                "+        this.filter = filter;",
                "+        this.changePassword = changePassword;",
                "+        this.sort = sort;",
                "+        this.etag = etag;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public ConfigurationOption getPatch() {",
                "+        return patch;",
                "+    }",
                "+",
                "+    public BulkConfigurationOption getBulk() {",
                "+        return bulk;",
                "+    }",
                "+",
                "+    public FilterConfigurationOption getFilter() {",
                "+        return filter;",
                "+    }",
                "+",
                "+    public ConfigurationOption getChangePassword() {",
                "+        return changePassword;",
                "+    }",
                "+",
                "+    public ConfigurationOption getSort() {",
                "+        return sort;",
                "+    }",
                "+",
                "+    public ConfigurationOption getEtag() {",
                "+        return etag;",
                "+    }",
                "+",
                "+    public List<AuthenticationScheme> getAuthenticationSchemes() {",
                "+        return authenticationSchemes;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "index c1bb82f82f..8881ec8eda 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "@@ -34,3 +34,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "-@Path(\"Groups\")",
                "+@Path(\"v2/Groups\")",
                " public interface GroupService extends SCIMService<SCIMGroup> {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "index 8de7a0abe2..6e9b201fe8 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "@@ -20,4 +20,6 @@ package org.apache.syncope.ext.scimv2.api.service;",
                "+import java.util.List;",
                " import javax.ws.rs.GET;",
                " import javax.ws.rs.Path;",
                "+import javax.ws.rs.PathParam;",
                " import javax.ws.rs.Produces;",
                "@@ -25,10 +27,13 @@ import javax.ws.rs.core.Response;",
                " import org.apache.syncope.ext.scimv2.api.SCIMConstants;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                "-@Path(\"\")",
                "-public interface RootService extends SCIMService {",
                "+@Path(\"v2\")",
                "+public interface RootService extends SCIMService<SCIMResource> {",
                "     @GET",
                "-    @Path(\"ServiceProviderConfigs\")",
                "+    @Path(\"ServiceProviderConfig\")",
                "     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response serviceProviderConfigs();",
                "+    ServiceProviderConfig serviceProviderConfig();",
                "@@ -37,3 +42,8 @@ public interface RootService extends SCIMService {",
                "     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response resourceTypes();",
                "+    List<ResourceType> resourceTypes();",
                "+",
                "+    @GET",
                "+    @Path(\"ResourceTypes/{type}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ResourceType resourceType(@PathParam(\"type\") String type);",
                "@@ -44,2 +54,6 @@ public interface RootService extends SCIMService {",
                "+    @GET",
                "+    @Path(\"Schemas/{schema}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response schema(@PathParam(\"schema\") String schema);",
                " }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "index 73518b5bb8..8003b66c4e 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "@@ -34,3 +34,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "-@Path(\"Users\")",
                "+@Path(\"v2/Users\")",
                " public interface UserService extends SCIMService<SCIMUser> {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "new file mode 100644",
                "index 0000000000..37b15b6556",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.type;",
                "+",
                "+public enum Resource {",
                "+",
                "+    ServiceProviderConfig(\"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\"),",
                "+    ResourceType(\"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"),",
                "+    Schema(\"urn:ietf:params:scim:schemas:core:2.0:Schema\"),",
                "+    User(\"urn:ietf:params:scim:schemas:core:2.0:User\"),",
                "+    EnterpriseUser(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"),",
                "+    Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),",
                "+    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\");",
                "+",
                "+    private final String schema;",
                "+",
                "+    Resource(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    public String schema() {",
                "+        return schema;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index 3db0ae6e3f..75c8a7c4e7 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -99,10 +99,5 @@ under the License.",
                "-    <dependency>",
                "-      <groupId>org.apache.syncope.core</groupId>",
                "-      <artifactId>syncope-core-logic</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "     <dependency>",
                "       <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "-      <artifactId>syncope-ext-scimv2-scim-rest-api</artifactId>",
                "+      <artifactId>syncope-ext-scimv2-logic</artifactId>",
                "       <version>${project.version}</version>",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "new file mode 100644",
                "index 0000000000..498ea954c4",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "@@ -0,0 +1,55 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Date;",
                "+import javax.ws.rs.container.ContainerRequestContext;",
                "+import javax.ws.rs.container.ContainerResponseContext;",
                "+import javax.ws.rs.container.ContainerResponseFilter;",
                "+import javax.ws.rs.core.EntityTag;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.ext.Provider;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "+",
                "+@Provider",
                "+public class AddETagFilter implements ContainerResponseFilter {",
                "+",
                "+    @Override",
                "+    public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {",
                "+        if (resCtx.getEntityTag() == null) {",
                "+            Date lastModified = null;",
                "+            if (resCtx.getEntity() instanceof SCIMUser) {",
                "+                lastModified = ((SCIMUser) resCtx.getEntity()).getMeta().getLastModified();",
                "+                if (resCtx.getEntity() instanceof SCIMGroup) {",
                "+                    lastModified = ((SCIMGroup) resCtx.getEntity()).getMeta().getLastModified();",
                "+                }",
                "+",
                "+                if (lastModified != null) {",
                "+                    String etagValue = String.valueOf(lastModified.getTime());",
                "+                    if (StringUtils.isNotBlank(etagValue)) {",
                "+                        resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "index cee06eb6e4..41703a2eae 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "@@ -50,3 +50,3 @@ import org.apache.syncope.ext.scimv2.api.service.SCIMService;",
                " import org.apache.syncope.ext.scimv2.api.type.Function;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                " import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "@@ -87,3 +87,3 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "-    protected AbstractAnyLogic<?, ?> anyLogic(final ResourceType type) {",
                "+    protected AbstractAnyLogic<?, ?> anyLogic(final Resource type) {",
                "         switch (type) {",
                "@@ -103,7 +103,8 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "                 userTO.getKey(),",
                "-                Collections.singletonList(ResourceType.User.getSchema()),",
                "+                Collections.singletonList(Resource.User.schema()),",
                "                 new Meta(",
                "-                        ResourceType.User,",
                "+                        Resource.User,",
                "                         userTO.getCreationDate(),",
                "-                        userTO.getLastChangeDate(),",
                "+                        userTO.getLastChangeDate() == null",
                "+                        ? userTO.getCreationDate() : userTO.getLastChangeDate(),",
                "                         userTO.getETagValue(),",
                "@@ -138,7 +139,8 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "                 groupTO.getKey(),",
                "-                Collections.singletonList(ResourceType.Group.getSchema()),",
                "+                Collections.singletonList(Resource.Group.schema()),",
                "                 new Meta(",
                "-                        ResourceType.Group,",
                "+                        Resource.Group,",
                "                         groupTO.getCreationDate(),",
                "-                        groupTO.getLastChangeDate(),",
                "+                        groupTO.getLastChangeDate() == null",
                "+                        ? groupTO.getCreationDate() : groupTO.getLastChangeDate(),",
                "                         groupTO.getETagValue(),",
                "@@ -169,3 +171,3 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "                         userTO.getUsername(),",
                "-                        ResourceType.User));",
                "+                        Resource.User));",
                "             }",
                "@@ -178,3 +180,3 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "     protected ListResponse<R> doSearch(",
                "-            final ResourceType type,",
                "+            final Resource type,",
                "             final Integer startIndex,",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "index 151762a57c..85b9198a05 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -26,3 +26,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                " import org.apache.syncope.ext.scimv2.api.service.GroupService;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                " import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "@@ -67,3 +67,3 @@ public class GroupServiceImpl extends AbstractSCIMService<SCIMGroup> implements",
                "-        return doSearch(ResourceType.Group, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+        return doSearch(Resource.Group, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "index 0172e7d0e0..6038f2b677 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "@@ -20,10 +20,27 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                "+import java.util.List;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.core.logic.RootLogic;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.apache.syncope.ext.scimv2.api.data.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;",
                " import org.apache.syncope.ext.scimv2.api.service.RootService;",
                "-public class RootServiceImpl extends AbstractSCIMService implements RootService {",
                "+public class RootServiceImpl extends AbstractSCIMService<SCIMResource> implements RootService {",
                "+",
                "+    private RootLogic rootLogic;",
                "+",
                "+    protected RootLogic rootLogic() {",
                "+        synchronized (this) {",
                "+            if (rootLogic == null) {",
                "+                rootLogic = ApplicationContextProvider.getApplicationContext().getBean(RootLogic.class);",
                "+            }",
                "+        }",
                "+        return rootLogic;",
                "+    }",
                "     @Override",
                "-    public Response serviceProviderConfigs() {",
                "-        return Response.ok().build();",
                "+    public ServiceProviderConfig serviceProviderConfig() {",
                "+        return rootLogic().serviceProviderConfig();",
                "     }",
                "@@ -31,4 +48,9 @@ public class RootServiceImpl extends AbstractSCIMService implements RootService",
                "     @Override",
                "-    public Response resourceTypes() {",
                "-        return Response.ok().build();",
                "+    public List<ResourceType> resourceTypes() {",
                "+        return rootLogic().resourceTypes(uriInfo.getAbsolutePathBuilder());",
                "+    }",
                "+",
                "+    @Override",
                "+    public ResourceType resourceType(final String type) {",
                "+        return rootLogic().resourceType(uriInfo.getAbsolutePathBuilder(), type);",
                "     }",
                "@@ -37,3 +59,8 @@ public class RootServiceImpl extends AbstractSCIMService implements RootService",
                "     public Response schemas() {",
                "-        return Response.ok().build();",
                "+        return Response.ok(rootLogic().schemas()).build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response schema(final String schema) {",
                "+        return Response.ok(rootLogic().schema(schema)).build();",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index 6d51ca32ef..c12ed6c4d1 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -26,3 +26,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                " import org.apache.syncope.ext.scimv2.api.service.UserService;",
                "-import org.apache.syncope.ext.scimv2.api.type.ResourceType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                " import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "@@ -67,3 +67,3 @@ public class UserServiceImpl extends AbstractSCIMService<SCIMUser> implements Us",
                "-        return doSearch(ResourceType.User, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+        return doSearch(Resource.User, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "index 7293b26732..ebbbe6e102 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "@@ -51,2 +51,4 @@ under the License.",
                "+  <bean id=\"addETagFilter\" class=\"org.apache.syncope.ext.scimv2.cxf.AddETagFilter\"/>",
                "+",
                "   <bean id=\"wadlGenerator\" class=\"org.apache.cxf.jaxrs.model.wadl.WadlGenerator\">",
                "@@ -78,2 +80,3 @@ under the License.",
                "       <ref bean=\"jsonProvider\"/>",
                "+      <ref bean=\"addETagFilter\"/>",
                "       <ref bean=\"wadlGenerator\"/>",
                "diff --git a/fit/core-reference/src/main/resources/all/scimv2-logic.properties b/fit/core-reference/src/main/resources/all/scimv2-logic.properties",
                "new file mode 100644",
                "index 0000000000..2d85a37ec7",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/all/scimv2-logic.properties",
                "@@ -0,0 +1,21 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+conf.directory=${conf.directory}",
                "+",
                "+bulk.maxOperations=1000",
                "+bulk.maxPayloadSize=1048576",
                "+filter.maxResults=200"
            ],
            "changed_files": [
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/RootLogic.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java",
                "ext/scimv2/logic/src/main/resources/schemas.json",
                "ext/scimv2/logic/src/main/resources/scimv2-logic.properties",
                "ext/scimv2/pom.xml",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/AuthenticationScheme.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/BulkConfigurationOption.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ConfigurationOption.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/FilterConfigurationOption.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SchemaExtension.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/RootService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/RootServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "fit/core-reference/src/main/resources/all/scimv2-logic.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f04ab6c26e99ae0a5fe19915e303fa965fcd6332"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f2e8214e9872d314703e4db4ba36342c3c4e0b42",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512912799,
            "hunks": 38,
            "message": "[SYNCOPE-152] Complete filter support, added sort support",
            "diff": [
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "index 4cf7b88724..e3c1441cff 100644",
                "--- a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "@@ -20,3 +20,7 @@ package org.apache.syncope.common.lib.scim;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import java.io.Serializable;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "@@ -38,2 +42,25 @@ public class SCIMEnterpriseUserConf implements Serializable {",
                "+    @JsonIgnore",
                "+    public Map<String, String> asMap() {",
                "+        Map<String, String> map = new HashMap<>();",
                "+",
                "+        if (employeeNumber != null) {",
                "+            map.put(\"employeeNumber\", employeeNumber);",
                "+        }",
                "+        if (costCenter != null) {",
                "+            map.put(\"costCenter\", costCenter);",
                "+        }",
                "+        if (organization != null) {",
                "+            map.put(\"organization\", organization);",
                "+        }",
                "+        if (division != null) {",
                "+            map.put(\"division\", division);",
                "+        }",
                "+        if (department != null) {",
                "+            map.put(\"department\", department);",
                "+        }",
                "+",
                "+        return Collections.unmodifiableMap(map);",
                "+    }",
                "+",
                "     public String getEmployeeNumber() {",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "index ed5643a32e..8c4e9ae339 100644",
                "--- a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "@@ -20,3 +20,7 @@ package org.apache.syncope.common.lib.scim;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import java.io.Serializable;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                " import org.apache.syncope.common.lib.scim.types.AddressCanonicalType;",
                "@@ -43,2 +47,28 @@ public class SCIMUserAddressConf implements Serializable {",
                "+    @JsonIgnore",
                "+    public Map<String, String> asMap() {",
                "+        Map<String, String> map = new HashMap<>();",
                "+",
                "+        if (formatted != null) {",
                "+            map.put(\"formatted\", formatted);",
                "+        }",
                "+        if (streetAddress != null) {",
                "+            map.put(\"streetAddress\", streetAddress);",
                "+        }",
                "+        if (locality != null) {",
                "+            map.put(\"locality\", locality);",
                "+        }",
                "+        if (region != null) {",
                "+            map.put(\"region\", region);",
                "+        }",
                "+        if (postalCode != null) {",
                "+            map.put(\"postalCode\", postalCode);",
                "+        }",
                "+        if (country != null) {",
                "+            map.put(\"country\", country);",
                "+        }",
                "+",
                "+        return Collections.unmodifiableMap(map);",
                "+    }",
                "+",
                "     public String getFormatted() {",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "index 7d1be737f4..c2c0d15b92 100644",
                "--- a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "@@ -20,5 +20,9 @@ package org.apache.syncope.common.lib.scim;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import java.io.Serializable;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "+import java.util.Map;",
                " import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;",
                "@@ -62,2 +66,34 @@ public class SCIMUserConf implements Serializable {",
                "+    @JsonIgnore",
                "+    public Map<String, String> asMap() {",
                "+        Map<String, String> map = new HashMap<>();",
                "+",
                "+        if (displayName != null) {",
                "+            map.put(\"displayName\", displayName);",
                "+        }",
                "+        if (nickName != null) {",
                "+            map.put(\"nickName\", nickName);",
                "+        }",
                "+        if (profileUrl != null) {",
                "+            map.put(\"profileUrl\", profileUrl);",
                "+        }",
                "+        if (title != null) {",
                "+            map.put(\"title\", title);",
                "+        }",
                "+        if (userType != null) {",
                "+            map.put(\"userType\", userType);",
                "+        }",
                "+        if (preferredLanguage != null) {",
                "+            map.put(\"preferredLanguage\", preferredLanguage);",
                "+        }",
                "+        if (locale != null) {",
                "+            map.put(\"locale\", locale);",
                "+        }",
                "+        if (timezone != null) {",
                "+            map.put(\"timezone\", timezone);",
                "+        }",
                "+",
                "+        return Collections.unmodifiableMap(map);",
                "+    }",
                "+",
                "     public SCIMUserNameConf getName() {",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "index 2f2db0f3e9..2af80050b3 100644",
                "--- a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "@@ -20,3 +20,7 @@ package org.apache.syncope.common.lib.scim;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import java.io.Serializable;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "@@ -38,2 +42,28 @@ public class SCIMUserNameConf implements Serializable {",
                "+    @JsonIgnore",
                "+    public Map<String, String> asMap() {",
                "+        Map<String, String> map = new HashMap<>();",
                "+",
                "+        if (formatted != null) {",
                "+            map.put(\"formatted\", formatted);",
                "+        }",
                "+        if (familyName != null) {",
                "+            map.put(\"familyName\", familyName);",
                "+        }",
                "+        if (givenName != null) {",
                "+            map.put(\"givenName\", givenName);",
                "+        }",
                "+        if (middleName != null) {",
                "+            map.put(\"middleName\", middleName);",
                "+        }",
                "+        if (honorificPrefix != null) {",
                "+            map.put(\"honorificPrefix\", honorificPrefix);",
                "+        }",
                "+        if (honorificSuffix != null) {",
                "+            map.put(\"honorificSuffix\", honorificSuffix);",
                "+        }",
                "+",
                "+        return Collections.unmodifiableMap(map);",
                "+    }",
                "+",
                "     public String getFormatted() {",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index 4bc923a03e..03f78e6d60 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -433,3 +433,3 @@ public class SCIMDataBinder {",
                "                         location),",
                "-                output(attributes, excludedAttributes, \"name\", groupTO.getName()));",
                "+                output(attributes, excludedAttributes, \"displayName\", groupTO.getName()));",
                "@@ -439,22 +439,24 @@ public class SCIMDataBinder {",
                "-        int count = userLogic.",
                "-                search(searchCond, 1, 1, Collections.<OrderByClause>emptyList(), SyncopeConstants.ROOT_REALM, false).",
                "-                getLeft();",
                "-",
                "-        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "-            List<UserTO> users = userLogic.search(",
                "-                    searchCond,",
                "-                    page,",
                "-                    AnyDAO.DEFAULT_PAGE_SIZE,",
                "-                    Collections.<OrderByClause>emptyList(),",
                "-                    SyncopeConstants.ROOT_REALM,",
                "-                    false).",
                "-                    getRight();",
                "-            users.forEach(userTO -> {",
                "-                group.getMembers().add(new Member(",
                "-                        userTO.getKey(),",
                "-                        StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),",
                "-                        userTO.getUsername(),",
                "-                        Resource.User));",
                "-            });",
                "+        if (output(attributes, excludedAttributes, \"members\")) {",
                "+            int count = userLogic.search(searchCond,",
                "+                    1, 1, Collections.<OrderByClause>emptyList(),",
                "+                    SyncopeConstants.ROOT_REALM, false).getLeft();",
                "+",
                "+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+                List<UserTO> users = userLogic.search(",
                "+                        searchCond,",
                "+                        page,",
                "+                        AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                        Collections.<OrderByClause>emptyList(),",
                "+                        SyncopeConstants.ROOT_REALM,",
                "+                        false).",
                "+                        getRight();",
                "+                users.forEach(userTO -> {",
                "+                    group.getMembers().add(new Member(",
                "+                            userTO.getKey(),",
                "+                            StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),",
                "+                            userTO.getUsername(),",
                "+                            Resource.User));",
                "+                });",
                "+            }",
                "         }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "index fd45f436fe..9ad7b823e0 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "@@ -35,3 +35,3 @@ public final class SearchCondConverter {",
                "-    public static SearchCond convert(final String filter) {",
                "+    public static SearchCond convert(final SearchCondVisitor visitor, final String filter) {",
                "         SCIMFilterParser parser = new SCIMFilterParser(new CommonTokenStream(",
                "@@ -45,3 +45,3 @@ public final class SearchCondConverter {",
                "         try {",
                "-            return new SearchCondVisitor().visit(parser.scimFilter());",
                "+            return visitor.visit(parser.scimFilter());",
                "         } catch (Exception e) {",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "index 18825053d9..6d07d30422 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "@@ -20,3 +20,12 @@ package org.apache.syncope.core.logic.scim;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.scim.SCIMComplexConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;",
                "+import org.apache.syncope.common.lib.scim.SCIMUserConf;",
                " import org.apache.syncope.core.persistence.api.dao.search.AnyCond;",
                "@@ -31,2 +40,14 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "+    private static final List<String> MULTIVALUE = Arrays.asList(",
                "+            \"emails\", \"phoneNumbers\", \"ims\", \"photos\", \"addresses\");",
                "+",
                "+    private final Resource resource;",
                "+",
                "+    private final SCIMConf conf;",
                "+",
                "+    public SearchCondVisitor(final Resource resource, final SCIMConf conf) {",
                "+        this.resource = resource;",
                "+        this.conf = conf;",
                "+    }",
                "+",
                "     @Override",
                "@@ -36,23 +57,74 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "-    private AttributeCond createAttributeCond(final String schema) {",
                "-        AttributeCond attributeCond;",
                "-        if (\"userName\".equalsIgnoreCase(schema)",
                "-                || (Resource.User.schema() + \":userName\").equalsIgnoreCase(schema)) {",
                "+    private boolean schemaEquals(final Resource resource, final String value, final String schema) {",
                "+        return resource == null",
                "+                ? value.contains(\":\")",
                "+                ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)",
                "+                : value.equalsIgnoreCase(schema)",
                "+                : value.equalsIgnoreCase(schema) || (resource.schema() + \":\" + value).equalsIgnoreCase(schema);",
                "+    }",
                "+",
                "+    public AttributeCond createAttributeCond(final String schema) {",
                "+        AttributeCond attributeCond = null;",
                "+        if (schemaEquals(Resource.User, \"userName\", schema)) {",
                "             attributeCond = new AnyCond();",
                "             attributeCond.setSchema(\"username\");",
                "-        } else if (\"displayName\".equalsIgnoreCase(schema)",
                "-                || (Resource.Group.schema() + \":displayName\").equalsIgnoreCase(schema)) {",
                "-",
                "+        } else if (resource == Resource.Group && schemaEquals(Resource.Group, \"displayName\", schema)) {",
                "             attributeCond = new AnyCond();",
                "             attributeCond.setSchema(\"name\");",
                "-        } else if (\"meta.created\".equals(schema)) {",
                "+        } else if (schemaEquals(null, \"meta.created\", schema)) {",
                "             attributeCond = new AnyCond();",
                "             attributeCond.setSchema(\"creationDate\");",
                "-        } else if (\"meta.lastModified\".equals(schema)) {",
                "+        } else if (schemaEquals(null, \"meta.lastModified\", schema)) {",
                "             attributeCond = new AnyCond();",
                "             attributeCond.setSchema(\"lastChangeDate\");",
                "-        } else {",
                "-            attributeCond = new AttributeCond();",
                "-            attributeCond.setSchema(schema);",
                "+        }",
                "+",
                "+        if (resource == Resource.User) {",
                "+            if (conf.getUserConf() != null) {",
                "+                if (conf.getUserConf().getName() != null) {",
                "+                    for (Map.Entry<String, String> entry : conf.getUserConf().getName().asMap().entrySet()) {",
                "+                        if (schemaEquals(Resource.User, \"name.\" + entry.getKey(), schema)) {",
                "+                            attributeCond = new AttributeCond();",
                "+                            attributeCond.setSchema(entry.getValue());",
                "+                        }",
                "+                    }",
                "+                }",
                "+",
                "+                for (Map.Entry<String, String> entry : conf.getUserConf().asMap().entrySet()) {",
                "+                    if (schemaEquals(Resource.User, entry.getKey(), schema)) {",
                "+                        attributeCond = new AttributeCond();",
                "+                        attributeCond.setSchema(entry.getValue());",
                "+                    }",
                "+                }",
                "+",
                "+                for (SCIMUserAddressConf address : conf.getUserConf().getAddresses()) {",
                "+                    for (Map.Entry<String, String> entry : address.asMap().entrySet()) {",
                "+                        if (schemaEquals(Resource.User, \"addresses.\" + entry.getKey(), schema)) {",
                "+                            attributeCond = new AttributeCond();",
                "+                            attributeCond.setSchema(entry.getValue());",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            if (conf.getEnterpriseUserConf() != null) {",
                "+                for (Map.Entry<String, String> entry : conf.getEnterpriseUserConf().asMap().entrySet()) {",
                "+                    if (schemaEquals(Resource.EnterpriseUser, entry.getKey(), schema)) {",
                "+                        attributeCond = new AttributeCond();",
                "+                        attributeCond.setSchema(entry.getValue());",
                "+                    }",
                "+                }",
                "+",
                "+                if (conf.getEnterpriseUserConf().getManager() != null",
                "+                        && conf.getEnterpriseUserConf().getManager().getManager() != null) {",
                "+",
                "+                    attributeCond = new AttributeCond();",
                "+                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getManager());",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (attributeCond == null) {",
                "+            throw new IllegalArgumentException(\"Could not match \" + schema + \" for \" + resource);",
                "         }",
                "@@ -62,6 +134,3 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "-    private SearchCond transform(final String operator, final String left, final String right) {",
                "-        AttributeCond attributeCond = createAttributeCond(left);",
                "-        attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));",
                "-",
                "+    private SearchCond setOperator(final AttributeCond attributeCond, final String operator) {",
                "         switch (operator) {",
                "@@ -106,3 +175,2 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "                 break;",
                "-",
                "         }",
                "@@ -114,2 +182,108 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "+    private <E extends Enum<?>> SearchCond complex(",
                "+            final String operator, final String left, final String right, final List<SCIMComplexConf<E>> items) {",
                "+",
                "+        if (left.endsWith(\".type\")) {",
                "+            Optional<SCIMComplexConf<E>> item = items.stream().",
                "+                    filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();",
                "+            if (item.isPresent()) {",
                "+                AttributeCond attributeCond = new AttributeCond();",
                "+                attributeCond.setSchema(item.get().getValue());",
                "+                attributeCond.setType(AttributeCond.Type.ISNOTNULL);",
                "+                return SearchCond.getLeafCond(attributeCond);",
                "+            }",
                "+        } else if (!conf.getUserConf().getEmails().isEmpty()",
                "+                && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {",
                "+",
                "+            List<SearchCond> orConds = new ArrayList<>();",
                "+            items.forEach(item -> {",
                "+                AttributeCond cond = new AttributeCond();",
                "+                cond.setSchema(item.getValue());",
                "+                cond.setExpression(StringUtils.strip(right, \"\\\"\"));",
                "+                orConds.add(setOperator(cond, operator));",
                "+            });",
                "+            if (!orConds.isEmpty()) {",
                "+                return SearchCond.getOrCond(orConds);",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private SearchCond addresses(",
                "+            final String operator, final String left, final String right, final List<SCIMUserAddressConf> items) {",
                "+",
                "+        if (left.endsWith(\".type\") && \"eq\".equals(operator)) {",
                "+            Optional<SCIMUserAddressConf> item = items.stream().",
                "+                    filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();",
                "+            if (item.isPresent()) {",
                "+                AttributeCond attributeCond = new AttributeCond();",
                "+                attributeCond.setSchema(item.get().getFormatted());",
                "+                attributeCond.setType(AttributeCond.Type.ISNOTNULL);",
                "+                return SearchCond.getLeafCond(attributeCond);",
                "+            }",
                "+        } else if (!conf.getUserConf().getEmails().isEmpty()",
                "+                && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {",
                "+",
                "+            List<SearchCond> orConds = new ArrayList<>();",
                "+            items.forEach(item -> {",
                "+                AttributeCond cond = new AttributeCond();",
                "+                cond.setSchema(item.getFormatted());",
                "+                cond.setExpression(StringUtils.strip(right, \"\\\"\"));",
                "+                orConds.add(setOperator(cond, operator));",
                "+            });",
                "+            if (!orConds.isEmpty()) {",
                "+                return SearchCond.getOrCond(orConds);",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private SearchCond transform(final String operator, final String left, final String right) {",
                "+        SearchCond result = null;",
                "+",
                "+        if (MULTIVALUE.contains(StringUtils.substringBefore(left, \".\"))) {",
                "+            if (conf.getUserConf() == null) {",
                "+                throw new IllegalArgumentException(\"No \" + SCIMUserConf.class.getName() + \" provided, cannot continue\");",
                "+            }",
                "+",
                "+            switch (StringUtils.substringBefore(left, \".\")) {",
                "+                case \"emails\":",
                "+                    result = complex(operator, left, right, conf.getUserConf().getEmails());",
                "+                    break;",
                "+",
                "+                case \"phoneNumbers\":",
                "+                    result = complex(operator, left, right, conf.getUserConf().getPhoneNumbers());",
                "+                    break;",
                "+",
                "+                case \"ims\":",
                "+                    result = complex(operator, left, right, conf.getUserConf().getIms());",
                "+                    break;",
                "+",
                "+                case \"photos\":",
                "+                    result = complex(operator, left, right, conf.getUserConf().getPhotos());",
                "+                    break;",
                "+",
                "+                case \"addresses\":",
                "+                    result = addresses(operator, left, right, conf.getUserConf().getAddresses());",
                "+                    break;",
                "+",
                "+                default:",
                "+            }",
                "+        }",
                "+",
                "+        if (result == null) {",
                "+            AttributeCond attributeCond = createAttributeCond(left);",
                "+            attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));",
                "+            result = setOperator(attributeCond, operator);",
                "+        }",
                "+",
                "+        if (result == null) {",
                "+            throw new IllegalArgumentException(",
                "+                    \"Could not handle (\" + left + \" \" + operator + \" \" + right + \") for \" + resource);",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "index a28209a3fc..1092c0aa0f 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -35,3 +35,5 @@ import org.apache.syncope.core.logic.SCIMDataBinder;",
                " import org.apache.syncope.core.logic.UserLogic;",
                "+import org.apache.syncope.core.logic.scim.SCIMConfManager;",
                " import org.apache.syncope.core.logic.scim.SearchCondConverter;",
                "+import org.apache.syncope.core.logic.scim.SearchCondVisitor;",
                " import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "@@ -43,2 +45,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                " import org.slf4j.Logger;",
                "@@ -62,2 +65,4 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    private SCIMConfManager confManager;",
                "+",
                "     protected UserLogic userLogic() {",
                "@@ -102,2 +107,11 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    protected SCIMConfManager confManager() {",
                "+        synchronized (this) {",
                "+            if (confManager == null) {",
                "+                confManager = ApplicationContextProvider.getApplicationContext().getBean(SCIMConfManager.class);",
                "+            }",
                "+        }",
                "+        return confManager;",
                "+    }",
                "+",
                "     @SuppressWarnings(\"unchecked\")",
                "@@ -111,2 +125,4 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+        SearchCondVisitor visitor = new SearchCondVisitor(type, confManager().get());",
                "+",
                "         int startIndex = request.getStartIndex() == null || request.getStartIndex() <= 1",
                "@@ -115,7 +131,23 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+        int itemsPerPage = request.getCount() == null ? AnyDAO.DEFAULT_PAGE_SIZE : request.getCount();",
                "+",
                "+        List<OrderByClause> sort;",
                "+        if (request.getSortBy() == null) {",
                "+            sort = Collections.<OrderByClause>emptyList();",
                "+        } else {",
                "+            OrderByClause clause = new OrderByClause();",
                "+            clause.setField(visitor.createAttributeCond(request.getSortBy()).getSchema());",
                "+            clause.setDirection(request.getSortOrder() == null || request.getSortOrder() == SortOrder.ascending",
                "+                    ? OrderByClause.Direction.ASC",
                "+                    : OrderByClause.Direction.DESC);",
                "+            sort = Collections.singletonList(clause);",
                "+        }",
                "+",
                "         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(",
                "-                StringUtils.isBlank(request.getFilter()) ? null : SearchCondConverter.convert(request.getFilter()),",
                "+                StringUtils.isBlank(request.getFilter())",
                "+                ? null",
                "+                : SearchCondConverter.convert(visitor, request.getFilter()),",
                "                 startIndex,",
                "-                AnyDAO.DEFAULT_PAGE_SIZE,",
                "-                Collections.<OrderByClause>emptyList(),",
                "+                itemsPerPage,",
                "+                sort,",
                "                 SyncopeConstants.ROOT_REALM,",
                "@@ -124,3 +156,3 @@ abstract class AbstractService<R extends SCIMResource> {",
                "         ListResponse<R> response = new ListResponse<>(",
                "-                result.getLeft(), startIndex == 1 ? 1 : startIndex - 1, AnyDAO.DEFAULT_PAGE_SIZE);",
                "+                result.getLeft(), startIndex == 1 ? 1 : startIndex - 1, itemsPerPage);"
            ],
            "changed_files": [
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7711d0fb3e42389507d31d7ab374145e27a64a00"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ddd68b53b73e1d1248318f6f504d03987909769",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510330724,
            "hunks": 3,
            "message": "[SYNCOPE-1233] Fixed NullPointerException in Topology when having a connector with no displayName",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "index 071da87f0c..e7709d1581 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "@@ -320,3 +320,6 @@ public class Topology extends BasePage {",
                "                         final TopologyNode topologynode = new TopologyNode(",
                "-                                conn.getKey(), conn.getDisplayName(), TopologyNode.Kind.CONNECTOR);",
                "+                                conn.getKey(),",
                "+                                StringUtils.isBlank(conn.getDisplayName()) // [SYNCOPE-1233]",
                "+                                ? conn.getBundleName() : conn.getDisplayName(),",
                "+                                TopologyNode.Kind.CONNECTOR);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "index 2d81c3d326..92842d12ac 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.client.console.topology.TopologyNode.Kind;",
                " import org.apache.syncope.client.console.topology.TopologyTogglePanel.UpdateEvent;",
                "+import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                " import org.apache.wicket.AttributeModifier;",
                "@@ -122,3 +123,7 @@ public class TopologyNodePanel extends Panel implements IAjaxIndicatorAware {",
                "             if (node.getKind() == Kind.CONNECTOR && key.equalsIgnoreCase(node.getKey())) {",
                "-                String displayName = new ConnectorRestClient().read(key).getDisplayName();",
                "+                ConnInstanceTO conn = new ConnectorRestClient().read(key);",
                "+",
                "+                String displayName =",
                "+                        // [SYNCOPE-1233]",
                "+                        StringUtils.isBlank(conn.getDisplayName()) ? conn.getBundleName() : conn.getDisplayName();"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1233": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3e7fe07fa39e497353d030debe6eb5a7fe1dee11"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1233",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87041307148d79b78a81ba0819f16bdc8a2401de",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513037991,
            "hunks": 2,
            "message": "[SYNCOPE-1248] Fix update user during approval process",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "index af91834327..51f71eb890 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "@@ -213,5 +213,6 @@ public class ApprovalDirectoryPanel",
                "                 } else {",
                "-                    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());",
                "-                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());",
                "                     previousUserTO = formTO.getUserTO();",
                "+                    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());",
                "+                    formTO.getUserTO().setPassword(null);",
                "+                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch()); ",
                "                 }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1248": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "227642a632a4f1c75d1bb88d18a22d025c094694"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1248",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "17fd3a998c3da838af7b358536fcc35b7082143a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513624897,
            "hunks": 12,
            "message": "[SYNCOPE-1252] fix the search feature + improve autocompletion for property field",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "index 98ff33cae8..80c0452883 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "@@ -393,48 +393,39 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 if (field.getModel().getObject().getType() == Type.GROUP_MEMBERSHIP) {",
                "-                    target.focusComponent(null);",
                "-                    property.getField().inputChanged();",
                "-                    property.getField().validate();",
                "-                    if (property.getField().isValid()) {",
                "-                        property.getField().valid();",
                "-                        property.getField().updateModel();",
                "-                        String[] inputAsArray = property.getField().getInputAsArray();",
                "-",
                "-                        if (StringUtils.isBlank(property.getField().getInput())",
                "-                                || inputAsArray.length == 0) {",
                "-                            property.setChoices(properties.getObject());",
                "-                        } else {",
                "-                            String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)",
                "-                                    ? inputAsArray[1]",
                "-                                    : property.getField().getInput();",
                "-                            inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))",
                "-                                    ? inputValue + \"*\"",
                "-                                    : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))",
                "-                                    ? \"*\" + inputValue",
                "-                                    : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")",
                "-                                    ? inputValue : \"*\" + inputValue + \"*\");",
                "-",
                "-                            if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {",
                "-                                List<GroupTO> filteredGroups =",
                "-                                        groupRestClient.search(\"/\",",
                "-                                                SyncopeClient.getGroupSearchConditionBuilder().",
                "-                                                        is(\"name\").equalToIgnoreCase(inputValue).",
                "-                                                        query(),",
                "-                                                1,",
                "-                                                AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,",
                "-                                                new SortParam<>(\"name\", true),",
                "-                                                null);",
                "-                                Collection<String> newList =",
                "-                                        CollectionUtils.collect(filteredGroups,",
                "-                                                new Transformer<GroupTO, String>() {",
                "-",
                "-                                            @Override",
                "-                                            public String transform(final GroupTO input) {",
                "-                                                return input.getName();",
                "-                                            }",
                "-                                        });",
                "-",
                "-                                final List<String> names = new ArrayList<>(newList);",
                "-                                Collections.sort(names);",
                "-                                property.setChoices(names);",
                "-                            }",
                "+                    String[] inputAsArray = property.getField().getInputAsArray();",
                "+",
                "+                    if (StringUtils.isBlank(property.getField().getInput())",
                "+                            || inputAsArray.length == 0) {",
                "+                        property.setChoices(properties.getObject());",
                "+                    } else {",
                "+                        String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)",
                "+                                ? inputAsArray[1]",
                "+                                : property.getField().getInput();",
                "+                        inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))",
                "+                                ? inputValue + \"*\"",
                "+                                : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))",
                "+                                ? \"*\" + inputValue",
                "+                                : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")",
                "+                                ? inputValue : \"*\" + inputValue + \"*\");",
                "+",
                "+                        if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {",
                "+                            List<GroupTO> filteredGroups = groupRestClient.search(\"/\",",
                "+                                    SyncopeClient.getGroupSearchConditionBuilder().",
                "+                                            is(\"name\").equalToIgnoreCase(inputValue).",
                "+                                            query(),",
                "+                                    1,",
                "+                                    AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,",
                "+                                    new SortParam<>(\"name\", true),",
                "+                                    null);",
                "+                            Collection<String> newList = CollectionUtils.collect(filteredGroups,",
                "+                                    new Transformer<GroupTO, String>() {",
                "+",
                "+                                @Override",
                "+                                public String transform(final GroupTO input) {",
                "+                                    return input.getName();",
                "+                                }",
                "+                            });",
                "+",
                "+                            final List<String> names = new ArrayList<>(newList);",
                "+                            Collections.sort(names);",
                "+                            property.setChoices(names);",
                "                         }",
                "@@ -447,5 +438,12 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 super.updateAjaxAttributes(attributes);",
                "-",
                "                 attributes.getAjaxCallListeners().clear();",
                "             }",
                "+        }, new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+",
                "+            private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+            @Override",
                "+            protected void onUpdate(final AjaxRequestTarget target) {",
                "+",
                "+            }",
                "         });",
                "@@ -517,3 +515,7 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 setFieldAccess(searchClause.getType(), property, comparator, value);",
                "+",
                "+                // reset property value in case and just in case of change of type",
                "+                property.setModelObject(StringUtils.EMPTY);",
                "                 target.add(property);",
                "+",
                "                 target.add(comparator);",
                "@@ -610,3 +612,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                     property.setEnabled(false);",
                "-                    property.setModelObject(null);",
                "+                    property.setModelObject(StringUtils.EMPTY);",
                "                     break;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "index 68ac17f219..80fa692f35 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "@@ -261,5 +261,10 @@ public final class SearchUtils implements Serializable {",
                "                         if (StringUtils.isNotBlank(clause.getProperty())) {",
                "-                            boolean isLong = availableSchemaTypes.get(clause.getProperty()) != null",
                "-                                    && availableSchemaTypes.get(clause.getProperty()).getType()",
                "-                                    == AttrSchemaType.Long;",
                "+                            boolean isLong = false;",
                "+                            boolean isDouble = false;",
                "+                            if (availableSchemaTypes.get(clause.getProperty()) != null) {",
                "+                                isLong = availableSchemaTypes.get(clause.getProperty()).getType()",
                "+                                        == AttrSchemaType.Long;",
                "+                                isDouble = availableSchemaTypes.get(clause.getProperty()).getType()",
                "+                                        == AttrSchemaType.Double;",
                "+                            }",
                "@@ -278,3 +283,5 @@ public final class SearchUtils implements Serializable {",
                "                                             ? property.lessThan(NumberUtils.toLong(value))",
                "-                                            : property.lexicalBefore(value);",
                "+                                            : isDouble",
                "+                                                    ? property.lessThan(NumberUtils.toDouble(value))",
                "+                                                    : property.lexicalBefore(value);",
                "                                     break;",
                "@@ -284,3 +291,5 @@ public final class SearchUtils implements Serializable {",
                "                                             ? property.lessOrEqualTo(NumberUtils.toLong(value))",
                "-                                            : property.lexicalNotAfter(value);",
                "+                                            : isDouble",
                "+                                                    ? property.lessOrEqualTo(NumberUtils.toDouble(value))",
                "+                                                    : property.lexicalNotAfter(value);",
                "                                     break;",
                "@@ -290,3 +299,5 @@ public final class SearchUtils implements Serializable {",
                "                                             ? property.greaterThan(NumberUtils.toLong(value))",
                "-                                            : property.lexicalAfter(value);",
                "+                                            : isDouble",
                "+                                                    ? property.greaterThan(NumberUtils.toDouble(value))",
                "+                                                    : property.lexicalAfter(value);",
                "                                     break;",
                "@@ -296,3 +307,5 @@ public final class SearchUtils implements Serializable {",
                "                                             ? property.greaterOrEqualTo(NumberUtils.toLong(value))",
                "-                                            : property.lexicalNotBefore(value);",
                "+                                            : isDouble",
                "+                                                    ? property.greaterOrEqualTo(NumberUtils.toDouble(value))",
                "+                                                    : property.lexicalNotBefore(value);",
                "                                     break;",
                "@@ -304,2 +317,8 @@ public final class SearchUtils implements Serializable {",
                "                                 case EQUALS:",
                "+                                    condition = isLong",
                "+                                            ? property.equalTo(NumberUtils.toLong(value))",
                "+                                            : isDouble",
                "+                                                    ? property.equalTo(NumberUtils.toDouble(value))",
                "+                                                    : property.equalToIgnoreCase(value);",
                "+                                    break;",
                "                                 default:"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1252": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9c381eb19761b7f768c1c7c06f529794c15e72ec"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1252",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9a4a1323f6f378b2e53b8657524568ce7c5709cc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510741810,
            "hunks": 3,
            "message": "[SYNCOPE-1235]",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "index f4b25d85e3..d12b5166f1 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "@@ -278,3 +278,3 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "         securityChecks(effectiveRealms, group.getRealm(), group.getKey());",
                "-",
                "+        ",
                "         GroupPatch patch = new GroupPatch();",
                "@@ -288,2 +288,4 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "         }));",
                "+        // [SYNCOPE-1235]",
                "+        patch.setUDynMembershipCond(group.getUDynMembershipCond());",
                "@@ -336,2 +338,4 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "         }));",
                "+        // [SYNCOPE-1235]",
                "+        patch.setUDynMembershipCond(group.getUDynMembershipCond());"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1235": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16f955516f3320ab96771952210b84e7f059586b"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68ab1fbed71e60ae9f4abbd8c89456a6e6849af3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509472017,
            "hunks": 9,
            "message": "[SYNCOPE-152] Exception Mapper",
            "diff": [
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "new file mode 100644",
                "index 0000000000..d211a35fdc",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api;",
                "+",
                "+import javax.ws.rs.ClientErrorException;",
                "+import javax.ws.rs.core.Response;",
                "+",
                "+public class ConflictException extends ClientErrorException {",
                "+",
                "+    private static final long serialVersionUID = -6845464464868163175L;",
                "+",
                "+    public ConflictException() {",
                "+        super(Response.Status.CONFLICT);",
                "+    }",
                "+",
                "+    public ConflictException(final String message) {",
                "+        super(message, Response.Status.CONFLICT);",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "new file mode 100644",
                "index 0000000000..e6ab195285",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api;",
                "+",
                "+import javax.ws.rs.ClientErrorException;",
                "+import javax.ws.rs.core.Response;",
                "+",
                "+public class PayloadTooLargeException extends ClientErrorException {",
                "+",
                "+    private static final long serialVersionUID = -3980136349506530672L;",
                "+",
                "+    public PayloadTooLargeException() {",
                "+        super(Response.Status.REQUEST_ENTITY_TOO_LARGE);",
                "+    }",
                "+",
                "+    public PayloadTooLargeException(final String message) {",
                "+        super(message, Response.Status.REQUEST_ENTITY_TOO_LARGE);",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java",
                "new file mode 100644",
                "index 0000000000..4b3679826c",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api;",
                "+",
                "+import javax.ws.rs.BadRequestException;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "+",
                "+public class SCIMBadRequestException extends BadRequestException {",
                "+",
                "+    private static final long serialVersionUID = -2588839750716910491L;",
                "+",
                "+    private final ErrorType errorType;",
                "+",
                "+    public SCIMBadRequestException(final ErrorType errorType) {",
                "+        super();",
                "+        this.errorType = errorType;",
                "+    }",
                "+",
                "+    public SCIMBadRequestException(final ErrorType errorType, final String detail) {",
                "+        super(detail);",
                "+        this.errorType = errorType;",
                "+    }",
                "+",
                "+    public ErrorType getErrorType() {",
                "+        return errorType;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "new file mode 100644",
                "index 0000000000..d7112d1b9a",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonFormat;",
                "+import com.fasterxml.jackson.annotation.JsonFormat.Shape;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+",
                "+public class SCIMError extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = -8836902509266522394L;",
                "+",
                "+    private final List<String> schemas = Arrays.asList(Resource.Error.schema());",
                "+",
                "+    private final ErrorType scimType;",
                "+",
                "+    private final String detail;",
                "+",
                "+    @JsonFormat(shape = Shape.STRING)",
                "+    private final int status = 400;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public SCIMError(",
                "+            @JsonProperty(\"scimType\") final ErrorType scimType,",
                "+            @JsonProperty(\"detail\") final String detail) {",
                "+",
                "+        this.scimType = scimType;",
                "+        this.detail = detail;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public ErrorType getScimType() {",
                "+        return scimType;",
                "+    }",
                "+",
                "+    public String getDetail() {",
                "+        return detail;",
                "+    }",
                "+",
                "+    public int getStatus() {",
                "+        return status;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ErrorType.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ErrorType.java",
                "new file mode 100644",
                "index 0000000000..bbd7489ee1",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ErrorType.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.type;",
                "+",
                "+public enum ErrorType {",
                "+    invalidFilter,",
                "+    tooMany,",
                "+    uniqueness,",
                "+    mutability,",
                "+    invalidSyntax,",
                "+    invalidPath,",
                "+    noTarget,",
                "+    invalidValue,",
                "+    invalidVers,",
                "+    sensitive;",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "index 37b15b6556..8fb2bdeed1 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "@@ -28,3 +28,4 @@ public enum Resource {",
                "     Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),",
                "-    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\");",
                "+    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"),",
                "+    Error(\"urn:ietf:params:scim:api:messages:2.0:Error\");",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "new file mode 100644",
                "index 0000000000..e525e77df5",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "@@ -0,0 +1,210 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.cxf;",
                "+",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import javax.validation.ValidationException;",
                "+import javax.ws.rs.ForbiddenException;",
                "+import javax.ws.rs.NotAuthorizedException;",
                "+import javax.ws.rs.NotFoundException;",
                "+import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.core.Response.ResponseBuilder;",
                "+import javax.ws.rs.ext.ExceptionMapper;",
                "+import javax.ws.rs.ext.Provider;",
                "+import org.apache.commons.lang3.exception.ExceptionUtils;",
                "+import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "+import org.apache.syncope.common.lib.types.EntityViolationType;",
                "+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;",
                "+import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;",
                "+import org.apache.syncope.core.persistence.api.dao.DuplicateException;",
                "+import org.apache.syncope.core.persistence.api.dao.MalformedPathException;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;",
                "+import org.apache.syncope.core.workflow.api.WorkflowException;",
                "+import org.apache.syncope.ext.scimv2.api.ConflictException;",
                "+import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMError;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "+import org.identityconnectors.framework.common.exceptions.ConfigurationException;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.dao.DataIntegrityViolationException;",
                "+import org.springframework.security.access.AccessDeniedException;",
                "+import org.springframework.transaction.TransactionSystemException;",
                "+",
                "+@Provider",
                "+public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(SCIMExceptionMapper.class);",
                "+",
                "+    private static Class<?> ENTITYEXISTS_EXCLASS = null;",
                "+",
                "+    private static Class<?> PERSISTENCE_EXCLASS = null;",
                "+",
                "+    private static Class<?> ROLLBACK_EXCLASS = null;",
                "+",
                "+    private static Class<?> JPASYSTEM_EXCLASS = null;",
                "+",
                "+    private static Class<?> CONNECTOR_EXCLASS = null;",
                "+",
                "+    private static Class<?> IBATISPERSISTENCE_EXCLASS = null;",
                "+",
                "+    static {",
                "+        try {",
                "+            ENTITYEXISTS_EXCLASS = Class.forName(\"javax.persistence.EntityExistsException\");",
                "+            PERSISTENCE_EXCLASS = Class.forName(\"javax.persistence.PersistenceException\");",
                "+            ROLLBACK_EXCLASS = Class.forName(\"javax.persistence.RollbackException\");",
                "+            JPASYSTEM_EXCLASS = Class.forName(\"org.springframework.orm.jpa.JpaSystemException\");",
                "+            CONNECTOR_EXCLASS = Class.forName(\"org.identityconnectors.framework.common.exceptions.ConnectorException\");",
                "+            IBATISPERSISTENCE_EXCLASS = Class.forName(\"org.apache.ibatis.exceptions.PersistenceException\");",
                "+        } catch (ClassNotFoundException e) {",
                "+            // ignore",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response toResponse(final Exception ex) {",
                "+        LOG.error(\"Exception thrown\", ex);",
                "+",
                "+        ResponseBuilder builder;",
                "+",
                "+        if (ex instanceof AccessDeniedException",
                "+                || ex instanceof ForbiddenException",
                "+                || ex instanceof NotAuthorizedException",
                "+                || ex instanceof NotFoundException",
                "+                || ex instanceof ConflictException",
                "+                || ex instanceof PayloadTooLargeException) {",
                "+",
                "+            // leaves the default exception processing",
                "+            builder = null;",
                "+        } else if (ex instanceof SyncopeClientException) {",
                "+            SyncopeClientException sce = (SyncopeClientException) ex;",
                "+            builder = builder(sce.getType(), ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof DelegatedAdministrationException",
                "+                || ExceptionUtils.getRootCause(ex) instanceof DelegatedAdministrationException) {",
                "+",
                "+            builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ENTITYEXISTS_EXCLASS.isAssignableFrom(ex.getClass())",
                "+                || ex instanceof DuplicateException",
                "+                || PERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())",
                "+                && ENTITYEXISTS_EXCLASS.isAssignableFrom(ex.getCause().getClass())) {",
                "+",
                "+            builder = builder(ClientExceptionType.EntityExists, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof DataIntegrityViolationException",
                "+                || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "+",
                "+            builder = builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (CONNECTOR_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "+            builder = builder(ClientExceptionType.ConnectorException, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else {",
                "+            builder = processInvalidEntityExceptions(ex);",
                "+            if (builder == null) {",
                "+                builder = processBadRequestExceptions(ex);",
                "+            }",
                "+            // process JAX-RS validation errors",
                "+            if (builder == null && ex instanceof ValidationException) {",
                "+                builder = builder(ClientExceptionType.RESTValidation, ExceptionUtils.getRootCauseMessage(ex));",
                "+            }",
                "+            // ...or just report as InternalServerError",
                "+            if (builder == null) {",
                "+                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);",
                "+            }",
                "+        }",
                "+",
                "+        return builder == null ? null : builder.build();",
                "+    }",
                "+",
                "+    private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {",
                "+        InvalidEntityException iee = null;",
                "+",
                "+        if (ex instanceof InvalidEntityException) {",
                "+            iee = (InvalidEntityException) ex;",
                "+        }",
                "+        if (ex instanceof TransactionSystemException && ROLLBACK_EXCLASS.isAssignableFrom(ex.getCause().getClass())",
                "+                && ex.getCause().getCause() instanceof InvalidEntityException) {",
                "+",
                "+            iee = (InvalidEntityException) ex.getCause().getCause();",
                "+        }",
                "+",
                "+        if (iee != null) {",
                "+            ClientExceptionType exType;",
                "+            if (iee.getEntityClassSimpleName().endsWith(\"Policy\")) {",
                "+                exType = ClientExceptionType.InvalidPolicy;",
                "+            } else if (iee.getEntityClassSimpleName().equals(PlainAttr.class.getSimpleName())) {",
                "+                exType = ClientExceptionType.InvalidValues;",
                "+            } else {",
                "+                try {",
                "+                    exType = ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());",
                "+                } catch (IllegalArgumentException e) {",
                "+                    // ignore",
                "+                    exType = ClientExceptionType.InvalidEntity;",
                "+                }",
                "+            }",
                "+",
                "+            StringBuilder msg = new StringBuilder();",
                "+",
                "+            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {",
                "+                for (EntityViolationType violationType : violation.getValue()) {",
                "+                    msg.append(violationType.name()).append(\": \").append(violationType.getMessage()).append('\\n');",
                "+                }",
                "+            }",
                "+",
                "+            return builder(exType, msg.toString());",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private ResponseBuilder processBadRequestExceptions(final Exception ex) {",
                "+        if (ex instanceof WorkflowException) {",
                "+            return builder(ClientExceptionType.Workflow, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (PERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "+            return builder(ClientExceptionType.GenericPersistence, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (IBATISPERSISTENCE_EXCLASS != null && IBATISPERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "+            return builder(ClientExceptionType.Workflow, \"Currently unavailable. Please try later.\");",
                "+        } else if (JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "+            return builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof ConfigurationException) {",
                "+            return builder(ClientExceptionType.InvalidConnIdConf, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof ParsingValidationException) {",
                "+            return builder(ClientExceptionType.InvalidValues, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof MalformedPathException) {",
                "+            return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {",
                "+        ResponseBuilder builder = Response.status(hType.getResponseStatus());",
                "+",
                "+        if (hType.getResponseStatus() == Response.Status.BAD_REQUEST) {",
                "+            ErrorType scimType = null;",
                "+            if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {",
                "+                scimType = ErrorType.invalidValue;",
                "+            }",
                "+",
                "+            builder = builder.entity(new SCIMError(scimType, msg));",
                "+        }",
                "+",
                "+        return builder;",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "index ebbbe6e102..cb306bf6c7 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml",
                "@@ -37,2 +37,4 @@ under the License.",
                "+  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.ext.scimv2.cxf.SCIMExceptionMapper\"/>",
                "+",
                "   <bean id=\"validationProvider\" class=\"org.apache.cxf.validation.BeanValidationProvider\"/>",
                "@@ -80,2 +82,3 @@ under the License.",
                "       <ref bean=\"jsonProvider\"/>",
                "+      <ref bean=\"exceptionMapper\"/>",
                "       <ref bean=\"addETagFilter\"/>"
            ],
            "changed_files": [
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ErrorType.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "781ae9367ef09bc74bc3c3e5d2007857d0ddc57d"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "228e10e28da14362733e9ad3901756526d0e5e5d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512465474,
            "hunks": 13,
            "message": "[SYNCOPE-1190] Toggle panel not refreshed after connector name update",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "index da58347a13..bc2e99fa52 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "@@ -127,3 +127,3 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "-        // cahnge close callback in order to update header after model update",
                "+        // change close callback in order to update header after model update",
                "         modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "index 9f0260e21d..a074dd464d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "@@ -68,2 +68,4 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "     protected static final Logger LOG = LoggerFactory.getLogger(TogglePanel.class);",
                "+    ",
                "+    protected static final int HEADER_FIRST_ABBREVIATION = 25;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNode.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNode.java",
                "index 95cc03b899..47bf258377 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNode.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNode.java",
                "@@ -47,3 +47,3 @@ public class TopologyNode implements Serializable {",
                "-    private final String displayName;",
                "+    private String displayName;",
                "@@ -75,2 +75,6 @@ public class TopologyNode implements Serializable {",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "     public String getConnectionDisplayName() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "index 92842d12ac..ad0960ba9a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "@@ -135,2 +135,3 @@ public class TopologyNodePanel extends Panel implements IAjaxIndicatorAware {",
                "                 target.add(label);",
                "+                node.setDisplayName(displayName);",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "index e0cb0cc475..5f33ed5ca0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.client.console.topology;",
                "+",
                " import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;",
                "@@ -55,2 +56,3 @@ import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDa",
                " import org.apache.wicket.event.Broadcast;",
                "+import org.apache.wicket.event.IEvent;",
                " import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;",
                "@@ -150,3 +152,3 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {",
                "             case RESOURCE:",
                "-                container.addOrReplace(getResurceFragment(node, pageRef));",
                "+                container.addOrReplace(getResourceFragment(node, pageRef));",
                "                 break;",
                "@@ -360,3 +362,3 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {",
                "-    private Fragment getResurceFragment(final TopologyNode node, final PageReference pageRef) {",
                "+    private Fragment getResourceFragment(final TopologyNode node, final PageReference pageRef) {",
                "         Fragment fragment = new Fragment(\"actions\", \"resourceActions\", this);",
                "@@ -642,2 +644,18 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {",
                "+    @Override",
                "+    public void onEvent(final IEvent<?> event) {",
                "+        super.onEvent(event);",
                "+",
                "+        if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {",
                "+            final AjaxWizard.NewItemFinishEvent item = AjaxWizard.NewItemFinishEvent.class.cast(event.getPayload());",
                "+            final Serializable result = item.getResult();",
                "+            final AjaxRequestTarget target = item.getTarget();",
                "+            if (result != null && result instanceof ConnInstanceTO) {",
                "+                // update Toggle Panel header",
                "+                ConnInstanceTO conn = ConnInstanceTO.class.cast(result);",
                "+                setHeader(target, StringUtils.abbreviate(conn.getDisplayName(), HEADER_FIRST_ABBREVIATION));",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     public final class UpdateEvent {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "index a43f67e364..1ebfc25b24 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "@@ -127,5 +127,5 @@ public class ActionLinksTogglePanel<T extends Serializable> extends TogglePanel<",
                "         }",
                "-        setHeader(target, StringUtils.abbreviate(header, 25));",
                "+        setHeader(target, StringUtils.abbreviate(header, HEADER_FIRST_ABBREVIATION));",
                "     }",
                "-        ",
                "+",
                "     public void toggleWithContent(",
                "@@ -149,3 +149,3 @@ public class ActionLinksTogglePanel<T extends Serializable> extends TogglePanel<",
                "         target.add(this.container);",
                "-        ",
                "+",
                "         toggle(target, modelObject, true);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNode.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1190": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "84a928b58404843d24d4e092c18313befbc65da8"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1190",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "30d90566dfe89adbeae9266ad0368b643a806087",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511164480,
            "hunks": 2,
            "message": "[SYNCOPE-1236] getTotalCount(), not size()",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java",
                "index 8f2228ef74..be0929bf62 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java",
                "@@ -73,2 +73,9 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien",
                "+    public int count(final AnyTypeKind anyTypeKind, final String entityKey, final String notification) {",
                "+        return getService(TaskService.class).list(",
                "+                new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).",
                "+                        anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).build()).",
                "+                getTotalCount();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "index 5ed2e0590e..5cd47c7adc 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java",
                "@@ -220,3 +220,3 @@ public abstract class NotificationTaskDirectoryPanel",
                "         public long size() {",
                "-            return restClient.listNotificationTasks(notification, anyTypeKind, entityKey, 1, -1, getSort()).size();",
                "+            return restClient.count(anyTypeKind, entityKey, notification);",
                "         }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1236": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ff7e5af0f52919cb20933ae9229baf7575b3cd03"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1236",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a8dd6b794e85488e2281de4a2027d727fcdbd061",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515149287,
            "hunks": 11,
            "message": "[SYNCOPE-1262] Taking the SwaggerToOpenApiConversionFilter approach",
            "diff": [
                "diff --git a/core/rest-cxf/src/main/resources/restCXFContext.xml b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "index 1b2e17fa4a..2b79b316a3 100644",
                "--- a/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "+++ b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "@@ -115,2 +115,3 @@ under the License.",
                "   </bean>",
                "+  <bean id=\"sw2OpenAPI\" class=\"org.apache.cxf.jaxrs.swagger.openapi.SwaggerToOpenApiConversionFilter\"/>",
                "@@ -141,2 +142,3 @@ under the License.",
                "       <ref bean=\"wadlGenerator\"/>",
                "+      <ref bean=\"sw2OpenAPI\"/>",
                "     </jaxrs:providers>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index 65fd446981..47344a14fa 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -114,3 +114,2 @@ under the License.",
                "                     <exclude>index.html</exclude>",
                "-                    <exclude>swagger-ui.min.js</exclude>",
                "                   </excludes>",
                "@@ -123,22 +122,2 @@ under the License.",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-antrun-plugin</artifactId>",
                "-        <inherited>true</inherited>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>addMatrixParamSupport</id>",
                "-            <phase>process-resources</phase>",
                "-            <goals>",
                "-              <goal>run</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <target>",
                "-                <replace file=\"${project.build.directory}/swagger-ui/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}/swagger-ui.js\" token=\"return url + requestUrl + querystring;\" value=\"&#xA;var matrixstring = '';&#xA; for (var i = 0; i &lt; this.parameters.length; i++) {&#xA; var param = this.parameters[i];&#xA; &#xA; if (param.in === 'matrix') {&#xA; matrixstring += ';' + this.encodeQueryParam(param.name) + '=' + this.encodeQueryParam(args[param.name]);&#xA; }&#xA; }&#xA; &#xA; var url = this.scheme + '://' + this.host;&#xA; &#xA; if (this.basePath !== '/') {&#xA; url += this.basePath;&#xA; }&#xA; return url + requestUrl + matrixstring + querystring;\" />",
                "-              </target>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-          ",
                "       <plugin>",
                "diff --git a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "index 6df05db8e9..b97c108de4 100644",
                "--- a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "+++ b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "@@ -19,140 +19,128 @@ under the License.",
                " -->",
                "-<html>",
                "+<html lang=\"en\">",
                " <head>",
                "   <meta charset=\"UTF-8\">",
                "-  <meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\">",
                "-  <!-- <ApacheSyncope -->",
                "+  <!-- <ApacheSyncope> -->",
                "   <!--<title>Swagger UI</title>-->",
                "   <title>Swagger UI - Apache Syncope ${syncope.version}</title>",
                "-  <!-- </ApacheSyncope -->",
                "-  <link rel=\"icon\" type=\"image/png\" href=\"images/favicon-32x32.png\" sizes=\"32x32\" />",
                "-  <link rel=\"icon\" type=\"image/png\" href=\"images/favicon-16x16.png\" sizes=\"16x16\" />",
                "-  <link href='css/typography.css' media='screen' rel='stylesheet' type='text/css'/>",
                "-  <link href='css/reset.css' media='screen' rel='stylesheet' type='text/css'/>",
                "-  <link href='css/screen.css' media='screen' rel='stylesheet' type='text/css'/>",
                "-  <link href='css/reset.css' media='print' rel='stylesheet' type='text/css'/>",
                "-  <link href='css/print.css' media='print' rel='stylesheet' type='text/css'/>",
                "-",
                "-  <script src='lib/object-assign-pollyfill.js' type='text/javascript'></script>",
                "-  <script src='lib/jquery-1.8.0.min.js' type='text/javascript'></script>",
                "-  <script src='lib/jquery.slideto.min.js' type='text/javascript'></script>",
                "-  <script src='lib/jquery.wiggle.min.js' type='text/javascript'></script>",
                "-  <script src='lib/jquery.ba-bbq.min.js' type='text/javascript'></script>",
                "-  <script src='lib/handlebars-4.0.5.js' type='text/javascript'></script>",
                "-  <script src='lib/lodash.min.js' type='text/javascript'></script>",
                "-  <script src='lib/backbone-min.js' type='text/javascript'></script>",
                "-  <script src='swagger-ui.js' type='text/javascript'></script>",
                "-  <script src='lib/highlight.9.1.0.pack.js' type='text/javascript'></script>",
                "-  <script src='lib/highlight.9.1.0.pack_extended.js' type='text/javascript'></script>",
                "-  <script src='lib/jsoneditor.min.js' type='text/javascript'></script>",
                "-  <script src='lib/marked.js' type='text/javascript'></script>",
                "-  <script src='lib/swagger-oauth.js' type='text/javascript'></script>",
                "-",
                "-  <!-- Some basic translations -->",
                "-  <!-- <script src='lang/translator.js' type='text/javascript'></script> -->",
                "-  <!-- <script src='lang/ru.js' type='text/javascript'></script> -->",
                "-  <!-- <script src='lang/en.js' type='text/javascript'></script> -->",
                "-",
                "-  <script type=\"text/javascript\">",
                "-    $(function () {",
                "-      // <ApacheSyncope>",
                "-      /*var url = window.location.search.match(/url=([^&]+)/);",
                "-      if (url && url.length > 1) {",
                "-        url = decodeURIComponent(url[1]);",
                "-      } else {",
                "-        url = \"http://petstore.swagger.io/v2/swagger.json\";",
                "-      }*/",
                "-      var url = window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/swagger.json\";",
                "-      // </ApacheSyncope>",
                "-",
                "-      hljs.configure({",
                "-        highlightSizeThreshold: 5000",
                "-      });",
                "-",
                "-      // Pre load translate...",
                "-      if(window.SwaggerTranslator) {",
                "-        window.SwaggerTranslator.translate();",
                "-      }",
                "-      window.swaggerUi = new SwaggerUi({",
                "-        url: url,",
                "-        dom_id: \"swagger-ui-container\",",
                "-        supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],",
                "-        onComplete: function(swaggerApi, swaggerUi){",
                "-          if(typeof initOAuth == \"function\") {",
                "-            initOAuth({",
                "-              clientId: \"your-client-id\",",
                "-              clientSecret: \"your-client-secret-if-required\",",
                "-              realm: \"your-realms\",",
                "-              appName: \"your-app-name\",",
                "-              scopeSeparator: \" \",",
                "-              additionalQueryStringParams: {}",
                "-            });",
                "-          }",
                "-",
                "-          if(window.SwaggerTranslator) {",
                "-            window.SwaggerTranslator.translate();",
                "-          }",
                "-",
                "-          // <ApacheSyncope>",
                "-          addApiKeyAuthorization();",
                "-          // </ApacheSyncope>",
                "-        },",
                "-        onFailure: function(data) {",
                "-          log(\"Unable to Load SwaggerUI\");",
                "-        },",
                "-        docExpansion: \"none\",",
                "-        jsonEditor: false,",
                "-        defaultModelRendering: 'schema',",
                "-        showRequestHeaders: false,",
                "-        showOperationIds: false",
                "-      });",
                "-",
                "-      // <ApacheSyncope>",
                "-      function addApiKeyAuthorization() {",
                "-        var username = $('#input_username').val().trim();",
                "-        var password = $('#input_password').val().trim();",
                "-        if (username !== \"\" && password !== \"\") {",
                "-          window.swaggerUi.api.clientAuthorizations.add(",
                "-                    \"basicAuth\", new SwaggerClient.PasswordAuthorization(username, password));",
                "-        }",
                "-      }",
                "-",
                "-      $(\"#input_username\").blur(function () {",
                "-          addApiKeyAuthorization();",
                "-      });",
                "-      $(\"#input_password\").blur(function () {",
                "-          addApiKeyAuthorization();",
                "-      });",
                "-      // </ApacheSyncope>",
                "-",
                "-      window.swaggerUi.load();",
                "-",
                "-      function log() {",
                "-        if ('console' in window) {",
                "-          console.log.apply(console, arguments);",
                "-        }",
                "-      }",
                "-  });",
                "-  </script>",
                "+  <!-- </ApacheSyncope> -->",
                "+  <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\" rel=\"stylesheet\">",
                "+  <link rel=\"stylesheet\" type=\"text/css\" href=\"./swagger-ui.css\" >",
                "+  <link rel=\"icon\" type=\"image/png\" href=\"./favicon-32x32.png\" sizes=\"32x32\" />",
                "+  <link rel=\"icon\" type=\"image/png\" href=\"./favicon-16x16.png\" sizes=\"16x16\" />",
                "+  <style>",
                "+    html",
                "+    {",
                "+      box-sizing: border-box;",
                "+      overflow: -moz-scrollbars-vertical;",
                "+      overflow-y: scroll;",
                "+    }",
                "+    *,",
                "+    *:before,",
                "+    *:after",
                "+    {",
                "+      box-sizing: inherit;",
                "+    }",
                "+",
                "+    body {",
                "+      margin:0;",
                "+      background: #fafafa;",
                "+    }",
                "+    ",
                "+    // <ApacheSyncope>",
                "+    .download-url-input {",
                "+      pointer-events:none !important;",
                "+    }",
                "+    .download-url-button {",
                "+      pointer-events:none !important;",
                "+    }",
                "+    .download-url-wrapper {",
                "+      display: none !important;",
                "+    }",
                "+    // </ApacheSyncope>",
                "+  </style>",
                " </head>",
                "-<body class=\"swagger-section\">",
                "-<div id='header'>",
                "-  <div class=\"swagger-ui-wrap\">",
                "-    <a id=\"logo\" href=\"http://swagger.io\"><img class=\"logo__img\" alt=\"swagger\" height=\"30\" width=\"30\" src=\"images/logo_small.png\" /><span class=\"logo__title\">swagger</span></a>",
                "-    <form id='api_selector'>",
                "-      <!-- <ApacheSyncope -->",
                "-      <!--<div class='input'><input placeholder=\"http://example.com/api\" id=\"input_baseUrl\" name=\"baseUrl\" type=\"text\"/></div>-->",
                "-      <div class='input'><input placeholder=\"username\" id=\"input_username\" name=\"username\" type=\"text\"/></div>",
                "-      <div id='auth_container'></div>",
                "-      <!--<div class='input'><a id=\"explore\" class=\"header__btn\" href=\"#\" data-sw-translate>Explore</a></div>-->",
                "-      <div class='input'><input placeholder=\"password\" id=\"input_password\" name=\"password\" type=\"password\"/></div>",
                "-      <!-- </ApacheSyncope -->",
                "-    </form>",
                "-  </div>",
                "-</div>",
                "-",
                "-<div id=\"message-bar\" class=\"swagger-ui-wrap\" data-sw-translate>&nbsp;</div>",
                "-<div id=\"swagger-ui-container\" class=\"swagger-ui-wrap\"></div>",
                "+<body>",
                "+",
                "+<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"position:absolute;width:0;height:0\">",
                "+  <defs>",
                "+    <symbol viewBox=\"0 0 20 20\" id=\"unlocked\">",
                "+          <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V6h2v-.801C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8z\"></path>",
                "+    </symbol>",
                "+",
                "+    <symbol viewBox=\"0 0 20 20\" id=\"locked\">",
                "+      <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8zM12 8H8V5.199C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8z\"/>",
                "+    </symbol>",
                "+",
                "+    <symbol viewBox=\"0 0 20 20\" id=\"close\">",
                "+      <path d=\"M14.348 14.849c-.469.469-1.229.469-1.697 0L10 11.819l-2.651 3.029c-.469.469-1.229.469-1.697 0-.469-.469-.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-.469-.469-.469-1.228 0-1.697.469-.469 1.228-.469 1.697 0L10 8.183l2.651-3.031c.469-.469 1.228-.469 1.697 0 .469.469.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c.469.469.469 1.229 0 1.698z\"/>",
                "+    </symbol>",
                "+",
                "+    <symbol viewBox=\"0 0 20 20\" id=\"large-arrow\">",
                "+      <path d=\"M13.25 10L6.109 2.58c-.268-.27-.268-.707 0-.979.268-.27.701-.27.969 0l7.83 7.908c.268.271.268.709 0 .979l-7.83 7.908c-.268.271-.701.27-.969 0-.268-.269-.268-.707 0-.979L13.25 10z\"/>",
                "+    </symbol>",
                "+",
                "+    <symbol viewBox=\"0 0 20 20\" id=\"large-arrow-down\">",
                "+      <path d=\"M17.418 6.109c.272-.268.709-.268.979 0s.271.701 0 .969l-7.908 7.83c-.27.268-.707.268-.979 0l-7.908-7.83c-.27-.268-.27-.701 0-.969.271-.268.709-.268.979 0L10 13.25l7.418-7.141z\"/>",
                "+    </symbol>",
                "+",
                "+",
                "+    <symbol viewBox=\"0 0 24 24\" id=\"jump-to\">",
                "+      <path d=\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z\"/>",
                "+    </symbol>",
                "+",
                "+    <symbol viewBox=\"0 0 24 24\" id=\"expand\">",
                "+      <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\"/>",
                "+    </symbol>",
                "+",
                "+  </defs>",
                "+</svg>",
                "+",
                "+<div id=\"swagger-ui\"></div>",
                "+",
                "+<script src=\"./swagger-ui-bundle.js\"> </script>",
                "+<script src=\"./swagger-ui-standalone-preset.js\"> </script>",
                "+<script>",
                "+window.onload = function() {",
                "+  ",
                "+  // Build a system",
                "+  // <ApacheSyncope>",
                "+  /*const ui = SwaggerUIBundle({",
                "+    url: window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/openapi.json\",",
                "+    dom_id: '#swagger-ui',",
                "+    deepLinking: true,",
                "+    presets: [",
                "+      SwaggerUIBundle.presets.apis,",
                "+      SwaggerUIStandalonePreset",
                "+    ],",
                "+    plugins: [",
                "+      SwaggerUIBundle.plugins.DownloadUrl",
                "+    ],",
                "+    layout: \"StandaloneLayout\"",
                "+  })*/",
                "+  const ui = SwaggerUIBundle({",
                "+    url: window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/openapi.json\",",
                "+    dom_id: '#swagger-ui',",
                "+    deepLinking: true,",
                "+    docExpansion: 'none',",
                "+    displayOperationId: true,",
                "+    operationsSorter: 'alpha',",
                "+    tagSorter: 'alpha',",
                "+    presets: [",
                "+      SwaggerUIBundle.presets.apis,",
                "+      SwaggerUIStandalonePreset",
                "+    ],",
                "+    plugins: [",
                "+      SwaggerUIBundle.plugins.DownloadUrl",
                "+    ],",
                "+    layout: \"StandaloneLayout\"",
                "+  })",
                "+  // </ApacheSyncope>",
                "+",
                "+  window.ui = ui",
                "+}",
                "+</script>",
                " </body>",
                "+",
                " </html>",
                "diff --git a/pom.xml b/pom.xml",
                "index 10f3f05168..3220bc47f6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -367,3 +367,3 @@ under the License.",
                "-    <cxf.version>3.2.1</cxf.version>",
                "+    <cxf.version>3.2.2-SNAPSHOT</cxf.version>",
                "@@ -418,3 +418,3 @@ under the License.",
                "     <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>2.2.10</swagger-ui.version>",
                "+    <swagger-ui.version>3.8.0</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>"
            ],
            "changed_files": [
                "core/rest-cxf/src/main/resources/restCXFContext.xml",
                "ext/swagger-ui/pom.xml",
                "ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1262": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "aa493009f344b0abee2acd5cf5c044fdb4d98ddc"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1262",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23acffb41caee0440f36f5038d8149c54749c86b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510743916,
            "hunks": 3,
            "message": "[SYNCOPE-1235] Added conditions for AnyObject",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "index d12b5166f1..8ae90ceba5 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "@@ -288,4 +288,4 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "         }));",
                "-        // [SYNCOPE-1235]",
                "         patch.setUDynMembershipCond(group.getUDynMembershipCond());",
                "+        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());",
                "@@ -338,3 +338,3 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "         }));",
                "-        // [SYNCOPE-1235]",
                "+        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());",
                "         patch.setUDynMembershipCond(group.getUDynMembershipCond());"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1235": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "37c709727e8f4833e38580404c0145d1472b91ef"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "71b39dd4b3cb552e8f5f0d8fc5eaf979252868af",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517240282,
            "hunks": 5,
            "message": "[SYNCOPE-1265] Populating the IdP cache upon startup",
            "diff": [
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java",
                "index 308b95e004..8d9fba02ef 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java",
                "@@ -32,5 +32,10 @@ import org.apache.syncope.core.provisioning.api.EntitlementsHolder;",
                " import org.apache.syncope.common.lib.types.SAML2SPEntitlement;",
                "+import org.apache.syncope.core.logic.saml2.SAML2IdPCache;",
                " import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;",
                "+import org.apache.syncope.core.persistence.api.DomainsHolder;",
                "+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.ResourceWithFallbackLoader;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.wss4j.common.saml.OpenSAMLUtil;",
                "@@ -65,2 +70,11 @@ public class SAML2SPLoader implements SyncopeLoader {",
                "+    @Autowired",
                "+    private DomainsHolder domainsHolder;",
                "+",
                "+    @Autowired",
                "+    private SAML2IdPCache cache;",
                "+",
                "+    @Autowired",
                "+    private SAML2IdPDAO idpDAO;",
                "+",
                "     private boolean inited;",
                "@@ -129,2 +143,19 @@ public class SAML2SPLoader implements SyncopeLoader {",
                "         }",
                "+",
                "+        for (String domain : domainsHolder.getDomains().keySet()) {",
                "+            AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {",
                "+",
                "+                @Override",
                "+                public Void exec() {",
                "+                    for (SAML2IdP idp : idpDAO.findAll()) {",
                "+                        try {",
                "+                            cache.put(idp);",
                "+                        } catch (Exception e) {",
                "+                            LOG.error(\"Could not cache the SAML 2.0 IdP with key \", idp.getEntityID(), e);",
                "+                        }",
                "+                    }",
                "+                    return null;",
                "+                }",
                "+            });",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1265": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "78af1481312217b78cb41bd1dc292c6e25324c23"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "814fe4ae659b7c30137d87c83ac5cc2a50fae8fb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513345780,
            "hunks": 25,
            "message": "[SYNCOPE-1247] Group search and autocompletion does now work with several groups",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "index 863face754..5ba4e5f5f2 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "@@ -23,2 +23,3 @@ import java.net.URLDecoder;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "@@ -33,2 +34,3 @@ import org.apache.syncope.common.rest.api.service.SyncopeService;",
                " import org.apache.wicket.request.resource.AbstractResource;",
                "+import org.apache.wicket.util.string.StringValue;",
                "@@ -55,4 +57,16 @@ public class GroupResource extends BaseResource {",
                "                     toString(SyncopeConstants.ROOT_REALM), \"UTF-8\");",
                "+            StringValue term = attributes.getParameters().get(\"term\");",
                "+",
                "+            final GroupResponse groupResponse = new GroupResponse();",
                "+            final int totGroups = SyncopeEnduserSession.get().",
                "+                    getService(SyncopeService.class).numbers().getTotalGroups();",
                "             final List<GroupTO> groupTOs = SyncopeEnduserSession.get().",
                "-                    getService(SyncopeService.class).searchAssignableGroups(realm, 1, 30).getResult();",
                "+                    getService(SyncopeService.class).searchAssignableGroups(",
                "+                    realm,",
                "+                    term.isNull() || term.isEmpty() ? null : URLDecoder.decode(term.toString(), \"UTF-8\"),",
                "+                    1,",
                "+                    30).getResult();",
                "+            groupResponse.setTotGroups(totGroups);",
                "+            groupResponse.setGroupTOs(groupTOs);",
                "+",
                "             response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "@@ -62,3 +76,3 @@ public class GroupResource extends BaseResource {",
                "                 public void writeData(final Attributes attributes) throws IOException {",
                "-                    attributes.getResponse().write(MAPPER.writeValueAsString(groupTOs));",
                "+                    attributes.getResponse().write(MAPPER.writeValueAsString(groupResponse));",
                "                 }",
                "@@ -77,2 +91,25 @@ public class GroupResource extends BaseResource {",
                "+    private class GroupResponse {",
                "+",
                "+        private List<GroupTO> groups;",
                "+",
                "+        private int totGroups;",
                "+",
                "+        public List<GroupTO> getGroupTOs() {",
                "+            return Collections.unmodifiableList(groups);",
                "+        }",
                "+",
                "+        public void setGroupTOs(final List<GroupTO> groups) {",
                "+            this.groups = groups;",
                "+        }",
                "+",
                "+        public int getTotGroups() {",
                "+            return totGroups;",
                "+        }",
                "+",
                "+        public void setTotGroups(final int totGroups) {",
                "+            this.totGroups = totGroups;",
                "+        }",
                "+",
                "+    }",
                " }",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "index f2e5d3c018..1e7b3c4a81 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "@@ -71,3 +71,18 @@ under the License.",
                " .treasure-overlay-spinner-container{",
                "-  z-index : 5;",
                "+  z-index : 10001;",
                "+}",
                "+",
                "+treasure-overlay-spinner.treasure-overlay-spinner-active .treasure-overlay-spinner-content {",
                "+  height: 100%;",
                "+}",
                "+treasure-overlay-spinner.treasure-overlay-spinner-active {",
                "+  height: 100%;",
                "+  top: 0;",
                "+  bottom: 0;",
                "+  position: absolute;",
                "+  right: 0;",
                "+  left: 0;",
                "+}",
                "+treasure-overlay-spinner .treasure-overlay-spinner-container {",
                "+  background: rgba(0, 0, 0, 0.5490196078431373);",
                " }",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "index acf8a061fb..b29654b448 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "@@ -218,10 +218,26 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "-      var initGroups = function () {",
                "+      var initGroups = function (service, selectElem) {",
                "         var realm = $scope.user.realm || \"/\";",
                "-        GroupService.getGroups(realm).then(function (response) {",
                "-          $scope.dynamicForm.groups = new Array();",
                "-          for (var i in response) {",
                "-            $scope.dynamicForm.groups.push({\"groupKey\": response[i].key, \"groupName\": response[i].name});",
                "+        var term = null;",
                "+",
                "+        if (selectElem && selectElem.search) {",
                "+          term = selectElem.search;",
                "+        } else {",
                "+          service = \"getGroups\";",
                "+        }",
                "+",
                "+        GroupService[service](realm, term).then(function (response) {",
                "+          var newGroups = [];",
                "+          if (!term) {",
                "+            $scope.dynamicForm.groups = new Array();",
                "+          }",
                "+",
                "+          $scope.dynamicForm.totGroups = response.totGroups;",
                "+          for (var i in response.groupTOs) {",
                "+            newGroups.push({",
                "+              \"groupKey\": response[\"groupTOs\"][i].key,",
                "+              \"groupName\": response[\"groupTOs\"][i].name",
                "+            });",
                "           }",
                "-          $scope.dynamicForm.groups.sort(function (a, b) {",
                "+          newGroups.sort(function (a, b) {",
                "             var x = a.groupName;",
                "@@ -230,2 +246,10 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           });",
                "+",
                "+          if (service !== \"getSearchedGroups\") {",
                "+            $scope.dynamicForm.groups = newGroups;",
                "+          }",
                "+          if (term) {",
                "+            selectElem.refreshItems(newGroups);",
                "+          }",
                "+",
                "         }, function (e) {",
                "@@ -372,2 +396,7 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "+      $scope.$on('groupSearched', function (event, selectElem) {",
                "+        if (selectElem)",
                "+          initGroups(\"getSearchedGroups\", selectElem);",
                "+      });",
                "+",
                "       if ($scope.createMode) {",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "index 8cb89a9363..af1fd99532 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "@@ -21,39 +21,53 @@",
                " angular.module('self')",
                "-        .directive('groups', function () {",
                "-          return {",
                "-            restrict: 'E',",
                "-            templateUrl: 'views/groups.html',",
                "-            scope: {",
                "-              dynamicForm: \"=form\",",
                "-              user: \"=\"",
                "-            },",
                "-            controller: function ($scope, $filter) {",
                "-              $scope.init = function () {",
                "-                if (!$scope.user.memberships) {",
                "-                  $scope.user.memberships = new Array();",
                "-                }",
                "-              };",
                "+        .directive('groups', ['GroupService', function (GroupService) {",
                "+            return {",
                "+              restrict: 'E',",
                "+              templateUrl: 'views/groups.html',",
                "+              scope: {",
                "+                dynamicForm: \"=form\",",
                "+                user: \"=\"",
                "+              },",
                "+              controller: function ($scope, $filter, $timeout) {",
                "+                var groupsSearchTimer;",
                "-              $scope.addGroup = function (item, model) {",
                "-                var membership = item;",
                "-                $scope.user.memberships.push({\"groupKey\": membership.groupKey, \"groupName\": membership.groupName});",
                "-                $scope.$emit(\"groupAdded\", membership.groupName);",
                "-              };",
                "+                $scope.init = function () {",
                "+                  if (!$scope.user.memberships) {",
                "+                    $scope.user.memberships = new Array();",
                "+                  }",
                "+                };",
                "-              $scope.removeGroup = function (item, model) {",
                "-                var groupIndex = $scope.getIndex(item);",
                "-                var membership = $scope.user.memberships[groupIndex];",
                "-                var groupName = membership.groupName;",
                "-                $scope.user.memberships.splice(groupIndex, 1);",
                "-                $scope.$emit(\"groupRemoved\", groupName);",
                "-              };",
                "+                $scope.addGroup = function (item, model) {",
                "+                  var membership = item;",
                "+                  $scope.user.memberships.push({\"groupKey\": membership.groupKey, \"groupName\": membership.groupName});",
                "+                  $scope.$emit(\"groupAdded\", membership.groupName);",
                "+                };",
                "-              $scope.getIndex = function (selectedGroup) {",
                "-                var groupIndex = $scope.user.memberships.map(function (membership) {",
                "-                  return membership.groupName;",
                "-                }).indexOf(selectedGroup.groupName);",
                "-                return groupIndex;",
                "-              };",
                "-            }",
                "-          };",
                "-        });",
                "+                $scope.removeGroup = function (item, model) {",
                "+                  var groupIndex = $scope.getIndex(item);",
                "+                  var membership = $scope.user.memberships[groupIndex];",
                "+                  var groupName = membership.groupName;",
                "+                  $scope.user.memberships.splice(groupIndex, 1);",
                "+                  $scope.$emit(\"groupRemoved\", groupName);",
                "+                };",
                "+",
                "+                $scope.onGroupsSearch = function (totGroups) {",
                "+                  if (groupsSearchTimer) {",
                "+                    $timeout.cancel(groupsSearchTimer);",
                "+                  }",
                "+                  if (totGroups > 30) {",
                "+                    var that = this;",
                "+                    groupsSearchTimer = $timeout(function () {",
                "+                      $scope.$emit(\"groupSearched\", that.$select);",
                "+                    }, 800);",
                "+                  }",
                "+                };",
                "+",
                "+                $scope.getIndex = function (selectedGroup) {",
                "+                  var groupIndex = $scope.user.memberships.map(function (membership) {",
                "+                    return membership.groupName;",
                "+                  }).indexOf(selectedGroup.groupName);",
                "+                  return groupIndex;",
                "+                };",
                "+              }",
                "+            };",
                "+          }]);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/services/groupService.js b/client/enduser/src/main/resources/META-INF/resources/app/js/services/groupService.js",
                "index 73fdcbbdfb..4ee136e988 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/services/groupService.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/services/groupService.js",
                "@@ -25,2 +25,3 @@ angular.module('self')",
                "             var groupService = {};",
                "+",
                "             groupService.getGroups = function (realm) {",
                "@@ -34,2 +35,13 @@ angular.module('self')",
                "             };",
                "+",
                "+            groupService.getSearchedGroups = function (realm, term) {",
                "+              return  $http.get(\"../api/groups?realm=\" + encodeURI(realm) + \"&term=\" + encodeURI(term))",
                "+                      .then(function (response) {",
                "+                        return response.data;",
                "+                      }, function (response) {",
                "+                        console.error(\"Something went wrong during groups retrieval, exit with status: \", response);",
                "+                        return $q.reject(response.data || response.statusText);",
                "+                      });",
                "+            };",
                "+",
                "             return groupService;",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html b/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "index 38e6a29910..0d23a54bf9 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "@@ -22,3 +22,3 @@ under the License.",
                "              ng-model=\"dynamicForm.selectedGroups\" theme=\"select2\" class=\"attribute-ui-select\" ",
                "-             ng-disabled=\"inputDisabled\">",
                "+             ng-disabled=\"inputDisabled\" ng-keyup=\"onGroupsSearch(dynamicForm.totGroups)\">",
                "     <ui-select-match placeholder=\"{{'GROUPS_PLACEHOLDER'| translate}}\" class=\"ui-select-match\">",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "index 1ec31f2213..e7819644f8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "@@ -79,2 +79,3 @@ public interface SyncopeService extends JAXRSService {",
                "      *",
                "+     * @param term groups search term",
                "      * @param realm of the User and Any Objects assignable to the returned Groups",
                "@@ -90,2 +91,3 @@ public interface SyncopeService extends JAXRSService {",
                "             @NotNull @PathParam(\"realm\") String realm,",
                "+            @QueryParam(\"term\") String term,",
                "             @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(\"1\") int page,",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java",
                "index 427c1e5a72..0fb587af85 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java",
                "@@ -34,2 +34,3 @@ import java.util.stream.Collectors;",
                " import javax.annotation.Resource;",
                "+import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "@@ -63,3 +64,5 @@ import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                " import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;",
                " import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;",
                " import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "@@ -361,6 +364,30 @@ public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {",
                "     @PreAuthorize(\"isAuthenticated()\")",
                "-    public Pair<Integer, List<GroupTO>> searchAssignableGroups(final String realm, final int page, final int size) {",
                "+    public Pair<Integer, List<GroupTO>> searchAssignableGroups(",
                "+            final String realm,",
                "+            final String term,",
                "+            final int page,",
                "+            final int size) {",
                "+",
                "         AssignableCond assignableCond = new AssignableCond();",
                "         assignableCond.setRealmFullPath(realm);",
                "-        SearchCond searchCond = SearchCond.getLeafCond(assignableCond);",
                "+",
                "+        SearchCond searchCond;",
                "+        if (StringUtils.isNotBlank(term)) {",
                "+            AnyCond termCond = new AnyCond(AttributeCond.Type.ILIKE);",
                "+            termCond.setSchema(\"name\");",
                "+",
                "+            String termSearchableValue = (term.startsWith(\"*\") && !term.endsWith(\"*\"))",
                "+                    ? term + \"%\"",
                "+                    : (!term.startsWith(\"*\") && term.endsWith(\"*\"))",
                "+                    ? \"%\" + term",
                "+                    : (term.startsWith(\"*\") && term.endsWith(\"*\")",
                "+                    ? term : \"%\" + term + \"%\");",
                "+            termCond.setExpression(termSearchableValue);",
                "+",
                "+            searchCond = SearchCond.getAndCond(",
                "+                    SearchCond.getLeafCond(assignableCond),",
                "+                    SearchCond.getLeafCond(termCond));",
                "+        } else {",
                "+            searchCond = SearchCond.getLeafCond(assignableCond);",
                "+        }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "index 4a301a3be3..2f84efc8f6 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "@@ -58,6 +58,6 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe",
                "     public PagedResult<GroupTO> searchAssignableGroups(",
                "-            final String realm, final int page, final int size) {",
                "+            final String realm, final String term, final int page, final int size) {",
                "         Pair<Integer, List<GroupTO>> result = logic.searchAssignableGroups(",
                "-                StringUtils.prependIfMissing(realm, SyncopeConstants.ROOT_REALM), page, size);",
                "+                StringUtils.prependIfMissing(realm, SyncopeConstants.ROOT_REALM), term, page, size);",
                "         return buildPagedResult(result.getRight(), page, size, result.getLeft());"
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/groups.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/services/groupService.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/groups.html",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1247": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3c41b5ed31367912473f71666b78a61c18352057"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1247",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81a030bd7196a54205deaadea12df3f8c8703b9c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509633371,
            "hunks": 6,
            "message": "[SYNCOPE-1228] Graceful handling of parent info for create",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "index 03cfe0f94f..a0e888f687 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "@@ -87,3 +87,28 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "     public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {",
                "-        String fullPath = StringUtils.appendIfMissing(parentPath, \"/\") + realmTO.getName();",
                "+        Realm parent;",
                "+        if (StringUtils.isBlank(realmTO.getParent())) {",
                "+            parent = realmDAO.findByFullPath(parentPath);",
                "+            if (parent == null) {",
                "+                LOG.error(\"Could not find parent realm \" + parentPath);",
                "+",
                "+                throw new NotFoundException(parentPath);",
                "+            }",
                "+",
                "+            realmTO.setParent(parent.getFullPath());",
                "+        } else {",
                "+            parent = realmDAO.find(realmTO.getParent());",
                "+            if (parent == null) {",
                "+                LOG.error(\"Could not find parent realm \" + realmTO.getParent());",
                "+",
                "+                throw new NotFoundException(realmTO.getParent());",
                "+            }",
                "+",
                "+            if (!parent.getFullPath().equals(parentPath)) {",
                "+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPath);",
                "+                sce.getElements().add(\"Mismatching parent realm: \" + parentPath + \" Vs \" + parent.getFullPath());",
                "+                throw sce;",
                "+            }",
                "+        }",
                "+",
                "+        String fullPath = StringUtils.appendIfMissing(parent.getFullPath(), \"/\") + realmTO.getName();",
                "         if (realmDAO.findByFullPath(fullPath) != null) {",
                "@@ -92,3 +117,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "-        Realm realm = realmDAO.save(binder.create(parentPath, realmTO));",
                "+        Realm realm = realmDAO.save(binder.create(parent, realmTO));",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java",
                "index 44e00fcbac..1e3183c53b 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java",
                "@@ -26,3 +26,3 @@ public interface RealmDataBinder {",
                "-    Realm create(String parentPath, RealmTO realmTO);",
                "+    Realm create(Realm parent, RealmTO realmTO);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java",
                "index 08bd7872ae..8537331c43 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java",
                "@@ -100,3 +100,3 @@ public class RealmDataBinderImpl implements RealmDataBinder {",
                "     @Override",
                "-    public Realm create(final String parentPath, final RealmTO realmTO) {",
                "+    public Realm create(final Realm parent, final RealmTO realmTO) {",
                "         Realm realm = entityFactory.newEntity(Realm.class);",
                "@@ -104,3 +104,3 @@ public class RealmDataBinderImpl implements RealmDataBinder {",
                "         realm.setName(realmTO.getName());",
                "-        realm.setParent(realmDAO.findByFullPath(parentPath));",
                "+        realm.setParent(parent);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index 69c06045fd..d4a54e72c3 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -234,3 +234,3 @@ public class DefaultRealmPullResultHandler",
                "         try {",
                "-            Realm realm = realmDAO.save(binder.create(profile.getTask().getDestinatioRealm().getFullPath(), realmTO));",
                "+            Realm realm = realmDAO.save(binder.create(profile.getTask().getDestinatioRealm(), realmTO));"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1228": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "edb004d8da264aae453ef3b46ca37cd9d5d4d3e9"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1228",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c3acdc3e57699af236c915bd2c8fb05bca7bcd92",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509629627,
            "hunks": 4,
            "message": "[SYNCOPE-1232] Prevent AnyType removal if AnyObject instances are found",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java",
                "index f967da89fe..a7a41ff187 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java",
                "@@ -31,2 +31,3 @@ import org.apache.syncope.common.lib.types.ClientExceptionType;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;",
                " import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                "@@ -50,2 +51,5 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {",
                "+    @Autowired",
                "+    private AnyObjectDAO anyObjectDAO;",
                "+",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_READ + \"')\")",
                "@@ -94,2 +98,3 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {",
                "             LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");",
                "+",
                "             throw new NotFoundException(anyTypeTO.getKey());",
                "@@ -113,2 +118,9 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {",
                "         try {",
                "+            Integer anyObjects = anyObjectDAO.countByType().get(anyType);",
                "+            if (anyObjects != null && anyObjects > 0) {",
                "+                LOG.error(\"{} AnyObject instances found for {}, aborting\", anyObjects, anyType);",
                "+",
                "+                throw new IllegalArgumentException(\"AnyObject instances found for \" + key);",
                "+            }",
                "+",
                "             return binder.delete(anyType);"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1232": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cd731aa1b81664539bc7f818d6e111ad4e697d1a"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1232",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2c06a985efae35bba59f16a77d97696eb7eb39d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513001665,
            "hunks": 1,
            "message": "[SYNCOPE-152] Little doc addition",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/extensions.adoc b/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "index 9fdddfa316..d6493b6d1f 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "@@ -150,3 +150,3 @@ identities, published under the IETF:",
                " This extension enables an additional `/scim` REST endpoint, implementing the communication according to the SCIM 2.0",
                "-standard.",
                "+standard, in order to provision User, Enterprise User and Group SCIM entities to Apache Syncope."
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/extensions.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a28d85dbaa632f9f9662204f42383e57ed02577e"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e11d0b6c3e20b11775537b0047353eca3e8aac2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511779457,
            "hunks": 1,
            "message": "[SYNCOPE-1226] Removed schemas are now correctly no more displayed in 'Selected' list in 'Attributes to be displayed' view",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java",
                "index a87577de51..2b36dc26c6 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java",
                "@@ -122,2 +122,6 @@ public abstract class DisplayAttributesModalPanel<T extends Serializable> extend",
                "+        // remove old schemas from selected lists",
                "+        selectedPlainSchemas.retainAll(pSchemaNames);",
                "+        selectedDerSchemas.retainAll(dSchemaNames);",
                "+        ",
                "         final WebMarkupContainer container = new WebMarkupContainer(\"container\");"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1226": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c6847708ca13e94c5b0b9f9d974c380fc2cd7e90"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1226",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3ac8999d2ffe6fc87b4558453a59d797a8c61c0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510586628,
            "hunks": 146,
            "message": "[SYNCOPE-1234] Pre-processing method added",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "index 4d50971d87..893e7a97f8 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "@@ -34,3 +34,8 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeProvision(",
                "+  SyncDelta preprocess(SyncDelta delta) {",
                "+    return delta;",
                "+  }",
                "+  ",
                "+  @Override",
                "+  void beforeProvision(",
                "     ProvisioningProfile profile,",
                "@@ -39,3 +44,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -43,3 +47,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeAssign(",
                "+  void beforeAssign(",
                "     ProvisioningProfile profile,",
                "@@ -48,3 +52,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -52,3 +55,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeUnassign(",
                "+  void beforeUnassign(",
                "     ProvisioningProfile profile,",
                "@@ -57,3 +60,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -61,3 +63,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeDeprovision(",
                "+  void beforeDeprovision(",
                "     ProvisioningProfile profile,",
                "@@ -66,3 +68,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -70,3 +71,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeUnlink(",
                "+  void beforeUnlink(",
                "     ProvisioningProfile profile,",
                "@@ -75,3 +76,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -79,3 +79,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeLink(",
                "+  void beforeLink(",
                "     ProvisioningProfile profile,",
                "@@ -84,3 +84,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -88,3 +87,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  <P extends AnyPatch> SyncDelta beforeUpdate(",
                "+  <P extends AnyPatch> void beforeUpdate(",
                "     ProvisioningProfile profile,",
                "@@ -94,3 +93,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "@@ -98,3 +96,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta beforeDelete(",
                "+  void beforeDelete(",
                "     ProvisioningProfile profile,",
                "@@ -103,3 +101,2 @@ class MyPullActions implements PullActions {",
                "-    return delta;",
                "   }",
                "diff --git a/core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java b/core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java",
                "index e6262155df..00cf2e9294 100644",
                "--- a/core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java",
                "+++ b/core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java",
                "@@ -63,3 +63,3 @@ public class MigrationPullActions extends SchedulingPullActions {",
                "     @Override",
                "-    public SyncDelta beforeProvision(",
                "+    public void beforeProvision(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -76,4 +76,2 @@ public class MigrationPullActions extends SchedulingPullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "index f6e5af194c..bcf20c3727 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "@@ -32,2 +32,12 @@ public interface PullActions extends ProvisioningActions {",
                "+    /**",
                "+     * Pre-process the pull information received by the underlying connector, before any internal activity occurs.",
                "+     *",
                "+     * @param delta retrieved pull information",
                "+     * @return pull information, possibly altered.",
                "+     */",
                "+    default SyncDelta preprocess(final SyncDelta delta) {",
                "+        return delta;",
                "+    }",
                "+",
                "     /**",
                "@@ -40,6 +50,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeProvision(",
                "+    default void beforeProvision(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -47,4 +56,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -59,6 +66,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeAssign(",
                "+    default void beforeAssign(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -66,4 +72,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -78,6 +82,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeUnassign(",
                "+    default void beforeUnassign(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -85,4 +88,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -97,6 +98,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeDeprovision(",
                "+    default void beforeDeprovision(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -104,4 +104,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -116,6 +114,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeUnlink(",
                "+    default void beforeUnlink(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -123,4 +120,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -135,6 +130,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information, possibly altered.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeLink(",
                "+    default void beforeLink(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -142,4 +136,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -156,6 +148,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param anyPatch modification",
                "-     * @return pull information used for logging and to be passed to the 'after' method.",
                "      * @throws JobExecutionException in case of generic failure.",
                "      */",
                "-    default <P extends AnyPatch> SyncDelta beforeUpdate(",
                "+    default <P extends AnyPatch> void beforeUpdate(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -164,4 +155,2 @@ public interface PullActions extends ProvisioningActions {",
                "             P anyPatch) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "@@ -174,6 +163,5 @@ public interface PullActions extends ProvisioningActions {",
                "      * @param entity entity",
                "-     * @return pull information used for logging and to be passed to the 'after' method.",
                "      * @throws JobExecutionException in case of generic failure",
                "      */",
                "-    default SyncDelta beforeDelete(",
                "+    default void beforeDelete(",
                "             ProvisioningProfile<?, ?> profile,",
                "@@ -181,4 +169,2 @@ public interface PullActions extends ProvisioningActions {",
                "             EntityTO entity) throws JobExecutionException {",
                "-",
                "-        return delta;",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "index 9ec7edbc5f..dd7e4eff1b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "@@ -193,8 +193,7 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         } else {",
                "-            SyncDelta actionedDelta = delta;",
                "             for (PullActions action : profile.getActions()) {",
                "-                actionedDelta = action.beforeAssign(profile, actionedDelta, anyTO);",
                "+                action.beforeAssign(profile, delta, anyTO);",
                "             }",
                "-            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);",
                "+            create(anyTO, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);",
                "         }",
                "@@ -226,8 +225,7 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         } else {",
                "-            SyncDelta actionedDelta = delta;",
                "             for (PullActions action : profile.getActions()) {",
                "-                actionedDelta = action.beforeProvision(profile, actionedDelta, anyTO);",
                "+                action.beforeProvision(profile, delta, anyTO);",
                "             }",
                "-            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);",
                "+            create(anyTO, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);",
                "         }",
                "@@ -309,3 +307,2 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : anyKeys) {",
                "@@ -339,3 +336,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                                 before.getKey(),",
                "-                                workingDelta.getObject(),",
                "+                                delta.getObject(),",
                "                                 before,",
                "@@ -346,6 +343,6 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            workingDelta = action.beforeUpdate(profile, workingDelta, before, anyPatch);",
                "+                            action.beforeUpdate(profile, delta, before, anyPatch);",
                "                         }",
                "-                        effectivePatch = doUpdate(before, anyPatch, workingDelta, result);",
                "+                        effectivePatch = doUpdate(before, anyPatch, delta, result);",
                "                         AnyTO updated = AnyOperations.patch(before, effectivePatch);",
                "@@ -353,3 +350,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, updated, result);",
                "+                            action.after(profile, delta, updated, result);",
                "                         }",
                "@@ -365,3 +362,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         LOG.error(\"Could not propagate {} {}\",",
                "-                                provision.getAnyType().getKey(), workingDelta.getUid().getUidValue(), e);",
                "+                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -374,3 +371,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         LOG.error(\"Could not update {} {}\",",
                "-                                provision.getAnyType().getKey(), workingDelta.getUid().getUidValue(), e);",
                "+                                provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -380,3 +377,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                 finalize(MatchingRule.toEventName(MatchingRule.UPDATE),",
                "-                        resultStatus, before, output, workingDelta, effectivePatch);",
                "+                        resultStatus, before, output, delta, effectivePatch);",
                "             }",
                "@@ -617,3 +614,2 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : anyKeys) {",
                "@@ -635,3 +631,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                     for (PullActions action : profile.getActions()) {",
                "-                        workingDelta = action.beforeDelete(profile, workingDelta, before);",
                "+                        action.beforeDelete(profile, delta, before);",
                "                     }",
                "@@ -644,3 +640,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, before, result);",
                "+                            action.after(profile, delta, before, result);",
                "                         }",
                "@@ -655,3 +651,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-                    finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);",
                "+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);",
                "                 }",
                "@@ -731,10 +727,18 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        String uid = delta.getPreviousUid() == null",
                "-                ? delta.getUid().getUidValue()",
                "-                : delta.getPreviousUid().getUidValue();",
                "+        SyncDelta processed = delta;",
                "+        for (PullActions action : profile.getActions()) {",
                "+            processed = action.preprocess(processed);",
                "+        }",
                "+",
                "+        LOG.debug(\"Transformed {} for {} as {}\",",
                "+                processed.getDeltaType(), processed.getUid().getUidValue(), processed.getObject().getObjectClass());",
                "+",
                "+        String uid = processed.getPreviousUid() == null",
                "+                ? processed.getUid().getUidValue()",
                "+                : processed.getPreviousUid().getUidValue();",
                "         try {",
                "-            List<String> anyKeys = pullUtils.findExisting(uid, delta.getObject(), provision, anyUtils);",
                "+            List<String> anyKeys = pullUtils.findExisting(uid, processed.getObject(), provision, anyUtils);",
                "             LOG.debug(\"Match(es) found for {} as {}: {}\",",
                "-                    delta.getUid().getUidValue(), delta.getObject().getObjectClass(), anyKeys);",
                "+                    processed.getUid().getUidValue(), processed.getObject().getObjectClass(), anyKeys);",
                "@@ -758,3 +762,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-            if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {",
                "+            if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {",
                "                 if (anyKeys.isEmpty()) {",
                "@@ -762,3 +766,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case ASSIGN:",
                "-                            profile.getResults().addAll(assign(delta, provision, anyUtils));",
                "+                            profile.getResults().addAll(assign(processed, provision, anyUtils));",
                "                             break;",
                "@@ -766,3 +770,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case PROVISION:",
                "-                            profile.getResults().addAll(provision(delta, provision, anyUtils));",
                "+                            profile.getResults().addAll(provision(processed, provision, anyUtils));",
                "                             break;",
                "@@ -770,3 +774,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case IGNORE:",
                "-                            profile.getResults().addAll(ignore(delta, null, provision, false));",
                "+                            profile.getResults().addAll(ignore(processed, null, provision, false));",
                "                             break;",
                "@@ -779,3 +783,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                     for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {",
                "-                        Attribute attr = delta.getObject().getAttributeByName(virSchema.getExtAttrName());",
                "+                        Attribute attr = processed.getObject().getAttributeByName(virSchema.getExtAttrName());",
                "                         for (String anyKey : anyKeys) {",
                "@@ -800,3 +804,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UPDATE:",
                "-                            profile.getResults().addAll(update(delta, anyKeys, provision));",
                "+                            profile.getResults().addAll(update(processed, anyKeys, provision));",
                "                             break;",
                "@@ -804,3 +808,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case DEPROVISION:",
                "-                            profile.getResults().addAll(deprovision(delta, anyKeys, provision, false));",
                "+                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, false));",
                "                             break;",
                "@@ -808,3 +812,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UNASSIGN:",
                "-                            profile.getResults().addAll(deprovision(delta, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, true));",
                "                             break;",
                "@@ -812,3 +816,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case LINK:",
                "-                            profile.getResults().addAll(link(delta, anyKeys, provision, false));",
                "+                            profile.getResults().addAll(link(processed, anyKeys, provision, false));",
                "                             break;",
                "@@ -816,3 +820,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UNLINK:",
                "-                            profile.getResults().addAll(link(delta, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(link(processed, anyKeys, provision, true));",
                "                             break;",
                "@@ -820,3 +824,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case IGNORE:",
                "-                            profile.getResults().addAll(ignore(delta, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(ignore(processed, anyKeys, provision, true));",
                "                             break;",
                "@@ -827,8 +831,8 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                 }",
                "-            } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {",
                "+            } else if (SyncDeltaType.DELETE == processed.getDeltaType()) {",
                "                 if (anyKeys.isEmpty()) {",
                "-                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);",
                "+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, processed);",
                "                     LOG.debug(\"No match found for deletion\");",
                "                 } else {",
                "-                    profile.getResults().addAll(delete(delta, anyKeys, provision));",
                "+                    profile.getResults().addAll(delete(processed, anyKeys, provision));",
                "                 }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java",
                "index c0a7eb47af..580554380b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java",
                "@@ -62,3 +62,3 @@ public class DBPasswordPullActions implements PullActions {",
                "     @Override",
                "-    public SyncDelta beforeProvision(",
                "+    public void beforeProvision(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -71,4 +71,2 @@ public class DBPasswordPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "@@ -77,3 +75,3 @@ public class DBPasswordPullActions implements PullActions {",
                "     @Override",
                "-    public <M extends AnyPatch> SyncDelta beforeUpdate(",
                "+    public <M extends AnyPatch> void beforeUpdate(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -87,4 +85,2 @@ public class DBPasswordPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index d4a54e72c3..b3b12ea01e 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -155,8 +155,7 @@ public class DefaultRealmPullResultHandler",
                "         } else {",
                "-            SyncDelta actionedDelta = delta;",
                "             for (PullActions action : profile.getActions()) {",
                "-                actionedDelta = action.beforeAssign(profile, actionedDelta, realmTO);",
                "+                action.beforeAssign(profile, delta, realmTO);",
                "             }",
                "-            create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);",
                "+            create(realmTO, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);",
                "         }",
                "@@ -194,8 +193,7 @@ public class DefaultRealmPullResultHandler",
                "         } else {",
                "-            SyncDelta actionedDelta = delta;",
                "             for (PullActions action : profile.getActions()) {",
                "-                actionedDelta = action.beforeProvision(profile, actionedDelta, realmTO);",
                "+                action.beforeProvision(profile, delta, realmTO);",
                "             }",
                "-            create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);",
                "+            create(realmTO, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);",
                "         }",
                "@@ -288,3 +286,2 @@ public class DefaultRealmPullResultHandler",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : keys) {",
                "@@ -317,3 +314,3 @@ public class DefaultRealmPullResultHandler",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            workingDelta = action.beforeUpdate(profile, workingDelta, before, null);",
                "+                            action.beforeUpdate(profile, delta, before, null);",
                "                         }",
                "@@ -328,3 +325,3 @@ public class DefaultRealmPullResultHandler",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, updated, result);",
                "+                            action.after(profile, delta, updated, result);",
                "                         }",
                "@@ -339,3 +336,3 @@ public class DefaultRealmPullResultHandler",
                "                         // The propagation exception status will be reported into the propagation task execution.",
                "-                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);",
                "+                        LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -343,3 +340,3 @@ public class DefaultRealmPullResultHandler",
                "                     } catch (Exception e) {",
                "-                        throwIgnoreProvisionException(workingDelta, e);",
                "+                        throwIgnoreProvisionException(delta, e);",
                "@@ -347,3 +344,3 @@ public class DefaultRealmPullResultHandler",
                "                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));",
                "-                        LOG.error(\"Could not update Realm {}\", workingDelta.getUid().getUidValue(), e);",
                "+                        LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -352,3 +349,3 @@ public class DefaultRealmPullResultHandler",
                "                 }",
                "-                finalize(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, workingDelta);",
                "+                finalize(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);",
                "             }",
                "@@ -375,3 +372,2 @@ public class DefaultRealmPullResultHandler",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : keys) {",
                "@@ -405,3 +401,3 @@ public class DefaultRealmPullResultHandler",
                "                             for (PullActions action : profile.getActions()) {",
                "-                                workingDelta = action.beforeUnassign(profile, workingDelta, before);",
                "+                                action.beforeUnassign(profile, delta, before);",
                "                             }",
                "@@ -409,3 +405,3 @@ public class DefaultRealmPullResultHandler",
                "                             for (PullActions action : profile.getActions()) {",
                "-                                workingDelta = action.beforeDeprovision(profile, workingDelta, before);",
                "+                                action.beforeDeprovision(profile, delta, before);",
                "                             }",
                "@@ -425,3 +421,3 @@ public class DefaultRealmPullResultHandler",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, RealmTO.class.cast(output), result);",
                "+                            action.after(profile, delta, RealmTO.class.cast(output), result);",
                "                         }",
                "@@ -434,3 +430,3 @@ public class DefaultRealmPullResultHandler",
                "                         // The propagation exception status will be reported into the propagation task execution.",
                "-                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);",
                "+                        LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -438,3 +434,3 @@ public class DefaultRealmPullResultHandler",
                "                     } catch (Exception e) {",
                "-                        throwIgnoreProvisionException(workingDelta, e);",
                "+                        throwIgnoreProvisionException(delta, e);",
                "@@ -472,3 +468,2 @@ public class DefaultRealmPullResultHandler",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : keys) {",
                "@@ -501,3 +496,3 @@ public class DefaultRealmPullResultHandler",
                "                             for (PullActions action : profile.getActions()) {",
                "-                                workingDelta = action.beforeUnlink(profile, workingDelta, before);",
                "+                                action.beforeUnlink(profile, delta, before);",
                "                             }",
                "@@ -505,3 +500,3 @@ public class DefaultRealmPullResultHandler",
                "                             for (PullActions action : profile.getActions()) {",
                "-                                workingDelta = action.beforeLink(profile, workingDelta, before);",
                "+                                action.beforeLink(profile, delta, before);",
                "                             }",
                "@@ -514,6 +509,6 @@ public class DefaultRealmPullResultHandler",
                "                         }",
                "-                        output = update(workingDelta, Collections.singletonList(key));",
                "+                        output = update(delta, Collections.singletonList(key));",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, RealmTO.class.cast(output), result);",
                "+                            action.after(profile, delta, RealmTO.class.cast(output), result);",
                "                         }",
                "@@ -526,3 +521,3 @@ public class DefaultRealmPullResultHandler",
                "                         // The propagation exception status will be reported into the propagation task execution.",
                "-                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);",
                "+                        LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -530,3 +525,3 @@ public class DefaultRealmPullResultHandler",
                "                     } catch (Exception e) {",
                "-                        throwIgnoreProvisionException(workingDelta, e);",
                "+                        throwIgnoreProvisionException(delta, e);",
                "@@ -534,3 +529,3 @@ public class DefaultRealmPullResultHandler",
                "                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));",
                "-                        LOG.error(\"Could not update Realm {}\", workingDelta.getUid().getUidValue(), e);",
                "+                        LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);",
                "                         output = e;",
                "@@ -541,3 +536,3 @@ public class DefaultRealmPullResultHandler",
                "                         ? MatchingRule.toEventName(MatchingRule.UNLINK)",
                "-                        : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, workingDelta);",
                "+                        : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, delta);",
                "             }",
                "@@ -562,3 +557,2 @@ public class DefaultRealmPullResultHandler",
                "-        SyncDelta workingDelta = delta;",
                "         for (String key : keys) {",
                "@@ -586,3 +580,3 @@ public class DefaultRealmPullResultHandler",
                "                     for (PullActions action : profile.getActions()) {",
                "-                        workingDelta = action.beforeDelete(profile, workingDelta, before);",
                "+                        action.beforeDelete(profile, delta, before);",
                "                     }",
                "@@ -624,6 +618,6 @@ public class DefaultRealmPullResultHandler",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, workingDelta, before, result);",
                "+                            action.after(profile, delta, before, result);",
                "                         }",
                "                     } catch (Exception e) {",
                "-                        throwIgnoreProvisionException(workingDelta, e);",
                "+                        throwIgnoreProvisionException(delta, e);",
                "@@ -635,3 +629,3 @@ public class DefaultRealmPullResultHandler",
                "-                    finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);",
                "+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);",
                "                 }",
                "@@ -677,9 +671,17 @@ public class DefaultRealmPullResultHandler",
                "-        String uid = delta.getPreviousUid() == null",
                "-                ? delta.getUid().getUidValue()",
                "-                : delta.getPreviousUid().getUidValue();",
                "+        SyncDelta processed = delta;",
                "+        for (PullActions action : profile.getActions()) {",
                "+            processed = action.preprocess(processed);",
                "+        }",
                "+",
                "+        LOG.debug(\"Transformed {} for {} as {}\",",
                "+                processed.getDeltaType(), processed.getUid().getUidValue(), processed.getObject().getObjectClass());",
                "+",
                "+        String uid = processed.getPreviousUid() == null",
                "+                ? processed.getUid().getUidValue()",
                "+                : processed.getPreviousUid().getUidValue();",
                "-        List<String> keys = pullUtils.findExisting(uid, delta.getObject(), orgUnit);",
                "+        List<String> keys = pullUtils.findExisting(uid, processed.getObject(), orgUnit);",
                "         LOG.debug(\"Match found for {} as {}: {}\",",
                "-                delta.getUid().getUidValue(), delta.getObject().getObjectClass(), keys);",
                "+                processed.getUid().getUidValue(), processed.getObject().getObjectClass(), keys);",
                "@@ -704,3 +706,3 @@ public class DefaultRealmPullResultHandler",
                "         try {",
                "-            if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {",
                "+            if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {",
                "                 if (keys.isEmpty()) {",
                "@@ -708,3 +710,3 @@ public class DefaultRealmPullResultHandler",
                "                         case ASSIGN:",
                "-                            profile.getResults().addAll(assign(delta, orgUnit));",
                "+                            profile.getResults().addAll(assign(processed, orgUnit));",
                "                             break;",
                "@@ -712,3 +714,3 @@ public class DefaultRealmPullResultHandler",
                "                         case PROVISION:",
                "-                            profile.getResults().addAll(provision(delta, orgUnit));",
                "+                            profile.getResults().addAll(provision(processed, orgUnit));",
                "                             break;",
                "@@ -716,3 +718,3 @@ public class DefaultRealmPullResultHandler",
                "                         case IGNORE:",
                "-                            profile.getResults().add(ignore(delta, false));",
                "+                            profile.getResults().add(ignore(processed, false));",
                "                             break;",
                "@@ -725,3 +727,3 @@ public class DefaultRealmPullResultHandler",
                "                         case UPDATE:",
                "-                            profile.getResults().addAll(update(delta, keys));",
                "+                            profile.getResults().addAll(update(processed, keys));",
                "                             break;",
                "@@ -729,3 +731,3 @@ public class DefaultRealmPullResultHandler",
                "                         case DEPROVISION:",
                "-                            profile.getResults().addAll(deprovision(delta, keys, false));",
                "+                            profile.getResults().addAll(deprovision(processed, keys, false));",
                "                             break;",
                "@@ -733,3 +735,3 @@ public class DefaultRealmPullResultHandler",
                "                         case UNASSIGN:",
                "-                            profile.getResults().addAll(deprovision(delta, keys, true));",
                "+                            profile.getResults().addAll(deprovision(processed, keys, true));",
                "                             break;",
                "@@ -737,3 +739,3 @@ public class DefaultRealmPullResultHandler",
                "                         case LINK:",
                "-                            profile.getResults().addAll(link(delta, keys, false));",
                "+                            profile.getResults().addAll(link(processed, keys, false));",
                "                             break;",
                "@@ -741,3 +743,3 @@ public class DefaultRealmPullResultHandler",
                "                         case UNLINK:",
                "-                            profile.getResults().addAll(link(delta, keys, true));",
                "+                            profile.getResults().addAll(link(processed, keys, true));",
                "                             break;",
                "@@ -745,3 +747,3 @@ public class DefaultRealmPullResultHandler",
                "                         case IGNORE:",
                "-                            profile.getResults().add(ignore(delta, true));",
                "+                            profile.getResults().add(ignore(processed, true));",
                "                             break;",
                "@@ -752,8 +754,8 @@ public class DefaultRealmPullResultHandler",
                "                 }",
                "-            } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {",
                "+            } else if (SyncDeltaType.DELETE == processed.getDeltaType()) {",
                "                 if (keys.isEmpty()) {",
                "-                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);",
                "+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, processed);",
                "                     LOG.debug(\"No match found for deletion\");",
                "                 } else {",
                "-                    profile.getResults().addAll(delete(delta, keys));",
                "+                    profile.getResults().addAll(delete(processed, keys));",
                "                 }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java",
                "index 7afbada3a0..9de3f2f96a 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java",
                "@@ -83,3 +83,3 @@ public class GoogleAppsPullActions implements PullActions {",
                "     @Override",
                "-    public SyncDelta beforeProvision(",
                "+    public void beforeProvision(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -88,12 +88,8 @@ public class GoogleAppsPullActions implements PullActions {",
                "-        if (!(entity instanceof UserTO)) {",
                "-            return delta;",
                "-        }",
                "-",
                "-        UserTO userTO = (UserTO) entity;",
                "-        if (userTO.getUsername() == null) {",
                "-            userTO.setUsername(delta.getObject().getName().getNameValue());",
                "+        if (entity instanceof UserTO) {",
                "+            UserTO userTO = (UserTO) entity;",
                "+            if (userTO.getUsername() == null) {",
                "+                userTO.setUsername(delta.getObject().getName().getNameValue());",
                "+            }",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "@@ -101,3 +97,3 @@ public class GoogleAppsPullActions implements PullActions {",
                "     @Override",
                "-    public <P extends AnyPatch> SyncDelta beforeUpdate(",
                "+    public <P extends AnyPatch> void beforeUpdate(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -107,13 +103,9 @@ public class GoogleAppsPullActions implements PullActions {",
                "-        if (!(anyPatch instanceof UserPatch)) {",
                "-            return delta;",
                "-        }",
                "-",
                "-        UserPatch userPatch = (UserPatch) anyPatch;",
                "-        if (userPatch.getUsername() == null) {",
                "-            userPatch.setUsername(new StringReplacePatchItem.Builder().",
                "-                    value(delta.getObject().getName().getNameValue()).build());",
                "+        if (anyPatch instanceof UserPatch) {",
                "+            UserPatch userPatch = (UserPatch) anyPatch;",
                "+            if (userPatch.getUsername() == null) {",
                "+                userPatch.setUsername(new StringReplacePatchItem.Builder().",
                "+                        value(delta.getObject().getName().getNameValue()).build());",
                "+            }",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java",
                "index 0761e09e4e..22c83eca04 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java",
                "@@ -57,3 +57,3 @@ public class LDAPPasswordPullActions implements PullActions {",
                "     @Override",
                "-    public SyncDelta beforeProvision(",
                "+    public void beforeProvision(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -66,4 +66,2 @@ public class LDAPPasswordPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "@@ -72,3 +70,3 @@ public class LDAPPasswordPullActions implements PullActions {",
                "     @Override",
                "-    public <M extends AnyPatch> SyncDelta beforeUpdate(",
                "+    public <M extends AnyPatch> void beforeUpdate(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -82,4 +80,2 @@ public class LDAPPasswordPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java",
                "index a32a1be928..54e9510e50 100644",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java",
                "@@ -42,3 +42,3 @@ public class TestPullActions implements PullActions {",
                "     @Override",
                "-    public SyncDelta beforeProvision(",
                "+    public void beforeProvision(",
                "             final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)",
                "@@ -58,4 +58,2 @@ public class TestPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "@@ -63,3 +61,3 @@ public class TestPullActions implements PullActions {",
                "     @Override",
                "-    public SyncDelta beforeAssign(",
                "+    public void beforeAssign(",
                "             final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)",
                "@@ -70,4 +68,2 @@ public class TestPullActions implements PullActions {",
                "         }",
                "-",
                "-        return delta;",
                "     }",
                "@@ -75,3 +71,3 @@ public class TestPullActions implements PullActions {",
                "     @Override",
                "-    public <M extends AnyPatch> SyncDelta beforeUpdate(",
                "+    public <M extends AnyPatch> void beforeUpdate(",
                "             final ProvisioningProfile<?, ?> profile,",
                "@@ -96,4 +92,2 @@ public class TestPullActions implements PullActions {",
                "         fullnamePatch.getAttrTO().getValues().add(String.valueOf(counter++));",
                "-",
                "-        return delta;",
                "     }"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1234": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "460bd265ea2c681dfdab3dd1d8f78f08254531b5"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1234",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "add4f7d511c7b9ddd362d31d0c37132d5a9f8381",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512557178,
            "hunks": 3,
            "message": "[SYNCOPE-1244] Properly returing Connection to DataSource",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "index 6019335848..7bd3ad733a 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "@@ -30,2 +30,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import javax.sql.DataSource;",
                " import org.apache.commons.collections4.IterableUtils;",
                "@@ -119,3 +120,4 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "-        Connection conn = DataSourceUtils.getConnection(domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));",
                "+        DataSource dataSource = domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN);",
                "+        Connection conn = DataSourceUtils.getConnection(dataSource);",
                "         PreparedStatement stmt = null;",
                "@@ -136,3 +138,3 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "             IOUtil.quietClose(stmt);",
                "-            IOUtil.quietClose(conn);",
                "+            DataSourceUtils.releaseConnection(conn, dataSource);",
                "         }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1244": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "068e696967fdfb81ba1c025dd5fd8b2a01835960"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1244",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a0b8995bfcd6eabfb81dc6735d5d97d0369f3e4a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516097896,
            "hunks": 3,
            "message": "Completing the work for SYNCOPE-1249 with pull support",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index 8ad259ac2f..a6f423d4e7 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -28,2 +28,3 @@ import org.apache.commons.collections4.CollectionUtils;",
                " import org.apache.commons.collections4.ListUtils;",
                "+import org.apache.commons.lang3.BooleanUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -659,2 +660,8 @@ public class MappingManagerImpl implements MappingManager {",
                "+                case \"mustChangePassword\":",
                "+                    if (anyTO instanceof UserTO && !values.isEmpty() && values.get(0) != null) {",
                "+                        ((UserTO) anyTO).setMustChangePassword(BooleanUtils.toBoolean(values.get(0).toString()));",
                "+                    }",
                "+                    break;",
                "+",
                "                 case \"userOwner\":",
                "diff --git a/fit/build-tools/src/main/resources/testdb.sql b/fit/build-tools/src/main/resources/testdb.sql",
                "index 0eb42e8186..5ad534128d 100644",
                "--- a/fit/build-tools/src/main/resources/testdb.sql",
                "+++ b/fit/build-tools/src/main/resources/testdb.sql",
                "@@ -41,2 +41,3 @@ username VARCHAR(80),",
                " surname VARCHAR(80),",
                "+mustChangePassword BOOLEAN,",
                " email VARCHAR(80),"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "fit/build-tools/src/main/resources/testdb.sql"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1249": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "828d1bc1d364c96ab149eb96049cc577348a3ee9"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1249",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "046c354bd61f9889d7e59b71e0fe550d428e6ed3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516867285,
            "hunks": 1,
            "message": "[SYNCOPE-1262] Since the proposed https://github.com/swagger-api/swagger-js/pull/1218 could not get accepted, let's go back to local patch for Swagger UI",
            "diff": [
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index 47344a14fa..62248f6fc4 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -122,2 +122,24 @@ under the License.",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <inherited>true</inherited>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>addMatrixParamSupport</id>",
                "+            <phase>process-resources</phase>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <target>",
                "+                <replace file=\"${project.build.directory}/swagger-ui/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}/swagger-ui-bundle.js\"",
                "+                         token=\"function i(e){var t=e.req,n=e.value,r=e.parameter,i=r.name,o=r.style,a=r.explode,s=(0,h.default)({key:r.name,value:n,style:o||&quot;simple&quot;,explode:a||!1,escape:!1});t.url=t.url.replace(&quot;{&quot;+i+&quot;}&quot;,s)}\"",
                "+                         value=\"function i(e){var t=e.req,r=e.value,n=e.parameter,a=n.name,u=n.style,o=n.explode,i=(0,h.default)({key:n.name,value:r,style:u||&quot;simple&quot;,explode:o||!1,escape:&quot;matrix&quot;===u});&quot;matrix&quot;!==u||!n.explode&amp;&amp;void 0!==n.explode?t.url=t.url.replace(&quot;{&quot;+a+&quot;}&quot;,i):t.url=t.url.concat(i)}\"/>",
                "+              </target>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "       <plugin>"
            ],
            "changed_files": [
                "ext/swagger-ui/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1262": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "400927ef055ce43c8cdc5a11c65a2cf5ee4dc0b5"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1262",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3538e33453a9c8ffdd9f1b9a9fda71c8418fb7ea",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512993232,
            "hunks": 4,
            "message": "[SYNCOPE-1237] Fix for copy-to-clipboard feature in multiple-opened toggle menus - full compatibility for Firefox and Chrome browsers",
            "diff": [
                "diff --git a/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js b/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "index b6d8634561..ab85e1c3ee 100644",
                "--- a/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "+++ b/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "@@ -31,3 +31,3 @@ if (typeof copyToClipboard === 'undefined') {",
                "     // Append it to the page somewhere, in this case <body>",
                "-    $(document.body).append(temp);",
                "+    $elem.append(temp);",
                "@@ -35,2 +35,3 @@ if (typeof copyToClipboard === 'undefined') {",
                "     temp.value = $elem.attr(tag_value_to_copy);",
                "+    $(temp).text(temp.value);",
                "@@ -38,5 +39,17 @@ if (typeof copyToClipboard === 'undefined') {",
                "     $(temp).focus().select();",
                "-",
                "     document.execCommand('SelectAll');",
                "-    document.execCommand(\"Copy\", false, null);",
                "+    document.execCommand(\"copy\", false, null);",
                "+",
                "+    if ($.browser.mozilla && !$.browser.chrome) {",
                "+      try {",
                "+        var range = document.createRange();",
                "+        range.selectNodeContents(temp);",
                "+        var selection = window.getSelection();",
                "+        selection.removeAllRanges();",
                "+        selection.addRange(range);",
                "+",
                "+        document.execCommand(\"Copy\", false, null);",
                "+      } catch (e) {",
                "+      }",
                "+    }"
            ],
            "changed_files": [
                "client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1237": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "461a03d2935012b268794ffda5723e0ee84b8653"
                ],
                [
                    "no-tag",
                    "1d11d9764bd56e2aef3986d95558305814206024"
                ],
                [
                    "no-tag",
                    "280df019d82c37c9c7e46ac1c457ec291caeae73"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1237",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bf3c034c2eca11ed273428c47d09b118244dcdc8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510761694,
            "hunks": 1,
            "message": "[SYNCOPE-1231] It is now possible to see all custom columns in Bulk Action modal panels",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html b/client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html",
                "index c0f5b9fc84..4adf9d7e14 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html",
                "@@ -25,3 +25,3 @@ under the License.",
                "     <wicket:panel>",
                "-      <div wicket:id=\"container\" id=\"selectedObjects\" class=\"dataTable\">",
                "+      <div wicket:id=\"container\" id=\"selectedObjects\" class=\"table-responsive dataTable\">",
                "         <table class=\"ui-widget ui-widget-content table-hover pageRowElement\" wicket:id=\"selectedObjects\">[DataTable]</table>"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1231": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "33daf27daa55a3dac382f811f916b4d9e5679b65"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1231",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c6e6059260827836235459c4644696b28acbf0c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512482760,
            "hunks": 6,
            "message": "[SYNCOPE-1244] Applying the elaborated patch",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "index b48f80c38a..6019335848 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java",
                "@@ -27,2 +27,3 @@ import java.util.HashMap;",
                " import java.util.HashSet;",
                "+import java.util.Iterator;",
                " import java.util.Map;",
                "@@ -150,3 +151,3 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "-        if (isRunningHere(new JobKey(jobName, Scheduler.DEFAULT_GROUP))) {",
                "+        if (isRunning(new JobKey(jobName, Scheduler.DEFAULT_GROUP))) {",
                "             LOG.debug(\"Job {} already running, cancel\", jobName);",
                "@@ -306,2 +307,4 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "             }",
                "+",
                "+            return;",
                "         }",
                "@@ -337,3 +340,6 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "                     tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));",
                "-                    for (SchedTask task : tasks) {",
                "+",
                "+                    boolean loadException = false;",
                "+                    for (Iterator<SchedTask> it = tasks.iterator(); it.hasNext() && !loadException;) {",
                "+                        SchedTask task = it.next();",
                "                         try {",
                "@@ -342,2 +348,3 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "                             LOG.error(\"While loading job instance for task \" + task.getKey(), e);",
                "+                            loadException = true;",
                "                         }",
                "@@ -345,8 +352,18 @@ public class JobManagerImpl implements JobManager, SyncopeLoader {",
                "-                    // 2. jobs for Reports",
                "-                    for (Report report : reportDAO.findAll()) {",
                "-                        try {",
                "-                            register(report, null, conf.getRight());",
                "-                        } catch (Exception e) {",
                "-                            LOG.error(\"While loading job instance for report \" + report.getName(), e);",
                "+                    if (loadException) {",
                "+                        LOG.debug(\"Errors while loading job instances for tasks, aborting\");",
                "+                    } else {",
                "+                        // 2. jobs for Reports",
                "+                        for (Iterator<Report> it = reportDAO.findAll().iterator(); it.hasNext() && !loadException;) {",
                "+                            Report report = it.next();",
                "+                            try {",
                "+                                register(report, null, conf.getRight());",
                "+                            } catch (Exception e) {",
                "+                                LOG.error(\"While loading job instance for report \" + report.getName(), e);",
                "+                                loadException = true;",
                "+                            }",
                "+                        }",
                "+",
                "+                        if (loadException) {",
                "+                            LOG.debug(\"Errors while loading job instances for reports, aborting\");",
                "                         }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1244": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "597a57f1ae4e36f93ed2fd9258d901a171f4f81a"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1244",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "847167650d22669f0e254752c4fecf3525512631",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517327091,
            "hunks": 3,
            "message": "[SYNCOPE-1266] fixes the clone method of the BinaryFieldPanel",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "index e77fce2a65..a1311a0c5b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "@@ -86,5 +86,15 @@ public class BinaryFieldPanel extends FieldPanel<String> {",
                "-    public BinaryFieldPanel(final String id, final String name, final IModel<String> model, final String mimeType,",
                "+    private final IModel<String> model;",
                "+",
                "+    private final String fileKey;",
                "+",
                "+    public BinaryFieldPanel(",
                "+            final String id,",
                "+            final String name,",
                "+            final IModel<String> model,",
                "+            final String mimeType,",
                "             final String fileKey) {",
                "         super(id, name, model);",
                "+        this.model = model;",
                "+        this.fileKey = fileKey;",
                "         this.mimeType = mimeType;",
                "@@ -255,3 +265,4 @@ public class BinaryFieldPanel extends FieldPanel<String> {",
                "     public BinaryFieldPanel clone() {",
                "-        return (BinaryFieldPanel) super.clone();",
                "+        LOG.info(\"Custom clone for binary field panel...\");",
                "+        return new BinaryFieldPanel(getId(), this.name, this.model, this.mimeType, this.fileKey);",
                "     }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1266": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3388a03d62747b844570c2ed7adb4aca53d5dbe"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1266",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "92f4d703850002f9ead3c91d0f05dbf2f889c865",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514467056,
            "hunks": 1,
            "message": "[SYNCOPE-1257] fixed search by group key with spaces",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "index 80fa692f35..eaecc2f911 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "@@ -237,3 +237,3 @@ public final class SearchUtils implements Serializable {",
                "                         if (StringUtils.isNotBlank(clause.getProperty())) {",
                "-                            String groupKey = clause.getProperty().split(\" \")[0];",
                "+                            String groupKey = clause.getProperty();"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1257": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e6e89b2005c7d9d0de136c0a9e9031f3e60fa90"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1257",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "76c1140167e59386ad2854ffc7f5ba00fc21e503",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513265399,
            "hunks": 47,
            "message": "[SYNCOPE-1246] Replaced 'property' dropdown field with an autocomplete textfield in search components",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "index f96da972ad..933defcb37 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "@@ -25,3 +25,5 @@ import java.util.Map;",
                " import java.util.stream.Collectors;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "+import org.apache.syncope.client.console.rest.GroupRestClient;",
                " import org.apache.syncope.client.console.rest.ResourceRestClient;",
                "@@ -35,2 +37,3 @@ import org.apache.syncope.common.lib.types.SchemaType;",
                " import org.apache.wicket.event.IEventSink;",
                "+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                " import org.apache.wicket.markup.html.WebMarkupContainer;",
                "@@ -79,2 +82,4 @@ public abstract class AbstractSearchPanel extends Panel {",
                "+    protected final GroupRestClient groupRestClient = new GroupRestClient();",
                "+",
                "     public abstract static class Builder<T extends AbstractSearchPanel> implements Serializable {",
                "@@ -122,2 +127,8 @@ public abstract class AbstractSearchPanel extends Panel {",
                "         populate();",
                "+        Pair<IModel<Map<String, String>>, Integer> groupInfo =",
                "+                Pair.of(groupNames, groupRestClient.search(\"/\",",
                "+                        null,",
                "+                        1,",
                "+                        1,",
                "+                        new SortParam<>(\"name\", true)).getTotalCount());",
                "@@ -138,3 +149,3 @@ public abstract class AbstractSearchPanel extends Panel {",
                "                 required,",
                "-                types, anames, dnames, groupNames, roleNames, resourceNames);",
                "+                types, anames, dnames, groupInfo, roleNames, resourceNames);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "index caa3f8a495..0a94110976 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "@@ -24,3 +24,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import org.apache.syncope.client.console.rest.GroupRestClient;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "@@ -35,3 +34,3 @@ public class AnyObjectSearchPanel extends AbstractSearchPanel {",
                "-    private final GroupRestClient groupRestClient = new GroupRestClient();",
                "+    public static final int MAX_GROUP_LIST_CARDINALITY = 30;",
                "@@ -82,6 +81,11 @@ public class AnyObjectSearchPanel extends AbstractSearchPanel {",
                "             protected Map<String, String> load() {",
                "-                List<GroupTO> groupTOs = groupRestClient.search(\"/\", null, -1, -1, new SortParam<>(\"name\", true), null);",
                "-",
                "-                final Map<String, String> result = new HashMap<>(groupTOs.size());",
                "-                for (GroupTO group : groupTOs) {",
                "+                List<GroupTO> res = groupRestClient.search(\"/\",",
                "+                        null,",
                "+                        1,",
                "+                        MAX_GROUP_LIST_CARDINALITY,",
                "+                        new SortParam<>(\"name\", true),",
                "+                        null);",
                "+",
                "+                final Map<String, String> result = new HashMap<>(res.size());",
                "+                for (GroupTO group : res) {",
                "                     result.put(group.getKey(), group.getName());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "index cc66d40304..6b92e12039 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "@@ -25,2 +25,3 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Collection;",
                " import java.util.Collections;",
                "@@ -29,3 +30,6 @@ import java.util.Map;",
                " import java.util.stream.Collectors;",
                "+import org.apache.commons.collections4.CollectionUtils;",
                "+import org.apache.commons.collections4.Transformer;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.client.console.commons.Constants;",
                "@@ -34,2 +38,3 @@ import org.apache.syncope.client.console.panels.search.SearchClause.Operator;",
                " import org.apache.syncope.client.console.panels.search.SearchClause.Type;",
                "+import org.apache.syncope.client.console.rest.GroupRestClient;",
                " import org.apache.syncope.client.console.rest.RelationshipTypeRestClient;",
                "@@ -40,2 +45,4 @@ import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPa",
                " import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;",
                "+import org.apache.syncope.client.lib.SyncopeClient;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                " import org.apache.syncope.common.lib.to.PlainSchemaTO;",
                "@@ -52,2 +59,3 @@ import org.apache.wicket.event.Broadcast;",
                " import org.apache.wicket.event.IEventSink;",
                "+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                " import org.apache.wicket.markup.html.WebMarkupContainer;",
                "@@ -76,3 +84,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "-    private final IModel<Map<String, String>> groupNames;",
                "+    private final Pair<IModel<Map<String, String>>, Integer> groupInfo;",
                "@@ -96,2 +104,4 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "+    private final GroupRestClient groupRestClient = new GroupRestClient();",
                "+",
                "     public SearchClausePanel(",
                "@@ -104,3 +114,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "             final IModel<List<String>> dnames,",
                "-            final IModel<Map<String, String>> groupNames,",
                "+            final Pair<IModel<Map<String, String>>, Integer> groupInfo,",
                "             final IModel<List<String>> roleNames,",
                "@@ -116,3 +126,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "         this.dnames = dnames;",
                "-        this.groupNames = groupNames;",
                "+        this.groupInfo = groupInfo;",
                "         this.roleNames = roleNames;",
                "@@ -135,3 +145,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "         searchButtonFragment = new Fragment(\"operator\", \"searchButtonFragment\", this);",
                "-        searchButtonFragment.add(searchButton.setEnabled(false));",
                "+        searchButtonFragment.add(searchButton.setEnabled(false).setVisible(false));",
                "@@ -201,3 +211,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                     case GROUP_MEMBERSHIP:",
                "-                        final List<String> groups = groupNames.getObject().keySet().",
                "+                        final List<String> groups = groupInfo.getLeft().getObject().values().",
                "                                 stream().collect(Collectors.toList());",
                "@@ -231,2 +241,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "         this.searchButton.setEnabled(true);",
                "+        this.searchButton.setVisible(true);",
                "@@ -356,15 +367,84 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "-        final AjaxDropDownChoicePanel<String> property = new AjaxDropDownChoicePanel<>(",
                "-                \"property\", \"property\", new PropertyModel<>(searchClause, \"property\"));",
                "-        property.hideLabel().setRequired(required).setOutputMarkupId(true);",
                "-        property.setChoices(properties);",
                "-        property.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+        final AjaxTextFieldPanel property = new AjaxTextFieldPanel(",
                "+                \"property\",",
                "+                \"property\",",
                "+                new PropertyModel<String>(searchClause, \"property\"),",
                "+                false);",
                "+        property.hideLabel().setOutputMarkupId(true).setEnabled(true);",
                "+        property.setChoices(properties.getObject());",
                "+        field.add(property);",
                "-            private static final long serialVersionUID = -1107858522700306810L;",
                "+        property.getField().add(AttributeModifier.replace(",
                "+                \"onkeydown\",",
                "+                Model.of(\"if(event.keyCode == 13) { event.preventDefault(); }\")));",
                "+",
                "+        property.getField().add(new IndicatorAjaxEventBehavior(\"onkeyup\") {",
                "+",
                "+            private static final long serialVersionUID = -7866120562087857309L;",
                "             @Override",
                "-            protected void onUpdate(final AjaxRequestTarget target) {",
                "+            protected void onEvent(final AjaxRequestTarget target) {",
                "+                if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {",
                "+                    return;",
                "+                }",
                "+",
                "+                if (field.getModel().getObject().getType() == Type.GROUP_MEMBERSHIP) {",
                "+                    target.focusComponent(null);",
                "+                    property.getField().inputChanged();",
                "+                    property.getField().validate();",
                "+                    if (property.getField().isValid()) {",
                "+                        property.getField().valid();",
                "+                        property.getField().updateModel();",
                "+                        String[] inputAsArray = property.getField().getInputAsArray();",
                "+",
                "+                        if (StringUtils.isBlank(property.getField().getInput())",
                "+                                || inputAsArray.length == 0) {",
                "+                            property.setChoices(properties.getObject());",
                "+                        } else {",
                "+                            String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)",
                "+                                    ? inputAsArray[1]",
                "+                                    : property.getField().getInput();",
                "+                            inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))",
                "+                                    ? inputValue + \"*\"",
                "+                                    : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))",
                "+                                    ? \"*\" + inputValue",
                "+                                    : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")",
                "+                                    ? inputValue : \"*\" + inputValue + \"*\");",
                "+",
                "+                            if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {",
                "+                                List<GroupTO> filteredGroups =",
                "+                                        groupRestClient.search(\"/\",",
                "+                                                SyncopeClient.getGroupSearchConditionBuilder().",
                "+                                                        is(\"name\").equalToIgnoreCase(inputValue).",
                "+                                                        query(),",
                "+                                                1,",
                "+                                                AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,",
                "+                                                new SortParam<>(\"name\", true),",
                "+                                                null);",
                "+                                Collection<String> newList =",
                "+                                        CollectionUtils.collect(filteredGroups,",
                "+                                                new Transformer<GroupTO, String>() {",
                "+",
                "+                                            @Override",
                "+                                            public String transform(final GroupTO input) {",
                "+                                                return input.getName();",
                "+                                            }",
                "+                                        });",
                "+",
                "+                                final List<String> names = new ArrayList<>(newList);",
                "+                                Collections.sort(names);",
                "+                                property.setChoices(names);",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            @Override",
                "+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {",
                "+                super.updateAjaxAttributes(attributes);",
                "+",
                "+                attributes.getAjaxCallListeners().clear();",
                "             }",
                "         });",
                "-        field.add(property);",
                "@@ -461,8 +541,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 if (type.getModelObject() == SearchClause.Type.RELATIONSHIP) {",
                "-                    if (comparator.getModelObject() == SearchClause.Comparator.EQUALS",
                "-                            || comparator.getModelObject() == SearchClause.Comparator.NOT_EQUALS) {",
                "-                        property.setEnabled(false);",
                "-                    } else {",
                "-                        property.setEnabled(true);",
                "-                    }",
                "+                    property.setEnabled(true);",
                "@@ -485,3 +560,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "             final Type type,",
                "-            final AjaxDropDownChoicePanel<String> property,",
                "+            final AjaxTextFieldPanel property,",
                "             final FieldPanel<Comparator> comparator,",
                "@@ -506,3 +581,6 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                     }",
                "-                    property.setChoiceRenderer(new DefaultChoiceRender());",
                "+",
                "+                    // reload properties list",
                "+                    properties.detach();",
                "+                    property.setChoices(properties.getObject());",
                "                     break;",
                "@@ -510,5 +588,8 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 case ROLE_MEMBERSHIP:",
                "-                    property.setChoiceRenderer(new DefaultChoiceRender());",
                "                     value.setEnabled(false);",
                "                     value.setModelObject(StringUtils.EMPTY);",
                "+",
                "+                    // reload properties list",
                "+                    properties.detach();",
                "+                    property.setChoices(properties.getObject());",
                "                     break;",
                "@@ -516,5 +597,8 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 case GROUP_MEMBERSHIP:",
                "-                    property.setChoiceRenderer(new GroupChoiceRender());",
                "                     value.setEnabled(false);",
                "                     value.setModelObject(StringUtils.EMPTY);",
                "+",
                "+                    // reload properties list",
                "+                    properties.detach();",
                "+                    property.setChoices(properties.getObject());",
                "                     break;",
                "@@ -528,5 +612,8 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 case RESOURCE:",
                "-                    property.setChoiceRenderer(new DefaultChoiceRender());",
                "                     value.setEnabled(false);",
                "                     value.setModelObject(StringUtils.EMPTY);",
                "+",
                "+                    // reload properties list",
                "+                    properties.detach();",
                "+                    property.setChoices(properties.getObject());",
                "                     break;",
                "@@ -534,13 +621,9 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                 case RELATIONSHIP:",
                "-                    property.setChoiceRenderer(new DefaultChoiceRender());",
                "-                    if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL",
                "-                            || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {",
                "-                        value.setEnabled(false);",
                "-                        value.setModelObject(StringUtils.EMPTY);",
                "-                        property.setEnabled(true);",
                "-                    } else {",
                "-                        value.setEnabled(true);",
                "-                        property.setEnabled(false);",
                "-                        property.setModelObject(null);",
                "-                    }",
                "+                    value.setEnabled(true);",
                "+                    value.setModelObject(StringUtils.EMPTY);",
                "+                    property.setEnabled(true);",
                "+",
                "+                    // reload properties list",
                "+                    properties.detach();",
                "+                    property.setChoices(properties.getObject());",
                "                     break;",
                "@@ -627,3 +710,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                             case NOT_EQUALS:",
                "-                                display = \"NOT WITH\";",
                "+                                display = \"WITHOUT\";",
                "                                 break;",
                "@@ -664,3 +747,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                             case NOT_EQUALS:",
                "-                                display = \"NOT WITH\";",
                "+                                display = \"WITHOUT\";",
                "                                 break;",
                "@@ -699,3 +782,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                     case \"NOT IN\":",
                "-                    case \"NOT WITH\":",
                "+                    case \"WITHOUT\":",
                "                         res = SearchClause.Comparator.NOT_EQUALS;",
                "@@ -741,3 +824,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "         final SearchClausePanel panel = new SearchClausePanel(",
                "-                getId(), name, null, required, types, anames, dnames, groupNames, roleNames, resourceNames);",
                "+                getId(), name, null, required, types, anames, dnames, groupInfo, roleNames, resourceNames);",
                "         panel.setReadOnly(this.isReadOnly());",
                "@@ -786,3 +869,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "         public Object getDisplayValue(final String object) {",
                "-            return groupNames.getObject().get(object);",
                "+            return groupInfo.getLeft().getObject().get(object);",
                "         }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "index 6f3d0d06d4..60ec367216 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "@@ -71,2 +71,19 @@ public class GroupRestClient extends AbstractAnyRestClient<GroupTO, GroupPatch>",
                "+    public PagedResult<GroupTO> search(",
                "+            final String realm,",
                "+            final String fiql,",
                "+            final int page,",
                "+            final int size,",
                "+            final SortParam<String> sort) {",
                "+",
                "+        PagedResult<GroupTO> res;",
                "+        do {",
                "+            res = getService(GroupService.class).",
                "+                    search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).",
                "+                            orderBy(toOrderBy(sort)).details(false).build());",
                "+        } while (page == -1 && size == -1 && res.getNext() != null);",
                "+",
                "+        return res;",
                "+    }",
                "+",
                "     public void bulkMembersAction(final String key, final BulkMembersActionType actionType) {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java",
                "index 4b85f667cd..16b7db5a42 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java",
                "@@ -61,2 +61,3 @@ public class AjaxTextFieldPanel extends FieldPanel<String> implements Cloneable",
                "         settings.setShowListOnEmptyInput(true);",
                "+        settings.setCssClassName(\"custom-autocomplete-box\");",
                "diff --git a/client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css b/client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css",
                "index 8763e9af2e..294c9787c7 100644",
                "--- a/client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css",
                "+++ b/client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css",
                "@@ -807,3 +807,3 @@ START - Search - AjaxDateTimePicker",
                " .clause .type{",
                "-  width: 120px !important;",
                "+  width: 170px !important;",
                " }",
                "@@ -811,3 +811,3 @@ START - Search - AjaxDateTimePicker",
                " .clause .type button{",
                "-  width: 120px !important;",
                "+  width: 170px !important;",
                " }",
                "@@ -815,3 +815,3 @@ START - Search - AjaxDateTimePicker",
                " .clause .property{",
                "-  width: 190px;",
                "+  width: 300px;",
                " }",
                "@@ -819,3 +819,3 @@ START - Search - AjaxDateTimePicker",
                " .clause .property button{",
                "-  width: 190px;",
                "+  width: 300px;",
                " }",
                "@@ -859,2 +859,7 @@ START - Search - AjaxDateTimePicker",
                " }",
                "+",
                "+.custom-autocomplete-box li.selected {",
                "+  background-color: #eee;",
                "+}",
                "+",
                " /**"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java",
                "client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1246": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "96a7848485c6f7c685266a301cc479ca2fb3a9d4"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1246",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e3e25ab0d87551a7f26261baa244a38048a5119",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515050115,
            "hunks": 3,
            "message": "[SYNCOPE-1261] Ensure that Connector Bundles are loaded on startup",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "index 85e54151de..32f22fbb05 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.common.lib.types.ConnConfProperty;",
                " import org.apache.syncope.common.lib.types.ConnectorCapability;",
                "+import org.apache.syncope.core.persistence.api.SyncopeLoader;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -50,3 +51,3 @@ import org.springframework.transaction.annotation.Transactional;",
                " @Component",
                "-public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "+public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, SyncopeLoader {",
                "@@ -68,2 +69,7 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "+    @Override",
                "+    public Integer getPriority() {",
                "+        return 100;",
                "+    }",
                "+",
                "     private String getBeanName(final ExternalResource resource) {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1261": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e153982e45918bfb3454c193c87d1a784ee415cb"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1261",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9207f10178c75bbda808b727f9ad2f0c2b6957f8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511366126,
            "hunks": 16,
            "message": "[SYNCOPE-1238] Stop the AjaxTimerBehavior once all expected connectors and resources are covered",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "index e7709d1581..b606a55017 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "@@ -24,3 +24,2 @@ import java.net.URI;",
                " import java.util.ArrayList;",
                "-import java.util.Collection;",
                " import java.util.HashMap;",
                "@@ -30,2 +29,3 @@ import java.util.Locale;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import org.apache.commons.collections4.CollectionUtils;",
                "@@ -165,3 +165,4 @@ public class Topology extends BasePage {",
                "-        body.add(new TopologyWebSocketBehavior());",
                "+        final TopologyWebSocketBehavior websocket = new TopologyWebSocketBehavior();",
                "+        body.add(websocket);",
                "@@ -375,10 +376,11 @@ public class Topology extends BasePage {",
                "         // -----------------------------------------",
                "-        final Collection<String> administrableConns = new HashSet<>();",
                "+        final Set<String> adminConns = new HashSet<>();",
                "         for (List<ConnInstanceTO> connInstances : connModel.getObject().values()) {",
                "-            administrableConns.addAll(CollectionUtils.collect(connInstances, EntityTOUtils.keyTransformer()));",
                "+            adminConns.addAll(CollectionUtils.collect(connInstances, EntityTOUtils.keyTransformer()));",
                "         }",
                "+        final Set<String> adminRes = new HashSet<>();",
                "         final List<String> connToBeProcessed = new ArrayList<>();",
                "         for (final ResourceTO resourceTO : resModel.getObject()) {",
                "-            if (administrableConns.contains(resourceTO.getConnector())) {",
                "+            if (adminConns.contains(resourceTO.getConnector())) {",
                "                 final TopologyNode topologynode = new TopologyNode(",
                "@@ -397,2 +399,4 @@ public class Topology extends BasePage {",
                "+                adminRes.add(resourceTO.getKey());",
                "+",
                "                 if (!connToBeProcessed.contains(resourceTO.getConnector())) {",
                "@@ -485,2 +489,6 @@ public class Topology extends BasePage {",
                "             protected void onTimer(final AjaxRequestTarget target) {",
                "+                if (websocket.connCheckDone(adminConns) && websocket.resCheckDone(adminRes)) {",
                "+                    stop(target);",
                "+                }",
                "+",
                "                 target.appendJavaScript(\"checkConnection()\");",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "index 634633238c..1134a00405 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "@@ -23,2 +23,4 @@ import com.fasterxml.jackson.databind.ObjectMapper;",
                " import java.io.IOException;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -49,9 +51,11 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-    private final Map<String, String> resources = new HashMap<>();",
                "+    private final Map<String, String> resources =",
                "+            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "-    private final Set<String> runningResCheck = new HashSet<>();",
                "+    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<String>());",
                "-    private final Map<String, String> connectors = new HashMap<>();",
                "+    private final Map<String, String> connectors =",
                "+            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "-    private final Set<String> runningConnCheck = new HashSet<>();",
                "+    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<String>());",
                "@@ -77,8 +81,6 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                    synchronized (runningConnCheck) {",
                "-                        if (runningConnCheck.contains(ckey)) {",
                "-                            LOG.debug(\"Running connection check for connector {}\", ckey);",
                "-                        } else {",
                "-                            runningConnCheck.add(ckey);",
                "-                        }",
                "+                    if (runningConnCheck.contains(ckey)) {",
                "+                        LOG.debug(\"Running connection check for connector {}\", ckey);",
                "+                    } else {",
                "+                        runningConnCheck.add(ckey);",
                "                     }",
                "@@ -98,8 +100,6 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                    synchronized (runningResCheck) {",
                "-                        if (runningResCheck.contains(rkey)) {",
                "-                            LOG.debug(\"Running connection check for resource {}\", rkey);",
                "-                        } else {",
                "-                            runningResCheck.add(rkey);",
                "-                        }",
                "+                    if (runningResCheck.contains(rkey)) {",
                "+                        LOG.debug(\"Running connection check for resource {}\", rkey);",
                "+                    } else {",
                "+                        runningResCheck.add(rkey);",
                "                     }",
                "@@ -122,2 +122,10 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "+    public boolean connCheckDone(final Collection<String> connectors) {",
                "+        return this.connectors.keySet().containsAll(connectors);",
                "+    }",
                "+",
                "+    public boolean resCheckDone(final Collection<String> resources) {",
                "+        return this.resources.keySet().containsAll(resources);",
                "+    }",
                "+",
                "     class ConnCheck implements Runnable {",
                "@@ -153,6 +161,4 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                synchronized (runningConnCheck) {",
                "-                    connectors.put(key, res);",
                "-                    runningConnCheck.remove(key);",
                "-                }",
                "+                connectors.put(key, res);",
                "+                runningConnCheck.remove(key);",
                "             } finally {",
                "@@ -194,6 +200,4 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                synchronized (runningResCheck) {",
                "-                    resources.put(key, res);",
                "-                    runningResCheck.remove(key);",
                "-                }",
                "+                resources.put(key, res);",
                "+                runningResCheck.remove(key);",
                "             } finally {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1238": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3ce928120d58c836bfe10addc4a549d1d049c48a"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1238",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b0423630a9bec2f7c393a4a196a063bfd07aeb2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511606997,
            "hunks": 3,
            "message": "[SYNCOPE-1239] fix plain attr value specification in case of this step is the last one",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "index 3814de1c9b..58ff78d6f0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "@@ -180,3 +180,3 @@ public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {",
                "             } else {",
                "-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());",
                "+                attrTO = attrMap.get(schema.getKey());",
                "             }",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "deleted file mode 100644",
                "index d3d50f3b0a..0000000000",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "+++ /dev/null",
                "@@ -1,18 +0,0 @@",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-copy_to_clipboard.feedback=Chave copiada para a \\u00e1rea de transfer\\u00eancia!",
                "-copy_to_clipboard.title=Clique para copiar a tecla para a \\u00e1rea de transfer\\u00eancia",
                "\\ No newline at end of file",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties",
                "deleted file mode 100644",
                "index 9d158d78a9..0000000000",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties",
                "+++ /dev/null",
                "@@ -1,18 +0,0 @@",
                "-# Licensed to the Apache Software Foundation (ASF) under one",
                "-# or more contributor license agreements.  See the NOTICE file",
                "-# distributed with this work for additional information",
                "-# regarding copyright ownership.  The ASF licenses this file",
                "-# to you under the Apache License, Version 2.0 (the",
                "-# \"License\"); you may not use this file except in compliance",
                "-# with the License.  You may obtain a copy of the License at",
                "-#",
                "-#   http://www.apache.org/licenses/LICENSE-2.0",
                "-#",
                "-# Unless required by applicable law or agreed to in writing,",
                "-# software distributed under the License is distributed on an",
                "-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-# KIND, either express or implied.  See the License for the",
                "-# specific language governing permissions and limitations",
                "-# under the License.",
                "-copy_to_clipboard.feedback=\\u041a\\u043b\\u044e\\u0447 \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430!",
                "-copy_to_clipboard.title=\\u041d\\u0430\\u0436\\u043c\\u0438\\u0442\\u0435, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u043a\\u043b\\u044e\\u0447 \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1239": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e7daf95ac97aa65af85fa74af6c651d341fea44c"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1239",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4193ab370b05d266d36ea37656d923cd7b040951",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513323713,
            "hunks": 9,
            "message": "[SYNCOPE-1249] Better management of User, Group and AnyObject field mapping - including mustChangePassword",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index d640187103..6d47aeb45e 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -22,2 +22,3 @@ import java.util.ArrayList;",
                " import java.util.Collections;",
                "+import java.util.Date;",
                " import java.util.HashSet;",
                "@@ -29,2 +30,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.reflect.FieldUtils;",
                "+import org.apache.commons.lang3.time.DateFormatUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "@@ -68,3 +70,2 @@ import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;",
                " import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "@@ -444,24 +445,9 @@ public class MappingManagerImpl implements MappingManager {",
                "-                case \"password\":",
                "-                    // ignore",
                "-                    break;",
                "-",
                "-                case \"username\":",
                "-                    if (reference instanceof User) {",
                "-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);",
                "-                        attrValue.setStringValue(((User) reference).getUsername());",
                "-                        values.add(attrValue);",
                "-                    }",
                "+                case \"realm\":",
                "+                    attrValue.setStringValue(reference.getRealm().getFullPath());",
                "+                    values.add(attrValue);",
                "                     break;",
                "-                case \"name\":",
                "-                    if (reference instanceof Group) {",
                "-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);",
                "-                        attrValue.setStringValue(((Group) reference).getName());",
                "-                        values.add(attrValue);",
                "-                    } else if (reference instanceof AnyObject) {",
                "-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);",
                "-                        attrValue.setStringValue(((AnyObject) reference).getName());",
                "-                        values.add(attrValue);",
                "-                    }",
                "+                case \"password\":",
                "+                    // ignore",
                "                     break;",
                "@@ -488,3 +474,2 @@ public class MappingManagerImpl implements MappingManager {",
                "                         if (StringUtils.isNotBlank(groupOwnerValue)) {",
                "-                            attrValue = entityFactory.newEntity(UPlainAttrValue.class);",
                "                             attrValue.setStringValue(groupOwnerValue);",
                "@@ -495,8 +480,34 @@ public class MappingManagerImpl implements MappingManager {",
                "+                case \"suspended\":",
                "+                    if (reference instanceof User) {",
                "+                        attrValue.setBooleanValue(((User) reference).isSuspended());",
                "+                        values.add(attrValue);",
                "+                    }",
                "+                    break;",
                "+",
                "+                case \"mustChangePassword\":",
                "+                    if (reference instanceof User) {",
                "+                        attrValue.setBooleanValue(((User) reference).isMustChangePassword());",
                "+                        values.add(attrValue);",
                "+                    }",
                "+                    break;",
                "+",
                "                 default:",
                "                     try {",
                "-                        attrValue.setStringValue(FieldUtils.readField(",
                "-                                reference, intAttrName.getField(), true).toString());",
                "+                        Object fieldValue = FieldUtils.readField(reference, intAttrName.getField(), true);",
                "+                        if (fieldValue instanceof Date) {",
                "+                            // needed because ConnId does not natively supports the Date type",
                "+                            attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.",
                "+                                    format((Date) fieldValue));",
                "+                        } else if (Boolean.TYPE.isInstance(fieldValue)) {",
                "+                            attrValue.setBooleanValue((Boolean) fieldValue);",
                "+                        } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {",
                "+                            attrValue.setDoubleValue((Double) fieldValue);",
                "+                        } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {",
                "+                            attrValue.setLongValue((Long) fieldValue);",
                "+                        } else {",
                "+                            attrValue.setStringValue(fieldValue.toString());",
                "+                        }",
                "                         values.add(attrValue);",
                "-                    } catch (IllegalAccessException e) {",
                "+                    } catch (Exception e) {",
                "                         LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), reference, e);"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1249": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "471c0fa67b68c37e8fe974b408079bc4e3c7c250"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1249",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "265b2a7d7b72634716c58be8d9890a0244888367",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513256810,
            "hunks": 3,
            "message": "[SYNCOPE-1251] Fix Update Activiti service task",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "index 51f71eb890..b694ee1b0b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "@@ -216,3 +216,3 @@ public class ApprovalDirectoryPanel",
                "                     formTO.getUserTO().setPassword(null);",
                "-                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch()); ",
                "+                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());",
                "                 }",
                "@@ -354,3 +354,6 @@ public class ApprovalDirectoryPanel",
                "                     actual = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);",
                "-                    claimForm(restClient.getFormForUser(actual.getEntity().getKey()).getTaskId());",
                "+                    WorkflowFormTO workFlowTO = restClient.getFormForUser(actual.getEntity().getKey());",
                "+                    if (workFlowTO != null) {",
                "+                        claimForm(workFlowTO.getTaskId());",
                "+                    }",
                "                 }",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/task/Update.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/task/Update.java",
                "index e9ed2797b2..c619211c4b 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/task/Update.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/task/Update.java",
                "@@ -65,2 +65,3 @@ public class Update extends AbstractFlowableServiceTask {",
                "         engine.getRuntimeService().setVariable(executionId, FlowableUserWorkflowAdapter.USER, user);",
                "+        engine.getRuntimeService().setVariable(executionId, FlowableUserWorkflowAdapter.USER_TO, updated);",
                "         engine.getRuntimeService().setVariable(executionId, FlowableUserWorkflowAdapter.USER_PATCH, userPatch);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/task/Update.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1251": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "afc353944f13d2d124b89ee317b1f50df6667d90"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1251",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d784ae297c79df8e7d9a7c5dec1677d716422ef2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512990455,
            "hunks": 6,
            "message": "SYNCOPE-1243 - Add information to GroupTO about user and AnyObject membership counts. Thanks to Francesco for reviewing.",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "index c5318400db..e4bf304a66 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "@@ -49,2 +49,10 @@ public class GroupTO extends AnyTO {",
                "+    private int staticUserMembershipCount;",
                "+",
                "+    private int dynamicUserMembershipCount;",
                "+",
                "+    private int staticAnyObjectMembershipCount;",
                "+",
                "+    private int dynamicAnyObjectMembershipCount;",
                "+",
                "     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "@@ -97,2 +105,34 @@ public class GroupTO extends AnyTO {",
                "+    public int getStaticUserMembershipCount() {",
                "+        return staticUserMembershipCount;",
                "+    }",
                "+",
                "+    public void setStaticUserMembershipCount(final int staticUserMembershipCount) {",
                "+        this.staticUserMembershipCount = staticUserMembershipCount;",
                "+    }",
                "+",
                "+    public int getDynamicUserMembershipCount() {",
                "+        return dynamicUserMembershipCount;",
                "+    }",
                "+",
                "+    public void setDynamicUserMembershipCount(final int dynamicUserMembershipCount) {",
                "+        this.dynamicUserMembershipCount = dynamicUserMembershipCount;",
                "+    }",
                "+",
                "+    public int getStaticAnyObjectMembershipCount() {",
                "+        return staticAnyObjectMembershipCount;",
                "+    }",
                "+",
                "+    public void setStaticAnyObjectMembershipCount(final int staticAnyObjectMembershipCount) {",
                "+        this.staticAnyObjectMembershipCount = staticAnyObjectMembershipCount;",
                "+    }",
                "+",
                "+    public int getDynamicAnyObjectMembershipCount() {",
                "+        return dynamicAnyObjectMembershipCount;",
                "+    }",
                "+",
                "+    public void setDynamicAnyObjectMembershipCount(final int dynamicAnyObjectMembershipCount) {",
                "+        this.dynamicAnyObjectMembershipCount = dynamicAnyObjectMembershipCount;",
                "+    }",
                "+",
                "     @JsonProperty",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "index 1ee1cf1eea..11b61e8faa 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "@@ -51,2 +51,10 @@ public interface GroupDAO extends AnyDAO<Group> {",
                "+    int countAMembers(Group group);",
                "+",
                "+    int countUMembers(Group group);",
                "+",
                "+    int countADynMembers(Group group);",
                "+",
                "+    int countUDynMembers(Group group);",
                "+",
                "     Collection<String> findAllResourceKeys(final String key);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index 62be797233..df792daf4e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -29,2 +29,3 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+",
                " import javax.persistence.NoResultException;",
                "@@ -396,2 +397,42 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "+    @Override",
                "+    public int countAMembers(final Group group) {",
                "+        Query query = entityManager().createNativeQuery(",
                "+            \"SELECT COUNT(anyObject_id) FROM \" + JPAAMembership.TABLE + \" WHERE group_id=?\");",
                "+        query.setParameter(1, group.getKey());",
                "+",
                "+        return ((Number) query.getSingleResult()).intValue();",
                "+    }",
                "+",
                "+    @Override",
                "+    public int countUMembers(final Group group) {",
                "+        Query query = entityManager().createNativeQuery(",
                "+            \"SELECT COUNT(user_id) FROM \" + JPAUMembership.TABLE + \" WHERE group_id=?\");",
                "+        query.setParameter(1, group.getKey());",
                "+",
                "+        return ((Number) query.getSingleResult()).intValue();",
                "+    }",
                "+",
                "+    @Override",
                "+    public int countADynMembers(final Group group) {",
                "+        Query query = entityManager().createNativeQuery(",
                "+            \"SELECT COUNT(any_id) FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=?\");",
                "+        query.setParameter(1, group.getKey());",
                "+",
                "+        return ((Number) query.getSingleResult()).intValue();",
                "+    }",
                "+",
                "+    @Override",
                "+    public int countUDynMembers(final Group group) {",
                "+        if (group.getUDynMembership() == null) {",
                "+            return 0;",
                "+        }",
                "+",
                "+        Query query = entityManager().createNativeQuery(",
                "+                \"SELECT COUNT(any_id) FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=?\");",
                "+        query.setParameter(1, group.getKey());",
                "+",
                "+        return ((Number) query.getSingleResult()).intValue();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "index da70ed849a..f797fd432c 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "@@ -364,2 +364,10 @@ public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupD",
                "+        // Static user and AnyType membership counts",
                "+        groupTO.setStaticUserMembershipCount(groupDAO.countUMembers(group));",
                "+        groupTO.setStaticAnyObjectMembershipCount(groupDAO.countAMembers(group));",
                "+",
                "+        // Dynamic user and AnyType membership counts",
                "+        groupTO.setDynamicUserMembershipCount(groupDAO.countUDynMembers(group));",
                "+        groupTO.setDynamicAnyObjectMembershipCount(groupDAO.countADynMembers(group));",
                "+",
                "         if (group.getUDynMembership() != null) {"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1243": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "93e143590da19d5d3d68909726830db41bac8b3e"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1243",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "df35f9ca9009a3a51f43d9d8643c73b80162cfde",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507723467,
            "hunks": 18,
            "message": "[SYNCOPE-1222] Better resource management in case of membership removal",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 1bdfa369db..c677063763 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -22,2 +22,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.HashSet;",
                "@@ -264,5 +265,2 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "-        Set<String> toBeDeprovisioned = new HashSet<>();",
                "-        Set<String> toBeProvisioned = new HashSet<>();",
                "-",
                "         // relationships",
                "@@ -279,5 +277,2 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                     relationship.get().setLeftEnd(null);",
                "-",
                "-                    toBeDeprovisioned.addAll(",
                "-                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));",
                "                 }",
                "@@ -305,4 +300,2 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                             anyObject.add(newRelationship);",
                "-",
                "-                            toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));",
                "                         } else {",
                "@@ -320,3 +313,21 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "+        // prepare for membership-related resource management",
                "         Collection<ExternalResource> resources = anyObjectDAO.findAllResources(anyObject);",
                "+",
                "+        Map<String, Set<String>> reasons = new HashMap<>();",
                "+        anyObject.getResources().forEach(resource -> {",
                "+            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(anyObject.getKey())));",
                "+        });",
                "+        anyObjectDAO.findAllGroupKeys(anyObject).forEach(group -> {",
                "+            groupDAO.findAllResourceKeys(group).forEach(resource -> {",
                "+                if (!reasons.containsKey(resource)) {",
                "+                    reasons.put(resource, new HashSet<>());",
                "+                }",
                "+                reasons.get(resource).add(group);",
                "+            });",
                "+        });",
                "+",
                "+        Set<String> toBeDeprovisioned = new HashSet<>();",
                "+        Set<String> toBeProvisioned = new HashSet<>();",
                "+",
                "         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);",
                "@@ -336,3 +347,8 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                 if (membPatch.getOperation() == PatchOperation.DELETE) {",
                "-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));",
                "+                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().",
                "+                            filter(resource -> reasons.containsKey(resource)).",
                "+                            forEach(resource -> {",
                "+                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());",
                "+                                toBeProvisioned.add(resource);",
                "+                            });",
                "                 }",
                "@@ -391,2 +407,7 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "+        // finalize resource management",
                "+        reasons.entrySet().stream().",
                "+                filter(entry -> entry.getValue().isEmpty()).",
                "+                forEach(entry -> toBeDeprovisioned.add(entry.getKey()));",
                "+",
                "         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);",
                "@@ -394,3 +415,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "-        // In case of new memberships all current resources need to be updated in order to propagate new group",
                "+        // in case of new memberships all current resources need to be updated in order to propagate new group",
                "         // attribute values.",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index 6badbef309..770e7da8dc 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -23,2 +23,3 @@ import java.util.Collections;",
                " import java.util.Date;",
                "+import java.util.HashMap;",
                " import java.util.HashSet;",
                "@@ -367,5 +368,2 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "-        Set<String> toBeDeprovisioned = new HashSet<>();",
                "-        Set<String> toBeProvisioned = new HashSet<>();",
                "-",
                "         // relationships",
                "@@ -382,5 +380,2 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                     relationship.get().setLeftEnd(null);",
                "-",
                "-                    toBeDeprovisioned.addAll(",
                "-                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));",
                "                 }",
                "@@ -398,4 +393,2 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                         user.add(newRelationship);",
                "-",
                "-                        toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));",
                "                     } else {",
                "@@ -412,3 +405,21 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "+        // prepare for membership-related resource management",
                "         Collection<ExternalResource> resources = userDAO.findAllResources(user);",
                "+",
                "+        Map<String, Set<String>> reasons = new HashMap<>();",
                "+        user.getResources().forEach(resource -> {",
                "+            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(user.getKey())));",
                "+        });",
                "+        userDAO.findAllGroupKeys(user).forEach(group -> {",
                "+            groupDAO.findAllResourceKeys(group).forEach(resource -> {",
                "+                if (!reasons.containsKey(resource)) {",
                "+                    reasons.put(resource, new HashSet<>());",
                "+                }",
                "+                reasons.get(resource).add(group);",
                "+            });",
                "+        });",
                "+",
                "+        Set<String> toBeDeprovisioned = new HashSet<>();",
                "+        Set<String> toBeProvisioned = new HashSet<>();",
                "+",
                "         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);",
                "@@ -429,3 +440,8 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                 if (membPatch.getOperation() == PatchOperation.DELETE) {",
                "-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));",
                "+                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().",
                "+                            filter(resource -> reasons.containsKey(resource)).",
                "+                            forEach(resource -> {",
                "+                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());",
                "+                                toBeProvisioned.add(resource);",
                "+                            });",
                "                 }",
                "@@ -496,2 +512,7 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "+        // finalize resource management",
                "+        reasons.entrySet().stream().",
                "+                filter(entry -> entry.getValue().isEmpty()).",
                "+                forEach(entry -> toBeDeprovisioned.add(entry.getKey()));",
                "+",
                "         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);",
                "@@ -499,3 +520,3 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "-        // In case of new memberships all current resources need to be updated in order to propagate new group",
                "+        // in case of new memberships all current resources need to be updated in order to propagate new group",
                "         // attribute values."
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1222": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5ed622cdc04803bf1b3254efbea5debaa465604c"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f278a97a2935bcc982881483aa3cba005d94de88",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517327524,
            "hunks": 1,
            "message": "[SYNCOPE-1266] fixes log level",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "index a1311a0c5b..631496cee7 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java",
                "@@ -265,3 +265,3 @@ public class BinaryFieldPanel extends FieldPanel<String> {",
                "     public BinaryFieldPanel clone() {",
                "-        LOG.info(\"Custom clone for binary field panel...\");",
                "+        LOG.debug(\"Custom clone for binary field panel...\");",
                "         return new BinaryFieldPanel(getId(), this.name, this.model, this.mimeType, this.fileKey);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1266": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8681aa76ed000be4fcdb85a843acb511c2f4de35"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1266",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "80ee9b9cd8c8e6d2085ccdfd777a871ce498588c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513093020,
            "hunks": 90,
            "message": "[SYNCOPE-152] Create, replace and delete Users and Groups",
            "diff": [
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index 86841a1e36..777d129a37 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -40,2 +40,8 @@ under the License.",
                "   <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.client</groupId>",
                "+      <artifactId>syncope-client-console</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "@@ -51,4 +57,4 @@ under the License.",
                "     <dependency>",
                "-      <groupId>org.apache.syncope.client</groupId>",
                "-      <artifactId>syncope-client-console</artifactId>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "       <version>${project.version}</version>",
                "@@ -104,3 +110,3 @@ under the License.",
                "       <resource>",
                "-\t<directory>${project.basedir}/../../ext/saml2sp/agent/src/main/resources</directory>",
                "+        <directory>${project.basedir}/../../ext/saml2sp/agent/src/main/resources</directory>",
                "         <includes>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index a567ac3b01..25c38efa97 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -87,3 +87,13 @@ under the License.",
                "     </dependency>",
                "-        ",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+      <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "@@ -193,3 +203,3 @@ under the License.",
                "       <resource>",
                "-\t<directory>${project.basedir}/../../ext/saml2sp/logic/src/main/resources</directory>",
                "+        <directory>${project.basedir}/../../ext/saml2sp/logic/src/main/resources</directory>",
                "         <includes>",
                "diff --git a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "index 481eb5fcad..521e2e381b 100644",
                "--- a/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "+++ b/ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "@@ -26,3 +26,3 @@ public class SCIMManagerConf implements Serializable {",
                "-    private String manager;",
                "+    private String key;",
                "@@ -30,8 +30,8 @@ public class SCIMManagerConf implements Serializable {",
                "-    public String getManager() {",
                "-        return manager;",
                "+    public String getKey() {",
                "+        return key;",
                "     }",
                "-    public void setManager(final String manager) {",
                "-        this.manager = manager;",
                "+    public void setKey(final String key) {",
                "+        this.key = key;",
                "     }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index 01c2f3909e..598de65c2e 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.logic;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collections;",
                "@@ -25,2 +26,5 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "+import org.apache.commons.collections4.IterableUtils;",
                "+import org.apache.commons.collections4.Predicate;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -42,2 +46,3 @@ import org.apache.syncope.core.spring.security.AuthDataAccessor;",
                " import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.Value;",
                "@@ -53,2 +58,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUserManager;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                " import org.apache.syncope.ext.scimv2.api.type.Function;",
                "@@ -65,2 +71,9 @@ public class SCIMDataBinder {",
                "+    private static final List<String> USER_SCHEMAS = Collections.singletonList(Resource.User.schema());",
                "+",
                "+    private static final List<String> ENTERPRISE_USER_SCHEMAS =",
                "+            Arrays.asList(Resource.User.schema(), Resource.EnterpriseUser.schema());",
                "+",
                "+    private static final List<String> GROUP_SCHEMAS = Collections.singletonList(Resource.Group.schema());",
                "+",
                "     @Autowired",
                "@@ -201,3 +214,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"nickName\")",
                "@@ -208,3 +220,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"profileUrl\")",
                "@@ -215,3 +226,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"title\")",
                "@@ -222,3 +232,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"userType\")",
                "@@ -229,3 +238,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"preferredLanguage\")",
                "@@ -236,3 +244,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"locale\")",
                "@@ -243,3 +250,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"timezone\")",
                "@@ -294,3 +300,2 @@ public class SCIMDataBinder {",
                "             }",
                "-",
                "             if (output(attributes, excludedAttributes, \"x509Certificates\")) {",
                "@@ -347,4 +352,4 @@ public class SCIMDataBinder {",
                "-                if (conf.getEnterpriseUserConf().getManager().getManager() != null",
                "-                        && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getManager())) {",
                "+                if (conf.getEnterpriseUserConf().getManager().getKey() != null",
                "+                        && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getKey())) {",
                "@@ -352,3 +357,3 @@ public class SCIMDataBinder {",
                "                         UserTO userManager = userLogic.read(",
                "-                                attrs.get(conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "+                                attrs.get(conf.getEnterpriseUserConf().getManager().getKey()).getValues().get(0));",
                "                         manager.setValue(userManager.getKey());",
                "@@ -373,4 +378,3 @@ public class SCIMDataBinder {",
                "                     } catch (Exception e) {",
                "-                        LOG.error(\"Could not read user {}\",",
                "-                                conf.getEnterpriseUserConf().getManager().getManager(), e);",
                "+                        LOG.error(\"Could not read user {}\", conf.getEnterpriseUserConf().getManager().getKey(), e);",
                "                     }",
                "@@ -421,2 +425,226 @@ public class SCIMDataBinder {",
                "+    private <E extends Enum<?>> void fill(",
                "+            final Set<AttrTO> attrs,",
                "+            final List<SCIMComplexConf<E>> confs,",
                "+            final List<SCIMComplexValue> values) {",
                "+",
                "+        for (final SCIMComplexValue value : values) {",
                "+            if (value.getType() != null) {",
                "+                SCIMComplexConf<E> conf = IterableUtils.find(confs, new Predicate<SCIMComplexConf<E>>() {",
                "+",
                "+                    @Override",
                "+                    public boolean evaluate(final SCIMComplexConf<E> object) {",
                "+                        return value.getType().equals(object.getType().name());",
                "+                    }",
                "+                });",
                "+                if (conf != null) {",
                "+                    attrs.add(new AttrTO.Builder().schema(conf.getValue()).value(value.getValue()).build());",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    public UserTO toUserTO(final SCIMUser user) {",
                "+        if (!USER_SCHEMAS.equals(user.getSchemas()) && !ENTERPRISE_USER_SCHEMAS.equals(user.getSchemas())) {",
                "+            throw new BadRequestException(ErrorType.invalidValue);",
                "+        }",
                "+",
                "+        UserTO userTO = new UserTO();",
                "+        userTO.setRealm(SyncopeConstants.ROOT_REALM);",
                "+        userTO.setKey(user.getId());",
                "+        userTO.setUsername(user.getUserName());",
                "+",
                "+        SCIMConf conf = confManager.get();",
                "+",
                "+        if (conf.getUserConf() != null) {",
                "+            if (conf.getUserConf().getName() != null && user.getName() != null) {",
                "+                if (conf.getUserConf().getName().getFamilyName() != null",
                "+                        && user.getName().getFamilyName() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getFamilyName()).",
                "+                            value(user.getName().getFamilyName()).build());",
                "+                }",
                "+                if (conf.getUserConf().getName().getFormatted() != null",
                "+                        && user.getName().getFormatted() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getFormatted()).",
                "+                            value(user.getName().getFormatted()).build());",
                "+                }",
                "+                if (conf.getUserConf().getName().getGivenName() != null",
                "+                        && user.getName().getGivenName() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getGivenName()).",
                "+                            value(user.getName().getGivenName()).build());",
                "+                }",
                "+                if (conf.getUserConf().getName().getHonorificPrefix() != null",
                "+                        && user.getName().getHonorificPrefix() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getHonorificPrefix()).",
                "+                            value(user.getName().getHonorificPrefix()).build());",
                "+                }",
                "+                if (conf.getUserConf().getName().getHonorificSuffix() != null",
                "+                        && user.getName().getHonorificSuffix() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getHonorificSuffix()).",
                "+                            value(user.getName().getHonorificSuffix()).build());",
                "+                }",
                "+                if (conf.getUserConf().getName().getMiddleName() != null",
                "+                        && user.getName().getMiddleName() != null) {",
                "+",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getName().getMiddleName()).",
                "+                            value(user.getName().getMiddleName()).build());",
                "+                }",
                "+            }",
                "+",
                "+            if (conf.getUserConf().getDisplayName() != null && user.getDisplayName() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getDisplayName()).value(user.getDisplayName()).build());",
                "+            }",
                "+            if (conf.getUserConf().getNickName() != null && user.getNickName() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getNickName()).value(user.getNickName()).build());",
                "+            }",
                "+            if (conf.getUserConf().getProfileUrl() != null && user.getProfileUrl() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getProfileUrl()).value(user.getProfileUrl()).build());",
                "+            }",
                "+            if (conf.getUserConf().getTitle() != null && user.getTitle() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getTitle()).value(user.getTitle()).build());",
                "+            }",
                "+            if (conf.getUserConf().getUserType() != null && user.getUserType() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getUserType()).value(user.getUserType()).build());",
                "+            }",
                "+            if (conf.getUserConf().getPreferredLanguage() != null && user.getPreferredLanguage() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getPreferredLanguage()).value(user.getPreferredLanguage()).build());",
                "+            }",
                "+            if (conf.getUserConf().getLocale() != null && user.getLocale() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getLocale()).value(user.getLocale()).build());",
                "+            }",
                "+            if (conf.getUserConf().getTimezone() != null && user.getTimezone() != null) {",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getUserConf().getTimezone()).value(user.getTimezone()).build());",
                "+            }",
                "+",
                "+            fill(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());",
                "+            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());",
                "+            fill(userTO.getPlainAttrs(), conf.getUserConf().getIms(), user.getIms());",
                "+            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());",
                "+",
                "+            for (final SCIMUserAddress address : user.getAddresses()) {",
                "+                if (address.getType() != null) {",
                "+                    SCIMUserAddressConf addressConf = IterableUtils.find(conf.getUserConf().getAddresses(),",
                "+                            new Predicate<SCIMUserAddressConf>() {",
                "+",
                "+                        @Override",
                "+                        public boolean evaluate(final SCIMUserAddressConf object) {",
                "+                            return address.getType().equals(object.getType().name());",
                "+                        }",
                "+                    });",
                "+                    if (addressConf != null) {",
                "+                        if (addressConf.getFormatted() != null && address.getFormatted() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getFormatted()).value(address.getFormatted()).build());",
                "+                        }",
                "+                        if (addressConf.getStreetAddress() != null && address.getStreetAddress() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getStreetAddress()).value(address.getStreetAddress()).build());",
                "+                        }",
                "+                        if (addressConf.getLocality() != null && address.getLocality() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getLocality()).value(address.getLocality()).build());",
                "+                        }",
                "+                        if (addressConf.getRegion() != null && address.getFormatted() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getFormatted()).value(address.getFormatted()).build());",
                "+                        }",
                "+                        if (addressConf.getPostalCode() != null && address.getPostalCode() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getPostalCode()).value(address.getPostalCode()).build());",
                "+                        }",
                "+                        if (addressConf.getCountry() != null && address.getCountry() != null) {",
                "+                            userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                                    schema(addressConf.getCountry()).value(address.getCountry()).build());",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            for (int i = 0; i < user.getX509Certificates().size(); i++) {",
                "+                Value certificate = user.getX509Certificates().get(i);",
                "+                if (conf.getUserConf().getX509Certificates().size() > i) {",
                "+                    userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                            schema(conf.getUserConf().getX509Certificates().get(i)).",
                "+                            value(certificate.getValue()).build());",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (conf.getEnterpriseUserConf() != null) {",
                "+            if (conf.getEnterpriseUserConf().getEmployeeNumber() != null",
                "+                    && user.getEnterpriseInfo().getEmployeeNumber() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getEmployeeNumber()).",
                "+                        value(user.getEnterpriseInfo().getEmployeeNumber()).build());",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getCostCenter() != null",
                "+                    && user.getEnterpriseInfo().getCostCenter() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getCostCenter()).",
                "+                        value(user.getEnterpriseInfo().getCostCenter()).build());",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getOrganization() != null",
                "+                    && user.getEnterpriseInfo().getOrganization() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getOrganization()).",
                "+                        value(user.getEnterpriseInfo().getOrganization()).build());",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getDivision() != null",
                "+                    && user.getEnterpriseInfo().getDivision() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getDivision()).",
                "+                        value(user.getEnterpriseInfo().getDivision()).build());",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getDepartment() != null",
                "+                    && user.getEnterpriseInfo().getDepartment() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getDepartment()).",
                "+                        value(user.getEnterpriseInfo().getDepartment()).build());",
                "+            }",
                "+            if (conf.getEnterpriseUserConf().getManager() != null",
                "+                    && conf.getEnterpriseUserConf().getManager().getKey() != null",
                "+                    && user.getEnterpriseInfo().getManager() != null",
                "+                    && user.getEnterpriseInfo().getManager().getValue() != null) {",
                "+",
                "+                userTO.getPlainAttrs().add(new AttrTO.Builder().",
                "+                        schema(conf.getEnterpriseUserConf().getManager().getKey()).",
                "+                        value(user.getEnterpriseInfo().getManager().getValue()).build());",
                "+            }",
                "+        }",
                "+",
                "+        for (Group group : user.getGroups()) {",
                "+            userTO.getMemberships().add(new MembershipTO.Builder().group(group.getValue()).build());",
                "+        }",
                "+",
                "+        for (Value role : user.getRoles()) {",
                "+            userTO.getRoles().add(role.getValue());",
                "+        }",
                "+",
                "+        return userTO;",
                "+    }",
                "+",
                "     public SCIMGroup toSCIMGroup(",
                "@@ -460,4 +688,3 @@ public class SCIMDataBinder {",
                "                             StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),",
                "-                            userTO.getUsername(),",
                "-                            Resource.User));",
                "+                            userTO.getUsername()));",
                "                 }",
                "@@ -468,2 +695,15 @@ public class SCIMDataBinder {",
                "     }",
                "+",
                "+    public GroupTO toGroupTO(final SCIMGroup group) {",
                "+        if (!GROUP_SCHEMAS.equals(group.getSchemas())) {",
                "+            throw new BadRequestException(ErrorType.invalidValue);",
                "+        }",
                "+",
                "+        GroupTO groupTO = new GroupTO();",
                "+        groupTO.setRealm(SyncopeConstants.ROOT_REALM);",
                "+        groupTO.setKey(group.getId());",
                "+        groupTO.setName(group.getDisplayName());",
                "+        return groupTO;",
                "+    }",
                "+",
                " }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "index cfb48f94a9..34eded014e 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "@@ -30,3 +30,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import javax.ws.rs.NotFoundException;",
                " import javax.ws.rs.core.UriBuilder;",
                "@@ -35,2 +34,3 @@ import org.apache.syncope.common.lib.scim.SCIMConf;",
                " import org.apache.syncope.core.logic.scim.SCIMConfManager;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                " import org.apache.syncope.ext.scimv2.api.data.AuthenticationScheme;",
                "@@ -184,3 +184,3 @@ public class SCIMLogic extends AbstractLogic<AbstractBaseBean> {",
                "         if (found == null) {",
                "-            throw new NotFoundException(\"Schema \" + schema);",
                "+            throw new NotFoundException(\"Schema \" + schema + \" not found\");",
                "         }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "index 9ad7b823e0..8948cbbd76 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "@@ -23,3 +23,3 @@ import org.antlr.v4.runtime.CommonTokenStream;",
                " import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "@@ -47,4 +47,4 @@ public final class SearchCondConverter {",
                "         } catch (Exception e) {",
                "-            LOG.error(\"Could not parse {}\", filter, e);",
                "-            throw new SCIMBadRequestException(ErrorType.invalidFilter, e.getMessage());",
                "+            LOG.error(\"Could not parse '{}'\", filter, e);",
                "+            throw new BadRequestException(ErrorType.invalidFilter, \"Could not parse '\" + filter + \"'\");",
                "         }",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "index 5f3d80e65a..0c9eaa39bb 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "@@ -120,6 +120,6 @@ public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "                 if (conf.getEnterpriseUserConf().getManager() != null",
                "-                        && conf.getEnterpriseUserConf().getManager().getManager() != null) {",
                "+                        && conf.getEnterpriseUserConf().getManager().getKey() != null) {",
                "                     attributeCond = new AttributeCond();",
                "-                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getManager());",
                "+                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());",
                "                 }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java",
                "similarity index 61%",
                "rename from ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "rename to ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java",
                "index d211a35fdc..9ec456d56f 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java",
                "@@ -20,15 +20,22 @@ package org.apache.syncope.ext.scimv2.api;",
                "-import javax.ws.rs.ClientErrorException;",
                "-import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "-public class ConflictException extends ClientErrorException {",
                "+public class BadRequestException extends RuntimeException {",
                "-    private static final long serialVersionUID = -6845464464868163175L;",
                "+    private static final long serialVersionUID = -2588839750716910491L;",
                "-    public ConflictException() {",
                "-        super(Response.Status.CONFLICT);",
                "+    private final ErrorType errorType;",
                "+",
                "+    public BadRequestException(final ErrorType errorType) {",
                "+        super();",
                "+        this.errorType = errorType;",
                "+    }",
                "+",
                "+    public BadRequestException(final ErrorType errorType, final String detail) {",
                "+        super(detail);",
                "+        this.errorType = errorType;",
                "     }",
                "-    public ConflictException(final String message) {",
                "-        super(message, Response.Status.CONFLICT);",
                "+    public ErrorType getErrorType() {",
                "+        return errorType;",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "deleted file mode 100644",
                "index e6ab195285..0000000000",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "+++ /dev/null",
                "@@ -1,36 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.ext.scimv2.api;",
                "-",
                "-import javax.ws.rs.ClientErrorException;",
                "-import javax.ws.rs.core.Response;",
                "-",
                "-public class PayloadTooLargeException extends ClientErrorException {",
                "-",
                "-    private static final long serialVersionUID = -3980136349506530672L;",
                "-",
                "-    public PayloadTooLargeException() {",
                "-        super(Response.Status.REQUEST_ENTITY_TOO_LARGE);",
                "-    }",
                "-",
                "-    public PayloadTooLargeException(final String message) {",
                "-        super(message, Response.Status.REQUEST_ENTITY_TOO_LARGE);",
                "-    }",
                "-",
                "-}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "index 902217d0f5..f2513625b4 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "@@ -20,8 +20,6 @@ package org.apache.syncope.ext.scimv2.api.data;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                "-import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "-@JsonPropertyOrder({ \"value\", \"$ref\", \"display\", \"type\" })",
                "+@JsonPropertyOrder({ \"value\", \"$ref\", \"display\" })",
                " public class Member extends Reference {",
                "@@ -30,5 +28,2 @@ public class Member extends Reference {",
                "-    @JsonIgnore",
                "-    private final Resource type;",
                "-",
                "     public Member(",
                "@@ -36,12 +31,5 @@ public class Member extends Reference {",
                "             @JsonProperty(\"$ref\") final String ref,",
                "-            @JsonProperty(\"display\") final String display,",
                "-            @JsonProperty(\"type\") final Resource type) {",
                "+            @JsonProperty(\"display\") final String display) {",
                "         super(value, display, ref);",
                "-        this.type = type;",
                "-    }",
                "-",
                "-    @JsonProperty",
                "-    public String getType() {",
                "-        return type == null ? null : type.name();",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "index f0548c45af..cf1813f607 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "@@ -24,5 +24,7 @@ import com.fasterxml.jackson.annotation.JsonFormat.Shape;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                " import java.util.Arrays;",
                " import java.util.List;",
                "-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "@@ -30,2 +32,3 @@ import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+@JsonPropertyOrder({ \"schemas\", \"scimType\", \"detail\", \"status\" })",
                " public class SCIMError extends SCIMBean {",
                "@@ -36,11 +39,11 @@ public class SCIMError extends SCIMBean {",
                "-    private final ErrorType scimType;",
                "-",
                "-    private final String detail;",
                "+    private ErrorType scimType;",
                "     @JsonFormat(shape = Shape.STRING)",
                "-    private final int status = 400;",
                "+    private int status;",
                "+",
                "+    private final String detail;",
                "-    public SCIMError(final SCIMBadRequestException ex) {",
                "-        this(ex.getErrorType(), ex.getMessage());",
                "+    public SCIMError(final BadRequestException ex) {",
                "+        this(ex.getErrorType(), Response.Status.BAD_REQUEST.getStatusCode(), ex.getMessage());",
                "     }",
                "@@ -50,2 +53,3 @@ public class SCIMError extends SCIMBean {",
                "             @JsonProperty(\"scimType\") final ErrorType scimType,",
                "+            @JsonProperty(\"status\") final int status,",
                "             @JsonProperty(\"detail\") final String detail) {",
                "@@ -53,2 +57,3 @@ public class SCIMError extends SCIMBean {",
                "         this.scimType = scimType;",
                "+        this.status = status;",
                "         this.detail = detail;",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "index 7bafd4b28d..8ae45459a1 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "@@ -33,3 +33,3 @@ public class SCIMGroup extends SCIMResource {",
                "-    private final String displayName;",
                "+    private String displayName;",
                "@@ -47,2 +47,6 @@ public class SCIMGroup extends SCIMResource {",
                "+    public void setDisplayName(final String displayName) {",
                "+        this.displayName = displayName;",
                "+    }",
                "+",
                "     public String getDisplayName() {",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "index ac7c0a0069..8010218a75 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "@@ -39,5 +39,5 @@ public interface GroupService extends ReadService<SCIMGroup> {",
                "     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response create();",
                "+    Response create(SCIMGroup group);",
                "-    @PUT",
                "+    @PATCH",
                "     @Path(\"{id}\")",
                "@@ -45,14 +45,14 @@ public interface GroupService extends ReadService<SCIMGroup> {",
                "     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response replace(@NotNull @PathParam(\"id\") String id);",
                "+    Response update(@NotNull @PathParam(\"id\") String id);",
                "-    @DELETE",
                "+    @PUT",
                "     @Path(\"{id}\")",
                "     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response delete(@NotNull @PathParam(\"id\") String id);",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response replace(@NotNull @PathParam(\"id\") String id, SCIMGroup group);",
                "-    @PATCH",
                "+    @DELETE",
                "     @Path(\"{id}\")",
                "     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response update(@NotNull @PathParam(\"id\") String id);",
                "+    Response delete(@NotNull @PathParam(\"id\") String id);",
                " }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "index febb5e4c57..62ddc21be1 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "@@ -39,3 +39,9 @@ public interface UserService extends ReadService<SCIMUser> {",
                "     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response create();",
                "+    Response create(SCIMUser user);",
                "+",
                "+    @PATCH",
                "+    @Path(\"{id}\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    Response update(@NotNull @PathParam(\"id\") String id);",
                "@@ -45,3 +51,3 @@ public interface UserService extends ReadService<SCIMUser> {",
                "     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response replace(@NotNull @PathParam(\"id\") String id);",
                "+    Response replace(@NotNull @PathParam(\"id\") String id, SCIMUser user);",
                "@@ -52,7 +58,2 @@ public interface UserService extends ReadService<SCIMUser> {",
                "-    @PATCH",
                "-    @Path(\"{id}\")",
                "-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "-    Response update(@NotNull @PathParam(\"id\") String id);",
                " }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "index 4525d82621..98a21ef3ab 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "@@ -25,3 +25,2 @@ import javax.ws.rs.ForbiddenException;",
                " import javax.ws.rs.NotAuthorizedException;",
                "-import javax.ws.rs.NotFoundException;",
                " import javax.ws.rs.core.Response;",
                "@@ -38,2 +37,3 @@ import org.apache.syncope.core.persistence.api.dao.DuplicateException;",
                " import org.apache.syncope.core.persistence.api.dao.MalformedPathException;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "@@ -41,5 +41,3 @@ import org.apache.syncope.core.spring.security.DelegatedAdministrationException;",
                " import org.apache.syncope.core.workflow.api.WorkflowException;",
                "-import org.apache.syncope.ext.scimv2.api.ConflictException;",
                "-import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;",
                "-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMError;",
                "@@ -91,6 +89,3 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "                 || ex instanceof ForbiddenException",
                "-                || ex instanceof NotAuthorizedException",
                "-                || ex instanceof NotFoundException",
                "-                || ex instanceof ConflictException",
                "-                || ex instanceof PayloadTooLargeException) {",
                "+                || ex instanceof NotAuthorizedException) {",
                "@@ -98,2 +93,6 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             builder = null;",
                "+        } else if (ex instanceof NotFoundException) {",
                "+            return Response.status(Response.Status.NOT_FOUND).entity(new SCIMError(null,",
                "+                    Response.Status.NOT_FOUND.getStatusCode(), ExceptionUtils.getRootCauseMessage(ex))).",
                "+                    build();",
                "         } else if (ex instanceof SyncopeClientException) {",
                "@@ -190,4 +189,4 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));",
                "-        } else if (ex instanceof SCIMBadRequestException) {",
                "-            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((SCIMBadRequestException) ex));",
                "+        } else if (ex instanceof BadRequestException) {",
                "+            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((BadRequestException) ex));",
                "         }",
                "@@ -200,12 +199,10 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "-        if (hType.getResponseStatus() == Response.Status.BAD_REQUEST) {",
                "-            ErrorType scimType = null;",
                "-            if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {",
                "-                scimType = ErrorType.invalidValue;",
                "-            }",
                "-",
                "-            builder = builder.entity(new SCIMError(scimType, msg));",
                "+        ErrorType scimType = null;",
                "+        if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {",
                "+            scimType = ErrorType.invalidValue;",
                "+        } else if (hType == ClientExceptionType.DataIntegrityViolation) {",
                "+            scimType = ErrorType.uniqueness;",
                "         }",
                "-        return builder;",
                "+        return builder.entity(new SCIMError(scimType, hType.getResponseStatus().getStatusCode(), msg));",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "index e3ce29e7ce..c39c2e3533 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -21,4 +21,8 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                " import java.util.Collections;",
                "+import java.util.Date;",
                " import java.util.List;",
                " import javax.ws.rs.core.Context;",
                "+import javax.ws.rs.core.EntityTag;",
                "+import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.core.Response.ResponseBuilder;",
                " import javax.ws.rs.core.UriInfo;",
                "@@ -39,2 +43,5 @@ import org.apache.syncope.core.logic.scim.SearchCondVisitor;",
                " import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.GroupDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                "+import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                " import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "@@ -59,2 +66,6 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    private UserDAO userDAO;",
                "+",
                "+    private GroupDAO groupDAO;",
                "+",
                "     private UserLogic userLogic;",
                "@@ -67,2 +78,20 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    protected UserDAO userDAO() {",
                "+        synchronized (this) {",
                "+            if (userDAO == null) {",
                "+                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);",
                "+            }",
                "+        }",
                "+        return userDAO;",
                "+    }",
                "+",
                "+    protected GroupDAO groupDAO() {",
                "+        synchronized (this) {",
                "+            if (groupDAO == null) {",
                "+                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);",
                "+            }",
                "+        }",
                "+        return groupDAO;",
                "+    }",
                "+",
                "     protected UserLogic userLogic() {",
                "@@ -94,2 +123,15 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    protected AnyDAO<?> anyDAO(final Resource type) {",
                "+        switch (type) {",
                "+            case User:",
                "+                return userDAO();",
                "+",
                "+            case Group:",
                "+                return groupDAO();",
                "+",
                "+            default:",
                "+                throw new UnsupportedOperationException();",
                "+        }",
                "+    }",
                "+",
                "     protected AbstractAnyLogic<?, ?> anyLogic(final Resource type) {",
                "@@ -116,2 +158,24 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+    protected Response createResponse(final String key, final SCIMResource resource) {",
                "+        return Response.created(uriInfo.getAbsolutePathBuilder().path(key).build()).",
                "+                entity(resource).",
                "+                build();",
                "+    }",
                "+",
                "+    protected Response updateResponse(final String key, final SCIMResource resource) {",
                "+        return Response.ok(uriInfo.getAbsolutePathBuilder().path(key).build()).",
                "+                entity(resource).",
                "+                build();",
                "+    }",
                "+",
                "+    protected ResponseBuilder checkETag(final Resource resource, final String key) {",
                "+        Date lastChange = anyDAO(resource).findLastChange(key);",
                "+        if (lastChange == null) {",
                "+            throw new NotFoundException(\"Resource\" + key + \" not found\");",
                "+        }",
                "+",
                "+        return messageContext.getRequest().",
                "+                evaluatePreconditions(new EntityTag(String.valueOf(lastChange.getTime()), true));",
                "+    }",
                "+",
                "     @SuppressWarnings(\"unchecked\")",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "index 439d250c37..7e9b075e2b 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -21,6 +21,27 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                " import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                " import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.core.Response.ResponseBuilder;",
                "+import org.apache.commons.collections4.CollectionUtils;",
                " import org.apache.commons.lang3.ArrayUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                "+import org.apache.syncope.common.lib.EntityTOUtils;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.lib.patch.MembershipPatch;",
                "+import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.types.PatchOperation;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.Member;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "@@ -28,2 +49,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.service.GroupService;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -34,4 +56,27 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     @Override",
                "-    public Response create() {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response create(final SCIMGroup group) {",
                "+        // first create group, no members assigned",
                "+        ProvisioningResult<GroupTO> result = groupLogic().create(binder().toGroupTO(group), false);",
                "+",
                "+        // then assign members",
                "+        for (Member member : group.getMembers()) {",
                "+            UserPatch patch = new UserPatch();",
                "+            patch.setKey(member.getValue());",
                "+            patch.getMemberships().add(new MembershipPatch.Builder().",
                "+                    operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());",
                "+",
                "+            try {",
                "+                userLogic().update(patch, false);",
                "+            } catch (Exception e) {",
                "+                LOG.error(\"While setting membership of {} to {}\", result.getEntity().getKey(), member.getValue(), e);",
                "+            }",
                "+        }",
                "+",
                "+        return createResponse(",
                "+                result.getEntity().getKey(),",
                "+                binder().toSCIMGroup(",
                "+                        result.getEntity(),",
                "+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),",
                "+                        Collections.<String>emptyList(),",
                "+                        Collections.<String>emptyList()));",
                "     }",
                "@@ -51,3 +96,3 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     @Override",
                "-    public Response replace(final String id) {",
                "+    public Response update(final String id) {",
                "         return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "@@ -56,4 +101,77 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     @Override",
                "-    public Response delete(final String id) {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response replace(final String id, final SCIMGroup group) {",
                "+        if (!id.equals(group.getId())) {",
                "+            throw new BadRequestException(ErrorType.invalidPath, \"Expected \" + id + \", found \" + group.getId());",
                "+        }",
                "+",
                "+        ResponseBuilder builder = checkETag(Resource.Group, id);",
                "+        if (builder != null) {",
                "+            return builder.build();",
                "+        }",
                "+",
                "+        // save current group members",
                "+        Set<String> beforeMembers = new HashSet<>();",
                "+",
                "+        MembershipCond membCond = new MembershipCond();",
                "+        membCond.setGroup(id);",
                "+        SearchCond searchCond = SearchCond.getLeafCond(membCond);",
                "+        int count = userLogic().search(searchCond,",
                "+                1, 1, Collections.<OrderByClause>emptyList(),",
                "+                SyncopeConstants.ROOT_REALM, false).getLeft();",
                "+        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+            List<UserTO> users = userLogic().search(",
                "+                    searchCond,",
                "+                    page,",
                "+                    AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                    Collections.<OrderByClause>emptyList(),",
                "+                    SyncopeConstants.ROOT_REALM,",
                "+                    false).",
                "+                    getRight();",
                "+            CollectionUtils.collect(users, EntityTOUtils.keyTransformer(), beforeMembers);",
                "+        }",
                "+",
                "+        // update group, don't change members",
                "+        ProvisioningResult<GroupTO> result = groupLogic().update(",
                "+                AnyOperations.diff(binder().toGroupTO(group), groupLogic().read(id), false), false);",
                "+",
                "+        // assign new members",
                "+        Set<String> afterMembers = new HashSet<>();",
                "+        for (Member member : group.getMembers()) {",
                "+            afterMembers.add(member.getValue());",
                "+",
                "+            if (!beforeMembers.contains(member.getValue())) {",
                "+                UserPatch patch = new UserPatch();",
                "+                patch.setKey(member.getValue());",
                "+                patch.getMemberships().add(new MembershipPatch.Builder().",
                "+                        operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());",
                "+",
                "+                try {",
                "+                    userLogic().update(patch, false);",
                "+                } catch (Exception e) {",
                "+                    LOG.error(\"While setting membership of {} to {}\",",
                "+                            result.getEntity().getKey(), member.getValue(), e);",
                "+                }",
                "+            }",
                "+        }",
                "+        // remove unconfirmed members",
                "+        for (String user : CollectionUtils.subtract(beforeMembers, afterMembers)) {",
                "+            UserPatch patch = new UserPatch();",
                "+            patch.setKey(user);",
                "+            patch.getMemberships().add(new MembershipPatch.Builder().",
                "+                    operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build());",
                "+",
                "+            try {",
                "+                userLogic().update(patch, false);",
                "+            } catch (Exception e) {",
                "+                LOG.error(\"While removing membership of {} from {}\", result.getEntity().getKey(), user, e);",
                "+            }",
                "+        }",
                "+",
                "+        return updateResponse(",
                "+                result.getEntity().getKey(),",
                "+                binder().toSCIMGroup(",
                "+                        result.getEntity(),",
                "+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),",
                "+                        Collections.<String>emptyList(),",
                "+                        Collections.<String>emptyList()));",
                "     }",
                "@@ -61,4 +179,10 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     @Override",
                "-    public Response update(final String id) {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response delete(final String id) {",
                "+        ResponseBuilder builder = checkETag(Resource.Group, id);",
                "+        if (builder != null) {",
                "+            return builder.build();",
                "+        }",
                "+",
                "+        anyLogic(Resource.Group).delete(id, false);",
                "+        return Response.noContent().build();",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index 6a9078f6e4..2c73f44763 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -21,5 +21,11 @@ package org.apache.syncope.ext.scimv2.cxf.service;",
                " import java.util.Arrays;",
                "+import java.util.Collections;",
                " import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.core.Response.ResponseBuilder;",
                " import org.apache.commons.lang3.ArrayUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "@@ -28,2 +34,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                " import org.apache.syncope.ext.scimv2.api.service.UserService;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -34,4 +41,11 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     @Override",
                "-    public Response create() {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response create(final SCIMUser user) {",
                "+        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserTO(user), false);",
                "+        return createResponse(",
                "+                result.getEntity().getKey(),",
                "+                binder().toSCIMUser(",
                "+                        result.getEntity(),",
                "+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),",
                "+                        Collections.<String>emptyList(),",
                "+                        Collections.<String>emptyList()));",
                "     }",
                "@@ -51,3 +65,3 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     @Override",
                "-    public Response replace(final String id) {",
                "+    public Response update(final String id) {",
                "         return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "@@ -56,4 +70,21 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     @Override",
                "-    public Response delete(final String id) {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response replace(final String id, final SCIMUser user) {",
                "+        if (!id.equals(user.getId())) {",
                "+            throw new BadRequestException(ErrorType.invalidPath, \"Expected \" + id + \", found \" + user.getId());",
                "+        }",
                "+",
                "+        ResponseBuilder builder = checkETag(Resource.User, id);",
                "+        if (builder != null) {",
                "+            return builder.build();",
                "+        }",
                "+",
                "+        ProvisioningResult<UserTO> result = userLogic().update(",
                "+                AnyOperations.diff(binder().toUserTO(user), userLogic().read(id), false), false);",
                "+        return updateResponse(",
                "+                result.getEntity().getKey(),",
                "+                binder().toSCIMUser(",
                "+                        result.getEntity(),",
                "+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),",
                "+                        Collections.<String>emptyList(),",
                "+                        Collections.<String>emptyList()));",
                "     }",
                "@@ -61,4 +92,10 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     @Override",
                "-    public Response update(final String id) {",
                "-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();",
                "+    public Response delete(final String id) {",
                "+        ResponseBuilder builder = checkETag(Resource.User, id);",
                "+        if (builder != null) {",
                "+            return builder.build();",
                "+        }",
                "+",
                "+        anyLogic(Resource.User).delete(id, false);",
                "+        return Response.noContent().build();",
                "     }"
            ],
            "changed_files": [
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "761d1045e5d0ce147271f1780b15d635117e056a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507809590,
            "hunks": 66,
            "message": "[SYNCOPE-1223] Now allowing FIQL expressions with escaped , and ;",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "index 20ac7ff56a..8b3c67b8b9 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "@@ -23,4 +23,8 @@ import java.util.Iterator;",
                " import java.util.List;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.pages.BasePage;",
                " import org.apache.syncope.client.console.rest.AbstractAnyRestClient;",
                " import org.apache.syncope.common.lib.to.AnyTO;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                " import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;",
                "@@ -28,2 +32,5 @@ import org.apache.wicket.model.CompoundPropertyModel;",
                " import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.request.cycle.RequestCycle;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -33,2 +40,4 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(AnyDataProvider.class);",
                "+",
                "     private final SortableAnyProviderComparator<A> comparator;",
                "@@ -45,2 +54,4 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "+    private final PageReference pageRef;",
                "+",
                "     public AnyDataProvider(",
                "@@ -50,3 +61,4 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "             final String realm,",
                "-            final String type) {",
                "+            final String type,",
                "+            final PageReference pageRef) {",
                "@@ -76,2 +88,3 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "         this.type = type;",
                "+        this.pageRef = pageRef;",
                "     }",
                "@@ -80,12 +93,20 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "     public Iterator<A> iterator(final long first, final long count) {",
                "-        List<A> result;",
                "-",
                "-        final int page = ((int) first / paginatorRows);",
                "-",
                "-        if (filtered) {",
                "-            result = fiql == null",
                "-                    ? Collections.<A>emptyList()",
                "-                    : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);",
                "-        } else {",
                "-            result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);",
                "+        List<A> result = Collections.emptyList();",
                "+",
                "+        try {",
                "+            final int page = ((int) first / paginatorRows);",
                "+",
                "+            if (filtered) {",
                "+                result = fiql == null",
                "+                        ? Collections.<A>emptyList()",
                "+                        : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);",
                "+            } else {",
                "+                result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);",
                "+            }",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"While searching with FIQL {}\", fiql, e);",
                "+            SyncopeConsoleSession.get().error(e.getMessage());",
                "+",
                "+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(",
                "+                    RequestCycle.get().find(AjaxRequestTarget.class));",
                "         }",
                "@@ -98,8 +119,16 @@ public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {",
                "     public long size() {",
                "-        long result;",
                "-",
                "-        if (filtered) {",
                "-            result = fiql == null ? 0 : restClient.searchCount(realm, fiql, type);",
                "-        } else {",
                "-            result = restClient.searchCount(realm, null, type);",
                "+        long result = 0;",
                "+",
                "+        try {",
                "+            if (filtered) {",
                "+                result = fiql == null ? 0 : restClient.searchCount(realm, fiql, type);",
                "+            } else {",
                "+                result = restClient.searchCount(realm, null, type);",
                "+            }",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"While requesting for size() with FIQL {}\", fiql, e);",
                "+            SyncopeConsoleSession.get().error(e.getMessage());",
                "+",
                "+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(",
                "+                    RequestCycle.get().find(AjaxRequestTarget.class));",
                "         }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "index 828a69877e..da58347a13 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "@@ -213,4 +213,3 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "     protected AnyDataProvider<A> dataProvider() {",
                "-        final AnyDataProvider<A> dp = new AnyDataProvider<>(restClient, rows, filtered, realm, type);",
                "-        return dp.setFIQL(this.fiql);",
                "+        return new AnyDataProvider<>(restClient, rows, filtered, realm, type, pageRef).setFIQL(this.fiql);",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "index d7f4e1f6a8..68ac17f219 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "@@ -57,10 +57,8 @@ public final class SearchUtils implements Serializable {",
                "     public static Map<String, List<SearchClause>> getSearchClauses(final Map<String, String> fiql) {",
                "-        final Map<String, List<SearchClause>> res = new HashMap<>();",
                "-        if (fiql != null && !fiql.isEmpty()) {",
                "-            for (Map.Entry<String, String> entry : fiql.entrySet()) {",
                "-                res.put(entry.getKey(), getSearchClauses(",
                "-                        entry.getValue().replaceAll(getTypeConditionPattern(entry.getKey()).pattern(), \"\")));",
                "-            }",
                "+        Map<String, List<SearchClause>> clauses = new HashMap<>();",
                "+        for (Map.Entry<String, String> entry : fiql.entrySet()) {",
                "+            clauses.put(entry.getKey(), getSearchClauses(",
                "+                    entry.getValue().replaceAll(getTypeConditionPattern(entry.getKey()).pattern(), \"\")));",
                "         }",
                "-        return res;",
                "+        return clauses;",
                "     }",
                "@@ -68,3 +66,3 @@ public final class SearchUtils implements Serializable {",
                "     public static List<SearchClause> getSearchClauses(final String fiql) {",
                "-        final List<SearchClause> res = new ArrayList<>();",
                "+        List<SearchClause> clauses = new ArrayList<>();",
                "         if (StringUtils.isNotBlank(fiql)) {",
                "@@ -73,3 +71,3 @@ public final class SearchUtils implements Serializable {",
                "                         SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);",
                "-                res.addAll(getSearchClauses(fiqlParser.parse(fiql)));",
                "+                clauses.addAll(getSearchClauses(fiqlParser.parse(fiql)));",
                "             } catch (Exception e) {",
                "@@ -78,3 +76,3 @@ public final class SearchUtils implements Serializable {",
                "         }",
                "-        return res;",
                "+        return clauses;",
                "     }",
                "@@ -82,15 +80,15 @@ public final class SearchUtils implements Serializable {",
                "     private static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {",
                "-        List<SearchClause> res = new ArrayList<>();",
                "+        List<SearchClause> clauses = new ArrayList<>();",
                "         if (sc.getStatement() == null) {",
                "-            res.addAll(getCompoundSearchClause(sc));",
                "+            clauses.addAll(getCompoundSearchClauses(sc));",
                "         } else {",
                "-            res.add(getPrimitiveSearchClause(sc));",
                "+            clauses.add(getPrimitiveSearchClause(sc));",
                "         }",
                "-        return res;",
                "+        return clauses;",
                "     }",
                "-    private static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {",
                "-        List<SearchClause> res = new ArrayList<>();",
                "+    private static List<SearchClause> getCompoundSearchClauses(final SearchCondition<SearchBean> sc) {",
                "+        List<SearchClause> clauses = new ArrayList<>();",
                "@@ -98,3 +96,3 @@ public final class SearchUtils implements Serializable {",
                "             if (searchCondition.getStatement() == null) {",
                "-                res.addAll(getCompoundSearchClause(searchCondition));",
                "+                clauses.addAll(getCompoundSearchClauses(searchCondition));",
                "             } else {",
                "@@ -107,3 +105,3 @@ public final class SearchUtils implements Serializable {",
                "                 }",
                "-                res.add(clause);",
                "+                clauses.add(clause);",
                "             }",
                "@@ -111,3 +109,3 @@ public final class SearchUtils implements Serializable {",
                "-        return res;",
                "+        return clauses;",
                "     }",
                "@@ -115,8 +113,8 @@ public final class SearchUtils implements Serializable {",
                "     private static SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {",
                "-        SearchClause res = new SearchClause();",
                "+        SearchClause clause = new SearchClause();",
                "         String property = sc.getCondition().getKeySet().iterator().next();",
                "-        res.setProperty(property);",
                "-        String value = sc.getCondition().get(property);",
                "-        res.setValue(value);",
                "+        clause.setProperty(property);",
                "+        String value = sc.getCondition().get(property).replace(\"%252C\", \",\").replace(\"%253B\", \";\");",
                "+        clause.setValue(value);",
                "@@ -125,21 +123,21 @@ public final class SearchUtils implements Serializable {",
                "         if (SpecialAttr.ROLES.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.ROLE_MEMBERSHIP);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.ROLE_MEMBERSHIP);",
                "+            clause.setProperty(value);",
                "         } else if (SpecialAttr.RELATIONSHIPS.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.RELATIONSHIP);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.RELATIONSHIP);",
                "+            clause.setProperty(value);",
                "         } else if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.RELATIONSHIP);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.RELATIONSHIP);",
                "+            clause.setProperty(value);",
                "         } else if (SpecialAttr.GROUPS.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.GROUP_MEMBERSHIP);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.GROUP_MEMBERSHIP);",
                "+            clause.setProperty(value);",
                "         } else if (SpecialAttr.RESOURCES.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.RESOURCE);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.RESOURCE);",
                "+            clause.setProperty(value);",
                "         } else if (SpecialAttr.MEMBER.toString().equals(property)) {",
                "-            res.setType(SearchClause.Type.GROUP_MEMBER);",
                "-            res.setProperty(value);",
                "+            clause.setType(SearchClause.Type.GROUP_MEMBER);",
                "+            clause.setProperty(value);",
                "         } else {",
                "-            res.setType(SearchClause.Type.ATTRIBUTE);",
                "+            clause.setType(SearchClause.Type.ATTRIBUTE);",
                "         }",
                "@@ -158,6 +156,6 @@ public final class SearchUtils implements Serializable {",
                "                 if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {",
                "-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "                             ? SearchClause.Comparator.EQUALS : SearchClause.Comparator.IS_NULL);",
                "                 } else {",
                "-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "                             ? SearchClause.Comparator.IS_NULL : SearchClause.Comparator.EQUALS);",
                "@@ -168,6 +166,6 @@ public final class SearchUtils implements Serializable {",
                "                 if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {",
                "-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "                             ? SearchClause.Comparator.NOT_EQUALS : SearchClause.Comparator.IS_NOT_NULL);",
                "                 } else {",
                "-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)",
                "                             ? SearchClause.Comparator.IS_NOT_NULL : SearchClause.Comparator.NOT_EQUALS);",
                "@@ -177,3 +175,3 @@ public final class SearchUtils implements Serializable {",
                "             case GREATER_OR_EQUALS:",
                "-                res.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);",
                "+                clause.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);",
                "                 break;",
                "@@ -181,3 +179,3 @@ public final class SearchUtils implements Serializable {",
                "             case GREATER_THAN:",
                "-                res.setComparator(SearchClause.Comparator.GREATER_THAN);",
                "+                clause.setComparator(SearchClause.Comparator.GREATER_THAN);",
                "                 break;",
                "@@ -185,3 +183,3 @@ public final class SearchUtils implements Serializable {",
                "             case LESS_OR_EQUALS:",
                "-                res.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);",
                "+                clause.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);",
                "                 break;",
                "@@ -189,3 +187,3 @@ public final class SearchUtils implements Serializable {",
                "             case LESS_THAN:",
                "-                res.setComparator(SearchClause.Comparator.LESS_THAN);",
                "+                clause.setComparator(SearchClause.Comparator.LESS_THAN);",
                "                 break;",
                "@@ -196,3 +194,3 @@ public final class SearchUtils implements Serializable {",
                "-        return res;",
                "+        return clause;",
                "     }",
                "@@ -218,2 +216,6 @@ public final class SearchUtils implements Serializable {",
                "             if (clause.getType() != null) {",
                "+                String value = clause.getValue() == null",
                "+                        ? null",
                "+                        : clause.getValue().replace(\",\", \"%252C\").replace(\";\", \"%253B\");",
                "+",
                "                 switch (clause.getType()) {",
                "@@ -222,4 +224,3 @@ public final class SearchUtils implements Serializable {",
                "                             case EQUALS:",
                "-                                condition = ((GroupFiqlSearchConditionBuilder) builder).",
                "-                                        withMembers(clause.getValue());",
                "+                                condition = ((GroupFiqlSearchConditionBuilder) builder).withMembers(value);",
                "                                 break;",
                "@@ -227,4 +228,3 @@ public final class SearchUtils implements Serializable {",
                "                             case NOT_EQUALS:",
                "-                                condition = ((GroupFiqlSearchConditionBuilder) builder).",
                "-                                        withoutMembers(clause.getValue());",
                "+                                condition = ((GroupFiqlSearchConditionBuilder) builder).withoutMembers(value);",
                "                                 break;",
                "@@ -277,4 +277,4 @@ public final class SearchUtils implements Serializable {",
                "                                     condition = isLong",
                "-                                            ? property.lessThan(NumberUtils.toLong(clause.getValue()))",
                "-                                            : property.lexicalBefore(clause.getValue());",
                "+                                            ? property.lessThan(NumberUtils.toLong(value))",
                "+                                            : property.lexicalBefore(value);",
                "                                     break;",
                "@@ -283,4 +283,4 @@ public final class SearchUtils implements Serializable {",
                "                                     condition = isLong",
                "-                                            ? property.lessOrEqualTo(NumberUtils.toLong(clause.getValue()))",
                "-                                            : property.lexicalNotAfter(clause.getValue());",
                "+                                            ? property.lessOrEqualTo(NumberUtils.toLong(value))",
                "+                                            : property.lexicalNotAfter(value);",
                "                                     break;",
                "@@ -289,4 +289,4 @@ public final class SearchUtils implements Serializable {",
                "                                     condition = isLong",
                "-                                            ? property.greaterThan(NumberUtils.toLong(clause.getValue()))",
                "-                                            : property.lexicalAfter(clause.getValue());",
                "+                                            ? property.greaterThan(NumberUtils.toLong(value))",
                "+                                            : property.lexicalAfter(value);",
                "                                     break;",
                "@@ -295,4 +295,4 @@ public final class SearchUtils implements Serializable {",
                "                                     condition = isLong",
                "-                                            ? property.greaterOrEqualTo(NumberUtils.toLong(clause.getValue()))",
                "-                                            : property.lexicalNotBefore(clause.getValue());",
                "+                                            ? property.greaterOrEqualTo(NumberUtils.toLong(value))",
                "+                                            : property.lexicalNotBefore(value);",
                "                                     break;",
                "@@ -300,3 +300,3 @@ public final class SearchUtils implements Serializable {",
                "                                 case NOT_EQUALS:",
                "-                                    condition = property.notEqualTolIgnoreCase(clause.getValue());",
                "+                                    condition = property.notEqualTolIgnoreCase(value);",
                "                                     break;",
                "@@ -305,3 +305,3 @@ public final class SearchUtils implements Serializable {",
                "                                 default:",
                "-                                    condition = property.equalToIgnoreCase(clause.getValue());",
                "+                                    condition = property.equalToIgnoreCase(value);",
                "                                     break;",
                "@@ -342,3 +342,3 @@ public final class SearchUtils implements Serializable {",
                "                                         condition = ((UserFiqlSearchConditionBuilder) builder).",
                "-                                                inRelationships(clause.getValue());",
                "+                                                inRelationships(value);",
                "                                         break;",
                "@@ -346,3 +346,3 @@ public final class SearchUtils implements Serializable {",
                "                                         condition = ((UserFiqlSearchConditionBuilder) builder).",
                "-                                                notInRelationships(clause.getValue());",
                "+                                                notInRelationships(value);",
                "                                         break;",
                "@@ -363,3 +363,3 @@ public final class SearchUtils implements Serializable {",
                "                                         condition = ((AnyObjectFiqlSearchConditionBuilder) builder).",
                "-                                                inRelationships(clause.getValue());",
                "+                                                inRelationships(value);",
                "                                         break;",
                "@@ -367,3 +367,3 @@ public final class SearchUtils implements Serializable {",
                "                                         condition = ((AnyObjectFiqlSearchConditionBuilder) builder).",
                "-                                                notInRelationships(clause.getValue());",
                "+                                                notInRelationships(value);",
                "                                         break;",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "index f07453f75e..1ec0f6f819 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "@@ -20,4 +20,7 @@ package org.apache.syncope.core.persistence.api.search;",
                "+import java.net.URLDecoder;",
                "+import java.nio.charset.StandardCharsets;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                " import org.apache.cxf.jaxrs.ext.search.SearchBean;",
                "+import org.apache.cxf.jaxrs.ext.search.SearchCondition;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "@@ -36,3 +39,3 @@ public final class SearchCondConverter {",
                "      *",
                "-     * @param fiqlExpression FIQL string",
                "+     * @param fiql FIQL string",
                "      * @param realms optional realm to provide to {@link SearchCondVisitor}",
                "@@ -41,4 +44,4 @@ public final class SearchCondConverter {",
                "      */",
                "-    public static SearchCond convert(final String fiqlExpression, final String... realms) {",
                "-        SyncopeFiqlParser<SearchBean> fiqlParser = new SyncopeFiqlParser<>(",
                "+    public static SearchCond convert(final String fiql, final String... realms) {",
                "+        SyncopeFiqlParser<SearchBean> parser = new SyncopeFiqlParser<>(",
                "                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);",
                "@@ -46,11 +49,13 @@ public final class SearchCondConverter {",
                "         try {",
                "-            SearchCondVisitor searchCondVisitor = new SearchCondVisitor();",
                "+            SearchCondVisitor visitor = new SearchCondVisitor();",
                "             if (realms != null && realms.length > 0) {",
                "-                searchCondVisitor.setRealm(realms[0]);",
                "+                visitor.setRealm(realms[0]);",
                "             }",
                "-            searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));",
                "-            return searchCondVisitor.getQuery();",
                "+            SearchCondition<SearchBean> sc = parser.parse(URLDecoder.decode(fiql, StandardCharsets.UTF_8.name()));",
                "+            sc.accept(visitor);",
                "+",
                "+            return visitor.getQuery();",
                "         } catch (Exception e) {",
                "             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);",
                "-            sce.getElements().add(fiqlExpression);",
                "+            sce.getElements().add(fiql);",
                "             sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "index 2af6f25317..18d576677d 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "@@ -20,2 +20,5 @@ package org.apache.syncope.core.persistence.api.search;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.URLDecoder;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "@@ -75,4 +78,10 @@ public class SearchCondVisitor extends AbstractSearchConditionVisitor<SearchBean",
                "-        String value = SearchUtils.toSqlWildcardString(sc.getStatement().getValue().toString(), false).",
                "-                replaceAll(\"\\\\\\\\_\", \"_\");",
                "+        String value = null;",
                "+        try {",
                "+            value = SearchUtils.toSqlWildcardString(",
                "+                    URLDecoder.decode(sc.getStatement().getValue().toString(), StandardCharsets.UTF_8.name()), false).",
                "+                    replaceAll(\"\\\\\\\\_\", \"_\");",
                "+        } catch (UnsupportedEncodingException e) {",
                "+            throw new IllegalArgumentException(\"While decoding \" + sc.getStatement().getValue(), e);",
                "+        }",
                "         Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "index 4ca01dc95f..a0409609c1 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "@@ -32,2 +32,3 @@ import org.apache.commons.lang3.BooleanUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.exception.ExceptionUtils;",
                " import org.apache.cxf.jaxrs.ext.MessageContext;",
                "@@ -163,2 +164,3 @@ abstract class AbstractServiceImpl implements JAXRSService {",
                "             sce.getElements().add(fiql);",
                "+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));",
                "             throw sce;"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1223": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a1e9c04fa1edd4812876fb8c943b0c2e37c3d80b"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1223",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aec1e2fe96f9f5d46d256956ccb3c46ab7a3f259",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513759889,
            "hunks": 3,
            "message": "Revert \"Updating Eclipse files for release\" This reverts commit 05312bbe01bc0dbf0b0aabae4c38b0e067b0363b.",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "index daf2ce5031..16f91d6500 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: Apache Syncope Eclipse Plugin",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.plugin;singleton:=true",
                "-Bundle-Version: 2.0.7",
                "+Bundle-Version: 2.0.7.qualifier",
                " Bundle-Activator: org.apache.syncope.ide.eclipse.plugin.Activator",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "index 596f890ae2..1c0eb70eda 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: org.apache.syncope.ide.eclipse.tests",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.tests;singleton:=true",
                "-Bundle-Version: 2.0.7",
                "+Bundle-Version: 2.0.7.qualifier",
                " Bundle-ActivationPolicy: lazy",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "index f3e43a67c4..96bc24e410 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "@@ -20,3 +20,3 @@ under the License.",
                " <site>",
                "-   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.7\">",
                "+   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.7.qualifier\">",
                "       <category name=\"apachesyncope\"/>"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release, file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1d5d31cc83c0d9afefc18cb7c9864170cc69f0c7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515416997,
            "hunks": 6,
            "message": "[SYNCOPE-1262] Looks better",
            "diff": [
                "diff --git a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "index b97c108de4..a3d3cb3711 100644",
                "--- a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "+++ b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "@@ -49,9 +49,2 @@ under the License.",
                "-    // <ApacheSyncope>",
                "-    .download-url-input {",
                "-      pointer-events:none !important;",
                "-    }",
                "-    .download-url-button {",
                "-      pointer-events:none !important;",
                "-    }",
                "     .download-url-wrapper {",
                "@@ -59,3 +52,2 @@ under the License.",
                "     }",
                "-    // </ApacheSyncope>",
                "   </style>",
                "@@ -107,20 +99,8 @@ window.onload = function() {",
                "   // Build a system",
                "-  // <ApacheSyncope>",
                "-  /*const ui = SwaggerUIBundle({",
                "-    url: window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/openapi.json\",",
                "-    dom_id: '#swagger-ui',",
                "-    deepLinking: true,",
                "-    presets: [",
                "-      SwaggerUIBundle.presets.apis,",
                "-      SwaggerUIStandalonePreset",
                "-    ],",
                "-    plugins: [",
                "-      SwaggerUIBundle.plugins.DownloadUrl",
                "-    ],",
                "-    layout: \"StandaloneLayout\"",
                "-  })*/",
                "   const ui = SwaggerUIBundle({",
                "-    url: window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/openapi.json\",",
                "-    dom_id: '#swagger-ui',",
                "-    deepLinking: true,",
                "+    // <ApacheSyncope>",
                "+    urls: [{",
                "+      url: window.location.href.substring(0, window.location.href.lastIndexOf('/')) + \"/../rest/openapi.json\",",
                "+      name: \"Apache Syncope\"",
                "+    }],",
                "     docExpansion: 'none',",
                "@@ -129,2 +109,5 @@ window.onload = function() {",
                "     tagSorter: 'alpha',",
                "+    // </ApacheSyncope>",
                "+    dom_id: '#swagger-ui',",
                "+    deepLinking: true,",
                "     presets: [",
                "@@ -138,3 +121,2 @@ window.onload = function() {",
                "   })",
                "-  // </ApacheSyncope>"
            ],
            "changed_files": [
                "ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1262": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4f005ef8f5d33d9a38c169826973731012bf3eff"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1262",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2b07e5a686b65ad56354f3895bac4edb6fad590a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513604646,
            "hunks": 2,
            "message": "[SYNCOPE-152] Fix archetype definition",
            "diff": [
                "diff --git a/archetype/src/main/resources/archetype-resources/core/pom.xml b/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "index 8e68fe99a7..68d62b313b 100644",
                "--- a/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "+++ b/archetype/src/main/resources/archetype-resources/core/pom.xml",
                "@@ -197,3 +197,3 @@ under the License.",
                "           <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "-          <version>${project.version}</version>",
                "+          <version>${syncope.version}</version>",
                "         </dependency>",
                "@@ -202,3 +202,3 @@ under the License.",
                "           <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "-          <version>${project.version}</version>",
                "+          <version>${syncope.version}</version>",
                "         </dependency>"
            ],
            "changed_files": [
                "archetype/src/main/resources/archetype-resources/core/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "062b482a62f852a1f7ff8517fa95afba62d27f12"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5d259daee8eb0753b686d1ce0de23b8b39c172de",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513154178,
            "hunks": 10,
            "message": "[SYNCOPE-152] Password management, serviceProviderConfig alignment",
            "diff": [
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index c72c9bd589..80c90d9857 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -447,2 +447,3 @@ public class SCIMDataBinder {",
                "         userTO.setKey(user.getId());",
                "+        userTO.setPassword(user.getPassword());",
                "         userTO.setUsername(user.getUserName());",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "index 34eded014e..04757f2422 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "@@ -104,3 +104,3 @@ public class SCIMLogic extends AbstractLogic<AbstractBaseBean> {",
                "                                 uriBuilder.build().toASCIIString()),",
                "-                        new ConfigurationOption(true),",
                "+                        new ConfigurationOption(false),",
                "                         new BulkConfigurationOption(false, conf.getBulkMaxOperations(), conf.getBulkMaxPayloadSize()),",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "index 570ee3a931..2fb73c64e1 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "@@ -87,8 +87,8 @@ public class SCIMSearchRequest extends SCIMBean {",
                "-    public Integer getStartIndex() {",
                "-        return startIndex;",
                "+    public int getStartIndex() {",
                "+        return startIndex == null ? 1 : startIndex;",
                "     }",
                "-    public Integer getCount() {",
                "-        return count;",
                "+    public int getCount() {",
                "+        return count == null ? 25 : count;",
                "     }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "index 6e2715f5dc..cb8bb5f7e2 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -48,2 +48,3 @@ import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.apache.syncope.ext.scimv2.api.BadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "@@ -51,2 +52,3 @@ import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -189,5 +191,9 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+        if (request.getCount() > confManager().get().getFilterMaxResults()) {",
                "+            throw new BadRequestException(ErrorType.tooMany, \"Too many results requested\");",
                "+        }",
                "+",
                "         SearchCondVisitor visitor = new SearchCondVisitor(type, confManager().get());",
                "-        int startIndex = request.getStartIndex() == null || request.getStartIndex() <= 1",
                "+        int startIndex = request.getStartIndex() <= 1",
                "                 ? 1",
                "@@ -195,3 +201,3 @@ abstract class AbstractService<R extends SCIMResource> {",
                "-        int itemsPerPage = request.getCount() == null ? AnyDAO.DEFAULT_PAGE_SIZE : request.getCount();",
                "+        int itemsPerPage = request.getCount() <= 1 ? AnyDAO.DEFAULT_PAGE_SIZE : request.getCount();",
                "@@ -219,2 +225,6 @@ abstract class AbstractService<R extends SCIMResource> {",
                "+        if (result.getLeft() > confManager().get().getFilterMaxResults()) {",
                "+            throw new BadRequestException(ErrorType.tooMany, \"Too many results found\");",
                "+        }",
                "+",
                "         ListResponse<R> response = new ListResponse<>("
            ],
            "changed_files": [
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1609e20226d09f122a6e51cfad2b266da9997cf3"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3a52a0f93647a24aee6643b71ecf69ad91930433",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513593870,
            "hunks": 1,
            "message": "[SYNCOPE-1253] Conditional password generation upon pull",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "index e85cb30521..ad6db2018d 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "@@ -173,4 +173,7 @@ public class ConnObjectUtils {",
                "-        // (for users) if password was not set above, generate",
                "-        if (anyTO instanceof UserTO && StringUtils.isBlank(((UserTO) anyTO).getPassword())) {",
                "+        // (for users) if password was not set above, generate if resource is configured for that",
                "+        if (anyTO instanceof UserTO",
                "+                && StringUtils.isBlank(((UserTO) anyTO).getPassword())",
                "+                && provision.getResource().isRandomPwdIfNotProvided()) {",
                "+",
                "             UserTO userTO = (UserTO) anyTO;"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1253": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d783a23de5f2d4f13f9922d11518c9e31f520f1c"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4989ffd040f82cd76fba0d52b61cb9b8bd405ee5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509972609,
            "hunks": 21,
            "message": "[SYNCOPE-152] SCIM filter",
            "diff": [
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index abc90b1a69..4569445a6b 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -37,2 +37,3 @@ under the License.",
                "     <rootpom.basedir>${basedir}/../../..</rootpom.basedir>",
                "+    <antlr4.visitor>true</antlr4.visitor>",
                "   </properties>",
                "@@ -51,2 +52,13 @@ under the License.",
                "     </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.antlr</groupId>",
                "+      <artifactId>antlr4-runtime</artifactId>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.junit.jupiter</groupId>",
                "+      <artifactId>junit-jupiter-engine</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "   </dependencies>",
                "@@ -58,2 +70,17 @@ under the License.",
                "         <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <configuration>",
                "+          <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>",
                "+        </configuration>",
                "+      </plugin>",
                "+      ",
                "+      <plugin>",
                "+        <groupId>org.antlr</groupId>",
                "+        <artifactId>antlr4-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <goals>",
                "+              <goal>antlr4</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "       </plugin>",
                "diff --git a/ext/scimv2/logic/src/main/antlr4/org/apache/syncope/core/logic/scim/SCIMFilter.g4 b/ext/scimv2/logic/src/main/antlr4/org/apache/syncope/core/logic/scim/SCIMFilter.g4",
                "new file mode 100644",
                "index 0000000000..ffddf3217c",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/antlr4/org/apache/syncope/core/logic/scim/SCIMFilter.g4",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+grammar SCIMFilter;",
                "+",
                "+options",
                "+{",
                "+  language = Java;",
                "+}",
                "+",
                "+scimFilter",
                "+ : expression* EOF",
                "+ ;",
                "+",
                "+expression",
                "+ : NOT WS+? expression                        # NOT_EXPR",
                "+ | expression WS+? AND WS+? expression        # EXPR_AND_EXPR",
                "+ | expression WS+? OR WS+ expression          # EXPR_OR_EXPR",
                "+ | expression WS+? operator WS+? expression   # EXPR_OPER_EXPR",
                "+ | ATTRNAME WS+? PR                           # ATTR_PR",
                "+ | ATTRNAME WS+? operator WS+? expression     # ATTR_OPER_EXPR",
                "+ | ATTRNAME WS+? operator WS+? criteria       # ATTR_OPER_CRITERIA",
                "+ | LPAREN WS*? expression WS*? RPAREN         # LPAREN_EXPR_RPAREN",
                "+ | ATTRNAME LBRAC WS*? expression WS*? RBRAC  # LBRAC_EXPR_RBRAC",
                "+ ;",
                "+",
                "+criteria : '\"' .+? '\"';",
                "+",
                "+operator",
                "+ : EQ | NE | CO | SW | EW | GT | LT | GE | LE",
                "+ ;",
                "+",
                "+EQ : [eE][qQ];",
                "+NE : [nN][eE];",
                "+CO : [cC][oO];",
                "+SW : [sS][wW];",
                "+EW : [eE][wW];",
                "+GT : [gG][tT];",
                "+LT : [lL][tT];",
                "+GE : [gG][eE];",
                "+LE : [lL][eE];",
                "+",
                "+NOT : [nN][oO][tT];",
                "+",
                "+AND : [aA][nN][dD];",
                "+OR  : [oO][rR];",
                "+",
                "+PR : [pP][rR];",
                "+",
                "+LPAREN : '(';",
                "+RPAREN : ')';",
                "+",
                "+LBRAC : '[';",
                "+RBRAC : ']';",
                "+",
                "+WS : ' ';",
                "+",
                "+ATTRNAME : [-_.:a-zA-Z0-9]+;",
                "+",
                "+ANY : ~('\"' | '(' | ')' | '[' | ']');",
                "+",
                "+EOL : [\\t\\r\\n\\u000C]+ -> skip;",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMFilterErrorHandler.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMFilterErrorHandler.java",
                "new file mode 100644",
                "index 0000000000..db2bfbd4a0",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMFilterErrorHandler.java",
                "@@ -0,0 +1,42 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic.scim;",
                "+",
                "+import org.antlr.v4.runtime.DefaultErrorStrategy;",
                "+import org.antlr.v4.runtime.InputMismatchException;",
                "+import org.antlr.v4.runtime.Parser;",
                "+import org.antlr.v4.runtime.RecognitionException;",
                "+import org.antlr.v4.runtime.Token;",
                "+",
                "+public class SCIMFilterErrorHandler extends DefaultErrorStrategy {",
                "+",
                "+    @Override",
                "+    public void recover(final Parser recognizer, final RecognitionException e) {",
                "+        throw e;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Token recoverInline(final Parser recognizer) throws RecognitionException {",
                "+        throw new InputMismatchException(recognizer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void sync(final Parser recognizer) throws RecognitionException {",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "new file mode 100644",
                "index 0000000000..fd45f436fe",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic.scim;",
                "+",
                "+import org.antlr.v4.runtime.CharStreams;",
                "+import org.antlr.v4.runtime.CommonTokenStream;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                "+import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Converts SCIM filter expressions to Syncope's {@link SearchCond}.",
                "+ */",
                "+public final class SearchCondConverter {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(SearchCondConverter.class);",
                "+",
                "+    public static SearchCond convert(final String filter) {",
                "+        SCIMFilterParser parser = new SCIMFilterParser(new CommonTokenStream(",
                "+                new SCIMFilterLexer(CharStreams.fromString(filter))));",
                "+        parser.setBuildParseTree(true);",
                "+        parser.setTrimParseTree(true);",
                "+        parser.setProfile(true);",
                "+        parser.removeErrorListeners();",
                "+        parser.setErrorHandler(new SCIMFilterErrorHandler());",
                "+",
                "+        try {",
                "+            return new SearchCondVisitor().visit(parser.scimFilter());",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"Could not parse {}\", filter, e);",
                "+            throw new SCIMBadRequestException(ErrorType.invalidFilter, e.getMessage());",
                "+        }",
                "+    }",
                "+",
                "+    private SearchCondConverter() {",
                "+        // empty constructor for static utility class        ",
                "+    }",
                "+}",
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "new file mode 100644",
                "index 0000000000..18825053d9",
                "--- /dev/null",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "@@ -0,0 +1,174 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.logic.scim;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+",
                "+/**",
                "+ * Visits SCIM filter expression and produces {@link SearchCond}.",
                "+ */",
                "+public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {",
                "+",
                "+    @Override",
                "+    public SearchCond visitScimFilter(final SCIMFilterParser.ScimFilterContext ctx) {",
                "+        return visit(ctx.expression(0));",
                "+    }",
                "+",
                "+    private AttributeCond createAttributeCond(final String schema) {",
                "+        AttributeCond attributeCond;",
                "+        if (\"userName\".equalsIgnoreCase(schema)",
                "+                || (Resource.User.schema() + \":userName\").equalsIgnoreCase(schema)) {",
                "+",
                "+            attributeCond = new AnyCond();",
                "+            attributeCond.setSchema(\"username\");",
                "+        } else if (\"displayName\".equalsIgnoreCase(schema)",
                "+                || (Resource.Group.schema() + \":displayName\").equalsIgnoreCase(schema)) {",
                "+",
                "+            attributeCond = new AnyCond();",
                "+            attributeCond.setSchema(\"name\");",
                "+        } else if (\"meta.created\".equals(schema)) {",
                "+            attributeCond = new AnyCond();",
                "+            attributeCond.setSchema(\"creationDate\");",
                "+        } else if (\"meta.lastModified\".equals(schema)) {",
                "+            attributeCond = new AnyCond();",
                "+            attributeCond.setSchema(\"lastChangeDate\");",
                "+        } else {",
                "+            attributeCond = new AttributeCond();",
                "+            attributeCond.setSchema(schema);",
                "+        }",
                "+",
                "+        return attributeCond;",
                "+    }",
                "+",
                "+    private SearchCond transform(final String operator, final String left, final String right) {",
                "+        AttributeCond attributeCond = createAttributeCond(left);",
                "+        attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));",
                "+",
                "+        switch (operator) {",
                "+            case \"eq\":",
                "+            default:",
                "+                attributeCond.setType(AttributeCond.Type.IEQ);",
                "+                break;",
                "+",
                "+            case \"ne\":",
                "+                attributeCond.setType(AttributeCond.Type.IEQ);",
                "+                break;",
                "+",
                "+            case \"sw\":",
                "+                attributeCond.setType(AttributeCond.Type.ILIKE);",
                "+                attributeCond.setExpression(attributeCond.getExpression() + \"%\");",
                "+                break;",
                "+",
                "+            case \"co\":",
                "+                attributeCond.setType(AttributeCond.Type.ILIKE);",
                "+                attributeCond.setExpression(\"%\" + attributeCond.getExpression() + \"%\");",
                "+                break;",
                "+",
                "+            case \"ew\":",
                "+                attributeCond.setType(AttributeCond.Type.ILIKE);",
                "+                attributeCond.setExpression(\"%\" + attributeCond.getExpression());",
                "+                break;",
                "+",
                "+            case \"gt\":",
                "+                attributeCond.setType(AttributeCond.Type.GT);",
                "+                break;",
                "+",
                "+            case \"ge\":",
                "+                attributeCond.setType(AttributeCond.Type.GE);",
                "+                break;",
                "+",
                "+            case \"lt\":",
                "+                attributeCond.setType(AttributeCond.Type.LT);",
                "+                break;",
                "+",
                "+            case \"le\":",
                "+                attributeCond.setType(AttributeCond.Type.LE);",
                "+                break;",
                "+",
                "+        }",
                "+",
                "+        return \"ne\".equals(operator)",
                "+                ? SearchCond.getNotLeafCond(attributeCond)",
                "+                : SearchCond.getLeafCond(attributeCond);",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitEXPR_OPER_EXPR(final SCIMFilterParser.EXPR_OPER_EXPRContext ctx) {",
                "+        return transform(ctx.operator().getText(), ctx.expression(0).getText(), ctx.expression(1).getText());",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitATTR_OPER_CRITERIA(final SCIMFilterParser.ATTR_OPER_CRITERIAContext ctx) {",
                "+        return transform(ctx.operator().getText(), ctx.ATTRNAME().getText(), ctx.criteria().getText());",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitATTR_OPER_EXPR(final SCIMFilterParser.ATTR_OPER_EXPRContext ctx) {",
                "+        return transform(ctx.operator().getText(), ctx.ATTRNAME().getText(), ctx.expression().getText());",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitATTR_PR(final SCIMFilterParser.ATTR_PRContext ctx) {",
                "+        AttributeCond cond = createAttributeCond(ctx.ATTRNAME().getText());",
                "+        cond.setType(AttributeCond.Type.ISNOTNULL);",
                "+        return SearchCond.getLeafCond(cond);",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitLPAREN_EXPR_RPAREN(final SCIMFilterParser.LPAREN_EXPR_RPARENContext ctx) {",
                "+        return visit(ctx.expression());",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitNOT_EXPR(final SCIMFilterParser.NOT_EXPRContext ctx) {",
                "+        SearchCond cond = visit(ctx.expression());",
                "+        if (cond.getAttributeCond() != null) {",
                "+            if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {",
                "+                cond.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);",
                "+            } else if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNOTNULL) {",
                "+                cond.getAttributeCond().setType(AttributeCond.Type.ISNULL);",
                "+            }",
                "+        } else if (cond.getAnyCond() != null) {",
                "+            if (cond.getAnyCond().getType() == AnyCond.Type.ISNULL) {",
                "+                cond.getAnyCond().setType(AnyCond.Type.ISNOTNULL);",
                "+            } else if (cond.getAnyCond().getType() == AnyCond.Type.ISNOTNULL) {",
                "+                cond.getAnyCond().setType(AnyCond.Type.ISNULL);",
                "+            }",
                "+        } else {",
                "+            cond = SearchCond.getNotLeafCond(cond);",
                "+        }",
                "+",
                "+        return cond;",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitEXPR_AND_EXPR(final SCIMFilterParser.EXPR_AND_EXPRContext ctx) {",
                "+        return SearchCond.getAndCond(visit(ctx.expression(0)), visit(ctx.expression(1)));",
                "+    }",
                "+",
                "+    @Override",
                "+    public SearchCond visitEXPR_OR_EXPR(final SCIMFilterParser.EXPR_OR_EXPRContext ctx) {",
                "+        return SearchCond.getOrCond(visit(ctx.expression(0)), visit(ctx.expression(1)));",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "index f64b8371e9..f84d5594af 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "@@ -41,3 +41,3 @@ public class Group extends Reference {",
                "-        super(value, ref, display);",
                "+        super(value, display, ref);",
                "         this.type = type;",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "index aa2f5dd418..902217d0f5 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "@@ -39,3 +39,3 @@ public class Member extends Reference {",
                "-        super(value, ref, display);",
                "+        super(value, display, ref);",
                "         this.type = type;",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "index d7112d1b9a..f0548c45af 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "@@ -26,2 +26,3 @@ import java.util.Arrays;",
                " import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.type.ErrorType;",
                "@@ -42,2 +43,6 @@ public class SCIMError extends SCIMBean {",
                "+    public SCIMError(final SCIMBadRequestException ex) {",
                "+        this(ex.getErrorType(), ex.getMessage());",
                "+    }",
                "+",
                "     @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "index e525e77df5..4525d82621 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "@@ -43,2 +43,3 @@ import org.apache.syncope.ext.scimv2.api.ConflictException;",
                " import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;",
                "+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMError;",
                "@@ -110,5 +111,3 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             builder = builder(ClientExceptionType.EntityExists, ExceptionUtils.getRootCauseMessage(ex));",
                "-        } else if (ex instanceof DataIntegrityViolationException",
                "-                || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "-",
                "+        } else if (ex instanceof DataIntegrityViolationException || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {",
                "             builder = builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));",
                "@@ -127,3 +126,4 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             if (builder == null) {",
                "-                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);",
                "+                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).",
                "+                        entity(ExceptionUtils.getRootCauseMessage(ex));",
                "             }",
                "@@ -190,2 +190,4 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));",
                "+        } else if (ex instanceof SCIMBadRequestException) {",
                "+            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((SCIMBadRequestException) ex));",
                "         }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "index cd31e1f33d..73dbd5ae07 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "@@ -34,2 +34,3 @@ import org.apache.syncope.core.logic.GroupLogic;",
                " import org.apache.syncope.core.logic.UserLogic;",
                "+import org.apache.syncope.core.logic.scim.SearchCondConverter;",
                " import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                "@@ -191,7 +192,5 @@ abstract class AbstractSCIMService<R extends SCIMResource> implements SCIMServic",
                "-        int page = startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1;",
                "-",
                "         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(",
                "-                null,",
                "-                page,",
                "+                StringUtils.isBlank(filter) ? null : SearchCondConverter.convert(filter),",
                "+                startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1,",
                "                 AnyDAO.DEFAULT_PAGE_SIZE,",
                "diff --git a/pom.xml b/pom.xml",
                "index 51cfd7f9b9..c8f6e52c24 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -464,2 +464,4 @@ under the License.",
                "+    <antlr4.version>4.7</antlr4.version>",
                "+",
                "     <testds.port>1389</testds.port>",
                "@@ -1571,2 +1573,8 @@ under the License.",
                "+      <dependency>",
                "+        <groupId>org.antlr</groupId>",
                "+        <artifactId>antlr4-runtime</artifactId>",
                "+        <version>${antlr4.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- TEST -->",
                "@@ -1937,2 +1945,8 @@ under the License.",
                "         </plugin>",
                "+        ",
                "+        <plugin>",
                "+          <groupId>org.antlr</groupId>",
                "+          <artifactId>antlr4-maven-plugin</artifactId>",
                "+          <version>${antlr4.version}</version>",
                "+        </plugin>",
                "       </plugins>"
            ],
            "changed_files": [
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/logic/src/main/antlr4/org/apache/syncope/core/logic/scim/SCIMFilter.g4",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMFilterErrorHandler.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java",
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1c469ae175d50acd88282b6bb7081e453157bb6f"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a3fdd6afd14481713d40b58b16ca106a0f4ae447",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511542377,
            "hunks": 25,
            "message": "[SYNCOPE-1237] New feature to copy table row element key to clipboard by clicking on its name in toggle menu",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "index 62c2af4d96..afabac04f2 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "@@ -23,3 +23,26 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.commons.status.StatusBean;",
                "+import org.apache.syncope.client.console.policies.PolicyRuleDirectoryPanel;",
                "+import org.apache.syncope.client.console.reports.ReportletDirectoryPanel;",
                "+import org.apache.syncope.client.console.topology.TopologyNode;",
                " import org.apache.syncope.client.console.wizards.WizardMgtPanel;",
                "+import org.apache.syncope.client.console.wizards.any.AnyWrapper;",
                "+import org.apache.syncope.client.console.wizards.any.GroupWrapper;",
                "+import org.apache.syncope.client.console.wizards.any.UserWrapper;",
                "+import org.apache.syncope.client.console.wizards.resources.ResourceProvision;",
                "+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;",
                "+import org.apache.syncope.common.lib.to.AccessTokenTO;",
                "+import org.apache.syncope.common.lib.to.AnyObjectTO;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.EntityTO;",
                "+import org.apache.syncope.common.lib.to.ExecTO;",
                "+import org.apache.syncope.common.lib.to.GroupTO;",
                "+import org.apache.syncope.common.lib.to.JobTO;",
                "+import org.apache.syncope.common.lib.to.ReportTO;",
                "+import org.apache.syncope.common.lib.to.SchedTaskTO;",
                "+import org.apache.syncope.common.lib.to.SecurityQuestionTO;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;",
                "+import org.apache.syncope.common.lib.to.WorkflowFormTO;",
                "+import org.apache.wicket.AttributeModifier;",
                " import org.apache.wicket.Component;",
                "@@ -31,2 +54,3 @@ import org.apache.wicket.markup.html.WebMarkupContainer;",
                " import org.apache.wicket.markup.html.basic.Label;",
                "+import org.apache.wicket.model.ResourceModel;",
                " import org.slf4j.Logger;",
                "@@ -51,2 +75,21 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "+    private static final String LABEL_DATA_VALUE = \"data-value\";",
                "+",
                "+    private enum ToggleMenuCSS {",
                "+        CLASS(\"toggle-menu\"),",
                "+        CLASS_ACTIVE(\"active-toggle-menu\"),",
                "+        CLASS_INACTIVE(\"active-toggle-menu\");",
                "+",
                "+        private final String value;",
                "+",
                "+        ToggleMenuCSS(final String value) {",
                "+            this.value = value;",
                "+        }",
                "+",
                "+        public String value() {",
                "+            return value;",
                "+        }",
                "+",
                "+    }",
                "+",
                "     private final WebMarkupContainer container;",
                "@@ -66,2 +109,4 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "         this.activeId = markupId;",
                "+        final String containerID = StringUtils.isBlank(markupId) ? id : markupId;",
                "+",
                "         setRenderBodyOnly(true);",
                "@@ -72,5 +117,6 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "         container = new WebMarkupContainer(\"togglePanelContainer\");",
                "-        super.addInnerObject(container.setMarkupId(markupId == null ? id : markupId));",
                "+        super.addInnerObject(container.setMarkupId(containerID));",
                "         header = new Label(\"label\", StringUtils.EMPTY);",
                "+        header.add(new AttributeModifier(\"title\", new ResourceModel(\"copy_to_clipboard.title\")));",
                "         header.setOutputMarkupId(true);",
                "@@ -126,2 +172,79 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "+    @SuppressWarnings(\"cast\")",
                "+    private String getTargetKey(final Serializable modelObject) {",
                "+        final String key;",
                "+        if (modelObject == null) {",
                "+            key = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();",
                "+        } else if (modelObject instanceof UserTO) {",
                "+            key = ((UserTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof UserWrapper) {",
                "+            key = ((UserWrapper) modelObject).getInnerObject().getKey();",
                "+        } else if (modelObject instanceof GroupTO) {",
                "+            key = ((GroupTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof GroupWrapper) {",
                "+            key = ((GroupWrapper) modelObject).getInnerObject().getKey();",
                "+        } else if (modelObject instanceof AnyObjectTO) {",
                "+            key = ((AnyObjectTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof AnyWrapper",
                "+                && AnyWrapper.class.cast(modelObject).getInnerObject() instanceof AnyObjectTO) {",
                "+            key = ((AnyObjectTO) ((AnyWrapper) modelObject).getInnerObject()).getKey();",
                "+        } else if (modelObject instanceof ReportTO) {",
                "+            key = ((ReportTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof AttrTO) {",
                "+            key = ((AttrTO) modelObject).getSchemaInfo().getKey();",
                "+        } else if (modelObject instanceof AbstractPolicyTO) {",
                "+            key = ((AbstractPolicyTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof SecurityQuestionTO) {",
                "+            key = ((SecurityQuestionTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof AccessTokenTO) {",
                "+            key = ((AccessTokenTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof ExecTO) {",
                "+            key = ((ExecTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof WorkflowDefinitionTO) {",
                "+            key = ((WorkflowDefinitionTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof SchedTaskTO) {",
                "+            key = ((SchedTaskTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof WorkflowFormTO) {",
                "+            key = ((WorkflowFormTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof EntityTO) {",
                "+            key = ((EntityTO) modelObject).getKey();",
                "+        } else if (modelObject instanceof StatusBean) {",
                "+            key = ((StatusBean) modelObject).getKey();",
                "+        } else if (modelObject instanceof PolicyRuleDirectoryPanel.PolicyRuleWrapper) {",
                "+            key = ((PolicyRuleDirectoryPanel.PolicyRuleWrapper) modelObject).getName();",
                "+        } else if (modelObject instanceof PolicyRuleDirectoryPanel.PolicyRuleWrapper) {",
                "+            key = ((PolicyRuleDirectoryPanel.PolicyRuleWrapper) modelObject).getName();",
                "+        } else if (modelObject instanceof ReportletDirectoryPanel.ReportletWrapper) {",
                "+            key = ((ReportletDirectoryPanel.ReportletWrapper) modelObject).getName();",
                "+        } else if (modelObject instanceof JobTO) {",
                "+            key = ((JobTO) modelObject).getRefKey() == null",
                "+                    ? ((JobTO) modelObject).getRefDesc() : ((JobTO) modelObject).getRefKey();",
                "+        } else if (modelObject instanceof ResourceProvision) {",
                "+            key = ((ResourceProvision) modelObject).getKey();",
                "+        } else if (modelObject instanceof TopologyNode) {",
                "+            key = ((TopologyNode) modelObject).getKey();",
                "+        } else {",
                "+            key = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();",
                "+        }",
                "+        return key;",
                "+    }",
                "+",
                "+    private void updateLabelKeyValue(final Serializable modelObject) {",
                "+        header.add(new AttributeModifier(LABEL_DATA_VALUE, getTargetKey(modelObject)));",
                "+    }",
                "+",
                "+    /**",
                "+     * Force toggle via java. To be used when the onclick has been intercepted before.",
                "+     * Also, set key value in label name for copy-to-clipboard feature.",
                "+     *",
                "+     * @param target ajax request target.",
                "+     * @param modelObject model object",
                "+     * @param toggle toggle action.",
                "+     */",
                "+    public void toggle(final AjaxRequestTarget target, final Serializable modelObject, final boolean toggle) {",
                "+        updateLabelKeyValue(modelObject);",
                "+",
                "+        toggle(target, toggle);",
                "+    }",
                "+",
                "     /**",
                "@@ -139,3 +262,4 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "                         selector + \".toggle(\\\"slow\\\");\"",
                "-                        + selector + \".attr(\\\"class\\\", \\\"toggle-menu active-toggle-menu\\\");\");",
                "+                        + selector + \".attr(\\\"class\\\", \\\"\"",
                "+                        + ToggleMenuCSS.CLASS.value() + \" \" + ToggleMenuCSS.CLASS_ACTIVE.value() + \"\\\");\");",
                "                 status = Status.ACTIVE;",
                "@@ -144,4 +268,5 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "                 target.appendJavaScript(",
                "-                        selector + \".not(':visible')\" + \".toggle(\\\"slow\\\")\" + \".removeClass(\\\"inactive-toggle-menu\\\")\"",
                "-                        + \".addClass(\\\"active-toggle-menu\\\");\");",
                "+                        selector + \".not(':visible')\" + \".toggle(\\\"slow\\\")\" + \".removeClass(\\\"\"",
                "+                        + ToggleMenuCSS.CLASS_INACTIVE.value() + \"\\\")\"",
                "+                        + \".addClass(\\\"\" + ToggleMenuCSS.CLASS_ACTIVE.value() + \"y\\\");\");",
                "             }",
                "@@ -150,3 +275,4 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "                     selector + \".toggle(\\\"slow\\\");\"",
                "-                    + selector + \".attr(\\\"class\\\", \\\"toggle-menu inactive-toggle-menu\\\");\");",
                "+                    + selector + \".attr(\\\"class\\\", \\\"\"",
                "+                    + ToggleMenuCSS.CLASS.value() + \" \" + ToggleMenuCSS.CLASS_INACTIVE.value() + \"\\\");\");",
                "             status = Status.INACTIVE;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "index 8ffa39ac54..e0cb0cc475 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "@@ -158,3 +158,3 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {",
                "-        this.toggle(target, true);",
                "+        toggle(target, node, true);",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "index da5f451392..a43f67e364 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "@@ -129,3 +129,3 @@ public class ActionLinksTogglePanel<T extends Serializable> extends TogglePanel<",
                "     }",
                "-",
                "+        ",
                "     public void toggleWithContent(",
                "@@ -149,4 +149,4 @@ public class ActionLinksTogglePanel<T extends Serializable> extends TogglePanel<",
                "         target.add(this.container);",
                "-",
                "-        this.toggle(target, true);",
                "+        ",
                "+        toggle(target, modelObject, true);",
                "     }",
                "diff --git a/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js b/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "new file mode 100644",
                "index 0000000000..9598c775f7",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "@@ -0,0 +1,65 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+// Copy to clipboard",
                "+if (typeof copyToClipboard === 'undefined') {",
                "+  copyToClipboard = function (element, tag_value_to_copy, fake_textarea_ID, feedback_selector) {",
                "+    // creating new textarea element and giveing it id 't'",
                "+    var temp = document.createElement('textarea');",
                "+    temp.id = fake_textarea_ID;",
                "+",
                "+    // Optional step to make less noise in the page, if any!",
                "+    temp.style.height = 0;",
                "+",
                "+    // You have to append it to your page somewhere, I chose <body>",
                "+    $(document.body).append(temp);",
                "+",
                "+    // Copy whatever is in your div to our new textarea",
                "+    temp.value = $(element).attr(tag_value_to_copy);",
                "+",
                "+    // Now copy whatever inside the textarea to clipboard",
                "+    var selector = document.querySelector(\"#\" + fake_textarea_ID);",
                "+    selector.select();",
                "+",
                "+    document.execCommand('copy');",
                "+",
                "+    // Remove the textarea",
                "+    $(temp).remove();",
                "+",
                "+    $(feedback_selector).fadeIn();",
                "+",
                "+    // Remove Message of feedback",
                "+    setTimeout(function () {",
                "+      $(feedback_selector).fadeOut();",
                "+    }, 1000);",
                "+  };",
                "+",
                "+  $(document).off('click', '.label-with-key:visible');",
                "+  $(document).on('click', '.label-with-key:visible', function (e) {",
                "+    var feedback_selector = '.copy-clipboard-feedback';",
                "+    var fake_textarea_selector = 'tttt';",
                "+    var tag_value_to_copy = 'data-value';",
                "+",
                "+    if (!$(feedback_selector + \":visible\").length) {",
                "+      copyToClipboard(this, tag_value_to_copy, fake_textarea_selector, feedback_selector);",
                "+    }",
                "+    e.stopPropagation();",
                "+  });",
                "+}",
                "+",
                "+",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html",
                "index 0cdf0468c0..659872aba9 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html",
                "@@ -33,3 +33,3 @@ under the License.",
                "       }",
                "-      ",
                "+",
                "       .modal-content div.toggle-menu {",
                "@@ -89,2 +89,23 @@ under the License.",
                "       }",
                "+",
                "+      /* Copy key to clipboard */",
                "+      .copy-clipboard-feedback {",
                "+        position: absolute;",
                "+        top: -30px;",
                "+",
                "+        max-width: 200px;",
                "+        max-height: 30px;",
                "+",
                "+        border-radius: 10px;",
                "+        background: #00a65a;",
                "+        padding: 5px;",
                "+        text-align: center;",
                "+        color: #FFF;",
                "+        text-decoration: none;",
                "+        font-weight: 400;",
                "+        font-size: 14px;",
                "+      }",
                "+      .label-with-key {",
                "+        cursor: pointer;",
                "+      }",
                "     </style>",
                "@@ -95,3 +116,9 @@ under the License.",
                "         <div class=\"label\">",
                "-          <label wicket:id=\"label\"/>",
                "+",
                "+          <!-- Copy key to clipboard feedback -->",
                "+          <div class=\"copy-clipboard-feedback\" style=\"display: none\"> ",
                "+            <wicket:message key=\"copy_to_clipboard.feedback\"/>",
                "+          </div>",
                "+          <label wicket:id=\"label\" class=\"label-with-key\"/>",
                "+",
                "         </div>",
                "@@ -101,5 +128,8 @@ under the License.",
                "       </div>",
                "-      <wicket:child/>",
                "+      <wicket:child/>      ",
                "     </div>",
                "+",
                "+    <script type=\"text/javascript\" src=\"js/copyToClipboard.js\"></script>",
                "   </wicket:extend>",
                " </html>",
                "+",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.properties",
                "new file mode 100644",
                "index 0000000000..f13bc1c9d9",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=Key copied to clipboard!",
                "+copy_to_clipboard.title=Click to copy key to clipboard",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "new file mode 100644",
                "index 0000000000..079a95905e",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=Chiave copiata negli appunti!",
                "+copy_to_clipboard.title=Clicca per copiare la chiave negli appunti",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..d3d50f3b0a",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=Chave copiada para a \\u00e1rea de transfer\\u00eancia!",
                "+copy_to_clipboard.title=Clique para copiar a tecla para a \\u00e1rea de transfer\\u00eancia",
                "\\ No newline at end of file",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties",
                "new file mode 100644",
                "index 0000000000..9d158d78a9",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=\\u041a\\u043b\\u044e\\u0447 \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430!",
                "+copy_to_clipboard.title=\\u041d\\u0430\\u0436\\u043c\\u0438\\u0442\\u0435, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u043a\\u043b\\u044e\\u0447 \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java",
                "client/console/src/main/resources/META-INF/resources/js/copyToClipboard.js",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it_ru.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1237": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0cf5588958a51e72d16375db2b72acd3d28e99a3"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1237",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eabf2c9b9d90892e197c3a8df55f22863f6de5b6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512998499,
            "hunks": 3,
            "message": "[SYNCOPE-152] Adding docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/extensions.adoc b/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "index 4daf9be731..57e7294f57 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "@@ -142 +142,26 @@ endif::[]",
                " ====",
                "+",
                "+==== SCIM",
                "+",
                "+http://www.simplecloud.info/[SCIM^] (System for Cross-domain Identity Management) 2.0 is the open API for managing",
                "+identities, published under the IETF:",
                "+",
                "+. https://tools.ietf.org/html/rfc7642[Definitions, Overview, Concepts, and Requirements^]",
                "+. https://tools.ietf.org/html/rfc7643[Core Schema^]",
                "+. https://tools.ietf.org/html/rfc7644[Protocol^]",
                "+",
                "+This extension enables an additional `/scim` REST endpoint, implementing the communication according to the SCIM 2.0",
                "+standard.",
                "+",
                "+[NOTE]",
                "+.Extension Sources",
                "+====",
                "+The source code of this extension is available from the Apache Syncope",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/tree/syncope-{docVersion}/ext/scimv2[source tree^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/2_0_X/ext/scimv2[source tree^]",
                "+endif::[]",
                "+.",
                "+====",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index 50977ac16f..7a0762ba66 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -422,2 +422,21 @@ classpath*:/workflow*Context.xml",
                "+[discrete]",
                "+===== Enable the <<SCIM>> extension",
                "+",
                "+Add the following dependencies to `core/pom.xml`:",
                "+",
                "+[source,xml,subs=\"verbatim,attributes\"]",
                "+----",
                "+<dependency>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>",
                "+  <version>${syncope.version}</version>",
                "+</dependency>",
                "+<dependency>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>",
                "+  <version>${syncope.version}</version>",
                "+</dependency>",
                "+----",
                "+",
                " [[customization-console]]",
                "@@ -460,2 +479,16 @@ Copy `console/src/main/resources/all/saml2sp-agent.properties` to `console/src/m",
                "+[discrete]",
                "+===== Enable the <<SCIM>> extension",
                "+",
                "+Add the following dependencies to `console/pom.xml`:",
                "+",
                "+[source,xml,subs=\"verbatim,attributes\"]",
                "+----",
                "+<dependency>",
                "+  <groupId>org.apache.syncope.ext.scimv2</groupId>",
                "+  <artifactId>syncope-ext-scimv2-client-console</artifactId>",
                "+  <version>${syncope.version}</version>",
                "+</dependency>",
                "+----",
                "+",
                " [[customization-enduser]]"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/extensions.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0d513169041069aaf7aed7e87862c8a06c496a50"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "07c7e777a25c58c1b97a73e3e945e27402c1d82f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510754894,
            "hunks": 31,
            "message": "[SYNCOPE-152] SCIM search via POST",
            "diff": [
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index d15d30bede..e46c4c8862 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.logic;",
                "+import java.util.ArrayList;",
                " import java.util.Collections;",
                "@@ -100,5 +101,11 @@ public class SCIMDataBinder {",
                "+        List<String> schemas = new ArrayList<>();",
                "+        schemas.add(Resource.User.schema());",
                "+        if (conf.getEnterpriseUserConf() != null) {",
                "+            schemas.add(Resource.EnterpriseUser.schema());",
                "+        }",
                "+",
                "         SCIMUser user = new SCIMUser(",
                "                 userTO.getKey(),",
                "-                Collections.singletonList(Resource.User.schema()),",
                "+                schemas,",
                "                 new Meta(",
                "@@ -355,3 +362,2 @@ public class SCIMDataBinder {",
                "                 groupTO.getKey(),",
                "-                Collections.singletonList(Resource.Group.schema()),",
                "                 new Meta(",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "index 0657476e89..7bafd4b28d 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "@@ -24,3 +24,5 @@ import com.fasterxml.jackson.annotation.JsonPropertyOrder;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -38,3 +40,2 @@ public class SCIMGroup extends SCIMResource {",
                "             @JsonProperty(\"id\") final String id,",
                "-            @JsonProperty(\"schemas\") final List<String> schemas,",
                "             @JsonProperty(\"meta\") final Meta meta,",
                "@@ -42,3 +43,3 @@ public class SCIMGroup extends SCIMResource {",
                "-        super(id, schemas, meta);",
                "+        super(id, Collections.singletonList(Resource.Group.schema()), meta);",
                "         this.displayName = displayName;",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "new file mode 100644",
                "index 0000000000..570ee3a931",
                "--- /dev/null",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ext.scimv2.api.data;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "+import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "+",
                "+public class SCIMSearchRequest extends SCIMBean {",
                "+",
                "+    private static final long serialVersionUID = 5759362928661983543L;",
                "+",
                "+    private final List<String> schemas = Arrays.asList(Resource.SearchRequest.schema());",
                "+",
                "+    private final List<String> attributes = new ArrayList<>();",
                "+",
                "+    private final List<String> excludedAttributes = new ArrayList<>();",
                "+",
                "+    private final String filter;",
                "+",
                "+    private final String sortBy;",
                "+",
                "+    private final SortOrder sortOrder;",
                "+",
                "+    private final Integer startIndex;",
                "+",
                "+    private final Integer count;",
                "+",
                "+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)",
                "+    public SCIMSearchRequest(",
                "+            @JsonProperty(\"filter\") final String filter,",
                "+            @JsonProperty(\"sortBy\") final String sortBy,",
                "+            @JsonProperty(\"sortOrder\") final SortOrder sortOrder,",
                "+            @JsonProperty(\"startIndex\") final Integer startIndex,",
                "+            @JsonProperty(\"count\") final Integer count) {",
                "+",
                "+        this.filter = filter;",
                "+        this.sortBy = sortBy;",
                "+        this.sortOrder = sortOrder;",
                "+        this.startIndex = startIndex;",
                "+        this.count = count;",
                "+    }",
                "+",
                "+    public List<String> getSchemas() {",
                "+        return schemas;",
                "+    }",
                "+",
                "+    public List<String> getAttributes() {",
                "+        return attributes;",
                "+    }",
                "+",
                "+    public List<String> getExcludedAttributes() {",
                "+        return excludedAttributes;",
                "+    }",
                "+",
                "+    public String getFilter() {",
                "+        return filter;",
                "+    }",
                "+",
                "+    public String getSortBy() {",
                "+        return sortBy;",
                "+    }",
                "+",
                "+    public SortOrder getSortOrder() {",
                "+        return sortOrder;",
                "+    }",
                "+",
                "+    public Integer getStartIndex() {",
                "+        return startIndex;",
                "+    }",
                "+",
                "+    public Integer getCount() {",
                "+        return count;",
                "+    }",
                "+",
                "+}",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "index fcd4789418..d6cbaf5da6 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "@@ -21,3 +21,6 @@ package org.apache.syncope.ext.scimv2.api.service;",
                " import java.util.List;",
                "+import javax.ws.rs.Consumes;",
                " import javax.ws.rs.GET;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.Path;",
                " import javax.ws.rs.Produces;",
                "@@ -27,2 +30,3 @@ import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.type.SortOrder;",
                "@@ -34,4 +38,4 @@ public interface SearchService<R extends SCIMResource> {",
                "     ListResponse<R> search(",
                "-            @QueryParam(\"startIndex\") Integer startIndex,",
                "-            @QueryParam(\"count\") Integer count,",
                "+            @QueryParam(\"attributes\") List<String> attributes,",
                "+            @QueryParam(\"excludedAttributes\") List<String> excludedAttributes,",
                "             @QueryParam(\"filter\") String filter,",
                "@@ -39,3 +43,10 @@ public interface SearchService<R extends SCIMResource> {",
                "             @QueryParam(\"sortOrder\") SortOrder sortOrder,",
                "-            @QueryParam(\"attributes\") List<String> attributes);",
                "+            @QueryParam(\"startIndex\") Integer startIndex,",
                "+            @QueryParam(\"count\") Integer count);",
                "+",
                "+    @POST",
                "+    @Path(\".search\")",
                "+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })",
                "+    ListResponse<R> search(SCIMSearchRequest request);",
                " }",
                "diff --git a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "index 8fb2bdeed1..7800b68d02 100644",
                "--- a/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "+++ b/ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "@@ -28,2 +28,3 @@ public enum Resource {",
                "     Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),",
                "+    SearchRequest(\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"),",
                "     ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"),",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "index 6f61e4c4a9..ac3411144e 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "@@ -41,2 +41,3 @@ import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMResource;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.type.Resource;",
                "@@ -106,8 +107,3 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "             final Resource type,",
                "-            final Integer startIndex,",
                "-            final Integer count,",
                "-            final String filter,",
                "-            final String sortBy,",
                "-            final SortOrder sortOrder,",
                "-            final List<String> attributes) {",
                "+            final SCIMSearchRequest request) {",
                "@@ -117,5 +113,9 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "+        int startIndex = request.getStartIndex() == null || request.getStartIndex() <= 1",
                "+                ? 1",
                "+                : (request.getStartIndex() / AnyDAO.DEFAULT_PAGE_SIZE) + 1;",
                "+",
                "         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(",
                "-                StringUtils.isBlank(filter) ? null : SearchCondConverter.convert(filter),",
                "-                startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1,",
                "+                StringUtils.isBlank(request.getFilter()) ? null : SearchCondConverter.convert(request.getFilter()),",
                "+                startIndex,",
                "                 AnyDAO.DEFAULT_PAGE_SIZE,",
                "@@ -126,3 +126,3 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "         ListResponse<R> response = new ListResponse<>(",
                "-                result.getLeft(), startIndex == null || startIndex <= 1 ? 1 : startIndex, AnyDAO.DEFAULT_PAGE_SIZE);",
                "+                result.getLeft(), startIndex == 1 ? 1 : startIndex - 1, AnyDAO.DEFAULT_PAGE_SIZE);",
                "@@ -150,4 +150,4 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "     public ListResponse<R> search(",
                "-            final Integer startIndex,",
                "-            final Integer count,",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes,",
                "             final String filter,",
                "@@ -155,6 +155,21 @@ abstract class AbstractService<R extends SCIMResource> implements SearchService<",
                "             final SortOrder sortOrder,",
                "-            final List<String> attributes) {",
                "+            final Integer startIndex,",
                "+            final Integer count) {",
                "-        return doSearch(null, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+        SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);",
                "+        if (attributes != null) {",
                "+            request.getAttributes().addAll(attributes);",
                "+        }",
                "+        if (excludedAttributes != null) {",
                "+            request.getExcludedAttributes().addAll(excludedAttributes);",
                "+        }",
                "+",
                "+        return doSearch(null, request);",
                "     }",
                "+",
                "+    @Override",
                "+    public ListResponse<R> search(final SCIMSearchRequest request) {",
                "+        return doSearch(null, request);",
                "+    }",
                "+",
                " }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "index d03b57c6b8..fdc47aa7d3 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.service.GroupService;",
                "@@ -60,4 +61,4 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "     public ListResponse<SCIMGroup> search(",
                "-            final Integer startIndex,",
                "-            final Integer count,",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes,",
                "             final String filter,",
                "@@ -65,7 +66,20 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou",
                "             final SortOrder sortOrder,",
                "-            final List<String> attributes) {",
                "+            final Integer startIndex,",
                "+            final Integer count) {",
                "+",
                "+        SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);",
                "+        if (attributes != null) {",
                "+            request.getAttributes().addAll(attributes);",
                "+        }",
                "+        if (excludedAttributes != null) {",
                "+            request.getExcludedAttributes().addAll(excludedAttributes);",
                "+        }",
                "-        return doSearch(Resource.Group, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+        return doSearch(Resource.Group, request);",
                "     }",
                "+    @Override",
                "+    public ListResponse<SCIMGroup> search(final SCIMSearchRequest request) {",
                "+        return doSearch(Resource.Group, request);",
                "+    }",
                " }",
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "index 67b9b47b14..0f98362455 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java",
                "@@ -24,2 +24,3 @@ import javax.ws.rs.core.Response;",
                " import org.apache.syncope.ext.scimv2.api.data.ListResponse;",
                "+import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;",
                " import org.apache.syncope.ext.scimv2.api.data.SCIMUser;",
                "@@ -60,4 +61,4 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "     public ListResponse<SCIMUser> search(",
                "-            final Integer startIndex,",
                "-            final Integer count,",
                "+            final List<String> attributes,",
                "+            final List<String> excludedAttributes,",
                "             final String filter,",
                "@@ -65,6 +66,21 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe",
                "             final SortOrder sortOrder,",
                "-            final List<String> attributes) {",
                "+            final Integer startIndex,",
                "+            final Integer count) {",
                "-        return doSearch(Resource.User, startIndex, count, filter, sortBy, sortOrder, attributes);",
                "+        SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);",
                "+        if (attributes != null) {",
                "+            request.getAttributes().addAll(attributes);",
                "+        }",
                "+        if (excludedAttributes != null) {",
                "+            request.getExcludedAttributes().addAll(excludedAttributes);",
                "+        }",
                "+",
                "+        return doSearch(Resource.User, request);",
                "     }",
                "+",
                "+    @Override",
                "+    public ListResponse<SCIMUser> search(final SCIMSearchRequest request) {",
                "+        return doSearch(Resource.User, request);",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SearchService.java",
                "ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java",
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-152": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fa2ed73036d6c75b2dca0aea0e764f0e68938d81"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-152",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "60c4dc330971ea01a3b11ed3c0a8bea0bb9fac76",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511879995,
            "hunks": 1,
            "message": "Upgrading Spring Security",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 269bf8cfc7..afca95fe4d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -372,3 +372,3 @@ under the License.",
                "     <spring.version>5.0.2.RELEASE</spring.version>",
                "-    <spring-security.version>4.2.3.RELEASE</spring-security.version>",
                "+    <spring-security.version>5.0.0.RELEASE</spring-security.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8b8d6df4a70700c93e5ab1711a84516572e70f88",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513759895,
            "hunks": 19,
            "message": "Revert \"Updating downloads site page for release\" This reverts commit 23b0a33fe83ae888f2f2f611c33a4ee1bd4f8603.",
            "diff": [
                "diff --git a/src/site/xdoc/downloads.xml b/src/site/xdoc/downloads.xml",
                "index f5c9b0f3e4..c562456a25 100644",
                "--- a/src/site/xdoc/downloads.xml",
                "+++ b/src/site/xdoc/downloads.xml",
                "@@ -51,4 +51,4 @@ under the License.",
                "-      <subsection name=\"2.0.7 Jazz\">",
                "-        <p>Release date: December 20th 2017</p>",
                "+      <subsection name=\"2.0.6 Jazz\">",
                "+        <p>Release date: October 9th 2017</p>",
                "         <p>",
                "@@ -66,8 +66,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-2.0.7-source-release.zip\">syncope-2.0.7-source-release.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-2.0.6-source-release.zip\">syncope-2.0.6-source-release.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-2.0.7-source-release.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-2.0.6-source-release.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -76,8 +76,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip\">syncope-standalone-2.0.7-distribution.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip\">syncope-standalone-2.0.6-distribution.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-standalone-2.0.7-distribution.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-standalone-2.0.6-distribution.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -86,8 +86,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-2.0.7.deb\">apache-syncope-2.0.7.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-2.0.6.deb\">apache-syncope-2.0.6.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-2.0.7.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-2.0.6.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -96,8 +96,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-console-2.0.7.deb\">apache-syncope-console-2.0.7.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-console-2.0.6.deb\">apache-syncope-console-2.0.6.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-console-2.0.7.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-console-2.0.6.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -106,8 +106,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb\">apache-syncope-enduser-2.0.7.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb\">apache-syncope-enduser-2.0.6.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/apache-syncope-enduser-2.0.7.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/apache-syncope-enduser-2.0.6.deb.sha1\">sha1</a>",
                "               </td>",
                "@@ -116,8 +116,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-installer-2.0.7-uber.jar\">syncope-installer-2.0.7.jar</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-installer-2.0.6-uber.jar\">syncope-installer-2.0.6.jar</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-installer-2.0.7-uber.jar.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-installer-2.0.6-uber.jar.sha1\">sha1</a>",
                "               </td>",
                "@@ -126,8 +126,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-client-cli-2.0.7.zip\">syncope-client-cli-2.0.7.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-client-cli-2.0.6.zip\">syncope-client-cli-2.0.6.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-client-cli-2.0.7.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-client-cli-2.0.6.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -136,8 +136,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip\">org.apache.syncope.ide.eclipse.site-2.0.7.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip\">org.apache.syncope.ide.eclipse.site-2.0.6.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/org.apache.syncope.ide.eclipse.site-2.0.7.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/org.apache.syncope.ide.eclipse.site-2.0.6.zip.sha1\">sha1</a>",
                "               </td>",
                "@@ -146,8 +146,8 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm\">syncope-ide-netbeans-2.0.7.nbm</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm\">syncope-ide-netbeans-2.0.6.nbm</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.md5\">md5</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.7/syncope-ide-netbeans-2.0.7.nbm.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.md5\">md5</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.6/syncope-ide-netbeans-2.0.6.nbm.sha1\">sha1</a>",
                "               </td>"
            ],
            "changed_files": [
                "src/site/xdoc/downloads.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "cb134c7bbf17b4f86562d08f02c7719b80bf78f5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513758637,
            "hunks": 75,
            "message": "[maven-release-plugin] rollback the release of syncope-2.0.7",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 9eb78a17a8..bc734173c4 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 1051acf9f8..5d76615bcc 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 662a1530b8..f7f7c60f65 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index d6b8e306f4..e24c60ad25 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index ecc1276a5b..999d3541d3 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index ef9de007a5..6d1298ce17 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index 41d0587bdb..c8c5630d68 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 087c8338cc..c7a52787b2 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index a76dc16794..3afea8986b 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index a0b9728fcf..538eabb0bf 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/migration/pom.xml b/core/migration/pom.xml",
                "index 37ef4d7c77..d805a35e7f 100644",
                "--- a/core/migration/pom.xml",
                "+++ b/core/migration/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index 5a319262a6..dbc2d3c7cf 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 8fe5e49ab9..acd8067f2a 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 75f1dae7e9..5ec4160be3 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index 7958210cc4..f5e688f7af 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 078ec3d7d3..def5603b3a 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index bd0459c20e..c4551a08bc 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index 74a2d9b938..73fd73dfed 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-activiti/pom.xml b/core/workflow-activiti/pom.xml",
                "index c5edad5586..e7eda1d924 100644",
                "--- a/core/workflow-activiti/pom.xml",
                "+++ b/core/workflow-activiti/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index 01fe2b674b..c7aa886063 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-flowable/pom.xml b/core/workflow-flowable/pom.xml",
                "index 6a1351e403..0dcd39a02b 100644",
                "--- a/core/workflow-flowable/pom.xml",
                "+++ b/core/workflow-flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index 4711e74773..2b5b065407 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index c4af28affd..777d129a37 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index 2cf02613d4..25c38efa97 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 7a8772bab7..077def3dfb 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 1d3f0e771f..e9a0439a8e 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index 4898bc6176..ac943fa1c7 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index 57009bca2e..61671ddd9b 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index b2bb8ec060..c667b1412c 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index 483b007b7b..7cd69b4568 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index eac8787d59..0696d39b04 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index d198844f77..3388f46c6d 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index b71be9234a..303481b9d9 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index ada27c6781..56675235a1 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index e06b95bf73..5f4bcf3a15 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index 3d4ecced88..94c602de8b 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index 68f400a0a6..c25c6e1d93 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index 1de9af8675..ce043c59f3 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index 8331ce0e58..d5d7723d76 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index 671e093b93..c09bb93c67 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index f4578beb0a..be5e3ced46 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index e8b0a62466..09348a7fc9 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index d28e6170db..428c7939e3 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index e8d94e40b6..b649071117 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index 6f70a6f251..4b0ff96b8f 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index d6411e86b4..9baa73bf53 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 682f6690dd..1ad7a1432f 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index 7cba3647a3..b4d3152426 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index dc0a39cb33..d1b0b632de 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index 546d20d0a5..a436772774 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index 9944ddf95e..bd0fd5c4fd 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index 89bfb3533b..b7f3230361 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index dff3610d14..b301d1e779 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index bfd7ad0da0..278072ead6 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index ab014f9ef7..285a7982d4 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index e79f185336..c186912d24 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index e87917b288..a04e6bd07c 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index 89d3404eca..b56ada61c7 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index 2b6c277926..f82987759e 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index 7f4a78723c..0d0d1ae529 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index 007877ace0..75c8a7c4e7 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index 8da3f1d738..89a494a89d 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 4c63a9c3e9..2e53017db0 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index cab1b03af1..f0871efe48 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index f6ab69dbf3..80ed2e629c 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index e9ea55c255..371588f2cf 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index e2a72a1366..660716f741 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index c2c21d02b2..09e0567b43 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index 6a447bcf8b..71befbd02e 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index 50c9a062c8..af0efa2f8e 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 27dec6d974..11d0123e3f 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index af6614f752..9adafce4aa 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index bb66656f36..f95377bc54 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 2ae79f0d37..cc5d6b422e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.0.8-SNAPSHOT</version>",
                "+  <version>2.0.7-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index 60a60b704d..c8f81d2f31 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.8-SNAPSHOT</version>",
                "+    <version>2.0.7-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/migration/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/workflow-activiti/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-flowable/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d862c40c1ed7899e4f35e8f3913f46bb51cd1866",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512381057,
            "hunks": 3,
            "message": "Properly support resolveReference in UserLogic",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "index dfedc1000c..b79234c987 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "@@ -513,4 +513,8 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "                     key = ((UserPatch) args[i]).getKey();",
                "+                } else if (args[i] instanceof StatusPatch) {",
                "+                    key = ((StatusPatch) args[i]).getKey();",
                "                 }",
                "             }",
                "+        } else if (\"requestPasswordReset\".equals(method.getName())) {",
                "+            key = userDAO.findKey((String) args[0]);",
                "         }",
                "@@ -519,3 +523,3 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "             try {",
                "-                return binder.getUserTO((String) key);",
                "+                return binder.getUserTO(key);",
                "             } catch (Throwable ignore) {"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "22197406c9603f49280c7832f1a78929f38cc428"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e42bb63e12b49459116406e11847269d7b930bfa",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516810827,
            "hunks": 1,
            "message": "Downgrading Swagger Core - breaking changes in minor version",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ddf1397c69..3f9eb09fc9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -421,3 +421,3 @@ under the License.",
                "-    <swagger-core.version>1.5.18</swagger-core.version>    ",
                "+    <swagger-core.version>1.5.17</swagger-core.version>    ",
                "     <swagger-ui.version>3.9.2</swagger-ui.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "079f65552e4b76c62aa94c9553cbdbed6d7b4465"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "53d75cd0fd1b5602cf6a298c3037560f8ece1193",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513932309,
            "hunks": 1,
            "message": "Matteo Alessandroni becomes PMC member: updated parent pom.xml accordingly",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 10c103396e..caaa75b129 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -310,3 +310,3 @@ under the License.",
                "       <roles>",
                "-        <role>committer</role>",
                "+        <role>PMC member</role>",
                "       </roles>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a07760360cbb9e285fd1b677dfc2a471b38bb0ff"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d4f233ccc73dfb68759461abdb75baacaf25d25",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509704310,
            "hunks": 4,
            "message": "Further changes to ensure querying for supported ConnId ObjectClasses work propertly",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "index d5b2f9422f..75d704e3f0 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "@@ -23,3 +23,2 @@ import java.net.URI;",
                " import java.util.ArrayList;",
                "-import java.util.Collections;",
                " import java.util.List;",
                "@@ -36,3 +35,2 @@ import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                " import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "-import org.apache.syncope.common.lib.types.ConnConfProperty;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -211,4 +209,10 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {",
                "+        ConnInstanceTO actual = connInstanceTO;",
                "+        ConnInstance existing = connInstanceDAO.find(connInstanceTO.getKey());",
                "+        if (existing != null) {",
                "+            actual = binder.getConnInstanceTO(existing);",
                "+        }",
                "+",
                "         Set<ObjectClassInfo> objectClassInfo = connFactory.createConnector(",
                "-                connFactory.buildConnInstanceOverride(connInstanceTO, Collections.<ConnConfProperty>emptySet(), null)).",
                "+                connFactory.buildConnInstanceOverride(actual, connInstanceTO.getConf(), null)).",
                "                 getObjectClassInfo();"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "149b91000050cfd13ba8a9fa00464fa6ff566a86"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87354d8705b84a57b98a4ff143c3607949acf7ee",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512137730,
            "hunks": 2,
            "message": "Upgrading commons-httpclient",
            "diff": [
                "diff --git a/installer/src/main/resources/izpack/install.xml b/installer/src/main/resources/izpack/install.xml",
                "index 9b31ad3ca5..07fc98a1f1 100644",
                "--- a/installer/src/main/resources/izpack/install.xml",
                "+++ b/installer/src/main/resources/izpack/install.xml",
                "@@ -137,3 +137,3 @@ under the License.",
                "   <jar src=\"lib/httpmime-@{httpclient.version}.jar\"/>",
                "-  <jar src=\"lib/httpcore-4.4.6.jar\"/>",
                "+  <jar src=\"lib/httpcore-4.4.7.jar\"/>",
                "   <jar src=\"lib/jackson-databind-@{jackson.version}.jar\"/>",
                "diff --git a/pom.xml b/pom.xml",
                "index afca95fe4d..ad062a019b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -456,3 +456,3 @@ under the License.",
                "     <izpack.version>5.1.2</izpack.version>",
                "-    <httpclient.version>4.5.3</httpclient.version>",
                "+    <httpclient.version>4.5.4</httpclient.version>",
                "     <maven-invoker.version>3.0.0</maven-invoker.version>"
            ],
            "changed_files": [
                "installer/src/main/resources/izpack/install.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c66d6de4eb46cb6293da713725031fd36aaa0580"
                ],
                [
                    "no-tag",
                    "4b862485653099f1d2d464c5bcbcee49ecc7e993"
                ],
                [
                    "no-tag",
                    "a4c44db1423787d72b64d10cd67a0c9adf2f8c32"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d701a03fbaa84c079f8442608e279c5c60981160",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513698103,
            "hunks": 2,
            "message": "Add the Active Directory Connector to fit/build-tools",
            "diff": [
                "diff --git a/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ConnIdStartStopListener.java b/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ConnIdStartStopListener.java",
                "index 1cb83701fc..1aaea1b8d8 100644",
                "--- a/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ConnIdStartStopListener.java",
                "+++ b/fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ConnIdStartStopListener.java",
                "@@ -55,2 +55,3 @@ public class ConnIdStartStopListener implements ServletContextListener {",
                "             \"testconnectorserver.csvdir.bundle\",",
                "+            \"testconnectorserver.ad.bundle\",",
                "             \"testconnectorserver.ldap.bundle\" }) {",
                "diff --git a/fit/build-tools/src/main/resources/buildToolsContext.xml b/fit/build-tools/src/main/resources/buildToolsContext.xml",
                "index a4433c9667..b3754acf42 100644",
                "--- a/fit/build-tools/src/main/resources/buildToolsContext.xml",
                "+++ b/fit/build-tools/src/main/resources/buildToolsContext.xml",
                "@@ -59,2 +59,5 @@ under the License.",
                "   </bean>  ",
                "+  <bean id=\"testconnectorserver.ad.bundle\" class=\"java.lang.String\">",
                "+    <constructor-arg value=\"net.tirasa.connid.bundles.ad-${connid.ad.version}.jar\"/>",
                "+  </bean>",
                "   <bean id=\"testconnectorserver.ldap.bundle\" class=\"java.lang.String\">"
            ],
            "changed_files": [
                "fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ConnIdStartStopListener.java",
                "fit/build-tools/src/main/resources/buildToolsContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "32a6bd35295ecd7d92be75e96b726fb6b50389c7"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bdccedf518162fbc458aa666554f91986af44c3e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511606425,
            "hunks": 3,
            "message": "fix for toggle panel bundle names",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "index 079a95905e..520ad10415 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "@@ -18 +18,2 @@ copy_to_clipboard.feedback=Chiave copiata negli appunti!",
                " copy_to_clipboard.title=Clicca per copiare la chiave negli appunti",
                "+",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..2f6931ad6e",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_pt_BR.properties",
                "@@ -0,0 +1,19 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=Chave copiada para a \\u00e1rea de transfer\\u00eancia!",
                "+copy_to_clipboard.title=Clique para copiar a tecla para a \\u00e1rea de transfer\\u00eancia",
                "+",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_ru.properties",
                "new file mode 100644",
                "index 0000000000..ea33ddd94c",
                "--- /dev/null",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_ru.properties",
                "@@ -0,0 +1,19 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+copy_to_clipboard.feedback=\\u041a\\u043b\\u044e\\u0447 \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430!",
                "+copy_to_clipboard.title=\\u041d\\u0430\\u0436\\u043c\\u0438\\u0442\\u0435, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0441\\u043a\\u043e\\u043f\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u043a\\u043b\\u044e\\u0447 \\u0432 \\u0431\\u0443\\u0444\\u0435\\u0440 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430",
                "+"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel_ru.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "101858dce385aa1c26b03ccfe5a546e0332f515d"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "845f251462aedc74df6b663070e22b0007436b77",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513694252,
            "hunks": 5,
            "message": "implements paged searchs to retrieve members of dynamic group in order to avoid trobles with memory usage",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "index d0bd1e0dd4..658a32b5ca 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "@@ -31,3 +31,3 @@ public interface AnyDAO<A extends Any<?>> extends DAO<A> {",
                "-    int DEFAULT_PAGE_SIZE = 10;",
                "+    int DEFAULT_PAGE_SIZE = 500;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index 898a4ae608..03c12198cb 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -45,2 +45,3 @@ import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyDAO;",
                " import org.apache.syncope.core.provisioning.api.utils.RealmUtils;",
                "@@ -53,2 +54,3 @@ import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;",
                " import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                " import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "@@ -298,15 +300,21 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         if (merged.getUDynMembership() != null) {",
                "-            List<User> matching = searchDAO().search(",
                "-                    buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),",
                "-                    AnyTypeKind.USER);",
                "-",
                "-            clearUDynMembers(merged);",
                "-",
                "-            for (User user : matching) {",
                "-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");",
                "-                insert.setParameter(1, user.getKey());",
                "-                insert.setParameter(2, merged.getKey());",
                "-                insert.executeUpdate();",
                "-",
                "-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));",
                "+            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+                List<User> matching = searchDAO().search(",
                "+                        Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "+                        buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),",
                "+                        page,",
                "+                        AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                        Collections.<OrderByClause>emptyList(),",
                "+                        AnyTypeKind.USER);",
                "+",
                "+                clearUDynMembers(merged);",
                "+",
                "+                for (User user : matching) {",
                "+                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");",
                "+                    insert.setParameter(1, user.getKey());",
                "+                    insert.setParameter(2, merged.getKey());",
                "+                    insert.executeUpdate();",
                "+",
                "+                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));",
                "+                }",
                "             }",
                "@@ -314,16 +322,23 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         for (ADynGroupMembership memb : merged.getADynMemberships()) {",
                "-            List<AnyObject> matching = searchDAO().search(",
                "-                    buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),",
                "-                    AnyTypeKind.ANY_OBJECT);",
                "-",
                "-            clearADynMembers(merged);",
                "-",
                "-            for (AnyObject anyObject : matching) {",
                "-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");",
                "-                insert.setParameter(1, anyObject.getType().getKey());",
                "-                insert.setParameter(2, anyObject.getKey());",
                "-                insert.setParameter(3, merged.getKey());",
                "-                insert.executeUpdate();",
                "-",
                "-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));",
                "+            for (int page = 1; page <= (countADynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+                List<AnyObject> matching = searchDAO().search(",
                "+                        Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "+                        buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),",
                "+                        page,",
                "+                        AnyDAO.DEFAULT_PAGE_SIZE,",
                "+                        Collections.<OrderByClause>emptyList(),",
                "+                        AnyTypeKind.ANY_OBJECT);",
                "+",
                "+                clearADynMembers(merged);",
                "+",
                "+                for (AnyObject anyObject : matching) {",
                "+                    Query insert = entityManager().createNativeQuery(",
                "+                            \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");",
                "+                    insert.setParameter(1, anyObject.getType().getKey());",
                "+                    insert.setParameter(2, anyObject.getKey());",
                "+                    insert.setParameter(3, merged.getKey());",
                "+                    insert.executeUpdate();",
                "+",
                "+                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));",
                "+                }",
                "             }"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec7612419c3ed3f2bd582c67fd5cb5e617fd898f"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26352126b4776d3fddff853dfaa0839b97885cb2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511277981,
            "hunks": 1,
            "message": "Upgrading the ConnId CSVDir connector",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b2981764fc..59f6278790 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -362,3 +362,3 @@ under the License.",
                "     <connid.database.version>2.2.5</connid.database.version>",
                "-    <connid.csvdir.version>0.8.6</connid.csvdir.version>",
                "+    <connid.csvdir.version>0.8.7</connid.csvdir.version>",
                "     <connid.ldap.version>1.5.2</connid.ldap.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e611d3e0d2a7bbce1d8114c56528777412795909"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0bd705889de7038991c7297426f8af0fa099d57b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511606488,
            "hunks": 1,
            "message": "fix realm and entity console access permissions",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java",
                "index f8ea7bc1cb..e3f121c44a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java",
                "@@ -173,4 +173,3 @@ public abstract class Realm extends WizardMgtPanel<RealmTO> {",
                "             tabs.add(new ITabComponent(",
                "-                    new Model<>(anyType.getKey()),",
                "-                    StandardEntitlement.ANYTYPE_READ, String.format(\"%s_SEARCH\", anyType)) {",
                "+                    new Model<>(anyType.getKey()), String.format(\"%s_SEARCH\", anyType.getKey())) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "98cc9b1cbf91b6732d6fd5f62239c72ffba5f197"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a9cbd25f872e175fa4c4af52502f55c7b8edcdf1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512460170,
            "hunks": 2,
            "message": "Fix conditional logic",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "index b79234c987..4612148bc1 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "@@ -505,3 +505,5 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-        if (!\"confirmPasswordReset\".equals(method.getName()) && ArrayUtils.isNotEmpty(args)) {",
                "+        if (\"requestPasswordReset\".equals(method.getName())) {",
                "+            key = userDAO.findKey((String) args[0]);",
                "+        } else if (!\"confirmPasswordReset\".equals(method.getName()) && ArrayUtils.isNotEmpty(args)) {",
                "             for (int i = 0; key == null && i < args.length; i++) {",
                "@@ -517,4 +519,2 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "             }",
                "-        } else if (\"requestPasswordReset\".equals(method.getName())) {",
                "-            key = userDAO.findKey((String) args[0]);",
                "         }"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bf34f2c99befa5f0c54ed7dba3298e26131bd364"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "69e0c702d1532ce49af6e63c5ec36f44409dcb71",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512140277,
            "hunks": 1,
            "message": "Upgrading Tomcat",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e75da56f48..20d7b0cb15 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -489,3 +489,3 @@ under the License.",
                "-    <tomcat.version>8.5.23</tomcat.version>",
                "+    <tomcat.version>8.5.24</tomcat.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ba67067cda8062a33c5187bf3b067d0d3462241"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b3af58c1eb8179d70c6c450010f3c049e87664e5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514274944,
            "hunks": 1,
            "message": "Upgrading cargo-maven2-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index caaa75b129..b02fe04478 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1805,3 +1805,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.5</version>",
                "+          <version>1.6.6</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5cd02845b0c6db3787ea3d847405051257934dd4"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0942cdbca18dca553995de181f5c3f921e64c473",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514462136,
            "hunks": 3,
            "message": "Improving getting started with GUI installer",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 1dda45aa6b..eb98a2aa32 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -196,6 +196,20 @@ operating system. +",
                "  . http://maven.apache.org/[Apache Maven^] (version 3.0.3 or higher) installed",
                "- . one of the supported <<internal-storage,DBMSes>> up and running",
                "+ . one of the supported <<internal-storage,DBMSes>> up and running, and an empty database instance for usage with",
                "+Apache Syncope (you will be requested for JDBC URL, username and password)",
                "  . one of the supported <<java-ee-container, Java EE containers>> up and running",
                "- . A datasource with the name `syncopeMasterDataSource` configured in the selected Java EE container, for a database instance in the",
                "- DBMS of choice",
                "+ . a datasource with the name `syncopeMasterDataSource` configured in the selected Java EE container and the database",
                "+instance mentioned above",
                "+",
                "+[WARNING]",
                "+====",
                "+Ensure that the `syncopeMasterDataSource` datasource is correctly configured before proceeding.",
                "+",
                "+The actual configuration steps vary significantly depending on the selected Java EE container; here are some",
                "+examples:",
                "+",
                "+. https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html[Apache Tomcat 9^]",
                "+. https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish 4.1^]",
                "+. https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server^]",
                "+  * https://docs.jboss.org/author/display/WFLY11/DataSource+configuration[Wildfly 11^]",
                "+====",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "index 53b2d4f46f..56cbf02220 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "@@ -34,3 +34,3 @@ Each JavaEE Container provides its own way to accomplish this task:",
                "   * https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html[Apache Tomcat 9^]",
                "-  * https://javaee.github.io/glassfish/doc/4.0/administration-guide.pdf[Glassfish 4.1^]",
                "+  * https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish 4.1^]",
                "   * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara^]"
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "127f9d578e59057ad0a392bdcc0022dd5d3f5463"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87e4ff51f7acde43b4ece9b00769c63922ba7827",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516266257,
            "hunks": 1,
            "message": "Disabling an entity only on resources always changes the status on syncope",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java",
                "index 77a8ef9bfe..9828b0ce8d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java",
                "@@ -172,3 +172,3 @@ public class StatusUtils implements Serializable {",
                "         StatusPatch.Builder builder = new StatusPatch.Builder();",
                "-",
                "+        builder.onSyncope(false);",
                "         for (StatusBean status : statuses) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec9769cc879607bc33d8173eb3a38543dd26cdfe"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1df2abf0c483ee0538751f0778fba3475439ebbe",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511518324,
            "hunks": 1,
            "message": "Upgrading Spring",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 9050765da2..25b1cbe273 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -371,3 +371,3 @@ under the License.",
                "-    <spring.version>5.0.0.RELEASE</spring.version>",
                "+    <spring.version>5.0.1.RELEASE</spring.version>",
                "     <spring-security.version>4.2.3.RELEASE</spring-security.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fe774bc6136a38e1c69dc52a32a8836d12b5df15"
                ],
                [
                    "no-tag",
                    "131c94598bf232265a083aacf85ba4f3a91d00e2"
                ],
                [
                    "no-tag",
                    "99dc39e8b4d8418ee0bf4f062b7aec890139050d"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "461a5e46ff8f7fb465c5c9aaa771334e38f41a5a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512655030,
            "hunks": 2,
            "message": "Upgrading Elasticsearch",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 95eaa27c92..ee2e6387e0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -394,3 +394,3 @@ under the License.",
                "-    <elasticsearch.version>5.6.4</elasticsearch.version>",
                "+    <elasticsearch.version>5.6.5</elasticsearch.version>",
                "@@ -2288,3 +2288,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/service/local/repositories/releases/archive/org/opensaml/opensaml-core/3.3.0/opensaml-core-3.3.0-javadoc.jar/!/index.html</link>",
                "-            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.4</link>",
                "+            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.5</link>",
                "           </links>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b19be0e14d7d1df3952f3c35a230d552baa098ae"
                ],
                [
                    "no-tag",
                    "496aeb439e1b8501db02a9ca25880af9951b340b"
                ],
                [
                    "no-tag",
                    "2121d2f0dcbd982c8d59ee86cd8207e6d716d940"
                ],
                [
                    "no-tag",
                    "810c976ae454f7a092375cd44bba9adbdfc3a670"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "320f37d49d99b8d8831e79a1950deb6c84d26efc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513773788,
            "hunks": 1,
            "message": "Follow-up fix from SCIM",
            "diff": [
                "diff --git a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "index 98a21ef3ab..9ca2321b49 100644",
                "--- a/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "+++ b/ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java",
                "@@ -202,3 +202,3 @@ public class SCIMExceptionMapper implements ExceptionMapper<Exception> {",
                "             scimType = ErrorType.invalidValue;",
                "-        } else if (hType == ClientExceptionType.DataIntegrityViolation) {",
                "+        } else if (hType == ClientExceptionType.EntityExists) {",
                "             scimType = ErrorType.uniqueness;"
            ],
            "changed_files": [
                "ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65f19aaf58fac746ed43ae16af7e9a33a1f10c02"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "543d16161faa06e65d5be1b2ec18436f8b8bdc49",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512655085,
            "hunks": 10,
            "message": "Fixing some javadocs",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "index 94f011ab8a..6a36f62604 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "@@ -62,2 +62,3 @@ public class ResourceMappingPanel extends AbstractMappingPanel {",
                "      * @param resourceTO external resource to be updated",
                "+     * @param adminRealm admin realm",
                "      * @param provision external resource provisioning configuration instance",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java b/common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java",
                "index 5087f95c58..3d5069a005 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java",
                "@@ -59,3 +59,3 @@ public class LogOutputStream extends OutputStream {",
                "      * @param cc data to log (byte).",
                "-     * @see java.io.OutputStream#write(int)",
                "+     * @see OutputStream#write(int)",
                "      */",
                "@@ -77,3 +77,3 @@ public class LogOutputStream extends OutputStream {",
                "      *",
                "-     * @see java.io.OutputStream#flush()",
                "+     * @see OutputStream#flush()",
                "      */",
                "@@ -89,4 +89,4 @@ public class LogOutputStream extends OutputStream {",
                "      *",
                "-     * @throws java.io.IOException",
                "-     * @see java.io.OutputStream#close()",
                "+     * @exception IOException if an I/O error occurs",
                "+     * @see OutputStream#close()",
                "      */",
                "@@ -106,3 +106,3 @@ public class LogOutputStream extends OutputStream {",
                "      * @param len the length of block",
                "-     * @see java.io.OutputStream#write(byte[], int, int)",
                "+     * @see OutputStream#write(byte[], int, int)",
                "      */",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index 75468c8c38..3afea8986b 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -87,17 +87,2 @@ under the License.",
                "         <plugins>",
                "-          <plugin>",
                "-            <groupId>org.apache.maven.plugins</groupId>",
                "-            <artifactId>maven-compiler-plugin</artifactId>",
                "-            <inherited>true</inherited>",
                "-            <executions>",
                "-              <execution>",
                "-                <id>build-for-wadl</id>",
                "-                <phase>pre-site</phase>                ",
                "-                <goals>",
                "-                  <goal>compile</goal>",
                "-                </goals>",
                "-              </execution>",
                "-            </executions>",
                "-          </plugin>",
                "-                  ",
                "           <plugin>",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index b3bff5d934..66e864f7ed 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -187,3 +187,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "      * The value of each element in the map is the {@link Attribute} instance with that name.",
                "-     * <br/>",
                "+     *",
                "      * Different from the original because:",
                "diff --git a/pom.xml b/pom.xml",
                "index ee2e6387e0..2c2f3a6e08 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -2273,6 +2273,6 @@ under the License.",
                "             <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.9/</link>",
                "-            <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.9/</link>",
                "+            <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.9.pr1/</link>",
                "             <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.9/</link>",
                "             <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.17.7/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.17.6/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.17.7/</link>",
                "             <link>https://ci.apache.org/projects/wicket/apidocs/7.x/</link>",
                "@@ -2286,4 +2286,3 @@ under the License.",
                "             <link>http://www.flowable.org/docs/javadocs/</link>",
                "-            <link>https://build.shibboleth.net/nexus/service/local/repositories/releases/archive/org/opensaml/opensaml-saml-api/3.3.0/opensaml-saml-api-3.3.0-javadoc.jar/!/index.html</link>",
                "-            <link>https://build.shibboleth.net/nexus/service/local/repositories/releases/archive/org/opensaml/opensaml-core/3.3.0/opensaml-core-3.3.0-javadoc.jar/!/index.html</link>",
                "+            <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "             <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.5</link>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java",
                "common/rest-api/pom.xml",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f1b3fcfe6019135a68fd053eec6faae36948324b"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7eb8c1a0a89ef10ec68c85d7ce535bf1f3aff318",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512557206,
            "hunks": 2,
            "message": "Aligning custom SpringBeanJobFactory with latest Spring",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AutowiringSpringBeanJobFactory.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AutowiringSpringBeanJobFactory.java",
                "new file mode 100644",
                "index 0000000000..109c9c2759",
                "--- /dev/null",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AutowiringSpringBeanJobFactory.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.java.job;",
                "+",
                "+import org.quartz.SchedulerContext;",
                "+import org.quartz.spi.TriggerFiredBundle;",
                "+import org.springframework.beans.BeanWrapper;",
                "+import org.springframework.beans.MutablePropertyValues;",
                "+import org.springframework.beans.PropertyAccessorFactory;",
                "+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;",
                "+import org.springframework.context.ApplicationContext;",
                "+import org.springframework.context.ApplicationContextAware;",
                "+import org.springframework.scheduling.quartz.SpringBeanJobFactory;",
                "+",
                "+/**",
                "+ * An implementation of SpringBeanJobFactory that retrieves the bean from the Spring context so that autowiring and",
                "+ * transactions work.",
                "+ */",
                "+public class AutowiringSpringBeanJobFactory extends SpringBeanJobFactory implements ApplicationContextAware {",
                "+",
                "+    private transient AutowireCapableBeanFactory beanFactory;",
                "+",
                "+    private String[] ignoredUnknownProperties;",
                "+",
                "+    private SchedulerContext schedulerContext;",
                "+",
                "+    @Override",
                "+    public void setApplicationContext(final ApplicationContext context) {",
                "+        beanFactory = context.getAutowireCapableBeanFactory();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setIgnoredUnknownProperties(final String... ignoredUnknownProperties) {",
                "+        String[] defensiveCopy = ignoredUnknownProperties.clone();",
                "+        super.setIgnoredUnknownProperties(defensiveCopy);",
                "+        this.ignoredUnknownProperties = defensiveCopy;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchedulerContext(final SchedulerContext schedulerContext) {",
                "+        super.setSchedulerContext(schedulerContext);",
                "+        this.schedulerContext = schedulerContext;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception {",
                "+        Object job = beanFactory.getBean(bundle.getJobDetail().getKey().getName());",
                "+        if (isEligibleForPropertyPopulation(job)) {",
                "+            BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);",
                "+            MutablePropertyValues pvs = new MutablePropertyValues();",
                "+            if (this.schedulerContext != null) {",
                "+                pvs.addPropertyValues(this.schedulerContext);",
                "+            }",
                "+            pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());",
                "+            pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());",
                "+            if (this.ignoredUnknownProperties != null) {",
                "+                for (String propName : this.ignoredUnknownProperties) {",
                "+                    if (pvs.contains(propName) && !bw.isWritableProperty(propName)) {",
                "+                        pvs.removePropertyValue(propName);",
                "+                    }",
                "+                }",
                "+                bw.setPropertyValues(pvs);",
                "+            } else {",
                "+                bw.setPropertyValues(pvs, true);",
                "+            }",
                "+        }",
                "+        return job;",
                "+    }",
                "+}",
                "diff --git a/core/provisioning-java/src/main/resources/provisioningContext.xml b/core/provisioning-java/src/main/resources/provisioningContext.xml",
                "index 5b7871a675..c049c6f72b 100644",
                "--- a/core/provisioning-java/src/main/resources/provisioningContext.xml",
                "+++ b/core/provisioning-java/src/main/resources/provisioningContext.xml",
                "@@ -76,3 +76,3 @@ under the License.",
                "     <property name=\"jobFactory\">",
                "-      <bean class=\"org.apache.syncope.core.provisioning.java.job.SpringBeanJobFactory\"/>",
                "+      <bean class=\"org.apache.syncope.core.provisioning.java.job.AutowiringSpringBeanJobFactory\"/>",
                "     </property>"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AutowiringSpringBeanJobFactory.java",
                "core/provisioning-java/src/main/resources/provisioningContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "66b914d26f50018a908ca3619714c3c827b35435"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f08a17b1b8b619390556b229f293ee53d0d85527",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507031313,
            "hunks": 8,
            "message": "[SYNCOPE-956] Updating docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/concepts.adoc b/src/main/asciidoc/reference-guide/concepts/concepts.adoc",
                "index 8aff5b73e8..b5ac17de0b 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/concepts.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/concepts.adoc",
                "@@ -48,2 +48,4 @@ include::domains.adoc[]",
                "+include::implementations.adoc[]",
                "+",
                " include::extensions.adoc[]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/implementations.adoc b/src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "new file mode 100644",
                "index 0000000000..7737359cc9",
                "--- /dev/null",
                "+++ b/src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "@@ -0,0 +1,28 @@",
                "+//",
                "+// Licensed to the Apache Software Foundation (ASF) under one",
                "+// or more contributor license agreements.  See the NOTICE file",
                "+// distributed with this work for additional information",
                "+// regarding copyright ownership.  The ASF licenses this file",
                "+// to you under the Apache License, Version 2.0 (the",
                "+// \"License\"); you may not use this file except in compliance",
                "+// with the License.  You may obtain a copy of the License at",
                "+//",
                "+//   http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing,",
                "+// software distributed under the License is distributed on an",
                "+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+// KIND, either express or implied.  See the License for the",
                "+// specific language governing permissions and limitations",
                "+// under the License.",
                "+//",
                "+=== Implementations",
                "+",
                "+Starting with Apache Syncope 2.1, it is possible to provide implementations suitable for <<customization,customization>>",
                "+as:",
                "+",
                "+. Java classes",
                "+. http://www.groovy-lang.org/[Groovy^] classes",
                "+",
                "+While the former shows some advantages about execution performance, the latter is extremely useful as it allows for",
                "+runtime updates, freeing from the hassle to redeploy when something needs to be changed.",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/policies.adoc b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "index 694bfa4042..e842834ff5 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "@@ -258,3 +258,3 @@ according to the available <<mapping,mapping>>.",
                " ====",
                "-Custom pull correlation rules can be provided by implementing the",
                "+Custom pull correlation rules can be provided by <<implementations,implementing>> the",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "index 9c066f13de..afba13febf 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "@@ -67,3 +67,3 @@ interface can be provided, in case the required behavior does not fit into the p",
                " The propagation process can be decorated with custom logic to be invoked around task execution, by associating",
                "-external resources to one or more implementations of the",
                "+external resources to one or more <<implementations,implementations>> of the",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "index 8f5f9c72fb..2a7813ea6e 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "@@ -91,3 +91,3 @@ further modification in Apache Syncope to such Users will be <<propagation,propa",
                " The pull process can be decorated with custom logic to be invoked around task execution, by associating",
                "-pull tasks to one or more implementations of the",
                "+pull tasks to one or more <<implementations,implementations>> of the",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/push.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/push.adoc",
                "index 30f3fd425e..03d3705ec1 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/push.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/push.adoc",
                "@@ -56,3 +56,3 @@ by default, unmatching entities are pushed to Identity Stores, and matching enti",
                " The push process can be decorated with custom logic to be invoked around task execution, by associating",
                "-push tasks to one or more implementations of the",
                "+push tasks to one or more <<implementations,implementations>> of the",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/realms.adoc b/src/main/asciidoc/reference-guide/concepts/realms.adoc",
                "index 3742dcfe38..b79d075fe3 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/realms.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/realms.adoc",
                "@@ -76,3 +76,3 @@ with LDAP and Active Directory.",
                " When Users, Groups or Any Objects get created, updated or deleted in a realm, custom logic can be invoked by",
                "-associating the given realm with one or more implementations of the",
                "+associating the given realm with one or more <<implementations,implementations>> of the",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index b7c9b575a7..be9ed94b0b 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -179,4 +179,4 @@ at runtime.",
                "-Besides replacing existing classes as explained <<override-behavior,above>>, new implementations can be provided under",
                "-`core/src/main/java` for the following components:",
                "+Besides replacing existing classes as explained <<override-behavior,above>>, new <<implementations,implementations>> can",
                "+be provided - under `core/src/main/java` if Java - for the following components:"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/concepts.adoc",
                "src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "src/main/asciidoc/reference-guide/concepts/provisioning/push.adoc",
                "src/main/asciidoc/reference-guide/concepts/realms.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "889f71c9b8e23101b0815d6ef708baa63b888ecb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517580722,
            "hunks": 1,
            "message": "Upgrading ConnId REST bundle",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c4da3eaa1f..698956a327 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -360,3 +360,3 @@ under the License.",
                "     <connid.soap.version>1.4.2-SNAPSHOT</connid.soap.version>",
                "-    <connid.rest.version>1.0.1</connid.rest.version>",
                "+    <connid.rest.version>1.0.2</connid.rest.version>",
                "     <connid.database.version>2.2.5</connid.database.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "62670fb24bbd05437b691888df292e4d6293f1d9"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6c1798b872ad42fa9800c7addc8a7427a0ad63f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511001944,
            "hunks": 1,
            "message": "Clarifying how password propagation works in practice",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "index 7c62b8def4..062c41ec1c 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "@@ -122 +122,18 @@ endif::[]",
                " |===",
                "+",
                "+[[propagation-password]]",
                "+[TIP]",
                "+.Propagate password values",
                "+====",
                "+Password values are kept in the internal storage according to the `password.cipher.algorithm` <<configuration-parameters, configuration parameter>>, whose value is `SHA1` by default.",
                "+`SHA1` is a hash algorithm: this means that, once stored, the cleartext value cannot be reverted any more.",
                "+",
                "+During propagation, Syncope fetches all data of the given User, then prepares the attributes to propagate, according to the provided mapping; password has a special treatment:",
                "+",
                "+* if cleartext value is available (this cannot happen during <<provisioning-push>>), it is sent to the External Resource",
                "+* if `password.cipher.algorithm` is `AES` (the only supported reversible algorithm), then the ciphered password value is made cleartext again, and sent to the External Resource",
                "+* if the <<external-resource-details,generate random password flag>> is set, a random password value is generated according to the defined password policies, and sent to the External Resource",
                "+* otherwise, a `null` value is sent to the External Resource",
                "+",
                "+Password values are always sent to External Resources wrapped as ConnId http://connid.tirasa.net/apidocs/1.4/org/identityconnectors/common/security/GuardedString.html[GuardedString^] objects.",
                "+===="
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5160637693339b554499e383921845f158b316fe"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "484ca14cc5d949c33655cffa06f0eaecacd152c7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508838514,
            "hunks": 1,
            "message": "Upgrading ConnId GoogleApps bundle to 1.4.1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 92bc222d32..51cfd7f9b9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -365,3 +365,3 @@ under the License.",
                "     <connid.ad.version>1.3.4</connid.ad.version>",
                "-    <connid.googleapps.version>1.4.1-SNAPSHOT</connid.googleapps.version>",
                "+    <connid.googleapps.version>1.4.1</connid.googleapps.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "70195bbf9283ca26c6fa9719941d3459543c3c50"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8bdfc43b0e1bf00db3b327ec8e7d3c319f2e09a8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517301622,
            "hunks": 94,
            "message": "Renaming 'password reset' to 'password management', adding 'request password reset' and translating the italian floating menu entries",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "index b9412808e6..faf7255478 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "@@ -262,4 +262,4 @@ public class BulkContent<T extends Serializable, S> extends MultilevelPanel.Seco",
                "                         LOG.error(\"Bulk action failure\", e);",
                "-                        SyncopeConsoleSession.get().error(\"Operation \" + actionToBeAddresed.getActionId()",
                "-                                + \" not supported\");",
                "+                        SyncopeConsoleSession.get().error(",
                "+                                \"Operation \" + actionToBeAddresed.getActionId() + \" not supported\");",
                "                     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "index cae0df9b80..2455471b57 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "@@ -46,2 +46,3 @@ import org.apache.syncope.common.lib.types.AnyTypeKind;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "+import org.apache.syncope.common.rest.api.service.UserSelfService;",
                " import org.apache.wicket.PageReference;",
                "@@ -175,2 +176,3 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                             model.getObject().getKey());",
                "+",
                "                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "@@ -178,5 +180,5 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                 } catch (Exception e) {",
                "-                    LOG.error(\"While deleting object {}\", model.getObject().getKey(), e);",
                "-                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().",
                "-                            getName() : e.getMessage());",
                "+                    LOG.error(\"While actioning object {}\", model.getObject().getKey(), e);",
                "+                    SyncopeConsoleSession.get().error(",
                "+                            StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());",
                "                 }",
                "@@ -207,5 +209,30 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                 }",
                "-            }, ActionType.PASSWORD_RESET,",
                "+            }, ActionType.PASSWORD_MANAGEMENT,",
                "                     new StringBuilder().append(StandardEntitlement.USER_UPDATE).toString()).setRealm(realm);",
                "+            if (SyncopeConsoleSession.get().getPlatformInfo().isPwdResetAllowed()",
                "+                    && !SyncopeConsoleSession.get().getPlatformInfo().isPwdResetRequiringSecurityQuestions()) {",
                "+",
                "+                panel.add(new ActionLink<UserTO>() {",
                "+",
                "+                    private static final long serialVersionUID = -7978723352517770644L;",
                "+",
                "+                    @Override",
                "+                    public void onClick(final AjaxRequestTarget target, final UserTO ignore) {",
                "+                        try {",
                "+                            SyncopeConsoleSession.get().getAnonymousClient().getService(UserSelfService.class).",
                "+                                    requestPasswordReset(model.getObject().getUsername(), null);",
                "+",
                "+                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+                            target.add(container);",
                "+                        } catch (Exception e) {",
                "+                            LOG.error(\"While actioning object {}\", model.getObject().getKey(), e);",
                "+                            SyncopeConsoleSession.get().error(",
                "+                                    StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());",
                "+                        }",
                "+                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+                    }",
                "+                }, ActionType.REQUEST_PASSWORD_RESET, StandardEntitlement.USER_UPDATE).setRealm(realm);",
                "+            }",
                "+",
                "             panel.add(new ActionLink<UserTO>() {",
                "@@ -295,2 +322,3 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                     restClient.delete(model.getObject().getETagValue(), model.getObject().getKey());",
                "+",
                "                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "@@ -299,4 +327,4 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                     LOG.error(\"While deleting object {}\", model.getObject().getKey(), e);",
                "-                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().",
                "-                            getName() : e.getMessage());",
                "+                    SyncopeConsoleSession.get().error(",
                "+                            StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());",
                "                 }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java",
                "index 37b0ba0b4b..5b67fa16fc 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java",
                "@@ -66,3 +66,4 @@ public abstract class ActionLink<T extends Serializable> implements Serializable",
                "         EXECUTE(\"execute\"),",
                "-        PASSWORD_RESET(\"update\"),",
                "+        PASSWORD_MANAGEMENT(\"update\"),",
                "+        REQUEST_PASSWORD_RESET(\"update\"),",
                "         DRYRUN(\"execute\"),",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.properties",
                "index 69214cd085..a0fe77320a 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=mapping icon",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=set must change password",
                "+mustchangepassword.title=toggle must change password",
                " mustchangepassword.alt=must change password icon",
                "@@ -128,5 +128,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_it.properties",
                "index c2e6b1f482..7e8d0c29ea 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_it.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=mapping icon",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=set must change password",
                "+mustchangepassword.title=toggle must change password",
                " mustchangepassword.alt=must change password icon",
                "@@ -128,5 +128,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ja.properties",
                "index 1c2e0449b6..2ef2c19bac 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ja.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=\\u30de\\u30c3\\u30d4\\u30f3\\u30b0",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u306e\\u5909\\u66f4\\u304c\\u5fc5\\u8981",
                "+mustchangepassword.title=toggle must change password",
                " mustchangepassword.alt=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u306e\\u5909\\u66f4\\u304c\\u5fc5\\u8981",
                "@@ -128,5 +128,9 @@ execute.alt=\\u5b9f\\u884c",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30ea\\u30bb\\u30c3\\u30c8",
                "-password_reset.alt=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30ea\\u30bb\\u30c3\\u30c8",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_pt_BR.properties",
                "index c2e882d3f4..07acbc3b4c 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_pt_BR.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_pt_BR.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=mapping icon",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=set must change password",
                "+mustchangepassword.title=toggle must change password",
                " mustchangepassword.alt=must change password icon",
                "@@ -128,5 +128,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ru.properties",
                "index 80fb014d01..d363d2515d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ru.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=mapping icon",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=set must change password",
                "+mustchangepassword.title=forza cambio password",
                " mustchangepassword.alt=must change password icon",
                "@@ -25,3 +25,3 @@ mustchangepassword.alt=must change password icon",
                " set_latest_sync_token.class=fa fa-hourglass-start",
                "-set_latest_sync_token.title=set last sync token",
                "+set_latest_sync_token.title=imposta ultimo sync token",
                " set_latest_sync_token.alt=set last sync token icon",
                "@@ -29,3 +29,3 @@ set_latest_sync_token.alt=set last sync token icon",
                " remove_sync_token.class=fa fa-hourglass-o",
                "-remove_sync_token.title=remove sync token",
                "+remove_sync_token.title=rimouvi sync token",
                " remove_sync_token.alt=remove sync token icon",
                "@@ -33,3 +33,3 @@ remove_sync_token.alt=remove sync token icon",
                " clone.class=fa fa-clone",
                "-clone.title=clone",
                "+clone.title=clona",
                " clone.alt=clone icon",
                "@@ -37,3 +37,3 @@ clone.alt=clone icon",
                " create.class=glyphicon glyphicon-plus",
                "-create.title=create",
                "+create.title=crea",
                " create.alt=create icon",
                "@@ -41,3 +41,3 @@ create.alt=create icon",
                " template.class=fa fa-list-alt",
                "-template.title=template",
                "+template.title=modello",
                " template.alt=template icon",
                "@@ -45,3 +45,3 @@ template.alt=template icon",
                " edit.class=glyphicon glyphicon-pencil",
                "-edit.title=edit",
                "+edit.title=modifica",
                " edit.alt=edit icon",
                "@@ -49,3 +49,3 @@ edit.alt=edit icon",
                " manage_approval.class=fa fa-pencil-square-o",
                "-manage_approval.title=manage",
                "+manage_approval.title=gestisci",
                " manage_approval.alt=manage approval icon",
                "@@ -53,3 +53,3 @@ manage_approval.alt=manage approval icon",
                " edit_approval.class=glyphicon glyphicon-pencil",
                "-edit_approval.title=edit",
                "+edit_approval.title=modifica",
                " edit_approval.alt=edit approval icon",
                "@@ -57,3 +57,3 @@ edit_approval.alt=edit approval icon",
                " type_extensions.class=fa fa-expand ",
                "-type_extensions.title=extensions",
                "+type_extensions.title=estensioni",
                " type_extensions.alt=extensions icon",
                "@@ -81,3 +81,3 @@ text.alt=text icon",
                " compose.class=fa fa-puzzle-piece",
                "-compose.title=compose",
                "+compose.title=componi",
                " compose.alt=compose icon",
                "@@ -93,3 +93,3 @@ reset.alt=reset icon",
                " enable.class=fa fa-toggle-on",
                "-enable.title=enable",
                "+enable.title=abilita",
                " enable.alt=enable icon",
                "@@ -97,3 +97,3 @@ enable.alt=enable icon",
                " not_found.class=fa fa-eye-slash",
                "-not_found.title=not found",
                "+not_found.title=non trovato",
                " not_found.alt=not found icon",
                "@@ -101,3 +101,3 @@ not_found.alt=not found icon",
                " view.class=fa fa-eye",
                "-view.title=view",
                "+view.title=vedi",
                " view.alt=view icon",
                "@@ -113,3 +113,3 @@ view_details.alt=view details icon",
                " members.class=fa fa-users",
                "-members.title=members",
                "+members.title=membri",
                " members.alt=members icon",
                "@@ -117,3 +117,3 @@ members.alt=members icon",
                " search.class=glyphicon glyphicon-search",
                "-search.title=search",
                "+search.title=cerca",
                " search.alt=search icon",
                "@@ -121,3 +121,3 @@ search.alt=search icon",
                " delete.class=glyphicon glyphicon-minus",
                "-delete.title=delete",
                "+delete.title=elimina",
                " delete.alt=delete icon",
                "@@ -125,8 +125,12 @@ delete.alt=delete icon",
                " execute.class=fa fa-gear",
                "-execute.title=execute",
                "+execute.title=esegui",
                " execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=gestione paswsord",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=richiedi password reset",
                "+request_password_reset.alt=password reset icon",
                "@@ -141,3 +145,3 @@ claim.alt=claim icon",
                " select.class=glyphicon glyphicon-ok",
                "-select.title=select",
                "+select.title=seleziona",
                " select.alt=select icon",
                "@@ -145,3 +149,3 @@ select.alt=select icon",
                " close.class=fa fa-sign-out",
                "-close.title=close",
                "+close.title=chiudi",
                " close.alt=close icon",
                "@@ -149,3 +153,3 @@ close.alt=close icon",
                " export.class=fa fa-floppy-o",
                "-export.title=export",
                "+export.title=esporta",
                " export.alt=export icon",
                "@@ -157,3 +161,3 @@ export_csv.alt=export as csv icon",
                " export_html.class=fa fa-file-code-o",
                "-export_html.title=export as html",
                "+export_html.title=esporta come html",
                " export_html.alt=export as html icon",
                "@@ -161,3 +165,3 @@ export_html.alt=export as html icon",
                " export_pdf.class=fa fa-file-pdf-o",
                "-export_pdf.title=export as pdf",
                "+export_pdf.title=esporta come pdf",
                " export_pdf.alt=export as pdf icon",
                "@@ -165,3 +169,3 @@ export_pdf.alt=export as pdf icon",
                " export_rtf.class=fa fa-file-word-o",
                "-export_rtf.title=export as rtf",
                "+export_rtf.title=esporta come rtf",
                " export_rtf.alt=export as rtf icon",
                "@@ -169,3 +173,3 @@ export_rtf.alt=export as rtf icon",
                " export_xml.class=fa fa-file-excel-o",
                "-export_xml.title=export as xml",
                "+export_xml.title=esporta come xml",
                " export_xml.alt=export as xml icon",
                "@@ -173,3 +177,3 @@ export_xml.alt=export as xml icon",
                " restore.class=fa fa-arrow-circle-down",
                "-restore.title=restore",
                "+restore.title=ripristina",
                " restore.alt=restore icon",
                "@@ -177,3 +181,3 @@ restore.alt=restore icon",
                " suspend.class=glyphicon glyphicon-ban-circle",
                "-suspend.title=suspend",
                "+suspend.title=sospendi",
                " suspend.alt=suspend icon",
                "@@ -181,3 +185,3 @@ suspend.alt=suspend icon",
                " reactivate.class=glyphicon glyphicon-ok-sign",
                "-reactivate.title=reactivate",
                "+reactivate.title=riattiva",
                " reactivate.alt=reactivate icon",
                "@@ -185,3 +189,3 @@ reactivate.alt=reactivate icon",
                " reload.class=fa fa-repeat",
                "-reload.title=reload",
                "+reload.title=ricarica",
                " reload.alt=reload icon",
                "@@ -189,3 +193,3 @@ reload.alt=reload icon",
                " change_view.class=fa fa-list\"",
                "-change_view.title=change view",
                "+change_view.title=cambia vista",
                " change_view.alt=change view icon",
                "@@ -193,3 +197,3 @@ change_view.alt=change view icon",
                " unlink.class=fa fa-unlink",
                "-unlink.title=unlink",
                "+unlink.title=scollega",
                " unlink.alt=unlink icon",
                "@@ -197,3 +201,3 @@ unlink.alt=unlink icon",
                " link.class=fa fa-link",
                "-link.title=link",
                "+link.title=collega",
                " link.alt=link icon",
                "@@ -201,3 +205,3 @@ link.alt=link icon",
                " unassign.class=glyphicon glyphicon-resize-full",
                "-unassign.title=unassign",
                "+unassign.title=deassegna",
                " unassign.alt=unassign icon",
                "@@ -205,3 +209,3 @@ unassign.alt=unassign icon",
                " assign.class=glyphicon glyphicon-resize-small",
                "-assign.title=assign",
                "+assign.title=assegna",
                " assign.alt=assign icon",
                "@@ -225,3 +229,3 @@ provision_members.alt=provision members icon",
                " manage_resources.class=fa fa-sitemap",
                "-manage_resources.title=manage resources",
                "+manage_resources.title=gestisci risorse",
                " manage_resources.alt=manage resources icon",
                "@@ -229,3 +233,3 @@ manage_resources.alt=manage resources icon",
                " manage_users.class=fa fa-users",
                "-manage_users.title=manage users",
                "+manage_users.title=gestisci utenti",
                " manage_users.alt=manage users icon",
                "@@ -233,3 +237,3 @@ manage_users.alt=manage users icon",
                " manage_groups.class=fa fa-users",
                "-manage_groups.title=manage groups",
                "+manage_groups.title=gestisci grupip",
                " manage_groups.alt=manage groups icon",
                "@@ -237,3 +241,3 @@ manage_groups.alt=manage groups icon",
                " propagation_tasks.class=fa fa-arrow-right",
                "-propagation_tasks.title=propagation tasks",
                "+propagation_tasks.title=task di propagazione",
                " propagation_tasks.alt=propagation tasks icon",
                "@@ -245,3 +249,3 @@ notification_tasks.alt=notification tasks icon",
                " zoom_in.class=fa fa-search-plus",
                "-zoom_in.title=zoom-in",
                "+zoom_in.title=ingrandisci",
                " zoom_in.alt=zoom-in icon",
                "@@ -249,3 +253,3 @@ zoom_in.alt=zoom-in icon",
                " zoom_out.class=fa fa-search-minus",
                "-zoom_out.title=zoom-out",
                "+zoom_out.title=rimpicciolisci",
                " zoom_out.alt=zoom-out icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.properties",
                "index bb1697ee8f..ad327c219d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.properties",
                "@@ -104,5 +104,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties",
                "index 70cb4fe131..5cf18df02d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties",
                "@@ -21,3 +21,3 @@ mapping.alt=mapping icon",
                " mustchangepassword.class=fa fa-lock",
                "-mustchangepassword.title=toggle must change password",
                "+mustchangepassword.title=forza cambio password",
                " mustchangepassword.alt=toggle change password icon",
                "@@ -25,3 +25,3 @@ mustchangepassword.alt=toggle change password icon",
                " set_latest_sync_token.class=fa fa-hourglass-start",
                "-set_latest_sync_token.title=set last sync token",
                "+set_latest_sync_token.title=imposta ultimo sync token",
                " set_latest_sync_token.alt=set last sync token icon",
                "@@ -29,3 +29,3 @@ set_latest_sync_token.alt=set last sync token icon",
                " remove_sync_token.class=fa fa-hourglass-o",
                "-remove_sync_token.title=remove sync token",
                "+remove_sync_token.title=rimuovi sync token",
                " remove_sync_token.alt=remove sync token icon",
                "@@ -33,3 +33,3 @@ remove_sync_token.alt=remove sync token icon",
                " clone.class=fa fa-clone",
                "-clone.title=clone",
                "+clone.title=clona",
                " clone.alt=clone icon",
                "@@ -37,3 +37,3 @@ clone.alt=clone icon",
                " create.class=glyphicon glyphicon-plus",
                "-create.title=create",
                "+create.title=crea",
                " create.alt=create icon",
                "@@ -41,3 +41,3 @@ create.alt=create icon",
                " template.class=fa fa-list-alt",
                "-template.title=template",
                "+template.title=modello",
                " template.alt=template icon",
                "@@ -45,3 +45,3 @@ template.alt=template icon",
                " edit.class=glyphicon glyphicon-pencil",
                "-edit.title=edit",
                "+edit.title=modifica",
                " edit.alt=edit icon",
                "@@ -49,3 +49,3 @@ edit.alt=edit icon",
                " type_extensions.class=fa fa-expand",
                "-type_extensions.title=extensions",
                "+type_extensions.title=estensioni",
                " type_extensions.alt=extensions icon",
                "@@ -65,3 +65,3 @@ text.alt=text icon",
                " compose.class=fa fa-puzzle-piece",
                "-compose.title=compose",
                "+compose.title=componi",
                " compose.alt=compose icon",
                "@@ -77,3 +77,3 @@ reset.alt=reset icon",
                " enable.class=fa fa-toggle-on",
                "-enable.title=enable",
                "+enable.title=abilita",
                " enable.alt=enable icon",
                "@@ -81,3 +81,3 @@ enable.alt=enable icon",
                " not_found.class=fa fa-eye-slash",
                "-not_found.title=not found",
                "+not_found.title=non trovato",
                " not_found.alt=not found icon",
                "@@ -85,3 +85,3 @@ not_found.alt=not found icon",
                " view.class=fa fa-eye",
                "-view.title=view",
                "+view.title=vedi",
                " view.alt=view icon",
                "@@ -89,3 +89,3 @@ view.alt=view icon",
                " members.class=fa fa-users",
                "-members.title=members",
                "+members.title=membri",
                " members.alt=members icon",
                "@@ -93,3 +93,3 @@ members.alt=members icon",
                " search.class=glyphicon glyphicon-search",
                "-search.title=search",
                "+search.title=ricerca",
                " search.alt=search icon",
                "@@ -97,3 +97,3 @@ search.alt=search icon",
                " delete.class=glyphicon glyphicon-minus",
                "-delete.title=delete",
                "+delete.title=elimina",
                " delete.alt=delete icon",
                "@@ -101,8 +101,12 @@ delete.alt=delete icon",
                " execute.class=fa fa-gear",
                "-execute.title=execute",
                "+execute.title=esegui",
                " execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=gestione password",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=richiedi password reset",
                "+request_password_reset.alt=password reset icon",
                "@@ -149,3 +153,3 @@ export_xml.alt=export as xml icon",
                " suspend.class=glyphicon glyphicon-ban-circle",
                "-suspend.title=suspend",
                "+suspend.title=sospendi",
                " suspend.alt=suspend icon",
                "@@ -153,3 +157,3 @@ suspend.alt=suspend icon",
                " reactivate.class=glyphicon glyphicon-ok-sign",
                "-reactivate.title=reactivate",
                "+reactivate.title=riattiva",
                " reactivate.alt=reactivate icon",
                "@@ -157,7 +161,7 @@ reactivate.alt=reactivate icon",
                " reload.class=fa fa-repeat",
                "-reload.title=reload",
                "+reload.title=ricarica",
                " reload.alt=reload icon",
                "-change_view.class=fa fa-list\"",
                "-change_view.title=change view",
                "+change_view.class=fa fa-list",
                "+change_view.title=cambia vista",
                " change_view.alt=change view icon",
                "@@ -165,3 +169,3 @@ change_view.alt=change view icon",
                " unlink.class=fa fa-unlink",
                "-unlink.title=unlink",
                "+unlink.title=scollega",
                " unlink.alt=unlink icon",
                "@@ -173,3 +177,3 @@ link.alt=link icon",
                " unassign.class=glyphicon glyphicon-resize-full",
                "-unassign.title=unassign",
                "+unassign.title=deassegna",
                " unassign.alt=unassign icon",
                "@@ -177,3 +181,3 @@ unassign.alt=unassign icon",
                " assign.class=glyphicon glyphicon-resize-small",
                "-assign.title=assign",
                "+assign.title=assegna",
                " assign.alt=assign icon",
                "@@ -197,3 +201,3 @@ provision_members.alt=provision members icon",
                " manage_resources.class=fa fa-sitemap",
                "-manage_resources.title=manage resources",
                "+manage_resources.title=gestisci risorse",
                " manage_resources.alt=manage resources icon",
                "@@ -201,3 +205,3 @@ manage_resources.alt=manage resources icon",
                " manage_users.class=fa fa-users",
                "-manage_users.title=manage users",
                "+manage_users.title=gestisci utenti",
                " manage_users.alt=manage users icon",
                "@@ -205,3 +209,3 @@ manage_users.alt=manage users icon",
                " manage_groups.class=fa fa-users",
                "-manage_groups.title=manage groups",
                "+manage_groups.title=gestisci gruppi",
                " manage_groups.alt=manage groups icon",
                "@@ -209,3 +213,3 @@ manage_groups.alt=manage groups icon",
                " propagation_tasks.class=fa fa-arrow-right",
                "-propagation_tasks.title=propagation tasks",
                "+propagation_tasks.title=task di propagazione",
                " propagation_tasks.alt=propagation tasks icon",
                "@@ -213,3 +217,3 @@ propagation_tasks.alt=propagation tasks icon",
                " notification_tasks.class=fa fa-envelope-o",
                "-notification_tasks.title=notification tasks",
                "+notification_tasks.title=task di notifica",
                " notification_tasks.alt=notification tasks icon",
                "@@ -217,3 +221,3 @@ notification_tasks.alt=notification tasks icon",
                " zoom_in.class=fa fa-search-plus",
                "-zoom_in.title=zoom-in",
                "+zoom_in.title=ingrandisci",
                " zoom_in.alt=zoom-in icon",
                "@@ -221,3 +225,3 @@ zoom_in.alt=zoom-in icon",
                " zoom_out.class=fa fa-search-minus",
                "-zoom_out.title=zoom-out",
                "+zoom_out.title=rimpicciolisci",
                " zoom_out.alt=zoom-out icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ja.properties",
                "index 4b709daafb..db63cdb8c9 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ja.properties",
                "@@ -104,5 +104,9 @@ execute.alt=\\u5b9f\\u884c",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30ea\\u30bb\\u30c3\\u30c8",
                "-password_reset.alt=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30ea\\u30bb\\u30c3\\u30c8",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_pt_BR.properties",
                "index 70cb4fe131..b8afd751ee 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_pt_BR.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_pt_BR.properties",
                "@@ -104,5 +104,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ru.properties",
                "index 70cb4fe131..ad327c219d 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ru.properties",
                "@@ -104,5 +104,9 @@ execute.alt=execute icon",
                "-password_reset.class=fa fa-shield",
                "-password_reset.title=password reset",
                "-password_reset.alt=password reset icon",
                "+password_management.class=fa fa-shield",
                "+password_management.title=password management",
                "+password_management.alt=password management icon",
                "+",
                "+request_password_reset.class=fa fa-user-secret",
                "+request_password_reset.title=request password reset",
                "+request_password_reset.alt=password reset icon",
                "@@ -160,3 +164,3 @@ reload.alt=reload icon",
                "-change_view.class=fa fa-list\"",
                "+change_view.class=fa fa-list",
                " change_view.title=change view"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel_ru.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_ru.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e4d83860bdf845324ce1387dfe96daec0c7cbcfd"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "105631375db60c2e4956d7d6a16dbcb4884cfc4c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511608169,
            "hunks": 2,
            "message": "fix for build #2665",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "index afabac04f2..9f0260e21d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "@@ -24,4 +24,4 @@ import org.apache.syncope.client.console.commons.Constants;",
                " import org.apache.syncope.client.console.commons.status.StatusBean;",
                "-import org.apache.syncope.client.console.policies.PolicyRuleDirectoryPanel;",
                "-import org.apache.syncope.client.console.reports.ReportletDirectoryPanel;",
                "+import org.apache.syncope.client.console.policies.PolicyRuleWrapper;",
                "+import org.apache.syncope.client.console.reports.ReportletWrapper;",
                " import org.apache.syncope.client.console.topology.TopologyNode;",
                "@@ -212,8 +212,8 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "             key = ((StatusBean) modelObject).getKey();",
                "-        } else if (modelObject instanceof PolicyRuleDirectoryPanel.PolicyRuleWrapper) {",
                "-            key = ((PolicyRuleDirectoryPanel.PolicyRuleWrapper) modelObject).getName();",
                "-        } else if (modelObject instanceof PolicyRuleDirectoryPanel.PolicyRuleWrapper) {",
                "-            key = ((PolicyRuleDirectoryPanel.PolicyRuleWrapper) modelObject).getName();",
                "-        } else if (modelObject instanceof ReportletDirectoryPanel.ReportletWrapper) {",
                "-            key = ((ReportletDirectoryPanel.ReportletWrapper) modelObject).getName();",
                "+        } else if (modelObject instanceof PolicyRuleWrapper) {",
                "+            key = ((PolicyRuleWrapper) modelObject).getConf().getName();",
                "+        } else if (modelObject instanceof PolicyRuleWrapper) {",
                "+            key = ((PolicyRuleWrapper) modelObject).getConf().getName();",
                "+        } else if (modelObject instanceof ReportletWrapper) {",
                "+            key = ((ReportletWrapper) modelObject).getConf().getName();",
                "         } else if (modelObject instanceof JobTO) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2665": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2665",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ac6a83e9423bde8bdf3918d526fe75acd8b329e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509026488,
            "hunks": 21,
            "message": "Allow to check supported object classes for a non-stored ConnInstance",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "index 5d80ef75db..d5b2f9422f 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "@@ -23,2 +23,3 @@ import java.net.URI;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "@@ -35,2 +36,3 @@ import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                " import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "+import org.apache.syncope.common.lib.types.ConnConfProperty;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -209,9 +211,4 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {",
                "-        ConnInstance connInstance = connInstanceDAO.authFind(connInstanceTO.getKey());",
                "-        if (connInstance == null) {",
                "-            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");",
                "-        }",
                "-",
                "         Set<ObjectClassInfo> objectClassInfo = connFactory.createConnector(",
                "-                connFactory.buildConnInstanceOverride(connInstance, connInstanceTO.getConf(), null)).",
                "+                connFactory.buildConnInstanceOverride(connInstanceTO, Collections.<ConnConfProperty>emptySet(), null)).",
                "                 getObjectClassInfo();",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "index b4a0f13635..1901393cf7 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "@@ -62,2 +62,3 @@ import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                " import org.apache.syncope.core.provisioning.api.MappingManager;",
                "+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;",
                " import org.apache.syncope.core.provisioning.api.utils.RealmUtils;",
                "@@ -108,2 +109,5 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "+    @Autowired",
                "+    private ConnInstanceDataBinder connInstanceDataBinder;",
                "+",
                "     @Autowired",
                "@@ -411,3 +415,3 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "                 connFactory.buildConnInstanceOverride(",
                "-                        connInstance,",
                "+                        connInstanceDataBinder.getConnInstanceTO(connInstance),",
                "                         resourceTO.getConfOverride(),",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java",
                "index 0b0beb9e4d..62602b6325 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.provisioning.api;",
                " import java.util.Collection;",
                "+import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                " import org.apache.syncope.common.lib.types.ConnConfProperty;",
                "@@ -34,3 +35,3 @@ public interface ConnectorFactory {",
                "     /**",
                "-     * Builds connector instance override over base connector instance, configuration and capabilities override.",
                "+     * Builds connector instance override over base connector instance, configuration and capabilities.",
                "      *",
                "@@ -39,6 +40,6 @@ public interface ConnectorFactory {",
                "      * @param capabilitiesOverride capabilities override",
                "-     * @return connector instance override over base connector instance, configuration and capabilities override",
                "+     * @return connector instance override over base connector instance, configuration and capabilities",
                "      */",
                "     ConnInstance buildConnInstanceOverride(",
                "-            ConnInstance connInstance,",
                "+            ConnInstanceTO connInstance,",
                "             Collection<ConnConfProperty> confOverride,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "index fce154ec72..85e54151de 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "@@ -26,2 +26,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                " import org.apache.syncope.common.lib.types.ConnConfProperty;",
                "@@ -31,2 +32,3 @@ import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.RealmDAO;",
                " import org.apache.syncope.core.persistence.api.entity.ConnInstance;",
                "@@ -38,2 +40,3 @@ import org.apache.syncope.core.provisioning.api.ConnectorRegistry;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;",
                " import org.identityconnectors.common.l10n.CurrentLocale;",
                "@@ -54,2 +57,5 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "+    @Autowired",
                "+    private RealmDAO realmDAO;",
                "+",
                "     @Autowired",
                "@@ -57,2 +63,5 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "+    @Autowired",
                "+    private ConnInstanceDataBinder connInstanceDataBinder;",
                "+",
                "     private EntityFactory entityFactory;",
                "@@ -76,3 +85,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "     public ConnInstance buildConnInstanceOverride(",
                "-            final ConnInstance connInstance,",
                "+            final ConnInstanceTO connInstance,",
                "             final Collection<ConnConfProperty> confOverride,",
                "@@ -87,3 +96,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "         ConnInstance override = entityFactory.newEntity(ConnInstance.class);",
                "-        override.setAdminRealm(connInstance.getAdminRealm());",
                "+        override.setAdminRealm(realmDAO.findByFullPath(connInstance.getAdminRealm()));",
                "         override.setConnectorName(connInstance.getConnectorName());",
                "@@ -108,3 +117,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "-        // add overridden properties",
                "+        // add override properties",
                "         for (ConnConfProperty prop : confOverride) {",
                "@@ -116,3 +125,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "-        // add overridable properties not overridden",
                "+        // add override properties not substituted",
                "         conf.addAll(overridable.values());",
                "@@ -141,3 +150,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "         ConnInstance connInstance = buildConnInstanceOverride(",
                "-                resource.getConnector(),",
                "+                connInstanceDataBinder.getConnInstanceTO(resource.getConnector()),",
                "                 resource.getConfOverride(),"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "59ad56b3ee68d15bb92df1001d5f7e5466ec0695"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9649c49f048d42cc634476dcd858d06c6740ddc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516785939,
            "hunks": 3,
            "message": "Upgrading Spring, Swagger and Tomcat",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index a9e42f5b96..a72eb7fb18 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -371,3 +371,3 @@ under the License.",
                "-    <spring.version>5.0.2.RELEASE</spring.version>",
                "+    <spring.version>5.0.3.RELEASE</spring.version>",
                "     <spring-security.version>5.0.0.RELEASE</spring-security.version>",
                "@@ -417,4 +417,4 @@ under the License.",
                "-    <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>3.9.1</swagger-ui.version>",
                "+    <swagger-core.version>1.5.18</swagger-core.version>    ",
                "+    <swagger-ui.version>3.9.2</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>",
                "@@ -485,3 +485,3 @@ under the License.",
                "-    <tomcat.version>9.0.2</tomcat.version>",
                "+    <tomcat.version>9.0.4</tomcat.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bb73a73646d43957ba78d8e9bafc64f7c9f5edf9"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b978fbecc404f992ea03b6eedfe344d68bdef164",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509955713,
            "hunks": 1,
            "message": "More robust ConnObjectKey handling",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index 40ebcd1e4b..d640187103 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -193,14 +193,14 @@ public class MappingManagerImpl implements MappingManager {",
                "-        Attribute connObjectKeyExtAttr =",
                "-                AttributeUtil.find(MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), attributes);",
                "-        if (connObjectKeyExtAttr != null) {",
                "-            attributes.remove(connObjectKeyExtAttr);",
                "-            attributes.add(AttributeBuilder.build(",
                "-                    MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));",
                "-        }",
                "-        Name name = MappingUtils.evaluateNAME(any, provision, connObjectKey);",
                "-        attributes.add(name);",
                "-        if (connObjectKey != null && !connObjectKey.equals(name.getNameValue()) && connObjectKeyExtAttr == null) {",
                "-            attributes.add(AttributeBuilder.build(",
                "-                    MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));",
                "+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+        if (connObjectKeyItem != null) {",
                "+            Attribute connObjectKeyExtAttr = AttributeUtil.find(connObjectKeyItem.getExtAttrName(), attributes);",
                "+            if (connObjectKeyExtAttr != null) {",
                "+                attributes.remove(connObjectKeyExtAttr);",
                "+                attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));",
                "+            }",
                "+            Name name = MappingUtils.evaluateNAME(any, provision, connObjectKey);",
                "+            attributes.add(name);",
                "+            if (connObjectKey != null && !connObjectKey.equals(name.getNameValue()) && connObjectKeyExtAttr == null) {",
                "+                attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ad7bb3225531b0382f3625fc6d4ed197c38325ce"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e975c6c7eee250bf1a1fceecfa4ba6064a043ada",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515081037,
            "hunks": 3,
            "message": "Upgrading Angular Translate, BouncyCastle and JDeb",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5d4b8862bb..10f3f05168 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -447,3 +447,3 @@ under the License.",
                "     <angular-treasure-overlay-spinner.version>1.1.0</angular-treasure-overlay-spinner.version>",
                "-    <angular-translate.version>2.16.0</angular-translate.version>",
                "+    <angular-translate.version>2.17.0</angular-translate.version>",
                "@@ -1601,3 +1601,3 @@ under the License.",
                "         <artifactId>bcpkix-jdk15on</artifactId>",
                "-        <version>1.57</version>",
                "+        <version>1.59</version>",
                "         <scope>test</scope>",
                "@@ -1881,3 +1881,3 @@ under the License.",
                "           <artifactId>jdeb</artifactId>",
                "-          <version>1.5</version>",
                "+          <version>1.6</version>",
                "         </plugin>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6e9e71c598da16d06f3137a8bfbaceab5a97bd55"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "783f2f78fbe2cd59cc579d7e148bc0ecabb3d109",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516347338,
            "hunks": 2,
            "message": "Upgrading Swagger UI and modernizer-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 7f45447597..85dd24d10a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -422,3 +422,3 @@ under the License.",
                "     <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>3.9.0</swagger-ui.version>",
                "+    <swagger-ui.version>3.9.1</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>",
                "@@ -2030,3 +2030,3 @@ under the License.",
                "         <artifactId>modernizer-maven-plugin</artifactId>",
                "-        <version>1.5.0</version>",
                "+        <version>1.6.0</version>",
                "         <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8d615ab3a26f0b4012622f6eb6a69a43842957a0"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "708c8316194329e63bd3c92a0537c6a9476a29d4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513682735,
            "hunks": 1,
            "message": "Important improvement of the method to check if an ANY matches a specific search condition",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index f4334299c2..c526a3c099 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -362,3 +362,6 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "     public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {",
                "-        return search(cond, any.getType().getKind()).contains(any);",
                "+        AnyCond keycond = new AnyCond(AttributeCond.Type.EQ);",
                "+        keycond.setSchema(\"key\");",
                "+        keycond.setExpression(any.getKey());",
                "+        return !search(SearchCond.getAndCond(SearchCond.getLeafCond(keycond), cond), any.getType().getKind()).isEmpty();",
                "     }"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c1f260ef18bdb25198595f8a953e0368aacaf79d"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9cac817f8259895c7475a56c08d742f11174fd7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511277180,
            "hunks": 3,
            "message": "provides support for saml attribute type any (not just string)",
            "diff": [
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "index 4e40e83772..72d04ed4e7 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "@@ -109,2 +109,3 @@ import org.apache.syncope.core.spring.security.AuthDataAccessor;",
                " import org.apache.syncope.core.spring.security.Encryptor;",
                "+import org.opensaml.core.xml.schema.XSAny;",
                " import org.springframework.util.ResourceUtils;",
                "@@ -462,6 +463,8 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "                     String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();",
                "-                    if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())",
                "-                            && attr.getAttributeValues().get(0) instanceof XSString) {",
                "-",
                "-                        keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();",
                "+                    if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())) {",
                "+                        if (attr.getAttributeValues().get(0) instanceof XSString) {",
                "+                            keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();",
                "+                        } else if (attr.getAttributeValues().get(0) instanceof XSAny) {",
                "+                            keyValue = ((XSAny) attr.getAttributeValues().get(0)).getTextContent();",
                "+                        }",
                "                     }",
                "@@ -684,3 +687,2 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "de73cb89f71a44fa1f268517a7d38105d68398b1"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3a9d872f17e180784a52b2f0fa28649b2d02d3af",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509627823,
            "hunks": 10,
            "message": "Ensure the Admin Console correctly provides details to fetch ConnId object classes info",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java",
                "index 729ea538e4..d8b3fdfd5d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java",
                "@@ -79,5 +79,9 @@ public class ConnectorRestClient extends BaseRestClient {",
                "     public List<String> getExtAttrNames(",
                "-            final String objectClass, final String connectorKey, final Collection<ConnConfProperty> conf) {",
                "+            final String adminRealm,",
                "+            final String objectClass,",
                "+            final String connectorKey,",
                "+            final Collection<ConnConfProperty> conf) {",
                "         ConnInstanceTO connInstanceTO = new ConnInstanceTO();",
                "+        connInstanceTO.setAdminRealm(adminRealm);",
                "         connInstanceTO.setKey(connectorKey);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java",
                "index ce2943844f..5d7c62b15f 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java",
                "@@ -55,2 +55,4 @@ public class ProvisionWizardBuilder extends AjaxWizardBuilder<ResourceProvision>",
                "+    private final String adminRealm;",
                "+",
                "     protected AjaxTextFieldPanel clazz;",
                "@@ -185,7 +187,9 @@ public class ProvisionWizardBuilder extends AjaxWizardBuilder<ResourceProvision>",
                "      * @param resourceTO external resource to be updated.",
                "+     * @param adminRealm admin realm",
                "      * @param pageRef Caller page reference.",
                "      */",
                "-    public ProvisionWizardBuilder(final ResourceTO resourceTO, final PageReference pageRef) {",
                "+    public ProvisionWizardBuilder(final ResourceTO resourceTO, final String adminRealm, final PageReference pageRef) {",
                "         super(new ResourceProvision(), pageRef);",
                "         this.resourceTO = resourceTO;",
                "+        this.adminRealm = adminRealm;",
                "     }",
                "@@ -208,3 +212,3 @@ public class ProvisionWizardBuilder extends AjaxWizardBuilder<ResourceProvision>",
                "         mapping.add(new ResourceMappingPanel(",
                "-                \"mapping\", resourceTO, modelObject, itemTransformers, jexlTransformers));",
                "+                \"mapping\", resourceTO, adminRealm, modelObject, itemTransformers, jexlTransformers));",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "index 02ae10faf0..94f011ab8a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "@@ -69,2 +69,3 @@ public class ResourceMappingPanel extends AbstractMappingPanel {",
                "             final ResourceTO resourceTO,",
                "+            final String adminRealm,",
                "             final ResourceProvision provision,",
                "@@ -92,2 +93,3 @@ public class ResourceMappingPanel extends AbstractMappingPanel {",
                "                 return new ConnectorRestClient().getExtAttrNames(",
                "+                        adminRealm,",
                "                         provision.getObjectClass(),",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java",
                "index 194bd5aa08..de9191fb24 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java",
                "@@ -87,3 +87,3 @@ public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {",
                "-        wizard = new ProvisionWizardBuilder(resourceTO, pageRef);",
                "+        wizard = new ProvisionWizardBuilder(resourceTO, adminRealm, pageRef);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f9aed7b8d2e044041e2c82a8471988d33b302aaf"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "482a881ff6cf136fccf72aa1b877ab0a9cfd490e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508248552,
            "hunks": 3,
            "message": "Whitenoise",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "index a22db75e0a..c2e655d2d8 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "@@ -128,10 +128,10 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "             for (Map.Entry<String, String> entry : pushTaskTO.getFilters().entrySet()) {",
                "-                AnyType type = anyTypeDAO.find(entry.getKey());",
                "-                if (type == null) {",
                "+                AnyType anyType = anyTypeDAO.find(entry.getKey());",
                "+                if (anyType == null) {",
                "                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());",
                "                 } else {",
                "-                    PushTaskAnyFilter filter = pushTask.getFilter(type);",
                "+                    PushTaskAnyFilter filter = pushTask.getFilter(anyType);",
                "                     if (filter == null) {",
                "                         filter = entityFactory.newEntity(PushTaskAnyFilter.class);",
                "-                        filter.setAnyType(anyTypeDAO.find(entry.getKey()));",
                "+                        filter.setAnyType(anyType);",
                "                         filter.setPushTask(pushTask);"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dd152d87dfa21770c77d902dee759899214a6aed"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5304f2eb2a02c56e7daf87abaf1b744bd4c04854",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512026852,
            "hunks": 1,
            "message": "Downgrading AngularJS back to 1.6.6 as WebJARs for 1.6.7 is not working",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f0e2c507a5..afca95fe4d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -442,3 +442,3 @@ under the License.",
                "-    <angular.version>1.6.7</angular.version>",
                "+    <angular.version>1.6.6</angular.version>",
                "     <angular-ui-router.version>0.3.2</angular-ui-router.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ee666b5c85cf640b5bf5b7b00971611d1af39cce"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52bb4b3097c9b8da70e6215f9a213cf3053fd532",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508512299,
            "hunks": 3,
            "message": "[SYNCOPE-956] cleanup",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java b/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "index 625e31dbe4..b0e266c4cd 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "@@ -34,4 +34,2 @@ public @interface Schema {",
                "     AnyTypeKind anyTypeKind() default AnyTypeKind.USER;",
                "-",
                "-    boolean includeFields() default false;",
                " }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "index c781f50557..151683c4ad 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java",
                "@@ -27,4 +27,2 @@ import javax.xml.bind.annotation.XmlRootElement;",
                " import javax.xml.bind.annotation.XmlType;",
                "-import org.apache.syncope.common.lib.Schema;",
                "-import org.apache.syncope.common.lib.types.SchemaType;",
                "@@ -36,3 +34,2 @@ public class DefaultPullCorrelationRuleConf extends AbstractPullCorrelationRuleC",
                "-    @Schema(type = { SchemaType.PLAIN }, includeFields = true)",
                "     private final List<String> schemas = new ArrayList<>();"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/Schema.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "748afdc89d2380575f2ae567466a3556da795e53",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515592623,
            "hunks": 1,
            "message": "Upgrading Swagger UI",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f27e84ca5c..a9642c62cc 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -422,3 +422,3 @@ under the License.",
                "     <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>3.8.0</swagger-ui.version>",
                "+    <swagger-ui.version>3.9.0</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "169a3c0ff9dd466c966f9b58c2b543519daa4e24"
                ],
                [
                    "no-tag",
                    "b8993d236655ecebcba5c88a649a01b4abfbf988"
                ],
                [
                    "no-tag",
                    "1174b1d972287f535ded6168ed8660c7519ad584"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ddaa970fbbf9f2924d8aacc4ada943604cdfbcc3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511973211,
            "hunks": 1,
            "message": "Fix angular version",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3f51ec1891..f0e2c507a5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1333,3 +1333,3 @@ under the License.",
                "         <artifactId>angular</artifactId>",
                "-        <version>${angular.version}-1</version>",
                "+        <version>${angular.version}</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "102442b743639c277ba1f5758745ab2098691c23"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5078b5f096a4144b47c903ebbc179a8c117d1a01",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510151955,
            "hunks": 1,
            "message": "provides paged result cookie return from migration groovy search script",
            "diff": [
                "diff --git a/core/migration/src/main/resources/scripted/SearchScript.groovy b/core/migration/src/main/resources/scripted/SearchScript.groovy",
                "index 6e106515f4..298dc93c0f 100644",
                "--- a/core/migration/src/main/resources/scripted/SearchScript.groovy",
                "+++ b/core/migration/src/main/resources/scripted/SearchScript.groovy",
                "@@ -182,2 +182,10 @@ log.ok(action + \" script done\");",
                "+// ----------------",
                "+// Add paged result cookie",
                "+// ----------------",
                "+def pagedResultCookieLine = [:]",
                "+pagedResultCookieLine.put(OperationOptions.OP_PAGED_RESULTS_COOKIE, pagedResultsCookie);",
                "+result.add(pagedResultCookieLine);",
                "+// ----------------",
                "+",
                " return result;"
            ],
            "changed_files": [
                "core/migration/src/main/resources/scripted/SearchScript.groovy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ada9de66530ad79be5a22ae1fb558d9bd7efc64e"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2ebcff24333ea7f9c437c4729d89bc952f1bd933",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507025790,
            "hunks": 10,
            "message": "[SYNCOPE-956] IT using Groovy implementations",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java",
                "index dfa1134e09..c4945fd328 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java",
                "@@ -30,2 +30,3 @@ import org.apache.syncope.common.lib.types.ImplementationType;",
                " import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.ImplementationCheck;",
                "@@ -33,2 +34,3 @@ import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " @Table(name = JPAImplementation.TABLE)",
                "+@ImplementationCheck",
                " @Cacheable",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationCheck.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationCheck.java",
                "new file mode 100644",
                "index 0000000000..a613f87541",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationCheck.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import java.lang.annotation.Documented;",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+import javax.validation.Constraint;",
                "+import javax.validation.Payload;",
                "+",
                "+@Target({ ElementType.TYPE })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Constraint(validatedBy = ImplementationValidator.class)",
                "+@Documented",
                "+public @interface ImplementationCheck {",
                "+",
                "+    String message() default \"{org.apache.syncope.core.persistence.validation.implementation}\";",
                "+",
                "+    Class<?>[] groups() default {};",
                "+",
                "+    Class<? extends Payload>[] payload() default {};",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java",
                "new file mode 100644",
                "index 0000000000..095a97def1",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import javax.validation.ConstraintValidatorContext;",
                "+import org.apache.syncope.common.lib.types.EntityViolationType;",
                "+import org.apache.syncope.core.persistence.api.entity.Implementation;",
                "+",
                "+public class ImplementationValidator extends AbstractValidator<ImplementationCheck, Implementation> {",
                "+",
                "+    @Override",
                "+    public boolean isValid(final Implementation resource, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "+        if (resource.getKey() == null || !KEY_PATTERN.matcher(resource.getKey()).matches()) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid implementation key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+            return false;",
                "+        }",
                "+",
                "+        return true;",
                "+    }",
                "+}",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java",
                "deleted file mode 100644",
                "index 6c79367d52..0000000000",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java",
                "+++ /dev/null",
                "@@ -1,75 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.fit.core.reference;",
                "-",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import org.apache.syncope.common.lib.patch.AnyPatch;",
                "-import org.apache.syncope.common.lib.patch.AttrPatch;",
                "-import org.apache.syncope.common.lib.to.AnyTO;",
                "-import org.apache.syncope.common.lib.to.AttrTO;",
                "-import org.apache.syncope.core.provisioning.api.LogicActions;",
                "-",
                "-/**",
                "- * Class for integration tests: transform (by making it double) any attribute value for defined schema.",
                "- */",
                "-public class DoubleValueLogicActions implements LogicActions {",
                "-",
                "-    private static final String NAME = \"makeItDouble\";",
                "-",
                "-    @Override",
                "-    public <A extends AnyTO> A beforeCreate(final A input) {",
                "-        for (AttrTO attr : input.getPlainAttrs()) {",
                "-            if (NAME.equals(attr.getSchema())) {",
                "-                List<String> values = new ArrayList<>(attr.getValues().size());",
                "-                for (String value : attr.getValues()) {",
                "-                    try {",
                "-                        values.add(String.valueOf(2 * Long.parseLong(value)));",
                "-                    } catch (NumberFormatException e) {",
                "-                        // ignore",
                "-                    }",
                "-                }",
                "-                attr.getValues().clear();",
                "-                attr.getValues().addAll(values);",
                "-            }",
                "-        }",
                "-",
                "-        return input;",
                "-    }",
                "-",
                "-    @Override",
                "-    public <M extends AnyPatch> M beforeUpdate(final M input) {",
                "-        for (AttrPatch patch : input.getPlainAttrs()) {",
                "-            if (NAME.equals(patch.getAttrTO().getSchema())) {",
                "-                List<String> values = new ArrayList<>(patch.getAttrTO().getValues().size());",
                "-                for (String value : patch.getAttrTO().getValues()) {",
                "-                    try {",
                "-                        values.add(String.valueOf(2 * Long.parseLong(value)));",
                "-                    } catch (NumberFormatException e) {",
                "-                        // ignore",
                "-                    }",
                "-                }",
                "-                patch.getAttrTO().getValues().clear();",
                "-                patch.getAttrTO().getValues().addAll(values);",
                "-            }",
                "-        }",
                "-",
                "-        return input;",
                "-    }",
                "-}",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "index e4d94d078b..d4467e8f8f 100644",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "@@ -148,3 +148,2 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "             classNames = new HashSet<>();",
                "-            classNames.add(PrefixItemTransformer.class.getName());",
                "             put(ImplementationType.ITEM_TRANSFORMER, classNames);",
                "@@ -156,3 +155,2 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "             classNames = new HashSet<>();",
                "-            classNames.add(TestReconciliationFilterBuilder.class.getName());",
                "             put(ImplementationType.RECON_FILTER_BUILDER, classNames);",
                "@@ -160,3 +158,2 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "             classNames = new HashSet<>();",
                "-            classNames.add(DoubleValueLogicActions.class.getName());",
                "             put(ImplementationType.LOGIC_ACTIONS, classNames);",
                "@@ -181,3 +178,2 @@ public class ITImplementationLookup implements ImplementationLookup {",
                "             classNames = new HashSet<>();",
                "-            classNames.add(TestPullRule.class.getName());",
                "             put(ImplementationType.PULL_CORRELATION_RULE, classNames);",
                "diff --git a/pom.xml b/pom.xml",
                "index b5c7512ba1..edd7463f97 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -738,8 +738,2 @@ under the License.",
                "         <version>${openjpa.version}</version>",
                "-        <exclusions>",
                "-          <exclusion>",
                "-            <groupId>junit</groupId>",
                "-            <artifactId>junit</artifactId>",
                "-          </exclusion>",
                "-        </exclusions>",
                "       </dependency>"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationCheck.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b0dcf9d5a40e95258d080aff38a5296a6f36ce0f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508319427,
            "hunks": 3,
            "message": "Minor cleanup",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index 1b125c880e..40295567f7 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -196,3 +196,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "      */",
                "-    private Map<String, Attribute> toMap(final Collection<? extends Attribute> attributes) {",
                "+    protected Map<String, Attribute> toMap(final Collection<? extends Attribute> attributes) {",
                "         Map<String, Attribute> map = new HashMap<>();",
                "@@ -241,3 +241,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "             // 1. check if rename is really required",
                "-            Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);",
                "+            Name newName = AttributeUtil.getNameFromAttributes(attributes);",
                "@@ -268,3 +268,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "                 LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrs, attributes);",
                "-                result = (Uid) AttributeUtil.find(Uid.NAME, attributes);",
                "+                result = AttributeUtil.getUidAttribute(attributes);",
                "             } else {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "01dba343087df9b0f8f4b8c66f636b9ea9aa6f18"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f96afc989569cbaff7af4d2f1acee746fe67b6e1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510730595,
            "hunks": 1,
            "message": "Upgrading commons-lang",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6713569af2..31a0965b28 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -401,3 +401,3 @@ under the License.",
                "     <commons-jexl.version>3.1</commons-jexl.version>",
                "-    <commons-lang.version>3.6</commons-lang.version>",
                "+    <commons-lang.version>3.7</commons-lang.version>",
                "     <commons-text.version>1.1</commons-text.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "979f853e60f04489d656dcf4ed05a028578bef53"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e2f36939957970ef39b822c611b65d17bfcec1ec",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513174926,
            "hunks": 1,
            "message": "Upgrading comomns-text",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 81650b054e..dd9672a941 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -402,3 +402,3 @@ under the License.",
                "     <commons-lang.version>3.7</commons-lang.version>",
                "-    <commons-text.version>1.1</commons-text.version>",
                "+    <commons-text.version>1.2</commons-text.version>",
                "     <commons-logging.version>1.1.3</commons-logging.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9405d6cc716bc0b642fe02225789e6cfad07ecee"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d7db0414cb45d24007377b28e3bef830cd784217",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511950411,
            "hunks": 1,
            "message": "Upgrading CXF",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fded32ea81..12fe40f393 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -345,3 +345,3 @@ under the License.",
                "-    <cxf.version>3.0.15</cxf.version>\t",
                "+    <cxf.version>3.0.16</cxf.version>\t",
                "     <spring.version>4.2.9.RELEASE</spring.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5fdbc0473a669f26b53184ff4204b01c82771e22"
                ],
                [
                    "no-tag",
                    "c8542cce314c1161ddc2dfad72d15772b7952643"
                ]
            ],
            "tags": [
                "syncope-1.2.11"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "34cb1fa9ba2e9a902378bb141f351910907c9b8f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512397296,
            "hunks": 1,
            "message": "Upgrading Angular Translate",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c6a4dd3355..eadf68d3a0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -447,3 +447,3 @@ under the License.",
                "     <angular-treasure-overlay-spinner.version>1.1.0</angular-treasure-overlay-spinner.version>",
                "-    <angular-translate.version>2.15.2</angular-translate.version>",
                "+    <angular-translate.version>2.16.0</angular-translate.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "26f421c34b1f8a1d47d3eb60fbd0d461072706dd"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "869b113de34c7e12853f624ce1b781eff8d1c3d9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509092584,
            "hunks": 1,
            "message": "[SYNCOPE-1138] Missing change by merge from 2_0_X",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 729cf2c297..e6fb6121fe 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -103,3 +103,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             anyObjectTO.getRelationships().addAll(",
                "-                    anyObject.getRelationships().stream().map(relationship -> getRelationshipTO(",
                "+                    anyObjectDAO.findAllRelationships(anyObject).stream().map(relationship -> getRelationshipTO(",
                "                     relationship.getType().getKey(),"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1138": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1138",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "566b50b3621bb7289560f23168653ccb17c22ba4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514990162,
            "hunks": 2,
            "message": "Unused stuff",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index f09cd06219..a1d04fa69e 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -52,3 +52,2 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.api.entity.DerSchema;",
                "-import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;",
                "@@ -133,5 +132,2 @@ public class MappingManagerImpl implements MappingManager {",
                "-    @Autowired",
                "-    private EntityFactory entityFactory;",
                "-",
                "     @Autowired"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "00f1f5064fc1754ef50517a0139e9e77754b7e1e"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "77b6cbe74f368f99875ac9d67d1c85d337aebf80",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512914839,
            "hunks": 1,
            "message": "Upgrading ANTLR4",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 37094444d9..5f8af643c9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -464,3 +464,3 @@ under the License.",
                "-    <antlr4.version>4.7</antlr4.version>",
                "+    <antlr4.version>4.7.1</antlr4.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2153a3dca38f0be7ad5adda641f528314e8a8197"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bd892ee6d80d86ed2f910813ebc7704b06d447cb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511512947,
            "hunks": 1,
            "message": "Upgrading Log4J",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 72d6edb114..8df8dd5985 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -396,3 +396,3 @@ under the License.",
                "-    <log4j.version>2.9.1</log4j.version>",
                "+    <log4j.version>2.10.0</log4j.version>",
                "     <disruptor.version>3.3.7</disruptor.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "603e22a6736dca990fff7fc72af80381b101a0ea"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3df09968936118ce9a36ac438a8d0a6bf498990b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513165107,
            "hunks": 2,
            "message": "[SYNCOPE-1250] fix bad merge",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "index bae86f175d..1ee8f8f5c0 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "@@ -162,7 +162,7 @@ public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardSt",
                "                     filter(schemaTO -> !whichAttrs.contains(schemaTO.getKey())).collect(Collectors.toSet()));",
                "-        ",
                "+        }",
                "+",
                "         allSchemas.forEach(schemaTO -> {",
                "             scs.put(schemaTO.getKey(), schemaTO);",
                "-            });",
                "-        }",
                "+        });",
                "     }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1250": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1250",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f15aedd54517be34f73cba5ed5b456d99b0717a3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513352089,
            "hunks": 6,
            "message": "Improvement to REST request for Groups list retrieving from Enduser UI",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "index 5ba4e5f5f2..66ae3122c2 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "@@ -25,2 +25,4 @@ import java.util.Collections;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.stream.Collectors;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -69,3 +71,4 @@ public class GroupResource extends BaseResource {",
                "             groupResponse.setTotGroups(totGroups);",
                "-            groupResponse.setGroupTOs(groupTOs);",
                "+            groupResponse.setGroupTOs(groupTOs.stream().collect(",
                "+                    Collectors.toMap(GroupTO::getKey, GroupTO::getName)));",
                "@@ -93,3 +96,3 @@ public class GroupResource extends BaseResource {",
                "-        private List<GroupTO> groups;",
                "+        private Map<String, String> groups;",
                "@@ -97,7 +100,7 @@ public class GroupResource extends BaseResource {",
                "-        public List<GroupTO> getGroupTOs() {",
                "-            return Collections.unmodifiableList(groups);",
                "+        public Map<String, String> getGroupTOs() {",
                "+            return Collections.unmodifiableMap(groups);",
                "         }",
                "-        public void setGroupTOs(final List<GroupTO> groups) {",
                "+        public void setGroupTOs(final Map<String, String> groups) {",
                "             this.groups = groups;",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "index b29654b448..d682cde7f1 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "@@ -237,4 +237,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "             newGroups.push({",
                "-              \"groupKey\": response[\"groupTOs\"][i].key,",
                "-              \"groupName\": response[\"groupTOs\"][i].name",
                "+              \"groupKey\": i,",
                "+              \"groupName\": response[\"groupTOs\"][i]",
                "             });"
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1e9ed5f79c4ebc186de640057581f2c7ee7eb383"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c40b2fe7bf612682170cdcef4402a95ae67fa227",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515417334,
            "hunks": 5,
            "message": "Allow for user self-activate / self-disable / self-reactivate (with mandatory token)",
            "diff": [
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "index 651c9d05a7..397217db18 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "@@ -33,2 +33,3 @@ import javax.ws.rs.core.Response;",
                " import org.apache.cxf.jaxrs.ext.PATCH;",
                "+import org.apache.syncope.common.lib.patch.StatusPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "@@ -90,2 +91,15 @@ public interface UserSelfService extends JAXRSService {",
                "+    /**",
                "+     * Self-perform a status update.",
                "+     *",
                "+     * @param statusPatch status update details",
                "+     * @return Response object featuring the updated user enriched with propagation status information",
                "+     * - ProvisioningResult as Entity",
                "+     */",
                "+    @POST",
                "+    @Path(\"{key}/status\")",
                "+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })",
                "+    Response status(@NotNull StatusPatch statusPatch);",
                "+",
                "     /**",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "index 5903ee69e0..aa47f38ba3 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "@@ -255,2 +255,15 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public ProvisioningResult<UserTO> selfStatus(final StatusPatch statusPatch, final boolean nullPriorityAsync) {",
                "+        statusPatch.setKey(userDAO.findKey(AuthContextUtils.getUsername()));",
                "+        Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);",
                "+",
                "+        return afterUpdate(",
                "+                binder.returnUserTO(binder.getUserTO(updated.getKey())),",
                "+                updated.getRight(),",
                "+                Collections.<LogicActions>emptyList(),",
                "+                false,",
                "+                Collections.<String>emptySet());",
                "+    }",
                "+",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "index f6a800f1d0..92b0144430 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java",
                "@@ -24,2 +24,3 @@ import org.apache.syncope.common.lib.AnyOperations;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.patch.StatusPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "@@ -78,2 +79,8 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf",
                "+    @Override",
                "+    public Response status(final StatusPatch statusPatch) {",
                "+        ProvisioningResult<UserTO> updated = logic.selfStatus(statusPatch, isNullPriorityAsync());",
                "+        return modificationResponse(updated);",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f868f0a9ad0eee669985f848dcc467db751b3cf1"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "74a657a8c1de81be4c14d9b04fc9cf31ebafb3de",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511966788,
            "hunks": 2,
            "message": "Upgrading Angular",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index afca95fe4d..3f51ec1891 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -442,3 +442,3 @@ under the License.",
                "-    <angular.version>1.6.6</angular.version>",
                "+    <angular.version>1.6.7</angular.version>",
                "     <angular-ui-router.version>0.3.2</angular-ui-router.version>",
                "@@ -1333,3 +1333,3 @@ under the License.",
                "         <artifactId>angular</artifactId>",
                "-        <version>${angular.version}</version>",
                "+        <version>${angular.version}-1</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "746f4c564ae9b9e5504fd2ebff9c5e77d8ab48e7"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b59af727695281420bf75136253f142d0b29f18a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508256680,
            "hunks": 2,
            "message": "Small checks",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index 640aaba1bb..a19d37fb99 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -179,3 +179,5 @@ public class MappingManagerImpl implements MappingManager {",
                "-                            values.addAll(preparedAttr.getRight().getValue());",
                "+                            if (preparedAttr.getRight().getValue() != null) {",
                "+                                values.addAll(preparedAttr.getRight().getValue());",
                "+                            }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "index ed0df7c749..2b76dfc2f0 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java",
                "@@ -132,2 +132,3 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource",
                "                     replaceQueryParam(PARAM_CONNID_PAGED_RESULTS_COOKIE, result.getPagedResultsCookie()).",
                "+                    replaceQueryParam(PARAM_SIZE, listQuery.getSize()).",
                "                     build());"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2d853137df6608345d9b13a40c578f86427517bb"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6952022e11ec91ace92d962b48aab8beb468a2d3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1514964384,
            "hunks": 1,
            "message": "Fixing not translated label",
            "diff": [
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "index 7d388a5d5b..c7f41a28f7 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "@@ -72,3 +72,5 @@ under the License.",
                "         <div class=\"text-center\" ng-show=\"$root.isPwdResetAllowed()\">",
                "-          <a href=\"javascript:void(0);\" class=\"btn btn-link\" ng-click=\"passwordReset()\" id=\"passwordreset\">Password Reset</a>",
                "+          <a href=\"javascript:void(0);\" class=\"btn btn-link\" ng-click=\"passwordReset()\" id=\"passwordreset\">",
                "+            {{ 'PASSWORDRESET' | translate}}",
                "+          </a>",
                "         </div>"
            ],
            "changed_files": [
                "client/enduser/src/main/resources/META-INF/resources/app/views/self.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "29c4cdbbddf5b4816557c7c4d579fcfdc24aa417"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d641ee2228dd17615f04a6386619d749ef0363d6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508137657,
            "hunks": 1,
            "message": "More tolerant support to (S)SSHA conversion between LDAP and Syncope",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java",
                "index 08d4c7a3cb..8d79c7ceb2 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java",
                "@@ -110,4 +110,10 @@ public class LDAPPasswordPropagationActions implements PropagationActions {",
                "-        // Special check for \"SHA\" (user sync'd from LDAP)",
                "-        return \"SHA\".equals(connectorAlgorithm) && \"SHA1\".equals(userAlgorithm.name());",
                "+        // Special check for \"SHA\" and \"SSHA\" (user pulled from LDAP)",
                "+        if ((\"SHA\".equals(connectorAlgorithm) && userAlgorithm.name().startsWith(\"SHA\"))",
                "+                || (\"SSHA\".equals(connectorAlgorithm) && userAlgorithm.name().startsWith(\"SSHA\"))) {",
                "+",
                "+            return true;",
                "+        }",
                "+",
                "+        return false;",
                "     }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4525e3c9bdc4cba595df091dbe5de0fff8cd60e2"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7c18a3331fe0a4a9c858a69ebe2e6476f9fcda85",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513770177,
            "hunks": 6,
            "message": "improvement for paged search of dynamic group members + fix for dynamic members table clearing before populate",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index 23c7af6850..797dd96882 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -299,5 +299,7 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         // refresh dynamic memberships",
                "+        clearUDynMembers(merged);",
                "         if (merged.getUDynMembership() != null) {",
                "-            clearUDynMembers(merged);",
                "-            int count = countUDynMembers(group);",
                "+            SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());",
                "+            int count = searchDAO().count(",
                "+                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);",
                "             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "@@ -305,3 +307,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "                         Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "-                        buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),",
                "+                        cond,",
                "                         page,",
                "@@ -321,5 +323,7 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         }",
                "+        clearADynMembers(merged);",
                "         for (ADynGroupMembership memb : merged.getADynMemberships()) {",
                "-            clearADynMembers(merged);",
                "-            int count = countADynMembers(group);",
                "+            SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());",
                "+            int count = searchDAO().count(",
                "+                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);",
                "             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "@@ -327,3 +331,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "                         Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "-                        buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),",
                "+                        cond,",
                "                         page,"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "44a818844233e2e7560b4a5d6608c7df535adc18"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28feb3100758ecaf640bf6435129e30abc77a668",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515591943,
            "hunks": 1,
            "message": "Upgrading HikariCP",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3220bc47f6..386bac619c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -375,3 +375,3 @@ under the License.",
                "     <openjpa.version>3.0.0-SNAPSHOT</openjpa.version>",
                "-    <hikaricp.version>2.7.4</hikaricp.version>",
                "+    <hikaricp.version>2.7.5</hikaricp.version>",
                "     <bval.version>1.1.2</bval.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0c2e4ba0c340d66d23bd9fff516151384ce59fc1"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5cfe9666bececd4b83787c86cbe5cb0ee963a39c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507724540,
            "hunks": 2,
            "message": "[SYNCOPE-1222] Some refinement",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 6f03191d70..0173d5b55b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -372,6 +372,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "                                 reasons.get(resource).remove(membership.getRightEnd().getKey());",
                "-",
                "-                                if (reasons.get(resource).contains(anyObject.getKey())) {",
                "-                                    toBeProvisioned.add(resource);",
                "-                                }",
                "+                                toBeProvisioned.add(resource);",
                "                             }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index d80673c55e..0f47f70b51 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -458,6 +458,3 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "                                 reasons.get(resource).remove(membership.getRightEnd().getKey());",
                "-",
                "-                                if (reasons.get(resource).contains(user.getKey())) {",
                "-                                    toBeProvisioned.add(resource);",
                "-                                }",
                "+                                toBeProvisioned.add(resource);",
                "                             }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1222": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "30895e1107678ed2702c5c4c4aad4f4732404eff",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508335954,
            "hunks": 1,
            "message": "Extended capability for PlainAttrsPullCorrelationRule",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "index 1874e6aa20..9c55b03426 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "@@ -49,3 +49,3 @@ public class PlainAttrsPullCorrelationRule implements PullCorrelationRule {",
                "         Map<String, Item> mappingItems = new HashMap<>();",
                "-        for (Item item : MappingUtils.getPullItems(provision.getMapping().getItems())) {",
                "+        for (Item item : provision.getMapping().getItems()) {",
                "             mappingItems.put(item.getIntAttrName(), item);"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ffc4374ae0bb46914646b6d6a9d33f2ee324c3ea"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9129ee05f76ed6cd525622731c215ce3a4b5d781",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1509969043,
            "hunks": 3,
            "message": "White noise: javadocs cleanup",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "index 1ec0f6f819..257ba7f665 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "@@ -37,3 +37,3 @@ public final class SearchCondConverter {",
                "     /**",
                "-     * Parses a FIQL expression into Syncope's <tt>SearchCond</tt>, using CXF's <tt>FiqlParser</tt>.",
                "+     * Parses a FIQL expression into Syncope's {@link SearchCond}, using {@link SyncopeFiqlParser}.",
                "      *",
                "@@ -42,3 +42,2 @@ public final class SearchCondConverter {",
                "      * @return {@link SearchCond} instance for given FIQL expression",
                "-     * @see SyncopeFiqlParser",
                "      */",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "index 18d576677d..4c8cd01bae 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java",
                "@@ -49,3 +49,3 @@ import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;",
                " /**",
                "- * Converts CXF's <tt>SearchCondition</tt> into internal <tt>SearchCond</tt>.",
                "+ * Visits CXF's {@link SearchBean} and produces {@link SearchCond}.",
                "  */"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "99a9f1a7fc1ff5e5bccea76536741d17db523744"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8e56d521fe35ba6d91d77004432ceb80b5ae62b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507533028,
            "hunks": 1,
            "message": "Upgrading maven-war-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 82be9a4122..b5c7512ba1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1766,3 +1766,3 @@ under the License.",
                "           <artifactId>maven-war-plugin</artifactId>",
                "-          <version>3.1.0</version>",
                "+          <version>3.2.0</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d81b6bc5cbbc998f3a23ba3ce87fbf0565adbb12"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed30ef8006a983fca5136407a6643a0806286297",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508336117,
            "hunks": 3,
            "message": "Better usage of Java 8 APIs",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "index 9c55b03426..030a712c3c 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java",
                "@@ -21,5 +21,6 @@ package org.apache.syncope.core.provisioning.java.pushpull;",
                " import java.util.Arrays;",
                "-import java.util.HashMap;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.function.Function;",
                "+import java.util.stream.Collectors;",
                " import org.apache.syncope.core.persistence.api.dao.search.AnyCond;",
                "@@ -48,6 +49,4 @@ public class PlainAttrsPullCorrelationRule implements PullCorrelationRule {",
                "     public SearchCond getSearchCond(final ConnectorObject connObj) {",
                "-        Map<String, Item> mappingItems = new HashMap<>();",
                "-        for (Item item : provision.getMapping().getItems()) {",
                "-            mappingItems.put(item.getIntAttrName(), item);",
                "-        }",
                "+        Map<String, Item> mappingItems = provision.getMapping().getItems().stream().",
                "+                collect(Collectors.toMap(Item::getIntAttrName, Function.identity()));"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "20f5c70e80b8004bec66782bebb061e63f32e720"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2262c5227543e4952ab9a3e0f7d8d779a7a34d67",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507815674,
            "hunks": 3,
            "message": "No need to implement SyncopeLoader - not effective, here",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "index f3c6e736ed..fce154ec72 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "@@ -30,3 +30,2 @@ import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.apache.syncope.core.persistence.api.SyncopeLoader;",
                " import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;",
                "@@ -48,3 +47,3 @@ import org.springframework.transaction.annotation.Transactional;",
                " @Component",
                "-public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, SyncopeLoader {",
                "+public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {",
                "@@ -60,7 +59,2 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "-    @Override",
                "-    public Integer getPriority() {",
                "-        return 100;",
                "-    }",
                "-",
                "     private String getBeanName(final ExternalResource resource) {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bb145ce0bb3c39caf8dfc343040b96094224865b"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "199b66432bc835a715de0961bbd9cff12123745b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513843348,
            "hunks": 1,
            "message": "Ensuring the mustChangePassword flag is reset to false in case a password value is set",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "index 15407d9655..b3dfac15c6 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "@@ -265,2 +265,3 @@ public class JPAUser",
                "             this.cipherAlgorithm = cipherAlgoritm;",
                "+            setMustChangePassword(false);",
                "         } catch (Exception e) {"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "720b48f9757bff2e70f1e6550e48a082db3ef670"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "850934a6a80cd638eb71859598e464b4fe9e0739",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513347020,
            "hunks": 6,
            "message": "little improvement on dynamic membership refreshing",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index 7862415381..898a4ae608 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -465,13 +465,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyObject) {",
                "-        Query dynGroupsQuery = entityManager().createNativeQuery(",
                "-                \"SELECT group_id FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");",
                "-        dynGroupsQuery.setParameter(1, anyObject.getKey());",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        List<String> dynGroups = dynGroupsQuery.getResultList();",
                "-",
                "         Set<String> before = new HashSet<>();",
                "-        for (String dynGroup : dynGroups) {",
                "-            before.add(dynGroup);",
                "-        }",
                "-",
                "         Set<String> after = new HashSet<>();",
                "@@ -482,3 +472,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             delete.setParameter(2, anyObject.getKey());",
                "-            delete.executeUpdate();",
                "+            if (delete.executeUpdate() > 0) {",
                "+                before.add(memb.getGroup().getKey());",
                "+            }",
                "@@ -561,13 +553,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {",
                "-        Query dynGroupsQuery = entityManager().createNativeQuery(",
                "-                \"SELECT group_id FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");",
                "-        dynGroupsQuery.setParameter(1, user.getKey());",
                "-        @SuppressWarnings(\"unchecked\")",
                "-        List<String> dynGroups = dynGroupsQuery.getResultList();",
                "-",
                "         Set<String> before = new HashSet<>();",
                "-        for (String dynGroup : dynGroups) {",
                "-            before.add(dynGroup);",
                "-        }",
                "-",
                "         Set<String> after = new HashSet<>();",
                "@@ -578,3 +560,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             delete.setParameter(2, user.getKey());",
                "-            delete.executeUpdate();",
                "+            if (delete.executeUpdate() > 0) {",
                "+                before.add(memb.getGroup().getKey());",
                "+            }"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c6e74231de2610e6296e73055aa9795cc2e13b90"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6e55cb1150e2a84e9d38755675e8c8b069bacee2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512830648,
            "hunks": 1,
            "message": "Upgrading Jackson",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0654c39aa9..37094444d9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -369,3 +369,3 @@ under the License.",
                "-    <jackson.version>2.9.2</jackson.version>",
                "+    <jackson.version>2.9.3</jackson.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "568b4eda3d3da7ce3175dd068895fcebbddbb72f"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc4138569c12d1fefd587441346563c8c57dbbc9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511517682,
            "hunks": 1,
            "message": "Upgrading AspectJ",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d4a25cab66..9050765da2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -930,3 +930,3 @@ under the License.",
                "         <artifactId>aspectjweaver</artifactId>",
                "-        <version>1.8.11</version>",
                "+        <version>1.8.13</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "42445e5f552f60d36005d62ce6a72880b12b795c"
                ]
            ],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cea47da1a1510446b7bd62fbc8e45cc8757d6611",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507613889,
            "hunks": 13,
            "message": "[SYNCOPE-956] Class cache",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java",
                "index 091c4b09f2..9148fbb7cf 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java",
                "@@ -26,2 +26,3 @@ import org.apache.syncope.core.persistence.api.entity.Implementation;",
                " import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;",
                "+import org.apache.syncope.core.spring.ImplementationManager;",
                " import org.springframework.stereotype.Repository;",
                "@@ -56,3 +57,7 @@ public class JPAImplementationDAO extends AbstractDAO<Implementation> implements",
                "     public Implementation save(final Implementation implementation) {",
                "-        return entityManager().merge(implementation);",
                "+        Implementation merged = entityManager().merge(implementation);",
                "+",
                "+        ImplementationManager.purge(merged.getKey());",
                "+",
                "+        return merged;",
                "     }",
                "@@ -67,2 +72,3 @@ public class JPAImplementationDAO extends AbstractDAO<Implementation> implements",
                "         entityManager().remove(implementation);",
                "+        ImplementationManager.purge(key);",
                "     }",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java b/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "index af1b2f7631..51c9bf652d 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java",
                "@@ -21,2 +21,5 @@ package org.apache.syncope.core.spring;",
                " import groovy.lang.GroovyClassLoader;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                " import java.util.Optional;",
                "@@ -41,2 +44,4 @@ public final class ImplementationManager {",
                "+    private static final Map<String, Class<?>> CLASS_CACHE = Collections.synchronizedMap(new HashMap<>());",
                "+",
                "     public static Optional<Reportlet> buildReportlet(final Implementation impl)",
                "@@ -46,3 +51,3 @@ public final class ImplementationManager {",
                "             case GROOVY:",
                "-                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl.getBody()));",
                "+                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl));",
                "@@ -80,3 +85,3 @@ public final class ImplementationManager {",
                "             case GROOVY:",
                "-                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl.getBody()));",
                "+                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl));",
                "@@ -114,3 +119,3 @@ public final class ImplementationManager {",
                "             case GROOVY:",
                "-                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl.getBody()));",
                "+                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl));",
                "@@ -148,3 +153,3 @@ public final class ImplementationManager {",
                "             case GROOVY:",
                "-                return ImplementationManager.<T>buildGroovy(impl.getBody());",
                "+                return ImplementationManager.<T>buildGroovy(impl);",
                "@@ -152,3 +157,3 @@ public final class ImplementationManager {",
                "             default:",
                "-                return ImplementationManager.<T>buildJava(impl.getBody());",
                "+                return ImplementationManager.<T>buildJava(impl);",
                "         }",
                "@@ -157,4 +162,13 @@ public final class ImplementationManager {",
                "     @SuppressWarnings(\"unchecked\")",
                "-    private static <T> T buildGroovy(final String classBody) throws InstantiationException, IllegalAccessException {",
                "-        Class<?> clazz = GROOVY_CLASSLOADER.parseClass(classBody);",
                "+    private static <T> T buildGroovy(final Implementation impl)",
                "+            throws InstantiationException, IllegalAccessException {",
                "+",
                "+        Class<?> clazz;",
                "+        if (CLASS_CACHE.containsKey(impl.getKey())) {",
                "+            clazz = CLASS_CACHE.get(impl.getKey());",
                "+        } else {",
                "+            clazz = GROOVY_CLASSLOADER.parseClass(impl.getBody());",
                "+            CLASS_CACHE.put(impl.getKey(), clazz);",
                "+        }",
                "+",
                "         return (T) ApplicationContextProvider.getBeanFactory().",
                "@@ -164,4 +178,13 @@ public final class ImplementationManager {",
                "     @SuppressWarnings(\"unchecked\")",
                "-    private static <T> T buildJava(final String className) throws ClassNotFoundException {",
                "-        Class<?> clazz = Class.forName(className);",
                "+    private static <T> T buildJava(final Implementation impl)",
                "+            throws ClassNotFoundException {",
                "+",
                "+        Class<?> clazz;",
                "+        if (CLASS_CACHE.containsKey(impl.getKey())) {",
                "+            clazz = CLASS_CACHE.get(impl.getKey());",
                "+        } else {",
                "+            clazz = Class.forName(impl.getBody());",
                "+            CLASS_CACHE.put(impl.getKey(), clazz);",
                "+        }",
                "+",
                "         return (T) ApplicationContextProvider.getBeanFactory().",
                "@@ -170,2 +193,6 @@ public final class ImplementationManager {",
                "+    public static Class<?> purge(final String implementation) {",
                "+        return CLASS_CACHE.remove(implementation);",
                "+    }",
                "+",
                "     private ImplementationManager() {"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5d49dd421b8ef1b91d6350d770f140d737822231",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517415585,
            "hunks": 2,
            "message": "Upgrading Elsticsearch client",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c2fd20ecca..94d8488b69 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -394,3 +394,3 @@ under the License.",
                "-    <elasticsearch.version>5.6.6</elasticsearch.version>",
                "+    <elasticsearch.version>5.6.7</elasticsearch.version>",
                "@@ -2296,3 +2296,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.6</link>",
                "+            <link>https://www.javadoc.io/doc/org.elasticsearch/elasticsearch/5.6.7</link>",
                "           </links>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "41cab68c5c879cc5ed5fc54a81a41949fed9a7fa"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6d7fb400d2ec9d96b96532fca9ddce6ef0596d37",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1516348964,
            "hunks": 4,
            "message": "Upgrading JUnit 5",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5107bf7e09..9d2e297fd5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -409,3 +409,3 @@ under the License.",
                "-    <junit.version>5.1.0-M1</junit.version>",
                "+    <junit.version>5.0.3</junit.version>",
                "@@ -1821,3 +1821,3 @@ under the License.",
                "-        <!-- Keep the following plugins on 2.19.1 / 1.0.1 until",
                "+        <!-- Keep the following plugins on 2.19.1 / 1.0.3 until",
                "         https://github.com/junit-team/junit5/issues/809 is properly fixed -->",
                "@@ -1837,3 +1837,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.1.0-M1</version>",
                "+              <version>1.0.3</version>",
                "             </dependency>",
                "@@ -1855,3 +1855,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.1.0-M1</version>",
                "+              <version>1.0.3</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f670e2fa38d0862c9b5d15639e8fb8dee5770936",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511181333,
            "hunks": 2,
            "message": "Minor streams optimisation",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "index 4e84455bf4..fa3ca9808f 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "@@ -231,3 +231,3 @@ public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> ext",
                "             authorized = anyDAO.findDynRealms(key).stream().",
                "-                    filter(dynRealm -> effectiveRealms.contains(dynRealm)).findFirst().isPresent();",
                "+                    anyMatch(dynRealm -> effectiveRealms.contains(dynRealm));",
                "         }",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "index 8d94807451..103dae82ec 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java",
                "@@ -124,3 +124,3 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {",
                "             authorized = groupDAO.findDynRealms(key).stream().",
                "-                    filter(dynRealm -> effectiveRealms.contains(dynRealm)).findFirst().isPresent();",
                "+                    anyMatch(dynRealm -> effectiveRealms.contains(dynRealm));",
                "         }"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "53c8976e7a7b8eb8e9325f6ab376076e9dfe31d2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507816235,
            "hunks": 1,
            "message": "Temporary disabling the Travis CI cache to workaround problems there",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 4e349d02ee..b5bf59fe5e 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -16,5 +16,5 @@",
                " sudo: false",
                "-cache:",
                "-  directories:",
                "-  - $HOME/.m2",
                "+#cache:",
                "+#  directories:",
                "+#  - $HOME/.m2",
                " language: java"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "88f4b03e39be6d13b879b5b46e93646da233447f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1517332140,
            "hunks": 2,
            "message": "Updating WSS4J",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f93a5a40d6..c2fd20ecca 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -620,3 +620,3 @@ under the License.",
                "         <artifactId>wss4j-ws-security-dom</artifactId>",
                "-        <version>2.1.11</version>",
                "+        <version>2.1.12</version>",
                "         <exclusions>",
                "@@ -630,2 +630,6 @@ under the License.",
                "           </exclusion>",
                "+          <exclusion>",
                "+            <groupId>com.fasterxml.woodstox</groupId>",
                "+            <artifactId>woodstox-core</artifactId>",
                "+          </exclusion>",
                "         </exclusions>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "42c861c6eea78a493f1b903ffe3897d922960a90",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515512832,
            "hunks": 8,
            "message": "Finally using the official javax.ws.rs.PATCH",
            "diff": [
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "index 144fcf229b..d5675ea8b0 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "@@ -22,2 +22,3 @@ import javax.validation.constraints.NotNull;",
                " import javax.ws.rs.Consumes;",
                "+import javax.ws.rs.PATCH;",
                " import javax.ws.rs.POST;",
                "@@ -28,3 +29,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.AnyObjectPatch;",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "index c060bdbec2..7bba846e34 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "@@ -24,2 +24,3 @@ import javax.ws.rs.Consumes;",
                " import javax.ws.rs.GET;",
                "+import javax.ws.rs.PATCH;",
                " import javax.ws.rs.POST;",
                "@@ -31,3 +32,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.GroupPatch;",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "index 397217db18..f28d894bab 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "@@ -25,2 +25,3 @@ import javax.ws.rs.DefaultValue;",
                " import javax.ws.rs.GET;",
                "+import javax.ws.rs.PATCH;",
                " import javax.ws.rs.POST;",
                "@@ -32,3 +33,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "index 310e631f6a..6525283691 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "@@ -23,2 +23,3 @@ import javax.ws.rs.Consumes;",
                " import javax.ws.rs.DefaultValue;",
                "+import javax.ws.rs.PATCH;",
                " import javax.ws.rs.POST;",
                "@@ -30,3 +31,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.cxf.jaxrs.ext.PATCH;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;"
            ],
            "changed_files": [
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "003982086477f7258d60becf72ecdd12424a6789",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512988824,
            "hunks": 1,
            "message": "Fix checkstyle",
            "diff": [
                "diff --git a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "index 03f78e6d60..46faebc4f3 100644",
                "--- a/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "+++ b/ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java",
                "@@ -347,4 +347,4 @@ public class SCIMDataBinder {",
                "                         try {",
                "-                            UserTO userManager = userLogic.read(",
                "-                                    attrs.get(conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "+                            UserTO userManager = userLogic.read(attrs.get(",
                "+                                    conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));",
                "                             manager.setValue(userManager.getKey());"
            ],
            "changed_files": [
                "ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4b12c676f5864a5fba69ff9d50aa994b976a00c1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507819097,
            "hunks": 1,
            "message": "Just go without Travis CI cache",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 4e349d02ee..0723adaa84 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -16,5 +16,2 @@",
                " sudo: false",
                "-cache:",
                "-  directories:",
                "-  - $HOME/.m2",
                " language: java"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "49894bf7c86a7445db8635e923d8abc26d4a84e2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507818131,
            "hunks": 1,
            "message": "Now restoring Travis CI cache",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index b5bf59fe5e..4e349d02ee 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -16,5 +16,5 @@",
                " sudo: false",
                "-#cache:",
                "-#  directories:",
                "-#  - $HOME/.m2",
                "+cache:",
                "+  directories:",
                "+  - $HOME/.m2",
                " language: java"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "189c5ccacc023828562fa1200819857c59459d84",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512031481,
            "hunks": 1,
            "message": "Fixing Optional",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index dada9f17e1..c11dd4cdfa 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -407,3 +407,3 @@ public class MappingManagerImpl implements MappingManager {",
                "                 Group group = groupDAO.findByName(intAttrName.getEnclosingGroup());",
                "-                if (group == null || groupableRelatable.getMembership(group.getKey()) == null) {",
                "+                if (group == null || !groupableRelatable.getMembership(group.getKey()).isPresent()) {",
                "                     LOG.warn(\"No membership for {} in {}, ignoring\","
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "48a1e0da3a7ddcbf2d1042464a2f8a1b44bba84f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508834968,
            "hunks": 1,
            "message": "Upgrading cargo",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 8a5e76ee59..56486ab228 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1864,3 +1864,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.4</version>",
                "+          <version>1.6.5</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bb9a4f7a00c83358415099d1513cce1c63d12f0a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510558702,
            "hunks": 1,
            "message": "Upgrading JUnit - unfortunately, latest surefire / failsafe plugins are still not working properly",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 2d7c807c86..23d4c0ec94 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -409,3 +409,3 @@ under the License.",
                "-    <junit.version>5.0.1</junit.version>",
                "+    <junit.version>5.0.2</junit.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "59295df483dbc10eb681963ed4e0152f5e19dc62",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513070078,
            "hunks": 1,
            "message": "Upgrading Flowable",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5f8af643c9..81650b054e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -386,3 +386,3 @@ under the License.",
                "-    <flowable.version>6.2.0</flowable.version>",
                "+    <flowable.version>6.2.1</flowable.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e787790ad11417367739f65e34c5b2bd463f4f6a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510559438,
            "hunks": 2,
            "message": "Missing update of junit-platform-surefire-provider - situation unchanged though",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 23d4c0ec94..6713569af2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1837,3 +1837,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.0.1</version>",
                "+              <version>1.0.2</version>",
                "             </dependency>",
                "@@ -1855,3 +1855,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.0.1</version>",
                "+              <version>1.0.2</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "13744eb197ab9d62f32db12f0a0bd051a4648dee",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513352423,
            "hunks": 1,
            "message": "White noise",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "index 603026fd13..c59e5d795e 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "@@ -72,3 +72,3 @@ public class GroupResource extends BaseResource {",
                "-            HashMap<String, String> groups = new HashMap<>();",
                "+            Map<String, String> groups = new HashMap<>();",
                "             for (GroupTO groupTO : groupTOs) {"
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9892ee6d60de05bc7f415cd0512727c46812b167",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1507619261,
            "hunks": 2,
            "message": "White noise: remove useless import static",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "index d212d9dd5e..972d9daec7 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.client.console.panels;",
                "-import static org.apache.syncope.client.console.panels.DirectoryPanel.LOG;",
                "-",
                " import java.util.ArrayList;",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "index 6389909545..d4e816b2e0 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.logic;",
                "-import static org.apache.syncope.core.logic.AbstractLogic.LOG;",
                "-",
                " import java.lang.reflect.Method;"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cc046f119f8229c2f1b1836b1dfbcacc32c75775",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1512372306,
            "hunks": 2,
            "message": "Fix typo",
            "diff": [
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "index c4232ffc5c..09858bbdee 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java",
                "@@ -68,3 +68,3 @@ public class FlowableDefinitionLoader implements SyncopeLoader {",
                "                     list();",
                "-            LOG.debug(FlowableUserWorkflowAdapter.WF_PROCESS_ID + \" Activiti processes in repository: {}\", processes);",
                "+            LOG.debug(FlowableUserWorkflowAdapter.WF_PROCESS_ID + \" Flowable processes in repository: {}\", processes);",
                "@@ -81,3 +81,3 @@ public class FlowableDefinitionLoader implements SyncopeLoader {",
                "-                LOG.debug(\"Activiti Workflow definition loaded for domain {}\", entry.getKey());",
                "+                LOG.debug(\"Flowable Workflow definition loaded for domain {}\", entry.getKey());",
                "             }"
            ],
            "changed_files": [
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDefinitionLoader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "26edcb87c645e0a4ff2bacaec576e09d96709b96",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511447752,
            "hunks": 7,
            "message": "Upgrading Groovy, Flowable, JUnit",
            "diff": [
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "index 2862380a95..22af44293c 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "@@ -69,3 +69,2 @@ import org.flowable.engine.form.TaskFormData;",
                " import org.flowable.engine.history.HistoricActivityInstance;",
                "-import org.flowable.engine.history.HistoricTaskInstance;",
                " import org.flowable.engine.impl.persistence.entity.HistoricFormPropertyEntity;",
                "@@ -75,3 +74,4 @@ import org.flowable.engine.repository.ProcessDefinition;",
                " import org.flowable.engine.runtime.ProcessInstance;",
                "-import org.flowable.engine.task.Task;",
                "+import org.flowable.task.api.Task;",
                "+import org.flowable.task.api.history.HistoricTaskInstance;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/SyncopeEntitiesVariableType.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/SyncopeEntitiesVariableType.java",
                "index 7fd0faac18..81c2d88052 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/SyncopeEntitiesVariableType.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/SyncopeEntitiesVariableType.java",
                "@@ -21,3 +21,3 @@ package org.apache.syncope.core.workflow.flowable;",
                " import org.apache.syncope.core.persistence.api.entity.Entity;",
                "-import org.flowable.engine.impl.variable.SerializableType;",
                "+import org.flowable.variable.service.impl.types.SerializableType;",
                "diff --git a/pom.xml b/pom.xml",
                "index a30689b135..1a44f2a1d0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -384,5 +384,5 @@ under the License.",
                "-    <groovy.version>2.4.12</groovy.version>",
                "+    <groovy.version>2.5.0-beta-2</groovy.version>",
                "-    <flowable.version>6.1.2</flowable.version>",
                "+    <flowable.version>6.2.0</flowable.version>",
                "@@ -409,3 +409,3 @@ under the License.",
                "-    <junit.version>5.0.2</junit.version>",
                "+    <junit.version>5.1.0-M1</junit.version>",
                "@@ -1837,3 +1837,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.0.2</version>",
                "+              <version>1.1.0-M1</version>",
                "             </dependency>",
                "@@ -1855,3 +1855,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.0.2</version>",
                "+              <version>1.1.0-M1</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/SyncopeEntitiesVariableType.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bb6aa1e16265076832e94725383ed363c9c2c215",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510400596,
            "hunks": 1,
            "message": "Re-enabling Eclipse Plugin",
            "diff": [
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index d301f0d7d7..bd2152b70f 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -38,3 +38,3 @@ under the License.",
                "   <modules>",
                "-    <!--<module>eclipse</module>-->",
                "+    <module>eclipse</module>",
                "     <module>netbeans</module>"
            ],
            "changed_files": [
                "ide/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0c411285d63efdb59ce301fa87ecbf067e74a633",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513071164,
            "hunks": 1,
            "message": "Unexpected property name change with lastest Flowable",
            "diff": [
                "diff --git a/core/workflow-flowable/src/main/resources/workflowFlowableContext.xml b/core/workflow-flowable/src/main/resources/workflowFlowableContext.xml",
                "index aed5e2e50a..237c4c8434 100644",
                "--- a/core/workflow-flowable/src/main/resources/workflowFlowableContext.xml",
                "+++ b/core/workflow-flowable/src/main/resources/workflowFlowableContext.xml",
                "@@ -50,3 +50,3 @@ under the License.",
                "-    <property name=\"idmProcessEngineConfigurator\" ref=\"syncopeIdmEngineConfigurator\"/>",
                "+    <property name=\"idmEngineConfigurator\" ref=\"syncopeIdmEngineConfigurator\"/>",
                "     <property name=\"customPreVariableTypes\">"
            ],
            "changed_files": [
                "core/workflow-flowable/src/main/resources/workflowFlowableContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4a0b748dae05a017562b781bc75dd30c025c7601",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508834858,
            "hunks": 7,
            "message": "Wildfly 11 support",
            "diff": [
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index aebc662743..9b5195b9b9 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -798,2 +798,8 @@ under the License.",
                "+        <dependency>",
                "+          <groupId>org.reactivestreams</groupId>",
                "+          <artifactId>reactive-streams</artifactId>",
                "+          <version>1.0.1</version>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "@@ -830,5 +836,5 @@ under the License.",
                "               <container>",
                "-                <containerId>wildfly10x</containerId>",
                "+                <containerId>wildfly11x</containerId>",
                "                 <zipUrlInstaller>",
                "-                  <url>http://download.jboss.org/wildfly/10.1.0.Final/wildfly-10.1.0.Final.zip</url>",
                "+                  <url>http://download.jboss.org/wildfly/11.0.0.Final/wildfly-11.0.0.Final.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "index 5daee06e1f..517d0ac81a 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly10x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly11x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "@@ -115,2 +115,2 @@ under the License.",
                "-</beans>",
                "\\ No newline at end of file",
                "+</beans>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "index 00c72d48c6..8fe3c0c4c1 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly10x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly11x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>"
            ],
            "changed_files": [
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "15a828130fee079e422e6fe4c49c662e343766ed",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511424281,
            "hunks": 1,
            "message": "Upgrading Groovy",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 59f6278790..72d6edb114 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -384,3 +384,3 @@ under the License.",
                "-    <groovy.version>2.4.12</groovy.version>",
                "+    <groovy.version>2.4.13</groovy.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "21dff17927ab0df646de8d550aaaeb386571fe45",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508834816,
            "hunks": 8,
            "message": "Tomcat 9, cargo 1.6.5 and surefire / failsafe back to 2.19.1 as temporary downgrade for junit-platform-surefire-provider",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index edd7463f97..92bc222d32 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -483,3 +483,3 @@ under the License.",
                "-    <tomcat.version>8.5.23</tomcat.version>",
                "+    <tomcat.version>9.0.1</tomcat.version>",
                "@@ -1797,6 +1797,6 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.4</version>",
                "+          <version>1.6.5</version>",
                "           <configuration>",
                "             <container>",
                "-              <containerId>tomcat8x</containerId>",
                "+              <containerId>tomcat9x</containerId>",
                "               <zipUrlInstaller>",
                "@@ -1813,2 +1813,4 @@ under the License.",
                "+        <!-- Keep the following plugins on 2.19.1 / 1.0.1 until",
                "+        https://github.com/junit-team/junit5/issues/809 is properly fixed -->",
                "         <plugin>",
                "@@ -1816,3 +1818,3 @@ under the License.",
                "           <artifactId>maven-surefire-plugin</artifactId>",
                "-          <version>2.20.1</version>",
                "+          <version>2.19.1</version>",
                "           <configuration>",
                "@@ -1827,3 +1829,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.1.0-SNAPSHOT</version>",
                "+              <version>1.0.1</version>",
                "             </dependency>",
                "@@ -1834,3 +1836,3 @@ under the License.",
                "           <artifactId>maven-failsafe-plugin</artifactId>",
                "-          <version>2.20.1</version>",
                "+          <version>2.19.1</version>",
                "           <configuration>",
                "@@ -1845,3 +1847,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.1.0-SNAPSHOT</version>",
                "+              <version>1.0.1</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d0d0909817e948e262711cada64a95e83eaef3a4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1508834921,
            "hunks": 8,
            "message": "Updating docs to Tomcat 9 and Wildfly 11",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/systemRequirements.adoc b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "index 09ee9be54b..f659705c30 100644",
                "--- a/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "+++ b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "@@ -38,6 +38,6 @@ Apache Syncope {docVersion} is verified with the following Java EE containers:",
                "- . http://tomcat.apache.org/download-80.cgi[Apache Tomcat 8 and 8.5^]",
                "+ . http://tomcat.apache.org/download-90.cgi[Apache Tomcat 9^]",
                "  . https://glassfish.java.net/[Glassfish 4.1^]",
                "  . http://www.payara.fish/[Payara Server^]",
                "- . http://www.wildfly.org/[Wildfly 9 and 10^]",
                "+ . http://www.wildfly.org/[Wildfly 11^]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "index a5013f9914..53b2d4f46f 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "@@ -33,7 +33,5 @@ for the Master domain.",
                " Each JavaEE Container provides its own way to accomplish this task:",
                "-  * https://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html[Apache Tomcat 8^]",
                "-  * https://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html[Apache Tomcat 8.5^]",
                "+  * https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html[Apache Tomcat 9^]",
                "   * https://javaee.github.io/glassfish/doc/4.0/administration-guide.pdf[Glassfish 4.1^]",
                "   * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara^]",
                "-  * https://docs.jboss.org/author/display/WFLY9/DataSource+configuration[Wildfly 9^]",
                "-  * https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 10^]",
                "\\ No newline at end of file",
                "+  * https://docs.jboss.org/author/display/WFLY11/DataSource+configuration[Wildfly 11^]",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "index 917ccea5ee..724b43e432 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "@@ -20,3 +20,3 @@",
                "-===== Apache Tomcat 8 and 8.5",
                "+===== Apache Tomcat 9",
                "@@ -74,3 +74,3 @@ provides a datasource named `jdbc/syncopeMasterDataSource`.",
                "-===== Wildfly 9 and 10",
                "+===== Wildfly 11",
                "@@ -105,2 +105,8 @@ Add",
                "     </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.reactivestreams</groupId>",
                "+      <artifactId>reactive-streams</artifactId>",
                "+      <version>1.0.1</version>",
                "+    </dependency>",
                " ...."
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/systemRequirements.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e76828e13700f0b156a65ea612cf515c465568ff",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1510559329,
            "hunks": 1,
            "message": "Adjusting the IDE Eclipse to new deps",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties",
                "index 68bbae90e3..3a135e7a37 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties",
                "@@ -25,4 +25,2 @@ bin.includes = plugin.xml,\\",
                "       src/main/resources/icons/,\\",
                "-      lib/commons-codec.jar,\\",
                "-      lib/commons-collections4.jar,\\",
                "       lib/commons-lang3.jar,\\"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "63ea870ef87301bc75708ba2de5870e7549dfe9f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1511880901,
            "hunks": 2,
            "message": "Removing Camel deprecation",
            "diff": [
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java",
                "index 30ae2b3e5e..61be1490d7 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java",
                "@@ -58,3 +58,3 @@ abstract class AbstractCamelProvisioningManager {",
                "-        DefaultMessage message = new DefaultMessage();",
                "+        DefaultMessage message = new DefaultMessage(camelContext);",
                "         message.setBody(obj);",
                "@@ -74,3 +74,3 @@ abstract class AbstractCamelProvisioningManager {",
                "-        DefaultMessage message = new DefaultMessage();",
                "+        DefaultMessage message = new DefaultMessage(camelContext);",
                "         message.setBody(body);"
            ],
            "changed_files": [
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.0",
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9",
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "71480a10802b001cdd729c18debf6bb2fbc5481b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1515085415,
            "hunks": 1,
            "message": "Reverting JDeb upgrade, as 1.6. is not supported for Java 7",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0009f0b668..3d252ec2d8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1932,3 +1932,3 @@ under the License.",
                "           <artifactId>jdeb</artifactId>",
                "-          <version>1.6</version>",
                "+          <version>1.5</version>",
                "         </plugin>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "33fda85dc6992ba1c63299f9a1882b8ba10a743a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1513758746,
            "hunks": 4,
            "message": "fix for paged dynamic membership loading",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index 03c12198cb..23c7af6850 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -300,3 +300,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         if (merged.getUDynMembership() != null) {",
                "-            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+            clearUDynMembers(merged);",
                "+            int count = countUDynMembers(group);",
                "+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "                 List<User> matching = searchDAO().search(",
                "@@ -309,4 +311,2 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-                clearUDynMembers(merged);",
                "-",
                "                 for (User user : matching) {",
                "@@ -322,3 +322,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         for (ADynGroupMembership memb : merged.getADynMemberships()) {",
                "-            for (int page = 1; page <= (countADynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "+            clearADynMembers(merged);",
                "+            int count = countADynMembers(group);",
                "+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "                 List<AnyObject> matching = searchDAO().search(",
                "@@ -331,4 +333,2 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-                clearADynMembers(merged);",
                "-",
                "                 for (AnyObject anyObject : matching) {"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16",
                "syncope-2.0.7",
                "syncope-2.0.8",
                "syncope-2.0.9"
            ],
            "matched_rules": []
        }
    ]
}
