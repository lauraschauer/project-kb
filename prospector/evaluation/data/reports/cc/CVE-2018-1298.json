{
    "advisory_record": {
        "cve_id": "CVE-2018-1298",
        "description": "A Denial of Service vulnerability was found in Apache Qpid Broker-J 7.0.0 in functionality for authentication of connections for AMQP protocols 0-8, 0-9, 0-91 and 0-10 when PLAIN or XOAUTH2 SASL mechanism is used. The vulnerability allows unauthenticated attacker to crash the broker instance. AMQP 1.0 and HTTP connections are not affected. An authentication of incoming AMQP connections in Apache Qpid Broker-J is performed by special entities called \"Authentication Providers\". Each Authentication Provider can support several SASL mechanisms which are offered to the connecting clients as part of SASL negotiation process. The client chooses the most appropriate SASL mechanism for authentication. Authentication Providers of following types supports PLAIN SASL mechanism: Plain, PlainPasswordFile, SimpleLDAP, Base64MD5PasswordFile, MD5, SCRAM-SHA-256, SCRAM-SHA-1. XOAUTH2 SASL mechanism is supported by Authentication Providers of type OAuth2. If an AMQP port is configured with any of these Authentication Providers, the Broker may be vulnerable.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1518048000,
        "updated_timestamp": 1518184621,
        "repository_url": null,
        "references": {
            "": 188,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 6,
            "https://github.co/hiddenchars": 6,
            "https://issues.apache.org/jira/browse/QPID-8046": 4,
            "https://git-wip-us.apache.org/repos/asf?p=qpid-broker-j.git;h=de509dd": 4,
            "https://git-wip-us.apache.org/repos/asf?p=qpid-broker-j.git;h=30ca170": 4,
            "https://git-wip-us.apache.org/repos/asf?p=qpid-broker-j.git;h=4b9fb37": 4,
            "https://github.com/features/actions": 3,
            "https://github.com/features/packages": 3,
            "https://github.com/features/security": 3,
            "https://github.com/features/codespaces": 3,
            "https://github.com/features/copilot": 3,
            "https://github.com/features/code-review": 3,
            "https://github.com/features/issues": 3,
            "https://github.com/features/discussions": 3,
            "https://github.com/features": 3,
            "https://docs.github.com": 3,
            "https://skills.github.com": 3,
            "https://github.blog": 3,
            "https://github.com/enterprise": 3,
            "https://github.com/team": 3,
            "https://github.com/enterprise/startups": 3,
            "https://github.com/solutions/industries/healthcare": 3,
            "https://github.com/solutions/industries/financial-services": 3,
            "https://github.com/solutions/industries/manufacturing": 3,
            "https://github.com/solutions/ci-cd": 3,
            "https://github.com/solutions/devops": 3,
            "https://github.com/solutions/devsecops": 3,
            "https://resources.github.com/learn/pathways": 3,
            "https://resources.github.com": 3,
            "https://github.com/customer-stories": 3,
            "https://partner.github.com": 3,
            "https://github.com/readme": 3,
            "https://github.com/topics": 3,
            "https://github.com/trending": 3,
            "https://github.com/collections": 3,
            "https://github.com/enterprise/advanced-security": 3,
            "https://github.com/pricing": 3,
            "https://github.com": 3,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 3,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 3,
            "https://github.com/security": 3,
            "https://www.githubstatus.com/": 3,
            "https://docs.github.com/": 3,
            "https://support.github.com?tags=dotcom-footer": 3,
            "https://lists.apache.org/thread.html/d9087e9e57c9b6376754e2b4ea8cd5e9ae6449ed17fc384640c9c9e1%40%3Cusers.qpid.apache.org%3E": 2,
            "https://tools.ietf.org/html/rfc4616": 2,
            "https://docs.atlassian.com/jira/jcore-docs-0820/": 2,
            "http://www.atlassian.com/software/jira": 2,
            "commit::de509dd955229a395c086a7cca874dc55306648a": 2,
            "commit::30ca170c42c400b41340a81c6a69d33aa19bf189": 2,
            "https://issues.apache.org/jira/secure/MyJiraHome.jspa": 1,
            "https://selfserve.apache.org/jira-account.html": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1298": 1,
            "https://www.atlassian.com/software/jira": 1,
            "http://www.atlassian.com/": 1
        },
        "affected_products": [
            "PLAIN",
            "HTTP",
            "Authentication",
            "Qpid",
            "Plain",
            "Apache",
            "Service",
            "Apache Qpid Broker-J",
            "PlainPasswordFile",
            "SCRAM",
            "Broker",
            "Denial",
            "Providers",
            "AMQP",
            "Provider"
        ],
        "versions": {
            "status": "affected",
            "version": "7.0.0"
        },
        "files": [
            "PLAIN",
            "HTTP",
            "SimpleLDAP",
            "SCRAM-SHA-256",
            "XOAUTH2",
            "SASL",
            "PlainPasswordFile",
            "Base64MD5PasswordFile",
            "SCRAM-SHA-1",
            "AMQP"
        ],
        "keywords": [
            "support",
            "client",
            "xoauth2",
            "find",
            "negotiation",
            "base64md5passwordfile",
            "part",
            "denial",
            "follow",
            "protocol",
            "instance",
            "connection",
            "simpleldap",
            "choose",
            "mechanism",
            "oauth2",
            "allow",
            "call",
            "port",
            "functionality",
            "amqp",
            "plainpasswordfile",
            "process",
            "apache",
            "attacker",
            "affect",
            "authentication",
            "broker",
            "offer",
            "perform",
            "service",
            "qpid",
            "type",
            "sasl",
            "crash",
            "entity",
            "providers",
            "plain",
            "http",
            "connect",
            "scram",
            "provider",
            "vulnerability",
            "configure"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "de509dd955229a395c086a7cca874dc55306648a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511276450,
            "hunks": 14,
            "message": "QPID-8046: [Broker-J] Allow SASL mechanisms PLAIN and XOAUTH2 to not require initial response Cherry picked from 4eb2ea6",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "index 955136c3cb..db2f262833 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "@@ -33,2 +33,8 @@ public class OAuth2Negotiator implements SaslNegotiator",
                " {",
                "+    enum State",
                "+    {",
                "+        INITIAL,",
                "+        CHALLENGE_SENT,",
                "+        COMPLETE",
                "+    }",
                "@@ -38,3 +44,3 @@ public class OAuth2Negotiator implements SaslNegotiator",
                "     private OAuth2AuthenticationProvider<?> _authenticationProvider;",
                "-    private volatile boolean _isComplete;",
                "+    private volatile State _state = State.INITIAL;",
                "@@ -50,12 +56,20 @@ public class OAuth2Negotiator implements SaslNegotiator",
                "     {",
                "-        if (_isComplete)",
                "+        if (_state == State.COMPLETE)",
                "         {",
                "             return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "-                                            new IllegalStateException(",
                "-                                                    \"Multiple Authentications not permitted.\"));",
                "+                                            new IllegalStateException(\"Multiple Authentications not permitted.\"));",
                "         }",
                "-        else",
                "+        else if (_state == State.INITIAL && (response == null || response.length == 0))",
                "+        {",
                "+            _state = State.CHALLENGE_SENT;",
                "+            return new AuthenticationResult(new byte[0], AuthenticationResult.AuthenticationStatus.CONTINUE);",
                "+        }",
                "+",
                "+        _state = State.COMPLETE;",
                "+        if (response == null || response.length == 0)",
                "         {",
                "-            _isComplete = true;",
                "+            return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "+                                            new IllegalArgumentException(\"Invalid OAuth2 client response.\"));",
                "         }",
                "+",
                "         Map<String, String> responsePairs = splitResponse(response);",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "index 065080f9bc..e56f8cae2e 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "@@ -31,2 +31,9 @@ public class PlainNegotiator implements SaslNegotiator",
                " {",
                "+    enum State",
                "+    {",
                "+        INITIAL,",
                "+        CHALLENGE_SENT,",
                "+        COMPLETE",
                "+    }",
                "+",
                "     public static final String MECHANISM = \"PLAIN\";",
                "@@ -35,3 +42,3 @@ public class PlainNegotiator implements SaslNegotiator",
                "     private UsernamePasswordAuthenticationProvider _usernamePasswordAuthenticationProvider;",
                "-    private volatile boolean _isComplete;",
                "+    private volatile State _state = State.INITIAL;",
                "     private volatile String _username;",
                "@@ -46,12 +53,21 @@ public class PlainNegotiator implements SaslNegotiator",
                "     {",
                "-        if (_isComplete)",
                "+        if (_state == State.COMPLETE)",
                "         {",
                "             return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "-                                            new IllegalStateException(",
                "-                                                    \"Multiple Authentications not permitted.\"));",
                "+                                            new IllegalStateException(\"Multiple Authentications not permitted.\"));",
                "+        }",
                "+        else if (_state == State.INITIAL && (response == null || response.length == 0))",
                "+        {",
                "+            _state = State.CHALLENGE_SENT;",
                "+            return new AuthenticationResult(new byte[0], AuthenticationResult.AuthenticationStatus.CONTINUE);",
                "         }",
                "-        else",
                "+",
                "+        _state = State.COMPLETE;",
                "+        if (response == null || response.length == 0)",
                "         {",
                "-            _isComplete = true;",
                "+            return new AuthenticationResult(AuthenticationResult.AuthenticationStatus.ERROR,",
                "+                                            new IllegalArgumentException(",
                "+                                                    \"Invalid PLAIN encoding, authzid null terminator not found\"));",
                "         }",
                "+",
                "         int authzidNullPosition = findNullPosition(response, 0);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8046": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4eb2ea6dfdea353b115efa5389a0a060c052d777"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: QPID-8046",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: PLAIN, XOAUTH2, SASL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PLAIN",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/oauth2/OAuth2Negotiator.java, broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: sasl, xoauth2, plain, mechanism, oauth2, allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: oauth2, sasl, plain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8046",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fcca9d20a04aa99943dc4ddd8a1bb4502fe0e9f3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516188575,
            "hunks": 3,
            "message": "QPID-8046: [Broker-J] [PlainNegotiator] Eliminate redundant UTF-8/UnsupportedEncodingException catch block",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "index e56f8cae2e..d5fe74e900 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                "@@ -22,3 +22,3 @@ package org.apache.qpid.server.security.auth.sasl.plain;",
                "-import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                " import java.nio.charset.StandardCharsets;",
                "@@ -39,3 +39,3 @@ public class PlainNegotiator implements SaslNegotiator",
                "     public static final String MECHANISM = \"PLAIN\";",
                "-    private static final String UTF8 = StandardCharsets.UTF_8.name();",
                "+    private static final Charset UTF8 = StandardCharsets.UTF_8;",
                "@@ -88,13 +88,6 @@ public class PlainNegotiator implements SaslNegotiator",
                "         String password;",
                "-        try",
                "-        {",
                "-            _username = new String(response, authzidNullPosition + 1, authcidNullPosition - authzidNullPosition - 1, UTF8);",
                "-            // TODO: should not get pwd as a String but as a char array...",
                "-            int passwordLen = response.length - authcidNullPosition - 1;",
                "-            password = new String(response, authcidNullPosition + 1, passwordLen, UTF8);",
                "-        }",
                "-        catch (UnsupportedEncodingException e)",
                "-        {",
                "-            throw new RuntimeException(\"JVM does not support UTF8\", e);",
                "-        }",
                "+        _username = new String(response, authzidNullPosition + 1, authcidNullPosition - authzidNullPosition - 1, UTF8);",
                "+        // TODO: should not get pwd as a String but as a char array...",
                "+        int passwordLen = response.length - authcidNullPosition - 1;",
                "+        password = new String(response, authcidNullPosition + 1, passwordLen, UTF8);",
                "         return _usernamePasswordAuthenticationProvider.authenticate(_username, password);"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8046": "",
                "UTF-8": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4b9fb37abbe882193b16595ed7b8e9d8383f59e1"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: QPID-8046",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PLAIN",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainNegotiator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: support, port, plain",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sasl, plain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8046, UTF-8",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "041674ddbf2b1ae693f51d7e2cd9f9025a268632",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515585351,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J] [AMQP 1.0]  Add SASL protocol test ensuring that empty SASL frames are rejected (cherry picked from commit 7d5a86962837103a7a75f92dca5e35220cb89668)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 832ad4d139..fc84389d43 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -88,2 +88,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    private static final SaslFrameBody SASL_EMPTY_FRAME = (channel, conn) -> {",
                "+        throw new UnsupportedOperationException();",
                "+    };",
                "+",
                "     private static final Set<String> CONTAINER_IDS = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "@@ -206,2 +210,8 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public Interaction saslEmptyFrame() throws Exception",
                "+    {",
                "+        sendPerformative(SASL_EMPTY_FRAME);",
                "+        return this;",
                "+    }",
                "+",
                "     private SaslInit copySaslInit(final SaslInit saslInit)",
                "@@ -1091,3 +1101,2 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d5a86962837103a7a75f92dca5e35220cb89668"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: SASL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, sasl, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff2980e2d6e9520ba204acd41a78e9ee412a2c11",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511284602,
            "hunks": 38,
            "message": "QPID-8038: [Broker-J][AMQP 0-10] Add protocol tests for AMQP 0-10",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e7d58bb6fa..0c0c445179 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -200,2 +200,3 @@",
                "     <module>systests/protocol-tests-amqp-0-8</module>",
                "+    <module>systests/protocol-tests-amqp-0-10</module>",
                "     <module>systests/protocol-tests-amqp-1-0</module>",
                "@@ -429,2 +430,8 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-amqp-0-10</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "@@ -1334,22 +1341,22 @@",
                "-      <profile>",
                "-          <id>java-json.0-10</id>",
                "-          <activation>",
                "-              <property>",
                "-                  <name>profile</name>",
                "-                  <value>java-json.0-10</value>",
                "-              </property>",
                "-          </activation>",
                "-          <properties>",
                "-              <profile>java-json.0-10</profile>",
                "-              <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes Java010Excludes</profile.specific.excludes>",
                "-              <profile.broker.version>v0_10</profile.broker.version>",
                "-              <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "-              <profile.broker.persistent>true</profile.broker.persistent>",
                "-              <profile.virtualhostnode.type>JSON</profile.virtualhostnode.type>",
                "-              <profile.virtualhostnode.context.blueprint>{\"type\":\"BDB\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "-          </properties>",
                "-      </profile>",
                "-",
                "-      <profile>",
                "+    <profile>",
                "+      <id>java-json.0-10</id>",
                "+      <activation>",
                "+        <property>",
                "+          <name>profile</name>",
                "+          <value>java-json.0-10</value>",
                "+        </property>",
                "+      </activation>",
                "+      <properties>",
                "+        <profile>java-json.0-10</profile>",
                "+        <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes Java010Excludes</profile.specific.excludes>",
                "+        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "+        <profile.broker.persistent>true</profile.broker.persistent>",
                "+        <profile.virtualhostnode.type>JSON</profile.virtualhostnode.type>",
                "+        <profile.virtualhostnode.context.blueprint>{\"type\":\"BDB\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "+      </properties>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "       <id>cpp</id>",
                "diff --git a/systests/protocol-tests-amqp-0-10/pom.xml b/systests/protocol-tests-amqp-0-10/pom.xml",
                "new file mode 100644",
                "index 0000000000..3acf129d4c",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/pom.xml",
                "@@ -0,0 +1,109 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  contributor license agreements.  See the NOTICE file distributed with",
                "+  this work for additional information regarding copyright ownership.",
                "+  The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  (the \"License\"); you may not use this file except in compliance with",
                "+  the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+  Unless required by applicable law or agreed to in writing, software",
                "+  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  See the License for the specific language governing permissions and",
                "+  limitations under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>protocol-tests-amqp-0-10</artifactId>",
                "+    <name>Apache Qpid Protocol Tests for AMQP 0-10</name>",
                "+    <description>Tests for AMQP 0-10</description>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-10-protocol</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-test-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>protocol-tests-core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-logging-logback</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-memory-store</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "+            <optional>true</optional>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+       <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>test</scope>",
                "+       </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-protocol-tests-0-10.json</qpid.initialConfigurationLocation>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Assembler.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Assembler.java",
                "new file mode 100644",
                "index 0000000000..aac39b6d1b",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Assembler.java",
                "@@ -0,0 +1,264 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.BBDecoder;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.DeliveryProperties;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Frame;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Header;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageProperties;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.NetworkDelegate;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.NetworkEvent;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolError;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolEvent;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolHeader;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Struct;",
                "+",
                "+public class Assembler implements NetworkDelegate",
                "+{",
                "+",
                "+    private static final int ARRAY_SIZE = 0xFF;",
                "+    private final Method[] _incompleteMethodArray = new Method[ARRAY_SIZE + 1];",
                "+    private final Map<Integer, Method> _incompleteMethodMap = new HashMap<>();",
                "+",
                "+    private final ProtocolEventReceiver receiver;",
                "+    private final Map<Integer, List<Frame>> segments;",
                "+    private static final ThreadLocal<BBDecoder> _decoder = ThreadLocal.withInitial(BBDecoder::new);",
                "+",
                "+    Assembler(ProtocolEventReceiver receiver)",
                "+    {",
                "+        this.receiver = receiver;",
                "+        segments = new HashMap<>();",
                "+    }",
                "+",
                "+    private int segmentKey(Frame frame)",
                "+    {",
                "+        return (frame.getTrack() + 1) * frame.getChannel();",
                "+    }",
                "+",
                "+    private List<Frame> getSegment(Frame frame)",
                "+    {",
                "+        return segments.get(segmentKey(frame));",
                "+    }",
                "+",
                "+    private void setSegment(Frame frame, List<Frame> segment)",
                "+    {",
                "+        int key = segmentKey(frame);",
                "+        if (segments.containsKey(key))",
                "+        {",
                "+            error(new ProtocolError(Frame.L2, \"segment in progress: %s\",",
                "+                                    frame));",
                "+        }",
                "+        segments.put(segmentKey(frame), segment);",
                "+    }",
                "+",
                "+    private void clearSegment(Frame frame)",
                "+    {",
                "+        segments.remove(segmentKey(frame));",
                "+    }",
                "+",
                "+    private void emit(int channel, ProtocolEvent event)",
                "+    {",
                "+        event.setChannel(channel);",
                "+        receiver.received(event);",
                "+    }",
                "+",
                "+    void received(NetworkEvent event)",
                "+    {",
                "+        event.delegate(this);",
                "+    }",
                "+",
                "+    public void init(ProtocolHeader header)",
                "+    {",
                "+        emit(0, header);",
                "+    }",
                "+",
                "+    public void error(ProtocolError error)",
                "+    {",
                "+        emit(0, error);",
                "+    }",
                "+",
                "+    public void frame(Frame frame)",
                "+    {",
                "+        ByteBuffer segment;",
                "+        if (frame.isFirstFrame() && frame.isLastFrame())",
                "+        {",
                "+            segment = frame.getBody();",
                "+            assemble(frame, segment);",
                "+        }",
                "+        else",
                "+        {",
                "+            List<Frame> frames;",
                "+            if (frame.isFirstFrame())",
                "+            {",
                "+                frames = new ArrayList<>();",
                "+                setSegment(frame, frames);",
                "+            }",
                "+            else",
                "+            {",
                "+                frames = getSegment(frame);",
                "+            }",
                "+",
                "+            frames.add(frame);",
                "+",
                "+            if (frame.isLastFrame())",
                "+            {",
                "+                clearSegment(frame);",
                "+",
                "+                int size = 0;",
                "+                for (Frame f : frames)",
                "+                {",
                "+                    size += f.getSize();",
                "+                }",
                "+                segment = allocateByteBuffer(size);",
                "+                for (Frame f : frames)",
                "+                {",
                "+                    segment.put(f.getBody());",
                "+                }",
                "+                segment.flip();",
                "+                assemble(frame, segment);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private ByteBuffer allocateByteBuffer(final int size)",
                "+    {",
                "+        return ByteBuffer.allocate(size);",
                "+    }",
                "+",
                "+    private void assemble(Frame frame, ByteBuffer segment)",
                "+    {",
                "+        BBDecoder dec = _decoder.get();",
                "+        dec.init(segment);",
                "+",
                "+        int channel = frame.getChannel();",
                "+        Method command;",
                "+",
                "+        switch (frame.getType())",
                "+        {",
                "+            case CONTROL:",
                "+                int controlType = dec.readUint16();",
                "+                Method control = Method.create(controlType);",
                "+                control.read(dec);",
                "+                emit(channel, control);",
                "+                break;",
                "+            case COMMAND:",
                "+                int commandType = dec.readUint16();",
                "+                // read in the session header, right now we don't use it",
                "+                int hdr = dec.readUint16();",
                "+                command = Method.create(commandType);",
                "+                command.setSync((0x0001 & hdr) != 0);",
                "+                command.read(dec);",
                "+                if (command.hasPayload() && !frame.isLastSegment())",
                "+                {",
                "+                    setIncompleteCommand(channel, command);",
                "+                }",
                "+                else",
                "+                {",
                "+                    emit(channel, command);",
                "+                }",
                "+                break;",
                "+            case HEADER:",
                "+                command = getIncompleteCommand(channel);",
                "+                List<Struct> structs = null;",
                "+                DeliveryProperties deliveryProps = null;",
                "+                MessageProperties messageProps = null;",
                "+",
                "+                while (dec.hasRemaining())",
                "+                {",
                "+                    Struct struct = dec.readStruct32();",
                "+                    if (struct instanceof DeliveryProperties && deliveryProps == null)",
                "+                    {",
                "+                        deliveryProps = (DeliveryProperties) struct;",
                "+                    }",
                "+                    else if (struct instanceof MessageProperties && messageProps == null)",
                "+                    {",
                "+                        messageProps = (MessageProperties) struct;",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        if (structs == null)",
                "+                        {",
                "+                            structs = new ArrayList<>(2);",
                "+                        }",
                "+                        structs.add(struct);",
                "+                    }",
                "+                }",
                "+                command.setHeader(new Header(deliveryProps, messageProps, structs));",
                "+",
                "+                if (frame.isLastSegment())",
                "+                {",
                "+                    setIncompleteCommand(channel, null);",
                "+                    emit(channel, command);",
                "+                }",
                "+                break;",
                "+            case BODY:",
                "+                command = getIncompleteCommand(channel);",
                "+                command.setBody(QpidByteBuffer.wrap(segment));",
                "+                setIncompleteCommand(channel, null);",
                "+                emit(channel, command);",
                "+                break;",
                "+            default:",
                "+                throw new IllegalStateException(\"unknown frame type: \" + frame.getType());",
                "+        }",
                "+",
                "+        dec.releaseBuffer();",
                "+    }",
                "+",
                "+    private void setIncompleteCommand(int channelId, Method incomplete)",
                "+    {",
                "+        if ((channelId & ARRAY_SIZE) == channelId)",
                "+        {",
                "+            _incompleteMethodArray[channelId] = incomplete;",
                "+        }",
                "+        else",
                "+        {",
                "+            if (incomplete != null)",
                "+            {",
                "+                _incompleteMethodMap.put(channelId, incomplete);",
                "+            }",
                "+            else",
                "+            {",
                "+                _incompleteMethodMap.remove(channelId);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private Method getIncompleteCommand(int channelId)",
                "+    {",
                "+        if ((channelId & ARRAY_SIZE) == channelId)",
                "+        {",
                "+            return _incompleteMethodArray[channelId];",
                "+        }",
                "+        else",
                "+        {",
                "+            return _incompleteMethodMap.get(channelId);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "new file mode 100644",
                "index 0000000000..d7b54b04b7",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "@@ -0,0 +1,83 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionOpen;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionStartOk;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionTuneOk;",
                "+",
                "+public class ConnectionInteraction",
                "+{",
                "+    public static final String SASL_MECHANISM_ANONYMOUS = \"ANONYMOUS\";",
                "+    public static final String SASL_MECHANISM_PLAIN = \"PLAIN\";",
                "+",
                "+    private final Interaction _interaction;",
                "+    private ConnectionStartOk _startOk;",
                "+    private ConnectionTuneOk _tuneOk;",
                "+    private ConnectionOpen _open;",
                "+",
                "+    public ConnectionInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _startOk = new ConnectionStartOk();",
                "+        _tuneOk = new ConnectionTuneOk();",
                "+        _open = new ConnectionOpen();",
                "+    }",
                "+",
                "+    public Interaction startOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_startOk);",
                "+    }",
                "+",
                "+    public ConnectionInteraction startOkMechanism(final String mechanism)",
                "+    {",
                "+        _startOk.setMechanism(mechanism);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction tuneOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_tuneOk);",
                "+    }",
                "+",
                "+    public Interaction open() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_open);",
                "+    }",
                "+",
                "+    public ConnectionInteraction tuneOkChannelMax(final int channelMax)",
                "+    {",
                "+        _tuneOk.setChannelMax(channelMax);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConnectionInteraction tuneOkMaxFrameSize(final int maxFrameSize)",
                "+    {",
                "+        _tuneOk.setMaxFrameSize(maxFrameSize);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConnectionInteraction startOkResponse(final byte[] response)",
                "+    {",
                "+        _startOk.setResponse(response);",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "new file mode 100644",
                "index 0000000000..e60049ecdb",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "@@ -0,0 +1,281 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import static java.lang.Math.min;",
                "+import static org.apache.qpid.server.protocol.v0_10.transport.Frame.FIRST_FRAME;",
                "+import static org.apache.qpid.server.protocol.v0_10.transport.Frame.FIRST_SEG;",
                "+import static org.apache.qpid.server.protocol.v0_10.transport.Frame.HEADER_SIZE;",
                "+import static org.apache.qpid.server.protocol.v0_10.transport.Frame.LAST_FRAME;",
                "+import static org.apache.qpid.server.protocol.v0_10.transport.Frame.LAST_SEG;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v0_10.FrameSizeObserver;",
                "+import org.apache.qpid.server.protocol.v0_10.ProtocolEventSender;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.BBEncoder;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Frame;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Header;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolDelegate;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolError;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolEvent;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolHeader;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SegmentType;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Struct;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+",
                "+/**",
                "+ * Disassembler",
                "+ */",
                "+public final class Disassembler implements ProtocolEventSender, ProtocolDelegate<Void>, FrameSizeObserver",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(Disassembler.class);",
                "+    private final ByteBufferSender _sender;",
                "+    private final Object _sendlock = new Object();",
                "+    private volatile int _maxPayload;",
                "+    private final static ThreadLocal<BBEncoder> _encoder = new ThreadLocal<BBEncoder>()",
                "+    {",
                "+        public BBEncoder initialValue()",
                "+        {",
                "+            return new BBEncoder(4 * 1024);",
                "+        }",
                "+    };",
                "+",
                "+    public Disassembler(ByteBufferSender sender, int maxFrame)",
                "+    {",
                "+        _sender = sender;",
                "+        if (maxFrame <= HEADER_SIZE || maxFrame >= 64*1024)",
                "+        {",
                "+            throw new IllegalArgumentException(\"maxFrame must be > HEADER_SIZE and < 64K: \" + maxFrame);",
                "+        }",
                "+        _maxPayload = maxFrame - HEADER_SIZE;",
                "+    }",
                "+",
                "+    public void send(ProtocolEvent event)",
                "+    {",
                "+        event.delegate(null, this);",
                "+    }",
                "+",
                "+    public void flush()",
                "+    {",
                "+        synchronized (_sendlock)",
                "+        {",
                "+            _sender.flush();",
                "+        }",
                "+    }",
                "+",
                "+    public void close()",
                "+    {",
                "+        synchronized (_sendlock)",
                "+        {",
                "+            _sender.close();",
                "+        }",
                "+    }",
                "+",
                "+    public void init(Void v, ProtocolHeader header)",
                "+    {",
                "+        synchronized (_sendlock)",
                "+        {",
                "+            _sender.send(header.toByteBuffer());",
                "+            _sender.flush();",
                "+        }",
                "+    }",
                "+",
                "+    public void control(Void v, Method method)",
                "+    {",
                "+        method(method, SegmentType.CONTROL);",
                "+    }",
                "+",
                "+    public void command(Void v, Method method)",
                "+    {",
                "+        method(method, SegmentType.COMMAND);",
                "+    }",
                "+",
                "+    private void method(Method method, SegmentType type)",
                "+    {",
                "+        BBEncoder enc = _encoder.get();",
                "+        enc.init();",
                "+        enc.writeUint16(method.getEncodedType());",
                "+        if (type == SegmentType.COMMAND)",
                "+        {",
                "+            if (method.isSync())",
                "+            {",
                "+                enc.writeUint16(0x0101);",
                "+            }",
                "+            else",
                "+            {",
                "+                enc.writeUint16(0x0100);",
                "+            }",
                "+        }",
                "+        method.write(enc);",
                "+        int methodLimit = enc.position();",
                "+",
                "+        byte flags = FIRST_SEG;",
                "+",
                "+        boolean payload = method.hasPayload();",
                "+        if (!payload)",
                "+        {",
                "+            flags |= LAST_SEG;",
                "+        }",
                "+",
                "+        int headerLimit = -1;",
                "+        if (payload)",
                "+        {",
                "+            final Header hdr = method.getHeader();",
                "+            if (hdr != null)",
                "+            {",
                "+                if(hdr.getDeliveryProperties() != null)",
                "+                {",
                "+                    enc.writeStruct32(hdr.getDeliveryProperties());",
                "+                }",
                "+                if(hdr.getMessageProperties() != null)",
                "+                {",
                "+                    enc.writeStruct32(hdr.getMessageProperties());",
                "+                }",
                "+                if(hdr.getNonStandardProperties() != null)",
                "+                {",
                "+                    for (Struct st : hdr.getNonStandardProperties())",
                "+                    {",
                "+                        enc.writeStruct32(st);",
                "+                    }",
                "+                }",
                "+            }",
                "+            headerLimit = enc.position();",
                "+        }",
                "+",
                "+        synchronized (_sendlock)",
                "+        {",
                "+            ByteBuffer buf = enc.underlyingBuffer();",
                "+            buf.flip();",
                "+            ByteBuffer copy = ByteBuffer.allocate(buf.remaining());",
                "+            copy.put(buf.duplicate());",
                "+            copy.flip();",
                "+",
                "+            final ByteBuffer methodBuf = view(copy,0, methodLimit);",
                "+            fragment(flags, type, method, methodBuf);",
                "+            if (payload)",
                "+            {",
                "+                QpidByteBuffer qpidByteBuffer = method.getBody();",
                "+                ByteBuffer body = null;",
                "+                if (qpidByteBuffer != null)",
                "+                {",
                "+                    body = ByteBuffer.allocate(qpidByteBuffer.remaining());",
                "+                    qpidByteBuffer.copyTo(body);",
                "+                }",
                "+                ByteBuffer headerBuf = view(copy, methodLimit, headerLimit);",
                "+                fragment(body == null ? LAST_SEG : 0x0, SegmentType.HEADER, method, headerBuf);",
                "+                if (body != null)",
                "+                {",
                "+                    fragment(LAST_SEG, SegmentType.BODY, method, body.duplicate());",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void fragment(byte flags, SegmentType type, ProtocolEvent event, ByteBuffer buffer)",
                "+    {",
                "+        byte typeb = (byte) type.getValue();",
                "+        byte track = event.getEncodedTrack() == Frame.L4 ? (byte) 1 : (byte) 0;",
                "+",
                "+        int remaining = buffer.remaining();",
                "+        boolean first = true;",
                "+        while (true)",
                "+        {",
                "+            int size = min(_maxPayload, remaining);",
                "+            remaining -= size;",
                "+",
                "+            byte newflags = flags;",
                "+            if (first)",
                "+            {",
                "+                newflags |= FIRST_FRAME;",
                "+                first = false;",
                "+            }",
                "+            if (remaining == 0)",
                "+            {",
                "+                newflags |= LAST_FRAME;",
                "+            }",
                "+",
                "+            frame(newflags, typeb, track, event.getChannel(), size, buffer);",
                "+",
                "+            if (remaining == 0)",
                "+            {",
                "+                break;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void frame(byte flags, byte type, byte track, int channel, int size, ByteBuffer buffer)",
                "+    {",
                "+        ByteBuffer data = ByteBuffer.allocate(HEADER_SIZE);",
                "+",
                "+        data.put(0, flags);",
                "+        data.put(1, type);",
                "+        data.putShort(2, (short) (size + HEADER_SIZE));",
                "+        data.put(4, (byte) 0);",
                "+        data.put(5, track);",
                "+        data.putShort(6, (short) channel);",
                "+",
                "+        try (QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(data))",
                "+        {",
                "+            _sender.send(qpidByteBuffer);",
                "+        }",
                "+",
                "+        if(size > 0)",
                "+        {",
                "+            final ByteBuffer view = view(buffer, 0, size);",
                "+            try (QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(view))",
                "+            {",
                "+                _sender.send(qpidByteBuffer);",
                "+            }",
                "+            buffer.position(buffer.position() + size);",
                "+        }",
                "+    }",
                "+",
                "+    public void error(Void v, ProtocolError error)",
                "+    {",
                "+        throw new IllegalArgumentException(String.valueOf(error));",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setMaxFrameSize(final int maxFrame)",
                "+    {",
                "+        if (maxFrame <= HEADER_SIZE || maxFrame >= 64*1024)",
                "+        {",
                "+            throw new IllegalArgumentException(\"maxFrame must be > HEADER_SIZE and < 64K: \" + maxFrame);",
                "+        }",
                "+        _maxPayload = maxFrame - HEADER_SIZE;",
                "+",
                "+    }",
                "+",
                "+    private static ByteBuffer view(ByteBuffer buffer, int offset, int length)",
                "+    {",
                "+        ByteBuffer view = buffer.slice();",
                "+        view.position(offset);",
                "+        int newLimit = Math.min(view.position() + length, view.capacity());",
                "+        view.limit(newLimit);",
                "+        return view.slice();",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ErrorResponse.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ErrorResponse.java",
                "new file mode 100644",
                "index 0000000000..fa794890e2",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ErrorResponse.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolError;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class ErrorResponse implements Response<ProtocolError>",
                "+{",
                "+    private final ProtocolError _error;",
                "+",
                "+    public ErrorResponse(final ProtocolError protocolError)",
                "+    {",
                "+        _error = protocolError;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ProtocolError getBody()",
                "+    {",
                "+        return _error;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExecutionInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExecutionInteraction.java",
                "new file mode 100644",
                "index 0000000000..2e6817b7b3",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExecutionInteraction.java",
                "@@ -0,0 +1,47 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ExecutionSync;",
                "+",
                "+public class ExecutionInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private final ExecutionSync _sync;",
                "+",
                "+    public ExecutionInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _sync = new ExecutionSync();",
                "+    }",
                "+",
                "+    public ExecutionInteraction syncId(final int id)",
                "+    {",
                "+        _sync.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction sync() throws Exception",
                "+    {",
                "+        _interaction.sendPerformative(_sync);",
                "+        return _interaction;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "new file mode 100644",
                "index 0000000000..fff894bb51",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "@@ -0,0 +1,190 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import static org.apache.qpid.server.transport.util.Functions.str;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.nio.ByteOrder;",
                "+import java.util.Collection;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Frame;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolError;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolHeader;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SegmentType;",
                "+import org.apache.qpid.tests.protocol.InputDecoder;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class FrameDecoder implements InputDecoder",
                "+{",
                "+",
                "+    private final ProtocolEventReceiver _receiver;",
                "+",
                "+    public enum State",
                "+    {",
                "+        PROTO_HDR,",
                "+        FRAME_HDR,",
                "+        FRAME_BODY,",
                "+        ERROR",
                "+    }",
                "+",
                "+    private static final ByteBuffer EMPTY_BYTE_BUFFER = ByteBuffer.allocate(0);",
                "+",
                "+    private final Assembler _assembler;",
                "+",
                "+    private int _maxFrameSize = 4096;",
                "+    private State _state;",
                "+    private ByteBuffer input = null;",
                "+    private int _needed;",
                "+",
                "+    private byte _flags;",
                "+    private SegmentType _type;",
                "+    private byte _track;",
                "+    private int _channel;",
                "+",
                "+    FrameDecoder(final byte[] headerBytes)",
                "+    {",
                "+        _receiver = new ProtocolEventReceiver(headerBytes);",
                "+        this._assembler = new Assembler(_receiver);",
                "+        this._state = State.PROTO_HDR;",
                "+        _needed = 8;",
                "+",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<Response<?>> decode(final ByteBuffer buf) throws Exception",
                "+    {",
                "+        int limit = buf.limit();",
                "+        int remaining = buf.remaining();",
                "+        while (remaining > 0)",
                "+        {",
                "+            if (remaining >= _needed)",
                "+            {",
                "+                int consumed = _needed;",
                "+                int pos = buf.position();",
                "+                if (input == null)",
                "+                {",
                "+                    buf.limit(pos + _needed);",
                "+                    input = buf;",
                "+                    _state = next(pos);",
                "+                    buf.limit(limit);",
                "+                    buf.position(pos + consumed);",
                "+                }",
                "+                else",
                "+                {",
                "+                    buf.limit(pos + _needed);",
                "+                    input.put(buf);",
                "+                    buf.limit(limit);",
                "+                    input.flip();",
                "+                    _state = next(0);",
                "+                }",
                "+",
                "+                remaining -= consumed;",
                "+                input = null;",
                "+            }",
                "+            else",
                "+            {",
                "+                if (input == null)",
                "+                {",
                "+                    input = ByteBuffer.allocate(_needed);",
                "+                }",
                "+                input.put(buf);",
                "+                _needed -= remaining;",
                "+                remaining = 0;",
                "+            }",
                "+        }",
                "+        return _receiver.getReceivedEvents();",
                "+    }",
                "+",
                "+    private State next(int pos)",
                "+    {",
                "+        input.order(ByteOrder.BIG_ENDIAN);",
                "+",
                "+        switch (_state) {",
                "+            case PROTO_HDR:",
                "+                if (input.get(pos) != 'A' &&",
                "+                    input.get(pos + 1) != 'M' &&",
                "+                    input.get(pos + 2) != 'Q' &&",
                "+                    input.get(pos + 3) != 'P')",
                "+                {",
                "+                    error(\"bad protocol header: %s\", str(input));",
                "+                    return State.ERROR;",
                "+                }",
                "+",
                "+                byte protoClass = input.get(pos + 4);",
                "+                byte instance = input.get(pos + 5);",
                "+                byte major = input.get(pos + 6);",
                "+                byte minor = input.get(pos + 7);",
                "+                _assembler.received(new ProtocolHeader(protoClass, instance, major, minor));",
                "+                _needed = Frame.HEADER_SIZE;",
                "+                return State.FRAME_HDR;",
                "+            case FRAME_HDR:",
                "+                _flags = input.get(pos);",
                "+                _type = SegmentType.get(input.get(pos + 1));",
                "+                int size = (0xFFFF & input.getShort(pos + 2));",
                "+                size -= Frame.HEADER_SIZE;",
                "+                _maxFrameSize = 64 * 1024;",
                "+                if (size < 0 || size > (_maxFrameSize - 12))",
                "+                {",
                "+                    error(\"bad frame size: %d\", size);",
                "+                    return State.ERROR;",
                "+                }",
                "+                byte b = input.get(pos + 5);",
                "+                if ((b & 0xF0) != 0) {",
                "+                    error(\"non-zero reserved bits in upper nibble of \" +",
                "+                          \"frame header byte 5: '%x'\", b);",
                "+                    return State.ERROR;",
                "+                } else {",
                "+                    _track = (byte) (b & 0xF);",
                "+                }",
                "+                _channel = (0xFFFF & input.getShort(pos + 6));",
                "+                if (size == 0)",
                "+                {",
                "+                    Frame frame = new Frame(_flags, _type, _track, _channel, EMPTY_BYTE_BUFFER);",
                "+                    _assembler.received(frame);",
                "+                    _needed = Frame.HEADER_SIZE;",
                "+                    return State.FRAME_HDR;",
                "+                }",
                "+                else",
                "+                {",
                "+                    _needed = size;",
                "+                    return State.FRAME_BODY;",
                "+                }",
                "+            case FRAME_BODY:",
                "+                Frame frame = new Frame(_flags, _type, _track, _channel, input.slice());",
                "+                _assembler.received(frame);",
                "+                _needed = Frame.HEADER_SIZE;",
                "+                return State.FRAME_HDR;",
                "+            default:",
                "+                throw new IllegalStateException();",
                "+        }",
                "+    }",
                "+",
                "+    private void error(String fmt, Object ... args)",
                "+    {",
                "+        _assembler.received(new ProtocolError(Frame.L1, fmt, args));",
                "+    }",
                "+",
                "+    public void setMaxFrameSize(final int maxFrameSize)",
                "+    {",
                "+        _maxFrameSize = maxFrameSize;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameEncoder.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameEncoder.java",
                "new file mode 100644",
                "index 0000000000..dfec4f451e",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameEncoder.java",
                "@@ -0,0 +1,87 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.BBEncoder;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolEvent;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+import org.apache.qpid.tests.protocol.OutputEncoder;",
                "+",
                "+public class FrameEncoder implements OutputEncoder",
                "+{",
                "+    @Override",
                "+    public ByteBuffer encode(final Object msg)",
                "+    {",
                "+        if (msg instanceof ProtocolEvent)",
                "+        {",
                "+            final List<ByteBuffer> buffers = new ArrayList<>();",
                "+            final AtomicInteger totalSize = new AtomicInteger();",
                "+            Disassembler disassembler = new Disassembler(new ByteBufferSender()",
                "+            {",
                "+                @Override",
                "+                public boolean isDirectBufferPreferred()",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                @Override",
                "+                public void send(final QpidByteBuffer msg)",
                "+                {",
                "+                    int remaining = msg.remaining();",
                "+                    byte[] data = new byte[remaining];",
                "+                    ByteBuffer byteBuffer = ByteBuffer.wrap(data);",
                "+                    msg.get(data);",
                "+                    buffers.add(byteBuffer);",
                "+                    totalSize.addAndGet(remaining);",
                "+                }",
                "+",
                "+                @Override",
                "+                public void flush()",
                "+                {",
                "+",
                "+                }",
                "+",
                "+                @Override",
                "+                public void close()",
                "+                {",
                "+",
                "+                }",
                "+            }, 512);",
                "+",
                "+            disassembler.send((ProtocolEvent) msg);",
                "+            ByteBuffer data = ByteBuffer.allocate(totalSize.get());",
                "+            for (ByteBuffer buffer : buffers)",
                "+            {",
                "+                data.put(buffer);",
                "+            }",
                "+            data.flip();",
                "+            return data;",
                "+        }",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameTransport.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameTransport.java",
                "new file mode 100644",
                "index 0000000000..3b7849c2a6",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameTransport.java",
                "@@ -0,0 +1,58 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.ProtocolEngineCreator_0_10;",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "+",
                "+",
                "+public class FrameTransport extends AbstractFrameTransport<Interaction>",
                "+{",
                "+    private final byte[] _protocolHeader;",
                "+",
                "+    public FrameTransport(final InetSocketAddress brokerAddress)",
                "+    {",
                "+        super(brokerAddress, new FrameDecoder(new ProtocolEngineCreator_0_10().getHeaderIdentifier()), new FrameEncoder());",
                "+        _protocolHeader = new ProtocolEngineCreator_0_10().getHeaderIdentifier();",
                "+    }",
                "+",
                "+    @Override",
                "+    public byte[] getProtocolHeader()",
                "+    {",
                "+        return _protocolHeader;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Interaction newInteraction()",
                "+    {",
                "+        return new Interaction(this);",
                "+    }",
                "+",
                "+    @Override",
                "+    public FrameTransport connect()",
                "+    {",
                "+        super.connect();",
                "+        return this;",
                "+    }",
                "+",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "new file mode 100644",
                "index 0000000000..5d53a890aa",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "@@ -0,0 +1,138 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.BBDecoder;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.BBEncoder;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionOpenOk;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionStart;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionTune;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SessionAttached;",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                "+",
                "+public class Interaction extends AbstractInteraction<Interaction>",
                "+{",
                "+    private ConnectionInteraction _connectionInteraction;",
                "+    private SessionInteraction _sessionInteraction;",
                "+    private MessageInteraction _messageInteraction;",
                "+    private ExecutionInteraction _executionInteraction;",
                "+    private int _channelId;",
                "+    private TxInteraction _txInteraction;",
                "+",
                "+    public Interaction(final AbstractFrameTransport frameTransport)",
                "+    {",
                "+        super(frameTransport);",
                "+        _connectionInteraction = new ConnectionInteraction(this);",
                "+        _sessionInteraction = new SessionInteraction(this);",
                "+        _messageInteraction = new MessageInteraction(this);",
                "+        _executionInteraction = new ExecutionInteraction(this);",
                "+        _txInteraction = new TxInteraction(this);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected byte[] getProtocolHeader()",
                "+    {",
                "+        return getTransport().getProtocolHeader();",
                "+    }",
                "+",
                "+    public <T extends Method> Interaction sendPerformative(final T performative) throws Exception",
                "+    {",
                "+        performative.setChannel(_channelId);",
                "+        sendPerformativeAndChainFuture(copyPerformative(performative));",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConnectionInteraction connection()",
                "+    {",
                "+        return _connectionInteraction;",
                "+    }",
                "+",
                "+    private <T extends Method> T copyPerformative(final T src)",
                "+    {",
                "+        T dst = (T) Method.create(src.getStructType());",
                "+        final BBEncoder encoder = new BBEncoder(4096);",
                "+        encoder.init();",
                "+        src.write(encoder);",
                "+        ByteBuffer buffer = encoder.buffer();",
                "+",
                "+        final BBDecoder decoder = new BBDecoder();",
                "+        decoder.init(buffer);",
                "+        dst.read(decoder);",
                "+        return dst;",
                "+    }",
                "+",
                "+    public Interaction openAnonymousConnection() throws Exception",
                "+    {",
                "+        this.negotiateProtocol().consumeResponse()",
                "+            .consumeResponse(ConnectionStart.class)",
                "+            .connection().startOkMechanism(ConnectionInteraction.SASL_MECHANISM_ANONYMOUS).startOk()",
                "+            .consumeResponse(ConnectionTune.class)",
                "+            .connection().tuneOk()",
                "+            .connection().open()",
                "+            .consumeResponse(ConnectionOpenOk.class);",
                "+        return this;",
                "+    }",
                "+",
                "+    public SessionInteraction session()",
                "+    {",
                "+        return _sessionInteraction;",
                "+    }",
                "+",
                "+    public int getChannelId()",
                "+    {",
                "+        return _channelId;",
                "+    }",
                "+",
                "+    public Interaction channelId(final int channelId)",
                "+    {",
                "+        _channelId = channelId;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction attachSession(final byte[] sessionName) throws Exception",
                "+    {",
                "+        this.session()",
                "+            .attachName(sessionName)",
                "+            .attach()",
                "+            .consumeResponse(SessionAttached.class)",
                "+            .session().commandPointCommandId(0).commandPoint();",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction message()",
                "+    {",
                "+        return _messageInteraction;",
                "+    }",
                "+",
                "+    public ExecutionInteraction execution()",
                "+    {",
                "+        return _executionInteraction;",
                "+    }",
                "+",
                "+    public TxInteraction tx()",
                "+    {",
                "+        return _txInteraction;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "new file mode 100644",
                "index 0000000000..4660c86941",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "@@ -0,0 +1,147 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageAccept;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageAcceptMode;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageAcquireMode;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageCreditUnit;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageFlow;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageSubscribe;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageTransfer;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.RangeSet;",
                "+",
                "+public class MessageInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private MessageTransfer _transfer;",
                "+    private MessageSubscribe _subscribe;",
                "+    private MessageFlow _flow;",
                "+    private MessageAccept _accept;",
                "+",
                "+    public MessageInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _transfer = new MessageTransfer();",
                "+        _subscribe = new MessageSubscribe();",
                "+        _flow = new MessageFlow();",
                "+        _accept = new MessageAccept();",
                "+    }",
                "+",
                "+    public MessageInteraction transferId(final int id)",
                "+    {",
                "+        _transfer.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction transferDesitnation(final String destination)",
                "+    {",
                "+        _transfer.setDestination(destination);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction transfer() throws Exception",
                "+    {",
                "+        _interaction.sendPerformative(_transfer);",
                "+        return _interaction;",
                "+    }",
                "+",
                "+    public MessageInteraction subscribeQueue(final String queueName)",
                "+    {",
                "+        _subscribe.setQueue(queueName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction subscribeId(final int id)",
                "+    {",
                "+        _subscribe.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction subscribe() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_subscribe);",
                "+    }",
                "+",
                "+    public MessageInteraction subscribeDestination(final String destination)",
                "+    {",
                "+        _subscribe.setDestination(destination);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction flow() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_flow);",
                "+    }",
                "+",
                "+    public MessageInteraction flowId(final int id)",
                "+    {",
                "+        _flow.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction flowDestination(final String destination)",
                "+    {",
                "+        _flow.setDestination(destination);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction flowUnit(final MessageCreditUnit unit)",
                "+    {",
                "+        _flow.setUnit(unit);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction flowValue(final long value)",
                "+    {",
                "+        _flow.setValue(value);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction subscribeAcceptMode(final MessageAcceptMode acceptMode)",
                "+    {",
                "+        _subscribe.setAcceptMode(acceptMode);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction subscribeAcquireMode(final MessageAcquireMode acquireMode)",
                "+    {",
                "+        _subscribe.setAcquireMode(acquireMode);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction accept() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_accept);",
                "+    }",
                "+",
                "+    public MessageInteraction acceptId(final int id)",
                "+    {",
                "+        _accept.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction acceptTransfers(final RangeSet transfers)",
                "+    {",
                "+        _accept.setTransfers(transfers);",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/PerformativeResponse.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/PerformativeResponse.java",
                "new file mode 100644",
                "index 0000000000..701e92cd6e",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/PerformativeResponse.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class PerformativeResponse implements Response<Method>",
                "+{",
                "+    private Method _method;",
                "+",
                "+    public PerformativeResponse(final Method method)",
                "+    {",
                "+        _method = method;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Method getBody()",
                "+    {",
                "+        return _method;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"PerformativeResponse{\" +",
                "+               \"_method=\" + _method +",
                "+               '}';",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "new file mode 100644",
                "index 0000000000..37eb66e4bf",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "@@ -0,0 +1,67 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Queue;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolError;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolEvent;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ProtocolHeader;",
                "+import org.apache.qpid.tests.protocol.HeaderResponse;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class ProtocolEventReceiver",
                "+{",
                "+    private Queue<Response<?>> _events = new ConcurrentLinkedQueue<>();",
                "+    private final byte[] _headerBytes;",
                "+",
                "+    public ProtocolEventReceiver(final byte[] headerBytes)",
                "+    {",
                "+        _headerBytes = headerBytes;",
                "+    }",
                "+",
                "+    void received(ProtocolEvent msg)",
                "+    {",
                "+        if (msg instanceof ProtocolHeader)",
                "+        {",
                "+            _events.add(new HeaderResponse(_headerBytes));",
                "+        }",
                "+        else if (msg instanceof Method)",
                "+        {",
                "+            _events.add(new PerformativeResponse((Method) msg));",
                "+        }",
                "+        else if (msg instanceof ProtocolError)",
                "+        {",
                "+            _events.add(new ErrorResponse((ProtocolError) msg));",
                "+        }",
                "+    }",
                "+",
                "+    public Collection<Response<?>> getReceivedEvents()",
                "+    {",
                "+        Collection<Response<?>> results = new ArrayList<>(_events);",
                "+        _events.removeAll(results);",
                "+        return results;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/SessionInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/SessionInteraction.java",
                "new file mode 100644",
                "index 0000000000..fce711da90",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/SessionInteraction.java",
                "@@ -0,0 +1,89 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SessionAttach;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SessionCommandPoint;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SessionDetach;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.SessionFlush;",
                "+",
                "+public class SessionInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private SessionAttach _attach;",
                "+    private SessionDetach _detach;",
                "+    private SessionCommandPoint _commandPoint;",
                "+    private SessionFlush _flush;",
                "+",
                "+    public SessionInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _attach = new SessionAttach();",
                "+        _detach = new SessionDetach();",
                "+        _commandPoint = new SessionCommandPoint();",
                "+        _flush = new SessionFlush();",
                "+    }",
                "+",
                "+    public Interaction attach() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_attach);",
                "+    }",
                "+",
                "+    public SessionInteraction attachName(final byte[] name)",
                "+    {",
                "+        _attach.setName(name);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction detach() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_detach);",
                "+    }",
                "+",
                "+    public SessionInteraction detachName(final byte[] sessionName)",
                "+    {",
                "+        _detach.setName(sessionName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction commandPoint() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_commandPoint);",
                "+    }",
                "+",
                "+    public SessionInteraction commandPointCommandId(final int commandId)",
                "+    {",
                "+        _commandPoint.setCommandId(commandId);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction flush() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_flush);",
                "+    }",
                "+",
                "+    public SessionInteraction flushCompleted()",
                "+    {",
                "+        _flush.setCompleted(true);",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/TxInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/TxInteraction.java",
                "new file mode 100644",
                "index 0000000000..14c9912e57",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/TxInteraction.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.TxCommit;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.TxSelect;",
                "+",
                "+public class TxInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private final TxSelect _select;",
                "+    private final TxCommit _commit;",
                "+",
                "+    public TxInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _select = new TxSelect();",
                "+        _commit = new TxCommit();",
                "+    }",
                "+",
                "+    public Interaction select() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_select);",
                "+    }",
                "+",
                "+    public TxInteraction selectId(final int id)",
                "+    {",
                "+        _select.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public TxInteraction commitId(final int id)",
                "+    {",
                "+        _commit.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction commit() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_commit);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/resources/config-protocol-tests-0-10.json b/systests/protocol-tests-amqp-0-10/src/main/resources/config-protocol-tests-0-10.json",
                "new file mode 100644",
                "index 0000000000..69387fb413",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/resources/config-protocol-tests-0-10.json",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_10\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_10\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "new file mode 100644",
                "index 0000000000..f4ed0a2880",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "@@ -0,0 +1,58 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "+import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ExchangeDeclareBody;",
                "+",
                "+public class ExchangeInteraction",
                "+{",
                "+    private Interaction _interaction;",
                "+    private String _decalreExchange = \"amq.direct\";",
                "+    private String _declareType = \"direct\";",
                "+    private boolean _declarePassive = true;",
                "+    private boolean _declareDurable = true;",
                "+    private boolean _declareAutoDelete = false;",
                "+    private boolean _declareNoWait = false;",
                "+    private Map<String, Object> _declareArguments = new HashMap<>();",
                "+",
                "+    public ExchangeInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+    public Interaction declare() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ExchangeDeclareBody(0,",
                "+                                                                     AMQShortString.valueOf(_decalreExchange),",
                "+                                                                     AMQShortString.valueOf(_declareType),",
                "+                                                                     _declarePassive,",
                "+                                                                     _declareDurable,",
                "+                                                                     _declareAutoDelete,",
                "+                                                                     false,",
                "+                                                                     _declareNoWait,",
                "+                                                                     FieldTable.convertToFieldTable(_declareArguments)));",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "index 52cd7a0bf7..0b5c4e461e 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "@@ -28,5 +28,6 @@ import org.apache.qpid.server.plugin.QpidServiceLoader;",
                " import org.apache.qpid.server.protocol.ProtocolVersion;",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "-public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                "+public class FrameTransport extends AbstractFrameTransport<Interaction>",
                " {",
                "@@ -35,3 +36,3 @@ public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTranspor",
                "-    public FrameTransport(final InetSocketAddress brokerAddress)",
                "+    FrameTransport(final InetSocketAddress brokerAddress)",
                "     {",
                "@@ -39,3 +40,4 @@ public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTranspor",
                "     }",
                "-    public FrameTransport(final InetSocketAddress brokerAddress, Protocol protocol)",
                "+",
                "+    FrameTransport(final InetSocketAddress brokerAddress, Protocol protocol)",
                "     {",
                "@@ -76,3 +78,3 @@ public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTranspor",
                "-    public ProtocolVersion getProtocolVersion()",
                "+    ProtocolVersion getProtocolVersion()",
                "     {",
                "@@ -81,3 +83,3 @@ public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTranspor",
                "-    public static ProtocolVersion getProtocolVersion(Protocol protocol)",
                "+    private static ProtocolVersion getProtocolVersion(Protocol protocol)",
                "     {",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "index 35f4bf5f04..b990eae2db 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "@@ -28,4 +28,5 @@ import org.apache.qpid.server.protocol.v0_8.transport.ConnectionStartBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ConnectionTuneBody;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                "-public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                "+public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "@@ -38,2 +39,4 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     private BasicInteraction _basicInteraction;",
                "+    private TxInteraction _txInteraction;",
                "+    private ExchangeInteraction _exchangeInteraction;",
                "@@ -46,2 +49,4 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         _basicInteraction = new BasicInteraction(this);",
                "+        _txInteraction = new TxInteraction(this);",
                "+        _exchangeInteraction = new ExchangeInteraction(this);",
                "     }",
                "@@ -54,8 +59,2 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "-    @Override",
                "-    protected Interaction getInteraction()",
                "-    {",
                "-        return this;",
                "-    }",
                "-",
                "     public Interaction sendPerformative(final AMQBody amqBody) throws Exception",
                "@@ -122,2 +121,12 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     }",
                "+",
                "+    public TxInteraction tx()",
                "+    {",
                "+        return _txInteraction;",
                "+    }",
                "+",
                "+    public ExchangeInteraction exchange()",
                "+    {",
                "+        return _exchangeInteraction;",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "new file mode 100644",
                "index 0000000000..63a078ae65",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.transport.TxCommitBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.TxSelectBody;",
                "+",
                "+public class TxInteraction",
                "+{",
                "+    private Interaction _interaction;",
                "+",
                "+    public TxInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+    public Interaction select() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(TxSelectBody.INSTANCE);",
                "+    }",
                "+",
                "+    public Interaction commit() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(TxCommitBody.INSTANCE);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "index dd59757c52..219c423eb1 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "@@ -25,3 +25,5 @@ import java.net.InetSocketAddress;",
                "-public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "+",
                "+public class FrameTransport extends AbstractFrameTransport<Interaction>",
                " {",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 4aad6ee838..b2f8147af2 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -79,5 +79,6 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.SenderSettleMode;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                " import org.apache.qpid.tests.protocol.Response;",
                "-public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                "+public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "@@ -179,8 +180,2 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "-    @Override",
                "-    protected Interaction getInteraction()",
                "-    {",
                "-        return this;",
                "-    }",
                "-",
                "     //////////",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "new file mode 100644",
                "index 0000000000..cad8415d6b",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "@@ -0,0 +1,175 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.anyOf;",
                "+import static org.hamcrest.Matchers.instanceOf;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.hamcrest.Matchers.nullValue;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.util.concurrent.JdkFutureAdapters;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelInitializer;",
                "+import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.ChannelPromise;",
                "+import io.netty.channel.EventLoopGroup;",
                "+import io.netty.channel.nio.NioEventLoopGroup;",
                "+import io.netty.channel.socket.SocketChannel;",
                "+import io.netty.channel.socket.nio.NioSocketChannel;",
                "+",
                "+public abstract class AbstractFrameTransport<I extends AbstractInteraction<I>> implements AutoCloseable",
                "+{",
                "+    static final long RESPONSE_TIMEOUT =",
                "+            Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\", 6000);",
                "+    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "+",
                "+    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "+    private final EventLoopGroup _workerGroup;",
                "+    private final InetSocketAddress _brokerAddress;",
                "+    private final InputHandler _inputHandler;",
                "+    private final OutputHandler _outputHandler;",
                "+",
                "+    private volatile Channel _channel;",
                "+    private volatile boolean _channelClosedSeen = false;",
                "+",
                "+    public AbstractFrameTransport(final InetSocketAddress brokerAddress, InputDecoder inputDecoder, OutputEncoder outputEncoder)",
                "+    {",
                "+        _brokerAddress = brokerAddress;",
                "+        _inputHandler = new InputHandler(_queue, inputDecoder);",
                "+        _outputHandler = new OutputHandler(outputEncoder);",
                "+        _workerGroup = new NioEventLoopGroup();",
                "+    }",
                "+",
                "+    public InetSocketAddress getBrokerAddress()",
                "+    {",
                "+        return _brokerAddress;",
                "+    }",
                "+",
                "+    public AbstractFrameTransport<I> connect()",
                "+    {",
                "+        try",
                "+        {",
                "+            Bootstrap b = new Bootstrap();",
                "+            b.group(_workerGroup);",
                "+            b.channel(NioSocketChannel.class);",
                "+            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "+            b.handler(new ChannelInitializer<SocketChannel>()",
                "+            {",
                "+                @Override",
                "+                public void initChannel(SocketChannel ch) throws Exception",
                "+                {",
                "+                    ChannelPipeline pipeline = ch.pipeline();",
                "+                    buildInputOutputPipeline(pipeline);",
                "+                }",
                "+            });",
                "+",
                "+            _channel = b.connect(_brokerAddress).sync().channel();",
                "+            _channel.closeFuture().addListener(future ->",
                "+                                               {",
                "+                                                   _channelClosedSeen = true;",
                "+                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "+                                               });",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "+    {",
                "+        pipeline.addLast(_inputHandler).addLast(_outputHandler);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws Exception",
                "+    {",
                "+        try",
                "+        {",
                "+            if (_channel != null)",
                "+            {",
                "+                _channel.disconnect().sync();",
                "+                _channel.close().sync();",
                "+                _channel = null;",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "+        }",
                "+    }",
                "+",
                "+    ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(bytes);",
                "+        _channel.write(buffer, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendPerformative(final Object data) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        _channel.write(data, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    <T extends Response<?>> T getNextResponse() throws Exception",
                "+    {",
                "+        return (T) _queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+    }",
                "+",
                "+    public void assertNoMoreResponses() throws Exception",
                "+    {",
                "+        Response response = getNextResponse();",
                "+        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "+    }",
                "+",
                "+    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "+    {",
                "+        assertNoMoreResponses();",
                "+        assertThat(_channelClosedSeen, is(true));",
                "+    }",
                "+",
                "+    public void flush()",
                "+    {",
                "+        _channel.flush();",
                "+    }",
                "+",
                "+    public abstract byte[] getProtocolHeader();",
                "+",
                "+    public abstract I newInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "new file mode 100644",
                "index 0000000000..4b41ca9221",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "@@ -0,0 +1,150 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static com.google.common.util.concurrent.Futures.allAsList;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+public abstract class AbstractInteraction<I extends AbstractInteraction<I>>",
                "+{",
                "+    private final AbstractFrameTransport<I> _transport;",
                "+    private ListenableFuture<?> _latestFuture;",
                "+    private Response<?> _latestResponse;",
                "+",
                "+    public AbstractInteraction(final AbstractFrameTransport<I> frameTransport)",
                "+    {",
                "+        _transport = frameTransport;",
                "+    }",
                "+",
                "+    public I consumeResponse(final Class<?>... responseTypes) throws Exception",
                "+    {",
                "+        sync();",
                "+        _latestResponse = getNextResponse();",
                "+        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "+        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "+            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        {",
                "+            return getInteraction();",
                "+        }",
                "+        acceptableResponseClasses.remove(null);",
                "+        if (_latestResponse != null)",
                "+        {",
                "+            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            {",
                "+                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+                {",
                "+                    return getInteraction();",
                "+                }",
                "+            }",
                "+        }",
                "+        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "+                                                      acceptableResponseClasses,",
                "+                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "+    }",
                "+",
                "+    protected Response<?> getNextResponse() throws Exception",
                "+    {",
                "+        return _transport.getNextResponse();",
                "+    }",
                "+",
                "+    public I sync() throws InterruptedException, ExecutionException, TimeoutException",
                "+    {",
                "+        _transport.flush();",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture.get(AbstractFrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+            _latestFuture = null;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    public Response<?> getLatestResponse() throws Exception",
                "+    {",
                "+        return _latestResponse;",
                "+    }",
                "+",
                "+    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "+    {",
                "+        if (_latestResponse.getBody() == null)",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getClass()));",
                "+        }",
                "+",
                "+        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getBody()));",
                "+        }",
                "+",
                "+        return (T) _latestResponse.getBody();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody) throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return future;",
                "+    }",
                "+",
                "+    public I negotiateProtocol() throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendProtocolHeader(getProtocolHeader());",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    protected AbstractFrameTransport getTransport()",
                "+    {",
                "+        return _transport;",
                "+    }",
                "+",
                "+    protected abstract byte[] getProtocolHeader();",
                "+",
                "+    private I getInteraction()",
                "+    {",
                "+        return (I) this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "new file mode 100644",
                "index 0000000000..b7010232af",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+public class ChannelClosedResponse implements Response<ChannelClosedResponse>",
                "+{",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"ChannelClosed\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public ChannelClosedResponse getBody()",
                "+    {",
                "+        return this;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "pom.xml",
                "systests/protocol-tests-amqp-0-10/pom.xml",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Assembler.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ErrorResponse.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExecutionInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameEncoder.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameTransport.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/PerformativeResponse.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/SessionInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/TxInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/resources/config-protocol-tests-0-10.json",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PLAIN, SASL, AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExecutionInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameEncoder.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Assembler.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/TxInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java, systests/protocol-tests-amqp-0-10/pom.xml, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/SessionInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/PerformativeResponse.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ErrorResponse.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/resources/config-protocol-tests-0-10.json, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameTransport.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connection, connect, perform, protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c6d80d80e685f70653f609951868a9e8f0ffb5a6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510968742,
            "hunks": 17,
            "message": "[Broker-J][System Tests] Add protocol system test suites for AMQP 0-8,0-9 and 0-9-1",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java",
                "index 706f1ae68f..add9fb1fff 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java",
                "@@ -219,3 +219,3 @@ public abstract class AMQDecoder<T extends MethodProcessor>",
                "-    abstract void processMethod(int channelId,",
                "+    protected abstract void processMethod(int channelId,",
                "                                QpidByteBuffer in)",
                "@@ -223,3 +223,3 @@ public abstract class AMQDecoder<T extends MethodProcessor>",
                "-    AMQFrameDecodingException newUnknownMethodException(final int classId,",
                "+    protected AMQFrameDecodingException newUnknownMethodException(final int classId,",
                "                                                         final int methodId,",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java",
                "index 08ccda9823..59d498572e 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java",
                "@@ -48,3 +48,3 @@ public class ServerDecoder extends AMQDecoder<ServerMethodProcessor<? extends Se",
                "     @Override",
                "-    void processMethod(int channelId,",
                "+    protected void processMethod(int channelId,",
                "                        QpidByteBuffer in)",
                "diff --git a/pom.xml b/pom.xml",
                "index 62e7033791..e7d58bb6fa 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -199,2 +199,3 @@",
                "     <module>systests/protocol-tests-core</module>",
                "+    <module>systests/protocol-tests-amqp-0-8</module>",
                "     <module>systests/protocol-tests-amqp-1-0</module>",
                "@@ -422,2 +423,8 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-amqp-0-8</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/systests/protocol-tests-amqp-0-8/pom.xml b/systests/protocol-tests-amqp-0-8/pom.xml",
                "new file mode 100644",
                "index 0000000000..3f788db17f",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/pom.xml",
                "@@ -0,0 +1,109 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  contributor license agreements.  See the NOTICE file distributed with",
                "+  this work for additional information regarding copyright ownership.",
                "+  The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  (the \"License\"); you may not use this file except in compliance with",
                "+  the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+  Unless required by applicable law or agreed to in writing, software",
                "+  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  See the License for the specific language governing permissions and",
                "+  limitations under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>protocol-tests-amqp-0-8</artifactId>",
                "+    <name>Apache Qpid Protocol Tests for AMQP 0-8,0-9,0-9-1</name>",
                "+    <description>Tests for AMQP 0-8,0-9,0-9-1</description>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-8-protocol</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-test-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>protocol-tests-core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-logging-logback</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-memory-store</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "+            <optional>true</optional>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+       <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>test</scope>",
                "+       </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-protocol-tests-0-8.json</qpid.initialConfigurationLocation>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "new file mode 100644",
                "index 0000000000..9ef66ecb1f",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -0,0 +1,214 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "+import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicAckBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicConsumeBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicContentHeaderProperties;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicPublishBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicQosBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.CompositeAMQDataBlock;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ContentBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ContentHeaderBody;",
                "+",
                "+public class BasicInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private String _publishExchange;",
                "+    private String _publishRoutingKey;",
                "+    private boolean _publishMandatory;",
                "+    private boolean _publishImmediate;",
                "+    private byte[] _content;",
                "+    private Map<String, Object> _contentHeaderPropertiesHeaders = new HashMap<>();",
                "+    private String _contentHeaderPropertiesContentType;",
                "+    private byte _contentHeaderPropertiesDeliveryMode;",
                "+    private byte _contentHeaderPropertiesPriority;",
                "+    private int _qosPrefetchCount;",
                "+    private long _qosPrefetchSize;",
                "+    private boolean _qosGlobal;",
                "+    private String _consumeQueueName;",
                "+    private String _consumeConsumerTag;",
                "+    private boolean _consumeNoLocal;",
                "+    private boolean _consumeNoAck;",
                "+    private boolean _consumeExclusive;",
                "+    private boolean _consumeNoWait;",
                "+    private Map<String, Object> _consumeArguments = new HashMap<>();",
                "+    private long _ackDeliveryTag;",
                "+    private boolean _ackMultiple;",
                "+",
                "+    public BasicInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+    public Interaction publish() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new BasicPublishBody(0,",
                "+                                                                  AMQShortString.valueOf(_publishExchange),",
                "+                                                                  AMQShortString.valueOf(_publishRoutingKey),",
                "+                                                                  _publishMandatory,",
                "+                                                                  _publishImmediate));",
                "+    }",
                "+",
                "+    public BasicInteraction content(final String content)",
                "+    {",
                "+        _content = content.getBytes(StandardCharsets.UTF_8);",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction content(final byte[] content)",
                "+    {",
                "+        _content = content;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction contentHeaderPropertiesHeaders(final Map<String, Object> messageHeaders)",
                "+    {",
                "+        _contentHeaderPropertiesHeaders = messageHeaders;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction contentHeaderPropertiesContentType(final String messageContentType)",
                "+    {",
                "+        _contentHeaderPropertiesContentType = messageContentType;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction contentHeaderPropertiesPriority(final byte priority)",
                "+    {",
                "+        _contentHeaderPropertiesPriority = priority;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction contentHeaderPropertiesDeliveryMode(final byte deliveryMode)",
                "+    {",
                "+        _contentHeaderPropertiesDeliveryMode = deliveryMode;",
                "+        return this;",
                "+    }",
                "+",
                "+",
                "+    public Interaction publishMessage() throws Exception",
                "+    {",
                "+        List<AMQFrame> frames = new ArrayList<>();",
                "+        BasicPublishBody publishFrame = new BasicPublishBody(0,",
                "+                                                             AMQShortString.valueOf(_publishExchange),",
                "+                                                             AMQShortString.valueOf(_publishRoutingKey),",
                "+                                                             _publishMandatory,",
                "+                                                             _publishImmediate);",
                "+        frames.add(new AMQFrame(_interaction.getChannelId(), publishFrame));",
                "+        final BasicContentHeaderProperties basicContentHeaderProperties = new BasicContentHeaderProperties();",
                "+        basicContentHeaderProperties.setHeaders(FieldTable.convertToFieldTable(_contentHeaderPropertiesHeaders));",
                "+        basicContentHeaderProperties.setContentType(_contentHeaderPropertiesContentType);",
                "+        basicContentHeaderProperties.setDeliveryMode(_contentHeaderPropertiesDeliveryMode);",
                "+        basicContentHeaderProperties.setPriority(_contentHeaderPropertiesPriority);",
                "+        final int contentSize = _content == null ? 0 : _content.length;",
                "+        ContentHeaderBody contentHeaderBody = new ContentHeaderBody(basicContentHeaderProperties, contentSize);",
                "+        frames.add(new AMQFrame(_interaction.getChannelId(), contentHeaderBody));",
                "+        if (contentSize > 0)",
                "+        {",
                "+            final int framePayloadMax = _interaction.getMaximumFrameSize() - 8;",
                "+            int offset = 0;",
                "+            do",
                "+            {",
                "+                int contentToCopyLength = Math.min(framePayloadMax, contentSize - offset);",
                "+                ContentBody contentBody = new ContentBody(ByteBuffer.wrap(_content, offset,",
                "+                                                                          contentToCopyLength));",
                "+                frames.add(new AMQFrame(_interaction.getChannelId(), contentBody));",
                "+                offset += contentToCopyLength;",
                "+            }",
                "+            while (offset < contentSize);",
                "+        }",
                "+",
                "+        CompositeAMQDataBlock frame = new CompositeAMQDataBlock(frames.toArray(new AMQFrame[frames.size()]));",
                "+",
                "+        return _interaction.sendPerformative(frame);",
                "+    }",
                "+",
                "+    public BasicInteraction publishExchange(final String exchangeName)",
                "+    {",
                "+        _publishExchange = exchangeName;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction publishRoutingKey(final String queueName)",
                "+    {",
                "+        _publishRoutingKey = queueName;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction qosPrefetchCount(final int prefetchCount)",
                "+    {",
                "+        _qosPrefetchCount = prefetchCount;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction qos() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new BasicQosBody(_qosPrefetchSize,",
                "+                                                              _qosPrefetchCount,",
                "+                                                              _qosGlobal));",
                "+    }",
                "+",
                "+    public Interaction consume() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new BasicConsumeBody(0,",
                "+                                                                  AMQShortString.valueOf(_consumeQueueName),",
                "+                                                                  AMQShortString.valueOf(_consumeConsumerTag),",
                "+                                                                  _consumeNoLocal,",
                "+                                                                  _consumeNoAck,",
                "+                                                                  _consumeExclusive,",
                "+                                                                  _consumeNoWait,",
                "+                                                                  FieldTable.convertToFieldTable(_consumeArguments)));",
                "+    }",
                "+",
                "+    public BasicInteraction consumeConsumerTag(final String consumerTag)",
                "+    {",
                "+        _consumeConsumerTag = consumerTag;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction consumeQueue(final String queueName)",
                "+    {",
                "+        _consumeQueueName = queueName;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction ack() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new BasicAckBody(_ackDeliveryTag, _ackMultiple));",
                "+    }",
                "+",
                "+    public BasicInteraction ackDeliveryTag(final long deliveryTag)",
                "+    {",
                "+        _ackDeliveryTag = deliveryTag;",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "new file mode 100644",
                "index 0000000000..51d44260ca",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ChannelCloseBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ChannelFlowBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ChannelOpenBody;",
                "+",
                "+public class ChannelInteraction",
                "+{",
                "+    private Interaction _interaction;",
                "+",
                "+    public ChannelInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+    public Interaction open() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ChannelOpenBody());",
                "+    }",
                "+",
                "+    public Interaction close() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ChannelCloseBody(200, AMQShortString.valueOf(\"\"), 0, 0));",
                "+    }",
                "+",
                "+    public Interaction flow(final boolean active) throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ChannelFlowBody(active));",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ClientDecoder.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ClientDecoder.java",
                "new file mode 100644",
                "index 0000000000..2bd9d27f54",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ClientDecoder.java",
                "@@ -0,0 +1,323 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.ProtocolVersion;",
                "+import org.apache.qpid.server.protocol.v0_8.AMQDecoder;",
                "+import org.apache.qpid.server.protocol.v0_8.AMQFrameDecodingException;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.*;",
                "+",
                "+public class ClientDecoder extends AMQDecoder<ClientMethodProcessor<? extends ClientChannelMethodProcessor>>",
                "+{",
                "+    private QpidByteBuffer _incompleteBuffer;",
                "+",
                "+    /**",
                "+     * Creates a new AMQP decoder.",
                "+     *",
                "+     * @param methodProcessor          method processor",
                "+     */",
                "+    public ClientDecoder(final ClientMethodProcessor<? extends ClientChannelMethodProcessor> methodProcessor)",
                "+    {",
                "+        super(false, methodProcessor);",
                "+    }",
                "+",
                "+    public void decodeBuffer(ByteBuffer incomingBuffer) throws AMQFrameDecodingException, AMQProtocolVersionException",
                "+    {",
                "+        if (_incompleteBuffer == null)",
                "+        {",
                "+            QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(incomingBuffer);",
                "+            final int required = decode(qpidByteBuffer);",
                "+            if (required != 0)",
                "+            {",
                "+                _incompleteBuffer = QpidByteBuffer.allocate(qpidByteBuffer.remaining() + required);",
                "+                _incompleteBuffer.put(qpidByteBuffer);",
                "+            }",
                "+            qpidByteBuffer.dispose();",
                "+        }",
                "+        else",
                "+        {",
                "+            if (incomingBuffer.remaining() < _incompleteBuffer.remaining())",
                "+            {",
                "+                _incompleteBuffer.put(incomingBuffer);",
                "+            }",
                "+            else",
                "+            {",
                "+                _incompleteBuffer.flip();",
                "+                final QpidByteBuffer aggregatedBuffer =",
                "+                        QpidByteBuffer.allocate(_incompleteBuffer.remaining() + incomingBuffer.remaining());",
                "+                aggregatedBuffer.put(_incompleteBuffer);",
                "+                aggregatedBuffer.put(incomingBuffer);",
                "+                aggregatedBuffer.flip();",
                "+                final int required = decode(aggregatedBuffer);",
                "+",
                "+                _incompleteBuffer.dispose();",
                "+                if (required != 0)",
                "+                {",
                "+                    _incompleteBuffer = QpidByteBuffer.allocate(aggregatedBuffer.remaining() + required);",
                "+                    _incompleteBuffer.put(aggregatedBuffer);",
                "+                }",
                "+                else",
                "+                {",
                "+                    _incompleteBuffer = null;",
                "+                }",
                "+                aggregatedBuffer.dispose();",
                "+            }",
                "+        }",
                "+        // post-condition: assert(!incomingBuffer.hasRemaining());",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void processMethod(int channelId,",
                "+                       QpidByteBuffer in)",
                "+            throws AMQFrameDecodingException",
                "+    {",
                "+        ClientMethodProcessor<? extends ClientChannelMethodProcessor> methodProcessor = getMethodProcessor();",
                "+        ClientChannelMethodProcessor channelMethodProcessor = methodProcessor.getChannelMethodProcessor(channelId);",
                "+        final int classAndMethod = in.getInt();",
                "+        int classId = classAndMethod >> 16;",
                "+        int methodId = classAndMethod & 0xFFFF;",
                "+        methodProcessor.setCurrentMethod(classId, methodId);",
                "+        try",
                "+        {",
                "+            switch (classAndMethod)",
                "+            {",
                "+                //CONNECTION_CLASS:",
                "+                case 0x000a000a:",
                "+                    ConnectionStartBody.process(in, methodProcessor);",
                "+                    break;",
                "+                case 0x000a0014:",
                "+                    ConnectionSecureBody.process(in, methodProcessor);",
                "+                    break;",
                "+                case 0x000a001e:",
                "+                    ConnectionTuneBody.process(in, methodProcessor);",
                "+                    break;",
                "+                case 0x000a0029:",
                "+                    ConnectionOpenOkBody.process(in, methodProcessor);",
                "+                    break;",
                "+                case 0x000a002a:",
                "+                    ConnectionRedirectBody.process(in, methodProcessor);",
                "+                    break;",
                "+                case 0x000a0032:",
                "+                    if (methodProcessor.getProtocolVersion().equals(ProtocolVersion.v0_8))",
                "+                    {",
                "+                        ConnectionRedirectBody.process(in, methodProcessor);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        ConnectionCloseBody.process(in, methodProcessor);",
                "+                    }",
                "+                    break;",
                "+                case 0x000a0033:",
                "+                    if (methodProcessor.getProtocolVersion().equals(ProtocolVersion.v0_8))",
                "+                    {",
                "+                        throw newUnknownMethodException(classId, methodId,",
                "+                                                        methodProcessor.getProtocolVersion());",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        methodProcessor.receiveConnectionCloseOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x000a003c:",
                "+                    if (methodProcessor.getProtocolVersion().equals(ProtocolVersion.v0_8))",
                "+                    {",
                "+                        ConnectionCloseBody.process(in, methodProcessor);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        throw newUnknownMethodException(classId, methodId,",
                "+                                                        methodProcessor.getProtocolVersion());",
                "+                    }",
                "+                    break;",
                "+                case 0x000a003d:",
                "+                    if (methodProcessor.getProtocolVersion().equals(ProtocolVersion.v0_8))",
                "+                    {",
                "+                        methodProcessor.receiveConnectionCloseOk();",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        throw newUnknownMethodException(classId, methodId,",
                "+                                                        methodProcessor.getProtocolVersion());",
                "+                    }",
                "+                    break;",
                "+",
                "+                // CHANNEL_CLASS:",
                "+",
                "+                case 0x0014000b:",
                "+                    ChannelOpenOkBody.process(in, methodProcessor.getProtocolVersion(), channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00140014:",
                "+                    ChannelFlowBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00140015:",
                "+                    ChannelFlowOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x0014001e:",
                "+                    ChannelAlertBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00140028:",
                "+                    ChannelCloseBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00140029:",
                "+                    channelMethodProcessor.receiveChannelCloseOk();",
                "+                    break;",
                "+",
                "+                // ACCESS_CLASS:",
                "+",
                "+                case 0x001e000b:",
                "+                    AccessRequestOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+",
                "+                // EXCHANGE_CLASS:",
                "+",
                "+                case 0x0028000b:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveExchangeDeclareOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x00280015:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveExchangeDeleteOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x00280017:",
                "+                    ExchangeBoundOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+",
                "+",
                "+                // QUEUE_CLASS:",
                "+",
                "+                case 0x0032000b:",
                "+                    QueueDeclareOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00320015:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveQueueBindOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x0032001f:",
                "+                    QueuePurgeOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00320029:",
                "+                    QueueDeleteOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x00320033:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveQueueUnbindOk();",
                "+                    }",
                "+                    break;",
                "+",
                "+",
                "+                // BASIC_CLASS:",
                "+",
                "+                case 0x003c000b:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveBasicQosOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x003c0015:",
                "+                    BasicConsumeOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c001f:",
                "+                    BasicCancelOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c0032:",
                "+                    BasicReturnBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c003c:",
                "+                    BasicDeliverBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c0047:",
                "+                    BasicGetOkBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c0048:",
                "+                    BasicGetEmptyBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c0050:",
                "+                    BasicAckBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+                case 0x003c0065:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveBasicRecoverSyncOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x003c006f:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveBasicRecoverSyncOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x003c0078:",
                "+                    BasicNackBody.process(in, channelMethodProcessor);",
                "+                    break;",
                "+",
                "+                // CONFIRM CLASS:",
                "+",
                "+                case 0x0055000b:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveConfirmSelectOk();",
                "+                    }",
                "+                    break;",
                "+",
                "+                // TX_CLASS:",
                "+",
                "+                case 0x005a000b:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveTxSelectOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x005a0015:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveTxCommitOk();",
                "+                    }",
                "+                    break;",
                "+                case 0x005a001f:",
                "+                    if(!channelMethodProcessor.ignoreAllButCloseOk())",
                "+                    {",
                "+                        channelMethodProcessor.receiveTxRollbackOk();",
                "+                    }",
                "+                    break;",
                "+",
                "+                default:",
                "+                    throw newUnknownMethodException(classId, methodId,",
                "+                                                    methodProcessor.getProtocolVersion());",
                "+",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            methodProcessor.setCurrentMethod(0, 0);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "new file mode 100644",
                "index 0000000000..023e7fcb94",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "@@ -0,0 +1,103 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "+import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionOpenBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionStartOkBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionTuneOkBody;",
                "+",
                "+public class ConnectionInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+",
                "+    private final Map<String, Object> _startOkClientProperties = new HashMap<>();",
                "+    private String _startOkMechanism;",
                "+    private byte[] _startOkResponse;",
                "+    private String _startOkLocale;",
                "+    private int _tuneOkChannelMax;",
                "+    private long _tuneOkFrameMax;",
                "+    private int _tuneOkHeartbeat;",
                "+    private String _openVirtualHost;",
                "+",
                "+    public ConnectionInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+",
                "+    public ConnectionInteraction startOkMechanism(final String startOkMechanism)",
                "+    {",
                "+        _startOkMechanism = startOkMechanism;",
                "+        return this;",
                "+    }",
                "+",
                "+",
                "+    public Interaction startOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ConnectionStartOkBody(FieldTable.convertToFieldTable(_startOkClientProperties),",
                "+                                                                       AMQShortString.valueOf(_startOkMechanism),",
                "+                                                                       _startOkResponse,",
                "+                                                                       AMQShortString.valueOf(_startOkLocale)));",
                "+    }",
                "+",
                "+    public ConnectionInteraction tuneOkChannelMax(final int channelMax)",
                "+    {",
                "+        _tuneOkChannelMax = channelMax;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConnectionInteraction tuneOkFrameMax(final long frameMax)",
                "+    {",
                "+        _tuneOkFrameMax = frameMax;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ConnectionInteraction tuneOkHeartbeat(final int heartbeat)",
                "+    {",
                "+        _tuneOkHeartbeat = heartbeat;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction tuneOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ConnectionTuneOkBody(_tuneOkChannelMax,",
                "+                                                                      _tuneOkFrameMax,",
                "+                                                                      _tuneOkHeartbeat));",
                "+    }",
                "+",
                "+    public ConnectionInteraction openVirtualHost(String virtualHost)",
                "+    {",
                "+        _openVirtualHost = virtualHost;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction open() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ConnectionOpenBody(AMQShortString.valueOf(_openVirtualHost),",
                "+                                                                    null,",
                "+                                                                    false));",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "new file mode 100644",
                "index 0000000000..499fe72d66",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.List;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.ProtocolVersion;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQDataBlock;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.FrameCreatingMethodProcessor;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ProtocolInitiation;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+import org.apache.qpid.tests.protocol.HeaderResponse;",
                "+import org.apache.qpid.tests.protocol.InputDecoder;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class FrameDecoder implements InputDecoder",
                "+{",
                "+    private final ClientDecoder _clientDecoder;",
                "+    private final FrameCreatingMethodProcessor _methodProcessor;",
                "+",
                "+    FrameDecoder(ProtocolVersion protocolVersion)",
                "+    {",
                "+        _methodProcessor = new FrameCreatingMethodProcessor(protocolVersion);",
                "+        _clientDecoder = new ClientDecoder(_methodProcessor);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<Response<?>> decode(final ByteBuffer inputBuffer) throws Exception",
                "+    {",
                "+        _clientDecoder.decodeBuffer(inputBuffer);",
                "+",
                "+        List<AMQDataBlock> receivedFrames = new ArrayList<>(_methodProcessor.getProcessedMethods());",
                "+        List<Response<?>> result = new ArrayList<>();",
                "+",
                "+        for (AMQDataBlock frame : receivedFrames)",
                "+        {",
                "+            if (frame instanceof AMQFrame)",
                "+            {",
                "+                AMQFrame amqFrame = (AMQFrame) frame;",
                "+                result.add(new PerformativeResponse(amqFrame.getChannel(), amqFrame.getSize(), amqFrame.getBodyFrame()));",
                "+            }",
                "+            else if (frame instanceof ProtocolInitiation)",
                "+            {",
                "+                byte[] data =  new byte[(int) frame.getSize()];",
                "+                frame.writePayload(new ByteBufferSender()",
                "+                {",
                "+                    @Override",
                "+                    public boolean isDirectBufferPreferred()",
                "+                    {",
                "+                        return false;",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public void send(final QpidByteBuffer msg)",
                "+                    {",
                "+                        msg.copyTo(data);",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public void flush()",
                "+                    {",
                "+",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public void close()",
                "+                    {",
                "+",
                "+                    }",
                "+                });",
                "+",
                "+                result.add(new HeaderResponse(data));",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new IllegalArgumentException(String.format(\"Unexpected data block received %s\", frame));",
                "+            }",
                "+        }",
                "+        _methodProcessor.getProcessedMethods().removeAll(receivedFrames);",
                "+        return result;",
                "+    }",
                "+",
                "+    ProtocolVersion getVersion()",
                "+    {",
                "+        return _methodProcessor.getProtocolVersion();",
                "+    }",
                "+",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameEncoder.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameEncoder.java",
                "new file mode 100644",
                "index 0000000000..9b471fc059",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameEncoder.java",
                "@@ -0,0 +1,83 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQDataBlock;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+import org.apache.qpid.tests.protocol.OutputEncoder;",
                "+",
                "+public class FrameEncoder implements OutputEncoder",
                "+{",
                "+",
                "+    @Override",
                "+    public ByteBuffer encode(final Object msg)",
                "+    {",
                "+        if (msg instanceof AMQDataBlock)",
                "+        {",
                "+            final List<ByteBuffer>buffers = new ArrayList<>();",
                "+            ((AMQDataBlock)msg).writePayload(new ByteBufferSender()",
                "+            {",
                "+                @Override",
                "+                public boolean isDirectBufferPreferred()",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                @Override",
                "+                public void send(final QpidByteBuffer msg)",
                "+                {",
                "+                    byte[] data = new byte[msg.remaining()];",
                "+                    msg.get(data);",
                "+                    buffers.add(ByteBuffer.wrap(data));",
                "+                }",
                "+",
                "+                @Override",
                "+                public void flush()",
                "+                {",
                "+                }",
                "+",
                "+                @Override",
                "+                public void close()",
                "+                {",
                "+",
                "+                }",
                "+            });",
                "+            int remaining = 0;",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                remaining += byteBuffer.remaining();",
                "+            }",
                "+            ByteBuffer result = ByteBuffer.allocate(remaining);",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                result.put(byteBuffer);",
                "+            }",
                "+            result.flip();",
                "+            return result;",
                "+        }",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "new file mode 100644",
                "index 0000000000..52cd7a0bf7",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "@@ -0,0 +1,101 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+",
                "+import org.apache.qpid.server.model.Protocol;",
                "+import org.apache.qpid.server.plugin.ProtocolEngineCreator;",
                "+import org.apache.qpid.server.plugin.QpidServiceLoader;",
                "+import org.apache.qpid.server.protocol.ProtocolVersion;",
                "+",
                "+",
                "+public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                "+{",
                "+    private final byte[] _protocolHeader;",
                "+    private ProtocolVersion _protocolVersion;",
                "+",
                "+    public FrameTransport(final InetSocketAddress brokerAddress)",
                "+    {",
                "+        this(brokerAddress, Protocol.AMQP_0_9_1);",
                "+    }",
                "+    public FrameTransport(final InetSocketAddress brokerAddress, Protocol protocol)",
                "+    {",
                "+        super(brokerAddress, new FrameDecoder(getProtocolVersion(protocol)), new FrameEncoder());",
                "+        _protocolVersion = getProtocolVersion(protocol);",
                "+        byte[] protocolHeader = null;",
                "+        for(ProtocolEngineCreator installedEngine : (new QpidServiceLoader()).instancesOf(ProtocolEngineCreator.class))",
                "+        {",
                "+            if (installedEngine.getVersion() == protocol)",
                "+            {",
                "+                protocolHeader = installedEngine.getHeaderIdentifier();",
                "+            }",
                "+        }",
                "+",
                "+        if (protocolHeader == null)",
                "+        {",
                "+            throw new IllegalArgumentException(String.format(\"Unsupported protocol %s\", protocol));",
                "+        }",
                "+        _protocolHeader = protocolHeader;",
                "+    }",
                "+",
                "+    @Override",
                "+    public FrameTransport connect()",
                "+    {",
                "+        super.connect();",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction newInteraction()",
                "+    {",
                "+        return new Interaction(this);",
                "+    }",
                "+",
                "+    public byte[] getProtocolHeader()",
                "+    {",
                "+        return _protocolHeader;",
                "+    }",
                "+",
                "+    public ProtocolVersion getProtocolVersion()",
                "+    {",
                "+        return _protocolVersion;",
                "+    }",
                "+",
                "+    public static ProtocolVersion getProtocolVersion(Protocol protocol)",
                "+    {",
                "+        final ProtocolVersion protocolVersion;",
                "+        switch (protocol)",
                "+        {",
                "+            case AMQP_0_8:",
                "+                protocolVersion = ProtocolVersion.v0_8;",
                "+                break;",
                "+            case AMQP_0_9_1:",
                "+                protocolVersion = ProtocolVersion.v0_91;",
                "+                break;",
                "+            case AMQP_0_9:",
                "+                protocolVersion = ProtocolVersion.v0_9;",
                "+                break;",
                "+            default:",
                "+                throw new IllegalArgumentException(String.format(\"Unsupported protocol %s\", protocol));",
                "+        }",
                "+        return protocolVersion;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "new file mode 100644",
                "index 0000000000..0b62770abf",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "@@ -0,0 +1,109 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQDataBlock;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionOpenOkBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionStartBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionTuneBody;",
                "+",
                "+public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                "+{",
                "+",
                "+    private int _channelId;",
                "+    private int _maximumPayloadSize = 512;",
                "+",
                "+    Interaction(final FrameTransport transport)",
                "+    {",
                "+        super(transport);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected byte[] getProtocolHeader()",
                "+    {",
                "+        return getTransport().getProtocolHeader();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Interaction getInteraction()",
                "+    {",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction sendPerformative(final AMQBody amqBody) throws Exception",
                "+    {",
                "+        return sendPerformative(getChannelId(), amqBody);",
                "+    }",
                "+",
                "+    public Interaction sendPerformative(int channel, final AMQBody amqBody) throws Exception",
                "+    {",
                "+        final AMQFrame frameBody = new AMQFrame(channel, amqBody);",
                "+        sendPerformativeAndChainFuture(frameBody, false);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction sendPerformative(final AMQDataBlock dataBlock) throws Exception",
                "+    {",
                "+        sendPerformativeAndChainFuture(dataBlock, false);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction openAnonymousConnection() throws Exception",
                "+    {",
                "+        return this.negotiateProtocol().consumeResponse(ConnectionStartBody.class)",
                "+                   .connection().startOkMechanism(\"ANONYMOUS\").startOk().consumeResponse(ConnectionTuneBody.class)",
                "+                   .connection().tuneOk()",
                "+                   .connection().open().consumeResponse(ConnectionOpenOkBody.class);",
                "+",
                "+    }",
                "+",
                "+    public ConnectionInteraction connection()",
                "+    {",
                "+        return new ConnectionInteraction(this);",
                "+    }",
                "+",
                "+    public ChannelInteraction channel()",
                "+    {",
                "+        return new ChannelInteraction(this);",
                "+    }",
                "+",
                "+    public QueueInteraction queue()",
                "+    {",
                "+        return new QueueInteraction(this);",
                "+    }",
                "+",
                "+    public int getChannelId()",
                "+    {",
                "+        return _channelId;",
                "+    }",
                "+",
                "+    public int getMaximumFrameSize()",
                "+    {",
                "+        return _maximumPayloadSize;",
                "+    }",
                "+",
                "+    public BasicInteraction basic()",
                "+    {",
                "+        return new BasicInteraction(this);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/PerformativeResponse.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/PerformativeResponse.java",
                "new file mode 100644",
                "index 0000000000..66871e9204",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/PerformativeResponse.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class PerformativeResponse implements Response<AMQBody>",
                "+{",
                "+    private final int _channel;",
                "+    private final long _size;",
                "+    private final AMQBody _body;",
                "+",
                "+    public PerformativeResponse(int channel, long size, final AMQBody body)",
                "+    {",
                "+        _channel = channel;",
                "+        _size = size;",
                "+        _body = body;",
                "+    }",
                "+",
                "+    @Override",
                "+    public AMQBody getBody()",
                "+    {",
                "+        return _body;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"PerformativeResponse{\" +",
                "+               \"_channel=\" + _channel +",
                "+               \", _size=\" + _size +",
                "+               \", _body=\" + _body +",
                "+               '}';",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "new file mode 100644",
                "index 0000000000..6e8638512e",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_8;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                "+import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.QueueDeclareBody;",
                "+",
                "+public class QueueInteraction",
                "+{",
                "+    private Interaction _interaction;",
                "+    private String _declareName;",
                "+    private boolean _declarePassive;",
                "+    private boolean _declareDurable;",
                "+    private boolean _declareExclusive;",
                "+    private boolean _declareAutoDelete;",
                "+    private boolean _declareNowait;",
                "+    private Map<String, Object> _declareArguments = new HashMap<>();",
                "+",
                "+    public QueueInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+    }",
                "+",
                "+    public QueueInteraction declareName(String name)",
                "+    {",
                "+        _declareName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction declare() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new QueueDeclareBody(0,",
                "+                                                                  AMQShortString.valueOf(_declareName),",
                "+                                                                  _declarePassive,",
                "+                                                                  _declareDurable,",
                "+                                                                  _declareExclusive,",
                "+                                                                  _declareAutoDelete,",
                "+                                                                  _declareNowait,",
                "+                                                                  FieldTable.convertToFieldTable(_declareArguments)));",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json b/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "new file mode 100644",
                "index 0000000000..d3738c98b0",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java",
                "pom.xml",
                "systests/protocol-tests-amqp-0-8/pom.xml",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ClientDecoder.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameEncoder.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/PerformativeResponse.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameEncoder.java, systests/protocol-tests-amqp-0-8/pom.xml, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ClientDecoder.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/PerformativeResponse.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java, systests/protocol-tests-amqp-0-8/src/main/resources/config-protocol-tests-0-8.json, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQDecoder.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ServerDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connection, connect, perform, protocol, port, amqp",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9a762859553d50d0cc52cf308e3da199c0953698",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514389764,
            "hunks": 15,
            "message": "QPID-8060: [Broker-J][AMQP 0-8..0-10] Address review comments Cherry picked from master efb7ec0",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 1c071780da..6227384467 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -1057,5 +1057,3 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new UnknownAlternateBindingException(String.format(",
                "-                        \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                throw new UnknownAlternateBindingException(destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index ceb9610de9..09ec51c203 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -3537,5 +3537,3 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new UnknownAlternateBindingException(String.format(",
                "-                        \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                throw new UnknownAlternateBindingException(destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "index c3f88e6a1c..0d3e581d55 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "@@ -26,5 +26,13 @@ public class UnknownAlternateBindingException extends IllegalConfigurationExcept",
                " {",
                "-    public UnknownAlternateBindingException(final String message)",
                "+    private final String _alternateBindingName;",
                "+",
                "+    public UnknownAlternateBindingException(final String alternateBindingName)",
                "+    {",
                "+        super(String.format(\"Alternate binding destination '%s' is not found.\", alternateBindingName));",
                "+        _alternateBindingName = alternateBindingName;",
                "+    }",
                "+",
                "+    public String getAlternateBindingName()",
                "     {",
                "-        super(message);",
                "+        return _alternateBindingName;",
                "     }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index 5af1cef2d5..1ef431c7fc 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -954,7 +954,8 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch(UnknownAlternateBindingException e)",
                "+                catch (UnknownAlternateBindingException e)",
                "                 {",
                "-",
                "-                    exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                                                                \"Unknown alternate exchange \" + alternateExchangeName);",
                "+                    exception(session,",
                "+                              method,",
                "+                              ExecutionErrorCode.NOT_FOUND,",
                "+                              String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName()));",
                "                 }",
                "@@ -1542,4 +1543,2 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "         {",
                "-",
                "-            final String alternateExchangeName = method.getAlternateExchange();",
                "             try",
                "@@ -1548,3 +1547,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                                                                                                      method.getArguments());",
                "-",
                "+                final String alternateExchangeName = method.getAlternateExchange();",
                "                 if (method.hasAlternateExchange() && !nameNullOrEmpty(alternateExchangeName))",
                "@@ -1605,4 +1604,6 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             {",
                "-                exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                          \"Unknown alternate exchange \" + alternateExchangeName);",
                "+                exception(session,",
                "+                          method,",
                "+                          ExecutionErrorCode.NOT_FOUND,",
                "+                          String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName()));",
                "             }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index d942abd721..a12b483d6e 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -2644,3 +2644,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 String typeString = type == null ? null : type.toString();",
                "-                String alternateExchangeName = null;",
                "                 try",
                "@@ -2662,3 +2661,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                     {",
                "-                        alternateExchangeName = String.valueOf(alternateExchange);",
                "+                        String alternateExchangeName = String.valueOf(alternateExchange);",
                "                         validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "@@ -2726,3 +2725,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    final String message = String.format(\"Unknown alternate exchange '%s'\", alternateExchangeName);",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getAlternateBindingName());",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -3004,3 +3003,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-            String alternateExchangeName = null;",
                "             try",
                "@@ -3012,3 +3010,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    alternateExchangeName = String.valueOf(alternateExchange);",
                "+                    String alternateExchangeName = String.valueOf(alternateExchange);",
                "                     validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "@@ -3133,3 +3131,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             {",
                "-                final String message = String.format(\"Unknown alternate exchange: '%s'\", alternateExchangeName);",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getAlternateBindingName());",
                "                 _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "efb7ec0c1d68f130cf7d5598b4eded9b499abc1d"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89259c2de1aa1df1f582e0012c881cbb8cf61e00",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512642781,
            "hunks": 10,
            "message": "QPID-8061: [Broker-J] [AMQP 0-8..0-9-1] Handle unknown alternate exchange on exchange declaration Cherry picked from master 38c04f8.",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index 897878ddc6..b3714e9667 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -73,2 +73,3 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "+import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.LinkModel;",
                "@@ -1056,5 +1057,5 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new IllegalConfigurationException(String.format(",
                "+                throw new UnknownConfiguredObjectException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "index f35a68a49c..f460df734b 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "@@ -30,5 +30,7 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "+    public UnknownConfiguredObjectException(String exceptionMessage,",
                "+                                            final Class<? extends ConfiguredObject> category,",
                "+                                            final String name)",
                "     {",
                "-        super(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\");",
                "+        super(exceptionMessage);",
                "         _category = category;",
                "@@ -37,2 +39,9 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "+    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "+    {",
                "+        this(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\",",
                "+             category,",
                "+             name);",
                "+    }",
                "+",
                "     public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final UUID id)",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index ab5581c64c..9fd9b52b57 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -988,3 +988,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch (IllegalConfigurationException e)",
                "+                catch (IllegalArgumentException | IllegalConfigurationException e)",
                "                 {",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index d2f071e468..5eef2535d6 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -85,3 +85,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.Session;",
                " import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                "@@ -2725,7 +2724,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    // note - since 0-8/9/9-1 can't set the alt. exchange this exception should never occur",
                "-                    final String message = \"Unknown alternate exchange \"",
                "-                                           + (e.getName() != null",
                "-                            ? \"name: '\" + e.getName() + \"'\"",
                "-                            : \"id: \" + e.getId());",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getName());",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -2733,3 +2728,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 }",
                "-                catch (IllegalArgumentException e)",
                "+                catch (IllegalArgumentException | IllegalConfigurationException e)",
                "                 {"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8061": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "38c04f8cfa08e9552f83c7276aa32d4a427c3c5d"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, configure, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8061",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "01bcb51d49d1893f98f2b870ca3962e70ad2d446",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512492665,
            "hunks": 5,
            "message": "QPID-8027: [Broker-J][AMQP 0-8..0-9-1] Restore previous broker behaviour to ignore invalid delivery tag on message acknowledgement",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index df9f946cdf..d2f071e468 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -1738,4 +1738,25 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         Collection<MessageConsumerAssociation> ackedMessages = _unacknowledgedMessageMap.acknowledge(deliveryTag, multiple);",
                "-        final Collection<MessageInstance> messages = Collections2.transform(ackedMessages, MESSAGE_INSTANCE_FUNCTION);",
                "-        _transaction.dequeue(messages, new MessageAcknowledgeAction(ackedMessages));",
                "+",
                "+        if (!ackedMessages.isEmpty())",
                "+        {",
                "+            final Collection<MessageInstance> messages =",
                "+                    Collections2.transform(ackedMessages, MESSAGE_INSTANCE_FUNCTION);",
                "+            _transaction.dequeue(messages, new MessageAcknowledgeAction(ackedMessages));",
                "+        }",
                "+",
                "+        /*",
                "+        The AMQP 0-9-1 spec requires to raise a channel exception \"precondition-failed\"",
                "+        when delivery tag is not valid:",
                "+        {quote}",
                "+          The server MUST validate that a non-zero delivery-tag refers to a delivered message, and raise a channel",
                "+          exception if this is not the case. On a transacted channel, this check MUST be done immediately and not",
                "+          delayed until a Tx.Commit. Specifically, a client MUST not acknowledge the same message more than once.",
                "+        {quote}",
                "+",
                "+        The current broker behaviour is spec incompliant but it is kept for backward compatibility.",
                "+        It should close the channel as below:",
                "+",
                "+        if (ackedMessages.isEmpty())",
                "+            closeChannel(ErrorCodes.NOT_ALLOWED, \"precondition-failed: Delivery tag '%d' is not valid.\");",
                "+        */",
                "     }",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java",
                "index 88ac3a52e7..a8c57093ee 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java",
                "@@ -31,2 +31,3 @@ import org.apache.qpid.server.message.MessageInstance;",
                " import org.apache.qpid.server.message.MessageInstanceConsumer;",
                "+import org.apache.qpid.server.protocol.ErrorCodes;",
                " import org.apache.qpid.server.util.ConnectionScopedRuntimeException;",
                "@@ -182,12 +183,11 @@ class UnacknowledgedMessageMapImpl implements UnacknowledgedMessageMap",
                "             final MessageConsumerAssociation association = remove(deliveryTag, true);",
                "-            final MessageInstance messageInstance = association.getMessageInstance();",
                "-            if(association != null && messageInstance.makeAcquisitionUnstealable(association.getConsumer()))",
                "+            if (association != null)",
                "             {",
                "-                return Collections.singleton(association);",
                "-            }",
                "-            else",
                "-            {",
                "-                return Collections.emptySet();",
                "+                final MessageInstance messageInstance = association.getMessageInstance();",
                "+                if (messageInstance != null && messageInstance.makeAcquisitionUnstealable(association.getConsumer()))",
                "+                {",
                "+                    return Collections.singleton(association);",
                "+                }",
                "             }",
                "-",
                "+            return Collections.emptySet();",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8027": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ba891cac2128bc2bab240dd4c173ca19ee6c5d4a"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/UnacknowledgedMessageMapImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8027",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2cbb629136f9c53a854a8268d3061e8501eb9611",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511196939,
            "hunks": 24,
            "message": "QPID-8042: [System Tests] Improve pipe-lining of frames in protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "index 0b62770abf..29e058c10d 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "@@ -60,3 +60,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         final AMQFrame frameBody = new AMQFrame(channel, amqBody);",
                "-        sendPerformativeAndChainFuture(frameBody, false);",
                "+        sendPerformativeAndChainFuture(frameBody);",
                "         return this;",
                "@@ -66,3 +66,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        sendPerformativeAndChainFuture(dataBlock, false);",
                "+        sendPerformativeAndChainFuture(dataBlock);",
                "         return this;",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 7d73ce8b20..4aad6ee838 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -155,3 +155,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "-        Response<?> response = getNextResponse();",
                "+        Response<?> response = consumeResponse().getLatestResponse();",
                "         if (!(response.getBody() instanceof Close))",
                "@@ -985,3 +985,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         SASLFrame transportFrame = new SASLFrame(frameBody);",
                "-        sendPerformativeAndChainFuture(transportFrame, true);",
                "+        sendPerformativeAndChainFuture(transportFrame);",
                "     }",
                "@@ -1003,3 +1003,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "             transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "-            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame, false);",
                "+            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame);",
                "             if (frameBody instanceof Transfer)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "index daf500db11..28dc02eba7 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "@@ -33,3 +33,2 @@ import java.util.concurrent.TimeUnit;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.JdkFutureAdapters;",
                "@@ -40,3 +39,2 @@ import io.netty.buffer.ByteBufAllocator;",
                " import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFuture;",
                " import io.netty.channel.ChannelInitializer;",
                "@@ -140,3 +138,2 @@ public abstract class FrameTransport implements AutoCloseable",
                "         _channel.write(buffer, promise);",
                "-        _channel.flush();",
                "         return JdkFutureAdapters.listenInPoolThread(promise);",
                "@@ -144,18 +141,8 @@ public abstract class FrameTransport implements AutoCloseable",
                "-    public ListenableFuture<Void> sendPerformative(final Object data, boolean sync) throws Exception",
                "+    public ListenableFuture<Void> sendPerformative(final Object data) throws Exception",
                "     {",
                "         Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        if (!sync)",
                "-        {",
                "-            ChannelPromise promise = _channel.newPromise();",
                "-            _channel.write(data, promise);",
                "-            _channel.flush();",
                "-            return JdkFutureAdapters.listenInPoolThread(promise);",
                "-        }",
                "-        else",
                "-        {",
                "-            ChannelFuture channelFuture = _channel.writeAndFlush(data);",
                "-            channelFuture.sync();",
                "-            return Futures.immediateFuture(null);",
                "-        }",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        _channel.write(data, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "     }",
                "@@ -179,2 +166,7 @@ public abstract class FrameTransport implements AutoCloseable",
                "+    public void flush()",
                "+    {",
                "+        _channel.flush();",
                "+    }",
                "+",
                "     private static class ChannelClosedResponse implements Response<Void>",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "index 2390227f75..b6e631d023 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -77,2 +77,3 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "+        _transport.flush();",
                "         if (_latestFuture != null)",
                "@@ -87,3 +88,2 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "-        sync();",
                "         return _latestResponse;",
                "@@ -93,4 +93,2 @@ public abstract class Interaction<I extends Interaction>",
                "     {",
                "-        sync();",
                "-",
                "         if (_latestResponse.getBody() == null)",
                "@@ -112,5 +110,5 @@ public abstract class Interaction<I extends Interaction>",
                "-    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody, boolean sync) throws Exception",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody) throws Exception",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, sync);",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "         if (_latestFuture != null)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "index 40a2ca784f..5d40447085 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.tests.protocol;",
                " import java.nio.ByteBuffer;",
                "+import java.util.LinkedList;",
                "+import java.util.Queue;",
                "@@ -33,2 +35,4 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "     private final OutputEncoder _outputEncoder;",
                "+    private Queue<ByteBufferPromisePair> _cachedEncodedFramePromisePairs;",
                "+    private int _encodedSize;",
                "@@ -37,2 +41,4 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         _outputEncoder = outputEncoder;",
                "+        _cachedEncodedFramePromisePairs = new LinkedList<>();",
                "+        _encodedSize = 0;",
                "     }",
                "@@ -53,8 +59,40 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "-    private void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "+    private synchronized void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "     {",
                "-        byte[] data = new byte[dataByteBuffer.remaining()];",
                "-        dataByteBuffer.get(data);",
                "+        _cachedEncodedFramePromisePairs.add(new ByteBufferPromisePair(dataByteBuffer, promise));",
                "+        _encodedSize += dataByteBuffer.remaining();",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public synchronized void flush(final ChannelHandlerContext ctx) throws Exception",
                "+    {",
                "+        final ChannelPromise promise = ctx.channel().newPromise();",
                "+        byte[] data  = new byte[_encodedSize];",
                "+",
                "+        int offset = 0;",
                "+        while(offset < _encodedSize)",
                "+        {",
                "+            ByteBufferPromisePair currentPair = _cachedEncodedFramePromisePairs.poll();",
                "+            int remaining = currentPair.byteBuffer.remaining();",
                "+            currentPair.byteBuffer.get(data, offset, remaining) ;",
                "+            offset += remaining;",
                "+",
                "+            promise.addListener(future -> {",
                "+                if (future.isSuccess())",
                "+                {",
                "+                    currentPair.channelPromise.setSuccess();",
                "+                }",
                "+                else",
                "+                {",
                "+                    currentPair.channelPromise.setFailure(future.cause());",
                "+                }",
                "+            });",
                "+        }",
                "+",
                "+        _encodedSize = 0;",
                "+",
                "         ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "         buffer.writeBytes(data);",
                "+",
                "         try",
                "@@ -67,3 +105,18 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         }",
                "+",
                "+        super.flush(ctx);",
                "+    }",
                "+",
                "+    class ByteBufferPromisePair",
                "+    {",
                "+        private ByteBuffer byteBuffer;",
                "+        private ChannelPromise channelPromise;",
                "+",
                "+        ByteBufferPromisePair(final ByteBuffer byteBuffer, final ChannelPromise channelPromise)",
                "+        {",
                "+            this.byteBuffer = byteBuffer;",
                "+            this.channelPromise = channelPromise;",
                "+        }",
                "     }",
                "+",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d1a6ca216637907315de91575058e7b6d56e1011"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ebbd693624965dd24d3007c8b2a700badfc8121",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513185461,
            "hunks": 29,
            "message": "QPID-8060: [Broker-J] [AMQP 0-8..0-9-1] Address review comments Cherry picked from master 6e83977",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "index b3714e9667..1c071780da 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "@@ -73,3 +73,2 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.LinkModel;",
                "@@ -87,2 +86,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -1057,5 +1057,5 @@ public abstract class AbstractExchange<T extends AbstractExchange<T>>",
                "             {",
                "-                throw new UnknownConfiguredObjectException(String.format(",
                "+                throw new UnknownAlternateBindingException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "+                        getName(), destinationName));",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "index f460df734b..f35a68a49c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "@@ -30,7 +30,5 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(String exceptionMessage,",
                "-                                            final Class<? extends ConfiguredObject> category,",
                "-                                            final String name)",
                "+    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "     {",
                "-        super(exceptionMessage);",
                "+        super(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\");",
                "         _category = category;",
                "@@ -39,9 +37,2 @@ public class UnknownConfiguredObjectException extends IllegalArgumentException",
                "-    public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final String name)",
                "-    {",
                "-        this(\"Could not find object of category \" + category.getSimpleName() + \" with name '\" + name + \"'\",",
                "-             category,",
                "-             name);",
                "-    }",
                "-",
                "     public UnknownConfiguredObjectException(final Class<? extends ConfiguredObject> category, final UUID id)",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index 39584d68b1..ceb9610de9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -122,2 +122,3 @@ import org.apache.qpid.server.virtualhost.MessageDestinationIsAlternateException",
                " import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -3536,5 +3537,5 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new UnknownConfiguredObjectException(String.format(",
                "+                throw new UnknownAlternateBindingException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "+                        getName(), destinationName));",
                "             }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "new file mode 100644",
                "index 0000000000..c3f88e6a1c",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.virtualhost;",
                "+",
                "+import org.apache.qpid.server.configuration.IllegalConfigurationException;",
                "+",
                "+public class UnknownAlternateBindingException extends IllegalConfigurationException",
                "+{",
                "+    public UnknownAlternateBindingException(final String message)",
                "+    {",
                "+        super(message);",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index ccaee39f7a..5af1cef2d5 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -64,3 +64,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.ErrorCodes;",
                "@@ -88,2 +87,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                " import org.apache.qpid.server.virtualhost.VirtualHostUnavailableException;",
                "@@ -954,3 +954,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                 }",
                "-                catch(UnknownConfiguredObjectException e)",
                "+                catch(UnknownAlternateBindingException e)",
                "                 {",
                "@@ -958,3 +958,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "                     exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "-                                                                \"Unknown alternate exchange \" + e.getName());",
                "+                                                                \"Unknown alternate exchange \" + alternateExchangeName);",
                "                 }",
                "@@ -1543,7 +1543,5 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "+            final String alternateExchangeName = method.getAlternateExchange();",
                "             try",
                "             {",
                "-",
                "-                final String alternateExchangeName = method.getAlternateExchange();",
                "-",
                "                 final Map<String, Object> arguments = QueueArgumentsConverter.convertWireArgsToModel(queueName,",
                "@@ -1605,2 +1603,7 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             }",
                "+            catch (UnknownAlternateBindingException e)",
                "+            {",
                "+                exception(session, method, ExecutionErrorCode.NOT_FOUND,",
                "+                          \"Unknown alternate exchange \" + alternateExchangeName);",
                "+            }",
                "             catch (IllegalArgumentException | IllegalConfigurationException e)",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 07d0f918ba..d942abd721 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -85,3 +85,2 @@ import org.apache.qpid.server.model.NoFactoryForTypeException;",
                " import org.apache.qpid.server.model.Queue;",
                "-import org.apache.qpid.server.model.UnknownConfiguredObjectException;",
                " import org.apache.qpid.server.protocol.ErrorCodes;",
                "@@ -105,2 +104,3 @@ import org.apache.qpid.server.virtualhost.RequiredExchangeException;",
                " import org.apache.qpid.server.virtualhost.ReservedExchangeNameException;",
                "+import org.apache.qpid.server.virtualhost.UnknownAlternateBindingException;",
                "@@ -2644,2 +2644,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 String typeString = type == null ? null : type.toString();",
                "+                String alternateExchangeName = null;",
                "                 try",
                "@@ -2661,5 +2662,6 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                     {",
                "-                        validateAlternateExchangeIsNotQueue(virtualHost, String.valueOf(alternateExchange));",
                "+                        alternateExchangeName = String.valueOf(alternateExchange);",
                "+                        validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "                         attributes.put(Exchange.ALTERNATE_BINDING,",
                "-                                       Collections.singletonMap(AlternateBinding.DESTINATION, alternateExchange));",
                "+                                       Collections.singletonMap(AlternateBinding.DESTINATION, alternateExchangeName));",
                "                     }",
                "@@ -2722,5 +2724,5 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 }",
                "-                catch (UnknownConfiguredObjectException e)",
                "+                catch (UnknownAlternateBindingException e)",
                "                 {",
                "-                    final String message = String.format(\"Unknown alternate exchange '%s'\", e.getName());",
                "+                    final String message = String.format(\"Unknown alternate exchange '%s'\", alternateExchangeName);",
                "                     _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "@@ -3002,3 +3004,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         {",
                "-",
                "+            String alternateExchangeName = null;",
                "             try",
                "@@ -3010,3 +3012,4 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                 {",
                "-                    validateAlternateExchangeIsNotQueue(virtualHost, String.valueOf(alternateExchange));",
                "+                    alternateExchangeName = String.valueOf(alternateExchange);",
                "+                    validateAlternateExchangeIsNotQueue(virtualHost, alternateExchangeName);",
                "                 }",
                "@@ -3128,5 +3131,5 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             }",
                "-            catch (UnknownConfiguredObjectException e)",
                "+            catch (UnknownAlternateBindingException e)",
                "             {",
                "-                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getName());",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", alternateExchangeName);",
                "                 _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java",
                "broker-core/src/main/java/org/apache/qpid/server/model/UnknownConfiguredObjectException.java",
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/UnknownAlternateBindingException.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6e839776eaaa83be78d09460c2be98f04de8abb5"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, configure, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ce345a7bb08a2c257155583e11055d1935db1e3d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512643062,
            "hunks": 4,
            "message": "QPID-8060: [Broker-J] [AMQP 0-8..0-9-1] Handle unknown alternate exchange on queue declaration Cherry picked from master 268f3fb",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "index ad400494d0..39584d68b1 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "@@ -3536,5 +3536,5 @@ public abstract class AbstractQueue<X extends AbstractQueue<X>>",
                "             {",
                "-                throw new IllegalConfigurationException(String.format(",
                "+                throw new UnknownConfiguredObjectException(String.format(",
                "                         \"Cannot create alternate binding for '%s' : Alternate binding destination '%s' cannot be found.\",",
                "-                        getName(), destinationName));",
                "+                        getName(), destinationName), ConfiguredObject.class, destinationName);",
                "             }",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "index 9fd9b52b57..ccaee39f7a 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "@@ -1605,3 +1605,3 @@ public class ServerSessionDelegate extends MethodDelegate<ServerSession> impleme",
                "             }",
                "-            catch (IllegalConfigurationException e)",
                "+            catch (IllegalArgumentException | IllegalConfigurationException e)",
                "             {",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 5eef2535d6..07d0f918ba 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -3128,3 +3128,12 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "             }",
                "-",
                "+            catch (UnknownConfiguredObjectException e)",
                "+            {",
                "+                final String message = String.format(\"Unknown alternate exchange: '%s'\", e.getName());",
                "+                _connection.sendConnectionClose(ErrorCodes.NOT_FOUND, message, getChannelId());",
                "+            }",
                "+            catch (IllegalArgumentException | IllegalConfigurationException e)",
                "+            {",
                "+                String message = String.format(\"Error creating queue '%s': %s\", queueName, e.getMessage());",
                "+                _connection.sendConnectionClose(ErrorCodes.COMMAND_INVALID, message, getChannelId());",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/queue/AbstractQueue.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8060": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "268f3fb68887208ce17987ed4d783e44073f9be8"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8060",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06e53d7a5f6cb942a2706dffe340018b659aa077",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510968689,
            "hunks": 49,
            "message": "QPID-8038: [Broker-J][System Tests] Introduce new module 'protocol-tests-core' and move test common functionality into it",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c6bbfcb902..62e7033791 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -198,2 +198,3 @@",
                "     <module>systests/qpid-systests-jms_2.0</module>",
                "+    <module>systests/protocol-tests-core</module>",
                "     <module>systests/protocol-tests-amqp-1-0</module>",
                "@@ -409,2 +410,14 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-core</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>protocol-tests-amqp-1-0</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 5200e2ddb9..aa25351d9d 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -53,2 +53,7 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>protocol-tests-core</artifactId>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "@@ -93,33 +98,4 @@",
                "             <scope>test</scope>",
                "-            <optional>true</optional>",
                "         </dependency>",
                "-        <dependency>",
                "-            <groupId>com.google.guava</groupId>",
                "-            <artifactId>guava</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-buffer</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-common</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-codec-http</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-handler</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>io.netty</groupId>",
                "-            <artifactId>netty-transport</artifactId>",
                "-        </dependency>",
                "-        <dependency>",
                "-            <groupId>org.hamcrest</groupId>",
                "-            <artifactId>hamcrest-core</artifactId>",
                "-        </dependency>",
                "         <dependency>",
                "@@ -132,2 +108,3 @@",
                "         </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "new file mode 100644",
                "index 0000000000..4dc06cbaa3",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -0,0 +1,276 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.List;",
                "+import java.util.Queue;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.ConnectionHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.codec.ValueHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.FrameHandler;",
                "+import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.UnsignedShort;",
                "+import org.apache.qpid.server.protocol.v1_0.type.codec.AMQPDescribedTypeRegistry;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslChallenge;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslCode;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslInit;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslMechanisms;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslOutcome;",
                "+import org.apache.qpid.server.protocol.v1_0.type.security.SaslResponse;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Attach;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Begin;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.ChannelFrameBody;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Close;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Detach;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Disposition;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.End;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Flow;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Open;",
                "+import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.HeaderResponse;",
                "+import org.apache.qpid.tests.protocol.InputDecoder;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class FrameDecoder implements InputDecoder",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(FrameDecoder.class);",
                "+    private static final AMQPDescribedTypeRegistry TYPE_REGISTRY = AMQPDescribedTypeRegistry.newInstance()",
                "+                                                                                            .registerTransportLayer()",
                "+                                                                                            .registerMessagingLayer()",
                "+                                                                                            .registerTransactionLayer()",
                "+                                                                                            .registerSecurityLayer()",
                "+                                                                                            .registerExtensionSoleconnLayer();",
                "+    private final MyConnectionHandler _connectionHandler;",
                "+    private volatile FrameHandler _frameHandler;",
                "+",
                "+    private enum ParsingState",
                "+    {",
                "+        HEADER,",
                "+        PERFORMATIVES;",
                "+    }",
                "+",
                "+    private final ValueHandler _valueHandler;",
                "+",
                "+    private volatile ParsingState _state = ParsingState.HEADER;",
                "+",
                "+    public FrameDecoder(final boolean isSasl)",
                "+    {",
                "+        _valueHandler = new ValueHandler(TYPE_REGISTRY);",
                "+        _connectionHandler = new MyConnectionHandler();",
                "+        _frameHandler = new FrameHandler(_valueHandler, _connectionHandler, isSasl);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<Response<?>> decode(final ByteBuffer inputBuffer)",
                "+    {",
                "+        List<Response<?>> responses = new ArrayList<>();",
                "+        QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(inputBuffer);",
                "+        switch(_state)",
                "+        {",
                "+            case HEADER:",
                "+                if (inputBuffer.remaining() >= 8)",
                "+                {",
                "+                    byte[] header = new byte[8];",
                "+                    inputBuffer.get(header);",
                "+                    responses.add(new HeaderResponse(header));",
                "+                    _state = ParsingState.PERFORMATIVES;",
                "+                    _frameHandler.parse(qpidByteBuffer);",
                "+                }",
                "+                break;",
                "+            case PERFORMATIVES:",
                "+                _frameHandler.parse(qpidByteBuffer);",
                "+                break;",
                "+            default:",
                "+                throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+        }",
                "+",
                "+        Response<?> r;",
                "+        while((r = _connectionHandler._responseQueue.poll())!=null)",
                "+        {",
                "+            responses.add(r);",
                "+        }",
                "+        return responses;",
                "+    }",
                "+",
                "+    private void resetInputHandlerAfterSaslOutcome()",
                "+    {",
                "+        _state = ParsingState.HEADER;",
                "+        _frameHandler = new FrameHandler(_valueHandler, _connectionHandler, false);",
                "+    }",
                "+",
                "+    private class MyConnectionHandler implements ConnectionHandler",
                "+    {",
                "+        private volatile int _frameSize = 512;",
                "+        private Queue<Response<?>> _responseQueue = new ConcurrentLinkedQueue<>();",
                "+",
                "+        @Override",
                "+        public void receiveOpen(final int channel, final Open close)",
                "+        {",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveClose(final int channel, final Close close)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveBegin(final int channel, final Begin begin)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveEnd(final int channel, final End end)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveAttach(final int channel, final Attach attach)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveDetach(final int channel, final Detach detach)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveTransfer(final int channel, final Transfer transfer)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveDisposition(final int channel, final Disposition disposition)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveFlow(final int channel, final Flow flow)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getMaxFrameSize()",
                "+        {",
                "+            return _frameSize;",
                "+        }",
                "+",
                "+        @Override",
                "+        public int getChannelMax()",
                "+        {",
                "+            return UnsignedShort.MAX_VALUE.intValue();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void handleError(final Error parsingError)",
                "+        {",
                "+            LOGGER.error(\"Unexpected error {}\", parsingError);",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean closedForInput()",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receive(final List<ChannelFrameBody> channelFrameBodies)",
                "+        {",
                "+            for (final ChannelFrameBody channelFrameBody : channelFrameBodies)",
                "+            {",
                "+                Response response;",
                "+                Object val = channelFrameBody.getFrameBody();",
                "+                int channel = channelFrameBody.getChannel();",
                "+                if (val instanceof FrameBody)",
                "+                {",
                "+                    FrameBody frameBody = (FrameBody) val;",
                "+                    if (frameBody instanceof Open && ((Open) frameBody).getMaxFrameSize() != null)",
                "+                    {",
                "+                        _frameSize = ((Open) frameBody).getMaxFrameSize().intValue();",
                "+                    }",
                "+                    response = new PerformativeResponse((short) channel, frameBody);",
                "+                }",
                "+                else if (val instanceof SaslFrameBody)",
                "+                {",
                "+                    SaslFrameBody frameBody = (SaslFrameBody) val;",
                "+                    response = new SaslPerformativeResponse((short) channel, frameBody);",
                "+",
                "+                    if (frameBody instanceof SaslOutcome && ((SaslOutcome) frameBody).getCode().equals(SaslCode.OK))",
                "+                    {",
                "+                        resetInputHandlerAfterSaslOutcome();",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    throw new UnsupportedOperationException(\"Unexpected frame type : \" + val.getClass());",
                "+                }",
                "+",
                "+                _responseQueue.add(response);",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslInit(final SaslInit saslInit)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslMechanisms(final SaslMechanisms saslMechanisms)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslChallenge(final SaslChallenge saslChallenge)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslResponse(final SaslResponse saslResponse)",
                "+        {",
                "+",
                "+        }",
                "+",
                "+        @Override",
                "+        public void receiveSaslOutcome(final SaslOutcome saslOutcome)",
                "+        {",
                "+",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "new file mode 100644",
                "index 0000000000..56d6e6f986",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "@@ -0,0 +1,93 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.codec.FrameWriter;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v1_0.type.codec.AMQPDescribedTypeRegistry;",
                "+import org.apache.qpid.server.transport.ByteBufferSender;",
                "+import org.apache.qpid.tests.protocol.OutputEncoder;",
                "+",
                "+public class FrameEncoder implements OutputEncoder",
                "+{",
                "+    private static final AMQPDescribedTypeRegistry TYPE_REGISTRY = AMQPDescribedTypeRegistry.newInstance()",
                "+                                                                                            .registerTransportLayer()",
                "+                                                                                            .registerMessagingLayer()",
                "+                                                                                            .registerTransactionLayer()",
                "+                                                                                            .registerSecurityLayer()",
                "+                                                                                            .registerExtensionSoleconnLayer();",
                "+",
                "+    @Override",
                "+    public ByteBuffer encode(final Object msg)",
                "+    {",
                "+        if (msg instanceof AMQFrame)",
                "+        {",
                "+            List<ByteBuffer> buffers = new ArrayList<>();",
                "+            FrameWriter _frameWriter = new FrameWriter(TYPE_REGISTRY, new ByteBufferSender()",
                "+            {",
                "+                @Override",
                "+                public boolean isDirectBufferPreferred()",
                "+                {",
                "+                    return false;",
                "+                }",
                "+",
                "+                @Override",
                "+                public void send(final QpidByteBuffer msg)",
                "+                {",
                "+                    byte[] data = new byte[msg.remaining()];",
                "+                    msg.get(data);",
                "+                    buffers.add(ByteBuffer.wrap(data));",
                "+                }",
                "+",
                "+                @Override",
                "+                public void flush()",
                "+                {",
                "+                }",
                "+",
                "+                @Override",
                "+                public void close()",
                "+                {",
                "+",
                "+                }",
                "+            });",
                "+            _frameWriter.send(((AMQFrame) msg));",
                "+",
                "+            int remaining = 0;",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                remaining += byteBuffer.remaining();",
                "+            }",
                "+            ByteBuffer result = ByteBuffer.allocate(remaining);",
                "+            for (ByteBuffer byteBuffer: buffers)",
                "+            {",
                "+                result.put(byteBuffer);",
                "+            }",
                "+            result.flip();",
                "+            return result;",
                "+        }",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "index 4d53751cad..dd59757c52 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "@@ -21,54 +21,8 @@ package org.apache.qpid.tests.protocol.v1_0;",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.anyOf;",
                "-import static org.hamcrest.Matchers.instanceOf;",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.nullValue;",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                " import java.net.InetSocketAddress;",
                "-import java.util.concurrent.ArrayBlockingQueue;",
                "-import java.util.concurrent.BlockingQueue;",
                "-import java.util.concurrent.TimeUnit;",
                "-import com.google.common.base.Preconditions;",
                "-import com.google.common.util.concurrent.JdkFutureAdapters;",
                "-import com.google.common.util.concurrent.ListenableFuture;",
                "-import com.google.common.util.concurrent.MoreExecutors;",
                "-import io.netty.bootstrap.Bootstrap;",
                "-import io.netty.buffer.ByteBuf;",
                "-import io.netty.buffer.ByteBufAllocator;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFuture;",
                "-import io.netty.channel.ChannelInitializer;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.ChannelPipeline;",
                "-import io.netty.channel.ChannelPromise;",
                "-import io.netty.channel.EventLoopGroup;",
                "-import io.netty.channel.nio.NioEventLoopGroup;",
                "-import io.netty.channel.socket.SocketChannel;",
                "-import io.netty.channel.socket.nio.NioSocketChannel;",
                "-",
                "-import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "-import org.apache.qpid.server.protocol.v1_0.framing.SASLFrame;",
                "-import org.apache.qpid.server.protocol.v1_0.framing.TransportFrame;",
                "-import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "-import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "-import org.apache.qpid.server.protocol.v1_0.type.UnsignedShort;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Close;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "-",
                "-public class FrameTransport implements AutoCloseable",
                "+public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                " {",
                "-    public static final long RESPONSE_TIMEOUT = Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\",6000);",
                "-    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "-",
                "-    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "-",
                "-    private final EventLoopGroup _workerGroup;",
                "-    private final InetSocketAddress _brokerAddress;",
                "-    private final boolean _isSasl;",
                "-",
                "-    private Channel _channel;",
                "-    private volatile boolean _channelClosedSeen = false;",
                "-",
                "     public FrameTransport(final InetSocketAddress brokerAddress)",
                "@@ -80,41 +34,9 @@ public class FrameTransport implements AutoCloseable",
                "     {",
                "-        _brokerAddress = brokerAddress;",
                "-        _isSasl = isSasl;",
                "-        _workerGroup = new NioEventLoopGroup();",
                "-    }",
                "-",
                "-    public InetSocketAddress getBrokerAddress()",
                "-    {",
                "-        return _brokerAddress;",
                "+        super(brokerAddress, new FrameDecoder(isSasl), new FrameEncoder());",
                "     }",
                "+    @Override",
                "     public FrameTransport connect()",
                "     {",
                "-        try",
                "-        {",
                "-            Bootstrap b = new Bootstrap();",
                "-            b.group(_workerGroup);",
                "-            b.channel(NioSocketChannel.class);",
                "-            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "-            b.handler(new ChannelInitializer<SocketChannel>()",
                "-            {",
                "-                @Override",
                "-                public void initChannel(SocketChannel ch) throws Exception",
                "-                {",
                "-                    ChannelPipeline pipeline = ch.pipeline();",
                "-                    buildInputOutputPipeline(pipeline);",
                "-                }",
                "-            });",
                "-",
                "-            _channel = b.connect(_brokerAddress).sync().channel();",
                "-            _channel.closeFuture().addListener(future ->",
                "-                                               {",
                "-                                                   _channelClosedSeen = true;",
                "-                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "-                                               });",
                "-        }",
                "-        catch (InterruptedException e)",
                "-        {",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        super.connect();",
                "         return this;",
                "@@ -122,119 +44,6 @@ public class FrameTransport implements AutoCloseable",
                "-    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "-    {",
                "-        pipeline.addLast(new InputHandler(_queue, _isSasl)).addLast(new OutputHandler());",
                "-    }",
                "-",
                "     @Override",
                "-    public void close() throws Exception",
                "-    {",
                "-        try",
                "-        {",
                "-            if (_channel != null)",
                "-            {",
                "-                _channel.disconnect().sync();",
                "-                _channel.close().sync();",
                "-                _channel = null;",
                "-            }",
                "-        }",
                "-        finally",
                "-        {",
                "-            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "-        }",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "-    {",
                "-        Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        ChannelPromise promise = _channel.newPromise();",
                "-        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "-        buffer.writeBytes(bytes);",
                "-        _channel.write(buffer, promise);",
                "-        _channel.flush();",
                "-        return JdkFutureAdapters.listenInPoolThread(promise);",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendPerformative(final FrameBody frameBody, UnsignedShort channel) throws Exception",
                "+    public byte[] getProtocolHeader()",
                "     {",
                "-        Preconditions.checkState(_channel != null, \"Not connected\");",
                "-        ChannelPromise promise = _channel.newPromise();",
                "-        final TransportFrame transportFrame;",
                "-        try (QpidByteBuffer payload = frameBody instanceof Transfer ? ((Transfer) frameBody).getPayload() : null)",
                "-        {",
                "-            final QpidByteBuffer duplicate;",
                "-            if (payload == null)",
                "-            {",
                "-                duplicate = null;",
                "-            }",
                "-            else",
                "-            {",
                "-                duplicate = payload.duplicate();",
                "-            }",
                "-            transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "-            _channel.write(transportFrame, promise);",
                "-            _channel.flush();",
                "-            final ListenableFuture<Void> listenableFuture = JdkFutureAdapters.listenInPoolThread(promise);",
                "-            if (frameBody instanceof Transfer)",
                "-            {",
                "-                listenableFuture.addListener(() -> ((Transfer) frameBody).dispose(), MoreExecutors.directExecutor());",
                "-            }",
                "-            if (duplicate != null)",
                "-            {",
                "-                listenableFuture.addListener(() -> duplicate.dispose(), MoreExecutors.directExecutor());",
                "-            }",
                "-            return listenableFuture;",
                "-        }",
                "-    }",
                "-",
                "-    public ListenableFuture<Void> sendPerformative(final SaslFrameBody frameBody) throws Exception",
                "-    {",
                "-        SASLFrame transportFrame = new SASLFrame(frameBody);",
                "-        ChannelFuture channelFuture = _channel.writeAndFlush(transportFrame);",
                "-        channelFuture.sync();",
                "-        return JdkFutureAdapters.listenInPoolThread(channelFuture);",
                "-    }",
                "-",
                "-    public <T extends Response<?>> T getNextResponse() throws Exception",
                "-    {",
                "-        return (T)_queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "-    }",
                "-",
                "-    public void doCloseConnection() throws Exception",
                "-    {",
                "-        Close close = new Close();",
                "-",
                "-        sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "-        PerformativeResponse response = getNextResponse();",
                "-        if (!(response.getBody() instanceof Close))",
                "-        {",
                "-            throw new IllegalStateException(String.format(",
                "-                    \"Unexpected response to connection Close. Expected Close got '%s'\", response.getBody()));",
                "-        }",
                "-    }",
                "-",
                "-    public void assertNoMoreResponses() throws Exception",
                "-    {",
                "-        Response response = getNextResponse();",
                "-        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "-    }",
                "-",
                "-    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "-    {",
                "-        assertNoMoreResponses();",
                "-        assertThat(_channelClosedSeen, is(true));",
                "-    }",
                "-",
                "-    private static class ChannelClosedResponse implements Response<Void>",
                "-    {",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return \"ChannelClosed\";",
                "-        }",
                "-",
                "-        @Override",
                "-        public Void getBody()",
                "-        {",
                "-            return null;",
                "-        }",
                "+        return \"AMQP\\0\\1\\0\\0\".getBytes(UTF_8);",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 52518ab2c3..7d73ce8b20 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -22,4 +22,2 @@ package org.apache.qpid.tests.protocol.v1_0;",
                "-import static com.google.common.util.concurrent.Futures.allAsList;",
                "-import static java.nio.charset.StandardCharsets.UTF_8;",
                " import static org.hamcrest.CoreMatchers.instanceOf;",
                "@@ -32,5 +30,3 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.Collections;",
                "-import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "@@ -40,9 +36,9 @@ import java.util.Set;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.concurrent.ExecutionException;",
                "-import java.util.concurrent.TimeUnit;",
                "-import java.util.concurrent.TimeoutException;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "+import com.google.common.util.concurrent.MoreExecutors;",
                " import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.SASLFrame;",
                "+import org.apache.qpid.server.protocol.v1_0.framing.TransportFrame;",
                " import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "@@ -83,4 +79,5 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.SenderSettleMode;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "-public class Interaction",
                "+public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                " {",
                "@@ -96,3 +93,2 @@ public class Interaction",
                "     private final Disposition _disposition;",
                "-    private final FrameTransport _transport;",
                "     private final SaslInit _saslInit;",
                "@@ -102,4 +98,2 @@ public class Interaction",
                "     private UnsignedShort _sessionChannel;",
                "-    private Response<?> _latestResponse;",
                "-    private ListenableFuture<?> _latestFuture;",
                "     private int _deliveryIdCounter;",
                "@@ -111,6 +105,6 @@ public class Interaction",
                "     {",
                "+        super(frameTransport);",
                "         final UnsignedInteger defaultLinkHandle = UnsignedInteger.ZERO;",
                "-        _transport = frameTransport;",
                "-        _protocolHeader = \"AMQP\\0\\1\\0\\0\".getBytes(UTF_8);",
                "+        _protocolHeader = frameTransport.getProtocolHeader();",
                "@@ -156,2 +150,15 @@ public class Interaction",
                "+    public void doCloseConnection() throws Exception",
                "+    {",
                "+        Close close = new Close();",
                "+",
                "+        sendPerformative(close, UnsignedShort.valueOf((short) 0));",
                "+        Response<?> response = getNextResponse();",
                "+        if (!(response.getBody() instanceof Close))",
                "+        {",
                "+            throw new IllegalStateException(String.format(",
                "+                    \"Unexpected response to connection Close. Expected Close got '%s'\", response.getBody()));",
                "+        }",
                "+    }",
                "+",
                "     /////////////////////////",
                "@@ -166,13 +173,11 @@ public class Interaction",
                "-    public Interaction negotiateProtocol() throws Exception",
                "+    @Override",
                "+    protected byte[] getProtocolHeader()",
                "+    {",
                "+        return _protocolHeader;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Interaction getInteraction()",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendProtocolHeader(_protocolHeader);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "         return this;",
                "@@ -979,11 +984,4 @@ public class Interaction",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "+        SASLFrame transportFrame = new SASLFrame(frameBody);",
                "+        sendPerformativeAndChainFuture(transportFrame, true);",
                "     }",
                "@@ -992,66 +990,25 @@ public class Interaction",
                "     {",
                "-        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, channel);",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture = allAsList(_latestFuture, future);",
                "-        }",
                "-        else",
                "-        {",
                "-            _latestFuture = future;",
                "-        }",
                "-    }",
                "-",
                "-    public Interaction consumeResponse(final Class<?>... responseTypes) throws Exception",
                "-    {",
                "-        sync();",
                "-        _latestResponse = _transport.getNextResponse();",
                "-        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "-        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "-            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        final TransportFrame transportFrame;",
                "+        try (QpidByteBuffer payload = frameBody instanceof Transfer ? ((Transfer) frameBody).getPayload() : null)",
                "         {",
                "-            return this;",
                "-        }",
                "-        acceptableResponseClasses.remove(null);",
                "-        if (_latestResponse != null)",
                "-        {",
                "-            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            final QpidByteBuffer duplicate;",
                "+            if (payload == null)",
                "             {",
                "-                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "-                {",
                "-                    return this;",
                "-                }",
                "+                duplicate = null;",
                "+            }",
                "+            else",
                "+            {",
                "+                duplicate = payload.duplicate();",
                "+            }",
                "+            transportFrame = new TransportFrame(channel.shortValue(), frameBody, duplicate);",
                "+            ListenableFuture<Void> listenableFuture = sendPerformativeAndChainFuture(transportFrame, false);",
                "+            if (frameBody instanceof Transfer)",
                "+            {",
                "+                listenableFuture.addListener(() -> ((Transfer) frameBody).dispose(), MoreExecutors.directExecutor());",
                "+            }",
                "+            if (duplicate != null)",
                "+            {",
                "+                listenableFuture.addListener(() -> duplicate.dispose(), MoreExecutors.directExecutor());",
                "             }",
                "         }",
                "-        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "-                                                      acceptableResponseClasses,",
                "-                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "-    }",
                "-",
                "-    public Interaction sync() throws InterruptedException, ExecutionException, TimeoutException",
                "-    {",
                "-        if (_latestFuture != null)",
                "-        {",
                "-            _latestFuture.get(FrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "-            _latestFuture = null;",
                "-        }",
                "-        return this;",
                "-    }",
                "-",
                "-    public Response<?> getLatestResponse() throws Exception",
                "-    {",
                "-        sync();",
                "-        return _latestResponse;",
                "-    }",
                "-",
                "-    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "-    {",
                "-        sync();",
                "-        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "-        {",
                "-            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "-                                                          type.getSimpleName(),",
                "-                                                          _latestResponse.getBody()));",
                "-        }",
                "-",
                "-        return (T) _latestResponse.getBody();",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "index 06a64dc875..9e03a26150 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v1_0;",
                " import org.apache.qpid.server.protocol.v1_0.type.FrameBody;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "index 08893e0d7e..02ab3c9c5d 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "@@ -23,2 +23,3 @@ package org.apache.qpid.tests.protocol.v1_0;",
                " import org.apache.qpid.server.protocol.v1_0.type.SaslFrameBody;",
                "+import org.apache.qpid.tests.protocol.Response;",
                "diff --git a/systests/protocol-tests-core/pom.xml b/systests/protocol-tests-core/pom.xml",
                "new file mode 100644",
                "index 0000000000..fa561edfab",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/pom.xml",
                "@@ -0,0 +1,75 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>protocol-tests-core</artifactId>",
                "+    <name>Apache Qpid Broker-J Protocol Tests Core</name>",
                "+    <description>Core classes for Apache Qpid protocol tests</description>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>com.google.guava</groupId>",
                "+            <artifactId>guava</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-buffer</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-common</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-codec-http</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-handler</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty-transport</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-core</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+        </dependency>",
                "+    </dependencies>",
                "+",
                "+</project>",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "new file mode 100644",
                "index 0000000000..daf500db11",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "@@ -0,0 +1,198 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.anyOf;",
                "+import static org.hamcrest.Matchers.instanceOf;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.hamcrest.Matchers.nullValue;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import com.google.common.util.concurrent.JdkFutureAdapters;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelFuture;",
                "+import io.netty.channel.ChannelInitializer;",
                "+import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.ChannelPromise;",
                "+import io.netty.channel.EventLoopGroup;",
                "+import io.netty.channel.nio.NioEventLoopGroup;",
                "+import io.netty.channel.socket.SocketChannel;",
                "+import io.netty.channel.socket.nio.NioSocketChannel;",
                "+",
                "+public abstract class FrameTransport implements AutoCloseable",
                "+{",
                "+    public static final long RESPONSE_TIMEOUT =",
                "+            Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\", 6000);",
                "+    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "+",
                "+    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "+    private final EventLoopGroup _workerGroup;",
                "+    private final InetSocketAddress _brokerAddress;",
                "+    private final InputHandler _inputHandler;",
                "+    private final OutputHandler _outputHandler;",
                "+",
                "+    private volatile Channel _channel;",
                "+    private volatile boolean _channelClosedSeen = false;",
                "+",
                "+    public FrameTransport(final InetSocketAddress brokerAddress, InputDecoder inputDecoder, OutputEncoder outputEncoder)",
                "+    {",
                "+        _brokerAddress = brokerAddress;",
                "+        _inputHandler = new InputHandler(_queue, inputDecoder);",
                "+        _outputHandler = new OutputHandler(outputEncoder);",
                "+        _workerGroup = new NioEventLoopGroup();",
                "+    }",
                "+",
                "+    public InetSocketAddress getBrokerAddress()",
                "+    {",
                "+        return _brokerAddress;",
                "+    }",
                "+",
                "+    public FrameTransport connect()",
                "+    {",
                "+        try",
                "+        {",
                "+            Bootstrap b = new Bootstrap();",
                "+            b.group(_workerGroup);",
                "+            b.channel(NioSocketChannel.class);",
                "+            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "+            b.handler(new ChannelInitializer<SocketChannel>()",
                "+            {",
                "+                @Override",
                "+                public void initChannel(SocketChannel ch) throws Exception",
                "+                {",
                "+                    ChannelPipeline pipeline = ch.pipeline();",
                "+                    buildInputOutputPipeline(pipeline);",
                "+                }",
                "+            });",
                "+",
                "+            _channel = b.connect(_brokerAddress).sync().channel();",
                "+            _channel.closeFuture().addListener(future ->",
                "+                                               {",
                "+                                                   _channelClosedSeen = true;",
                "+                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "+                                               });",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "+    {",
                "+        pipeline.addLast(_inputHandler).addLast(_outputHandler);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws Exception",
                "+    {",
                "+        try",
                "+        {",
                "+            if (_channel != null)",
                "+            {",
                "+                _channel.disconnect().sync();",
                "+                _channel.close().sync();",
                "+                _channel = null;",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "+        }",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(bytes);",
                "+        _channel.write(buffer, promise);",
                "+        _channel.flush();",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendPerformative(final Object data, boolean sync) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        if (!sync)",
                "+        {",
                "+            ChannelPromise promise = _channel.newPromise();",
                "+            _channel.write(data, promise);",
                "+            _channel.flush();",
                "+            return JdkFutureAdapters.listenInPoolThread(promise);",
                "+        }",
                "+        else",
                "+        {",
                "+            ChannelFuture channelFuture = _channel.writeAndFlush(data);",
                "+            channelFuture.sync();",
                "+            return Futures.immediateFuture(null);",
                "+        }",
                "+    }",
                "+",
                "+    public <T extends Response<?>> T getNextResponse() throws Exception",
                "+    {",
                "+        return (T) _queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+    }",
                "+",
                "+    public void assertNoMoreResponses() throws Exception",
                "+    {",
                "+        Response response = getNextResponse();",
                "+        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "+    }",
                "+",
                "+    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "+    {",
                "+        assertNoMoreResponses();",
                "+        assertThat(_channelClosedSeen, is(true));",
                "+    }",
                "+",
                "+    private static class ChannelClosedResponse implements Response<Void>",
                "+    {",
                "+        @Override",
                "+        public String toString()",
                "+        {",
                "+            return \"ChannelClosed\";",
                "+        }",
                "+",
                "+        @Override",
                "+        public Void getBody()",
                "+        {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "+    public abstract byte[] getProtocolHeader();",
                "+",
                "+    protected abstract Interaction newInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "new file mode 100644",
                "index 0000000000..9767b40063",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+public class HeaderResponse implements Response<byte[]>",
                "+{",
                "+    private final byte[] _header;",
                "+",
                "+    public HeaderResponse(final byte[] header)",
                "+    {",
                "+        _header = header;",
                "+    }",
                "+",
                "+    @Override",
                "+    public byte[] getBody()",
                "+    {",
                "+        return _header;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"HeaderResponse{\" +",
                "+               \"_header=\" + Arrays.toString(_header) +",
                "+               '}';",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "new file mode 100644",
                "index 0000000000..369cfd1666",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.Collection;",
                "+",
                "+public interface InputDecoder",
                "+{",
                "+    Collection<Response<?>> decode(final ByteBuffer inputBuffer) throws Exception;",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "new file mode 100644",
                "index 0000000000..2d5fb45102",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.concurrent.BlockingQueue;",
                "+",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelInboundHandlerAdapter;",
                "+import io.netty.util.ReferenceCountUtil;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class InputHandler extends ChannelInboundHandlerAdapter",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(InputHandler.class);",
                "+",
                "+    private final BlockingQueue<Response<?>> _responseQueue;",
                "+    private final InputDecoder _inputDecoder;",
                "+",
                "+    private ByteBuffer _inputBuffer = ByteBuffer.allocate(0);",
                "+",
                "+    InputHandler(final BlockingQueue<Response<?>> queue, InputDecoder inputDecoder)",
                "+    {",
                "+        _responseQueue = queue;",
                "+        _inputDecoder = inputDecoder;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception",
                "+    {",
                "+        ByteBuf buf = (ByteBuf) msg;",
                "+        ByteBuffer byteBuffer = ByteBuffer.allocate(buf.readableBytes());",
                "+        byteBuffer.put(buf.nioBuffer());",
                "+        byteBuffer.flip();",
                "+        LOGGER.debug(\"Incoming {} byte(s)\", byteBuffer.remaining());",
                "+",
                "+        if (_inputBuffer.hasRemaining())",
                "+        {",
                "+            ByteBuffer old = _inputBuffer;",
                "+            _inputBuffer = ByteBuffer.allocate(_inputBuffer.remaining() + byteBuffer.remaining());",
                "+            _inputBuffer.put(old);",
                "+            _inputBuffer.put(byteBuffer);",
                "+            _inputBuffer.flip();",
                "+        }",
                "+        else",
                "+        {",
                "+            _inputBuffer = byteBuffer;",
                "+        }",
                "+",
                "+        _responseQueue.addAll(_inputDecoder.decode(_inputBuffer));",
                "+",
                "+        LOGGER.debug(\"After parsing, {} byte(s) remained\", _inputBuffer.remaining());",
                "+",
                "+        if (_inputBuffer.hasRemaining())",
                "+        {",
                "+            _inputBuffer.compact();",
                "+            _inputBuffer.flip();",
                "+        }",
                "+",
                "+        ReferenceCountUtil.release(msg);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "new file mode 100644",
                "index 0000000000..238c0a54a6",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -0,0 +1,141 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static com.google.common.util.concurrent.Futures.allAsList;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+public abstract class Interaction<I extends Interaction>",
                "+{",
                "+    private final FrameTransport _transport;",
                "+    private ListenableFuture<?> _latestFuture;",
                "+    private Response<?> _latestResponse;",
                "+",
                "+    public Interaction(final FrameTransport frameTransport)",
                "+    {",
                "+        _transport = frameTransport;",
                "+    }",
                "+",
                "+    public I consumeResponse(final Class<?>... responseTypes) throws Exception",
                "+    {",
                "+        sync();",
                "+        _latestResponse = getNextResponse();",
                "+        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "+        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "+            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        {",
                "+            return getInteraction();",
                "+        }",
                "+        acceptableResponseClasses.remove(null);",
                "+        if (_latestResponse != null)",
                "+        {",
                "+            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            {",
                "+                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+                {",
                "+                    return getInteraction();",
                "+                }",
                "+            }",
                "+        }",
                "+        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "+                                                      acceptableResponseClasses,",
                "+                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "+    }",
                "+",
                "+    protected Response<?> getNextResponse() throws Exception",
                "+    {",
                "+        return _transport.getNextResponse();",
                "+    }",
                "+",
                "+    public I sync() throws InterruptedException, ExecutionException, TimeoutException",
                "+    {",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture.get(FrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+            _latestFuture = null;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    public Response<?> getLatestResponse() throws Exception",
                "+    {",
                "+        sync();",
                "+        return _latestResponse;",
                "+    }",
                "+",
                "+    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "+    {",
                "+        sync();",
                "+        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getBody()));",
                "+        }",
                "+",
                "+        return (T) _latestResponse.getBody();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody, boolean sync) throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody, sync);",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return future;",
                "+    }",
                "+",
                "+    public I negotiateProtocol() throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendProtocolHeader(getProtocolHeader());",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    protected FrameTransport getTransport()",
                "+    {",
                "+        return _transport;",
                "+    }",
                "+",
                "+    protected abstract byte[] getProtocolHeader();",
                "+",
                "+    protected abstract I getInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "new file mode 100644",
                "index 0000000000..292ae9ad74",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+import org.hamcrest.BaseMatcher;",
                "+import org.hamcrest.Description;",
                "+import org.hamcrest.Matcher;",
                "+",
                "+public class Matchers",
                "+{",
                "+    public static Matcher<Response> protocolHeader(byte[] expectedHeader)",
                "+    {",
                "+        return new BaseMatcher<Response>()",
                "+        {",
                "+            @Override",
                "+            public void describeTo(final Description description)",
                "+            {",
                "+                description.appendValue(new HeaderResponse(expectedHeader));",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean matches(final Object o)",
                "+            {",
                "+                if (o == null)",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                if (!(o instanceof HeaderResponse))",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                if (!Arrays.equals(expectedHeader, ((HeaderResponse) o).getBody()))",
                "+                {",
                "+                    return false;",
                "+                }",
                "+                return true;",
                "+            }",
                "+        };",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "new file mode 100644",
                "index 0000000000..a6a4a47b17",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+public interface OutputEncoder",
                "+{",
                "+    ByteBuffer encode(Object msg);",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "new file mode 100644",
                "index 0000000000..40a2ca784f",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelOutboundHandlerAdapter;",
                "+import io.netty.channel.ChannelPromise;",
                "+",
                "+public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "+{",
                "+    private final OutputEncoder _outputEncoder;",
                "+",
                "+    OutputHandler(final OutputEncoder outputEncoder)",
                "+    {",
                "+        _outputEncoder = outputEncoder;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(final ChannelHandlerContext ctx, final Object msg, final ChannelPromise promise) throws Exception",
                "+    {",
                "+        ByteBuffer byteBuffer = _outputEncoder.encode(msg);",
                "+        if (byteBuffer != null)",
                "+        {",
                "+            send(ctx, byteBuffer, promise);",
                "+        }",
                "+        else",
                "+        {",
                "+            super.write(ctx, msg, promise);",
                "+        }",
                "+    }",
                "+",
                "+    private void send(ChannelHandlerContext ctx, final ByteBuffer dataByteBuffer, final ChannelPromise promise)",
                "+    {",
                "+        byte[] data = new byte[dataByteBuffer.remaining()];",
                "+        dataByteBuffer.get(data);",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(data);",
                "+        try",
                "+        {",
                "+            OutputHandler.super.write(ctx, buffer, promise);",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            promise.setFailure(e);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "new file mode 100644",
                "index 0000000000..debc06f19e",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+public interface Response<T>",
                "+{",
                "+    T getBody();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java",
                "new file mode 100644",
                "index 0000000000..db6d7a1383",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Target(ElementType.METHOD)",
                "+public @interface SpecificationTest",
                "+{",
                "+    String section();",
                "+    String description();",
                "+}"
            ],
            "changed_files": [
                "pom.xml",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java",
                "systests/protocol-tests-core/pom.xml",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/FrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/HeaderResponse.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputDecoder.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/InputHandler.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Matchers.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputEncoder.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Response.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SpecificationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "deab4580b7a876cfe16d35fe40804ac19e277cfc"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL, AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/PerformativeResponse.java, systests/protocol-tests-amqp-1-0/pom.xml, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameEncoder.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/SaslPerformativeResponse.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, functionality",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sasl, perform, protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89e01ec7e59bf097a74f770be2aad5bf292a6061",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512754380,
            "hunks": 8,
            "message": "QPID-8042: [Broker-J][AMQP 1.0] Process SASL frames first before parsing the remaining part of incoming byte buffer",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "index f7e402999e..23d08c3dd9 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "@@ -204,2 +204,7 @@ public class FrameHandler implements ProtocolHandler",
                "                     });",
                "+",
                "+                    if (_isSasl)",
                "+                    {",
                "+                        break;",
                "+                    }",
                "                 }",
                "@@ -210,3 +215,2 @@ public class FrameHandler implements ProtocolHandler",
                "             }",
                "-            _connectionHandler.receive(channelFrameBodies);",
                "@@ -216,3 +220,6 @@ public class FrameHandler implements ProtocolHandler",
                "                 _errored = true;",
                "-",
                "+            }",
                "+            else",
                "+            {",
                "+                _connectionHandler.receive(channelFrameBodies);",
                "             }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "index 4dc06cbaa3..0c94ad73a7 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -92,23 +92,30 @@ public class FrameDecoder implements InputDecoder",
                "     {",
                "-        List<Response<?>> responses = new ArrayList<>();",
                "+",
                "         QpidByteBuffer qpidByteBuffer = QpidByteBuffer.wrap(inputBuffer);",
                "-        switch(_state)",
                "+        int remaining;",
                "+",
                "+        do",
                "         {",
                "-            case HEADER:",
                "-                if (inputBuffer.remaining() >= 8)",
                "-                {",
                "-                    byte[] header = new byte[8];",
                "-                    inputBuffer.get(header);",
                "-                    responses.add(new HeaderResponse(header));",
                "-                    _state = ParsingState.PERFORMATIVES;",
                "+            remaining = qpidByteBuffer.remaining();",
                "+            switch(_state)",
                "+            {",
                "+                case HEADER:",
                "+                    if (inputBuffer.remaining() >= 8)",
                "+                    {",
                "+                        byte[] header = new byte[8];",
                "+                        inputBuffer.get(header);",
                "+                        _connectionHandler._responseQueue.add(new HeaderResponse(header));",
                "+                        _state = ParsingState.PERFORMATIVES;",
                "+                    }",
                "+                    break;",
                "+                case PERFORMATIVES:",
                "                     _frameHandler.parse(qpidByteBuffer);",
                "-                }",
                "-                break;",
                "-            case PERFORMATIVES:",
                "-                _frameHandler.parse(qpidByteBuffer);",
                "-                break;",
                "-            default:",
                "-                throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+                    break;",
                "+                default:",
                "+                    throw new IllegalStateException(\"Unexpected state : \" + _state);",
                "+            }",
                "         }",
                "+        while (qpidByteBuffer.remaining() != remaining);",
                "+        List<Response<?>> responses = new ArrayList<>();",
                "         Response<?> r;"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "33cb908e42bd09cbde3e663e686d95481fe6911e"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: SASL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/framing/FrameHandler.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: part, sasl, process, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1322a6589a886a2c8378c5148f6f811af4e89c4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516545026,
            "hunks": 5,
            "message": "QPID-8083 [System Tests] [REST/HTTP] Create empty HTTP system test suite",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index aa82bf00f8..dadc1c6cfc 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -198,2 +198,3 @@",
                "     <module>systests/qpid-systests-jms_2.0</module>",
                "+    <module>systests/qpid-systests-http-management</module>",
                "     <module>systests/protocol-tests-core</module>",
                "diff --git a/systests/qpid-systests-http-management/pom.xml b/systests/qpid-systests-http-management/pom.xml",
                "new file mode 100644",
                "index 0000000000..c0e29bb2c8",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/pom.xml",
                "@@ -0,0 +1,127 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one",
                "+  ~ or more contributor license agreements.  See the NOTICE file",
                "+  ~ distributed with this work for additional information",
                "+  ~ regarding copyright ownership.  The ASF licenses this file",
                "+  ~ to you under the Apache License, Version 2.0 (the",
                "+  ~ \"License\"); you may not use this file except in compliance",
                "+  ~ with the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~   http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing,",
                "+  ~ software distributed under the License is distributed on an",
                "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  ~ KIND, either express or implied.  See the License for the",
                "+  ~ specific language governing permissions and limitations",
                "+  ~ under the License.",
                "+  ~",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <artifactId>qpid-systests-http</artifactId>",
                "+    <name>Apache Qpid Broker-J HTTP system tests</name>",
                "+    <description>Apache Qpid Broker-J HTTP system tests</description>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-8-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-10-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-test-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-logging-logback</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-memory-store</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-management-http</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "+            <optional>true</optional>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+       <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>test</scope>",
                "+       </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-library</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.hamcrest</groupId>",
                "+            <artifactId>hamcrest-integration</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-http-management-tests.json</qpid.initialConfigurationLocation>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "new file mode 100644",
                "index 0000000000..e71da8678b",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "@@ -0,0 +1,362 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.rest;",
                "+",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.HttpURLConnection;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.net.URLEncoder;",
                "+import java.util.HashMap;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import javax.xml.bind.DatatypeConverter;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import org.junit.Assert;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                "+",
                "+public class RestTestHelper",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(RestTestHelper.class);",
                "+",
                "+    private static final TypeReference<List<LinkedHashMap<String, Object>>> TYPE_LIST_OF_LINKED_HASH_MAPS = new TypeReference<List<LinkedHashMap<String, Object>>>()",
                "+    {",
                "+    };",
                "+    private static final TypeReference<LinkedHashMap<String, Object>> TYPE_LINKED_HASH_MAPS = new TypeReference<LinkedHashMap<String, Object>>()",
                "+    {",
                "+    };",
                "+",
                "+    private static final String API_BASE = \"/api/latest/\";",
                "+    private final BrokerAdmin _admin;",
                "+    private final int _httpPort;",
                "+    private final String _username;",
                "+    private final String _password;",
                "+",
                "+    private final int _connectTimeout = Integer.getInteger(\"qpid.resttest_connection_timeout\", 30000);",
                "+",
                "+    private String _acceptEncoding;",
                "+    private boolean _useSsl = false;",
                "+",
                "+    public RestTestHelper(BrokerAdmin admin)",
                "+    {",
                "+        _admin = admin;",
                "+        _httpPort = _admin.getBrokerAddress(BrokerAdmin.PortType.HTTP).getPort();",
                "+        _username = admin.getValidUsername();",
                "+        _password = admin.getValidPassword();",
                "+    }",
                "+",
                "+    public int getHttpPort()",
                "+    {",
                "+        return _httpPort;",
                "+    }",
                "+",
                "+    private String getHostName()",
                "+    {",
                "+        return \"localhost\";",
                "+    }",
                "+",
                "+    private String getProtocol()",
                "+    {",
                "+        return _useSsl ? \"https\" : \"http\";",
                "+    }",
                "+",
                "+    public String getManagementURL()",
                "+    {",
                "+        return getProtocol() + \"://\" + getHostName() + \":\" + getHttpPort();",
                "+    }",
                "+",
                "+    public URL getManagementURL(String path) throws MalformedURLException",
                "+    {",
                "+        return new URL(getManagementURL() + path);",
                "+    }",
                "+",
                "+    public HttpURLConnection openManagementConnection(String path, String method) throws IOException",
                "+    {",
                "+        if (!path.startsWith(\"/\"))",
                "+        {",
                "+            path = API_BASE + path;",
                "+        }",
                "+        URL url = getManagementURL(path);",
                "+        HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();",
                "+        httpCon.setConnectTimeout(_connectTimeout);",
                "+",
                "+",
                "+        if(_username != null)",
                "+        {",
                "+            String encoded = DatatypeConverter.printBase64Binary((_username + \":\" + _password).getBytes(UTF_8));",
                "+            httpCon.setRequestProperty(\"Authorization\", \"Basic \" + encoded);",
                "+        }",
                "+",
                "+        if (_acceptEncoding != null && !\"\".equals(_acceptEncoding))",
                "+        {",
                "+            httpCon.setRequestProperty(\"Accept-Encoding\", _acceptEncoding);",
                "+        }",
                "+",
                "+        httpCon.setDoOutput(true);",
                "+        httpCon.setRequestMethod(method);",
                "+        return httpCon;",
                "+    }",
                "+",
                "+    public List<Map<String, Object>> readJsonResponseAsList(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        List<Map<String, Object>> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LIST_OF_LINKED_HASH_MAPS);",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public Map<String, Object> readJsonResponseAsMap(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        Map<String, Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), TYPE_LINKED_HASH_MAPS);",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public <T> T readJsonResponse(HttpURLConnection connection, Class<T> valueType) throws IOException",
                "+    {",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+",
                "+        return mapper.readValue(new ByteArrayInputStream(data), valueType);",
                "+    }",
                "+",
                "+    private byte[] readConnectionInputStream(HttpURLConnection connection) throws IOException",
                "+    {",
                "+        InputStream is = connection.getInputStream();",
                "+        ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "+        byte[] buffer = new byte[1024];",
                "+        int len = -1;",
                "+        while ((len = is.read(buffer)) != -1)",
                "+        {",
                "+            baos.write(buffer, 0, len);",
                "+        }",
                "+        if (LOGGER.isTraceEnabled())",
                "+        {",
                "+            LOGGER.trace(\"RESPONSE:\" + new String(baos.toByteArray(), UTF_8));",
                "+        }",
                "+        return baos.toByteArray();",
                "+    }",
                "+",
                "+    private void writeJsonRequest(HttpURLConnection connection, Object data) throws IOException",
                "+    {",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        mapper.writeValue(connection.getOutputStream(), data);",
                "+    }",
                "+",
                "+    public Map<String, Object> find(String name, Object value, List<Map<String, Object>> data)",
                "+    {",
                "+        if (data == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        for (Map<String, Object> map : data)",
                "+        {",
                "+            Object mapValue = map.get(name);",
                "+            if (value.equals(mapValue))",
                "+            {",
                "+                return map;",
                "+            }",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public Map<String, Object> find(Map<String, Object> searchAttributes, List<Map<String, Object>> data)",
                "+    {",
                "+        for (Map<String, Object> map : data)",
                "+        {",
                "+            boolean equals = true;",
                "+            for (Map.Entry<String, Object> entry : searchAttributes.entrySet())",
                "+            {",
                "+                Object mapValue = map.get(entry.getKey());",
                "+                if (!entry.getValue().equals(mapValue))",
                "+                {",
                "+                    equals = false;",
                "+                    break;",
                "+                }",
                "+            }",
                "+            if (equals)",
                "+            {",
                "+                return map;",
                "+            }",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    public Map<String, Object> getJsonAsSingletonList(String path) throws IOException",
                "+    {",
                "+        List<Map<String, Object>> response = getJsonAsList(path);",
                "+",
                "+        Assert.assertNotNull(\"Response cannot be null\", response);",
                "+        Assert.assertEquals(\"Unexpected response from \" + path, 1, response.size());",
                "+        return response.get(0);",
                "+    }",
                "+",
                "+    public Map<String, Object> postDataToPathAndGetObject(String path, Map<String, Object> data) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "+        connection.connect();",
                "+        writeJsonRequest(connection, data);",
                "+        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public List<Map<String, Object>> getJsonAsList(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        List<Map<String, Object>> response = readJsonResponseAsList(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public List<Object> getJsonAsSimpleList(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        byte[] data = readConnectionInputStream(connection);",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        List<Object> providedObject = mapper.readValue(new ByteArrayInputStream(data), new TypeReference<List<Object>>()",
                "+        {",
                "+        });",
                "+        return providedObject;",
                "+    }",
                "+",
                "+    public Map<String, Object> getJsonAsMap(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        Map<String, Object> response = readJsonResponseAsMap(connection);",
                "+        return response;",
                "+    }",
                "+",
                "+    public <T> T getJson(String path, final Class<T> valueType) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        return readJsonResponse(connection, valueType);",
                "+    }",
                "+",
                "+    public <T> T postJson(String path, final Object data , final Class<T> valueType) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"POST\");",
                "+        connection.connect();",
                "+        writeJsonRequest(connection, data);",
                "+        return readJsonResponse(connection, valueType);",
                "+    }",
                "+",
                "+",
                "+    public int submitRequest(String url, String method, Object data) throws IOException",
                "+    {",
                "+        return submitRequest(url, method, data, null);",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method, Object data, Map<String, List<String>> responseHeadersToCapture) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(url, method);",
                "+        if (data != null)",
                "+        {",
                "+            writeJsonRequest(connection, data);",
                "+        }",
                "+        int responseCode = connection.getResponseCode();",
                "+        if (responseHeadersToCapture!= null)",
                "+        {",
                "+            responseHeadersToCapture.putAll(connection.getHeaderFields());",
                "+        }",
                "+        connection.disconnect();",
                "+        return responseCode;",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method) throws IOException",
                "+    {",
                "+        return submitRequest(url, method, (byte[])null);",
                "+    }",
                "+",
                "+    public void submitRequest(String url, String method, Object data, int expectedResponseCode) throws IOException",
                "+    {",
                "+        Map<String, List<String>> headers = new HashMap<>();",
                "+        int responseCode = submitRequest(url, method, data, headers);",
                "+        Assert.assertEquals(\"Unexpected response code from \" + method + \" \" + url , expectedResponseCode, responseCode);",
                "+        if (expectedResponseCode == 201)",
                "+        {",
                "+            List<String> location = headers.get(\"Location\");",
                "+            Assert.assertTrue(\"Location is not returned by REST create request\", location != null && location.size() == 1);",
                "+        }",
                "+    }",
                "+",
                "+    public void submitRequest(String url, String method, int expectedResponseCode) throws IOException",
                "+    {",
                "+        submitRequest(url, method, null, expectedResponseCode);",
                "+    }",
                "+",
                "+    public int submitRequest(String url, String method, byte[] parameters) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(url, method);",
                "+        if (parameters != null)",
                "+        {",
                "+            OutputStream os = connection.getOutputStream();",
                "+            os.write(parameters);",
                "+            os.flush();",
                "+        }",
                "+        int responseCode = connection.getResponseCode();",
                "+        connection.disconnect();",
                "+        return responseCode;",
                "+    }",
                "+",
                "+    public byte[] getBytes(String path) throws IOException",
                "+    {",
                "+        HttpURLConnection connection = openManagementConnection(path, \"GET\");",
                "+        connection.connect();",
                "+        return readConnectionInputStream(connection);",
                "+    }",
                "+",
                "+    public String encode(String value, String encoding) throws UnsupportedEncodingException",
                "+    {",
                "+        return URLEncoder.encode(value, encoding).replace(\"+\", \"%20\");",
                "+    }",
                "+",
                "+    public String getAcceptEncoding()",
                "+    {",
                "+        return _acceptEncoding;",
                "+    }",
                "+",
                "+    public void setAcceptEncoding(String acceptEncoding)",
                "+    {",
                "+        _acceptEncoding = acceptEncoding;",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "new file mode 100644",
                "index 0000000000..ca8922d73e",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "@@ -0,0 +1,88 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  }, {",
                "+    \"name\": \"HTTP\",",
                "+    \"authenticationProvider\": \"plain\",",
                "+    \"port\": \"0\",",
                "+    \"protocols\": [",
                "+      \"HTTP\"",
                "+    ]",
                "+    }],",
                "+  \"plugins\" : [ {",
                "+    \"type\" : \"MANAGEMENT-HTTP\",",
                "+    \"name\" : \"httpManagement\",",
                "+    \"httpBasicAuthenticationEnabled\" : true",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "index 3b57431178..3ec35adc76 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "@@ -64,3 +64,4 @@ public interface BrokerAdmin extends Pluggable",
                "         ANONYMOUS_AMQPWS,",
                "-        AMQP",
                "+        AMQP,",
                "+        HTTP",
                "     }"
            ],
            "changed_files": [
                "pom.xml",
                "systests/qpid-systests-http-management/pom.xml",
                "systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                "systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8083": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: HTTP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTTP, AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-http-management/pom.xml, systests/qpid-systests-http-management/src/main/resources/config-http-management-tests.json, systests/qpid-systests-http-management/src/main/java/org/apache/qpid/tests/rest/RestTestHelper.java",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8083",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51d30eac88826e444350cbbe23992f429376a67c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511284602,
            "hunks": 7,
            "message": "QPID-8038: [Broker-J] Cherry pick of the framework and AMQP 1.0 changes from ff2980e",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "index dd59757c52..219c423eb1 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "@@ -25,3 +25,5 @@ import java.net.InetSocketAddress;",
                "-public class FrameTransport extends org.apache.qpid.tests.protocol.FrameTransport",
                "+import org.apache.qpid.tests.protocol.AbstractFrameTransport;",
                "+",
                "+public class FrameTransport extends AbstractFrameTransport<Interaction>",
                " {",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 4aad6ee838..b2f8147af2 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -79,5 +79,6 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.SenderSettleMode;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                " import org.apache.qpid.tests.protocol.Response;",
                "-public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Interaction>",
                "+public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "@@ -179,8 +180,2 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "-    @Override",
                "-    protected Interaction getInteraction()",
                "-    {",
                "-        return this;",
                "-    }",
                "-",
                "     //////////",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "new file mode 100644",
                "index 0000000000..cad8415d6b",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "@@ -0,0 +1,175 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.anyOf;",
                "+import static org.hamcrest.Matchers.instanceOf;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.hamcrest.Matchers.nullValue;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.util.concurrent.JdkFutureAdapters;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.buffer.ByteBufAllocator;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelInitializer;",
                "+import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.ChannelPromise;",
                "+import io.netty.channel.EventLoopGroup;",
                "+import io.netty.channel.nio.NioEventLoopGroup;",
                "+import io.netty.channel.socket.SocketChannel;",
                "+import io.netty.channel.socket.nio.NioSocketChannel;",
                "+",
                "+public abstract class AbstractFrameTransport<I extends AbstractInteraction<I>> implements AutoCloseable",
                "+{",
                "+    static final long RESPONSE_TIMEOUT =",
                "+            Long.getLong(\"qpid.tests.protocol.frameTransport.responseTimeout\", 6000);",
                "+    private static final Response CHANNEL_CLOSED_RESPONSE = new ChannelClosedResponse();",
                "+",
                "+    private final BlockingQueue<Response<?>> _queue = new ArrayBlockingQueue<>(1000);",
                "+    private final EventLoopGroup _workerGroup;",
                "+    private final InetSocketAddress _brokerAddress;",
                "+    private final InputHandler _inputHandler;",
                "+    private final OutputHandler _outputHandler;",
                "+",
                "+    private volatile Channel _channel;",
                "+    private volatile boolean _channelClosedSeen = false;",
                "+",
                "+    public AbstractFrameTransport(final InetSocketAddress brokerAddress, InputDecoder inputDecoder, OutputEncoder outputEncoder)",
                "+    {",
                "+        _brokerAddress = brokerAddress;",
                "+        _inputHandler = new InputHandler(_queue, inputDecoder);",
                "+        _outputHandler = new OutputHandler(outputEncoder);",
                "+        _workerGroup = new NioEventLoopGroup();",
                "+    }",
                "+",
                "+    public InetSocketAddress getBrokerAddress()",
                "+    {",
                "+        return _brokerAddress;",
                "+    }",
                "+",
                "+    public AbstractFrameTransport<I> connect()",
                "+    {",
                "+        try",
                "+        {",
                "+            Bootstrap b = new Bootstrap();",
                "+            b.group(_workerGroup);",
                "+            b.channel(NioSocketChannel.class);",
                "+            b.option(ChannelOption.SO_KEEPALIVE, true);",
                "+            b.handler(new ChannelInitializer<SocketChannel>()",
                "+            {",
                "+                @Override",
                "+                public void initChannel(SocketChannel ch) throws Exception",
                "+                {",
                "+                    ChannelPipeline pipeline = ch.pipeline();",
                "+                    buildInputOutputPipeline(pipeline);",
                "+                }",
                "+            });",
                "+",
                "+            _channel = b.connect(_brokerAddress).sync().channel();",
                "+            _channel.closeFuture().addListener(future ->",
                "+                                               {",
                "+                                                   _channelClosedSeen = true;",
                "+                                                   _queue.add(CHANNEL_CLOSED_RESPONSE);",
                "+                                               });",
                "+        }",
                "+        catch (InterruptedException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    protected void buildInputOutputPipeline(final ChannelPipeline pipeline)",
                "+    {",
                "+        pipeline.addLast(_inputHandler).addLast(_outputHandler);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws Exception",
                "+    {",
                "+        try",
                "+        {",
                "+            if (_channel != null)",
                "+            {",
                "+                _channel.disconnect().sync();",
                "+                _channel.close().sync();",
                "+                _channel = null;",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            _workerGroup.shutdownGracefully(0, 0, TimeUnit.SECONDS).sync();",
                "+        }",
                "+    }",
                "+",
                "+    ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();",
                "+        buffer.writeBytes(bytes);",
                "+        _channel.write(buffer, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendPerformative(final Object data) throws Exception",
                "+    {",
                "+        Preconditions.checkState(_channel != null, \"Not connected\");",
                "+        ChannelPromise promise = _channel.newPromise();",
                "+        _channel.write(data, promise);",
                "+        return JdkFutureAdapters.listenInPoolThread(promise);",
                "+    }",
                "+",
                "+    <T extends Response<?>> T getNextResponse() throws Exception",
                "+    {",
                "+        return (T) _queue.poll(RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+    }",
                "+",
                "+    public void assertNoMoreResponses() throws Exception",
                "+    {",
                "+        Response response = getNextResponse();",
                "+        assertThat(response, anyOf(nullValue(), instanceOf(ChannelClosedResponse.class)));",
                "+    }",
                "+",
                "+    public void assertNoMoreResponsesAndChannelClosed() throws Exception",
                "+    {",
                "+        assertNoMoreResponses();",
                "+        assertThat(_channelClosedSeen, is(true));",
                "+    }",
                "+",
                "+    public void flush()",
                "+    {",
                "+        _channel.flush();",
                "+    }",
                "+",
                "+    public abstract byte[] getProtocolHeader();",
                "+",
                "+    public abstract I newInteraction();",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "new file mode 100644",
                "index 0000000000..4b41ca9221",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "@@ -0,0 +1,150 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import static com.google.common.util.concurrent.Futures.allAsList;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+public abstract class AbstractInteraction<I extends AbstractInteraction<I>>",
                "+{",
                "+    private final AbstractFrameTransport<I> _transport;",
                "+    private ListenableFuture<?> _latestFuture;",
                "+    private Response<?> _latestResponse;",
                "+",
                "+    public AbstractInteraction(final AbstractFrameTransport<I> frameTransport)",
                "+    {",
                "+        _transport = frameTransport;",
                "+    }",
                "+",
                "+    public I consumeResponse(final Class<?>... responseTypes) throws Exception",
                "+    {",
                "+        sync();",
                "+        _latestResponse = getNextResponse();",
                "+        final Set<Class<?>> acceptableResponseClasses = new HashSet<>(Arrays.asList(responseTypes));",
                "+        if ((acceptableResponseClasses.isEmpty() && _latestResponse != null)",
                "+            || (acceptableResponseClasses.contains(null) && _latestResponse == null))",
                "+        {",
                "+            return getInteraction();",
                "+        }",
                "+        acceptableResponseClasses.remove(null);",
                "+        if (_latestResponse != null)",
                "+        {",
                "+            for (Class<?> acceptableResponseClass : acceptableResponseClasses)",
                "+            {",
                "+                if (acceptableResponseClass.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+                {",
                "+                    return getInteraction();",
                "+                }",
                "+            }",
                "+        }",
                "+        throw new IllegalStateException(String.format(\"Unexpected response. Expected one of '%s' got '%s'.\",",
                "+                                                      acceptableResponseClasses,",
                "+                                                      _latestResponse == null ? null : _latestResponse.getBody()));",
                "+    }",
                "+",
                "+    protected Response<?> getNextResponse() throws Exception",
                "+    {",
                "+        return _transport.getNextResponse();",
                "+    }",
                "+",
                "+    public I sync() throws InterruptedException, ExecutionException, TimeoutException",
                "+    {",
                "+        _transport.flush();",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture.get(AbstractFrameTransport.RESPONSE_TIMEOUT, TimeUnit.MILLISECONDS);",
                "+            _latestFuture = null;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    public Response<?> getLatestResponse() throws Exception",
                "+    {",
                "+        return _latestResponse;",
                "+    }",
                "+",
                "+    public <T> T getLatestResponse(Class<T> type) throws Exception",
                "+    {",
                "+        if (_latestResponse.getBody() == null)",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getClass()));",
                "+        }",
                "+",
                "+        if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getBody()));",
                "+        }",
                "+",
                "+        return (T) _latestResponse.getBody();",
                "+    }",
                "+",
                "+    protected ListenableFuture<Void> sendPerformativeAndChainFuture(final Object frameBody) throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendPerformative(frameBody);",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return future;",
                "+    }",
                "+",
                "+    public I negotiateProtocol() throws Exception",
                "+    {",
                "+        final ListenableFuture<Void> future = _transport.sendProtocolHeader(getProtocolHeader());",
                "+        if (_latestFuture != null)",
                "+        {",
                "+            _latestFuture = allAsList(_latestFuture, future);",
                "+        }",
                "+        else",
                "+        {",
                "+            _latestFuture = future;",
                "+        }",
                "+        return getInteraction();",
                "+    }",
                "+",
                "+    protected AbstractFrameTransport getTransport()",
                "+    {",
                "+        return _transport;",
                "+    }",
                "+",
                "+    protected abstract byte[] getProtocolHeader();",
                "+",
                "+    private I getInteraction()",
                "+    {",
                "+        return (I) this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "new file mode 100644",
                "index 0000000000..b7010232af",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+public class ChannelClosedResponse implements Response<ChannelClosedResponse>",
                "+{",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return \"ChannelClosed\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public ChannelClosedResponse getBody()",
                "+    {",
                "+        return this;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/ChannelClosedResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameTransport.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f03f718f98545f15859197f9a1f78f76a985e0a3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516033867,
            "hunks": 2,
            "message": "QPID-8076: [Broker-J] [AMQP 0-9-1] [Publisher Confirms] Delay sending publish confirms until underlying store transaction completes.",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index a12b483d6e..2c4e88a110 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -47,2 +47,3 @@ import com.google.common.base.Function;",
                " import com.google.common.collect.Collections2;",
                "+import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -484,5 +485,25 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                             {",
                "-                                BasicAckBody responseBody = _connection.getMethodRegistry()",
                "-                                                                       .createBasicAckBody(_confirmedMessageCounter, false);",
                "-                                _connection.writeFrame(responseBody.generateFrame(_channelId));",
                "+                                recordFuture(Futures.immediateFuture(null),",
                "+                                             new ServerTransaction.Action()",
                "+                                             {",
                "+                                                 private final long _deliveryTag = _confirmedMessageCounter;",
                "+",
                "+                                                 @Override",
                "+                                                 public void postCommit()",
                "+                                                 {",
                "+                                                     BasicAckBody body = _connection.getMethodRegistry()",
                "+                                                                                    .createBasicAckBody(",
                "+                                                                                            _deliveryTag, false);",
                "+                                                     _connection.writeFrame(body.generateFrame(_channelId));",
                "+                                                 }",
                "+",
                "+                                                 @Override",
                "+                                                 public void onRollback()",
                "+                                                 {",
                "+                                                     final BasicNackBody body = new BasicNackBody(_deliveryTag,",
                "+                                                                                                  false,",
                "+                                                                                                  false);",
                "+                                                     _connection.writeFrame(new AMQFrame(_channelId, body));",
                "+                                                 }",
                "+                                             });",
                "                             }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8076": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8076",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bce2424df9c8fdef3d1714ff1f760f11859f298d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515771282,
            "hunks": 28,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Use asynchronous auto commit transaction for non-transactional transfers Currently each disposition returned singly.",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "index 53f47d1b3a..665ee0a400 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "@@ -86,2 +86,4 @@ public interface AMQPConnection_1_0<C extends AMQPConnection_1_0<C>> extends AMQ",
                "+    void receivedComplete();",
                "+",
                "     @DerivedAttribute(description = \"If true send a final SASL challenge using a SaslChallenge performative, rather than SaslOutcome.\")",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "index b2384bdaf3..9091456f68 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "@@ -1297,31 +1297,38 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "-                do",
                "+                try",
                "                 {",
                "-                    remaining = msg.remaining();",
                "-",
                "-                    switch (_connectionState)",
                "+                    do",
                "                     {",
                "-                        case AWAIT_AMQP_OR_SASL_HEADER:",
                "-                        case AWAIT_AMQP_HEADER:",
                "-                            if (remaining >= 8)",
                "-                            {",
                "-                                processProtocolHeader(msg);",
                "-                            }",
                "-                            break;",
                "-                        case AWAIT_SASL_INIT:",
                "-                        case AWAIT_SASL_RESPONSE:",
                "-                        case AWAIT_OPEN:",
                "-                        case OPENED:",
                "-                        case CLOSE_SENT:",
                "-                            _frameHandler.parse(msg);",
                "-                            break;",
                "-                        case CLOSE_RECEIVED:",
                "-                        case CLOSED:",
                "-                            // ignore;",
                "-                            break;",
                "-                    }",
                "+                        remaining = msg.remaining();",
                "+",
                "+                        switch (_connectionState)",
                "+                        {",
                "+                            case AWAIT_AMQP_OR_SASL_HEADER:",
                "+                            case AWAIT_AMQP_HEADER:",
                "+                                if (remaining >= 8)",
                "+                                {",
                "+                                    processProtocolHeader(msg);",
                "+                                }",
                "+                                break;",
                "+                            case AWAIT_SASL_INIT:",
                "+                            case AWAIT_SASL_RESPONSE:",
                "+                            case AWAIT_OPEN:",
                "+                            case OPENED:",
                "+                            case CLOSE_SENT:",
                "+                                _frameHandler.parse(msg);",
                "+                                break;",
                "+                            case CLOSE_RECEIVED:",
                "+                            case CLOSED:",
                "+                                // ignore;",
                "+                                break;",
                "+                        }",
                "+                    }",
                "+                    while (msg.remaining() != remaining);",
                "+                }",
                "+                finally",
                "+                {",
                "+                    receivedComplete();",
                "                 }",
                "-                while (msg.remaining() != remaining);",
                "             }",
                "@@ -1347,2 +1354,22 @@ public class AMQPConnection_1_0Impl extends AbstractAMQPConnection<AMQPConnectio",
                "+    @Override",
                "+    public void receivedComplete()",
                "+    {",
                "+        if (_receivingSessions != null)",
                "+        {",
                "+            for (final Session_1_0 session : _receivingSessions)",
                "+            {",
                "+                if (session != null)",
                "+                {",
                "+                    final AccessControlContext context = session.getAccessControllerContext();",
                "+                    AccessController.doPrivileged((PrivilegedAction<Void>) () ->",
                "+                    {",
                "+                        session.receivedComplete();",
                "+                        return null;",
                "+                    }, context);",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private void processProtocolHeader(final QpidByteBuffer msg)",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index 15795739ad..aec18ad59e 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -293,5 +293,5 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "-    public void updateDisposition(final Binary deliveryTag,",
                "-                                  final DeliveryState state,",
                "-                                  final boolean settled)",
                "+    void updateDisposition(final Binary deliveryTag,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "     {",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "index 961244d427..1bd9604045 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "@@ -182,2 +182,6 @@ public class ErrantLinkEndpoint<S extends BaseSource, T extends BaseTarget> impl",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+    }",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "index 94e3b1ec7f..d73319d207 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "@@ -76,2 +76,4 @@ public interface LinkEndpoint<S extends BaseSource, T extends BaseTarget>",
                "     ReceiverSettleMode getReceivingSettlementMode();",
                "+",
                "+    void receiveComplete();",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index 23df75eedd..4c64e335f4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -611,3 +611,3 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "-    public void updateDisposition(final Binary deliveryTag, DeliveryState state, boolean settled)",
                "+    void updateDisposition(final Binary deliveryTag, DeliveryState state, boolean settled)",
                "     {",
                "@@ -901,2 +901,7 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+    }",
                "+",
                "     private static class OutgoingDelivery",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index e52452af30..50b681dfa5 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -184,2 +184,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         if(_sessionState == SessionState.ACTIVE)",
                "@@ -212,6 +213,6 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "-    void updateDisposition(final Role role,",
                "-                                  final UnsignedInteger first,",
                "-                                  final UnsignedInteger last,",
                "-                                  final DeliveryState state, final boolean settled)",
                "+    private void updateDisposition(final Role role,",
                "+                                   final UnsignedInteger first,",
                "+                                   final UnsignedInteger last,",
                "+                                   final DeliveryState state, final boolean settled)",
                "     {",
                "@@ -321,2 +322,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         switch (_sessionState)",
                "@@ -374,2 +376,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         final SequenceNumber flowNextIncomingId = new SequenceNumber(flow.getNextIncomingId() == null",
                "@@ -502,2 +505,3 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "     {",
                "+        receivedComplete();",
                "         UnsignedInteger handle = detach.getHandle();",
                "@@ -1283,2 +1287,7 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "+    void receivedComplete()",
                "+    {",
                "+        _associatedLinkEndpoints.forEach(linkedEnpoint -> linkedEnpoint.receiveComplete());",
                "+    }",
                "+",
                "     private class EndpointCreationCallback<T extends LinkEndpoint<? extends BaseSource, ? extends BaseTarget>> implements FutureCallback<T>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 7dcf31ac89..bc18bfb1cf 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -27,5 +27,9 @@ import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.LinkedList;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.ExecutionException;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                " import org.slf4j.Logger;",
                "@@ -62,2 +66,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.ReceiverSettleMode;",
                "+import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -65,4 +70,6 @@ import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint<Target>",
                "+        implements AsyncAutoCommitTransaction.FutureRecorder",
                " {",
                "@@ -73,2 +80,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<>();",
                "+",
                "     private final PublishingLink _publishingLink = new PublishingLink()",
                "@@ -223,3 +232,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                 {",
                "-                    transaction = new AutoCommitTransaction(getAddressSpace().getMessageStore());",
                "+                    transaction = new AsyncAutoCommitTransaction(getAddressSpace().getMessageStore(), this);",
                "                 }",
                "@@ -297,3 +306,28 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-                    updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                    if (transaction instanceof AsyncAutoCommitTransaction)",
                "+                    {",
                "+                        recordFuture(Futures.immediateFuture(null), new ServerTransaction.Action()",
                "+                        {",
                "+                            @Override",
                "+                            public void postCommit()",
                "+                            {",
                "+                                updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void onRollback()",
                "+                            {",
                "+                                //TODO: if reject is not supported, check spec behaviour",
                "+                                Rejected rejected = new Rejected();",
                "+                                rejected.setError(new Error(AmqpError.ILLEGAL_STATE, \"Store transaction unexpectedly rolled-back\"));",
                "+                                DeliveryState state = sourceSupportedOutcomes.contains(Rejected.REJECTED_SYMBOL) ? rejected : resultantState;",
                "+                                updateDisposition(delivery.getDeliveryTag(), state, settled);",
                "+                            }",
                "+                        });",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        getSession().receivedComplete();",
                "+                        updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "+                    }",
                "@@ -524,2 +558,73 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "     }",
                "+",
                "+    @Override",
                "+    public void recordFuture(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _unfinishedCommandsQueue.add(new AsyncCommand(future, action));",
                "+    }",
                "+",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+        AsyncCommand cmd;",
                "+        while((cmd = _unfinishedCommandsQueue.poll()) != null)",
                "+        {",
                "+            cmd.complete();",
                "+        }",
                "+    }",
                "+",
                "+    private static class AsyncCommand",
                "+    {",
                "+        private final ListenableFuture<Void> _future;",
                "+        private ServerTransaction.Action _action;",
                "+",
                "+        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+        {",
                "+            _future = future;",
                "+            _action = action;",
                "+        }",
                "+",
                "+        void complete()",
                "+        {",
                "+            boolean interrupted = false;",
                "+            try",
                "+            {",
                "+                while (true)",
                "+                {",
                "+                    try",
                "+                    {",
                "+                        _future.get();",
                "+                        break;",
                "+                    }",
                "+                    catch (InterruptedException e)",
                "+                    {",
                "+                        interrupted = true;",
                "+                    }",
                "+",
                "+                }",
                "+            }",
                "+            catch(ExecutionException e)",
                "+            {",
                "+                if(e.getCause() instanceof RuntimeException)",
                "+                {",
                "+                    throw (RuntimeException)e.getCause();",
                "+                }",
                "+                else if(e.getCause() instanceof java.lang.Error)",
                "+                {",
                "+                    throw (java.lang.Error) e.getCause();",
                "+                }",
                "+                else",
                "+                {",
                "+                    throw new ServerScopedRuntimeException(e.getCause());",
                "+                }",
                "+            }",
                "+            if(interrupted)",
                "+            {",
                "+                Thread.currentThread().interrupt();",
                "+            }",
                "+            _action.postCommit();",
                "+            _action = null;",
                "+        }",
                "+    }",
                "+",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "index 4535ea45d7..cf0ddf323a 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java",
                "@@ -88,2 +88,5 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "                         Session_1_0 session = getSession();",
                "+",
                "+                        session.getConnection().receivedComplete();",
                "+",
                "                         if (command instanceof Declare)",
                "@@ -260,2 +263,7 @@ public class TxnCoordinatorReceivingLinkEndpoint extends AbstractReceivingLinkEn",
                "+    @Override",
                "+    public void receiveComplete()",
                "+    {",
                "+",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL, AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0Impl.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ErrantLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/LinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/TxnCoordinatorReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, connect, amqp, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a1ed9978f756268fc86de8af02e5d7fad13a65a2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516716251,
            "hunks": 14,
            "message": "QPID-8032 : [Broker-J][AMQP 1.0] Use asynchronous auto commit transaction for non-transactional message dequeuing",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "index fec4c6da1d..4798815200 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "@@ -60,3 +60,2 @@ import org.apache.qpid.server.transport.AMQPConnection;",
                " import org.apache.qpid.server.transport.ProtocolEngine;",
                "-import org.apache.qpid.server.txn.AutoCommitTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -429,3 +428,3 @@ class ConsumerTarget_1_0 extends AbstractConsumerTarget<ConsumerTarget_1_0>",
                "                 outcome = (Outcome) state;",
                "-                txn = new AutoCommitTransaction(getSession().getConnection().getAddressSpace().getMessageStore());",
                "+                txn = _linkEndpoint.getAsyncAutoCommitTransaction();",
                "             }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index 4c64e335f4..b3131344b5 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -33,4 +33,6 @@ import java.util.Map;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                " import java.util.regex.Pattern;",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                " import org.slf4j.Logger;",
                "@@ -78,2 +80,4 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Role;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.Transfer;",
                "+import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -85,2 +89,3 @@ import org.apache.qpid.server.virtualhost.QueueManagingVirtualHost;",
                " public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+        implements AsyncAutoCommitTransaction.FutureRecorder",
                " {",
                "@@ -93,2 +98,4 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "     private final Map<Binary, OutgoingDelivery> _unsettled = new ConcurrentHashMap<>();",
                "+    private final AsyncAutoCommitTransaction _asyncAutoCommitTransaction;",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();",
                "@@ -112,2 +119,4 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "         setCapabilities(Collections.singletonList(AMQPConnection_1_0.SHARED_SUBSCRIPTIONS));",
                "+        _asyncAutoCommitTransaction =",
                "+                new AsyncAutoCommitTransaction(getSession().getConnection().getAddressSpace().getMessageStore(), this);",
                "     }",
                "@@ -604,2 +613,7 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "+    AsyncAutoCommitTransaction getAsyncAutoCommitTransaction()",
                "+    {",
                "+        return _asyncAutoCommitTransaction;",
                "+    }",
                "+",
                "     public boolean hasCreditToSend()",
                "@@ -904,2 +918,13 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "     {",
                "+        AsyncCommand cmd;",
                "+        while((cmd = _unfinishedCommandsQueue.poll()) != null)",
                "+        {",
                "+            cmd.complete();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void recordFuture(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _unfinishedCommandsQueue.add(new AsyncCommand(future, action));",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 2d2b2061c3..91ab75bafb 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -30,3 +30,2 @@ import java.util.Iterator;",
                " import java.util.LinkedHashSet;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -35,2 +34,3 @@ import java.util.Objects;",
                " import java.util.Set;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                "@@ -83,2 +83,6 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();",
                "+    private final Set<PendingDispositionHolder> _pendingDispositions =",
                "+            Collections.synchronizedSet(new LinkedHashSet<>());",
                "+",
                "     private volatile ReceivingDestination _receivingDestination;",
                "@@ -86,6 +90,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<>();",
                "-",
                "-    private final Set<PendingDispositionHolder> _pendingDispositions = new LinkedHashSet<>();",
                "-",
                "     private final PublishingLink _publishingLink = new PublishingLink()"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79aecbce08c208cbaa61ba61fc0fe4abb61cd72b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512946238,
            "hunks": 4,
            "message": "QPID-8038: [Broker-J] [AMQP 0-8..0-91] Add publisher confirms tests (RabbitMQ extension to AMQP 0-91",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index 7f91d8dffc..35ff42aba8 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -40,2 +40,3 @@ import org.apache.qpid.server.protocol.v0_8.transport.BasicQosBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.CompositeAMQDataBlock;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConfirmSelectBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ContentBody;",
                "@@ -74,2 +75,4 @@ public class BasicInteraction",
                "+    private boolean _confirmSelectNoWait;",
                "+",
                "     public BasicInteraction(final Interaction interaction)",
                "@@ -272,2 +275,7 @@ public class BasicInteraction",
                "     }",
                "+",
                "+    public Interaction confirmSelect() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ConfirmSelectBody(_confirmSelectNoWait));",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "index 0b5c4e461e..432eab8e91 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                "@@ -36,3 +36,3 @@ public class FrameTransport extends AbstractFrameTransport<Interaction>",
                "-    FrameTransport(final InetSocketAddress brokerAddress)",
                "+    public FrameTransport(final InetSocketAddress brokerAddress)",
                "     {"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameTransport.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b92c3063ee213a9e4c4527acd139d40a4237d56",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516029243,
            "hunks": 22,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Coalesce the dispositions for non-transactional transfers",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index aec18ad59e..0872eae10b 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -24,4 +24,6 @@ package org.apache.qpid.server.protocol.v1_0;",
                " import java.util.Collections;",
                "+import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "@@ -297,3 +299,15 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "     {",
                "-        if (_unsettled.containsKey(deliveryTag))",
                "+        updateDispositions(Collections.singleton(deliveryTag), state, settled);",
                "+    }",
                "+",
                "+    void updateDispositions(final Set<Binary> deliveryTags,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "+    {",
                "+",
                "+        final Set<Binary> unsettledKeys = new HashSet<>(_unsettled.keySet());",
                "+        unsettledKeys.retainAll(deliveryTags);",
                "+        final int settledDeliveryCount = deliveryTags.size() - unsettledKeys.size();",
                "+",
                "+        if (!unsettledKeys.isEmpty())",
                "         {",
                "@@ -312,6 +326,9 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "             {",
                "-                if (!(_unsettled.get(deliveryTag) instanceof Outcome))",
                "+                for (final Binary deliveryTag : unsettledKeys)",
                "                 {",
                "-                    Object oldOutcome = _unsettled.put(deliveryTag, outcome);",
                "-                    outcomeUpdate = !outcome.equals(oldOutcome);",
                "+                    if (!(_unsettled.get(deliveryTag) instanceof Outcome))",
                "+                    {",
                "+                        Object oldOutcome = _unsettled.put(deliveryTag, outcome);",
                "+                        outcomeUpdate = outcomeUpdate || !outcome.equals(oldOutcome);",
                "+                    }",
                "                 }",
                "@@ -321,3 +338,3 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "             {",
                "-                getSession().updateDisposition(getRole(), deliveryTag, state, settled);",
                "+                getSession().updateDisposition(getRole(), unsettledKeys, state, settled);",
                "             }",
                "@@ -327,17 +344,27 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "-                if (settled(deliveryTag))",
                "+                int credit = 0;",
                "+                for (final Binary deliveryTag : unsettledKeys)",
                "                 {",
                "-                    if (!isDetached() && _creditWindow)",
                "+                    if (settled(deliveryTag))",
                "                     {",
                "-                        setLinkCredit(getLinkCredit().add(UnsignedInteger.ONE));",
                "-                        sendFlowConditional();",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        getSession().sendFlowConditional();",
                "+                        if (!isDetached() && _creditWindow)",
                "+                        {",
                "+                            credit++;",
                "+                        }",
                "                     }",
                "                 }",
                "+",
                "+                if (credit > 0)",
                "+                {",
                "+                    setLinkCredit(getLinkCredit().add(UnsignedInteger.valueOf(credit)));",
                "+                    sendFlowConditional();",
                "+                }",
                "+                else",
                "+                {",
                "+                    getSession().sendFlowConditional();",
                "+                }",
                "             }",
                "         }",
                "-        else if (_creditWindow)",
                "+",
                "+        if (settledDeliveryCount > 0 && _creditWindow)",
                "         {",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index 50b681dfa5..62045a6f56 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -35,2 +35,3 @@ import java.util.HashMap;",
                " import java.util.HashSet;",
                "+import java.util.Iterator;",
                " import java.util.List;",
                "@@ -38,2 +39,4 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.SortedSet;",
                "+import java.util.TreeSet;",
                " import java.util.UUID;",
                "@@ -41,2 +44,3 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "+import java.util.stream.Collectors;",
                "@@ -259,2 +263,35 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "+    void updateDisposition(final Role role,",
                "+                           final Set<Binary> deliveryTags,",
                "+                           final DeliveryState state,",
                "+                           final boolean settled)",
                "+    {",
                "+        final DeliveryRegistry deliveryRegistry = role == Role.RECEIVER ? _incomingDeliveryRegistry : _outgoingDeliveryRegistry;",
                "+        SortedSet<UnsignedInteger> deliveryIds = deliveryTags.stream()",
                "+                                                             .map(deliveryRegistry::getDeliveryIdByTag)",
                "+                                                             .collect(Collectors.toCollection(TreeSet::new));",
                "+",
                "+        final Iterator<UnsignedInteger> iterator = deliveryIds.iterator();",
                "+        if (iterator.hasNext())",
                "+        {",
                "+            UnsignedInteger begin = iterator.next();",
                "+            UnsignedInteger end = begin;",
                "+            while (iterator.hasNext())",
                "+            {",
                "+                final UnsignedInteger deliveryId = iterator.next();",
                "+                if (!end.add(UnsignedInteger.ONE).equals(deliveryId))",
                "+                {",
                "+                    updateDisposition(role, begin, end, state, settled);",
                "+                    begin = deliveryId;",
                "+                    end = begin;",
                "+                }",
                "+                else",
                "+                {",
                "+                    end = deliveryId;",
                "+                }",
                "+            }",
                "+            updateDisposition(role, begin, end, state, settled);",
                "+        }",
                "+    }",
                "+",
                "     public boolean hasCreditToSend()",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index bc18bfb1cf..fe5c4dbad4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -27,2 +27,5 @@ import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedHashSet;",
                " import java.util.LinkedList;",
                "@@ -30,5 +33,6 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Objects;",
                "+import java.util.Set;",
                " import java.util.concurrent.ExecutionException;",
                "-import com.google.common.util.concurrent.Futures;",
                " import com.google.common.util.concurrent.ListenableFuture;",
                "@@ -82,2 +86,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private final Set<PendingDispositionHolder> _pendingDispositions = new LinkedHashSet<>();",
                "+",
                "     private final PublishingLink _publishingLink = new PublishingLink()",
                "@@ -308,20 +314,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        recordFuture(Futures.immediateFuture(null), new ServerTransaction.Action()",
                "-                        {",
                "-                            @Override",
                "-                            public void postCommit()",
                "-                            {",
                "-                                updateDisposition(delivery.getDeliveryTag(), resultantState, settled);",
                "-                            }",
                "-",
                "-                            @Override",
                "-                            public void onRollback()",
                "-                            {",
                "-                                //TODO: if reject is not supported, check spec behaviour",
                "-                                Rejected rejected = new Rejected();",
                "-                                rejected.setError(new Error(AmqpError.ILLEGAL_STATE, \"Store transaction unexpectedly rolled-back\"));",
                "-                                DeliveryState state = sourceSupportedOutcomes.contains(Rejected.REJECTED_SYMBOL) ? rejected : resultantState;",
                "-                                updateDisposition(delivery.getDeliveryTag(), state, settled);",
                "-                            }",
                "-                        });",
                "+                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(), resultantState, settled));",
                "                     }",
                "@@ -573,2 +562,45 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "         }",
                "+",
                "+        processPendingDispositions();",
                "+    }",
                "+",
                "+    private void processPendingDispositions()",
                "+    {",
                "+        Iterator<PendingDispositionHolder> itr = _pendingDispositions.isEmpty() ? Collections.emptyIterator() : _pendingDispositions.iterator();",
                "+        if (itr.hasNext())",
                "+        {",
                "+            try",
                "+            {",
                "+                PendingDispositionHolder disposition = itr.next();",
                "+                PendingDispositionHolder current = disposition;",
                "+",
                "+                Set<Binary> deliveryTags = new HashSet<>();",
                "+                deliveryTags.add(disposition.getDeliveryTag());",
                "+",
                "+                while (itr.hasNext())",
                "+                {",
                "+                    disposition = itr.next();",
                "+",
                "+                    if (current.isSettled() == disposition.isSettled() &&",
                "+                        Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "+                    {",
                "+                        deliveryTags.add(disposition.getDeliveryTag());",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        updateDispositions(deliveryTags, current.getResultantState(), current.isSettled());",
                "+                        deliveryTags.clear();",
                "+                        current = disposition;",
                "+                    }",
                "+                }",
                "+                if (!deliveryTags.isEmpty())",
                "+                {",
                "+                    updateDispositions(deliveryTags, current.getResultantState(), current.isSettled());",
                "+                }",
                "+            }",
                "+            finally",
                "+            {",
                "+                _pendingDispositions.clear();",
                "+            }",
                "+        }",
                "     }",
                "@@ -629,2 +661,34 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "+    private static class PendingDispositionHolder",
                "+    {",
                "+        private final Binary _deliveryTag;",
                "+        private final DeliveryState _resultantState;",
                "+        private final boolean _settled;",
                "+",
                "+        PendingDispositionHolder(final Binary deliveryTag,",
                "+                                 final DeliveryState resultantState,",
                "+                                 final boolean settled)",
                "+        {",
                "+            _deliveryTag = deliveryTag;",
                "+            _resultantState = resultantState;",
                "+            _settled = settled;",
                "+        }",
                "+",
                "+        Binary getDeliveryTag()",
                "+        {",
                "+            return _deliveryTag;",
                "+        }",
                "+",
                "+        DeliveryState getResultantState()",
                "+        {",
                "+            return _resultantState;",
                "+        }",
                "+",
                "+        boolean isSettled()",
                "+        {",
                "+            return _settled;",
                "+        }",
                "+",
                "+",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb98e76e86656799a9e16e6f09a6402b01bd2f2a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516034536,
            "hunks": 1,
            "message": "QPID-7948: [Broker-J] [AMQP 0-9-1] [Publisher Confirms] Ensure that unroutable non-mandatory messages are acknowledged",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 2c4e88a110..34571cf0f9 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -477,2 +477,8 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "                                 {",
                "+                                    if (_confirmOnPublish)",
                "+                                    {",
                "+                                        _connection.writeFrame(new AMQFrame(_channelId,",
                "+                                                                            new BasicAckBody(_confirmedMessageCounter,",
                "+                                                                                             false)));",
                "+                                    }",
                "                                     message(ExchangeMessages.DISCARDMSG(exchangeName, routingKey));"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7948": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7948",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06b4213286305f6d05ce496ca278b73b566f24be",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516207843,
            "hunks": 38,
            "message": "QPID-8062: [Broker-J][AMQP 1.0] Fix handling of routing errors when target destination cannot route received message * close the link on receipt of unroutable message when     the source of the link does not support the rejected outcome or     non-transactional message has already been settled by the sender * mark the publishing transaction as \"rollback only\" on receipt of     unroutable pre-settled message",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "index de7991c38e..806469be7b 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "@@ -24,2 +24,3 @@ import static org.apache.qpid.server.protocol.v1_0.Session_1_0.DELAYED_DELIVERY;",
                " import java.util.Arrays;",
                "+import java.util.Collections;",
                "@@ -31,2 +32,4 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.NamedAddressSpace;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -39,2 +42,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "+import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -72,3 +76,8 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken)",
                "+    public Outcome send(final ServerMessage<?> message,",
                "+                        final ServerTransaction txn,",
                "+                        final SecurityToken securityToken,",
                "+                        final boolean rejectedOutcomeSupportedBySource,",
                "+                        final boolean deliverySettled,",
                "+                        final Binary deliveryTag) throws AmqpErrorException",
                "     {",
                "@@ -101,3 +110,27 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "             {",
                "-                outcome = createdRejectedOutcome(AmqpError.NOT_FOUND, \"Unknown destination '\" + routingAddress + \"'\");",
                "+                final Error notFoundError = new Error(AmqpError.NOT_FOUND,",
                "+                                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                notFoundError.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "+",
                "+                // If the source of the link does not support the rejected outcome,",
                "+                // or the message has already been settled by the sender,",
                "+                // then the routing node MUST detach the link with an error.",
                "+                // AMQP-140: When pre-settled messages are being sent within a transaction,",
                "+                // then the behaviour defined for transactions should take precedence",
                "+                // (essentially marking the transaction as rollback only).",
                "+                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "+                {",
                "+                    throw new AmqpErrorException(notFoundError);",
                "+                }",
                "+                else",
                "+                {",
                "+                    if (deliverySettled && txn instanceof LocalTransaction)",
                "+                    {",
                "+                        ((LocalTransaction) txn).setRollbackOnly();",
                "+                    }",
                "+",
                "+                    Rejected rejected = new Rejected();",
                "+                    rejected.setError(notFoundError);",
                "+                    outcome = rejected;",
                "+                }",
                "             }",
                "@@ -106,3 +139,8 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "         {",
                "-            outcome = destination.send(message, txn, securityToken);",
                "+            outcome = destination.send(message,",
                "+                                       txn,",
                "+                                       securityToken,",
                "+                                       rejectedOutcomeSupportedBySource,",
                "+                                       deliverySettled,",
                "+                                       deliveryTag);",
                "         }",
                "@@ -129,10 +167,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     }",
                "-",
                "-    private Outcome createdRejectedOutcome(AmqpError errorCode, String errorMessage)",
                "-    {",
                "-        Rejected rejected = new Rejected();",
                "-        final Error notFoundError = new Error(errorCode, errorMessage);",
                "-        rejected.setError(notFoundError);",
                "-        return rejected;",
                "-    }",
                " }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "index 57ad962b87..6d5859f919 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "@@ -36,2 +36,4 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.Exchange;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -45,2 +47,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "+import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -50,3 +53,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     private static final Accepted ACCEPTED = new Accepted();",
                "-    public static final Rejected REJECTED = new Rejected();",
                "+    private static final Rejected REJECTED = new Rejected();",
                "     private static final Outcome[] OUTCOMES = { ACCEPTED, REJECTED};",
                "@@ -95,3 +98,8 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken)",
                "+    public Outcome send(final ServerMessage<?> message,",
                "+                        final ServerTransaction txn,",
                "+                        final SecurityToken securityToken,",
                "+                        final boolean rejectedOutcomeSupportedBySource,",
                "+                        final boolean deliverySettled,",
                "+                        final Binary deliveryTag) throws AmqpErrorException",
                "     {",
                "@@ -130,8 +138,9 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "             {",
                "+                final Error error;",
                "                 if (result.isRejected())",
                "                 {",
                "-                    AmqpError error;",
                "+                    AmqpError errorCode;",
                "                     if (result.containsReject(RejectType.LIMIT_EXCEEDED))",
                "                     {",
                "-                        error = AmqpError.RESOURCE_LIMIT_EXCEEDED;",
                "+                        errorCode = AmqpError.RESOURCE_LIMIT_EXCEEDED;",
                "                     }",
                "@@ -139,3 +148,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     {",
                "-                        error = AmqpError.PRECONDITION_FAILED;",
                "+                        errorCode = AmqpError.PRECONDITION_FAILED;",
                "                     }",
                "@@ -143,5 +152,5 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     {",
                "-                        error = AmqpError.ILLEGAL_STATE;",
                "+                        errorCode = AmqpError.ILLEGAL_STATE;",
                "                     }",
                "-                    return createdRejectedOutcome(error, result.getRejectReason());",
                "+                    error = new Error(errorCode, result.getRejectReason());",
                "                 }",
                "@@ -149,4 +158,21 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                 {",
                "-                    return createdRejectedOutcome(AmqpError.NOT_FOUND,",
                "-                                                  String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                    error = new Error(AmqpError.NOT_FOUND,",
                "+                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "+                }",
                "+                error.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "+",
                "+                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "+                {",
                "+                    throw new AmqpErrorException(error);",
                "+                }",
                "+                else",
                "+                {",
                "+                    if (deliverySettled && txn instanceof LocalTransaction)",
                "+                    {",
                "+                        ((LocalTransaction) txn).setRollbackOnly();",
                "+                    }",
                "+",
                "+                    Rejected rejected = new Rejected();",
                "+                    rejected.setError(error);",
                "+                    return rejected;",
                "                 }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "index a6a910ff9e..5abd825159 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "@@ -24,2 +24,4 @@ import org.apache.qpid.server.message.MessageDestination;",
                " import org.apache.qpid.server.message.ServerMessage;",
                "+import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "+import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                " import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                "@@ -31,3 +33,3 @@ public interface ReceivingDestination",
                " {",
                "-",
                "+    Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "     Symbol REJECT_UNROUTABLE = Symbol.valueOf(\"REJECT_UNROUTABLE\");",
                "@@ -39,3 +41,8 @@ public interface ReceivingDestination",
                "-    Outcome send(final ServerMessage<?> message, final ServerTransaction txn, final SecurityToken securityToken);",
                "+    Outcome send(final ServerMessage<?> message,",
                "+                 final ServerTransaction txn,",
                "+                 final SecurityToken securityToken,",
                "+                 final boolean rejectedOutcomeSupportedBySource,",
                "+                 final boolean deliverySettled,",
                "+                 final Binary deliveryTag) throws AmqpErrorException;",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index 0512968e3f..d6518b6535 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -55,3 +55,2 @@ import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                " import org.apache.qpid.server.protocol.v1_0.type.UnsignedInteger;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                "@@ -81,3 +80,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private ReceivingDestination _receivingDestination;",
                "+    private volatile ReceivingDestination _receivingDestination;",
                "+    private volatile boolean _rejectedOutcomeSupportedBySource;",
                "@@ -248,3 +248,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     Outcome outcome;",
                "-                    Source source = getSource();",
                "                     if (serverMessage.isPersistent() && !getAddressSpace().getMessageStore().isPersistent())",
                "@@ -253,4 +252,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                                                                         \"Non-durable message store cannot accept durable message.\");",
                "-                        if (source.getOutcomes() != null && Arrays.asList(source.getOutcomes())",
                "-                                                                  .contains(Rejected.REJECTED_SYMBOL))",
                "+                        if (_rejectedOutcomeSupportedBySource)",
                "                         {",
                "@@ -268,41 +266,31 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        outcome = getReceivingDestination().send(serverMessage, transaction,",
                "-                                                                 session.getSecurityToken());",
                "-                    }",
                "-",
                "-                    DeliveryState resultantState;",
                "-",
                "-                    final List<Symbol> sourceSupportedOutcomes = new ArrayList<>();",
                "-                    if (source.getOutcomes() != null)",
                "-                    {",
                "-                        sourceSupportedOutcomes.addAll(Arrays.asList(source.getOutcomes()));",
                "-                    }",
                "-                    else if (source.getDefaultOutcome() == null)",
                "-                    {",
                "-                        sourceSupportedOutcomes.add(Accepted.ACCEPTED_SYMBOL);",
                "-                    }",
                "-",
                "-                    boolean transacted = transactionId != null && transaction instanceof LocalTransaction;",
                "-                    if (sourceSupportedOutcomes.contains(outcome.getSymbol()))",
                "-                    {",
                "-                        if (transactionId == null)",
                "+                        try",
                "                         {",
                "-                            resultantState = outcome;",
                "+                            outcome = getReceivingDestination().send(serverMessage,",
                "+                                                                     transaction,",
                "+                                                                     session.getSecurityToken(),",
                "+                                                                     _rejectedOutcomeSupportedBySource,",
                "+                                                                     delivery.isSettled(),",
                "+                                                                     delivery.getDeliveryTag());",
                "                         }",
                "-                        else",
                "+                        catch (AmqpErrorException e)",
                "                         {",
                "-                            TransactionalState transactionalState = new TransactionalState();",
                "-                            transactionalState.setOutcome(outcome);",
                "-                            transactionalState.setTxnId(transactionId);",
                "-                            resultantState = transactionalState;",
                "+                            return e.getError();",
                "                         }",
                "                     }",
                "+",
                "+                    Outcome sourceDefaultOutcome = getSource().getDefaultOutcome();",
                "+                    boolean defaultOutcome = sourceDefaultOutcome != null &&",
                "+                                             sourceDefaultOutcome.getSymbol().equals(outcome.getSymbol());",
                "+                    DeliveryState resultantState;",
                "+                    if (transactionId == null)",
                "+                    {",
                "+                        resultantState = defaultOutcome ? null : outcome;",
                "+                    }",
                "                     else",
                "                     {",
                "-                        if(transacted && source.getDefaultOutcome() != null",
                "-                           && outcome.getSymbol() != source.getDefaultOutcome().getSymbol())",
                "-                        {",
                "-                            ((LocalTransaction) transaction).setRollbackOnly();",
                "-                        }",
                "-                        resultantState = null;",
                "+                        TransactionalState transactionalState = new TransactionalState();",
                "+                        transactionalState.setOutcome(defaultOutcome ? null : outcome);",
                "+                        transactionalState.setTxnId(transactionId);",
                "+                        resultantState = transactionalState;",
                "                     }",
                "@@ -313,3 +301,5 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     {",
                "-                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(), resultantState, settled));",
                "+                        _pendingDispositions.add(new PendingDispositionHolder(delivery.getDeliveryTag(),",
                "+                                                                              resultantState,",
                "+                                                                              settled));",
                "                     }",
                "@@ -322,3 +312,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     getSession().getAMQPConnection().registerMessageReceived(serverMessage.getSize());",
                "-                    if (transacted)",
                "+                    if (transactionId != null)",
                "                     {",
                "@@ -457,2 +447,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "         getLink().setTermini(source, target);",
                "+        _rejectedOutcomeSupportedBySource =",
                "+                source.getOutcomes() != null && Arrays.asList(source.getOutcomes()).contains(Rejected.REJECTED_SYMBOL);",
                "     }",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "index 37e327e355..084937613a 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java",
                "@@ -30,2 +30,3 @@ import org.apache.qpid.server.protocol.v1_0.type.messaging.EncodingRetainingSect",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Header;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.Properties;",
                "@@ -33,2 +34,3 @@ public class MessageEncoder",
                " {",
                "+    private Properties _properties;",
                "     private Header _header;",
                "@@ -46,2 +48,7 @@ public class MessageEncoder",
                "+    public void setProperties(final Properties properties)",
                "+    {",
                "+        _properties = properties;",
                "+    }",
                "+",
                "     public QpidByteBuffer getPayload()",
                "@@ -54,2 +61,7 @@ public class MessageEncoder",
                "+        if (_properties != null)",
                "+        {",
                "+            payload.add(_properties.createEncodingRetainingSection().getEncodedForm());",
                "+        }",
                "+",
                "         if (_data.isEmpty())"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8062": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/MessageEncoder.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: support, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8062",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49cd2c1d698b5da11967505f20df1d5a21bf6c33",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511910507,
            "hunks": 44,
            "message": "QPID-6933: [System Tests] Move JMS common test functionality into a separate module",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b53c5ee177..7856f072c4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -195,2 +195,3 @@",
                "     <module>systests/systests-utils</module>",
                "+    <module>systests/qpid-systests-jms-core</module>",
                "     <module>systests/qpid-systests-jms_1.1</module>",
                "@@ -435,2 +436,20 @@",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-jms-core</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-jms_1.1</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-jms_2.0</artifactId>",
                "+        <version>${project.version}</version>",
                "+      </dependency>",
                "+",
                "       <!-- External dependencies -->",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 985d639992..50e729c172 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -38,2 +38,7 @@",
                "+    <dependency>",
                "+      <groupId>org.apache.qpid</groupId>",
                "+      <artifactId>qpid-systests-jms-core</artifactId>",
                "+    </dependency>",
                "+",
                "     <!-- Many systests have a compile/runtime dependency on qpid-client -->",
                "diff --git a/systests/qpid-systests-jms-core/pom.xml b/systests/qpid-systests-jms-core/pom.xml",
                "new file mode 100644",
                "index 0000000000..40456dca6d",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/pom.xml",
                "@@ -0,0 +1,124 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+  Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  contributor license agreements.  See the NOTICE file distributed with",
                "+  this work for additional information regarding copyright ownership.",
                "+  The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  (the \"License\"); you may not use this file except in compliance with",
                "+  the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+  Unless required by applicable law or agreed to in writing, software",
                "+  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  See the License for the specific language governing permissions and",
                "+  limitations under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <artifactId>qpid-systests-jms-core</artifactId>",
                "+    <name>Apache Qpid Broker-J JMS System Tests Core</name>",
                "+    <description>JMS System Tests Core Classes</description>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.geronimo.specs</groupId>",
                "+            <artifactId>geronimo-jms_1.1_spec</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>com.fasterxml.jackson.core</groupId>",
                "+            <artifactId>jackson-core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>com.fasterxml.jackson.core</groupId>",
                "+            <artifactId>jackson-databind</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-8-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-0-10-protocol</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-websocket</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-derby-store</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol-bdb-link-store</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol-jdbc-link-store</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-management-amqp</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-jms-tests.json</qpid.initialConfigurationLocation>",
                "+                        <qpid.amqp.version>${profile.broker.version}</qpid.amqp.version>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+</project>",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "new file mode 100644",
                "index 0000000000..39707eb6f4",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "@@ -0,0 +1,416 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Enumeration;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+",
                "+import javax.jms.BytesMessage;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.MapMessage;",
                "+import javax.jms.Message;",
                "+import javax.jms.MessageConsumer;",
                "+import javax.jms.MessageProducer;",
                "+import javax.jms.ObjectMessage;",
                "+import javax.jms.Queue;",
                "+import javax.jms.Session;",
                "+import javax.jms.TemporaryQueue;",
                "+",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+public class AmqpManagementFacade",
                "+{",
                "+    private final String _managementAddress;",
                "+",
                "+    public AmqpManagementFacade(final String managementAddress)",
                "+    {",
                "+        _managementAddress = managementAddress;",
                "+    }",
                "+",
                "+    public void createEntityUsingAmqpManagement(final String name, final Session session, final String type)",
                "+            throws JMSException",
                "+    {",
                "+        createEntityUsingAmqpManagement(name, session, type, Collections.<String, Object>emptyMap());",
                "+    }",
                "+",
                "+    public void createEntityUsingAmqpManagement(final String name,",
                "+                                                final Session session,",
                "+                                                final String type,",
                "+                                                Map<String, Object> attributes)",
                "+            throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+",
                "+        MapMessage createMessage = session.createMapMessage();",
                "+        createMessage.setStringProperty(\"type\", type);",
                "+        createMessage.setStringProperty(\"operation\", \"CREATE\");",
                "+        createMessage.setString(\"name\", name);",
                "+        createMessage.setString(\"object-path\", name);",
                "+        for (Map.Entry<String, Object> entry : attributes.entrySet())",
                "+        {",
                "+            createMessage.setObject(entry.getKey(), entry.getValue());",
                "+        }",
                "+        producer.send(createMessage);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+        producer.close();",
                "+    }",
                "+",
                "+    public void updateEntityUsingAmqpManagement(final String name,",
                "+                                                final Session session,",
                "+                                                final String type,",
                "+                                                Map<String, Object> attributes)",
                "+            throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+",
                "+        MapMessage createMessage = session.createMapMessage();",
                "+        createMessage.setStringProperty(\"type\", type);",
                "+        createMessage.setStringProperty(\"operation\", \"UPDATE\");",
                "+        createMessage.setStringProperty(\"index\", \"object-path\");",
                "+        createMessage.setStringProperty(\"key\", name);",
                "+        for (Map.Entry<String, Object> entry : attributes.entrySet())",
                "+        {",
                "+            createMessage.setObject(entry.getKey(), entry.getValue());",
                "+        }",
                "+        producer.send(createMessage);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+        producer.close();",
                "+    }",
                "+",
                "+    public void deleteEntityUsingAmqpManagement(final String name, final Session session, final String type)",
                "+            throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+",
                "+        MapMessage createMessage = session.createMapMessage();",
                "+        createMessage.setStringProperty(\"type\", type);",
                "+        createMessage.setStringProperty(\"operation\", \"DELETE\");",
                "+        createMessage.setStringProperty(\"index\", \"object-path\");",
                "+",
                "+        createMessage.setStringProperty(\"key\", name);",
                "+        producer.send(createMessage);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+    }",
                "+",
                "+    public Object performOperationUsingAmqpManagement(final String name,",
                "+                                                      final String operation,",
                "+                                                      final Session session,",
                "+                                                      final String type,",
                "+                                                      Map<String, Object> arguments)",
                "+            throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+        final TemporaryQueue responseQ = session.createTemporaryQueue();",
                "+        MessageConsumer consumer = session.createConsumer(responseQ);",
                "+        MapMessage opMessage = session.createMapMessage();",
                "+        opMessage.setStringProperty(\"type\", type);",
                "+        opMessage.setStringProperty(\"operation\", operation);",
                "+        opMessage.setStringProperty(\"index\", \"object-path\");",
                "+        opMessage.setJMSReplyTo(responseQ);",
                "+",
                "+        opMessage.setStringProperty(\"key\", name);",
                "+        for (Map.Entry<String, Object> argument : arguments.entrySet())",
                "+        {",
                "+            Object value = argument.getValue();",
                "+            if (value.getClass().isPrimitive() || value instanceof String)",
                "+            {",
                "+                opMessage.setObjectProperty(argument.getKey(), value);",
                "+            }",
                "+            else",
                "+            {",
                "+                ObjectMapper objectMapper = new ObjectMapper();",
                "+                String jsonifiedValue = null;",
                "+                try",
                "+                {",
                "+                    jsonifiedValue = objectMapper.writeValueAsString(value);",
                "+                }",
                "+                catch (JsonProcessingException e)",
                "+                {",
                "+                    throw new IllegalArgumentException(String.format(",
                "+                            \"Cannot convert the argument '%s' to JSON to meet JMS type restrictions\",",
                "+                            argument.getKey()));",
                "+                }",
                "+                opMessage.setObjectProperty(argument.getKey(), jsonifiedValue);",
                "+            }",
                "+        }",
                "+",
                "+        producer.send(opMessage);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+",
                "+        Message response = consumer.receive(5000);",
                "+        try",
                "+        {",
                "+            int statusCode = response.getIntProperty(\"statusCode\");",
                "+            if (statusCode < 200 || statusCode > 299)",
                "+            {",
                "+                throw new OperationUnsuccessfulException(statusCode);",
                "+            }",
                "+            if (response instanceof MapMessage)",
                "+            {",
                "+                MapMessage bodyMap = (MapMessage) response;",
                "+                Map<String, Object> result = new TreeMap<>();",
                "+                Enumeration mapNames = bodyMap.getMapNames();",
                "+                while (mapNames.hasMoreElements())",
                "+                {",
                "+                    String key = (String) mapNames.nextElement();",
                "+                    result.put(key, bodyMap.getObject(key));",
                "+                }",
                "+                return result;",
                "+            }",
                "+            else if (response instanceof ObjectMessage)",
                "+            {",
                "+                return ((ObjectMessage) response).getObject();",
                "+            }",
                "+            else if (response instanceof BytesMessage)",
                "+            {",
                "+                BytesMessage bytesMessage = (BytesMessage) response;",
                "+                if (bytesMessage.getBodyLength() == 0)",
                "+                {",
                "+                    return null;",
                "+                }",
                "+                else",
                "+                {",
                "+                    byte[] buf = new byte[(int) bytesMessage.getBodyLength()];",
                "+                    bytesMessage.readBytes(buf);",
                "+                    return buf;",
                "+                }",
                "+            }",
                "+            throw new IllegalArgumentException(",
                "+                    \"Cannot parse the results from a management operation.  JMS response message : \" + response);",
                "+        }",
                "+        finally",
                "+        {",
                "+            if (session.getTransacted())",
                "+            {",
                "+                session.commit();",
                "+            }",
                "+            consumer.close();",
                "+            responseQ.delete();",
                "+        }",
                "+    }",
                "+",
                "+    public List<Map<String, Object>> managementQueryObjects(final Session session, final String type)",
                "+            throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(\"$management\"));",
                "+        final TemporaryQueue responseQ = session.createTemporaryQueue();",
                "+        MessageConsumer consumer = session.createConsumer(responseQ);",
                "+        MapMessage message = session.createMapMessage();",
                "+        message.setStringProperty(\"identity\", \"self\");",
                "+        message.setStringProperty(\"type\", \"org.amqp.management\");",
                "+        message.setStringProperty(\"operation\", \"QUERY\");",
                "+        message.setStringProperty(\"entityType\", type);",
                "+        message.setString(\"attributeNames\", \"[]\");",
                "+        message.setJMSReplyTo(responseQ);",
                "+",
                "+        producer.send(message);",
                "+",
                "+        Message response = consumer.receive(5000);",
                "+        try",
                "+        {",
                "+            if (response instanceof MapMessage)",
                "+            {",
                "+                MapMessage bodyMap = (MapMessage) response;",
                "+                List<String> attributeNames = (List<String>) bodyMap.getObject(\"attributeNames\");",
                "+                List<List<Object>> attributeValues = (List<List<Object>>) bodyMap.getObject(\"results\");",
                "+                return getResultsAsMaps(attributeNames, attributeValues);",
                "+            }",
                "+            else if (response instanceof ObjectMessage)",
                "+            {",
                "+                Object body = ((ObjectMessage) response).getObject();",
                "+                if (body instanceof Map)",
                "+                {",
                "+                    Map<String, ?> bodyMap = (Map<String, ?>) body;",
                "+                    List<String> attributeNames = (List<String>) bodyMap.get(\"attributeNames\");",
                "+                    List<List<Object>> attributeValues = (List<List<Object>>) bodyMap.get(\"results\");",
                "+                    return getResultsAsMaps(attributeNames, attributeValues);",
                "+                }",
                "+            }",
                "+            throw new IllegalArgumentException(\"Cannot parse the results from a management query\");",
                "+        }",
                "+        finally",
                "+        {",
                "+            consumer.close();",
                "+            responseQ.delete();",
                "+        }",
                "+    }",
                "+",
                "+    public Map<String, Object> readEntityUsingAmqpManagement(final Session session,",
                "+                                                             final String type,",
                "+                                                             final String name,",
                "+                                                             final boolean actuals) throws JMSException",
                "+    {",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+",
                "+        final TemporaryQueue responseQueue = session.createTemporaryQueue();",
                "+        MessageConsumer consumer = session.createConsumer(responseQueue);",
                "+",
                "+        MapMessage request = session.createMapMessage();",
                "+        request.setStringProperty(\"type\", type);",
                "+        request.setStringProperty(\"operation\", \"READ\");",
                "+        request.setString(\"name\", name);",
                "+        request.setString(\"object-path\", name);",
                "+        request.setStringProperty(\"index\", \"object-path\");",
                "+        request.setStringProperty(\"key\", name);",
                "+        request.setBooleanProperty(\"actuals\", actuals);",
                "+        request.setJMSReplyTo(responseQueue);",
                "+",
                "+        producer.send(request);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+",
                "+        Message response = consumer.receive(5000);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+        try",
                "+        {",
                "+            if (response instanceof MapMessage)",
                "+            {",
                "+                MapMessage bodyMap = (MapMessage) response;",
                "+                Map<String, Object> data = new HashMap<>();",
                "+                Enumeration<String> keys = bodyMap.getMapNames();",
                "+                while (keys.hasMoreElements())",
                "+                {",
                "+                    String key = keys.nextElement();",
                "+                    data.put(key, bodyMap.getObject(key));",
                "+                }",
                "+                return data;",
                "+            }",
                "+            else if (response instanceof ObjectMessage)",
                "+            {",
                "+                Object body = ((ObjectMessage) response).getObject();",
                "+                if (body instanceof Map)",
                "+                {",
                "+                    Map<String, ?> bodyMap = (Map<String, ?>) body;",
                "+                    return new HashMap<>(bodyMap);",
                "+                }",
                "+            }",
                "+            throw new IllegalArgumentException(\"Management read failed : \"",
                "+                                               + response.getStringProperty(\"statusCode\")",
                "+                                               + \" - \"",
                "+                                               + response.getStringProperty(\"statusDescription\"));",
                "+        }",
                "+        finally",
                "+        {",
                "+            consumer.close();",
                "+            responseQueue.delete();",
                "+        }",
                "+    }",
                "+",
                "+    public long getQueueDepth(final Queue destination, final Session session) throws Exception",
                "+    {",
                "+        final String escapedName = getEscapedName(destination);",
                "+        Map<String, Object> arguments = Collections.singletonMap(\"statistics\",",
                "+                                                                 Collections.singletonList(\"queueDepthMessages\"));",
                "+        Object statistics = performOperationUsingAmqpManagement(escapedName,",
                "+                                                                \"getStatistics\",",
                "+                                                                session,",
                "+                                                                \"org.apache.qpid.Queue\",",
                "+                                                                arguments);",
                "+",
                "+        Map<String, Object> statisticsMap = (Map<String, Object>) statistics;",
                "+        return ((Number) statisticsMap.get(\"queueDepthMessages\")).intValue();",
                "+    }",
                "+",
                "+    public boolean isQueueExist(final Queue destination, final Session session) throws Exception",
                "+    {",
                "+        final String escapedName = getEscapedName(destination);",
                "+        try",
                "+        {",
                "+            performOperationUsingAmqpManagement(escapedName,",
                "+                                                \"READ\",",
                "+                                                session,",
                "+                                                \"org.apache.qpid.Queue\",",
                "+                                                Collections.emptyMap());",
                "+            return true;",
                "+        }",
                "+        catch (AmqpManagementFacade.OperationUnsuccessfulException e)",
                "+        {",
                "+            if (e.getStatusCode() == 404)",
                "+            {",
                "+                return false;",
                "+            }",
                "+            else",
                "+            {",
                "+                throw e;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private String getEscapedName(final Queue destination) throws JMSException",
                "+    {",
                "+        return destination.getQueueName().replaceAll(\"([/\\\\\\\\])\", \"\\\\\\\\$1\");",
                "+    }",
                "+",
                "+    private List<Map<String, Object>> getResultsAsMaps(final List<String> attributeNames,",
                "+                                                       final List<List<Object>> attributeValues)",
                "+    {",
                "+        List<Map<String, Object>> results = new ArrayList<>();",
                "+        for (List<Object> resultObject : attributeValues)",
                "+        {",
                "+            Map<String, Object> result = new HashMap<>();",
                "+            for (int i = 0; i < attributeNames.size(); ++i)",
                "+            {",
                "+                result.put(attributeNames.get(i), resultObject.get(i));",
                "+            }",
                "+            results.add(result);",
                "+        }",
                "+        return results;",
                "+    }",
                "+",
                "+    public static class OperationUnsuccessfulException extends RuntimeException",
                "+    {",
                "+        private final int _statusCode;",
                "+",
                "+        private OperationUnsuccessfulException(final int statusCode)",
                "+        {",
                "+            super();",
                "+            _statusCode = statusCode;",
                "+        }",
                "+",
                "+        public int getStatusCode()",
                "+        {",
                "+            return _statusCode;",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "new file mode 100644",
                "index 0000000000..6e385b0648",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.util.Map;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.ConnectionFactory;",
                "+import javax.jms.JMSException;",
                "+import javax.naming.NamingException;",
                "+",
                "+public interface ConnectionBuilder",
                "+{",
                "+    String USERNAME = \"guest\";",
                "+    String PASSWORD = \"guest\";",
                "+",
                "+    ConnectionBuilder setHost(String host);",
                "+    ConnectionBuilder setPort(int port);",
                "+    ConnectionBuilder setSslPort(int port);",
                "+    ConnectionBuilder setPrefetch(int prefetch);",
                "+    ConnectionBuilder setClientId(String clientId);",
                "+    ConnectionBuilder setUsername(String username);",
                "+    ConnectionBuilder setPassword(String password);",
                "+    ConnectionBuilder setVirtualHost(String virtualHostName);",
                "+    ConnectionBuilder setFailover(boolean enableFailover);",
                "+    ConnectionBuilder setFailoverReconnectAttempts(int reconnectAttempts);",
                "+    ConnectionBuilder setTls(boolean enableTls);",
                "+    ConnectionBuilder setSyncPublish(boolean syncPublish);",
                "+    ConnectionBuilder setOptions(Map<String, String> options);",
                "+    ConnectionBuilder setPopulateJMSXUserID(boolean populateJMSXUserID);",
                "+",
                "+    Connection build() throws NamingException, JMSException;",
                "+    ConnectionFactory buildConnectionFactory() throws NamingException;",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "new file mode 100644",
                "index 0000000000..6686b2ad3f",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.net.URISyntaxException;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Queue;",
                "+import javax.jms.Session;",
                "+import javax.jms.Topic;",
                "+import javax.naming.NamingException;",
                "+",
                "+",
                "+public interface JmsProvider",
                "+{",
                "+    Connection getConnection(String urlString) throws Exception;",
                "+",
                "+    Queue getTestQueue(String testQueueName) throws NamingException;",
                "+",
                "+    Queue getQueueFromName(Session session, String name) throws JMSException;",
                "+",
                "+    Queue createTestQueue(Session session, String queueName) throws JMSException;",
                "+",
                "+    Topic getTestTopic(String testQueueName) throws NamingException;",
                "+",
                "+    Topic createTopic(Connection con, String topicName) throws JMSException;",
                "+",
                "+    Topic createTopicOnDirect(Connection con, String topicName) throws JMSException, URISyntaxException;",
                "+",
                "+    Topic createTopicOnFanout(Connection con, String topicName) throws JMSException, URISyntaxException;",
                "+",
                "+    ConnectionBuilder getConnectionBuilder();",
                "+}",
                "diff --git a/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "similarity index 65%",
                "rename from systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "rename to systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index e13a9d997b..ca3be01e45 100644",
                "--- a/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -20,7 +20,5 @@",
                "  */",
                "-package org.apache.qpid.systests.jms_2_0;",
                "+package org.apache.qpid.systests;",
                " import java.net.InetSocketAddress;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                " import java.util.Map;",
                "@@ -29,7 +27,6 @@ import javax.jms.Connection;",
                " import javax.jms.JMSException;",
                "-import javax.jms.JMSRuntimeException;",
                " import javax.jms.Session;",
                "+import javax.jms.Topic;",
                " import javax.naming.NamingException;",
                "-import org.junit.After;",
                " import org.junit.BeforeClass;",
                "@@ -38,14 +35,9 @@ import org.junit.rules.TestName;",
                "-import org.apache.qpid.test.utils.AmqpManagementFacade;",
                "-import org.apache.qpid.test.utils.ConnectionBuilder;",
                "-import org.apache.qpid.test.utils.JmsProvider;",
                "-import org.apache.qpid.test.utils.QpidJmsClientProvider;",
                " import org.apache.qpid.tests.utils.BrokerAdmin;",
                " import org.apache.qpid.tests.utils.BrokerAdminUsingTestBase;",
                "-import org.apache.qpid.url.URLSyntaxException;",
                "-public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "+public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                " {",
                "     private static JmsProvider _jmsProvider;",
                "-    private static final AmqpManagementFacade _managementFacade = new AmqpManagementFacade(\"$management\");",
                "+    private static AmqpManagementFacade _managementFacade;",
                "@@ -53,3 +45,2 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "     public final TestName _testName = new TestName();",
                "-    private final List<Connection> _connections = new ArrayList<>();",
                "@@ -58,28 +49,11 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "-    }",
                "-",
                "-    @After",
                "-    public void tearDown()",
                "-    {",
                "-        List<JMSException> exceptions = new ArrayList<>();",
                "-        for (Connection connection : _connections)",
                "+        if (\"1.0\".equals(System.getProperty(\"broker.version\", \"1.0\")))",
                "         {",
                "-            try",
                "-            {",
                "-                connection.close();",
                "-            }",
                "-            catch (JMSException e)",
                "-            {",
                "-                exceptions.add(e);",
                "-            }",
                "+            _managementFacade = new AmqpManagementFacade(\"$management\");",
                "+            _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "         }",
                "-        if (!exceptions.isEmpty())",
                "+        else",
                "         {",
                "-            JMSRuntimeException jmsRuntimeException = new JMSRuntimeException(\"Exception(s) occurred during closing of JMS connections.\");",
                "-            for (JMSException exception : exceptions)",
                "-            {",
                "-                jmsRuntimeException.addSuppressed(exception);",
                "-            }",
                "-            throw jmsRuntimeException;",
                "+            _managementFacade = new AmqpManagementFacade(\"ADDR:$management\");",
                "+            _jmsProvider = new QpidJmsClient0xProvider();",
                "         }",
                "@@ -94,3 +68,4 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "                            .setUsername(getBrokerAdmin().getValidUsername())",
                "-                           .setPassword(getBrokerAdmin().getValidPassword());",
                "+                           .setPassword(getBrokerAdmin().getValidPassword())",
                "+                ;",
                "     }",
                "@@ -102,8 +77,13 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        try (Connection connection = getConnection())",
                "+        Connection connection = getConnection();",
                "+        try",
                "         {",
                "             connection.start();",
                "-            Session session = connection.createSession(Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "             _managementFacade.createEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "         }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "     }",
                "@@ -116,11 +96,16 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        try (Connection connection = getConnection())",
                "+        Connection connection = getConnection();",
                "+        try",
                "         {",
                "             connection.start();",
                "-            Session session = connection.createSession(Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "             return _managementFacade.performOperationUsingAmqpManagement(name, operation, session, type, arguments);",
                "         }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "     }",
                "-    protected Connection getConnection() throws JMSException, NamingException, URLSyntaxException",
                "+    protected Connection getConnection() throws JMSException, NamingException",
                "     {",
                "@@ -143,2 +128,15 @@ public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    protected Topic createTopic(final String topicName) throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            return _jmsProvider.createTopic(connection, topicName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                " }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "new file mode 100644",
                "index 0000000000..b5902eb263",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -0,0 +1,251 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.util.Hashtable;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.ConnectionFactory;",
                "+import javax.jms.JMSException;",
                "+import javax.naming.Context;",
                "+import javax.naming.InitialContext;",
                "+import javax.naming.NamingException;",
                "+",
                "+public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+{",
                "+    private String _clientId = \"clientid\";",
                "+    private String _username = USERNAME;",
                "+    private String _password = PASSWORD;",
                "+    private String _virtualHost;",
                "+    private boolean _enableTls;",
                "+    private boolean _enableFailover;",
                "+    private final Map<String, Object> _options = new TreeMap<>();",
                "+    private int _reconnectAttempts = 20;",
                "+    private String _host = \"localhost\";",
                "+    private int _port;",
                "+    private int _sslPort;",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setHost(final String host)",
                "+    {",
                "+        _host = host;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPort(final int port)",
                "+    {",
                "+        _port = port;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setSslPort(final int port)",
                "+    {",
                "+        _sslPort = port;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPrefetch(final int prefetch)",
                "+    {",
                "+        _options.put(\"maxprefetch\", prefetch);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setClientId(final String clientId)",
                "+    {",
                "+        _clientId = clientId;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setUsername(final String username)",
                "+    {",
                "+        _username = username;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPassword(final String password)",
                "+    {",
                "+        _password = password;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setVirtualHost(final String virtualHostName)",
                "+    {",
                "+        _virtualHost = virtualHostName;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setFailover(final boolean enableFailover)",
                "+    {",
                "+        _enableFailover = enableFailover;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setFailoverReconnectAttempts(final int reconnectAttempts)",
                "+    {",
                "+        _reconnectAttempts = reconnectAttempts;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTls(final boolean enableTls)",
                "+    {",
                "+        _enableTls = enableTls;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setSyncPublish(final boolean syncPublish)",
                "+    {",
                "+        if (syncPublish)",
                "+        {",
                "+            _options.put(\"sync_publish\", \"all\");",
                "+        }",
                "+        else",
                "+        {",
                "+            _options.remove(\"sync_publish\");",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setOptions(final Map<String, String> options)",
                "+    {",
                "+        _options.putAll(options);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPopulateJMSXUserID(final boolean populateJMSXUserID)",
                "+    {",
                "+        _options.put(\"populateJMSXUserID\", String.valueOf(populateJMSXUserID));",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Connection build() throws JMSException, NamingException",
                "+    {",
                "+        return buildConnectionFactory().createConnection(_username, _password);",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionFactory buildConnectionFactory() throws NamingException",
                "+    {",
                "+        StringBuilder cUrlBuilder = new StringBuilder(\"amqp://\");",
                "+        if (_username != null)",
                "+        {",
                "+            cUrlBuilder.append(_username);",
                "+        }",
                "+",
                "+        if (_username != null || _password != null)",
                "+        {",
                "+            cUrlBuilder.append(\":\");",
                "+        }",
                "+",
                "+        if (_password != null)",
                "+        {",
                "+            cUrlBuilder.append(_password);",
                "+        }",
                "+",
                "+        if (_username != null || _password != null)",
                "+        {",
                "+            cUrlBuilder.append(\"@\");",
                "+        }",
                "+",
                "+        if (_clientId != null)",
                "+        {",
                "+            cUrlBuilder.append(_clientId);",
                "+        }",
                "+",
                "+        cUrlBuilder.append(\"/\");",
                "+",
                "+        if (_virtualHost != null)",
                "+        {",
                "+            cUrlBuilder.append(_virtualHost);",
                "+        }",
                "+",
                "+        cUrlBuilder.append(\"?brokerlist='tcp://\").append(_host).append(\":\");",
                "+        if (_enableTls)",
                "+        {",
                "+            cUrlBuilder.append(_sslPort).append(\"?ssl='true'\");",
                "+        }",
                "+        else",
                "+        {",
                "+            cUrlBuilder.append(_port);",
                "+        }",
                "+",
                "+        if (_enableFailover)",
                "+        {",
                "+            cUrlBuilder.append(\";tcp://\").append(_host).append(\":\");",
                "+            if (_enableTls)",
                "+            {",
                "+                cUrlBuilder.append(System.getProperty(\"test.port.alt.ssl\")).append(\"?ssl='true'\");",
                "+            }",
                "+            else",
                "+            {",
                "+                cUrlBuilder.append(System.getProperty(\"test.port.alt\"));",
                "+            }",
                "+            cUrlBuilder.append(\"'\")",
                "+                       .append(\"&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='\")",
                "+                       .append(_reconnectAttempts)",
                "+                       .append(\"''\");",
                "+        }",
                "+        else",
                "+        {",
                "+            cUrlBuilder.append(\"'\");",
                "+        }",
                "+",
                "+        for (Map.Entry<String, Object> entry : _options.entrySet())",
                "+        {",
                "+            cUrlBuilder.append(\"&\").append(entry.getKey()).append(\"='\").append(entry.getValue()).append(\"'\");",
                "+        }",
                "+",
                "+        final Hashtable<Object, Object> initialContextEnvironment = new Hashtable<>();",
                "+        initialContextEnvironment.put(Context.INITIAL_CONTEXT_FACTORY,",
                "+                                      \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\");",
                "+        final String factoryName = \"connectionFactory\";",
                "+        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, cUrlBuilder.toString());",
                "+        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "+        try",
                "+        {",
                "+            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            initialContext.close();",
                "+        }",
                "+    }",
                "+",
                "+    String getBrokerDetails()",
                "+    {",
                "+        return \"tcp://\" + _host + \":\" + _port;",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "new file mode 100644",
                "index 0000000000..82549c041a",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "@@ -0,0 +1,151 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.net.URISyntaxException;",
                "+import java.security.AccessControlException;",
                "+import java.util.Hashtable;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.ConnectionFactory;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Queue;",
                "+import javax.jms.Session;",
                "+import javax.jms.Topic;",
                "+import javax.naming.Context;",
                "+import javax.naming.InitialContext;",
                "+import javax.naming.NamingException;",
                "+",
                "+",
                "+public class QpidJmsClient0xProvider implements JmsProvider",
                "+{",
                "+",
                "+    public QpidJmsClient0xProvider()",
                "+    {",
                "+    }",
                "+",
                "+    @Override",
                "+    public Connection getConnection(String urlString) throws Exception",
                "+    {",
                "+        final Hashtable<Object, Object> initialContextEnvironment = new Hashtable<>();",
                "+        initialContextEnvironment.put(Context.INITIAL_CONTEXT_FACTORY, \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\");",
                "+        final String factoryName = \"connectionFactory\";",
                "+        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, urlString);",
                "+        ConnectionFactory connectionFactory =",
                "+                (ConnectionFactory) new InitialContext(initialContextEnvironment).lookup(factoryName);",
                "+        return connectionFactory.createConnection();",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public Queue getTestQueue(final String testQueueName) throws NamingException",
                "+    {",
                "+        return createReflectively(\"org.apache.qpid.client.AMQQueue\", \"amq.direct\", testQueueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Queue getQueueFromName(Session session, String name) throws JMSException",
                "+    {",
                "+        return createReflectively(\"org.apache.qpid.client.AMQQueue\", \"\", name);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Queue createTestQueue(Session session, String queueName) throws JMSException",
                "+    {",
                "+",
                "+        Queue amqQueue = null;",
                "+        try",
                "+        {",
                "+            amqQueue = getTestQueue(queueName);",
                "+        }",
                "+        catch (NamingException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+        session.createConsumer(amqQueue).close();",
                "+        return amqQueue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic getTestTopic(final String testQueueName)",
                "+    {",
                "+        return createReflectively(\"org.apache.qpid.client.AMQTopic\", \"amq.topic\", testQueueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopic(final Connection con, final String topicName) throws JMSException",
                "+    {",
                "+        return getTestTopic(topicName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopicOnDirect(final Connection con, String topicName) throws JMSException, URISyntaxException",
                "+    {",
                "+        return createReflectively(\"org.apache.qpid.client.AMQTopic\",",
                "+                                  \"direct://amq.direct/\"",
                "+                                  + topicName",
                "+                                  + \"/\"",
                "+                                  + topicName",
                "+                                  + \"?routingkey='\"",
                "+                                  + topicName",
                "+                                  + \"',exclusive='true',autodelete='true'\");",
                "+    }",
                "+",
                "+    private <T> T createReflectively(String className, Object ...args)",
                "+    {",
                "+        try",
                "+        {",
                "+            Class<?> topicClass = Class.forName(className);",
                "+            Class[] classes = new Class[args.length];",
                "+            for (int i = 0; i < args.length; ++i)",
                "+            {",
                "+                classes[i] = args[i].getClass();",
                "+            }",
                "+            Constructor<?> constructor = topicClass.getConstructor(classes);",
                "+            return (T) constructor.newInstance(args);",
                "+        }",
                "+        catch (IllegalAccessException | AccessControlException | InvocationTargetException | InstantiationException | NoSuchMethodException | ClassNotFoundException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopicOnFanout(final Connection con, String topicName) throws JMSException, URISyntaxException",
                "+    {",
                "+        return createReflectively(\"org.apache.qpid.client.AMQTopic\", \"fanout://amq.fanout/\"",
                "+                                                                     + topicName",
                "+                                                                     + \"/\"",
                "+                                                                     + topicName",
                "+                                                                     + \"?routingkey='\"",
                "+                                                                     + topicName",
                "+                                                                     + \"',exclusive='true',autodelete='true'\");",
                "+    }",
                "+",
                "+    @Override",
                "+    public QpidJmsClient0xConnectionBuilder getConnectionBuilder()",
                "+    {",
                "+        return new QpidJmsClient0xConnectionBuilder();",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "new file mode 100644",
                "index 0000000000..19179377d2",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -0,0 +1,262 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.URLEncoder;",
                "+import java.util.Hashtable;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.ConnectionFactory;",
                "+import javax.jms.JMSException;",
                "+import javax.naming.Context;",
                "+import javax.naming.InitialContext;",
                "+import javax.naming.NamingException;",
                "+",
                "+public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+{",
                "+    private static final AtomicInteger CLIENTID_COUNTER = new AtomicInteger();",
                "+    private String _host;",
                "+    private int _port;",
                "+    private int _sslPort;",
                "+    private Map<String, Object> _options;",
                "+    private boolean _enableTls;",
                "+    private boolean _enableFailover;",
                "+",
                "+    QpidJmsClientConnectionBuilder()",
                "+    {",
                "+        _options = new TreeMap<>();",
                "+        _options.put(\"jms.clientID\", getNextClientId());",
                "+        _options.put(\"jms.username\", USERNAME);",
                "+        _options.put(\"jms.password\", PASSWORD);",
                "+        _host = \"localhost\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setHost(final String host)",
                "+    {",
                "+        _host = host;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPort(final int port)",
                "+    {",
                "+        _port = port;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setSslPort(final int port)",
                "+    {",
                "+        _sslPort = port;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPrefetch(final int prefetch)",
                "+    {",
                "+        _options.put(\"jms.prefetchPolicy.all\", prefetch);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setClientId(final String clientId)",
                "+    {",
                "+        if (clientId == null)",
                "+        {",
                "+            _options.remove(\"jms.clientID\");",
                "+        }",
                "+        else",
                "+        {",
                "+            _options.put(\"jms.clientID\", clientId);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setUsername(final String username)",
                "+    {",
                "+        if (username == null)",
                "+        {",
                "+            _options.remove(\"jms.username\");",
                "+        }",
                "+        else",
                "+        {",
                "+            _options.put(\"jms.username\", username);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPassword(final String password)",
                "+    {",
                "+        if (password == null)",
                "+        {",
                "+            _options.remove(\"jms.password\");",
                "+        }",
                "+        else",
                "+        {",
                "+            _options.put(\"jms.password\", password);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setVirtualHost(final String virtualHostName)",
                "+    {",
                "+        _options.put(\"amqp.vhost\", virtualHostName);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setFailover(final boolean enableFailover)",
                "+    {",
                "+        _enableFailover = enableFailover;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setFailoverReconnectAttempts(final int reconnectAttempts)",
                "+    {",
                "+        _options.put(\"failover.maxReconnectAttempts\", reconnectAttempts);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTls(final boolean enableTls)",
                "+    {",
                "+        _enableTls = enableTls;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setSyncPublish(final boolean syncPublish)",
                "+    {",
                "+        _options.put(\"jms.forceSyncSend\", syncPublish);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setOptions(final Map<String, String> options)",
                "+    {",
                "+        _options.putAll(options);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setPopulateJMSXUserID(final boolean populateJMSXUserID)",
                "+    {",
                "+        _options.put(\"jms.populateJMSXUserID\", String.valueOf(populateJMSXUserID));",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Connection build() throws NamingException, JMSException",
                "+    {",
                "+        return buildConnectionFactory().createConnection();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionFactory buildConnectionFactory() throws NamingException",
                "+    {",
                "+        final Hashtable<Object, Object> initialContextEnvironment = new Hashtable<>();",
                "+        initialContextEnvironment.put(Context.INITIAL_CONTEXT_FACTORY,",
                "+                                      \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\");",
                "+",
                "+        final StringBuilder connectionUrlBuilder = new StringBuilder();",
                "+",
                "+        final Map<String, Object> options = new TreeMap<>();",
                "+        options.putAll(_options);",
                "+        if (_enableFailover)",
                "+        {",
                "+            if (!options.containsKey(\"failover.maxReconnectAttempts\"))",
                "+            {",
                "+                options.put(\"failover.maxReconnectAttempts\", \"2\");",
                "+            }",
                "+            connectionUrlBuilder.append(\"failover:(amqp://\")",
                "+                    .append(_host)",
                "+                    .append(\":\")",
                "+                    .append(_port)",
                "+                    .append(\",amqp://localhost:\")",
                "+                    .append(System.getProperty(\"test.port.alt\"))",
                "+                    .append(\")\");",
                "+            appendOptions(options, connectionUrlBuilder);",
                "+        }",
                "+        else if (!_enableTls)",
                "+        {",
                "+            connectionUrlBuilder.append(\"amqp://\").append(_host).append(\":\").append(_port);",
                "+",
                "+            appendOptions(options, connectionUrlBuilder);",
                "+        }",
                "+        else",
                "+        {",
                "+            connectionUrlBuilder.append(\"amqps://\").append(_host).append(\":\").append(_sslPort);",
                "+            appendOptions(options, connectionUrlBuilder);",
                "+        }",
                "+",
                "+        final String factoryName = \"connection\";",
                "+        initialContextEnvironment.put(\"connectionfactory.\" + factoryName, connectionUrlBuilder.toString());",
                "+",
                "+        InitialContext initialContext = new InitialContext(initialContextEnvironment);",
                "+        try",
                "+        {",
                "+            return (ConnectionFactory) initialContext.lookup(factoryName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            initialContext.close();",
                "+        }",
                "+    }",
                "+",
                "+    private void appendOptions(final Map<String, Object> actualOptions, final StringBuilder stem)",
                "+    {",
                "+        boolean first = true;",
                "+        for(Map.Entry<String, Object> option : actualOptions.entrySet())",
                "+        {",
                "+            if(first)",
                "+            {",
                "+                stem.append('?');",
                "+                first = false;",
                "+            }",
                "+            else",
                "+            {",
                "+                stem.append('&');",
                "+            }",
                "+            try",
                "+            {",
                "+                stem.append(option.getKey()).append('=').append(URLEncoder.encode(String.valueOf(option.getValue()), \"UTF-8\"));",
                "+            }",
                "+            catch (UnsupportedEncodingException e)",
                "+            {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private String getNextClientId()",
                "+    {",
                "+        return \"builderClientId-\" + CLIENTID_COUNTER.getAndIncrement();",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "new file mode 100644",
                "index 0000000000..9a222040de",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "@@ -0,0 +1,123 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.net.URISyntaxException;",
                "+import java.util.Properties;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.Destination;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Queue;",
                "+import javax.jms.Session;",
                "+import javax.jms.Topic;",
                "+import javax.naming.Context;",
                "+import javax.naming.InitialContext;",
                "+import javax.naming.NamingException;",
                "+",
                "+public class QpidJmsClientProvider implements JmsProvider",
                "+{",
                "+    private final AmqpManagementFacade _managementFacade;",
                "+",
                "+    public QpidJmsClientProvider(AmqpManagementFacade managementFacade)",
                "+    {",
                "+        _managementFacade = managementFacade;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Connection getConnection(String urlString) throws Exception",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Queue getTestQueue(final String testQueueName) throws NamingException",
                "+    {",
                "+        return (Queue) getDestination(\"queue\", testQueueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Queue getQueueFromName(Session session, String name) throws JMSException",
                "+    {",
                "+        return session.createQueue(name);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Queue createTestQueue(Session session, String queueName) throws JMSException",
                "+    {",
                "+        _managementFacade.createEntityUsingAmqpManagement(queueName, session, \"org.apache.qpid.Queue\");",
                "+",
                "+        return session.createQueue(queueName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic getTestTopic(final String testTopicName) throws NamingException",
                "+    {",
                "+        return (Topic) getDestination(\"topic\", testTopicName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopic(final Connection con, final String topicName) throws JMSException",
                "+    {",
                "+        Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        _managementFacade.createEntityUsingAmqpManagement(topicName, session, \"org.apache.qpid.TopicExchange\");",
                "+",
                "+        return session.createTopic(topicName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopicOnDirect(final Connection con, String topicName) throws JMSException, URISyntaxException",
                "+    {",
                "+        Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        return session.createTopic(\"amq.direct/\" + topicName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Topic createTopicOnFanout(final Connection con, String topicName) throws JMSException, URISyntaxException",
                "+    {",
                "+        Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        return session.createTopic(\"amq.fanout/\" + topicName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder getConnectionBuilder()",
                "+    {",
                "+        return new QpidJmsClientConnectionBuilder();",
                "+    }",
                "+",
                "+    private Destination getDestination(String type, String name) throws NamingException",
                "+    {",
                "+        final String jndiName = \"test\";",
                "+        final Properties initialContextProperties = new Properties();",
                "+        initialContextProperties.put(Context.INITIAL_CONTEXT_FACTORY, \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\");",
                "+        initialContextProperties.put(type + \".\" + jndiName, name);",
                "+",
                "+        InitialContext initialContext = new InitialContext(initialContextProperties);",
                "+        try",
                "+        {",
                "+            return (Destination) initialContext.lookup(jndiName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            initialContext.close();",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "new file mode 100644",
                "index 0000000000..dc975d6c6d",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "@@ -0,0 +1,92 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import javax.jms.Destination;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Message;",
                "+import javax.jms.MessageProducer;",
                "+import javax.jms.Session;",
                "+",
                "+public class Utils",
                "+{",
                "+    private static final int DEFAULT_MESSAGE_SIZE = 1024;",
                "+    public static final String INDEX = \"index\";",
                "+    private static final String DEFAULT_MESSAGE_PAYLOAD = createString(DEFAULT_MESSAGE_SIZE);",
                "+",
                "+    public static List<Message> sendMessage(Session session, Destination destination, int count) throws Exception",
                "+    {",
                "+        List<Message> messages = new ArrayList<>(count);",
                "+        MessageProducer producer = session.createProducer(destination);",
                "+",
                "+        for (int i = 0; i < (count); i++)",
                "+        {",
                "+            Message next = createNextMessage(session, i);",
                "+            producer.send(next);",
                "+            messages.add(next);",
                "+        }",
                "+",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+",
                "+        return messages;",
                "+    }",
                "+",
                "+    public static Message createNextMessage(Session session, int msgCount) throws JMSException",
                "+    {",
                "+        Message message = createMessage(session, DEFAULT_MESSAGE_SIZE);",
                "+        message.setIntProperty(INDEX, msgCount);",
                "+",
                "+        return message;",
                "+    }",
                "+",
                "+    public static Message createMessage(Session session, int messageSize) throws JMSException",
                "+    {",
                "+        String payload;",
                "+        if (messageSize == DEFAULT_MESSAGE_SIZE)",
                "+        {",
                "+            payload = DEFAULT_MESSAGE_PAYLOAD;",
                "+        }",
                "+        else",
                "+        {",
                "+            payload = createString(messageSize);",
                "+        }",
                "+",
                "+        return session.createTextMessage(payload);",
                "+    }",
                "+",
                "+    private static String createString(final int stringSize)",
                "+    {",
                "+        final String payload;",
                "+        StringBuilder stringBuilder = new StringBuilder();",
                "+        for (int i = 0; i < stringSize; ++i)",
                "+        {",
                "+            stringBuilder.append(\"x\");",
                "+        }",
                "+        payload = stringBuilder.toString();",
                "+        return payload;",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json b/systests/qpid-systests-jms-core/src/main/resources/config-jms-tests.json",
                "similarity index 96%",
                "rename from systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json",
                "rename to systests/qpid-systests-jms-core/src/main/resources/config-jms-tests.json",
                "index 764ff891a4..7fc041608d 100644",
                "--- a/systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json",
                "+++ b/systests/qpid-systests-jms-core/src/main/resources/config-jms-tests.json",
                "@@ -45,3 +45,2 @@",
                "     \"port\" : \"0\",",
                "-    \"protocols\" : [ \"AMQP_1_0\" ],",
                "     \"virtualhostaliases\" : [ {",
                "@@ -61,3 +60,3 @@",
                "     \"port\" : \"0\",",
                "-    \"protocols\" : [ \"AMQP_1_0\" ],",
                "+    \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\", \"AMQP_0_10\", \"AMQP_1_0\" ],",
                "     \"virtualhostaliases\" : [ {",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index a4b455dd76..6dbb47f9f6 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -31,5 +31,6 @@",
                "     <dependencies>",
                "+",
                "         <dependency>",
                "             <groupId>org.apache.qpid</groupId>",
                "-            <artifactId>qpid-systests</artifactId>",
                "+            <artifactId>qpid-systests-jms-core</artifactId>",
                "         </dependency>",
                "@@ -108,3 +109,3 @@",
                "                     <systemPropertyVariables>",
                "-                        <qpid.initialConfigurationLocation>classpath:config-jms1-tests.json</qpid.initialConfigurationLocation>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-jms-tests.json</qpid.initialConfigurationLocation>",
                "                         <qpid.amqp.version>${profile.broker.version}</qpid.amqp.version>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index b2935742e5..ec60b23392 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -31,5 +31,6 @@",
                "   <dependencies>",
                "+",
                "     <dependency>",
                "       <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-systests</artifactId>",
                "+      <artifactId>qpid-systests-jms-core</artifactId>",
                "       <exclusions>",
                "@@ -42,9 +43,2 @@",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-bdbstore</artifactId>",
                "-      <scope>test</scope>",
                "-      <optional>true</optional>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "@@ -54,8 +48,2 @@",
                "-    <dependency>",
                "-      <groupId>org.apache.qpid</groupId>",
                "-      <artifactId>qpid-broker-plugins-amqp-1-0-protocol-bdb-link-store</artifactId>",
                "-      <optional>true</optional>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "@@ -114,3 +102,3 @@",
                "           <systemPropertyVariables>",
                "-            <qpid.initialConfigurationLocation>classpath:config-jms2-tests.json</qpid.initialConfigurationLocation>",
                "+            <qpid.initialConfigurationLocation>classpath:config-jms-tests.json</qpid.initialConfigurationLocation>",
                "           </systemPropertyVariables>"
            ],
            "changed_files": [
                "pom.xml",
                "systests/pom.xml",
                "systests/qpid-systests-jms-core/pom.xml",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "systests/qpid-systests-jms-core/src/main/resources/config-jms-tests.json",
                "systests/qpid-systests-jms_1.1/pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: functionality",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connection, connect, provider, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b5a0d32806ed5d07853adc287537d53cd3a7791f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516277022,
            "hunks": 33,
            "message": "QPID-8062: [Broker-J][AMQP 1.0] Move responsibility to create outcome for received message from ReceivingDestination into a caller of ReceivingDestination#send()",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "index 806469be7b..00c058861c 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "@@ -24,3 +24,2 @@ import static org.apache.qpid.server.protocol.v1_0.Session_1_0.DELAYED_DELIVERY;",
                " import java.util.Arrays;",
                "-import java.util.Collections;",
                "@@ -32,13 +31,6 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.NamedAddressSpace;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Target;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.AmqpError;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "-import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -70,14 +62,5 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome[] getOutcomes()",
                "-    {",
                "-        return new Outcome[0];",
                "-    }",
                "-",
                "-    @Override",
                "-    public Outcome send(final ServerMessage<?> message,",
                "-                        final ServerTransaction txn,",
                "-                        final SecurityToken securityToken,",
                "-                        final boolean rejectedOutcomeSupportedBySource,",
                "-                        final boolean deliverySettled,",
                "-                        final Binary deliveryTag) throws AmqpErrorException",
                "+    public void send(final ServerMessage<?> message,",
                "+                     final ServerTransaction txn,",
                "+                     final SecurityToken securityToken) throws UnroutableMessageException",
                "     {",
                "@@ -100,3 +83,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "-        final Outcome outcome;",
                "         if (destination == null)",
                "@@ -106,3 +88,2 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "                 _eventLogger.message(ExchangeMessages.DISCARDMSG(\"\", routingAddress));",
                "-                outcome = new Accepted();",
                "             }",
                "@@ -110,27 +91,4 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "             {",
                "-                final Error notFoundError = new Error(AmqpError.NOT_FOUND,",
                "-                                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "-                notFoundError.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "-",
                "-                // If the source of the link does not support the rejected outcome,",
                "-                // or the message has already been settled by the sender,",
                "-                // then the routing node MUST detach the link with an error.",
                "-                // AMQP-140: When pre-settled messages are being sent within a transaction,",
                "-                // then the behaviour defined for transactions should take precedence",
                "-                // (essentially marking the transaction as rollback only).",
                "-                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "-                {",
                "-                    throw new AmqpErrorException(notFoundError);",
                "-                }",
                "-                else",
                "-                {",
                "-                    if (deliverySettled && txn instanceof LocalTransaction)",
                "-                    {",
                "-                        ((LocalTransaction) txn).setRollbackOnly();",
                "-                    }",
                "-",
                "-                    Rejected rejected = new Rejected();",
                "-                    rejected.setError(notFoundError);",
                "-                    outcome = rejected;",
                "-                }",
                "+                throw new UnroutableMessageException(AmqpError.NOT_FOUND,",
                "+                                                     String.format(\"Unknown destination '%s'\", routingAddress));",
                "             }",
                "@@ -139,10 +97,6 @@ public class AnonymousRelayDestination implements ReceivingDestination",
                "         {",
                "-            outcome = destination.send(message,",
                "-                                       txn,",
                "-                                       securityToken,",
                "-                                       rejectedOutcomeSupportedBySource,",
                "-                                       deliverySettled,",
                "-                                       deliveryTag);",
                "+            destination.send(message,",
                "+                             txn,",
                "+                             securityToken);",
                "         }",
                "-        return outcome;",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "index 6d5859f919..ee3839c1fe 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "@@ -36,8 +36,3 @@ import org.apache.qpid.server.model.DestinationAddress;",
                " import org.apache.qpid.server.model.Exchange;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                "-import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.TerminusDurability;",
                "@@ -45,5 +40,3 @@ import org.apache.qpid.server.protocol.v1_0.type.messaging.TerminusExpiryPolicy;",
                " import org.apache.qpid.server.protocol.v1_0.type.transport.AmqpError;",
                "-import org.apache.qpid.server.protocol.v1_0.type.transport.Error;",
                " import org.apache.qpid.server.security.SecurityToken;",
                "-import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "@@ -52,5 +45,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                " {",
                "-    private static final Accepted ACCEPTED = new Accepted();",
                "-    private static final Rejected REJECTED = new Rejected();",
                "-    private static final Outcome[] OUTCOMES = { ACCEPTED, REJECTED};",
                "     private final boolean _discardUnroutable;",
                "@@ -92,14 +82,5 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "     @Override",
                "-    public Outcome[] getOutcomes()",
                "-    {",
                "-        return OUTCOMES;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Outcome send(final ServerMessage<?> message,",
                "-                        final ServerTransaction txn,",
                "-                        final SecurityToken securityToken,",
                "-                        final boolean rejectedOutcomeSupportedBySource,",
                "-                        final boolean deliverySettled,",
                "-                        final Binary deliveryTag) throws AmqpErrorException",
                "+    public void send(final ServerMessage<?> message,",
                "+                     final ServerTransaction txn,",
                "+                     final SecurityToken securityToken) throws UnroutableMessageException",
                "     {",
                "@@ -138,6 +119,6 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "             {",
                "-                final Error error;",
                "+                final String errorMessage;",
                "+                final AmqpError errorCode;",
                "                 if (result.isRejected())",
                "                 {",
                "-                    AmqpError errorCode;",
                "                     if (result.containsReject(RejectType.LIMIT_EXCEEDED))",
                "@@ -154,14 +135,3 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                     }",
                "-                    error = new Error(errorCode, result.getRejectReason());",
                "-                }",
                "-                else",
                "-                {",
                "-                    error = new Error(AmqpError.NOT_FOUND,",
                "-                                      String.format(\"Unknown destination '%s'\", routingAddress));",
                "-                }",
                "-                error.setInfo(Collections.singletonMap(DELIVERY_TAG, deliveryTag));",
                "-",
                "-                if (!rejectedOutcomeSupportedBySource || (deliverySettled && !(txn instanceof LocalTransaction)))",
                "-                {",
                "-                    throw new AmqpErrorException(error);",
                "+                    errorMessage = result.getRejectReason();",
                "                 }",
                "@@ -169,11 +139,6 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "                 {",
                "-                    if (deliverySettled && txn instanceof LocalTransaction)",
                "-                    {",
                "-                        ((LocalTransaction) txn).setRollbackOnly();",
                "-                    }",
                "-",
                "-                    Rejected rejected = new Rejected();",
                "-                    rejected.setError(error);",
                "-                    return rejected;",
                "+                    errorCode = AmqpError.NOT_FOUND;",
                "+                    errorMessage = String.format(\"Unknown destination '%s'\", routingAddress);",
                "                 }",
                "+                throw new UnroutableMessageException(errorCode, errorMessage);",
                "             }",
                "@@ -184,3 +149,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "         }",
                "-        return ACCEPTED;",
                "     }",
                "@@ -201,10 +165,2 @@ public class NodeReceivingDestination implements ReceivingDestination",
                "-    private Outcome createdRejectedOutcome(AmqpError errorCode, String errorMessage)",
                "-    {",
                "-        Rejected rejected = new Rejected();",
                "-        final Error notFoundError = new Error(errorCode, errorMessage);",
                "-        rejected.setError(notFoundError);",
                "-        return rejected;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "index 5abd825159..5c746bec0f 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "@@ -24,5 +24,2 @@ import org.apache.qpid.server.message.MessageDestination;",
                " import org.apache.qpid.server.message.ServerMessage;",
                "-import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Binary;",
                "-import org.apache.qpid.server.protocol.v1_0.type.Outcome;",
                " import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                "@@ -33,3 +30,2 @@ public interface ReceivingDestination",
                " {",
                "-    Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "     Symbol REJECT_UNROUTABLE = Symbol.valueOf(\"REJECT_UNROUTABLE\");",
                "@@ -39,10 +35,5 @@ public interface ReceivingDestination",
                "-    Outcome[] getOutcomes();",
                "-",
                "-    Outcome send(final ServerMessage<?> message,",
                "-                 final ServerTransaction txn,",
                "-                 final SecurityToken securityToken,",
                "-                 final boolean rejectedOutcomeSupportedBySource,",
                "-                 final boolean deliverySettled,",
                "-                 final Binary deliveryTag) throws AmqpErrorException;",
                "+    void send(final ServerMessage<?> message,",
                "+              final ServerTransaction txn,",
                "+              final SecurityToken securityToken) throws UnroutableMessageException;",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index a36a2764e4..2d2b2061c3 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -55,2 +55,3 @@ import org.apache.qpid.server.protocol.v1_0.type.Symbol;",
                " import org.apache.qpid.server.protocol.v1_0.type.UnsignedInteger;",
                "+import org.apache.qpid.server.protocol.v1_0.type.messaging.Accepted;",
                " import org.apache.qpid.server.protocol.v1_0.type.messaging.Rejected;",
                "@@ -78,2 +79,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "     private static final Logger LOGGER = LoggerFactory.getLogger(StandardReceivingLinkEndpoint.class);",
                "+    private static final Symbol DELIVERY_TAG = Symbol.valueOf(\"delivery-tag\");",
                "+    private static final Accepted ACCEPTED = new Accepted();",
                "     private static final String LINK = \"link\";",
                "@@ -268,12 +271,33 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                         {",
                "-                            outcome = getReceivingDestination().send(serverMessage,",
                "-                                                                     transaction,",
                "-                                                                     session.getSecurityToken(),",
                "-                                                                     _rejectedOutcomeSupportedBySource,",
                "-                                                                     delivery.isSettled(),",
                "-                                                                     delivery.getDeliveryTag());",
                "+                            getReceivingDestination().send(serverMessage,",
                "+                                                           transaction,",
                "+                                                           session.getSecurityToken());",
                "+                            outcome = ACCEPTED;",
                "                         }",
                "-                        catch (AmqpErrorException e)",
                "+                        catch (UnroutableMessageException e)",
                "                         {",
                "-                            return e.getError();",
                "+                            final Error error = new Error();",
                "+                            error.setCondition(e.getErrorCondition());",
                "+                            error.setDescription(e.getMessage());",
                "+                            String targetAddress = getTarget().getAddress();",
                "+                            if (targetAddress == null || \"\".equals(targetAddress.trim()))",
                "+                            {",
                "+                                error.setInfo(Collections.singletonMap(DELIVERY_TAG, delivery.getDeliveryTag()));",
                "+                            }",
                "+                            if (!_rejectedOutcomeSupportedBySource ||",
                "+                                (delivery.isSettled() && !(transaction instanceof LocalTransaction)))",
                "+                            {",
                "+                                return error;",
                "+                            }",
                "+                            else",
                "+                            {",
                "+                                if (delivery.isSettled() && transaction instanceof LocalTransaction)",
                "+                                {",
                "+                                    ((LocalTransaction) transaction).setRollbackOnly();",
                "+                                }",
                "+",
                "+                                Rejected rejected = new Rejected();",
                "+                                rejected.setError(error);",
                "+                                outcome = rejected;",
                "+                            }",
                "                         }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java",
                "new file mode 100644",
                "index 0000000000..378b86cc0a",
                "--- /dev/null",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.protocol.v1_0;",
                "+",
                "+import org.apache.qpid.server.protocol.v1_0.type.ErrorCondition;",
                "+",
                "+public class UnroutableMessageException extends Exception",
                "+{",
                "+    private final ErrorCondition _errorCondition;",
                "+",
                "+    public UnroutableMessageException(final ErrorCondition errorCondition, final String message)",
                "+    {",
                "+        super(message);",
                "+        _errorCondition = errorCondition;",
                "+    }",
                "+",
                "+    public ErrorCondition getErrorCondition()",
                "+    {",
                "+        return _errorCondition;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8062": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/UnroutableMessageException.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AnonymousRelayDestination.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: call, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8062",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc6ce7fb94f50677fcc3ad31ead136180bd96087",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510242125,
            "hunks": 2,
            "message": "QPID-8029: [Broker-J] [AMQP 0-8..0-91] Attempting to tx.rollback on a non-transacted session should not try to rollback (cherry picked from commit e3260f592c9d8eb7165c896d1ba5724e61c36d92)",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 3e4761658c..df9f946cdf 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -3363,20 +3363,14 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "         }",
                "-",
                "-        final MethodRegistry methodRegistry = _connection.getMethodRegistry();",
                "-        final AMQMethodBody responseBody = methodRegistry.createTxRollbackOkBody();",
                "-",
                "-        Runnable task = new Runnable()",
                "+        else",
                "         {",
                "+            final MethodRegistry methodRegistry = _connection.getMethodRegistry();",
                "+            final AMQMethodBody responseBody = methodRegistry.createTxRollbackOkBody();",
                "-            @Override",
                "-            public void run()",
                "-            {",
                "-                _connection.writeFrame(responseBody.generateFrame(_channelId));",
                "-            }",
                "-        };",
                "+            Runnable task = () -> _connection.writeFrame(responseBody.generateFrame(_channelId));",
                "-        rollback(task);",
                "+            rollback(task);",
                "-        // TODO: This is not spec compliant but we currently seem to rely on this behaviour",
                "-        resend();",
                "+            // TODO: This is not spec compliant but we currently seem to rely on this behaviour",
                "+            resend();",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8029": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8029",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cb36ee7b0cdc26416ef921a0f8e17cd0ef70bdec",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515670814,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove AMQP 0-x client specific ConnectionTest after moving test into client system tests",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 987309938f..a6e6ee338c 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -25,8 +25,2 @@ org.apache.qpid.test.unit.client.MaxDeliveryCountTest#*",
                "-// 0-10 c++ broker doesn't implement  wackhy exchanges",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testDefaultExchanges",
                "-",
                "-// 0-10 c++ broker in cpp.testprofile is started with no auth so won't pass this test",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testPasswordFailureConnection",
                "-",
                " // InVM Broker tests",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 2c5f14785f..248aba9a6d 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -74,4 +74,3 @@ org.apache.qpid.systest.MessageCompressionTest#*",
                " org.apache.qpid.test.unit.client.connection.ConnectionFactoryTest#*",
                "-// Specifically testing the 0-x Connection",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#*",
                "+",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 26548162c6..c89f81221f 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -33,12 +33,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQu",
                "-// Tests 0.10 client feature",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testUnsupportedSASLMechanism",
                "-",
                "-// Verification of unique client id is 0-10 specific",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testClientIDVerificationForSameUser",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testClientIDVerificationForDifferentUsers",
                "-",
                "-// QPID-3396",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testExceptionWhenUserPassIsRequired",
                "-",
                " # Exclude the JMS 2.0 test suite"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16d2ece75a5cbf286c9cae56741fb62af2a0cc0a"
                ],
                [
                    "no-tag",
                    "851ca949ce36225107588d464acb32056c60a60f"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: connect, client, amqp, connection",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "588c65f77406318c1884cf0aed37bf74f1f495ae",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516524495,
            "hunks": 11,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x client specific test failover to client suite",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index ba925a17f3..5636a05f29 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -62,7 +62,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                " org.apache.qpid.server.store.StoreOverfullTest#*",
                "-// 0-8/0-9/0-9-1 and/or Qpid Broker-J specific failover tests related to the above Producer Flow Control mechanisms",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "@@ -85,5 +80,2 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "@@ -100,4 +92,2 @@ org.apache.qpid.systest.rest.acl.*",
                "-// Exclude failover tests requiring virtual host functionality",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "diff --git a/test-profiles/ExternalBrokerTests b/test-profiles/ExternalBrokerTests",
                "index 1abe0e6d62..969b9272a7 100644",
                "--- a/test-profiles/ExternalBrokerTests",
                "+++ b/test-profiles/ExternalBrokerTests",
                "@@ -19,10 +19 @@",
                "-#These tests use external spawned brokers",
                "-",
                "-#=============================",
                "-# In the java-mms.0-10 profile",
                "-#=============================",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-org.apache.qpid.test.client.failover.FailoverTest#*",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index dace6ea3a8..30176f1119 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -23,5 +23,2 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsing",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "@@ -34,15 +31,4 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                "-// These tests test the behaviour of 0-8..-0-9-1 specific system property qpid.failover_method_timeout",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutExpires",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-",
                " org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091",
                "-// QPID-6722: Race client side means that session close can end in exception when failover is in progress.",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testConnectionCloseInterruptsFailover",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testConnectionCloseInterruptsFailover",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index d52d70ec41..4b385c174e 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -22,8 +22,2 @@ org.apache.qpid.jndi.PropertiesFileInitialContextFactoryTest#*",
                "-// Exclude Address based tests",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent",
                "@@ -52,9 +46,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                "-// Failover tests are tests of the 0-x client behaviour",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#*",
                "-org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-org.apache.qpid.test.client.failover.FailoverTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index c89f81221f..538a93ed1b 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -26,5 +26,2 @@ org.apache.qpid.test.client.message.JMSDestinationTest#testReceiveResend",
                "-// The new addressing based syntax is not supported for AMQP 0-8/0-9 versions",
                "-org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-",
                " // Those tests are written against the 0.10 path",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index d4052deace..f397a12b05 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -36,5 +36 @@ org.apache.qpid.systest.rest.VirtualHostNodeRestTest#testCreateAndDeleteVirtualH",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOnFailover",
                "-org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.server.failover.FailoverMethodTest#testNoFailover",
                "-"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/ExternalBrokerTests",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "799247db22b5bb77001f09299ca3da698e2f9b5d"
                ],
                [
                    "no-tag",
                    "c793b7276c13a9a06e5269932480652bcfa68565"
                ],
                [
                    "no-tag",
                    "b6934dfcbc07c9f2ddd9c79e5a07c1d2245df3f4"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48fb97c6f99c615fea46e6f6506d78ce27184315",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515799967,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x HeartbeatTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 5c197e73b1..50fadaf67a 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -104,6 +104,2 @@ org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-// QPID-2796 : JMS client for AMQP 0-10 only sends heartbeats in response to heartbeats from the server, not timeout based",
                "-org.apache.qpid.client.HeartbeatTest#testUnidirectionalHeartbeating",
                "-org.apache.qpid.client.HeartbeatTest#testHeartbeatsEnabledBrokerSide",
                "-",
                " // CPP Broker does not timeout connections with no activity like the Qpid Broker-J",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index be9a0b985c..64957e3c89 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -28,5 +28,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// This test mainly covers the AMQP 0-x client's heartbeating implementation",
                "-org.apache.qpid.client.HeartbeatTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "588f2ca7fecc37a11e8671c9eb58beed9bfb129a"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0904d6691a0599de0f2f679439bfc4ccadb5d8a5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515104467,
            "hunks": 47,
            "message": "QPID-6933: [System Tests] Refactor TLS tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "index 39707eb6f4..7f789c635a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "@@ -31,2 +31,3 @@ import java.util.TreeMap;",
                " import javax.jms.BytesMessage;",
                "+import javax.jms.Destination;",
                " import javax.jms.JMSException;",
                "@@ -44,9 +45,16 @@ import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import org.apache.qpid.server.model.Protocol;",
                "+",
                " public class AmqpManagementFacade",
                " {",
                "+    private static final String AMQP_0_X_REPLY_TO_DESTINATION = \"ADDR:!response\";",
                "+    private static final String AMQP_0_X_CONSUMER_REPLY_DESTINATION =",
                "+            \"ADDR:$management ; {assert : never, node: { type: queue }, link:{name: \\\"!response\\\"}}\";",
                "     private final String _managementAddress;",
                "+    private final Protocol _protocol;",
                "-    public AmqpManagementFacade(final String managementAddress)",
                "+    public AmqpManagementFacade(final Protocol protocol)",
                "     {",
                "-        _managementAddress = managementAddress;",
                "+        _managementAddress = protocol == Protocol.AMQP_1_0 ? \"$management\" : \"ADDR:$management\";",
                "+        _protocol = protocol;",
                "     }",
                "@@ -84,2 +92,92 @@ public class AmqpManagementFacade",
                "+    public Map<String, Object> createEntityAndAssertResponse(final String name,",
                "+                                            final String type,",
                "+                                            final Map<String, Object> attributes,",
                "+                                            final Session session)",
                "+            throws JMSException",
                "+    {",
                "+        Destination replyToDestination;",
                "+        Destination replyConsumerDestination;",
                "+        if (_protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            replyToDestination = session.createTemporaryQueue();",
                "+            replyConsumerDestination = replyToDestination;",
                "+        }",
                "+        else",
                "+        {",
                "+            replyToDestination = session.createQueue(AMQP_0_X_REPLY_TO_DESTINATION);",
                "+            replyConsumerDestination = session.createQueue(AMQP_0_X_CONSUMER_REPLY_DESTINATION);",
                "+        }",
                "+",
                "+        MessageConsumer consumer = session.createConsumer(replyConsumerDestination);",
                "+",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "+",
                "+        MapMessage createMessage = session.createMapMessage();",
                "+        createMessage.setStringProperty(\"type\", type);",
                "+        createMessage.setStringProperty(\"operation\", \"CREATE\");",
                "+        createMessage.setString(\"name\", name);",
                "+        createMessage.setString(\"object-path\", name);",
                "+        createMessage.setJMSReplyTo(replyToDestination);",
                "+        for (Map.Entry<String, Object> entry : attributes.entrySet())",
                "+        {",
                "+            createMessage.setObject(entry.getKey(), entry.getValue());",
                "+        }",
                "+        producer.send(createMessage);",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+        producer.close();",
                "+",
                "+        Message response = consumer.receive(5000);",
                "+        try",
                "+        {",
                "+            if (response != null)",
                "+            {",
                "+                int statusCode = response.getIntProperty(\"statusCode\");",
                "+                if (statusCode == 201)",
                "+                {",
                "+                    if (response instanceof MapMessage)",
                "+                    {",
                "+                        MapMessage bodyMap = (MapMessage) response;",
                "+                        Map<String, Object> result = new HashMap<>();",
                "+                        Enumeration keys = bodyMap.getMapNames();",
                "+                        while (keys.hasMoreElements())",
                "+                        {",
                "+                            final String key = String.valueOf(keys.nextElement());",
                "+                            Object value = bodyMap.getObject(key);",
                "+                            result.put(key, value);",
                "+                        }",
                "+                        return result;",
                "+                    }",
                "+                    else if (response instanceof ObjectMessage)",
                "+                    {",
                "+                        Object body = ((ObjectMessage) response).getObject();",
                "+                        if (body instanceof Map)",
                "+                        {",
                "+                            @SuppressWarnings(\"unchecked\")",
                "+                            Map<String, Object> bodyMap = (Map<String, Object>) body;",
                "+                            return new HashMap<>(bodyMap);",
                "+                        }",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    throw new OperationUnsuccessfulException(response.getStringProperty(\"statusDescription\"), statusCode);",
                "+                }",
                "+            }",
                "+",
                "+            throw new IllegalArgumentException(\"Cannot parse the results from a management query\");",
                "+        }",
                "+        finally",
                "+        {",
                "+            consumer.close();",
                "+            if (_protocol == Protocol.AMQP_1_0)",
                "+            {",
                "+                ((TemporaryQueue) replyToDestination).delete();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     public void updateEntityUsingAmqpManagement(final String name,",
                "@@ -134,5 +232,19 @@ public class AmqpManagementFacade",
                "     {",
                "+        Destination replyToDestination;",
                "+        Destination replyConsumerDestination;",
                "+        if (_protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            replyToDestination = session.createTemporaryQueue();",
                "+            replyConsumerDestination = replyToDestination;",
                "+        }",
                "+        else",
                "+        {",
                "+            replyToDestination = session.createQueue(AMQP_0_X_REPLY_TO_DESTINATION);",
                "+            replyConsumerDestination = session.createQueue(AMQP_0_X_CONSUMER_REPLY_DESTINATION);",
                "+        }",
                "+",
                "+        MessageConsumer consumer = session.createConsumer(replyConsumerDestination);",
                "+",
                "         MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "-        final TemporaryQueue responseQ = session.createTemporaryQueue();",
                "-        MessageConsumer consumer = session.createConsumer(responseQ);",
                "+",
                "         MapMessage opMessage = session.createMapMessage();",
                "@@ -141,3 +253,3 @@ public class AmqpManagementFacade",
                "         opMessage.setStringProperty(\"index\", \"object-path\");",
                "-        opMessage.setJMSReplyTo(responseQ);",
                "+        opMessage.setJMSReplyTo(replyToDestination);",
                "@@ -181,3 +293,3 @@ public class AmqpManagementFacade",
                "             {",
                "-                throw new OperationUnsuccessfulException(statusCode);",
                "+                throw new OperationUnsuccessfulException(response.getStringProperty(\"statusDescription\"), statusCode);",
                "             }",
                "@@ -223,3 +335,6 @@ public class AmqpManagementFacade",
                "             consumer.close();",
                "-            responseQ.delete();",
                "+            if(_protocol == Protocol.AMQP_1_0)",
                "+            {",
                "+                ((TemporaryQueue)replyToDestination).delete();",
                "+            }",
                "         }",
                "@@ -230,5 +345,16 @@ public class AmqpManagementFacade",
                "     {",
                "-        MessageProducer producer = session.createProducer(session.createQueue(\"$management\"));",
                "-        final TemporaryQueue responseQ = session.createTemporaryQueue();",
                "-        MessageConsumer consumer = session.createConsumer(responseQ);",
                "+        Destination replyToDestination;",
                "+        Destination replyConsumerDestination;",
                "+        if(_protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            replyToDestination = session.createTemporaryQueue();",
                "+            replyConsumerDestination = replyToDestination;",
                "+        }",
                "+        else",
                "+        {",
                "+            replyToDestination = session.createQueue(AMQP_0_X_REPLY_TO_DESTINATION);",
                "+            replyConsumerDestination = session.createQueue(AMQP_0_X_CONSUMER_REPLY_DESTINATION);",
                "+        }",
                "+",
                "+        MessageConsumer consumer = session.createConsumer(replyConsumerDestination);",
                "         MapMessage message = session.createMapMessage();",
                "@@ -239,4 +365,5 @@ public class AmqpManagementFacade",
                "         message.setString(\"attributeNames\", \"[]\");",
                "-        message.setJMSReplyTo(responseQ);",
                "+        message.setJMSReplyTo(replyToDestination);",
                "+        MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "         producer.send(message);",
                "@@ -269,3 +396,6 @@ public class AmqpManagementFacade",
                "             consumer.close();",
                "-            responseQ.delete();",
                "+            if(_protocol == Protocol.AMQP_1_0)",
                "+            {",
                "+                ((TemporaryQueue)replyToDestination).delete();",
                "+            }",
                "         }",
                "@@ -278,6 +408,19 @@ public class AmqpManagementFacade",
                "     {",
                "+        Destination replyToDestination;",
                "+        Destination replyConsumerDestination;",
                "+        if(_protocol == Protocol.AMQP_1_0)",
                "+        {",
                "+            replyToDestination = session.createTemporaryQueue();",
                "+            replyConsumerDestination = replyToDestination;",
                "+        }",
                "+        else",
                "+        {",
                "+            replyToDestination = session.createQueue(AMQP_0_X_REPLY_TO_DESTINATION);",
                "+            replyConsumerDestination = session.createQueue(AMQP_0_X_CONSUMER_REPLY_DESTINATION);",
                "+        }",
                "+",
                "+        MessageConsumer consumer = session.createConsumer(replyConsumerDestination);",
                "+",
                "         MessageProducer producer = session.createProducer(session.createQueue(_managementAddress));",
                "-        final TemporaryQueue responseQueue = session.createTemporaryQueue();",
                "-        MessageConsumer consumer = session.createConsumer(responseQueue);",
                "@@ -291,3 +434,3 @@ public class AmqpManagementFacade",
                "         request.setBooleanProperty(\"actuals\", actuals);",
                "-        request.setJMSReplyTo(responseQueue);",
                "+        request.setJMSReplyTo(replyToDestination);",
                "@@ -310,2 +453,3 @@ public class AmqpManagementFacade",
                "                 Map<String, Object> data = new HashMap<>();",
                "+                @SuppressWarnings(\"unchecked\")",
                "                 Enumeration<String> keys = bodyMap.getMapNames();",
                "@@ -323,2 +467,3 @@ public class AmqpManagementFacade",
                "                 {",
                "+                    @SuppressWarnings(\"unchecked\")",
                "                     Map<String, ?> bodyMap = (Map<String, ?>) body;",
                "@@ -335,3 +480,6 @@ public class AmqpManagementFacade",
                "             consumer.close();",
                "-            responseQueue.delete();",
                "+            if(_protocol == Protocol.AMQP_1_0)",
                "+            {",
                "+                ((TemporaryQueue)replyToDestination).delete();",
                "+            }",
                "         }",
                "@@ -349,3 +497,3 @@ public class AmqpManagementFacade",
                "                                                                 arguments);",
                "-",
                "+        @SuppressWarnings(\"unchecked\")",
                "         Map<String, Object> statisticsMap = (Map<String, Object>) statistics;",
                "@@ -404,5 +552,5 @@ public class AmqpManagementFacade",
                "-        private OperationUnsuccessfulException(final int statusCode)",
                "+        private OperationUnsuccessfulException(final String message, final int statusCode)",
                "         {",
                "-            super();",
                "+            super(message == null ? String.format(\"Unexpected status code %d\", statusCode): message);",
                "             _statusCode = statusCode;",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 92454e9be3..e0bb609e59 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -51,2 +51,8 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setDeserializationPolicyBlackList(String blackList);",
                "+    ConnectionBuilder setKeyStoreLocation(String keyStoreLocation);",
                "+    ConnectionBuilder setKeyStorePassword(String keyStorePassword);",
                "+    ConnectionBuilder setTrustStoreLocation(String trustStoreLocation);",
                "+    ConnectionBuilder setTrustStorePassword(String trustStorePassword);",
                "+    ConnectionBuilder setVerifyHostName(boolean verifyHostName);",
                "+    ConnectionBuilder setKeyAlias(String alias);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index a5c9553a86..c94ed67b8b 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -28,2 +28,3 @@ import java.util.Arrays;",
                " import java.util.Collections;",
                "+import java.util.List;",
                " import java.util.Map;",
                "@@ -57,5 +58,6 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        if (\"1.0\".equals(System.getProperty(\"broker.version\", \"1.0\")))",
                "+        Protocol protocol = getProtocol();",
                "+        _managementFacade = new AmqpManagementFacade(protocol);",
                "+        if (protocol == Protocol.AMQP_1_0)",
                "         {",
                "-            _managementFacade = new AmqpManagementFacade(\"$management\");",
                "             _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "@@ -64,3 +66,2 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "         {",
                "-            _managementFacade = new AmqpManagementFacade(\"ADDR:$management\");",
                "             _jmsProvider = new QpidJmsClient0xProvider();",
                "@@ -121,3 +122,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "-    protected long getReceiveTimeout()",
                "+    protected static long getReceiveTimeout()",
                "     {",
                "@@ -238,3 +239,4 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "-    protected Map<String, Object> readEntityUsingAmqpManagement(String type, String name, boolean actuals) throws Exception",
                "+    protected Map<String, Object> readEntityUsingAmqpManagement(String name, String type, boolean actuals)",
                "+            throws Exception",
                "     {",
                "@@ -244,11 +246,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "-            try",
                "-            {",
                "-                return _managementFacade.readEntityUsingAmqpManagement(session, type, name, actuals);",
                "-            }",
                "-            finally",
                "-            {",
                "-                session.close();",
                "-            }",
                "+            return readEntityUsingAmqpManagement(name, type, actuals, connection);",
                "         }",
                "@@ -260,2 +254,49 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "+    protected Map<String, Object> readEntityUsingAmqpManagement(final String name,",
                "+                                                                final String type,",
                "+                                                                final boolean actuals,",
                "+                                                                final Connection connection)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            return _managementFacade.readEntityUsingAmqpManagement(session, type, name, actuals);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected List<Map<String, Object>> queryEntitiesUsingAmqpManagement(final String type, final Connection connection)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            return _managementFacade.managementQueryObjects(session, type);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected Map<String, Object> createEntity(final String entityName,",
                "+                                               final String entityType,",
                "+                                               final Map<String, Object> attributes, final Connection connection)",
                "+            throws Exception",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            return _managementFacade.createEntityAndAssertResponse(entityName, entityType, attributes, session);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "     protected TopicConnection getTopicConnection() throws JMSException, NamingException",
                "@@ -265,5 +306,7 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "-    public Protocol getProtocol()",
                "+    protected static Protocol getProtocol()",
                "     {",
                "-        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\").replace('-', '_').replace('.', '_'));",
                "+        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\")",
                "+                                                .replace('-', '_')",
                "+                                                .replace('.', '_'));",
                "     }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index eeb82ac90e..539f12e125 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -22,2 +22,5 @@ package org.apache.qpid.systests;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.URLEncoder;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.Hashtable;",
                "@@ -46,2 +49,8 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     private int _sslPort;",
                "+    private String _keyStoreLocation;",
                "+    private String _keyStorePassword;",
                "+    private String _trustStoreLocation;",
                "+    private String _trustStorePassword;",
                "+    private Boolean _verifyHostName;",
                "+    private String _keyAlias;",
                "@@ -180,2 +189,44 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setKeyStoreLocation(final String keyStoreLocation)",
                "+    {",
                "+        _keyStoreLocation = keyStoreLocation;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setKeyStorePassword(final String keyStorePassword)",
                "+    {",
                "+        _keyStorePassword = keyStorePassword;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTrustStoreLocation(final String trustStoreLocation)",
                "+    {",
                "+        _trustStoreLocation = trustStoreLocation;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTrustStorePassword(final String trustStorePassword)",
                "+    {",
                "+        _trustStorePassword = trustStorePassword;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setVerifyHostName(final boolean verifyHostName)",
                "+    {",
                "+        _verifyHostName = verifyHostName;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setKeyAlias(final String alias)",
                "+    {",
                "+        _keyAlias = alias;",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -226,2 +277,26 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             cUrlBuilder.append(_sslPort).append(\"?ssl='true'\");",
                "+            if (_keyStoreLocation != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&key_store='\").append(encodePathOption(_keyStoreLocation)).append('\\'');",
                "+            }",
                "+            if (_keyStorePassword != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&key_store_password='\").append(_keyStorePassword).append('\\'');",
                "+            }",
                "+            if (_trustStoreLocation != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&trust_store='\").append(encodePathOption(_trustStoreLocation)).append('\\'');",
                "+            }",
                "+            if (_trustStorePassword != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&trust_store_password='\").append(_trustStorePassword).append('\\'');",
                "+            }",
                "+            if (_verifyHostName != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&ssl_verify_hostname='\").append(_verifyHostName).append('\\'');",
                "+            }",
                "+            if (_keyAlias != null)",
                "+            {",
                "+                cUrlBuilder.append(\"&ssl_cert_alias='\").append(_keyAlias).append('\\'');",
                "+            }",
                "         }",
                "@@ -274,5 +349,13 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "-    String getBrokerDetails()",
                "+    private String encodePathOption(final String canonicalPath)",
                "     {",
                "-        return \"tcp://\" + _host + \":\" + _port;",
                "+        try",
                "+        {",
                "+            return URLEncoder.encode(URLEncoder.encode(canonicalPath, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\"),",
                "+                                     StandardCharsets.UTF_8.name());",
                "+        }",
                "+        catch (UnsupportedEncodingException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 2db1746875..9adf0fafd1 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -194,2 +194,44 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setKeyStoreLocation(final String keyStoreLocation)",
                "+    {",
                "+        _options.put(\"transport.keyStoreLocation\", keyStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setKeyStorePassword(final String keyStorePassword)",
                "+    {",
                "+        _options.put(\"transport.keyStorePassword\", keyStorePassword);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTrustStoreLocation(final String trustStoreLocation)",
                "+    {",
                "+        _options.put(\"transport.trustStoreLocation\", trustStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setTrustStorePassword(final String trustStorePassword)",
                "+    {",
                "+        _options.put(\"transport.trustStorePassword\", trustStorePassword);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setVerifyHostName(final boolean verifyHostName)",
                "+    {",
                "+        _options.put(\"transport.verifyHost\", verifyHostName);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setKeyAlias(final String alias)",
                "+    {",
                "+        _options.put(\"transport.keyAlias\", alias);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index b853c1f3ac..cc07920086 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -106,2 +106,26 @@",
                "             </plugin>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>copy-test-profile-resources</id>",
                "+                        <phase>generate-resources</phase>",
                "+                        <goals>",
                "+                            <goal>copy-resources</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <outputDirectory>${java.io.tmpdir}</outputDirectory>",
                "+                            <resources>",
                "+                                <resource>",
                "+                                    <directory>${project.basedir}/../..</directory>",
                "+                                    <includes>",
                "+                                        <include>test-profiles/</include>",
                "+                                    </includes>",
                "+                                </resource>",
                "+                            </resources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "         </plugins>",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index c1a59a9b79..8d0f750630 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -134,7 +134,2 @@ org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                "-// Uses Qpid Broker-J specific configuration",
                "-org.apache.qpid.client.ssl.SSLTest#testClientCertMissingWhilstWanting",
                "-org.apache.qpid.client.ssl.SSLTest#testCreateSSLandTCPonSamePort",
                "-",
                "-",
                " // QPID-2796 : JMS client for AMQP 0-10 only sends heartbeats in response to heartbeats from the server, not timeout based",
                "diff --git a/test-profiles/Excludes b/test-profiles/Excludes",
                "index 7a6089004e..4a2bdfcc0c 100644",
                "--- a/test-profiles/Excludes",
                "+++ b/test-profiles/Excludes",
                "@@ -18,3 +18 @@",
                " //",
                "-",
                "-org.apache.qpid.client.ssl.SSLTest#testVerifyLocalHostLocalDomain",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index c7711a32ec..eb7f81fba2 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -109,18 +109,2 @@ org.apache.qpid.server.logging.ConsumerLoggingTest#testSubscriptionCreateDurable",
                "-// Qpid JMS Client does not accept key material in forms apart from JKS and PKCS",
                "-org.apache.qpid.client.ssl.SSLTest#testCreateSSLConnectionWithCertificateTrust",
                "-org.apache.qpid.client.ssl.SSLTest#testCreateSSLWithCertFileAndPrivateKey",
                "-// Test requires modification of javax.net.ssl system properties but Qpid JMS Client reads them only once",
                "-org.apache.qpid.client.ssl.SSLTest#testCreateSSLConnectionUsingSystemProperties",
                "-org.apache.qpid.client.ssl.SSLTest#testSslConnectionOption",
                "-org.apache.qpid.client.ssl.SSLTest#testVerifyLocalHost",
                "-org.apache.qpid.server.security.auth.manager.MultipleAuthenticationManagersTest#testMultipleAuthenticationManagers",
                "-// Test framework does not allow us to override hostname",
                "-org.apache.qpid.client.ssl.SSLTest#testHostVerificationIsOnByDefault",
                "-org.apache.qpid.client.ssl.SSLTest#testVerifyHostNameWithIncorrectHostname",
                "-// 0-x client specific feature",
                "-org.apache.qpid.client.ssl.SSLTest#testSslConnectionOptionOverridesBrokerlistOption",
                "-/ Test is 0-10 specific",
                "-org.apache.qpid.client.ssl.SSLTest#testMultipleCertsInSingleStore",
                "-",
                " // Tests assume BURL and/or Connection URL formats",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 7c78ca50e8..42f007d812 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -46,5 +46,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQu",
                "-// Makes explicit use of 0-10 connection object",
                "-org.apache.qpid.client.ssl.SSLTest#testMultipleCertsInSingleStore",
                "-",
                " // Tests 0.10 client feature",
                "diff --git a/test-profiles/cpp.ssl.excludes b/test-profiles/cpp.ssl.excludes",
                "index c2e8cfe7ac..bfb2d309c7 100644",
                "--- a/test-profiles/cpp.ssl.excludes",
                "+++ b/test-profiles/cpp.ssl.excludes",
                "@@ -19,5 +19,2 @@",
                "-//This test does not supply a client keystore, therefore it cant login to the C++ broker",
                "-//in this test profile as it demands client certificate authentication",
                "-org.apache.qpid.client.ssl.SSLTest#testCreateSSLConnectionUsingConnectionURLParamsTrustStoreOnly"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-jms_1.1/pom.xml",
                "test-profiles/CPPExcludes",
                "test-profiles/Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes",
                "test-profiles/cpp.ssl.excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/AmqpManagementFacade.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connect, client, amqp, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "61389ed54cf1dca3548d4ad2c9450b6232db248a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515111229,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Refactor AMQP 1-0 JMS routing tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 4d8fe5c1dc..09e7152690 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -177,4 +177,2 @@ org.apache.qpid.test.unit.message.UTF8Test#*",
                "-# Tests AMQP 1.0 specific routing semantics",
                "-org.apache.qpid.systest.MessageRoutingTest#*",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index db3316ca6a..e95fbee7d8 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -64,3 +64 @@ org.apache.qpid.tests.protocol.v1_0.*",
                "-// Tests AMQP 1.0 specific routing semantics",
                "-org.apache.qpid.systest.MessageRoutingTest#*",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 42f007d812..f27acda263 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -62,5 +62,2 @@ org.apache.qpid.tests.protocol.v1_0.*",
                "-// Tests AMQP 1.0 specific routing semantics",
                "-org.apache.qpid.systest.MessageRoutingTest#*",
                "-",
                " // QPID-7948: A publish confirms defect prevents this test passing."
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c6cde241692c8840ad2c36e6ce4645be60d8adb7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516800119,
            "hunks": 8,
            "message": "QPID-8032 : [Broker-J] Address review comments",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index b224fa6352..e2211dd690 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -47,2 +47,3 @@ import java.util.Collection;",
                " import java.util.Collections;",
                "+import java.util.Deque;",
                " import java.util.HashMap;",
                "@@ -50,3 +51,2 @@ import java.util.HashSet;",
                " import java.util.Iterator;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -57,2 +57,3 @@ import java.util.UUID;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentLinkedDeque;",
                " import java.util.concurrent.ConcurrentSkipListMap;",
                "@@ -111,2 +112,3 @@ public class ServerSession extends SessionInvoker",
                "     private final Set<Object> _blockingEntities = Collections.synchronizedSet(new HashSet<>());",
                "+    private final Deque<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedDeque<>();",
                "@@ -1598,4 +1600,2 @@ public class ServerSession extends SessionInvoker",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "-",
                "     public void completeAsyncCommands()",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index c0e33894b7..d0597c1d7b 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -35,3 +35,2 @@ import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -40,2 +39,3 @@ import java.util.Set;",
                " import java.util.UUID;",
                "+import java.util.concurrent.ConcurrentLinkedQueue;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -158,3 +158,3 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    private final LinkedList<AsyncCommand> _unfinishedCommandsQueue = new LinkedList<AsyncCommand>();",
                "+    private final java.util.Queue<AsyncCommand> _unfinishedCommandsQueue = new ConcurrentLinkedQueue<>();"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5fa398cfc2141d6ec090df3464f5bcbf63d7b023",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516103409,
            "hunks": 15,
            "message": "QPID-8079: [Broker-J] Ensure that actions associated with AsyncCommand are rolled back if the underlying future completes unsucessfully",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "index 1f65aa3962..32e3a6cf83 100755",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "@@ -214,3 +214,3 @@ public class AsyncAutoCommitTransaction implements ServerTransaction",
                "                 enqueueRecord = txn.enqueueMessage(queue, message);",
                "-                future = txn.commitTranAsync((Void) null);",
                "+                future = txn.commitTranAsync(null);",
                "                 txn = null;",
                "@@ -234,3 +234,3 @@ public class AsyncAutoCommitTransaction implements ServerTransaction",
                "                 {",
                "-                    underlying.postCommit(enqueueRecord);",
                "+                    underlying.onRollback();",
                "                 }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "new file mode 100644",
                "index 0000000000..29ce605360",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.qpid.server.txn;",
                "+",
                "+import java.util.concurrent.ExecutionException;",
                "+",
                "+import com.google.common.util.concurrent.ListenableFuture;",
                "+",
                "+import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "+",
                "+public class AsyncCommand",
                "+{",
                "+    private final ListenableFuture<Void> _future;",
                "+    private ServerTransaction.Action _action;",
                "+",
                "+    public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "+    {",
                "+        _future = future;",
                "+        _action = action;",
                "+    }",
                "+",
                "+    public void complete()",
                "+    {",
                "+        boolean interrupted = false;",
                "+        boolean success = false;",
                "+        try",
                "+        {",
                "+            while (true)",
                "+            {",
                "+                try",
                "+                {",
                "+                    _future.get();",
                "+                    break;",
                "+                }",
                "+                catch (InterruptedException e)",
                "+                {",
                "+                    interrupted = true;",
                "+                }",
                "+",
                "+            }",
                "+            success = true;",
                "+        }",
                "+        catch(ExecutionException e)",
                "+        {",
                "+            if(e.getCause() instanceof RuntimeException)",
                "+            {",
                "+                throw (RuntimeException)e.getCause();",
                "+            }",
                "+            else if(e.getCause() instanceof Error)",
                "+            {",
                "+                throw (Error) e.getCause();",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new ServerScopedRuntimeException(e.getCause());",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            if(interrupted)",
                "+            {",
                "+                Thread.currentThread().interrupt();",
                "+            }",
                "+            if (success)",
                "+            {",
                "+                _action.postCommit();",
                "+            }",
                "+            else",
                "+            {",
                "+                _action.onRollback();",
                "+            }",
                "+            _action = null;",
                "+        }",
                "+    }",
                "+",
                "+    public boolean isReadyForCompletion()",
                "+    {",
                "+        return _future.isDone();",
                "+    }",
                "+}",
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "index f2bb0cc9ab..b224fa6352 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "@@ -58,3 +58,2 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.ConcurrentSkipListMap;",
                "-import java.util.concurrent.ExecutionException;",
                " import java.util.concurrent.Semaphore;",
                "@@ -70,2 +69,3 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.logging.LogMessage;",
                "@@ -99,3 +99,2 @@ import org.apache.qpid.server.txn.UnknownDtxBranchException;",
                " import org.apache.qpid.server.util.Action;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -1638,61 +1637,2 @@ public class ServerSession extends SessionInvoker",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof Error)",
                "-                {",
                "-                    throw (Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-",
                "-        boolean isReadyForCompletion()",
                "-        {",
                "-            return _future.isDone();",
                "-        }",
                "-    }",
                "-",
                "     public void setModelObject(final Session_0_10 session)",
                "diff --git a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "index 34571cf0f9..c0e33894b7 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "+++ b/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "@@ -40,3 +40,2 @@ import java.util.Set;",
                " import java.util.UUID;",
                "-import java.util.concurrent.ExecutionException;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -98,2 +97,3 @@ import org.apache.qpid.server.transport.AMQPConnection;",
                " import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.LocalTransaction;",
                "@@ -101,3 +101,2 @@ import org.apache.qpid.server.txn.ServerTransaction;",
                " import org.apache.qpid.server.util.Action;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " import org.apache.qpid.server.virtualhost.MessageDestinationIsAlternateException;",
                "@@ -1640,56 +1639,2 @@ public class AMQChannel extends AbstractAMQPSession<AMQChannel, ConsumerTarget_0",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof Error)",
                "-                {",
                "-                    throw (Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index fe5c4dbad4..0512968e3f 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -35,3 +35,2 @@ import java.util.Objects;",
                " import java.util.Set;",
                "-import java.util.concurrent.ExecutionException;",
                "@@ -71,2 +70,3 @@ import org.apache.qpid.server.protocol.v1_0.type.transport.ReceiverSettleMode;",
                " import org.apache.qpid.server.txn.AsyncAutoCommitTransaction;",
                "+import org.apache.qpid.server.txn.AsyncCommand;",
                " import org.apache.qpid.server.txn.AutoCommitTransaction;",
                "@@ -74,3 +74,2 @@ import org.apache.qpid.server.txn.LocalTransaction;",
                " import org.apache.qpid.server.txn.ServerTransaction;",
                "-import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                "@@ -607,56 +606,2 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-    private static class AsyncCommand",
                "-    {",
                "-        private final ListenableFuture<Void> _future;",
                "-        private ServerTransaction.Action _action;",
                "-",
                "-        public AsyncCommand(final ListenableFuture<Void> future, final ServerTransaction.Action action)",
                "-        {",
                "-            _future = future;",
                "-            _action = action;",
                "-        }",
                "-",
                "-        void complete()",
                "-        {",
                "-            boolean interrupted = false;",
                "-            try",
                "-            {",
                "-                while (true)",
                "-                {",
                "-                    try",
                "-                    {",
                "-                        _future.get();",
                "-                        break;",
                "-                    }",
                "-                    catch (InterruptedException e)",
                "-                    {",
                "-                        interrupted = true;",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-            catch(ExecutionException e)",
                "-            {",
                "-                if(e.getCause() instanceof RuntimeException)",
                "-                {",
                "-                    throw (RuntimeException)e.getCause();",
                "-                }",
                "-                else if(e.getCause() instanceof java.lang.Error)",
                "-                {",
                "-                    throw (java.lang.Error) e.getCause();",
                "-                }",
                "-                else",
                "-                {",
                "-                    throw new ServerScopedRuntimeException(e.getCause());",
                "-                }",
                "-            }",
                "-            if(interrupted)",
                "-            {",
                "-                Thread.currentThread().interrupt();",
                "-            }",
                "-            _action.postCommit();",
                "-            _action = null;",
                "-        }",
                "-    }",
                "-",
                "     private static class PendingDispositionHolder"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java",
                "broker-core/src/main/java/org/apache/qpid/server/txn/AsyncCommand.java",
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8079": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java, broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSession.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8079",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e65b7367306eab3c76dc4cd4e3b7f9fb3cd69736",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515604224,
            "hunks": 8,
            "message": "QPID-6933: [System Tests] Remove JMS AMQP 0-x client specific tests moved into client system test module",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f89b2425ea..6f037e82a6 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -19,12 +19,2 @@",
                "-// QPID-3391: the C++ broker does not currently validate the exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithNonsenseArgs",
                "-",
                "-// QPID-3576: JMS client issue. MessageConsumer#close() time-out.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testDeleteOptions",
                "-",
                "-// Those tests are testing 0.8 specific semantics",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                "-",
                " // the 0-10 c++ broker does not implement the extended LVQ semantics which the Qpid Broker-J does",
                "@@ -46,5 +36,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                " org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-",
                "-// c++ broker doesn't support message bouncing",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index e95fbee7d8..555c25b328 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -20,9 +20,4 @@",
                " // Those tests are testing 0.8..-0-9-1 specific semantics",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-",
                "-// 0-10 protocol doesn't support message bouncing",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "@@ -36,6 +31,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// QPID-3392: the Qpid Broker-J does not yet implement exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithArgs",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testSessionCreateTopicWithExchangeArgs",
                "-",
                " // QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 40670d2e77..d9c92f902e 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -24,8 +24,4 @@ org.apache.qpid.jndi.PropertiesFileInitialContextFactoryTest#*",
                " org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#*",
                " // Exclude tests of AMQP 0-x features",
                "-org.apache.qpid.test.client.ImmediateAndMandatoryPublishingTest#*",
                "-org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                "-org.apache.qpid.server.exchange.ReturnUnroutableMandatoryMessageTest#*",
                " org.apache.qpid.server.queue.ModelTest#*",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 1b423a4e51..26548162c6 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -26,15 +26,2 @@ org.apache.qpid.test.client.message.JMSDestinationTest#testReceiveResend",
                "-//QPID-3422: test fails because ring queue is not implemented on Apache Qpid Broker-J",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testBrowseMode",
                "-//QPID-3392: the Apache Qpid Broker-J does not yet implement exchange creation arguments",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testCreateExchangeWithArgs",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testSessionCreateTopicWithExchangeArgs",
                "-//QPID-3678: zero capacity not supported in 0-9-1",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testZeroCapacityForSynchronousReceive",
                "-//QPID-6037: the 0-9-1 client takes the view that if you don't specify the node type but you ask for a JMS Topic",
                "-//           you want a topic behaviour.  The 0-10 client thinks you must want a queue.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSTopicIsTreatedAsQueueIn0_10",
                "-// QPID-7692: Receiving a message sent using a destination which has no subject fails when client is in BURL dest syntax mode.",
                "-org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSDestination_DestinationWithoutSubject",
                "-",
                " // The new addressing based syntax is not supported for AMQP 0-8/0-9 versions"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "667609be6186841d43af43fd88eb6172299667f8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516986003,
            "hunks": 4,
            "message": "QPID-8085: [Broker-J] Send flow in response to drain request even when credit is 0",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "index 0872eae10b..3b922e4a75 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "@@ -288,2 +288,7 @@ public abstract class AbstractReceivingLinkEndpoint<T extends BaseTarget> extend",
                "         setDeliveryCount(new SequenceNumber(flow.getDeliveryCount().intValue()));",
                "+",
                "+        if (Boolean.TRUE.equals(flow.getEcho()))",
                "+        {",
                "+            sendFlow();",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index b3131344b5..ab95a3275d 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -496,4 +496,13 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "         }",
                "+",
                "+        // send flow when echo=true or drain=true but link credit is zero",
                "+        boolean sendFlow = Boolean.TRUE.equals(flow.getEcho()) ||",
                "+                ( Boolean.TRUE.equals(flow.getDrain()) && getLinkCredit().equals(UnsignedInteger.ZERO));",
                "+",
                "         flowStateChanged();",
                "+        if (sendFlow)",
                "+        {",
                "+            sendFlow();",
                "+        }",
                "     }",
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "index 62045a6f56..9f4f0648ca 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java",
                "@@ -448,7 +448,2 @@ public class Session_1_0 extends AbstractAMQPSession<Session_1_0, ConsumerTarget",
                "                     endpoint.receiveFlow(flow);",
                "-",
                "-                    if (Boolean.TRUE.equals(flow.getEcho()))",
                "-                    {",
                "-                        endpoint.sendFlow();",
                "-                    }",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8085": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Session_1_0.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AbstractReceivingLinkEndpoint.java, broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8085",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b005f4d70eaa659af79da429ae9a734340f8868f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512082769,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J][AMQP 0-8..0-91] Add more queue protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "index 92b8894ced..e54fa9a505 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -29,2 +29,3 @@ import org.apache.qpid.server.protocol.v0_8.transport.QueueDeclareBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.QueueDeleteBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.QueuePurgeBody;",
                "@@ -46,2 +47,5 @@ public class QueueInteraction",
                "+    private String _purgeName;",
                "+    private boolean _purgeNowait;",
                "+",
                "     public QueueInteraction(final Interaction interaction)",
                "@@ -113,2 +117,14 @@ public class QueueInteraction",
                "     }",
                "+    public QueueInteraction purgeName(final String name)",
                "+    {",
                "+        _purgeName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction purge() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new QueuePurgeBody(0,",
                "+                                                                AMQShortString.valueOf(_purgeName),",
                "+                                                                _purgeNowait));",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "170b03cacf30fda105f075adec55e480871946bc"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "476589e4cc1df93987843f9233ea926cdbaf73d5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512472643,
            "hunks": 3,
            "message": "QPID-8047: [Broker-J][AMQP 0-10] Fix NPE on receiving session.detach for unknown session Only change fixing the issue is merged from master commit c37376a2a8e139893d5442266c7bcb218ab18ce8",
            "diff": [
                "diff --git a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "index cab769f1fb..43c3bf1c34 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "+++ b/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                "@@ -365,13 +365,27 @@ public class ServerConnectionDelegate extends MethodDelegate<ServerConnection> i",
                "     {",
                "-        stopAllSubscriptions(conn, dtc);",
                "-        ServerSession ssn = conn.getSession(dtc.getChannel());",
                "-        ssn.setClose(true);",
                "-        ssn.sessionDetached(dtc.getName(), ssn.getDetachCode() == null? SessionDetachCode.NORMAL: ssn.getDetachCode());",
                "-        conn.unmap(ssn);",
                "-        ssn.closed();",
                "+        int channel = dtc.getChannel();",
                "+        ServerSession ssn = conn.getSession(channel);",
                "+        if (ssn != null)",
                "+        {",
                "+            stopAllSubscriptions(ssn);",
                "+            ssn.setClose(true);",
                "+            ssn.sessionDetached(dtc.getName(),",
                "+                                ssn.getDetachCode() == null ? SessionDetachCode.NORMAL : ssn.getDetachCode());",
                "+            conn.unmap(ssn);",
                "+            ssn.closed();",
                "+        }",
                "+        else",
                "+        {",
                "+            if(LOGGER.isDebugEnabled())",
                "+            {",
                "+                LOGGER.debug(\"SessionDetach received on unattached channel : {}\", channel);",
                "+            }",
                "+            SessionDetached sessionDetached = new SessionDetached(dtc.getName(), SessionDetachCode.NOT_ATTACHED);",
                "+            sessionDetached.setChannel(channel);",
                "+            conn.invoke(sessionDetached);",
                "+        }",
                "     }",
                "-    private void stopAllSubscriptions(ServerConnection conn, SessionDetach dtc)",
                "+    private void stopAllSubscriptions(final ServerSession ssn)",
                "     {",
                "-        final ServerSession ssn = conn.getSession(dtc.getChannel());",
                "         final Collection<ConsumerTarget_0_10> subs = ssn.getSubscriptions();"
            ],
            "changed_files": [
                "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8047": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c37376a2a8e139893d5442266c7bcb218ab18ce8"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8047",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "93c1e0b8d04783c028d25e59fe69088cd039a263",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512600157,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J] [AMQP 0-8..0-91] Add more queue protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "index f62a4b346a..fedd481b48 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "@@ -111,2 +111,14 @@ public class ExchangeInteraction",
                "+    public ExchangeInteraction boundQueue(final String name)",
                "+    {",
                "+        _boundQueue = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction boundRoutingKey(final String routingKey)",
                "+    {",
                "+        _boundRoutingKey = routingKey;",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction bound() throws Exception",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "index 49ec8bfce2..cbf3a1a05a 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v0_8;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -97,2 +98,8 @@ public class QueueInteraction",
                "+    public QueueInteraction declareArguments(final Map<String,Object> args)",
                "+    {",
                "+        _declareArguments = args == null ? Collections.emptyMap() : new HashMap<>(args);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction declare() throws Exception"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "971fba301e50f95f827446ca921c4e37244dadbc"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "da92ba96d4fd0b048623ed3e1a28f67222bbad46",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514986310,
            "hunks": 3,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add tests related to protocol negotiation and oevrsized frames. (cherry picked from commit a9e61c16b742d266a9b75d54c18c76fcd9341c8a)",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index fc84389d43..5898cf6782 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -176,2 +176,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    @Override",
                "     public Interaction protocolHeader(byte[] header)",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "index cad8415d6b..91b0454b97 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "@@ -132,2 +132,7 @@ public abstract class AbstractFrameTransport<I extends AbstractInteraction<I>> i",
                "     ListenableFuture<Void> sendProtocolHeader(final byte[] bytes) throws Exception",
                "+    {",
                "+        return sendBytes(bytes);",
                "+    }",
                "+",
                "+    public ListenableFuture<Void> sendBytes(final byte[] bytes)",
                "     {",
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "index 4b41ca9221..2c977f3788 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java",
                "@@ -143,2 +143,4 @@ public abstract class AbstractInteraction<I extends AbstractInteraction<I>>",
                "+    public abstract I protocolHeader(final byte[] header);",
                "+",
                "     protected abstract byte[] getProtocolHeader();"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractFrameTransport.java",
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/AbstractInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a9e61c16b742d266a9b75d54c18c76fcd9341c8a"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, negotiation, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, port, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8f6800248d8949bf353ac4787492f4404db519ca",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515278055,
            "hunks": 1,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add connection protocol tests related to SASL. (cherry picked from commit cd13129adff47932b2e26e4a33a9bcba27c661ce)",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java",
                "new file mode 100644",
                "index 0000000000..5833599bc0",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol;",
                "+",
                "+import java.nio.charset.StandardCharsets;",
                "+",
                "+import javax.crypto.Mac;",
                "+import javax.crypto.spec.SecretKeySpec;",
                "+import javax.xml.bind.DatatypeConverter;",
                "+",
                "+public class SaslUtils",
                "+{",
                "+    public static byte[] generateCramMD5ClientResponse(String userName, String userPassword, byte[] challengeBytes)",
                "+            throws Exception",
                "+    {",
                "+        String macAlgorithm = \"HmacMD5\";",
                "+        Mac mac = Mac.getInstance(macAlgorithm);",
                "+        mac.init(new SecretKeySpec(userPassword.getBytes(StandardCharsets.UTF_8), macAlgorithm));",
                "+        final byte[] messageAuthenticationCode = mac.doFinal(challengeBytes);",
                "+        String responseAsString = userName + \" \" + DatatypeConverter.printHexBinary(messageAuthenticationCode)",
                "+                                                                    .toLowerCase();",
                "+        return responseAsString.getBytes();",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cd13129adff47932b2e26e4a33a9bcba27c661ce"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/SaslUtils.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: sasl, connection, connect, protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, sasl",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c8f854f14f655b377afce4df7a3ad28a6fc714c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512746717,
            "hunks": 6,
            "message": "QPID-8058: [Broker-J][AMQP 1.0] Fix draining of temporary message sources on management node (cherry picked from commit 97ebcc8ef5f0a84a42af5d2eede374d27f2e61c6) (cherry picked from commit 95d34b9224c8d5aab5bf55cabc721120994e42d6)",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "index 76d91af1e8..b703ec1144 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "@@ -167,2 +167,6 @@ public abstract class AbstractSystemMessageSource implements MessageSource",
                "             }",
                "+            else",
                "+            {",
                "+                _target.noMessagesAvailable();",
                "+            }",
                "             return null;",
                "diff --git a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java",
                "index 7a272fa5e4..0662ea5835 100644",
                "--- a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java",
                "+++ b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java",
                "@@ -95,2 +95,6 @@ class ManagementNodeConsumer<T extends ConsumerTarget> implements MessageInstanc",
                "         }",
                "+        else",
                "+        {",
                "+            _target.noMessagesAvailable();",
                "+        }",
                "         return null;",
                "diff --git a/systests/protocol-tests-amqp-1-0/pom.xml b/systests/protocol-tests-amqp-1-0/pom.xml",
                "index 35b1eb2bb6..56fc1f7f39 100644",
                "--- a/systests/protocol-tests-amqp-1-0/pom.xml",
                "+++ b/systests/protocol-tests-amqp-1-0/pom.xml",
                "@@ -47,3 +47,6 @@",
                "         </dependency>",
                "-",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-management-amqp</artifactId>",
                "+        </dependency>",
                "         <dependency>",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "index 6875460bb0..3b57431178 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "@@ -53,2 +53,3 @@ public interface BrokerAdmin extends Pluggable",
                "     boolean isQueueDepthSupported();",
                "+    boolean isManagementSupported();",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 68f0ab47a0..04e08a67e7 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -365,2 +365,8 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "+    @Override",
                "+    public boolean isManagementSupported()",
                "+    {",
                "+        return true;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "index e935067892..f359053366 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java",
                "@@ -133,2 +133,8 @@ public class ExternalQpidBrokerAdminImpl implements BrokerAdmin",
                "+    @Override",
                "+    public boolean isManagementSupported()",
                "+    {",
                "+        return false;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java",
                "systests/protocol-tests-amqp-1-0/pom.xml",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/BrokerAdmin.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/ExternalQpidBrokerAdminImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8058": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "97ebcc8ef5f0a84a42af5d2eede374d27f2e61c6"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/pom.xml, broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8058",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "99fa51f01cbd03e5712821bcdd782e59584c175f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515060809,
            "hunks": 17,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x/1.0]  Add heartbeating/idle tests to protocol suites",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "index d7b54b04b7..56d74988fb 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v0_10;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionHeartbeat;",
                " import org.apache.qpid.server.protocol.v0_10.transport.ConnectionOpen;",
                "@@ -35,2 +36,3 @@ public class ConnectionInteraction",
                "     private ConnectionOpen _open;",
                "+    private ConnectionHeartbeat _connectionHeartbeat;",
                "@@ -42,2 +44,3 @@ public class ConnectionInteraction",
                "         _open = new ConnectionOpen();",
                "+        _connectionHeartbeat = new ConnectionHeartbeat();",
                "     }",
                "@@ -71,2 +74,8 @@ public class ConnectionInteraction",
                "+    public ConnectionInteraction tuneOkHeartbeat(final int heartbeat)",
                "+    {",
                "+        _tuneOk.setHeartbeat(heartbeat);",
                "+        return this;",
                "+    }",
                "+",
                "     public ConnectionInteraction tuneOkMaxFrameSize(final int maxFrameSize)",
                "@@ -82,2 +91,7 @@ public class ConnectionInteraction",
                "     }",
                "+",
                "+    public Interaction heartbeat() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_connectionHeartbeat);",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "index 236c49ad0c..3c4943efd6 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "@@ -26,4 +26,6 @@ import java.util.Map;",
                "+import org.apache.qpid.server.protocol.ErrorCodes;",
                " import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                " import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ConnectionOpenBody;",
                "@@ -45,2 +47,7 @@ public class ConnectionInteraction",
                "+    private int _closeReplyCode = ErrorCodes.REPLY_SUCCESS;",
                "+    private String _closeReplyText;",
                "+    private int _closeClassId;",
                "+    private int _closeMethodId;",
                "+",
                "     public ConnectionInteraction(final Interaction interaction)",
                "@@ -108,2 +115,11 @@ public class ConnectionInteraction",
                "     }",
                "+",
                "+    public Interaction close() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ConnectionCloseBody(_interaction.getProtocolVersion(),",
                "+                                                                     _closeReplyCode,",
                "+                                                                     AMQShortString.valueOf(_closeReplyText),",
                "+                                                                     _closeClassId,",
                "+                                                                     _closeMethodId));",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "index fedd481b48..b35a1a9414 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "@@ -86,2 +86,8 @@ public class ExchangeInteraction",
                "+    public ExchangeInteraction declareNoWait(final boolean noWait)",
                "+    {",
                "+        _declareNoWait = noWait;",
                "+        return this;",
                "+    }",
                "+",
                "     public ExchangeInteraction declareArguments(final Map<String,Object> args)",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "index 5e89af8924..bb38fa028e 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v0_8;",
                "+import org.apache.qpid.server.protocol.ProtocolVersion;",
                " import org.apache.qpid.server.protocol.v0_8.transport.AMQBody;",
                "@@ -67,2 +68,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public ProtocolVersion getProtocolVersion()",
                "+    {",
                "+        return ((FrameTransport) getTransport()).getProtocolVersion();",
                "+    }",
                "+",
                "     public Interaction sendPerformative(final AMQBody amqBody) throws Exception",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "new file mode 100644",
                "index 0000000000..c233e2854a",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.tests.protocol.v1_0;",
                "+",
                "+import org.apache.qpid.tests.protocol.Response;",
                "+",
                "+public class EmptyResponse implements Response<EmptyResponse>",
                "+{",
                "+    @Override",
                "+    public EmptyResponse getBody()",
                "+    {",
                "+        return this;",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "index 0c94ad73a7..a8ab32eb52 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "@@ -243,2 +243,6 @@ public class FrameDecoder implements InputDecoder",
                "                 }",
                "+                else if (val == null)",
                "+                {",
                "+                    response = new EmptyResponse();",
                "+                }",
                "                 else",
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 7a372a7bf9..03f496a1dd 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -84,2 +84,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                " {",
                "+    private static final FrameBody EMPTY_FRAME = (channel, conn) -> {",
                "+        throw new UnsupportedOperationException();",
                "+    };",
                "+",
                "     private static final Set<String> CONTAINER_IDS = Collections.newSetFromMap(new ConcurrentHashMap<>());",
                "@@ -271,2 +275,8 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public Interaction openIdleTimeOut(final int idleTimeOut)",
                "+    {",
                "+        _open.setIdleTimeOut(UnsignedInteger.valueOf(idleTimeOut));",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction openProperties(final Map<Symbol, Object> properties)",
                "@@ -1073,2 +1083,12 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    ///////////",
                "+    // Empty //",
                "+    ///////////",
                "+",
                "+    public Interaction emptyFrame() throws Exception",
                "+    {",
                "+        sendPerformative(EMPTY_FRAME, UnsignedShort.ZERO);",
                "+        return this;",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c39cf075f6641466b263e7f4a0b06f97d449703e"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/EmptyResponse.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ConnectionInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java, systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/FrameDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7b4e3e8d59d263757f58664b775dcf55a927e360",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513015928,
            "hunks": 9,
            "message": "QPID-8038: [Broker-J] [AMQP 0-10] Add queue protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "index d63629095d..0679386f8e 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "@@ -40,2 +40,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     private ExecutionInteraction _executionInteraction;",
                "+    private QueueInteraction _queueInteraction;",
                "     private int _channelId;",
                "@@ -51,2 +52,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "         _txInteraction = new TxInteraction(this);",
                "+        _queueInteraction = new QueueInteraction(this);",
                "     }",
                "@@ -138,2 +140,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     }",
                "+",
                "+    public QueueInteraction queue()",
                "+    {",
                "+        return _queueInteraction;",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "index 4660c86941..4645d46d3d 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "@@ -25,2 +25,3 @@ import org.apache.qpid.server.protocol.v0_10.transport.MessageAcceptMode;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageAcquireMode;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageCancel;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageCreditUnit;",
                "@@ -36,2 +37,3 @@ public class MessageInteraction",
                "     private MessageSubscribe _subscribe;",
                "+    private MessageCancel _cancel;",
                "     private MessageFlow _flow;",
                "@@ -44,2 +46,3 @@ public class MessageInteraction",
                "         _subscribe = new MessageSubscribe();",
                "+        _cancel = new MessageCancel();",
                "         _flow = new MessageFlow();",
                "@@ -54,3 +57,3 @@ public class MessageInteraction",
                "-    public MessageInteraction transferDesitnation(final String destination)",
                "+    public MessageInteraction transferDestination(final String destination)",
                "     {",
                "@@ -83,2 +86,20 @@ public class MessageInteraction",
                "+    public MessageInteraction cancelId(final int id)",
                "+    {",
                "+        _cancel.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction cancelDestination(final String destination)",
                "+    {",
                "+        _cancel.setDestination(destination);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction cancel() throws Exception",
                "+    {",
                "+        _interaction.sendPerformative(_cancel);",
                "+        return _interaction;",
                "+    }",
                "+",
                "     public MessageInteraction subscribeDestination(final String destination)",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java",
                "new file mode 100644",
                "index 0000000000..7e15099126",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java",
                "@@ -0,0 +1,109 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.QueueDeclare;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.QueueDelete;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.TxCommit;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.TxSelect;",
                "+",
                "+public class QueueInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private final QueueDeclare _declare;",
                "+    private final QueueDelete _delete;",
                "+",
                "+    public QueueInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _declare = new QueueDeclare();",
                "+        _delete = new QueueDelete();",
                "+    }",
                "+",
                "+    public QueueInteraction declareQueue(final String queue)",
                "+    {",
                "+        _declare.setQueue(queue);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareId(final int id)",
                "+    {",
                "+        _declare.setId(id);",
                "+        return this;",
                "+    }",
                "+    public QueueInteraction declarePassive(final boolean passive)",
                "+    {",
                "+        _declare.setPassive(passive);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareDurable(final boolean durable)",
                "+    {",
                "+        _declare.setDurable(durable);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareAlternateExchange(final String alternateExchange)",
                "+    {",
                "+        _declare.setAlternateExchange(alternateExchange);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareExclusive(final boolean exclusive)",
                "+    {",
                "+        _declare.setExclusive(exclusive);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareAutoDelete(final boolean autoDelete)",
                "+    {",
                "+        _declare.setAutoDelete(autoDelete);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction declare() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_declare);",
                "+    }",
                "+",
                "+    public QueueInteraction deleteQueue(final String queueName)",
                "+    {",
                "+        _delete.setQueue(queueName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction deleteId(final int id)",
                "+    {",
                "+        _delete.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction deleteIfUnused(final boolean ifUnused)",
                "+    {",
                "+        _delete.ifUnused(ifUnused);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction delete() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_delete);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "562714536e68e06c01827a3e9217eb31ce0964ae",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516273588,
            "hunks": 2,
            "message": "QPID-8032: [Broker-J][AMQP 1.0] Fix defect in coalescing loop",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "index d6518b6535..a36a2764e4 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                "@@ -574,8 +574,4 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "-                    if (current.isSettled() == disposition.isSettled() &&",
                "-                        Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "-                    {",
                "-                        deliveryTags.add(disposition.getDeliveryTag());",
                "-                    }",
                "-                    else",
                "+                    if (current.isSettled() != disposition.isSettled() ||",
                "+                        !Objects.equals(current.getResultantState(), disposition.getResultantState()))",
                "                     {",
                "@@ -585,2 +581,3 @@ public class StandardReceivingLinkEndpoint extends AbstractReceivingLinkEndpoint",
                "                     }",
                "+                    deliveryTags.add(disposition.getDeliveryTag());",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/StandardReceivingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c49dc0f473c6e727caa1143cb155774607bc23a2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516985754,
            "hunks": 1,
            "message": "QPID-8085: [Broker-J][AMQP 1.0] Optimize the sending of flow performatives from broker sending link endpoint",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "index 4798815200..ebcaa60810 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                "@@ -472,3 +472,2 @@ class ConsumerTarget_1_0 extends AbstractConsumerTarget<ConsumerTarget_1_0>",
                "                             }",
                "-                            _linkEndpoint.sendFlowConditional();",
                "                         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8085": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: perform, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8085",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a627b2742a893c9873483dee7c4ad1cb7d8428cd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516745834,
            "hunks": 9,
            "message": "QPID-8032 : [Broker-J][AMQP 1.0] Add protocol tests for receiving of multiple messages",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "index 5898cf6782..0a9f882ba8 100644",
                "--- a/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                "@@ -30,3 +30,5 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collections;",
                "+import java.util.HashSet;",
                " import java.util.LinkedHashMap;",
                "@@ -874,2 +876,9 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+",
                "+    public Interaction dispositionLast(final UnsignedInteger last)",
                "+    {",
                "+        _disposition.setLast(last);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction dispositionFirstFromLatestDelivery()",
                "@@ -1042,6 +1051,6 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "-    public Interaction receiveDelivery() throws Exception",
                "+    public Interaction receiveDelivery(Class<?>... ignore) throws Exception",
                "     {",
                "         sync();",
                "-        _latestDelivery = receiveAllTransfers();",
                "+        _latestDelivery = receiveAllTransfers(ignore);",
                "         _latestDeliveryId = _latestDelivery.size() > 0 ? _latestDelivery.get(0).getDeliveryId() : null;",
                "@@ -1050,2 +1059,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "+    public UnsignedInteger getLatestDeliveryId()",
                "+    {",
                "+        return _latestDeliveryId;",
                "+    }",
                "+",
                "     public Interaction decodeLatestDelivery() throws AmqpErrorException",
                "@@ -1073,11 +1087,18 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "-    private List<Transfer> receiveAllTransfers() throws Exception",
                "+    private List<Transfer> receiveAllTransfers(final Class<?>... ignore) throws Exception",
                "     {",
                "         List<Transfer> transfers = new ArrayList<>();",
                "-        boolean hasMore;",
                "+        boolean hasMore = true;",
                "         do",
                "         {",
                "-            Transfer responseTransfer = consumeResponse().getLatestResponse(Transfer.class);",
                "-            hasMore = Boolean.TRUE.equals(responseTransfer.getMore());",
                "-            transfers.add(responseTransfer);",
                "+            Set<Class<?>> responseTypesSet = new HashSet<>(Arrays.asList(ignore));",
                "+            responseTypesSet.add(Transfer.class);",
                "+            Class<?>[] responseTypes = responseTypesSet.toArray(new Class<?>[responseTypesSet.size()]);",
                "+            Response<?> latestResponse = consumeResponse(responseTypes).getLatestResponse();",
                "+            if (latestResponse.getBody() instanceof Transfer)",
                "+            {",
                "+                Transfer responseTransfer = (Transfer) latestResponse.getBody();",
                "+                hasMore = Boolean.TRUE.equals(responseTransfer.getMore());",
                "+                transfers.add(responseTransfer);",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8032": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-1-0/src/main/java/org/apache/qpid/tests/protocol/v1_0/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8032",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c3a3f3a931df8969b2fec19f42dccc68e0000ae9",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511190421,
            "hunks": 10,
            "message": "QPID-8038: [Broker-J][AMQP 1.0] Improve 0-8 protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index 9ef66ecb1f..bf8c4eb27f 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -136,2 +136,4 @@ public class BasicInteraction",
                "         {",
                "+            final byte[] contentCopy = new byte[contentSize];",
                "+            System.arraycopy(_content, 0, contentCopy, 0, contentSize);",
                "             final int framePayloadMax = _interaction.getMaximumFrameSize() - 8;",
                "@@ -141,3 +143,3 @@ public class BasicInteraction",
                "                 int contentToCopyLength = Math.min(framePayloadMax, contentSize - offset);",
                "-                ContentBody contentBody = new ContentBody(ByteBuffer.wrap(_content, offset,",
                "+                ContentBody contentBody = new ContentBody(ByteBuffer.wrap(contentCopy, offset,",
                "                                                                           contentToCopyLength));",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "index 29e058c10d..35f4bf5f04 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                "@@ -34,2 +34,6 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     private int _maximumPayloadSize = 512;",
                "+    private ConnectionInteraction _connectionInteraction;",
                "+    private ChannelInteraction _channelInteraction;",
                "+    private QueueInteraction _queueInteraction;",
                "+    private BasicInteraction _basicInteraction;",
                "@@ -38,2 +42,6 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "         super(transport);",
                "+        _connectionInteraction = new ConnectionInteraction(this);",
                "+        _channelInteraction = new ChannelInteraction(this);",
                "+        _queueInteraction = new QueueInteraction(this);",
                "+        _basicInteraction = new BasicInteraction(this);",
                "     }",
                "@@ -54,3 +62,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        return sendPerformative(getChannelId(), amqBody);",
                "+        return sendPerformative(_channelId, amqBody);",
                "     }",
                "@@ -81,3 +89,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        return new ConnectionInteraction(this);",
                "+        return _connectionInteraction;",
                "     }",
                "@@ -86,3 +94,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        return new ChannelInteraction(this);",
                "+        return _channelInteraction;",
                "     }",
                "@@ -91,3 +99,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        return new QueueInteraction(this);",
                "+        return _queueInteraction;",
                "     }",
                "@@ -99,2 +107,8 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "+    public Interaction channelId(final int channelId)",
                "+    {",
                "+        _channelId = channelId;",
                "+        return this;",
                "+    }",
                "+",
                "     public int getMaximumFrameSize()",
                "@@ -106,3 +120,3 @@ public class Interaction extends org.apache.qpid.tests.protocol.Interaction<Inte",
                "     {",
                "-        return new BasicInteraction(this);",
                "+        return _basicInteraction;",
                "     }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/Interaction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f0c04045a65870ef13e5c3037619ff7452f550b4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512924519,
            "hunks": 9,
            "message": "QPID-8038: [Broker-J] [AMQP 0-8..0-91] Add rollback/mandatory/close-when-no-route tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index d5b4c62258..7f91d8dffc 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -176,2 +176,14 @@ public class BasicInteraction",
                "+    public BasicInteraction publishMandatory(final boolean mandatory)",
                "+    {",
                "+        _publishMandatory = mandatory;",
                "+        return this;",
                "+    }",
                "+",
                "+    public BasicInteraction publishImmediate(final boolean immediate)",
                "+    {",
                "+        _publishImmediate = immediate;",
                "+        return this;",
                "+    }",
                "+",
                "     public BasicInteraction qosPrefetchCount(final int prefetchCount)",
                "@@ -213,2 +225,8 @@ public class BasicInteraction",
                "+    public BasicInteraction consumeNoAck(final boolean noAck)",
                "+    {",
                "+        _consumeNoAck = noAck;",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction ack() throws Exception",
                "@@ -229,2 +247,3 @@ public class BasicInteraction",
                "     }",
                "+",
                "     public BasicInteraction consumeCancelTag(final String consumeCancelTag)",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "index 023e7fcb94..236c49ad0c 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v0_8;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -35,3 +36,3 @@ public class ConnectionInteraction",
                "-    private final Map<String, Object> _startOkClientProperties = new HashMap<>();",
                "+    private Map<String, Object> _startOkClientProperties = new HashMap<>();",
                "     private String _startOkMechanism;",
                "@@ -56,2 +57,7 @@ public class ConnectionInteraction",
                "+    public ConnectionInteraction startOkClientProperties(final Map<String, Object> clientProperties)",
                "+    {",
                "+        _startOkClientProperties = clientProperties == null ? Collections.emptyMap() : new HashMap<>(clientProperties);",
                "+        return this;",
                "+    }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "index 63a078ae65..ee89993119 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java",
                "@@ -23,3 +23,5 @@ package org.apache.qpid.tests.protocol.v0_8;",
                " import org.apache.qpid.server.protocol.v0_8.transport.TxCommitBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.TxRollbackBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.TxSelectBody;",
                "+import org.apache.qpid.tests.protocol.AbstractInteraction;",
                "@@ -43,2 +45,7 @@ public class TxInteraction",
                "     }",
                "+",
                "+    public Interaction rollback() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(TxRollbackBody.INSTANCE);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/TxInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ConnectionInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, connect, amqp, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "104a03d297705f26715fee54b3b1ac9f1853841c",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512374037,
            "hunks": 14,
            "message": "QPID-8038: [Broker-J][AMQP 0-8..0-91] Add exchange protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "index f4ed0a2880..92184805d2 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "@@ -27,3 +27,5 @@ import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                " import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ExchangeBoundBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ExchangeDeclareBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ExchangeDeleteBody;",
                "@@ -32,6 +34,6 @@ public class ExchangeInteraction",
                "     private Interaction _interaction;",
                "-    private String _decalreExchange = \"amq.direct\";",
                "+    private String _declareExchange = \"amq.direct\";",
                "     private String _declareType = \"direct\";",
                "-    private boolean _declarePassive = true;",
                "-    private boolean _declareDurable = true;",
                "+    private boolean _declarePassive = false;",
                "+    private boolean _declareDurable = false;",
                "     private boolean _declareAutoDelete = false;",
                "@@ -40,2 +42,10 @@ public class ExchangeInteraction",
                "+    private String _boundQueue;",
                "+    private String _boundRoutingKey;",
                "+    private String _boundExchange;",
                "+",
                "+    private String _deleteExchange;",
                "+    private boolean _deleteIfUnused = false;",
                "+    private boolean _deleteNoWait = false;",
                "+",
                "     public ExchangeInteraction(final Interaction interaction)",
                "@@ -45,2 +55,20 @@ public class ExchangeInteraction",
                "+    public ExchangeInteraction declareName(final String name)",
                "+    {",
                "+        _declareExchange = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declarePassive(final boolean passive)",
                "+    {",
                "+        _declarePassive = passive;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareDurable(final boolean durable)",
                "+    {",
                "+        _declareDurable = durable;",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction declare() throws Exception",
                "@@ -48,3 +76,3 @@ public class ExchangeInteraction",
                "         return _interaction.sendPerformative(new ExchangeDeclareBody(0,",
                "-                                                                     AMQShortString.valueOf(_decalreExchange),",
                "+                                                                     AMQShortString.valueOf(_declareExchange),",
                "                                                                      AMQShortString.valueOf(_declareType),",
                "@@ -57,2 +85,35 @@ public class ExchangeInteraction",
                "     }",
                "+",
                "+    public ExchangeInteraction boundExchangeName(final String name)",
                "+    {",
                "+        _boundExchange = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction bound() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ExchangeBoundBody(AMQShortString.valueOf(_boundExchange),",
                "+                                                                   AMQShortString.valueOf(_boundRoutingKey),",
                "+                                                                   AMQShortString.valueOf(_boundQueue)));",
                "+    }",
                "+",
                "+    public ExchangeInteraction deleteExchangeName(final String name)",
                "+    {",
                "+        _deleteExchange = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction deleteIfUnused(final boolean deleteIfUnused)",
                "+    {",
                "+        _deleteIfUnused = deleteIfUnused;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction delete() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new ExchangeDeleteBody(0,",
                "+                                                                    AMQShortString.valueOf(_deleteExchange),",
                "+                                                                    _deleteIfUnused,",
                "+                                                                    _deleteNoWait));",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "index e54fa9a505..49ec8bfce2 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -27,2 +27,3 @@ import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                " import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.QueueBindBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.QueueDeclareBody;",
                "@@ -30,2 +31,3 @@ import org.apache.qpid.server.protocol.v0_8.transport.QueueDeleteBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.QueuePurgeBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.QueueUnbindBody;",
                "@@ -50,2 +52,12 @@ public class QueueInteraction",
                "+    private String _bindQueueName;",
                "+    private String _bindExchangeName;",
                "+    private String _bindRoutingKey;",
                "+    private Map<String, Object> _bindArguments = new HashMap<>();",
                "+",
                "+    private String _unbindQueueName;",
                "+    private String _unbindExchangeName;",
                "+    private String _unbindRoutingKey;",
                "+    private Map<String, Object> _unbindArguments = new HashMap<>();",
                "+",
                "     public QueueInteraction(final Interaction interaction)",
                "@@ -117,2 +129,3 @@ public class QueueInteraction",
                "     }",
                "+",
                "     public QueueInteraction purgeName(final String name)",
                "@@ -122,3 +135,2 @@ public class QueueInteraction",
                "     }",
                "-",
                "     public Interaction purge() throws Exception",
                "@@ -129,2 +141,57 @@ public class QueueInteraction",
                "     }",
                "+",
                "+    public QueueInteraction bindQueueName(final String bindQueueName)",
                "+    {",
                "+        _bindQueueName = bindQueueName;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction bindName(final String name)",
                "+    {",
                "+        _bindExchangeName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction bindRoutingKey(final String bindRoutingKey)",
                "+    {",
                "+        _bindRoutingKey = bindRoutingKey;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction bind() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new QueueBindBody(0,",
                "+                                                               AMQShortString.valueOf(_bindQueueName),",
                "+                                                               AMQShortString.valueOf(_bindExchangeName),",
                "+                                                               AMQShortString.valueOf(_bindRoutingKey),",
                "+                                                               _deleteNowait,",
                "+                                                               FieldTable.convertToFieldTable(_bindArguments)));",
                "+    }",
                "+",
                "+    public QueueInteraction unbindName(final String name)",
                "+    {",
                "+        _unbindExchangeName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction unbindQueueName(final String name)",
                "+    {",
                "+        _unbindQueueName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction unbindRoutingKey(final String routingKey)",
                "+    {",
                "+        _unbindRoutingKey = routingKey;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction unbind() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new QueueUnbindBody(0,",
                "+                                                                 AMQShortString.valueOf(_unbindQueueName),",
                "+                                                                 AMQShortString.valueOf(_unbindExchangeName),",
                "+                                                                 AMQShortString.valueOf(_unbindRoutingKey),",
                "+                                                                 FieldTable.convertToFieldTable(_unbindArguments)));",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "755dda5ee33d28219094c373b9b042616bfd2531",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514490745,
            "hunks": 1,
            "message": "QPID-8038: [Broker-J] [AMQP 0-8..0-91] Enhance queue bind tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "index cbf3a1a05a..3f8a4fc525 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -167,2 +167,8 @@ public class QueueInteraction",
                "+    public QueueInteraction bindArguments(final Map<String, Object> args)",
                "+    {",
                "+        _bindArguments = args == null ? Collections.emptyMap() : new HashMap<>(args);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction bind() throws Exception"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8662f8cecbc3fa85bd22e141af5dba5ea92abe52",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513266248,
            "hunks": 8,
            "message": "QPID-8038: [Broker-J] [AMQP 0-10] Add exchange protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExchangeInteraction.java",
                "new file mode 100644",
                "index 0000000000..e241bf98d1",
                "--- /dev/null",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExchangeInteraction.java",
                "@@ -0,0 +1,127 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.tests.protocol.v0_10;",
                "+",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ExchangeDeclare;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ExchangeDelete;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ExchangeQuery;",
                "+",
                "+public class ExchangeInteraction",
                "+{",
                "+    private final Interaction _interaction;",
                "+    private final ExchangeDeclare _declare;",
                "+    private final ExchangeDelete _delete;",
                "+    private final ExchangeQuery _query;",
                "+",
                "+    public ExchangeInteraction(final Interaction interaction)",
                "+    {",
                "+        _interaction = interaction;",
                "+        _declare = new ExchangeDeclare();",
                "+        _delete = new ExchangeDelete();",
                "+        _query = new ExchangeQuery();",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareExchange(final String exchange)",
                "+    {",
                "+        _declare.setExchange(exchange);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareId(final int id)",
                "+    {",
                "+        _declare.setId(id);",
                "+        return this;",
                "+    }",
                "+    public ExchangeInteraction declareType(final String type)",
                "+    {",
                "+        _declare.setType(type);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declarePassive(final boolean passive)",
                "+    {",
                "+        _declare.setPassive(passive);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareDurable(final boolean durable)",
                "+    {",
                "+        _declare.setDurable(durable);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareAlternateExchange(final String alternateExchange)",
                "+    {",
                "+        _declare.setAlternateExchange(alternateExchange);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareAutoDelete(final boolean autoDelete)",
                "+    {",
                "+        _declare.setAutoDelete(autoDelete);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction declare() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_declare);",
                "+    }",
                "+",
                "+    public ExchangeInteraction deleteExchange(final String exchangeName)",
                "+    {",
                "+        _delete.setExchange(exchangeName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction deleteId(final int id)",
                "+    {",
                "+        _delete.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction deleteIfUnused(final boolean ifUnused)",
                "+    {",
                "+        _delete.ifUnused(ifUnused);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction delete() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_delete);",
                "+    }",
                "+",
                "+    public ExchangeInteraction queryExchange(final String name)",
                "+    {",
                "+        _query.setName(name);",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction queryId(final int id)",
                "+    {",
                "+        _query.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction query() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_query);",
                "+    }",
                "+}",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "index 0679386f8e..771fad1590 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "@@ -41,2 +41,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     private QueueInteraction _queueInteraction;",
                "+    private ExchangeInteraction _exchangeInteraction;",
                "     private int _channelId;",
                "@@ -53,2 +54,3 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "         _queueInteraction = new QueueInteraction(this);",
                "+        _exchangeInteraction = new ExchangeInteraction(this);",
                "     }",
                "@@ -145,2 +147,7 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "     }",
                "+",
                "+    public ExchangeInteraction exchange()",
                "+    {",
                "+        return _exchangeInteraction;",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java",
                "index 7e15099126..ca3edee1e8 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java",
                "@@ -24,4 +24,4 @@ import org.apache.qpid.server.protocol.v0_10.transport.QueueDeclare;",
                " import org.apache.qpid.server.protocol.v0_10.transport.QueueDelete;",
                "-import org.apache.qpid.server.protocol.v0_10.transport.TxCommit;",
                "-import org.apache.qpid.server.protocol.v0_10.transport.TxSelect;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.QueuePurge;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.QueueQuery;",
                "@@ -32,2 +32,4 @@ public class QueueInteraction",
                "     private final QueueDelete _delete;",
                "+    private final QueuePurge _purge;",
                "+    private final QueueQuery _query;",
                "@@ -38,2 +40,4 @@ public class QueueInteraction",
                "         _delete = new QueueDelete();",
                "+        _purge = new QueuePurge();",
                "+        _query = new QueueQuery();",
                "     }",
                "@@ -108,2 +112,35 @@ public class QueueInteraction",
                "     }",
                "+",
                "+    public QueueInteraction purgeQueue(final String queueName)",
                "+    {",
                "+        _purge.setQueue(queueName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction purgeId(final int id)",
                "+    {",
                "+        _purge.setId(id);",
                "+        return this;",
                "+    }",
                "+    public Interaction purge() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_purge);",
                "+    }",
                "+",
                "+    public QueueInteraction queryQueue(final String queueName)",
                "+    {",
                "+        _query.setQueue(queueName);",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction queryId(final int id)",
                "+    {",
                "+        _query.setId(id);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction query() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(_query);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExchangeInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/QueueInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ExchangeInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "85c9caae60565836487e962626896068385bad99",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512550418,
            "hunks": 2,
            "message": "QPID-8038: [Broker-J] [AMQP 0-8..0-91] Add more exchange protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "index 92184805d2..f62a4b346a 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.tests.protocol.v0_8;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -73,2 +74,20 @@ public class ExchangeInteraction",
                "+    public ExchangeInteraction declareType(final String type)",
                "+    {",
                "+        _declareType = type;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareAutoDelete(final boolean autoDelete)",
                "+    {",
                "+        _declareAutoDelete = autoDelete;",
                "+        return this;",
                "+    }",
                "+",
                "+    public ExchangeInteraction declareArguments(final Map<String,Object> args)",
                "+    {",
                "+        _declareArguments = args == null ? Collections.emptyMap() : new HashMap<>(args);",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction declare() throws Exception"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ExchangeInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6e99e868de1efde922351f6c4dfcd3cafb89b9a5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513931828,
            "hunks": 1,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add qos bytes protocol test",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index 35ff42aba8..2c1d1b3f72 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -197,2 +197,8 @@ public class BasicInteraction",
                "+    public BasicInteraction qosPrefetchSize(final int prefetchSize)",
                "+    {",
                "+        _qosPrefetchSize = prefetchSize;",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction qos() throws Exception"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "04870bed255c16e025cfd7f398f64ba44f575b04",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515945145,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor BrokerClosesClientConnectionTest Fixed bug in ManagementNode that prevents the querying of a associated configured object by id.",
            "diff": [
                "diff --git a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "index 045c66fdc4..c9c067a427 100644",
                "--- a/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "+++ b/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "@@ -932,12 +932,14 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "             {",
                "-                if(ancestorCategories.contains(entry.getKey()))",
                "+                @SuppressWarnings(\"unchecked\")",
                "+                ConfiguredObjectOperation<ConfiguredObject<?>> operation =",
                "+                        (ConfiguredObjectOperation<ConfiguredObject<?>>) entry.getValue();",
                "+",
                "+                final Class<?> returnType = operation.getReturnType();",
                "+                if (clazz.isAssignableFrom(returnType) || ancestorCategories.contains(returnType))",
                "                 {",
                "                     @SuppressWarnings(\"unchecked\")",
                "-                    ConfiguredObjectOperation<ConfiguredObject<?>> operation =",
                "-                            (ConfiguredObjectOperation<ConfiguredObject<?>>) entry.getValue();",
                "-                    @SuppressWarnings(\"unchecked\")",
                "                     Collection<? extends ConfiguredObject> associated =",
                "                             (Collection<? extends ConfiguredObject>) operation",
                "-                                                                          .perform(_managedObject,",
                "-                                                                                   Collections.<String, Object>emptyMap());",
                "+                                    .perform(_managedObject,",
                "+                                             Collections.emptyMap());",
                "                     ConfiguredObject<?> object = findDescendantById(clazz, id,",
                "@@ -945,3 +947,3 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "                                                                     associated);",
                "-                    if(object != null)",
                "+                    if (object != null)",
                "                     {",
                "@@ -950,2 +952,25 @@ class ManagementNode implements MessageSource, MessageDestination, BaseQueue",
                "                 }",
                "+                else if (returnsCollectionOfConfiguredObjects(operation))",
                "+                {",
                "+                    @SuppressWarnings(\"unchecked\")",
                "+                    Class<? extends ConfiguredObject> associatedChildCategory =",
                "+                            getCollectionMemberType((ParameterizedType) operation.getGenericReturnType());",
                "+",
                "+                    if (clazz.isAssignableFrom(associatedChildCategory)",
                "+                        || ancestorCategories.contains(associatedChildCategory))",
                "+                    {",
                "+                        @SuppressWarnings(\"unchecked\")",
                "+                        Collection<? extends ConfiguredObject> associated =",
                "+                                (Collection<? extends ConfiguredObject>) operation",
                "+                                        .perform(_managedObject,",
                "+                                                 Collections.emptyMap());",
                "+                        ConfiguredObject<?> object = findDescendantById(clazz, id,",
                "+                                                                        entry.getKey(),",
                "+                                                                        associated);",
                "+                        if (object != null)",
                "+                        {",
                "+                            return object;",
                "+                        }",
                "+                    }",
                "+                }",
                "             }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 821fe48be7..78511ee4c7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -85,2 +85,5 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "+// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+",
                " // passwd script is a Qpid Broker-J specific command line tool"
            ],
            "changed_files": [
                "broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNode.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: configure, client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "988006b38d8dd10914357779966731dc1aa90530",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514223312,
            "hunks": 1,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add protocol tests for basic.qos and channel.flow",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index 2c1d1b3f72..c004e38f94 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -245,2 +245,8 @@ public class BasicInteraction",
                "+    public BasicInteraction ackMultiple(final boolean multiple)",
                "+    {",
                "+        _ackMultiple = multiple;",
                "+        return this;",
                "+    }",
                "+",
                "     public BasicInteraction ackDeliveryTag(final long deliveryTag)"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "67d2850413e38b1e73a59a9a185816f869705a82",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513766575,
            "hunks": 17,
            "message": "QPID-8038: [Broker-J] [AMQP 0-x] Add protocol large message and large headers tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "index e60049ecdb..f5de466433 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "@@ -186,2 +186,3 @@ public final class Disassembler implements ProtocolEventSender, ProtocolDelegate",
                "                     qpidByteBuffer.copyTo(body);",
                "+                    body.flip();",
                "                 }",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "index fff894bb51..9fa3659da9 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "@@ -28,2 +28,3 @@ import java.util.Collection;",
                "+import org.apache.qpid.server.protocol.v0_10.FrameSizeObserver;",
                " import org.apache.qpid.server.protocol.v0_10.transport.Frame;",
                "@@ -35,3 +36,3 @@ import org.apache.qpid.tests.protocol.Response;",
                "-public class FrameDecoder implements InputDecoder",
                "+public class FrameDecoder implements InputDecoder, FrameSizeObserver",
                " {",
                "@@ -64,3 +65,3 @@ public class FrameDecoder implements InputDecoder",
                "     {",
                "-        _receiver = new ProtocolEventReceiver(headerBytes);",
                "+        _receiver = new ProtocolEventReceiver(headerBytes, this);",
                "         this._assembler = new Assembler(_receiver);",
                "@@ -185,2 +186,3 @@ public class FrameDecoder implements InputDecoder",
                "+    @Override",
                "     public void setMaxFrameSize(final int maxFrameSize)",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "index 771fad1590..2398636f96 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "@@ -29,2 +29,5 @@ import org.apache.qpid.server.protocol.v0_10.transport.ConnectionStart;",
                " import org.apache.qpid.server.protocol.v0_10.transport.ConnectionTune;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.DeliveryProperties;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Header;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageProperties;",
                " import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "@@ -87,2 +90,44 @@ public class Interaction extends AbstractInteraction<Interaction>",
                "         dst.setChannel(src.getChannel());",
                "+",
                "+        if (src.getHeader() != null)",
                "+        {",
                "+            Header srcHeader = src.getHeader();",
                "+            MessageProperties dstMessageProperties = null;",
                "+            DeliveryProperties dstDeliveryProperties = null;",
                "+",
                "+            if (srcHeader.getMessageProperties() != null)",
                "+            {",
                "+                MessageProperties properties = srcHeader.getMessageProperties();",
                "+                dstMessageProperties = new MessageProperties();",
                "+",
                "+                encoder.init();",
                "+                properties.write(encoder);",
                "+",
                "+                decoder.init(encoder.buffer());",
                "+                dstMessageProperties.read(decoder);",
                "+            }",
                "+",
                "+            if (srcHeader.getDeliveryProperties() != null)",
                "+            {",
                "+                DeliveryProperties properties = srcHeader.getDeliveryProperties();",
                "+                dstDeliveryProperties = new DeliveryProperties();",
                "+",
                "+                encoder.init();",
                "+                properties.write(encoder);",
                "+",
                "+                decoder.init(encoder.buffer());",
                "+                dstDeliveryProperties.read(decoder);",
                "+            }",
                "+",
                "+            if (dstMessageProperties != null || dstDeliveryProperties != null)",
                "+            {",
                "+                dst.setHeader(new Header(dstDeliveryProperties, dstMessageProperties));",
                "+            }",
                "+        }",
                "+",
                "+        if (src.getBody() != null)",
                "+        {",
                "+            dst.setBody(src.getBody());",
                "+        }",
                "+",
                "         return dst;",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "index 4645d46d3d..54ecf50f23 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "@@ -22,2 +22,5 @@ package org.apache.qpid.tests.protocol.v0_10;",
                "+import org.apache.qpid.server.bytebuffer.QpidByteBuffer;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.DeliveryProperties;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.Header;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageAccept;",
                "@@ -28,2 +31,3 @@ import org.apache.qpid.server.protocol.v0_10.transport.MessageCreditUnit;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageFlow;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.MessageProperties;",
                " import org.apache.qpid.server.protocol.v0_10.transport.MessageSubscribe;",
                "@@ -63,2 +67,32 @@ public class MessageInteraction",
                "+    public MessageInteraction transferHeader(final DeliveryProperties deliveryProperties,",
                "+                                             final MessageProperties messageProperties)",
                "+    {",
                "+        if (deliveryProperties == null && messageProperties == null)",
                "+        {",
                "+            _transfer.setHeader(null);",
                "+        }",
                "+        else",
                "+        {",
                "+            _transfer.setHeader(new Header(deliveryProperties, messageProperties));",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    public MessageInteraction transferBody(final byte[] messageContent)",
                "+    {",
                "+        if (messageContent != null)",
                "+        {",
                "+            try (QpidByteBuffer buf = QpidByteBuffer.wrap(messageContent))",
                "+            {",
                "+                _transfer.setBody(buf);",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            _transfer.setBody(null);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction transfer() throws Exception",
                "diff --git a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "index 37eb66e4bf..4c086bdd4e 100644",
                "--- a/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "+++ b/systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "@@ -27,2 +27,4 @@ import java.util.concurrent.ConcurrentLinkedQueue;",
                "+import org.apache.qpid.server.protocol.v0_10.FrameSizeObserver;",
                "+import org.apache.qpid.server.protocol.v0_10.transport.ConnectionTune;",
                " import org.apache.qpid.server.protocol.v0_10.transport.Method;",
                "@@ -36,8 +38,11 @@ public class ProtocolEventReceiver",
                " {",
                "-    private Queue<Response<?>> _events = new ConcurrentLinkedQueue<>();",
                "+    private final Queue<Response<?>> _events = new ConcurrentLinkedQueue<>();",
                "     private final byte[] _headerBytes;",
                "+    private FrameSizeObserver _frameSizeObserver;",
                "-    public ProtocolEventReceiver(final byte[] headerBytes)",
                "+    public ProtocolEventReceiver(final byte[] headerBytes,",
                "+                                 final FrameSizeObserver frameSizeObserver)",
                "     {",
                "         _headerBytes = headerBytes;",
                "+        _frameSizeObserver = frameSizeObserver;",
                "     }",
                "@@ -52,2 +57,7 @@ public class ProtocolEventReceiver",
                "         {",
                "+            if (msg instanceof ConnectionTune)",
                "+            {",
                "+                int maxFrameSize = ((ConnectionTune) msg).getMaxFrameSize();",
                "+                _frameSizeObserver.setMaxFrameSize(maxFrameSize);",
                "+            }",
                "             _events.add(new PerformativeResponse((Method) msg));",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "index 499fe72d66..80e9736395 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java",
                "@@ -31,2 +31,3 @@ import org.apache.qpid.server.protocol.v0_8.transport.AMQDataBlock;",
                " import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ConnectionTuneBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.FrameCreatingMethodProcessor;",
                "@@ -62,2 +63,8 @@ public class FrameDecoder implements InputDecoder",
                "                 AMQFrame amqFrame = (AMQFrame) frame;",
                "+                if (amqFrame.getBodyFrame() instanceof ConnectionTuneBody)",
                "+                {",
                "+                    ConnectionTuneBody tuneBody = (ConnectionTuneBody) amqFrame.getBodyFrame();",
                "+                    _clientDecoder.setMaxFrameSize((int) tuneBody.getFrameMax());",
                "+                }",
                "+",
                "                 result.add(new PerformativeResponse(amqFrame.getChannel(), amqFrame.getSize(), amqFrame.getBodyFrame()));"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java",
                "systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/FrameDecoder.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Interaction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/Disassembler.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/MessageInteraction.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/FrameDecoder.java, systests/protocol-tests-amqp-0-10/src/main/java/org/apache/qpid/tests/protocol/v0_10/ProtocolEventReceiver.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a7368ecb2acbee7e214cb8b6f3acd5f8d0eb31f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511910287,
            "hunks": 9,
            "message": "QPID-8038: [Broker-J][AMQP 1.0] Add 0-8/9/91 queue protocol tests",
            "diff": [
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "index bf8c4eb27f..bcac57881b 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "@@ -33,2 +33,3 @@ import org.apache.qpid.server.protocol.v0_8.transport.AMQFrame;",
                " import org.apache.qpid.server.protocol.v0_8.transport.BasicAckBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.BasicCancelBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.BasicConsumeBody;",
                "@@ -66,2 +67,5 @@ public class BasicInteraction",
                "+    private String _consumeCancelTag;",
                "+    private boolean _consumeCancelNoWait;",
                "+",
                "     public BasicInteraction(final Interaction interaction)",
                "@@ -215,2 +219,14 @@ public class BasicInteraction",
                "     }",
                "+",
                "+    public Interaction cancel() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new BasicCancelBody(AMQShortString.valueOf(_consumeCancelTag),",
                "+                                                                 _consumeCancelNoWait));",
                "+    }",
                "+",
                "+    public BasicInteraction consumeCancelTag(final String consumeCancelTag)",
                "+    {",
                "+        _consumeCancelTag = consumeCancelTag;",
                "+        return this;",
                "+    }",
                " }",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "index 51d44260ca..a5dcc176a4 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "@@ -24,2 +24,3 @@ import org.apache.qpid.server.protocol.v0_8.AMQShortString;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ChannelCloseBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.ChannelCloseOkBody;",
                " import org.apache.qpid.server.protocol.v0_8.transport.ChannelFlowBody;",
                "@@ -46,2 +47,7 @@ public class ChannelInteraction",
                "+    public Interaction closeOk() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(ChannelCloseOkBody.INSTANCE);",
                "+    }",
                "+",
                "     public Interaction flow(final boolean active) throws Exception",
                "diff --git a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "index 6e8638512e..1f6d47f611 100644",
                "--- a/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "+++ b/systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                "@@ -28,2 +28,3 @@ import org.apache.qpid.server.protocol.v0_8.FieldTable;",
                " import org.apache.qpid.server.protocol.v0_8.transport.QueueDeclareBody;",
                "+import org.apache.qpid.server.protocol.v0_8.transport.QueueDeleteBody;",
                "@@ -40,2 +41,7 @@ public class QueueInteraction",
                "+    private String _deleteName;",
                "+    private boolean _deleteIfUnused;",
                "+    private boolean _deleteIfEmpty;",
                "+    private boolean _deleteNowait;",
                "+",
                "     public QueueInteraction(final Interaction interaction)",
                "@@ -51,2 +57,14 @@ public class QueueInteraction",
                "+    public QueueInteraction declarePassive(final boolean declarePassive)",
                "+    {",
                "+        _declarePassive = declarePassive;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction declareDurable(final boolean declareDurable)",
                "+    {",
                "+        _declareDurable = declareDurable;",
                "+        return this;",
                "+    }",
                "+",
                "     public Interaction declare() throws Exception",
                "@@ -62,2 +80,23 @@ public class QueueInteraction",
                "     }",
                "+",
                "+    public QueueInteraction deleteName(final String name)",
                "+    {",
                "+        _deleteName = name;",
                "+        return this;",
                "+    }",
                "+",
                "+    public QueueInteraction deleteIfUnused(final boolean deleteIfUnused)",
                "+    {",
                "+        _deleteIfUnused = deleteIfUnused;",
                "+        return this;",
                "+    }",
                "+",
                "+    public Interaction delete() throws Exception",
                "+    {",
                "+        return _interaction.sendPerformative(new QueueDeleteBody(0,",
                "+                                                                 AMQShortString.valueOf(_deleteName),",
                "+                                                                 _deleteIfUnused,",
                "+                                                                 _deleteIfEmpty,",
                "+                                                                 _deleteNowait));",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java",
                "systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8038": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/BasicInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/ChannelInteraction.java, systests/protocol-tests-amqp-0-8/src/main/java/org/apache/qpid/tests/protocol/v0_8/QueueInteraction.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8038",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35ed69903a961e9dfd1eb4df9f82dff3abe16ab7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510579386,
            "hunks": 5,
            "message": "[QPID-6933][System Tests] Remove protocol specific tests relying on specific client client classes * Tests are deleted due to changes to client interface ByteBufferSender * Protocol specific tests needs to be implemented to replace deleted system tests",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 7dc98d69e2..addb31a34b 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -186,5 +186,2 @@ org.apache.qpid.server.queue.QueueMessageDurabilityTest#*",
                "-// QPID-4429 : C++ Broker does not enforce max frame size negotiation rules as per the spec",
                "-org.apache.qpid.transport.MaxFrameSizeTest#*",
                "-",
                " // CPP Broker does not timeout connections with no activity like the Qpid Broker-J",
                "@@ -229,6 +226,2 @@ org.apache.qpid.test.unit.client.connection.BrokerClosesClientConnectionTest#tes",
                "-# cpp broker allows anonymous access by default",
                "-# the following test requires running broker with authentication enabled",
                "-org.apache.qpid.transport.ConnectionEstablishmentTest#testAuthenticationBypass",
                "-",
                " #Node Creation Policy Tests use Qpid Broker-J Specific Config",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 0df118e3e8..c67bc36162 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -75,5 +75,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testConnection",
                "-// This test does not make sense because on 0-10 maxFrameSize is 64kB and the Qpid Broker-J sets the networkBufferSize to a minimum of 64kB.",
                "-org.apache.qpid.transport.MaxFrameSizeTest#testTooLargeFrameSize",
                "-",
                " org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_08091_HeadersFillContentHeaderFrame",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index be5b6df0c3..56ee05a1aa 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -88,5 +88,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#*",
                "-// Low level test on ensuring frames are not bigger than negotiated max - there should probably be an equivalent for 1.0",
                "-org.apache.qpid.transport.MaxFrameSizeTest#*",
                "-",
                " // This test is concerned with the 0-x client establishing a connection to a supported version",
                "@@ -152,6 +149,2 @@ org.apache.qpid.test.unit.client.DynamicQueueExchangeCreateTest#*",
                "-// This test aims to establish a connection without going through SASL exchanges.  The model for 1.0 is different, and",
                "-// this should probably be tested in a new protocol specific broker test",
                "-org.apache.qpid.transport.ConnectionEstablishmentTest#*",
                "-",
                " // test of 0-10 client specific behaviour"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ce80d1448533252e95fac60a004aa2760d33bd9b"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, client",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66eec20ff896f264d4bbf0ff16e7916a0bf49f97",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515887085,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x ExceptionListenerTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f79d0a97b9..61a5e8a8cb 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -31,3 +31,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index d390a9fd81..6df36fddc4 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -20,3 +20,2 @@",
                " // Those tests are testing 0.8..-0-9-1 specific semantics",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 7ddb2293b5..efb7b9705d 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -54,6 +54,2 @@ org.apache.qpid.test.client.failover.FailoverTest#*",
                "-",
                "-// Tests the issue of connection exceptions being generated for unroutable messages in the 0-x client",
                "-org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionListenerConnectionStopDeadlock",
                "-",
                " // Message encryption not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cd534214affe087847792de95cca3b524202c7ab",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512495440,
            "hunks": 1,
            "message": "QPID-8031: [Broker-J, System Tests] Bump version of AMQP 0-x client to 6.3.0",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 7856f072c4..aa82bf00f8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -152,3 +152,3 @@",
                "     <qpid-jms-client-version>0.26.0</qpid-jms-client-version>",
                "-    <qpid-jms-client-amqp-0-x-version>6.1.4</qpid-jms-client-amqp-0-x-version>",
                "+    <qpid-jms-client-amqp-0-x-version>6.3.0</qpid-jms-client-amqp-0-x-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8031": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8031",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a9a275dc74c499735184b134eb4ae38cd0d6c50b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515283925,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor amqp management tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index ee1058731a..295f452248 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -36,7 +36,2 @@ org.apache.qpid.test.unit.basic.BytesMessageTest#testModificationAfterSend",
                "-// This test fails with error The underlying correlation-id is not binary and so can't be returned",
                "-// however the correlation id in the incoming message was set as byte[] so the issue is within the conversion to",
                "-// the InternalMessage and back",
                "-org.apache.qpid.systest.management.amqp.AmqpManagementTest#testGetTypesOnVhostManagement",
                "-",
                " // Test uses AMQP 0-x ack modes and assumes the name of the queues backing subscriptions"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8312b9ffacf642f5cb83ce4edf56c91ea2e42de3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515678792,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Remove ModelTest - tested the ability to explicitly declare durable/exclusive queues using Qpid specific extension to the JMS API.  Server side concerns now covered by 0-9/0-10 protocol tests.",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 6f037e82a6..2d10c6c8b7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -60,3 +60,2 @@ org.apache.qpid.server.logging.actors.*",
                " // REST management is used in this test for validation",
                "-org.apache.qpid.server.queue.ModelTest#*",
                " org.apache.qpid.server.queue.LiveQueueOperationsTest#*",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index d9c92f902e..2c5f14785f 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-// Exclude tests of AMQP 0-x features",
                "-org.apache.qpid.server.queue.ModelTest#*",
                "-",
                " // Exclude tests of connection URL failover method property"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6747c7dbcd14bfbe09d3702f59ce49994dc40349",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510329840,
            "hunks": 2,
            "message": "QPID-8030: [Broker-J] Message conversion from 0-8 to 1.0 should preserve binary correlationId (cherry picked from commit e08052db31043b9c5ba13981c8778b668eb23448)",
            "diff": [
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java b/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java",
                "index 32a076c4bc..683999320a 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java",
                "@@ -23,2 +23,4 @@ package org.apache.qpid.server.protocol.converter.v0_8_v1_0;",
                " import java.net.URISyntaxException;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.Arrays;",
                " import java.util.Date;",
                "@@ -90,3 +92,12 @@ public class MessageConverter_0_8_to_1_0 extends MessageConverter_to_1_0<AMQMess",
                "         {",
                "-            props.setCorrelationId(correlationId.toString());",
                "+            final byte[] correlationIdAsBytes = correlationId.getBytes();",
                "+            final String correlationIdAsString = contentHeader.getCorrelationIdAsString();",
                "+            if (Arrays.equals(correlationIdAsBytes, correlationIdAsString.getBytes(StandardCharsets.UTF_8)))",
                "+            {",
                "+                props.setCorrelationId(correlationIdAsString);",
                "+            }",
                "+            else",
                "+            {",
                "+                props.setCorrelationId(correlationIdAsBytes);",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8030": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-msg-conv-0-8-to-1-0/src/main/java/org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_0_8_to_1_0.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8030",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c47109b41dbeda51159ae5ce22666e5cee8eedab",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511641058,
            "hunks": 20,
            "message": "QPID-6933: [System Tests] Change amqp protocol version defined in maven profiles to be spec complient",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0c0c445179..d2e3087412 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -107,3 +107,3 @@",
                "     <profile.specific.excludes>JavaTransientExcludes Java010Excludes</profile.specific.excludes>",
                "-    <profile.broker.version>v0_10</profile.broker.version>",
                "+    <profile.broker.version>1.0</profile.broker.version>",
                "     <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1009,3 +1009,3 @@",
                "         <profile.specific.excludes>JavaTransientExcludes Java010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1029,3 +1029,3 @@",
                "         <profile.specific.excludes>JavaTransientExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9_1</profile.broker.version>",
                "+        <profile.broker.version>0-9-1</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "@@ -1049,3 +1049,3 @@",
                "         <profile.specific.excludes>JavaTransientExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9</profile.broker.version>",
                "+        <profile.broker.version>0-9</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "@@ -1069,3 +1069,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes Java010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1088,3 +1088,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes XAExcludes JavaPre010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9_1</profile.broker.version>",
                "+        <profile.broker.version>0-9-1</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "@@ -1107,3 +1107,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes XAExcludes JavaPre010Excludes JavaBDBExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9</profile.broker.version>",
                "+        <profile.broker.version>0-9</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "@@ -1126,3 +1126,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1145,3 +1145,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9_1</profile.broker.version>",
                "+        <profile.broker.version>0-9-1</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "@@ -1164,3 +1164,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9</profile.broker.version>",
                "+        <profile.broker.version>0-9</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "@@ -1183,3 +1183,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1203,3 +1203,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9_1</profile.broker.version>",
                "+        <profile.broker.version>0-9-1</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "@@ -1223,3 +1223,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9</profile.broker.version>",
                "+        <profile.broker.version>0-9</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\"]</profile.test.amqp_port_protocols>",
                "@@ -1244,3 +1244,3 @@",
                "         <profile.specific.excludes>JavaTransientExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v1_0</profile.broker.version>",
                "+        <profile.broker.version>1.0</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\",\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "@@ -1266,3 +1266,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaBDBExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v1_0</profile.broker.version>",
                "+        <profile.broker.version>1.0</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "@@ -1287,3 +1287,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaDerbyExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v1_0</profile.broker.version>",
                "+        <profile.broker.version>1.0</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "@@ -1313,3 +1313,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes Java10Excludes Java10BrokenTestsExcludes Java10UninvestigatedTestsExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v1_0</profile.broker.version>",
                "+        <profile.broker.version>1.0</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "@@ -1333,3 +1333,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes JavaPre010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_9_1</profile.broker.version>",
                "+        <profile.broker.version>0-9-1</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\"]</profile.test.amqp_port_protocols>",
                "@@ -1352,3 +1352,3 @@",
                "         <profile.specific.excludes>JavaPersistentExcludes JavaJsonExcludes XAExcludes Java010Excludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.test.amqp_port_protocols>[\"AMQP_0_8\",\"AMQP_0_9\",\"AMQP_0_9_1\",\"AMQP_0_10\"]</profile.test.amqp_port_protocols>",
                "@@ -1382,3 +1382,3 @@",
                "         <profile.specific.excludes>CPPPrefetchExcludes CPPTransientExcludes</profile.specific.excludes>",
                "-        <profile.broker.version>v0_10</profile.broker.version>",
                "+        <profile.broker.version>0-10</profile.broker.version>",
                "         <profile.broker.persistent>false</profile.broker.persistent>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "09d7d8a19ed4e35d99c1b82e5e86aa135ea63c50",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510159700,
            "hunks": 35,
            "message": "QPID-7567 : Use SNI to select appropriate keystore alias",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "index 66d66e88b1..4757904dd7 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "@@ -27,5 +27,3 @@ import java.io.OutputStreamWriter;",
                " import java.io.Writer;",
                "-import java.lang.reflect.Constructor;",
                " import java.lang.reflect.InvocationTargetException;",
                "-import java.lang.reflect.Method;",
                " import java.net.InetAddress;",
                "@@ -86,18 +84,2 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "-",
                "-    private static Constructor<?> CONSTRUCTOR;",
                "-    private static Method GENERATE_METHOD;",
                "-    private static Method GET_PRIVATE_KEY_METHOD;",
                "-    private static Method GET_SELF_CERTIFICATE_METHOD;",
                "-    private static Constructor<?> X500_NAME_CONSTRUCTOR;",
                "-    private static Constructor<?> DNS_NAME_CONSTRUCTOR;",
                "-    private static Constructor<?> IP_ADDR_NAME_CONSTRUCTOR;",
                "-    private static Constructor<?> GENERAL_NAMES_CONSTRUCTOR;",
                "-    private static Constructor<?> GENERAL_NAME_CONSTRUCTOR;",
                "-    private static Method ADD_NAME_TO_NAMES_METHOD;",
                "-    private static Constructor<?> ALT_NAMES_CONSTRUCTOR;",
                "-    private static Constructor<?> CERTIFICATE_EXTENSIONS_CONSTRUCTOR;",
                "-    private static Method SET_EXTENSION_METHOD;",
                "-    private static Method EXTENSION_GET_NAME_METHOD;",
                "-",
                "     private final Broker<?> _broker;",
                "@@ -292,7 +274,3 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "         {",
                "-            Object certAndKeyGen = CONSTRUCTOR.newInstance(_keyAlgorithm, _signatureAlgorithm);",
                "-            GENERATE_METHOD.invoke(certAndKeyGen, _keyLength);",
                "-            _privateKey = (PrivateKey) GET_PRIVATE_KEY_METHOD.invoke(certAndKeyGen);",
                "-            Object generalNames = GENERAL_NAMES_CONSTRUCTOR.newInstance();",
                "@@ -323,19 +301,2 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "             }",
                "-            for(String dnsName : dnsNames)",
                "-            {",
                "-                if(dnsName.matches(\"[\\\\w&&[^\\\\d]][\\\\w\\\\d.-]*\"))",
                "-                {",
                "-                    ADD_NAME_TO_NAMES_METHOD.invoke(generalNames,",
                "-                                                    GENERAL_NAME_CONSTRUCTOR.newInstance(DNS_NAME_CONSTRUCTOR.newInstance(",
                "-                                                            dnsName)));",
                "-                }",
                "-            }",
                "-",
                "-            for(InetAddress inetAddress : addresses)",
                "-            {",
                "-                ADD_NAME_TO_NAMES_METHOD.invoke(generalNames, GENERAL_NAME_CONSTRUCTOR.newInstance(IP_ADDR_NAME_CONSTRUCTOR.newInstance(inetAddress.getHostAddress())));",
                "-            }",
                "-            Object altNamesExtension = ALT_NAMES_CONSTRUCTOR.newInstance(generalNames);",
                "-            Object certificateExtensions = CERTIFICATE_EXTENSIONS_CONSTRUCTOR.newInstance();",
                "-            SET_EXTENSION_METHOD.invoke(certificateExtensions, EXTENSION_GET_NAME_METHOD.invoke(altNamesExtension), altNamesExtension);",
                "@@ -347,4 +308,13 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "-            _certificate = (X509Certificate) GET_SELF_CERTIFICATE_METHOD.invoke(certAndKeyGen, X500_NAME_CONSTRUCTOR.newInstance(\"CN=Qpid\"), new Date(startTime), duration, certificateExtensions);",
                "-",
                "+            final SSLUtil.KeyCertPair keyCertPair = SSLUtil.generateSelfSignedCertificate(_keyAlgorithm,",
                "+                                                                                          _signatureAlgorithm,",
                "+                                                                                          _keyLength,",
                "+                                                                                          startTime,",
                "+                                                                                          duration,",
                "+                                                                                          \"CN=Qpid\",",
                "+                                                                                          dnsNames,",
                "+                                                                                          addresses);",
                "+",
                "+            _privateKey = keyCertPair.getPrivateKey();",
                "+            _certificate = keyCertPair.getCertificate();",
                "             _generated = true;",
                "@@ -404,44 +374,3 @@ public class AutoGeneratedSelfSignedKeyStoreImpl",
                "     {",
                "-        try",
                "-        {",
                "-            Class<?> certAndKeyGenClass;",
                "-            try",
                "-            {",
                "-                certAndKeyGenClass = Class.forName(\"sun.security.x509.CertAndKeyGen\");",
                "-            }",
                "-            catch (ClassNotFoundException e)",
                "-            {",
                "-                certAndKeyGenClass = Class.forName(\"sun.security.tools.keytool.CertAndKeyGen\");",
                "-            }",
                "-",
                "-            final Class<?> x500NameClass = Class.forName(\"sun.security.x509.X500Name\");",
                "-            final Class<?> certificateExtensionsClass = Class.forName(\"sun.security.x509.CertificateExtensions\");",
                "-            final Class<?> generalNamesClass = Class.forName(\"sun.security.x509.GeneralNames\");",
                "-            final Class<?> generalNameClass = Class.forName(\"sun.security.x509.GeneralName\");",
                "-            final Class<?> extensionClass = Class.forName(\"sun.security.x509.SubjectAlternativeNameExtension\");",
                "-",
                "-",
                "-            CONSTRUCTOR = certAndKeyGenClass.getConstructor(String.class, String.class);",
                "-            GENERATE_METHOD = certAndKeyGenClass.getMethod(\"generate\", Integer.TYPE);",
                "-            GET_PRIVATE_KEY_METHOD = certAndKeyGenClass.getMethod(\"getPrivateKey\");",
                "-            GET_SELF_CERTIFICATE_METHOD = certAndKeyGenClass.getMethod(\"getSelfCertificate\", x500NameClass, Date.class, Long.TYPE,",
                "-                                                                       certificateExtensionsClass);",
                "-            X500_NAME_CONSTRUCTOR = x500NameClass.getConstructor(String.class);",
                "-            DNS_NAME_CONSTRUCTOR = Class.forName(\"sun.security.x509.DNSName\").getConstructor(String.class);",
                "-            IP_ADDR_NAME_CONSTRUCTOR = Class.forName(\"sun.security.x509.IPAddressName\").getConstructor(String.class);",
                "-            GENERAL_NAMES_CONSTRUCTOR = generalNamesClass.getConstructor();",
                "-            GENERAL_NAME_CONSTRUCTOR = generalNameClass.getConstructor(Class.forName(\"sun.security.x509.GeneralNameInterface\"));",
                "-            ADD_NAME_TO_NAMES_METHOD =  generalNamesClass.getMethod(\"add\", generalNameClass);",
                "-            ALT_NAMES_CONSTRUCTOR = extensionClass.getConstructor(generalNamesClass);",
                "-            CERTIFICATE_EXTENSIONS_CONSTRUCTOR = certificateExtensionsClass.getConstructor();",
                "-            SET_EXTENSION_METHOD = certificateExtensionsClass.getMethod(\"set\", String.class, Object.class);",
                "-            EXTENSION_GET_NAME_METHOD = extensionClass.getMethod(\"getName\");",
                "-",
                "-            return true;",
                "-        }",
                "-        catch (ClassNotFoundException | LinkageError | NoSuchMethodException e)",
                "-        {",
                "-            return false;",
                "-        }",
                "-",
                "+        return SSLUtil.canGenerateCerts();",
                "     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "index 884fbc6340..4051ddb7a7 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "@@ -38,2 +38,3 @@ public interface FileKeyStore<X extends FileKeyStore<X>> extends KeyStore<X>",
                "     String STORE_URL = \"storeUrl\";",
                "+    String USE_HOST_NAME_MATCHING = \"useHostNameMatching\";",
                "@@ -66,2 +67,5 @@ public interface FileKeyStore<X extends FileKeyStore<X>> extends KeyStore<X>",
                "     String getPassword();",
                "+",
                "+    @ManagedAttribute( defaultValue = \"true\")",
                "+    boolean isUseHostNameMatching();",
                " }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "index 4c5ed1f2e7..33090d0353 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "@@ -53,6 +53,7 @@ import org.apache.qpid.server.model.State;",
                " import org.apache.qpid.server.model.StateTransition;",
                "+import org.apache.qpid.server.transport.network.security.ssl.QpidBestFitX509KeyManager;",
                "+import org.apache.qpid.server.transport.network.security.ssl.QpidServerX509KeyManager;",
                "+import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                " import org.apache.qpid.server.util.ServerScopedRuntimeException;",
                " import org.apache.qpid.server.util.urlstreamhandler.data.Handler;",
                "-import org.apache.qpid.server.transport.network.security.ssl.QpidClientX509KeyManager;",
                "-import org.apache.qpid.server.transport.network.security.ssl.SSLUtil;",
                "@@ -72,2 +73,4 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "     private String _storeUrl;",
                "+    @ManagedAttributeField",
                "+    private boolean _useHostNameMatching;",
                "     private String _path;",
                "@@ -82,2 +85,3 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "+",
                "     @ManagedObjectFactoryConstructor",
                "@@ -223,2 +227,8 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "+    @Override",
                "+    public boolean isUseHostNameMatching()",
                "+    {",
                "+        return _useHostNameMatching;",
                "+    }",
                "+",
                "     public void setPassword(String password)",
                "@@ -235,7 +245,14 @@ public class FileKeyStoreImpl extends AbstractKeyStore<FileKeyStoreImpl> impleme",
                "             URL url = getUrlFromString(_storeUrl);",
                "-            if (_certificateAlias != null)",
                "+            if(isUseHostNameMatching())",
                "             {",
                "                 return new KeyManager[] {",
                "-                        new QpidClientX509KeyManager( _certificateAlias, url, _keyStoreType, getPassword(),",
                "+                        new QpidBestFitX509KeyManager(_certificateAlias, url, _keyStoreType, getPassword(),",
                "                                                       _keyManagerFactoryAlgorithm)",
                "+                };",
                "+            }",
                "+            else if (_certificateAlias != null)",
                "+            {",
                "+                return new KeyManager[] {",
                "+                        new QpidServerX509KeyManager(_certificateAlias, url, _keyStoreType, getPassword(),",
                "+                                                     _keyManagerFactoryAlgorithm)",
                "                                         };",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthIdentityConnectionPropertyEnricher.java b/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthIdentityConnectionPropertyEnricher.java",
                "new file mode 100644",
                "index 0000000000..ce48568dcb",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthIdentityConnectionPropertyEnricher.java",
                "@@ -0,0 +1,71 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements. See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License. You may obtain a copy of the License at",
                "+ * <p>",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ * <p>",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.qpid.server.security.auth;",
                "+",
                "+import java.security.Principal;",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import org.apache.qpid.server.model.preferences.GenericPrincipal;",
                "+import org.apache.qpid.server.plugin.ConnectionPropertyEnricher;",
                "+import org.apache.qpid.server.plugin.PluggableService;",
                "+import org.apache.qpid.server.security.QpidPrincipal;",
                "+import org.apache.qpid.server.security.group.GroupPrincipal;",
                "+import org.apache.qpid.server.transport.AMQPConnection;",
                "+",
                "+@PluggableService",
                "+public class AuthIdentityConnectionPropertyEnricher implements ConnectionPropertyEnricher",
                "+{",
                "+    private static final Logger LOG = LoggerFactory.getLogger(AuthIdentityConnectionPropertyEnricher.class);",
                "+",
                "+    @Override",
                "+    public Map<String, Object> addConnectionProperties(final AMQPConnection<?> connection,",
                "+                                                       final Map<String, Object> existingProperties)",
                "+    {",
                "+        Map<String,Object> modifiedProperties = new LinkedHashMap<>(existingProperties);",
                "+",
                "+        final Principal principal = connection.getAuthorizedPrincipal();",
                "+        if(principal != null)",
                "+        {",
                "+            GenericPrincipal genericPrincipal = new GenericPrincipal((QpidPrincipal)principal);",
                "+            Map<String,String> claims = new LinkedHashMap<>();",
                "+            claims.put(\"sub\", genericPrincipal.toExternalForm());",
                "+            claims.put(\"preferred_username\", genericPrincipal.getName());",
                "+            modifiedProperties.put(\"authenticated-identity\", claims);",
                "+",
                "+        }",
                "+        Set<GroupPrincipal> groups = connection.getSubject().getPrincipals(GroupPrincipal.class);",
                "+        List<String> groupNames = groups.stream().map(GroupPrincipal::getName).collect(Collectors.toList());",
                "+        modifiedProperties.put(\"groups\", groupNames);",
                "+        return Collections.unmodifiableMap(modifiedProperties);",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public String getType()",
                "+    {",
                "+        return \"AUTH_IDENTITY\";",
                "+    }",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/NonBlockingConnectionTLSDelegate.java b/broker-core/src/main/java/org/apache/qpid/server/transport/NonBlockingConnectionTLSDelegate.java",
                "index fabd213a39..3e52716938 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/NonBlockingConnectionTLSDelegate.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/NonBlockingConnectionTLSDelegate.java",
                "@@ -26,2 +26,3 @@ import java.util.ArrayList;",
                " import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.Iterator;",
                "@@ -30,2 +31,3 @@ import java.util.ListIterator;",
                "+import javax.net.ssl.SNIHostName;",
                " import javax.net.ssl.SSLEngine;",
                "@@ -101,2 +103,5 @@ public class NonBlockingConnectionTLSDelegate implements NonBlockingConnectionDe",
                "                         _parent.setSelectedHost(hostName);",
                "+                        SSLParameters sslParameters = _sslEngine.getSSLParameters();",
                "+                        sslParameters.setServerNames(Collections.singletonList(new SNIHostName(hostName)));",
                "+                        _sslEngine.setSSLParameters(sslParameters);",
                "                     }",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "new file mode 100644",
                "index 0000000000..74f2738db7",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "@@ -0,0 +1,202 @@",
                "+/*",
                "+ * ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ * ",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ * ",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ * ",
                "+ */",
                "+package org.apache.qpid.server.transport.network.security.ssl;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.Socket;",
                "+import java.net.URL;",
                "+import java.security.GeneralSecurityException;",
                "+import java.security.KeyStore;",
                "+import java.security.Principal;",
                "+import java.security.PrivateKey;",
                "+import java.security.cert.X509Certificate;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Date;",
                "+import java.util.List;",
                "+",
                "+import javax.net.ssl.KeyManagerFactory;",
                "+import javax.net.ssl.SNIHostName;",
                "+import javax.net.ssl.SNIServerName;",
                "+import javax.net.ssl.SSLEngine;",
                "+import javax.net.ssl.X509ExtendedKeyManager;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class QpidBestFitX509KeyManager extends X509ExtendedKeyManager",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(QpidBestFitX509KeyManager.class);",
                "+    private static final long SIX_HOURS = 6L * 60L * 60L * 1000L;",
                "+",
                "+    private final X509ExtendedKeyManager _delegate;",
                "+    private final String _defaultAlias;",
                "+    private final List<String> _aliases;",
                "+",
                "+    public QpidBestFitX509KeyManager(String defaultAlias,",
                "+                                     URL keyStoreUrl, String keyStoreType,",
                "+                                     String keyStorePassword, String keyManagerFactoryAlgorithmName) throws GeneralSecurityException, IOException",
                "+    {",
                "+        KeyStore ks = SSLUtil.getInitializedKeyStore(keyStoreUrl,keyStorePassword,keyStoreType);",
                "+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyManagerFactoryAlgorithmName);",
                "+        kmf.init(ks, keyStorePassword.toCharArray());",
                "+        List<String> aliases = new ArrayList<>();",
                "+        for(String alias : Collections.list(ks.aliases()))",
                "+        {",
                "+            if(ks.isKeyEntry(alias))",
                "+            {",
                "+                aliases.add(alias);",
                "+            }",
                "+        }",
                "+        _aliases = Collections.unmodifiableList(aliases);",
                "+        _delegate = (X509ExtendedKeyManager)kmf.getKeyManagers()[0];",
                "+        _defaultAlias = defaultAlias;",
                "+    }",
                "+",
                "+    ",
                "+",
                "+    @Override",
                "+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        return  _defaultAlias == null ? _delegate.chooseClientAlias(keyType, issuers, socket) : _defaultAlias;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        return _delegate.chooseServerAlias(keyType, issuers, socket);",
                "+    }",
                "+",
                "+    @Override",
                "+    public X509Certificate[] getCertificateChain(String alias)",
                "+    {",
                "+        return _delegate.getCertificateChain(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getClientAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        return _delegate.getClientAliases(keyType, issuers);",
                "+    }",
                "+",
                "+    @Override",
                "+    public PrivateKey getPrivateKey(String alias)",
                "+    {",
                "+        return _delegate.getPrivateKey(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getServerAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        return _delegate.getServerAliases(keyType, issuers);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        return _defaultAlias == null ? _delegate.chooseEngineClientAlias(keyType, issuers, engine) : _defaultAlias;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        Date currentDate = new Date();",
                "+        final List<SNIServerName> serverNames = engine.getSSLParameters().getServerNames();",
                "+        if(serverNames.isEmpty())",
                "+        {",
                "+            return getDefaultServerAlias(keyType, issuers, engine);",
                "+        }",
                "+        else",
                "+        {",
                "+            List<String> validAliases = new ArrayList<>();",
                "+            List<String> invalidAliases = new ArrayList<>();",
                "+",
                "+            for(SNIServerName serverName : engine.getSSLParameters().getServerNames())",
                "+            {",
                "+                if(serverName instanceof SNIHostName)",
                "+                {",
                "+                    for(String alias : _aliases)",
                "+                    {",
                "+                        if(keyType.equalsIgnoreCase(getPrivateKey(alias).getAlgorithm()))",
                "+                        {",
                "+                            final X509Certificate[] certChain = getCertificateChain(alias);",
                "+                            X509Certificate cert = certChain[0];",
                "+                            if (SSLUtil.checkHostname(((SNIHostName) serverName).getAsciiName(), cert))",
                "+                            {",
                "+                                if (currentDate.after(cert.getNotBefore()) && currentDate.before(cert.getNotAfter()))",
                "+                                {",
                "+                                    validAliases.add(alias);",
                "+                                }",
                "+                                else",
                "+                                {",
                "+                                    invalidAliases.add(alias);",
                "+                                }",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            if(validAliases.isEmpty())",
                "+            {",
                "+                if(invalidAliases.isEmpty())",
                "+                {",
                "+                    return getDefaultServerAlias(keyType, issuers, engine);",
                "+                }",
                "+                else",
                "+                {",
                "+                    // all invalid, we'll just pick one",
                "+                    return invalidAliases.get(0);",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                if(validAliases.size() > 1)",
                "+                {",
                "+                    // return the first alias which has at least six hours validity before / after the current time",
                "+                    for(String alias : validAliases)",
                "+                    {",
                "+                        final X509Certificate cert = getCertificateChain(alias)[0];",
                "+                        if((currentDate.getTime() - cert.getNotBefore().getTime() > SIX_HOURS)",
                "+                           && (cert.getNotAfter().getTime() - currentDate.getTime() > SIX_HOURS))",
                "+                        {",
                "+                            return alias;",
                "+                        }",
                "+                    }",
                "+",
                "+                }",
                "+                return validAliases.get(0);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private String getDefaultServerAlias(final String keyType, final Principal[] issuers, final SSLEngine engine)",
                "+    {",
                "+        if(_defaultAlias != null)",
                "+        {",
                "+            return _defaultAlias;",
                "+        }",
                "+        else",
                "+        {",
                "+            return _delegate.chooseEngineServerAlias(keyType, issuers, engine);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "new file mode 100644",
                "index 0000000000..0abf44be72",
                "--- /dev/null",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ * ",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ * ",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ * ",
                "+ */",
                "+package org.apache.qpid.server.transport.network.security.ssl;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.Socket;",
                "+import java.net.URL;",
                "+import java.security.GeneralSecurityException;",
                "+import java.security.KeyStore;",
                "+import java.security.Principal;",
                "+import java.security.PrivateKey;",
                "+import java.security.cert.X509Certificate;",
                "+",
                "+import javax.net.ssl.KeyManagerFactory;",
                "+import javax.net.ssl.SSLEngine;",
                "+import javax.net.ssl.X509ExtendedKeyManager;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class QpidServerX509KeyManager extends X509ExtendedKeyManager",
                "+{",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(QpidServerX509KeyManager.class);",
                "+",
                "+    private X509ExtendedKeyManager _delegate;",
                "+    private String _alias;",
                "+",
                "+    public QpidServerX509KeyManager(String alias, URL keyStoreUrl, String keyStoreType,",
                "+                                    String keyStorePassword, String keyManagerFactoryAlgorithmName) throws GeneralSecurityException, IOException",
                "+    {",
                "+        this._alias = alias;",
                "+        KeyStore ks = SSLUtil.getInitializedKeyStore(keyStoreUrl,keyStorePassword,keyStoreType);",
                "+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyManagerFactoryAlgorithmName);",
                "+        kmf.init(ks, keyStorePassword.toCharArray());",
                "+        this._delegate = (X509ExtendedKeyManager)kmf.getKeyManagers()[0];",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        return _alias == null ? _delegate.chooseClientAlias(keyType, issuers, socket) : _alias;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)",
                "+    {",
                "+        LOGGER.debug(\"chooseServerAlias:Returning alias {}\", _alias);",
                "+        return _alias;",
                "+    }",
                "+",
                "+    @Override",
                "+    public X509Certificate[] getCertificateChain(String alias)",
                "+    {",
                "+        return _delegate.getCertificateChain(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getClientAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        return _delegate.getClientAliases(keyType, issuers);",
                "+    }",
                "+",
                "+    @Override",
                "+    public PrivateKey getPrivateKey(String alias)",
                "+    {",
                "+        return _delegate.getPrivateKey(alias);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getServerAliases(String keyType, Principal[] issuers)",
                "+    {",
                "+        LOGGER.debug(\"getServerAliases:Returning alias {}\", _alias);",
                "+        return new String[]{_alias};",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        return _alias == null ? _delegate.chooseEngineClientAlias(keyType, issuers, engine) : _alias;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)",
                "+    {",
                "+        LOGGER.debug(\"chooseEngineServerAlias:Returning alias {}\", _alias);",
                "+        return _alias;",
                "+    }",
                "+}",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "index 4eadb92853..9e6ab0a837 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java",
                "@@ -29,3 +29,7 @@ import java.io.InputStream;",
                " import java.io.StringReader;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                " import java.math.BigInteger;",
                "+import java.net.InetAddress;",
                " import java.net.URL;",
                "@@ -40,2 +44,3 @@ import java.security.Principal;",
                " import java.security.PrivateKey;",
                "+import java.security.SecureRandom;",
                " import java.security.cert.Certificate;",
                "@@ -51,4 +56,6 @@ import java.util.Arrays;",
                " import java.util.Collection;",
                "+import java.util.Date;",
                " import java.util.Iterator;",
                " import java.util.List;",
                "+import java.util.Set;",
                " import java.util.SortedSet;",
                "@@ -82,3 +89,101 @@ public class SSLUtil",
                "     private static final Integer DNS_NAME_TYPE = 2;",
                "-    public static final String[] TLS_PROTOCOL_PREFERENCES = new String[]{\"TLSv1.2\", \"TLSv1.1\", \"TLS\", \"TLSv1\"};",
                "+    private static final String[] TLS_PROTOCOL_PREFERENCES = new String[]{\"TLSv1.2\", \"TLSv1.1\", \"TLS\", \"TLSv1\"};",
                "+",
                "+",
                "+    private static final SecureRandom RANDOM = new SecureRandom();",
                "+",
                "+",
                "+    private static final Constructor<?> CONSTRUCTOR;",
                "+    private static final Method GENERATE_METHOD;",
                "+    private static final Method GET_PRIVATE_KEY_METHOD;",
                "+    private static final Method GET_SELF_CERTIFICATE_METHOD;",
                "+    private static final Constructor<?> X500_NAME_CONSTRUCTOR;",
                "+    private static final Constructor<?> DNS_NAME_CONSTRUCTOR;",
                "+    private static final Constructor<?> IP_ADDR_NAME_CONSTRUCTOR;",
                "+    private static final Constructor<?> GENERAL_NAMES_CONSTRUCTOR;",
                "+    private static final Constructor<?> GENERAL_NAME_CONSTRUCTOR;",
                "+    private static final Method ADD_NAME_TO_NAMES_METHOD;",
                "+    private static final Constructor<?> ALT_NAMES_CONSTRUCTOR;",
                "+    private static final Constructor<?> CERTIFICATE_EXTENSIONS_CONSTRUCTOR;",
                "+    private static final Method SET_EXTENSION_METHOD;",
                "+    private static final Method EXTENSION_GET_NAME_METHOD;",
                "+    private static final boolean CAN_GENERATE_CERTS;",
                "+",
                "+",
                "+    static",
                "+    {",
                "+",
                "+        Constructor<?> constructor = null;",
                "+        Method generateMethod = null;",
                "+        Method getPrivateKeyMethod = null;",
                "+        Method getSelfCertificateMethod = null;",
                "+        Constructor<?> x500NameConstructor = null;",
                "+        Constructor<?> dnsNameConstructor = null;",
                "+        Constructor<?> ipAddrNameConstructor = null;",
                "+        Constructor<?> generalNamesConstructor = null;",
                "+        Constructor<?> generalNameConstructor = null;",
                "+        Method addNameToNamesMethod = null;",
                "+        Constructor<?> altNamesConstructor = null;",
                "+        Constructor<?> certificateExtensionsConstructor = null;",
                "+        Method setExtensionMethod = null;",
                "+        Method extensionGetNameMethod = null;",
                "+        boolean canGenerateCerrts = false;",
                "+",
                "+        try",
                "+        {",
                "+            Class<?> certAndKeyGenClass;",
                "+            try",
                "+            {",
                "+                certAndKeyGenClass = Class.forName(\"sun.security.x509.CertAndKeyGen\");",
                "+            }",
                "+            catch (ClassNotFoundException e)",
                "+            {",
                "+                certAndKeyGenClass = Class.forName(\"sun.security.tools.keytool.CertAndKeyGen\");",
                "+            }",
                "+",
                "+            final Class<?> x500NameClass = Class.forName(\"sun.security.x509.X500Name\");",
                "+            final Class<?> certificateExtensionsClass = Class.forName(\"sun.security.x509.CertificateExtensions\");",
                "+            final Class<?> generalNamesClass = Class.forName(\"sun.security.x509.GeneralNames\");",
                "+            final Class<?> generalNameClass = Class.forName(\"sun.security.x509.GeneralName\");",
                "+            final Class<?> extensionClass = Class.forName(\"sun.security.x509.SubjectAlternativeNameExtension\");",
                "+",
                "+            constructor = certAndKeyGenClass.getConstructor(String.class, String.class);",
                "+            generateMethod = certAndKeyGenClass.getMethod(\"generate\", Integer.TYPE);",
                "+            getPrivateKeyMethod = certAndKeyGenClass.getMethod(\"getPrivateKey\");",
                "+            getSelfCertificateMethod = certAndKeyGenClass.getMethod(\"getSelfCertificate\", x500NameClass,",
                "+                                                                    Date.class, Long.TYPE, certificateExtensionsClass);",
                "+            x500NameConstructor = x500NameClass.getConstructor(String.class);",
                "+            dnsNameConstructor = Class.forName(\"sun.security.x509.DNSName\").getConstructor(String.class);",
                "+            ipAddrNameConstructor = Class.forName(\"sun.security.x509.IPAddressName\").getConstructor(String.class);",
                "+            generalNamesConstructor = generalNamesClass.getConstructor();",
                "+            generalNameConstructor = generalNameClass.getConstructor(Class.forName(\"sun.security.x509.GeneralNameInterface\"));",
                "+            addNameToNamesMethod = generalNamesClass.getMethod(\"add\", generalNameClass);",
                "+            altNamesConstructor = extensionClass.getConstructor(generalNamesClass);",
                "+            certificateExtensionsConstructor = certificateExtensionsClass.getConstructor();",
                "+            setExtensionMethod = certificateExtensionsClass.getMethod(\"set\", String.class, Object.class);",
                "+            extensionGetNameMethod = extensionClass.getMethod(\"getName\");",
                "+            canGenerateCerrts = true;",
                "+",
                "+        }",
                "+        catch (ClassNotFoundException | LinkageError | NoSuchMethodException e)",
                "+        {",
                "+            // ignore",
                "+        }",
                "+        GET_SELF_CERTIFICATE_METHOD = getSelfCertificateMethod;",
                "+        CONSTRUCTOR = constructor;",
                "+        GENERATE_METHOD = generateMethod;",
                "+        GET_PRIVATE_KEY_METHOD = getPrivateKeyMethod;",
                "+        X500_NAME_CONSTRUCTOR = x500NameConstructor;",
                "+        DNS_NAME_CONSTRUCTOR = dnsNameConstructor;",
                "+        IP_ADDR_NAME_CONSTRUCTOR = ipAddrNameConstructor;",
                "+        GENERAL_NAMES_CONSTRUCTOR = generalNamesConstructor;",
                "+        GENERAL_NAME_CONSTRUCTOR = generalNameConstructor;",
                "+        ADD_NAME_TO_NAMES_METHOD = addNameToNamesMethod;",
                "+        ALT_NAMES_CONSTRUCTOR = altNamesConstructor;",
                "+        CERTIFICATE_EXTENSIONS_CONSTRUCTOR = certificateExtensionsConstructor;",
                "+        SET_EXTENSION_METHOD = setExtensionMethod;",
                "+        EXTENSION_GET_NAME_METHOD = extensionGetNameMethod;",
                "+        CAN_GENERATE_CERTS = canGenerateCerrts;",
                "+    }",
                "+",
                "@@ -111,28 +216,6 @@ public class SSLUtil",
                "     {",
                "-        Principal p = cert.getSubjectDN();",
                "-        SortedSet<String> names = new TreeSet<>();",
                "-        String dn = p.getName();",
                "         try",
                "         {",
                "-            LdapName ldapName = new LdapName(dn);",
                "-            for (Rdn part : ldapName.getRdns())",
                "-            {",
                "-                if (part.getType().equalsIgnoreCase(\"CN\"))",
                "-                {",
                "-                    names.add(part.getValue().toString());",
                "-                    break;",
                "-                }",
                "-            }",
                "-",
                "-            if(cert.getSubjectAlternativeNames() != null)",
                "-            {",
                "-                for (List<?> entry : cert.getSubjectAlternativeNames())",
                "-                {",
                "-                    if (DNS_NAME_TYPE.equals(entry.get(0)))",
                "-                    {",
                "-                        names.add((String) entry.get(1));",
                "-                    }",
                "-                }",
                "-            }",
                "+            SortedSet<String> names = getNamesFromCert(cert);",
                "@@ -143,23 +226,3 @@ public class SSLUtil",
                "-            boolean match = false;",
                "-",
                "-            final String hostName = hostnameExpected.trim().toLowerCase();",
                "-            for (String cn : names)",
                "-            {",
                "-",
                "-                boolean doWildcard = cn.startsWith(\"*.\") &&",
                "-                                     cn.lastIndexOf('.') >= 3 &&",
                "-                                     !cn.matches(\"\\\\*\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");",
                "-",
                "-",
                "-                match = doWildcard",
                "-                        ? hostName.endsWith(cn.substring(1)) && hostName.indexOf(\".\") == (1 + hostName.length() - cn.length())",
                "-                        : hostName.equals(cn);",
                "-",
                "-                if (match)",
                "-                {",
                "-                    break;",
                "-                }",
                "-",
                "-            }",
                "+            boolean match = verifyHostname(hostnameExpected, names);",
                "             if (!match)",
                "@@ -174,2 +237,4 @@ public class SSLUtil",
                "         {",
                "+            Principal p = cert.getSubjectDN();",
                "+            String dn = p.getName();",
                "             throw new TransportException(\"SSL hostname verification failed. Could not parse name \" + dn, e);",
                "@@ -182,2 +247,69 @@ public class SSLUtil",
                "+    public static boolean checkHostname(String hostname, X509Certificate cert)",
                "+    {",
                "+        try",
                "+        {",
                "+            return verifyHostname(hostname, getNamesFromCert(cert));",
                "+        }",
                "+        catch (InvalidNameException | CertificateParsingException e)",
                "+        {",
                "+            return false;",
                "+        }",
                "+    }",
                "+",
                "+    private static boolean verifyHostname(final String hostnameExpected, final SortedSet<String> names)",
                "+    {",
                "+        boolean match = false;",
                "+",
                "+        final String hostName = hostnameExpected.trim().toLowerCase();",
                "+        for (String cn : names)",
                "+        {",
                "+",
                "+            boolean doWildcard = cn.startsWith(\"*.\") &&",
                "+                                 cn.lastIndexOf('.') >= 3 &&",
                "+                                 !cn.matches(\"\\\\*\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\");",
                "+",
                "+",
                "+            match = doWildcard",
                "+                    ? hostName.endsWith(cn.substring(1)) && hostName.indexOf(\".\") == (1 + hostName.length() - cn.length())",
                "+                    : hostName.equals(cn);",
                "+",
                "+            if (match)",
                "+            {",
                "+                break;",
                "+            }",
                "+",
                "+        }",
                "+        return match;",
                "+    }",
                "+",
                "+    private static SortedSet<String> getNamesFromCert(final X509Certificate cert)",
                "+            throws InvalidNameException, CertificateParsingException",
                "+    {",
                "+        Principal p = cert.getSubjectDN();",
                "+        String dn = p.getName();",
                "+        SortedSet<String> names = new TreeSet<>();",
                "+        LdapName ldapName = new LdapName(dn);",
                "+        for (Rdn part : ldapName.getRdns())",
                "+        {",
                "+            if (part.getType().equalsIgnoreCase(\"CN\"))",
                "+            {",
                "+                names.add(part.getValue().toString());",
                "+                break;",
                "+            }",
                "+        }",
                "+",
                "+        if(cert.getSubjectAlternativeNames() != null)",
                "+        {",
                "+            for (List<?> entry : cert.getSubjectAlternativeNames())",
                "+            {",
                "+                if (DNS_NAME_TYPE.equals(entry.get(0)))",
                "+                {",
                "+                    names.add((String) entry.get(1));",
                "+                }",
                "+            }",
                "+        }",
                "+        return names;",
                "+    }",
                "+",
                "     public static String getIdFromSubjectDN(String dn)",
                "@@ -820,2 +952,81 @@ public class SSLUtil",
                "     }",
                "+",
                "+    public static boolean canGenerateCerts()",
                "+    {",
                "+        return CAN_GENERATE_CERTS;",
                "+    }",
                "+",
                "+    public static KeyCertPair generateSelfSignedCertificate(final String keyAlgorithm,",
                "+                                                            final String signatureAlgorithm,",
                "+                                                            final int keyLength,",
                "+                                                            long startTime,",
                "+                                                            long duration,",
                "+                                                            String x500Name,",
                "+                                                            Set<String> dnsNames,",
                "+                                                            Set<InetAddress> addresses)",
                "+            throws IllegalAccessException, InvocationTargetException, InstantiationException",
                "+    {",
                "+        Object certAndKeyGen = CONSTRUCTOR.newInstance(keyAlgorithm, signatureAlgorithm);",
                "+        GENERATE_METHOD.invoke(certAndKeyGen, keyLength);",
                "+        final PrivateKey _privateKey = (PrivateKey) GET_PRIVATE_KEY_METHOD.invoke(certAndKeyGen);",
                "+",
                "+        Object generalNames = GENERAL_NAMES_CONSTRUCTOR.newInstance();",
                "+",
                "+        for(String dnsName : dnsNames)",
                "+        {",
                "+            if(dnsName.matches(\"[\\\\w&&[^\\\\d]][\\\\w\\\\d.-]*\"))",
                "+            {",
                "+                ADD_NAME_TO_NAMES_METHOD.invoke(generalNames,",
                "+                                                GENERAL_NAME_CONSTRUCTOR.newInstance(DNS_NAME_CONSTRUCTOR.newInstance(",
                "+                                                        dnsName)));",
                "+            }",
                "+        }",
                "+",
                "+        for(InetAddress inetAddress : addresses)",
                "+        {",
                "+            ADD_NAME_TO_NAMES_METHOD.invoke(generalNames, GENERAL_NAME_CONSTRUCTOR.newInstance(IP_ADDR_NAME_CONSTRUCTOR.newInstance(inetAddress.getHostAddress())));",
                "+        }",
                "+        Object certificateExtensions;",
                "+        if(dnsNames.isEmpty() && addresses.isEmpty())",
                "+        {",
                "+            certificateExtensions = null;",
                "+        }",
                "+        else",
                "+        {",
                "+            Object altNamesExtension = ALT_NAMES_CONSTRUCTOR.newInstance(generalNames);",
                "+            certificateExtensions = CERTIFICATE_EXTENSIONS_CONSTRUCTOR.newInstance();",
                "+            SET_EXTENSION_METHOD.invoke(certificateExtensions,",
                "+                                        EXTENSION_GET_NAME_METHOD.invoke(altNamesExtension),",
                "+                                        altNamesExtension);",
                "+        }",
                "+",
                "+        final X509Certificate _certificate = (X509Certificate) GET_SELF_CERTIFICATE_METHOD.invoke(certAndKeyGen,",
                "+                                                                                                  X500_NAME_CONSTRUCTOR",
                "+                                                                                                          .newInstance(x500Name),",
                "+                                                                                                  new Date(startTime),",
                "+                                                                                                  duration,",
                "+                                                                                                  certificateExtensions);",
                "+",
                "+        return new KeyCertPair()",
                "+        {",
                "+            @Override",
                "+            public PrivateKey getPrivateKey()",
                "+            {",
                "+                return _privateKey;",
                "+            }",
                "+",
                "+            @Override",
                "+            public X509Certificate getCertificate()",
                "+            {",
                "+                return _certificate;",
                "+            }",
                "+        };",
                "+",
                "+    }",
                "+",
                "+    public interface KeyCertPair",
                "+    {",
                "+        PrivateKey getPrivateKey();",
                "+        X509Certificate getCertificate();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/AutoGeneratedSelfSignedKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStoreImpl.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/auth/AuthIdentityConnectionPropertyEnricher.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/NonBlockingConnectionTLSDelegate.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidBestFitX509KeyManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/QpidServerX509KeyManager.java",
                "broker-core/src/main/java/org/apache/qpid/server/transport/network/security/ssl/SSLUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7567": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity, port, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7567",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "884fbc4aa17a5f141887af15d0aadfdf289b251e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515885166,
            "hunks": 5,
            "message": "QPID-6933: [System Tests] Move AMQP 0-x ExistingSocketTest to Qpid JMS 0-X client",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 50fadaf67a..f79d0a97b9 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -86,5 +86,2 @@ org.apache.qpid.server.stats.StatisticsReportingTest#*",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 555c25b328..d390a9fd81 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -28,5 +28,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartConsumerFlowSt",
                "-// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // QPID-3432: These tests test the behaviour of 0-8..-0-9-1 specific system property (amqj.default_syncwrite_timeout)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 64957e3c89..1743d07525 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-// Exclude tests of connection URL failover method property",
                "-org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-",
                " // Uses an 0-x client API to acknowledge up to a particular message rather than the most recent",
                "@@ -91,5 +88,2 @@ org.apache.qpid.server.store.berkeleydb.replication.TwoNodeTest#*",
                "-// Qpid JMS Client does not support the use of preestablished socket",
                "-org.apache.qpid.client.connection.ExistingSocketTest#*",
                "-",
                " // These tests assume names of queues backing durable subscriptions",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index d4052deace..3193b59b33 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -38,3 +38,2 @@ org.apache.qpid.client.failover.FailoverBehaviourTest#testFlowControlFlagResetOn",
                " org.apache.qpid.client.failover.FailoverBehaviourTest#testFailoverHandlerTimeoutReconnected",
                "-org.apache.qpid.server.failover.FailoverMethodTest#testNoFailover"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66faf8edd1fa0bc4be657747e5e1bb07afa91aa7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510164929,
            "hunks": 1,
            "message": "QPID-8025 : [Java Broker] Improve detach error message on unsubscribing from JMS shared subs Cherry picked from master e3aa40d",
            "diff": [
                "diff --git a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "index c4b4dd6418..095062d469 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "+++ b/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                "@@ -844,3 +844,19 @@ public class SendingLinkEndpoint extends AbstractLinkEndpoint<Source, Target>",
                "                 {",
                "-                    closingError = new Error(AmqpError.RESOURCE_LOCKED, e.getMessage());",
                "+                    String message;",
                "+                    if(sourceCapabilities.contains(Session_1_0.SHARED_CAPABILITY)",
                "+                       && sourceCapabilities.contains(ExchangeSendingDestination.TOPIC_CAPABILITY))",
                "+                    {",
                "+                        String subscriptionName = getLinkName();",
                "+                        int separator = subscriptionName.indexOf(\"|\");",
                "+                        if (separator > 0)",
                "+                        {",
                "+                            subscriptionName = subscriptionName.substring(0, separator);",
                "+                        }",
                "+                        message = \"There are active consumers on the shared subscription '\"+subscriptionName+\"'\";",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        message = e.getMessage();",
                "+                    }",
                "+                    closingError = new Error(AmqpError.RESOURCE_LOCKED, message);",
                "                 }"
            ],
            "changed_files": [
                "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8025": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/SendingLinkEndpoint.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8025",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7336b5203f5b190d0671473d36ea060cdf3fd165",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511726922,
            "hunks": 7,
            "message": "QPID-6933: [System Tests] Remove jndi client settings from profiles",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d2e3087412..3fe6f46bc6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -113,4 +113,2 @@",
                "     <profile.test_receive_timeout>1000</profile.test_receive_timeout>",
                "-    <profile.java.naming.factory.initial>org.apache.qpid.jndi.PropertiesFileInitialContextFactory</profile.java.naming.factory.initial>",
                "-    <profile.java.naming.provider.url>test-profiles${file.separator}test-provider.properties</profile.java.naming.provider.url>",
                "     <profile.qpid.tests.mms.messagestore.persistence>true</profile.qpid.tests.mms.messagestore.persistence>",
                "@@ -812,4 +810,2 @@",
                "             <qpid.tests.mms.messagestore.persistence>${profile.qpid.tests.mms.messagestore.persistence}</qpid.tests.mms.messagestore.persistence>",
                "-            <java.naming.factory.initial>${profile.java.naming.factory.initial}</java.naming.factory.initial>",
                "-            <java.naming.provider.url>${profile.java.naming.provider.url}</java.naming.provider.url>",
                "             <java.io.tmpdir>${java.io.tmpdir}</java.io.tmpdir>",
                "@@ -1249,4 +1245,2 @@",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"ProvidedStore\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "-        <profile.java.naming.factory.initial>org.apache.qpid.jms.jndi.JmsInitialContextFactory</profile.java.naming.factory.initial>",
                "-        <profile.java.naming.provider.url>test-profiles${file.separator}test-provider-1-0.properties</profile.java.naming.provider.url>",
                "         <profile.qpid.tests.mms.messagestore.persistence>true</profile.qpid.tests.mms.messagestore.persistence>",
                "@@ -1271,4 +1265,2 @@",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"ProvidedStore\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "-        <profile.java.naming.factory.initial>org.apache.qpid.jms.jndi.JmsInitialContextFactory</profile.java.naming.factory.initial>",
                "-        <profile.java.naming.provider.url>test-profiles${file.separator}test-provider-1-0.properties</profile.java.naming.provider.url>",
                "       </properties>",
                "@@ -1292,4 +1284,2 @@",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"ProvidedStore\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "-        <profile.java.naming.factory.initial>org.apache.qpid.jms.jndi.JmsInitialContextFactory</profile.java.naming.factory.initial>",
                "-        <profile.java.naming.provider.url>test-profiles${file.separator}test-provider-1-0.properties</profile.java.naming.provider.url>",
                "       </properties>",
                "@@ -1318,4 +1308,2 @@",
                "         <profile.virtualhostnode.context.blueprint>{\"type\":\"BDB\",\"globalAddressDomains\":\"${dollar.sign}{qpid.globalAddressDomains}\"}</profile.virtualhostnode.context.blueprint>",
                "-        <profile.java.naming.factory.initial>org.apache.qpid.jms.jndi.JmsInitialContextFactory</profile.java.naming.factory.initial>",
                "-        <profile.java.naming.provider.url>test-profiles${file.separator}test-provider-1-0.properties</profile.java.naming.provider.url>",
                "       </properties>",
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index 9db61d4289..b2935742e5 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -30,13 +30,2 @@",
                "-  <properties>",
                "-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>",
                "-    <test.working.directory>${basedir}/../..</test.working.directory>",
                "-    <test.resource.directory>${basedir}/../..</test.resource.directory>",
                "-    <test.systest.resource.directory>${basedir}/../../systests</test.systest.resource.directory>",
                "-    <profile.broker.version>v1_0</profile.broker.version>",
                "-    <profile.test.amqp_port_protocols>[\"AMQP_1_0\"]</profile.test.amqp_port_protocols>",
                "-    <profile.java.naming.factory.initial>org.apache.qpid.jms.jndi.JmsInitialContextFactory</profile.java.naming.factory.initial>",
                "-    <profile.java.naming.provider.url>test-profiles${file.separator}test-provider-1-0.properties</profile.java.naming.provider.url>",
                "-  </properties>",
                "-",
                "   <dependencies>"
            ],
            "changed_files": [
                "pom.xml",
                "systests/qpid-systests-jms_2.0/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "207941273d3585e00c71993ec35df5980649927b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511961977,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Add tests relaying on AMQP management into cpp profile test excludes",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index addb31a34b..973be3616b 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -249,2 +249,8 @@ org.apache.qpid.systest.AnonymousProducerTest#testSyncPublishIntoNonExistingQueu",
                " org.apache.qpid.server.routing.AlternateBindingRoutingTest#*",
                "+org.apache.qpid.server.queue.LastValueQueueTest#testConflatedQueueDepth",
                "+org.apache.qpid.server.queue.QueueDepthWithSelectorTest#test",
                "+org.apache.qpid.test.unit.ack.Acknowledge2ConsumersTest#*",
                "+org.apache.qpid.test.unit.ack.AcknowledgeOnMessageTest#*",
                "+org.apache.qpid.test.unit.ack.AcknowledgeTest#*",
                "+org.apache.qpid.test.unit.message.UTF8Test#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: amqp",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c0c5b1ffde7232b36a0b6b1422c7826323bff11",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514997125,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Refactor ObjectMessageClassWhitelistingTest as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 085b7b1b0c..92454e9be3 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -49,2 +49,4 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setMessageRedelivery(final boolean redelivery);",
                "+    ConnectionBuilder setDeserializationPolicyWhiteList(String whiteList);",
                "+    ConnectionBuilder setDeserializationPolicyBlackList(String blackList);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 27805c981a..eeb82ac90e 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -166,2 +166,16 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setDeserializationPolicyWhiteList(final String whiteList)",
                "+    {",
                "+        _options.put(\"objectMessageClassHierarchyWhiteList\", whiteList);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setDeserializationPolicyBlackList(final String blackList)",
                "+    {",
                "+        _options.put(\"objectMessageClassHierarchyBlackList\", blackList);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 24cdf457e2..2db1746875 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -180,2 +180,16 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setDeserializationPolicyWhiteList(final String whiteList)",
                "+    {",
                "+        _options.put(\"jms.deserializationPolicy.whiteList\", whiteList);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setDeserializationPolicyBlackList(final String blackList)",
                "+    {",
                "+        _options.put(\"jms.deserializationPolicy.blackList\", blackList);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 00eb4c89d1..c7711a32ec 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -35,5 +35,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// This test covers the client version specific mechanisms for restricting the types of Object which can be sent via an ObjectMessage",
                "-org.apache.qpid.client.message.ObjectMessageClassWhitelistingTest#*",
                "-",
                " // This test mainly covers the AMQP 0-x client's heartbeating implementation"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8e78fbe605ab8c5c6a7dfc89890793f160e75d71",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513959004,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Remove explict exchange/queue delete tests - these are mainly concerned with non-JMS implementations methods of the legacy client. The server side behaviour is now covered by prootcol tests.",
            "diff": [
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index a8cee14bca..fe30eded0d 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -68,7 +68,2 @@ org.apache.qpid.transport.ProtocolNegotiationTest#testProtocolNegotiationFromUns",
                "-// These tests are testing extensions to JMS on the 0-x client to manipulate AMQP 0-x model objects like Queues and Exchanges",
                "-org.apache.qpid.client.session.ExchangeDeleteTest#*",
                "-org.apache.qpid.client.session.QueueDeclareTest#*",
                "-org.apache.qpid.client.session.QueueDeleteTest#*",
                "-",
                " // Tests are tests of the 0-x client behaviour"
            ],
            "changed_files": [
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "88fd1245c6b4ef4fc47314079f24329f5fd0646e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511176782,
            "hunks": 1,
            "message": "QPID-8042: [Broker-J][AMQP 1.0] Add protocol test for pipelined connection open Cherry picked from 9daed1e",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "index 238c0a54a6..2390227f75 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java",
                "@@ -94,2 +94,10 @@ public abstract class Interaction<I extends Interaction>",
                "         sync();",
                "+",
                "+        if (_latestResponse.getBody() == null)",
                "+        {",
                "+            throw new IllegalStateException(String.format(\"Unexpected response. Expected '%s' got '%s'.\",",
                "+                                                          type.getSimpleName(),",
                "+                                                          _latestResponse.getClass()));",
                "+        }",
                "+",
                "         if (!type.isAssignableFrom(_latestResponse.getBody().getClass()))"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/Interaction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9daed1ed1f494d4814e551c58a08020c00e6b143"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, connect, amqp, connection",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a1cb443cd6fa2999881779b5d928a14b73b4bfd3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510935213,
            "hunks": 42,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 58cfc4be9e..81c01a8d1e 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 0956b8ad40..c3d192cdd4 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index 1183283fbc..09c4d63ea7 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index 0a1f3bd805..c4a771ef2e 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index 0049979e1a..34f1487138 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index 5b45ec0c87..86ca707b6b 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index c1a5235d21..5b34f92094 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 787b2383c1..d201c87639 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 53c520af42..8d3ff9cad9 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index 17bf49b245..084c4303f7 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index 9c0578429e..80450ddfc8 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index 369c748ea3..fefdf65779 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index a38ee45240..02ac3453ba 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index 320289097a..371bf42afe 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index 00554dd45b..e9803c78aa 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 5f6aed9e27..ca072c2219 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index 535eb018c8..f8bc430d5e 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index e366df6d0f..93297957be 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index 46d7ee99e2..e48af755e8 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index 466126d5c7..dffd08b8ae 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/example/pom.xml b/client/example/pom.xml",
                "index 11c72943c4..f317274f70 100644",
                "--- a/client/example/pom.xml",
                "+++ b/client/example/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 12c491a710..44d979d6cf 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index f95841d56f..9e1089072b 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index 421f7416ec..2ea7490a23 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index 18b9537121..2238522ed1 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-10/pom.xml b/doc/jms-client-0-10/pom.xml",
                "index 5aad7093cb..e67f33ac6f 100644",
                "--- a/doc/jms-client-0-10/pom.xml",
                "+++ b/doc/jms-client-0-10/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-8/pom.xml b/doc/jms-client-0-8/pom.xml",
                "index 6cadb8461a..c3aceb8dc7 100644",
                "--- a/doc/jms-client-0-8/pom.xml",
                "+++ b/doc/jms-client-0-8/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 8ad5a9ac8b..0834d82c7d 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/jca/pom.xml b/jca/pom.xml",
                "index a715ea9aa6..0c1cb45402 100644",
                "--- a/jca/pom.xml",
                "+++ b/jca/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/jca/rar/pom.xml b/jca/rar/pom.xml",
                "index d7e9cc143c..3e7821c7ea 100644",
                "--- a/jca/rar/pom.xml",
                "+++ b/jca/rar/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index e0850d3114..0a39ce39f5 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 0f7360a59b..3692384d2a 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index b42c178b13..b08f94c8fa 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index c3cd440dea..ad0c8621a1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-java-build</artifactId>",
                "-  <version>6.1.5</version>",
                "+  <version>6.1.6-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>6.1.5</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index a8f04caf8f..ed9ffa3512 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index c5dcaa6094..f8b4aef640 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>6.1.5</version>",
                "+  <version>6.1.6-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index f38fbe1c09..215289d362 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 75751bfe22..897f31b993 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 9e7f34d051..005ef321e6 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5</version>",
                "+        <version>6.1.6-SNAPSHOT</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 52e03ba223..bebf8bdc05 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5</version>",
                "+    <version>6.1.6-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "client/example/pom.xml",
                "client/pom.xml",
                "common/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/jms-client-0-10/pom.xml",
                "doc/jms-client-0-8/pom.xml",
                "doc/pom.xml",
                "jca/pom.xml",
                "jca/rar/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml, broker-plugins/management-http/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, client, amqp, provider",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "507b0c5b825284e248c0d89b360d0972640931c6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515592065,
            "hunks": 3,
            "message": "QPID-8040: [Broker-J] [Transport] Ensure that selection keys relating to non-accepting channels are always processed even if cancelled",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "index c67a219304..6c0ce8daed 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "@@ -179,3 +179,3 @@ class SelectorThread extends Thread",
                "             {",
                "-                if(key.isAcceptable())",
                "+                if (key.attachment() instanceof NonBlockingNetworkTransport)",
                "                 {",
                "@@ -200,7 +200,3 @@ class SelectorThread extends Thread",
                "-                    _workQueue.add(new Runnable()",
                "-                    {",
                "-                        @Override",
                "-                        public void run()",
                "-                        {",
                "+                    _workQueue.add(() -> {",
                "                             try",
                "@@ -239,3 +235,2 @@ class SelectorThread extends Thread",
                "                             }",
                "-                        }",
                "                     });"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8040": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3087443cd3f8a15dcbb5ca6f4bfb0ff939f8d920"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port, process",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8040",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb7353f4f8eef6536e97dbac8b6de8883a972b51",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1510935192,
            "hunks": 42,
            "message": "[maven-release-plugin] prepare release 6.1.5",
            "diff": [
                "diff --git a/bdbstore/pom.xml b/bdbstore/pom.xml",
                "index 539f5b63ff..58cfc4be9e 100644",
                "--- a/bdbstore/pom.xml",
                "+++ b/bdbstore/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/bdbstore/systests/pom.xml b/bdbstore/systests/pom.xml",
                "index 8821cd7731..0956b8ad40 100644",
                "--- a/bdbstore/systests/pom.xml",
                "+++ b/bdbstore/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/broker-codegen/pom.xml b/broker-codegen/pom.xml",
                "index 467d9ad352..1183283fbc 100644",
                "--- a/broker-codegen/pom.xml",
                "+++ b/broker-codegen/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "diff --git a/broker-core/pom.xml b/broker-core/pom.xml",
                "index ec7c2c40ab..0a1f3bd805 100644",
                "--- a/broker-core/pom.xml",
                "+++ b/broker-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/broker-plugins/access-control/pom.xml b/broker-plugins/access-control/pom.xml",
                "index e2a8a5740e..0049979e1a 100644",
                "--- a/broker-plugins/access-control/pom.xml",
                "+++ b/broker-plugins/access-control/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-10-protocol/pom.xml b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "index 9c143c3262..5b45ec0c87 100644",
                "--- a/broker-plugins/amqp-0-10-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-10-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-0-8-protocol/pom.xml b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "index e67e487a2e..c1a5235d21 100644",
                "--- a/broker-plugins/amqp-0-8-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-0-8-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-1-0-protocol/pom.xml b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "index 0878be5fcc..787b2383c1 100644",
                "--- a/broker-plugins/amqp-1-0-protocol/pom.xml",
                "+++ b/broker-plugins/amqp-1-0-protocol/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "index 6872b20d64..53c520af42 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "index e85b5c2e8b..17bf49b245 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "index 4530eddbb7..9c0578429e 100644",
                "--- a/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "+++ b/broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/derby-store/pom.xml b/broker-plugins/derby-store/pom.xml",
                "index 7b403de0da..369c748ea3 100644",
                "--- a/broker-plugins/derby-store/pom.xml",
                "+++ b/broker-plugins/derby-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-provider-bone/pom.xml b/broker-plugins/jdbc-provider-bone/pom.xml",
                "index b7e871b26b..a38ee45240 100644",
                "--- a/broker-plugins/jdbc-provider-bone/pom.xml",
                "+++ b/broker-plugins/jdbc-provider-bone/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/jdbc-store/pom.xml b/broker-plugins/jdbc-store/pom.xml",
                "index ae53a4cf1c..320289097a 100644",
                "--- a/broker-plugins/jdbc-store/pom.xml",
                "+++ b/broker-plugins/jdbc-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/logging-logback/pom.xml b/broker-plugins/logging-logback/pom.xml",
                "index d690b46bf2..00554dd45b 100644",
                "--- a/broker-plugins/logging-logback/pom.xml",
                "+++ b/broker-plugins/logging-logback/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-amqp/pom.xml b/broker-plugins/management-amqp/pom.xml",
                "index 9c426283b2..5f6aed9e27 100644",
                "--- a/broker-plugins/management-amqp/pom.xml",
                "+++ b/broker-plugins/management-amqp/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/management-http/pom.xml b/broker-plugins/management-http/pom.xml",
                "index 233c36232d..535eb018c8 100644",
                "--- a/broker-plugins/management-http/pom.xml",
                "+++ b/broker-plugins/management-http/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/memory-store/pom.xml b/broker-plugins/memory-store/pom.xml",
                "index 8903bf4870..e366df6d0f 100644",
                "--- a/broker-plugins/memory-store/pom.xml",
                "+++ b/broker-plugins/memory-store/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker-plugins/websocket/pom.xml b/broker-plugins/websocket/pom.xml",
                "index 52aba98763..46d7ee99e2 100644",
                "--- a/broker-plugins/websocket/pom.xml",
                "+++ b/broker-plugins/websocket/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/broker/pom.xml b/broker/pom.xml",
                "index 8381671fd1..466126d5c7 100644",
                "--- a/broker/pom.xml",
                "+++ b/broker/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/client/example/pom.xml b/client/example/pom.xml",
                "index b60ddb6334..11c72943c4 100644",
                "--- a/client/example/pom.xml",
                "+++ b/client/example/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 4e9530aa29..12c491a710 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 144bdc881a..f95841d56f 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/doc/java-broker/pom.xml b/doc/java-broker/pom.xml",
                "index 2f419add96..421f7416ec 100644",
                "--- a/doc/java-broker/pom.xml",
                "+++ b/doc/java-broker/pom.xml",
                "@@ -27,3 +27,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/doc/java-perftests/pom.xml b/doc/java-perftests/pom.xml",
                "index 5c65564fb6..18b9537121 100644",
                "--- a/doc/java-perftests/pom.xml",
                "+++ b/doc/java-perftests/pom.xml",
                "@@ -29,3 +29,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-10/pom.xml b/doc/jms-client-0-10/pom.xml",
                "index 7fdad264d4..5aad7093cb 100644",
                "--- a/doc/jms-client-0-10/pom.xml",
                "+++ b/doc/jms-client-0-10/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/doc/jms-client-0-8/pom.xml b/doc/jms-client-0-8/pom.xml",
                "index 2e18c9cfc3..6cadb8461a 100644",
                "--- a/doc/jms-client-0-8/pom.xml",
                "+++ b/doc/jms-client-0-8/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-doc</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/doc/pom.xml b/doc/pom.xml",
                "index 6972fe6212..8ad5a9ac8b 100644",
                "--- a/doc/pom.xml",
                "+++ b/doc/pom.xml",
                "@@ -28,3 +28,3 @@",
                "         <artifactId>qpid-java-build</artifactId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/jca/pom.xml b/jca/pom.xml",
                "index 4141e2734d..a715ea9aa6 100644",
                "--- a/jca/pom.xml",
                "+++ b/jca/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/jca/rar/pom.xml b/jca/rar/pom.xml",
                "index 6c76685c9a..d7e9cc143c 100644",
                "--- a/jca/rar/pom.xml",
                "+++ b/jca/rar/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/joramtests/pom.xml b/joramtests/pom.xml",
                "index 7036583ac4..e0850d3114 100644",
                "--- a/joramtests/pom.xml",
                "+++ b/joramtests/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/perftests/pom.xml b/perftests/pom.xml",
                "index 7f6195bba1..0f7360a59b 100644",
                "--- a/perftests/pom.xml",
                "+++ b/perftests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/perftests/visualisation-jfc/pom.xml b/perftests/visualisation-jfc/pom.xml",
                "index 8ad9948d98..b42c178b13 100644",
                "--- a/perftests/visualisation-jfc/pom.xml",
                "+++ b/perftests/visualisation-jfc/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index cdf4d8a227..c3cd440dea 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>qpid-java-build</artifactId>",
                "-  <version>6.1.5-SNAPSHOT</version>",
                "+  <version>6.1.5</version>",
                "   <packaging>pom</packaging>",
                "@@ -67,3 +67,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf/qpid-broker-j.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>6.1.5</tag>",
                "   </scm>",
                "diff --git a/qpid-perftests-systests/pom.xml b/qpid-perftests-systests/pom.xml",
                "index 5e1b49abf3..a8f04caf8f 100644",
                "--- a/qpid-perftests-systests/pom.xml",
                "+++ b/qpid-perftests-systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/qpid-systests-parent/pom.xml b/qpid-systests-parent/pom.xml",
                "index ab60873029..c5dcaa6094 100644",
                "--- a/qpid-systests-parent/pom.xml",
                "+++ b/qpid-systests-parent/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "@@ -27,3 +27,3 @@",
                "   <artifactId>qpid-systests-parent</artifactId>",
                "-  <version>6.1.5-SNAPSHOT</version>",
                "+  <version>6.1.5</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/qpid-test-utils/pom.xml b/qpid-test-utils/pom.xml",
                "index 07ed26070f..f38fbe1c09 100644",
                "--- a/qpid-test-utils/pom.xml",
                "+++ b/qpid-test-utils/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>",
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index b7ca7eb8cb..75751bfe22 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-systests-parent</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "     <relativePath>../qpid-systests-parent/pom.xml</relativePath>",
                "diff --git a/tck/pom.xml b/tck/pom.xml",
                "index 6ca142e454..9e7f34d051 100644",
                "--- a/tck/pom.xml",
                "+++ b/tck/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.qpid</groupId>",
                "-        <version>6.1.5-SNAPSHOT</version>",
                "+        <version>6.1.5</version>",
                "     </parent>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 41ead95015..52e03ba223 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>qpid-java-build</artifactId>",
                "-    <version>6.1.5-SNAPSHOT</version>",
                "+    <version>6.1.5</version>",
                "   </parent>"
            ],
            "changed_files": [
                "bdbstore/pom.xml",
                "bdbstore/systests/pom.xml",
                "broker-codegen/pom.xml",
                "broker-core/pom.xml",
                "broker-plugins/access-control/pom.xml",
                "broker-plugins/amqp-0-10-protocol/pom.xml",
                "broker-plugins/amqp-0-8-protocol/pom.xml",
                "broker-plugins/amqp-1-0-protocol/pom.xml",
                "broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml",
                "broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml",
                "broker-plugins/derby-store/pom.xml",
                "broker-plugins/jdbc-provider-bone/pom.xml",
                "broker-plugins/jdbc-store/pom.xml",
                "broker-plugins/logging-logback/pom.xml",
                "broker-plugins/management-amqp/pom.xml",
                "broker-plugins/management-http/pom.xml",
                "broker-plugins/memory-store/pom.xml",
                "broker-plugins/websocket/pom.xml",
                "broker/pom.xml",
                "client/example/pom.xml",
                "client/pom.xml",
                "common/pom.xml",
                "doc/java-broker/pom.xml",
                "doc/java-perftests/pom.xml",
                "doc/jms-client-0-10/pom.xml",
                "doc/jms-client-0-8/pom.xml",
                "doc/pom.xml",
                "jca/pom.xml",
                "jca/rar/pom.xml",
                "joramtests/pom.xml",
                "perftests/pom.xml",
                "perftests/visualisation-jfc/pom.xml",
                "pom.xml",
                "qpid-perftests-systests/pom.xml",
                "qpid-systests-parent/pom.xml",
                "qpid-test-utils/pom.xml",
                "systests/pom.xml",
                "tck/pom.xml",
                "tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1.5",
                "6.1.6",
                "6.1.7"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/amqp-msg-conv-0-10-to-1-0/pom.xml, broker-plugins/amqp-0-10-protocol/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-0-10/pom.xml, broker-plugins/amqp-1-0-protocol/pom.xml, broker-plugins/management-amqp/pom.xml, broker-plugins/amqp-msg-conv-0-8-to-1-0/pom.xml, broker-plugins/amqp-0-8-protocol/pom.xml, broker-plugins/management-http/pom.xml",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol, client, amqp, provider",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1c382bed0265b459cbc3d6f1f0dc3fa4c50cee2a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515582169,
            "hunks": 1,
            "message": "QPID-8042: Fix defect that prevents pipelining with header within protocol tests Revert saslSuccessfulAuthenticationWithPipelinedFrames to a readable style.",
            "diff": [
                "diff --git a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "index 5d40447085..fae1ce4f52 100644",
                "--- a/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "+++ b/systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java",
                "@@ -53,2 +53,11 @@ public class OutputHandler extends ChannelOutboundHandlerAdapter",
                "         }",
                "+        else if (msg instanceof ByteBuf)",
                "+        {",
                "+            ByteBuf buf = (ByteBuf) msg;",
                "+            final ByteBuffer bytes = ByteBuffer.allocate(buf.readableBytes());",
                "+            buf.readBytes(bytes.array());",
                "+            buf.release();",
                "+",
                "+            send(ctx, bytes, promise);",
                "+        }",
                "         else"
            ],
            "changed_files": [
                "systests/protocol-tests-core/src/main/java/org/apache/qpid/tests/protocol/OutputHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8042": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d8391ff7f5946e46c5c3840c628d80debe9e433"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, sasl, authentication",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: protocol",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8042",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c06450ac1cef869f7e87a168e2de4090773f436",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512570210,
            "hunks": 3,
            "message": "QPID-8040: [Broker-J] Handle CancelledKeyException on processing of selection keys",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "index 92f6bbc0ae..28dbfc5cf9 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java",
                "@@ -194,2 +194,7 @@ class SelectorThread extends Thread",
                "                     }",
                "+                    catch (CancelledKeyException e)",
                "+                    {",
                "+                        LOGGER.info(\"Failed to register selector on accepting port {}\"",
                "+                                    + \" because selector key is already cancelled\", localSocketAddress, e);",
                "+                    }",
                "@@ -224,2 +229,7 @@ class SelectorThread extends Thread",
                "                                 }",
                "+                                catch (CancelledKeyException e)",
                "+                                {",
                "+                                    LOGGER.info(\"Failed to register selector on accepting port {}\"",
                "+                                                + \" because selector key is already cancelled\", localSocketAddress, e);",
                "+                                }",
                "                                 finally",
                "@@ -241,3 +251,3 @@ class SelectorThread extends Thread",
                "                         }",
                "-                        catch (ClosedChannelException e)",
                "+                        catch (ClosedChannelException | CancelledKeyException e)",
                "                         {"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/transport/SelectorThread.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8040": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7e79ed78d186c02ac1ff6bcaec19138b24c255eb"
                ],
                [
                    "no-tag",
                    "34e38ae1ed3a5a519e875657142955f8e42766c7"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: process",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8040",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ad2e6a5e6f76399ea6c9bda61d386ad6b3631e33",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512062404,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move TemporaryTopicTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index cbd917c4f3..a47db57b2d 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -54,5 +54,2 @@ org.apache.qpid.test.unit.client.QueueSessionFactoryTest#testTopicSessionCannotC",
                "-",
                "-// The test tests something not required by the spec (see JMS 2.0 section 4.2.7). The new JMS client does not enforce this.",
                "-org.apache.qpid.test.unit.topic.TemporaryTopicTest#testDurableSubscriptionProhibited",
                " // Test uses AMQP 0-x ack modes and assumes the name of the queues backing subscriptions"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "461f842a66ba6ce001fb7b4f61e545a7d8189423",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515247876,
            "hunks": 9,
            "message": "QPID-6933: [System Tests] Refactor messaging acl tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/pom.xml b/systests/qpid-systests-jms-core/pom.xml",
                "index 40456dca6d..06c488afad 100644",
                "--- a/systests/qpid-systests-jms-core/pom.xml",
                "+++ b/systests/qpid-systests-jms-core/pom.xml",
                "@@ -107,2 +107,8 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-access-control</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 0bb57ce4df..6016f5617c 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -26,4 +26,7 @@ import java.net.InetSocketAddress;",
                " import java.nio.file.Files;",
                "+import java.security.Principal;",
                "+import java.security.PrivilegedAction;",
                " import java.text.SimpleDateFormat;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -32,2 +35,3 @@ import java.util.Date;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "@@ -36,2 +40,4 @@ import java.util.concurrent.atomic.AtomicInteger;",
                "+import javax.security.auth.Subject;",
                "+",
                " import ch.qos.logback.classic.LoggerContext;",
                "@@ -56,2 +62,3 @@ import org.apache.qpid.server.model.VirtualHostNode;",
                " import org.apache.qpid.server.plugin.PluggableService;",
                "+import org.apache.qpid.server.security.auth.TaskPrincipal;",
                " import org.apache.qpid.server.store.MemoryConfigurationStore;",
                "@@ -160,11 +167,21 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "         LOGGER.info(\"========================= cleaning up test environment for test : \" + testClass.getSimpleName() + \"#\" + method.getName());",
                "-        if (Boolean.getBoolean(\"broker.clean.between.tests\"))",
                "-        {",
                "-            _currentVirtualHostNode.delete();",
                "-        }",
                "-        else",
                "-        {",
                "-            _currentVirtualHostNode.setAttributes(Collections.singletonMap(VirtualHostNode.DEFAULT_VIRTUAL_HOST_NODE,",
                "-                                                                           false));",
                "-        }",
                "+",
                "+        Subject deleteSubject = new Subject(true,",
                "+                                            new HashSet<>(Arrays.asList(_systemLauncher.getSystemPrincipal(),",
                "+                                                                        new TaskPrincipal(\"afterTestMethod\"))),",
                "+                                            Collections.emptySet(),",
                "+                                            Collections.emptySet());",
                "+        Subject.doAs(deleteSubject, (PrivilegedAction<Object>) () -> {",
                "+            if (Boolean.getBoolean(\"broker.clean.between.tests\"))",
                "+            {",
                "+                _currentVirtualHostNode.delete();",
                "+            }",
                "+            else",
                "+            {",
                "+                _currentVirtualHostNode.setAttributes(Collections.singletonMap(VirtualHostNode.DEFAULT_VIRTUAL_HOST_NODE,",
                "+                                                                               false));",
                "+            }",
                "+            return null;",
                "+        });",
                "+",
                "         setClassQualifiedTestName(testClass.getName());",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 7e6231189c..fc833323c6 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -130,10 +130 @@ org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousAutoAckSes",
                "-//ACL tests not applicable for AMQP 1.0",
                "-org.apache.qpid.server.security.acl.MessagingACLTest#testPublishToDefaultExchangeSuccess",
                "-org.apache.qpid.server.security.acl.MessagingACLTest#testPublishToDefaultExchangeFailure",
                "-org.apache.qpid.server.security.acl.Amqp0xMessagingACLTest#*",
                "-",
                "-// QPID-7919 : We can't currently ACL the ability to create temporary queues (or exchanges) as these need to",
                "-// run as system as so avoid the ACL check.",
                "-org.apache.qpid.server.security.acl.MessagingACLTest#testCreateTemporaryQueueFailed",
                "-",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index f27acda263..1b423a4e51 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -62,5 +62,2 @@ org.apache.qpid.tests.protocol.v1_0.*",
                "-// QPID-7948: A publish confirms defect prevents this test passing.",
                "-org.apache.qpid.server.security.acl.MessagingACLTest#testPublishToTempTopicSuccess",
                "-",
                " // Test requires ability to address the $management node.  Fails for 0-9 only as client erroneously tries to declare an exchange"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/pom.xml",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c30050743a4ae5a0cb50e9f348dff06a00062be",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516190185,
            "hunks": 1,
            "message": "NO-JIRA: update year in web management console",
            "diff": [
                "diff --git a/broker-plugins/management-http/src/main/java/resources/footer.html b/broker-plugins/management-http/src/main/java/resources/footer.html",
                "index a7a62068d7..972e86f4d3 100644",
                "--- a/broker-plugins/management-http/src/main/java/resources/footer.html",
                "+++ b/broker-plugins/management-http/src/main/java/resources/footer.html",
                "@@ -21,3 +21,3 @@",
                "-<div class=\"footer\"><p>&#xA9; 2004-<span class=\"currentYear\">2017</span> The Apache Software Foundation.",
                "+<div class=\"footer\"><p>&#xA9; 2004-<span class=\"currentYear\">2018</span> The Apache Software Foundation.",
                "   <br/>"
            ],
            "changed_files": [
                "broker-plugins/management-http/src/main/java/resources/footer.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0dd791195161d8b047643320666d7bf797e56825"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: broker-plugins/management-http/src/main/java/resources/footer.html",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c38f9eee255667d55620a75d884bff7997776307",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514474589,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor consumer priority tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index d1637c23a4..1b42582327 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -186,5 +186,2 @@ org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#*",
                "-# The consumer x-priority feature is Java Broker Specific",
                "-org.apache.qpid.server.queue.ConsumerPriorityTest#*",
                "-",
                " #The C++ broker does not implement AMQP management",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 33a3cd6cfe..ee1058731a 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -44,3 +44 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#*",
                "-// These tests require some way to set properties on the link established by the client",
                "-org.apache.qpid.server.queue.ConsumerPriorityTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f57c6a56e04456acec515efbc959f652baf3b80f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512145743,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move some tests for factory methods in queue session to JMS 1.1 systests",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 7cec0bfe2c..08318100fe 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -41,7 +41,2 @@ org.apache.qpid.systest.management.amqp.AmqpManagementTest#testGetTypesOnVhostMa",
                "-",
                "-// client issue - the other tests demonstrate that it is not fulfilling the requirements of a TopicSession,",
                "-// so it shouldn't implement it ...",
                "-org.apache.qpid.test.unit.client.QueueSessionFactoryTest#testQueueSessionIsNotATopicSession",
                "-",
                " // Test uses AMQP 0-x ack modes and assumes the name of the queues backing subscriptions"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f96d50b9f7447c0e307cb5bb14f433300fc849f4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514414540,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Refactor anonymous producer tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index dcfc337f4b..0c493d448e 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -201,6 +201,2 @@ org.apache.qpid.server.queue.FlowToDiskTest#*",
                "-# QPID-7818: Messages published into non existing queue are discarded on 0-10 path",
                "-org.apache.qpid.systest.AnonymousProducerTest#testPublishIntoNonExistingQueue",
                "-org.apache.qpid.systest.AnonymousProducerTest#testSyncPublishIntoNonExistingQueue",
                "-",
                " # Tests require AMQP management",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index d0448fa24f..1d6d98e2ed 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -70,6 +70,2 @@ org.apache.qpid.tests.protocol.v1_0.*",
                "-// QPID-7818: Messages published into non existing queue are discarded on 0-10 path",
                "-org.apache.qpid.systest.AnonymousProducerTest#testPublishIntoNonExistingQueue",
                "-org.apache.qpid.systest.AnonymousProducerTest#testSyncPublishIntoNonExistingQueue",
                "-",
                " // Tests AMQP 1.0 specific routing semantics",
                "diff --git a/test-profiles/Java10UninvestigatedTestsExcludes b/test-profiles/Java10UninvestigatedTestsExcludes",
                "index 4402248198..9dd40a052c 100644",
                "--- a/test-profiles/Java10UninvestigatedTestsExcludes",
                "+++ b/test-profiles/Java10UninvestigatedTestsExcludes",
                "@@ -23,3 +23,2 @@",
                " QPID-XXXX: It could be a broker bug. The issue requires further investigation",
                "-org.apache.qpid.systest.AnonymousProducerTest#testPublishIntoNonExistingQueue",
                " org.apache.qpid.test.client.queue.QueuePolicyTest#testRejectPolicyMessageDepth"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10UninvestigatedTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac25f57435c352c6e835dbe8227339bde5a5b112",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513937748,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Refactor InvalidDestinationTest as a JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index 806d35b07f..8461664cef 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -42,2 +42,3 @@ import org.junit.rules.TestName;",
                "+import org.apache.qpid.server.model.Protocol;",
                " import org.apache.qpid.tests.utils.BrokerAdmin;",
                "@@ -75,4 +76,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "                            .setUsername(getBrokerAdmin().getValidUsername())",
                "-                           .setPassword(getBrokerAdmin().getValidPassword())",
                "-                ;",
                "+                           .setPassword(getBrokerAdmin().getValidPassword());",
                "     }",
                "@@ -202,2 +202,7 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    public Protocol getProtocol()",
                "+    {",
                "+        return Protocol.valueOf(\"AMQP_\" + System.getProperty(\"broker.version\", \"0-9-1\").replace('-', '_').replace('.', '_'));",
                "+    }",
                " }",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 20930e2f17..9089ee9386 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -96,6 +96,2 @@ org.apache.qpid.server.queue.QueueBindTest#*",
                "-// Tests for configuration options for the 0-x client",
                "-org.apache.qpid.test.unit.basic.InvalidDestinationTest#testInvalidDestinationOnMessageProducer",
                "-org.apache.qpid.test.unit.basic.InvalidDestinationTest#testInvalidDestinationOnMessageProducerURL",
                "-",
                " // Tests the issue of connection exceptions being generated for unroutable messages in the 0-x client"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "59218fdc3eeaa6ef1c7f535bcbb29edbbc9cb962",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511854602,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Add module for JMS 1.1 system tests and start moving JMS 1.1 tests into it",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3fe6f46bc6..b53c5ee177 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -195,2 +195,3 @@",
                "     <module>systests/systests-utils</module>",
                "+    <module>systests/qpid-systests-jms_1.1</module>",
                "     <module>systests/qpid-systests-jms_2.0</module>",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "new file mode 100644",
                "index 0000000000..a4b455dd76",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -0,0 +1,117 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+  Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  contributor license agreements.  See the NOTICE file distributed with",
                "+  this work for additional information regarding copyright ownership.",
                "+  The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  (the \"License\"); you may not use this file except in compliance with",
                "+  the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+  Unless required by applicable law or agreed to in writing, software",
                "+  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  See the License for the specific language governing permissions and",
                "+  limitations under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <parent>",
                "+        <groupId>org.apache.qpid</groupId>",
                "+        <artifactId>qpid-systests-parent</artifactId>",
                "+        <version>7.1.0-SNAPSHOT</version>",
                "+        <relativePath>../../qpid-systests-parent/pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <artifactId>qpid-systests-jms_1.1</artifactId>",
                "+    <name>Apache Qpid Broker-J JMS 1.1 System Tests</name>",
                "+    <description>JMS 1.1 system tests</description>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-bdbstore</artifactId>",
                "+            <scope>test</scope>",
                "+            <optional>true</optional>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.geronimo.specs</groupId>",
                "+            <artifactId>geronimo-jms_1.1_spec</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-plugins-amqp-1-0-protocol-bdb-link-store</artifactId>",
                "+            <optional>true</optional>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-systests-utils</artifactId>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <profiles>",
                "+        <profile>",
                "+            <id>addQpidJmsClientIfNecessary</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>!enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-jms-client</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>excludesTestsIfNotAmqp1-0</id>",
                "+            <activation>",
                "+                <property>",
                "+                    <name>enableAmqp0-x</name>",
                "+                </property>",
                "+            </activation>",
                "+            <build>",
                "+                <plugins>",
                "+                    <plugin>",
                "+                        <groupId>org.apache.maven.plugins</groupId>",
                "+                        <artifactId>maven-surefire-plugin</artifactId>",
                "+                        <configuration>",
                "+                            <excludes>",
                "+                                <exclude>**/*</exclude>",
                "+                            </excludes>",
                "+                        </configuration>",
                "+                    </plugin>",
                "+                </plugins>",
                "+            </build>",
                "+        </profile>",
                "+",
                "+    </profiles>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <configuration>",
                "+                    <systemPropertyVariables>",
                "+                        <qpid.initialConfigurationLocation>classpath:config-jms1-tests.json</qpid.initialConfigurationLocation>",
                "+                        <qpid.amqp.version>${profile.broker.version}</qpid.amqp.version>",
                "+                    </systemPropertyVariables>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/systests/qpid-systests-jms_1.1/src/main/java/org/apache/qpid/systests/jms_1_1/Jms1TestBase.java b/systests/qpid-systests-jms_1.1/src/main/java/org/apache/qpid/systests/jms_1_1/Jms1TestBase.java",
                "new file mode 100644",
                "index 0000000000..a19bc08bf1",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_1.1/src/main/java/org/apache/qpid/systests/jms_1_1/Jms1TestBase.java",
                "@@ -0,0 +1,147 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests.jms_1_1;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.Map;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Session;",
                "+import javax.jms.Topic;",
                "+import javax.naming.NamingException;",
                "+",
                "+import org.junit.BeforeClass;",
                "+import org.junit.Rule;",
                "+import org.junit.rules.TestName;",
                "+",
                "+import org.apache.qpid.test.utils.AmqpManagementFacade;",
                "+import org.apache.qpid.test.utils.ConnectionBuilder;",
                "+import org.apache.qpid.test.utils.JmsProvider;",
                "+import org.apache.qpid.test.utils.QpidJmsClient0xProvider;",
                "+import org.apache.qpid.test.utils.QpidJmsClientProvider;",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                "+import org.apache.qpid.tests.utils.BrokerAdminUsingTestBase;",
                "+",
                "+public abstract class Jms1TestBase extends BrokerAdminUsingTestBase",
                "+{",
                "+    private static JmsProvider _jmsProvider;",
                "+    private static AmqpManagementFacade _managementFacade;",
                "+",
                "+    @Rule",
                "+    public final TestName _testName = new TestName();",
                "+",
                "+    @BeforeClass",
                "+    public static void setUpTestBase()",
                "+    {",
                "+        if (\"1.0\".equals(System.getProperty(\"broker.version\", \"1.0\")))",
                "+        {",
                "+            _managementFacade = new AmqpManagementFacade(\"$management\");",
                "+            _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "+        }",
                "+        else",
                "+        {",
                "+            _managementFacade = new AmqpManagementFacade(\"ADDR:$management\");",
                "+            _jmsProvider = new QpidJmsClient0xProvider(_managementFacade);",
                "+        }",
                "+    }",
                "+",
                "+    protected ConnectionBuilder getConnectionBuilder()",
                "+    {",
                "+        InetSocketAddress brokerAddress = getBrokerAdmin().getBrokerAddress(BrokerAdmin.PortType.AMQP);",
                "+        return _jmsProvider.getConnectionBuilder()",
                "+                           .setHost(brokerAddress.getHostName())",
                "+                           .setPort(brokerAddress.getPort())",
                "+                           .setUsername(getBrokerAdmin().getValidUsername())",
                "+                           .setPassword(getBrokerAdmin().getValidPassword())",
                "+                ;",
                "+    }",
                "+",
                "+    protected void createEntityUsingAmqpManagement(final String entityName,",
                "+                                                   final String entityType,",
                "+                                                   final Map<String, Object> attributes)",
                "+            throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            _managementFacade.createEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected Object performOperationUsingAmqpManagement(final String name,",
                "+                                                         final String operation,",
                "+                                                         final String type,",
                "+                                                         Map<String, Object> arguments)",
                "+            throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            return _managementFacade.performOperationUsingAmqpManagement(name, operation, session, type, arguments);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected Connection getConnection() throws JMSException, NamingException",
                "+    {",
                "+        return getConnectionBuilder().build();",
                "+    }",
                "+",
                "+    protected long getReceiveTimeout()",
                "+    {",
                "+        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+    }",
                "+",
                "+    protected String getVirtualHostName()",
                "+    {",
                "+        return getClass().getSimpleName() + \"_\" + _testName.getMethodName();",
                "+    }",
                "+",
                "+    protected String getTestName()",
                "+    {",
                "+        return _testName.getMethodName();",
                "+    }",
                "+",
                "+    protected Topic createTopic(final String topicName) throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            return _jmsProvider.createTopic(connection, topicName);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms_1.1/src/main/resources/config-jms1-tests.json b/systests/qpid-systests-jms_1.1/src/main/resources/config-jms1-tests.json",
                "new file mode 100644",
                "index 0000000000..a578f3b9ca",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_1.1/src/main/resources/config-jms1-tests.json",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\", \"AMQP_0_10\", \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_0_8\", \"AMQP_0_9\", \"AMQP_0_9_1\", \"AMQP_0_10\", \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQPWS\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"transports\" : [\"WS\"],",
                "+    \"protocols\" : [ \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/test-profiles/CPPTransientExcludes b/test-profiles/CPPTransientExcludes",
                "index 0605cb8251..e30e9d6784 100644",
                "--- a/test-profiles/CPPTransientExcludes",
                "+++ b/test-profiles/CPPTransientExcludes",
                "@@ -19,5 +19,2 @@",
                "-// those tests need durable subscribe states to be persisted",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurSubRestoredAfterNonPersistentMessageSent",
                "-",
                " // those tests require broker recovery",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index d71913770c..76bd08c849 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -65,5 +65,2 @@ org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testConnectionStop",
                "-//Tests durable subscription selector verification behaviour that 0-8/0-9/0-9-1 cant provide",
                "-org.apache.qpid.test.unit.ct.DurableSubscriberTest#testResubscribeWithChangedSelectorAndRestart",
                "-",
                " // QPID-3396"
            ],
            "changed_files": [
                "pom.xml",
                "systests/qpid-systests-jms_1.1/pom.xml",
                "systests/qpid-systests-jms_1.1/src/main/java/org/apache/qpid/systests/jms_1_1/Jms1TestBase.java",
                "systests/qpid-systests-jms_1.1/src/main/resources/config-jms1-tests.json",
                "test-profiles/CPPTransientExcludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2925d8a9c0ae7cd10049aa884edec6bbec74d4b7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514546370,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor priority queue tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index cb245cfa4b..8fc0e03b36 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -29,5 +29,2 @@ org.apache.qpid.test.client.CloseOnNoRouteForMandatoryMessageTest#*",
                "-org.apache.qpid.server.queue.PriorityTest#*",
                "-org.apache.qpid.server.queue.AMQPriorityQueueTest#*",
                "-",
                " // the 0-10 c++ broker does not implement the extended LVQ semantics which the Qpid Broker-J does"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c3a18918e080150640ba35684add425078020d7",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515348842,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor authentication tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index e0bb609e59..a241ff50c9 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -57,2 +57,3 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setKeyAlias(String alias);",
                "+    ConnectionBuilder setSaslMechanisms(String... mechanism);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 539f12e125..6f68569927 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -55,2 +55,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     private String _keyAlias;",
                "+    private String _saslMechanisms;",
                "@@ -231,2 +232,9 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setSaslMechanisms(final String... mechanism)",
                "+    {",
                "+        _saslMechanisms = String.join(\" \", mechanism);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "@@ -307,2 +315,15 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+        if (_saslMechanisms != null)",
                "+        {",
                "+            if (_enableTls)",
                "+            {",
                "+                cUrlBuilder.append(\"&\");",
                "+            }",
                "+            else",
                "+            {",
                "+                cUrlBuilder.append(\"?\");",
                "+            }",
                "+            cUrlBuilder.append(\"sasl_mechs='\").append(_saslMechanisms).append('\\'');",
                "+        }",
                "+",
                "         if (_enableFailover)",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 9adf0fafd1..5b7f2682b5 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -236,2 +236,9 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setSaslMechanisms(final String... mechanism)",
                "+    {",
                "+        _options.put(\"amqp.saslMechanisms\", String.join(\",\", mechanism));",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index fc833323c6..40670d2e77 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -46,5 +46,2 @@ org.apache.qpid.test.unit.ack.RecoverTest#testRecoverSessionAfterCreditExhausted",
                "-// The new client does not (and should not) support our custom MD5 HEXED / HASHED mechanisms",
                "-org.apache.qpid.server.security.auth.manager.MD5AuthenticationManagerTest#*",
                "-",
                " // The binding logging tests focus on the behaviour of the old client with regard to creating (and binding) queues on"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: authentication",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f3012224957ef02cdc2b737002e6992f093b92fd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511998401,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Move CommitRollbackTest and RollbackOrderTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "index dc975d6c6d..c2dfe75244 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "@@ -25,2 +25,3 @@ import java.util.List;",
                "+import javax.jms.Connection;",
                " import javax.jms.Destination;",
                "@@ -29,2 +30,3 @@ import javax.jms.Message;",
                " import javax.jms.MessageProducer;",
                "+import javax.jms.Queue;",
                " import javax.jms.Session;",
                "@@ -37,3 +39,32 @@ public class Utils",
                "-    public static List<Message> sendMessage(Session session, Destination destination, int count) throws Exception",
                "+    public static void sendTextMessage(final Connection connection, final Destination destination, String message)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            MessageProducer producer = session.createProducer(destination);",
                "+            producer.send(session.createTextMessage(message));",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "+    public static void sendMessages(final Connection connection, final Destination destination, final int messageNumber)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            sendMessages(session, destination, messageNumber);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "+    public static List<Message> sendMessages(Session session, Destination destination, int count) throws JMSException",
                "     {",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 973be3616b..7bea664b4c 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -114,4 +114,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowContro",
                "-org.apache.qpid.test.client.RollbackOrderTest#testOrderingAfterRollbackOnMessage#*",
                "-",
                " // Excluded because plugins from Qpid Broker-J are not used in CPP broker",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index c67bc36162..28468754cb 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -39,5 +39,2 @@ org.apache.qpid.test.unit.close.JavaServerCloseRaceConditionTest#*",
                "-//QPID-1864: rollback with subscriptions does not work in 0-10 yet",
                "-org.apache.qpid.test.client.RollbackOrderTest#testOrderingAfterRollbackOnMessage",
                "-",
                " // QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 56ee05a1aa..52e1ba4c11 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -38,8 +38,2 @@ org.apache.qpid.test.unit.topic.TopicSessionTest#testNonMatchingMessagesHandledC",
                "-// These tests explicitly meddle with prefetch - maybe there should be equivalents for AMQP 1.0",
                "-org.apache.qpid.test.unit.transacted.CommitRollbackTest#testRollbackSessionAfterCreditExhausted",
                "-",
                "-// Excluded due to client issue QPIDJMS-231: Prefetched messages are not released on consumer close",
                "-org.apache.qpid.test.unit.transacted.CommitRollbackTest#testSend2ThenCloseAfter1andTryAgain",
                "-",
                " // This test covers the client version specific mechanisms for restricting the types of Object which can be sent via an ObjectMessage"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4542234d5c7cddfd739f5cb5ea97e9fd2ff3ee05",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515109393,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Refactor node auto-creation policy tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 182de05ed3..4d8fe5c1dc 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -164,5 +164,2 @@ org.apache.qpid.test.unit.client.connection.BrokerClosesClientConnectionTest#tes",
                "-#Node Creation Policy Tests use Qpid Broker-J Specific Config",
                "-org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#*",
                "-",
                " #The C++ broker does not implement AMQP management",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 0911088beb..db3316ca6a 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -58,5 +58,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testConnection",
                "-// There is no way in the 0-10 client to cause a send to fail when the message does not reach any queue",
                "-org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#testSendingToNonMatchingQueuePatternBURL",
                "-",
                " # Exclude the JMS 2.0 test suite",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index eb7f81fba2..7e6231189c 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -77,7 +77,2 @@ org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionL",
                "-// These tests specifically test BURL behaviour",
                "-org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#testSendingToQueuePatternBURL",
                "-org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#testSendingToNonMatchingQueuePatternBURL",
                "-org.apache.qpid.server.queue.NodeAutoCreationPolicyTest#testLegacyQueueDeclareArgumentAlternateBindingCreation",
                "-",
                " // Message encryption not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "98a9d1cff26a249c997e4abe4e49efe963402300",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515774495,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor TransactionTimeoutTest as JMS 1.1 extension test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index a6e6ee338c..5c197e73b1 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -82,7 +82,2 @@ org.apache.qpid.server.plugins.PluginTest#*",
                "-// Transacion timeouts not implemented in CPP broker",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutDisabledTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutConfigurationTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutTest#*",
                "-",
                " // Qpid Broker-J only",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 295f452248..6edd58ba65 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -25,6 +25,2 @@",
                "-// AMQP 1.0 allows more than one txn per session, so our mechanism of installing transaction timeout tickers will need to change",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutTest#*",
                "-org.apache.qpid.test.unit.transacted.TransactionTimeoutDisabledTest#*",
                "-",
                " // the received message is being treated as an object message (because it lacks the necessary JMS annotation?)"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8d028eff837c91aaff411ddea0059833395c0e9b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515106780,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor routing tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 8d0f750630..182de05ed3 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -177,3 +177,2 @@ org.apache.qpid.tests.protocol.v1_0.*",
                " # Tests require AMQP management",
                "-org.apache.qpid.server.routing.AlternateBindingRoutingTest#*",
                " org.apache.qpid.server.queue.QueueDepthWithSelectorTest#test",
                "@@ -184,3 +183,2 @@ org.apache.qpid.systest.MessageRoutingTest#*",
                "-# Exchange to Exchange bindings not support by CPP Broker.",
                "-org.apache.qpid.server.routing.ExchangeRoutingTest#*",
                "+"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e30acdd6d74cfe7ab7bf98c60a09c3cedf2f4182",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513850567,
            "hunks": 7,
            "message": "QPID-6933: [System Tests] Remove more redundant/poorly focused tests",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index c85821b351..d34a83432c 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -89,9 +89,3 @@ org.apache.qpid.server.queue.LiveQueueOperationsTest#*",
                "-// 0-10 is not supported by the MethodRegistry",
                "-org.apache.qpid.test.unit.close.JavaServerCloseRaceConditionTest#*",
                "-",
                "-// QPID-2084 : this test needs more work for 0-10",
                "-org.apache.qpid.test.unit.client.DynamicQueueExchangeCreateTest#*",
                "-",
                "-// QPID-2118 : JMS client for AMQP 0-10 has differrent error handling then 0-8 code path",
                "+// QPID-2118 : JMS client for AMQP 0-10 has different error handling then 0-8 code path",
                " org.apache.qpid.test.client.message.SelectorTest#testRuntimeSelectorError",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 28468754cb..ecd85a8181 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -36,5 +36,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelStartConsumerFlowSt",
                "-// 0-10 is not supported by the MethodRegistry",
                "-org.apache.qpid.test.unit.close.JavaServerCloseRaceConditionTest#*",
                "-",
                " // QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index cc4e13fd4e..81005c2421 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -38,5 +38,2 @@ org.apache.qpid.client.message.ObjectMessageClassWhitelistingTest#*",
                "-// This test checks that the client behaves in a non-JMS spec compliant way",
                "-org.apache.qpid.test.unit.message.JMSPropertiesTest#testQpidExtensionProperties",
                "-",
                " // This test mainly covers the AMQP 0-x client's heartbeating implementation",
                "@@ -135,5 +132,2 @@ org.apache.qpid.test.client.message.JMSXUserIDTest#*",
                "-// Test of 0-x client settings around creating exchanges/queues dynamically",
                "-org.apache.qpid.test.unit.client.DynamicQueueExchangeCreateTest#*",
                "-",
                " // test of 0-10 client specific behaviour",
                "@@ -145,5 +139,2 @@ org.apache.qpid.test.client.message.JMSDestinationTest#testQueueWithBindingUrlUs",
                "-// test of 0-x client threading / exception handling",
                "-org.apache.qpid.test.unit.close.JavaServerCloseRaceConditionTest#*",
                "-",
                " // Durable topic subscriptions will be reimplemented with the shared topic subscriptions (QPID-7569)",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 7dc8f117eb..17fe64b588 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -41,3 +41,2 @@ org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSDesti",
                " org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.test.unit.message.JMSPropertiesTest#testApplicationProperties",
                " org.apache.qpid.server.queue.AddressBasedSortedQueueTest#*",
                "@@ -54,5 +53,2 @@ org.apache.qpid.test.unit.client.connection.ConnectionTest#testUnsupportedSASLMe",
                "-// uses AMQP 0-10 related properties",
                "-org.apache.qpid.test.unit.message.JMSPropertiesTest#testQpidExtensionProperties",
                "-",
                " // Verification of unique client id is 0-10 specific"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SASL, AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ca74c59ac737a6a0979a58c2ab9ee9c8a4f0f9b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516808120,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] MessageEncryptionTest moved to client system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 031eb92c33..6e64fd2a81 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -59,7 +59,2 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setCompress(boolean compress);",
                "-    ConnectionBuilder setEncryptionRemoteTrustStore(String encryptionTrustStore);",
                "-    ConnectionBuilder setEncryptionTrustStore(String encryptionTrustStoreLocation);",
                "-    ConnectionBuilder setEncryptionTrustStorePassword(String password);",
                "-    ConnectionBuilder setEncryptionKeyStore(String encryptionKeyStoreLocation);",
                "-    ConnectionBuilder setEncryptionKeyStorePassword(String password);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index a4bf082d53..95e6134dbe 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -246,37 +246,2 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "-    {",
                "-        _options.put(\"encryption_remote_trust_store\", encryptionTrustStore);",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "-    {",
                "-        _options.put(\"encryption_trust_store\", encodeConnectionOption(encryptionTrustStoreLocation));",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "-    {",
                "-        _options.put(\"encryption_trust_store_password\", password);",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "-    {",
                "-        _options.put(\"encryption_key_store\", encodeConnectionOption(encryptionKeyStoreLocation));",
                "-        return this;",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "-    {",
                "-        _options.put(\"encryption_key_store_password\", password);",
                "-        return this;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 5ec1647f50..76e3a7656a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -249,32 +249,2 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "-    @Override",
                "-    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "-    {",
                "-        throw new UnsupportedOperationException();",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4ba6158f3fc9f86b07cf1dd24f2e778fbc182fc",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516528501,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Remove DurableSubscriptionTest - redundant/poorly focused",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 5636a05f29..68acca29d4 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -30,3 +30,2 @@ org.apache.qpid.test.client.timeouts.SyncWaitDelayTest#*",
                " org.apache.qpid.test.client.timeouts.SyncWaitTimeoutDelayTest#*",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/CPPNoPrefetchExcludes b/test-profiles/CPPNoPrefetchExcludes",
                "index ddfba4d8a6..969b9272a7 100644",
                "--- a/test-profiles/CPPNoPrefetchExcludes",
                "+++ b/test-profiles/CPPNoPrefetchExcludes",
                "@@ -19,3 +19 @@",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurabilityNOACK",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurabilityNOACKSessionPerConnection",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 30176f1119..327c14649d 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -21,3 +21,2 @@",
                " org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsingSelectorMakesTopicUnreachable",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 6edd58ba65..5686325e92 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -32,4 +32,2 @@ org.apache.qpid.test.unit.basic.BytesMessageTest#testModificationAfterSend",
                "-// Test uses AMQP 0-x ack modes and assumes the name of the queues backing subscriptions",
                "-org.apache.qpid.test.unit.topic.DurableSubscriptionTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/CPPNoPrefetchExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6dc32330fc7309650d7feaff8981ae72ddde81df",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511443660,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Change JMS 2.0 system tests to start broker per test suite",
            "diff": [
                "diff --git a/systests/qpid-systests-jms_2.0/pom.xml b/systests/qpid-systests-jms_2.0/pom.xml",
                "index ec664e1a9e..9db61d4289 100644",
                "--- a/systests/qpid-systests-jms_2.0/pom.xml",
                "+++ b/systests/qpid-systests-jms_2.0/pom.xml",
                "@@ -71,2 +71,7 @@",
                "+    <dependency>",
                "+      <groupId>org.apache.qpid</groupId>",
                "+      <artifactId>qpid-systests-utils</artifactId>",
                "+    </dependency>",
                "+",
                "   </dependencies>",
                "@@ -113,2 +118,16 @@",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <systemPropertyVariables>",
                "+            <qpid.initialConfigurationLocation>classpath:config-jms2-tests.json</qpid.initialConfigurationLocation>",
                "+          </systemPropertyVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+",
                " </project>",
                "diff --git a/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java b/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "new file mode 100644",
                "index 0000000000..e13a9d997b",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "@@ -0,0 +1,144 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests.jms_2_0;",
                "+",
                "+import java.net.InetSocketAddress;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import javax.jms.Connection;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.JMSRuntimeException;",
                "+import javax.jms.Session;",
                "+import javax.naming.NamingException;",
                "+",
                "+import org.junit.After;",
                "+import org.junit.BeforeClass;",
                "+import org.junit.Rule;",
                "+import org.junit.rules.TestName;",
                "+",
                "+import org.apache.qpid.test.utils.AmqpManagementFacade;",
                "+import org.apache.qpid.test.utils.ConnectionBuilder;",
                "+import org.apache.qpid.test.utils.JmsProvider;",
                "+import org.apache.qpid.test.utils.QpidJmsClientProvider;",
                "+import org.apache.qpid.tests.utils.BrokerAdmin;",
                "+import org.apache.qpid.tests.utils.BrokerAdminUsingTestBase;",
                "+import org.apache.qpid.url.URLSyntaxException;",
                "+",
                "+public abstract class Jms2TestBase extends BrokerAdminUsingTestBase",
                "+{",
                "+    private static JmsProvider _jmsProvider;",
                "+    private static final AmqpManagementFacade _managementFacade = new AmqpManagementFacade(\"$management\");",
                "+",
                "+    @Rule",
                "+    public final TestName _testName = new TestName();",
                "+    private final List<Connection> _connections = new ArrayList<>();",
                "+",
                "+    @BeforeClass",
                "+    public static void setUpTestBase()",
                "+    {",
                "+        _jmsProvider = new QpidJmsClientProvider(_managementFacade);",
                "+    }",
                "+",
                "+    @After",
                "+    public void tearDown()",
                "+    {",
                "+        List<JMSException> exceptions = new ArrayList<>();",
                "+        for (Connection connection : _connections)",
                "+        {",
                "+            try",
                "+            {",
                "+                connection.close();",
                "+            }",
                "+            catch (JMSException e)",
                "+            {",
                "+                exceptions.add(e);",
                "+            }",
                "+        }",
                "+        if (!exceptions.isEmpty())",
                "+        {",
                "+            JMSRuntimeException jmsRuntimeException = new JMSRuntimeException(\"Exception(s) occurred during closing of JMS connections.\");",
                "+            for (JMSException exception : exceptions)",
                "+            {",
                "+                jmsRuntimeException.addSuppressed(exception);",
                "+            }",
                "+            throw jmsRuntimeException;",
                "+        }",
                "+    }",
                "+",
                "+    protected ConnectionBuilder getConnectionBuilder()",
                "+    {",
                "+        InetSocketAddress brokerAddress = getBrokerAdmin().getBrokerAddress(BrokerAdmin.PortType.AMQP);",
                "+        return _jmsProvider.getConnectionBuilder()",
                "+                           .setHost(brokerAddress.getHostName())",
                "+                           .setPort(brokerAddress.getPort())",
                "+                           .setUsername(getBrokerAdmin().getValidUsername())",
                "+                           .setPassword(getBrokerAdmin().getValidPassword());",
                "+    }",
                "+",
                "+    protected void createEntityUsingAmqpManagement(final String entityName,",
                "+                                                   final String entityType,",
                "+                                                   final Map<String, Object> attributes)",
                "+            throws Exception",
                "+    {",
                "+        try (Connection connection = getConnection())",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(Session.CLIENT_ACKNOWLEDGE);",
                "+            _managementFacade.createEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+        }",
                "+    }",
                "+",
                "+    protected Object performOperationUsingAmqpManagement(final String name,",
                "+                                                         final String operation,",
                "+                                                         final String type,",
                "+                                                         Map<String, Object> arguments)",
                "+            throws Exception",
                "+    {",
                "+        try (Connection connection = getConnection())",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(Session.CLIENT_ACKNOWLEDGE);",
                "+            return _managementFacade.performOperationUsingAmqpManagement(name, operation, session, type, arguments);",
                "+        }",
                "+    }",
                "+",
                "+    protected Connection getConnection() throws JMSException, NamingException, URLSyntaxException",
                "+    {",
                "+        return getConnectionBuilder().build();",
                "+    }",
                "+",
                "+    protected long getReceiveTimeout()",
                "+    {",
                "+        return Long.getLong(\"qpid.test_receive_timeout\", 1000L);",
                "+    }",
                "+",
                "+    protected String getVirtualHostName()",
                "+    {",
                "+        return getClass().getSimpleName() + \"_\" + _testName.getMethodName();",
                "+    }",
                "+",
                "+    protected String getTestName()",
                "+    {",
                "+        return _testName.getMethodName();",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Utils.java b/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Utils.java",
                "new file mode 100644",
                "index 0000000000..4e5f76f91d",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Utils.java",
                "@@ -0,0 +1,97 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.systests.jms_2_0;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import javax.jms.BytesMessage;",
                "+import javax.jms.Destination;",
                "+import javax.jms.JMSException;",
                "+import javax.jms.MapMessage;",
                "+import javax.jms.Message;",
                "+import javax.jms.MessageProducer;",
                "+import javax.jms.ObjectMessage;",
                "+import javax.jms.Session;",
                "+import javax.jms.StreamMessage;",
                "+import javax.jms.TextMessage;",
                "+",
                "+public class Utils",
                "+{",
                "+    private static final int DEFAULT_MESSAGE_SIZE = 1024;",
                "+    public static final String INDEX = \"index\";",
                "+    private static final String DEFAULT_MESSAGE_PAYLOAD = createString(DEFAULT_MESSAGE_SIZE);",
                "+",
                "+    public static List<Message> sendMessage(Session session, Destination destination, int count) throws Exception",
                "+    {",
                "+        List<Message> messages = new ArrayList<>(count);",
                "+        MessageProducer producer = session.createProducer(destination);",
                "+",
                "+        for (int i = 0; i < (count); i++)",
                "+        {",
                "+            Message next = createNextMessage(session, i);",
                "+            producer.send(next);",
                "+            messages.add(next);",
                "+        }",
                "+",
                "+        if (session.getTransacted())",
                "+        {",
                "+            session.commit();",
                "+        }",
                "+",
                "+        return messages;",
                "+    }",
                "+",
                "+    public static Message createNextMessage(Session session, int msgCount) throws JMSException",
                "+    {",
                "+        Message message = createMessage(session, DEFAULT_MESSAGE_SIZE);",
                "+        message.setIntProperty(INDEX, msgCount);",
                "+",
                "+        return message;",
                "+    }",
                "+",
                "+    public static Message createMessage(Session session, int messageSize) throws JMSException",
                "+    {",
                "+        String payload;",
                "+        if (messageSize == DEFAULT_MESSAGE_SIZE)",
                "+        {",
                "+            payload = DEFAULT_MESSAGE_PAYLOAD;",
                "+        }",
                "+        else",
                "+        {",
                "+            payload = createString(messageSize);",
                "+        }",
                "+",
                "+        return session.createTextMessage(payload);",
                "+    }",
                "+",
                "+    private static String createString(final int stringSize)",
                "+    {",
                "+        final String payload;",
                "+        StringBuilder stringBuilder = new StringBuilder();",
                "+        for (int i = 0; i < stringSize; ++i)",
                "+        {",
                "+            stringBuilder.append(\"x\");",
                "+        }",
                "+        payload = stringBuilder.toString();",
                "+        return payload;",
                "+    }",
                "+}",
                "diff --git a/systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json b/systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json",
                "new file mode 100644",
                "index 0000000000..764ff891a4",
                "--- /dev/null",
                "+++ b/systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+{",
                "+  \"name\" : \"${broker.name}\",",
                "+  \"modelVersion\" : \"7.0\",",
                "+  \"authenticationproviders\" : [ {",
                "+    \"name\" : \"anon\",",
                "+    \"type\" : \"Anonymous\"",
                "+  }, {",
                "+    \"name\" : \"plain\",",
                "+    \"type\" : \"Plain\",",
                "+    \"secureOnlyMechanisms\" : [],",
                "+    \"users\" : [ {",
                "+      \"name\" : \"admin\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"admin\"",
                "+    }, {",
                "+      \"name\" : \"guest\",",
                "+      \"type\" : \"managed\",",
                "+      \"password\" : \"guest\"",
                "+    } ]",
                "+  } ],",
                "+  \"ports\" : [ {",
                "+    \"name\" : \"AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"plain\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\"",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\"",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\"",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQP\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"protocols\" : [ \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  }, {",
                "+    \"name\" : \"ANONYMOUS_AMQPWS\",",
                "+    \"type\" : \"AMQP\",",
                "+    \"authenticationProvider\" : \"anon\",",
                "+    \"port\" : \"0\",",
                "+    \"transports\" : [\"WS\"],",
                "+    \"protocols\" : [ \"AMQP_1_0\" ],",
                "+    \"virtualhostaliases\" : [ {",
                "+      \"name\" : \"defaultAlias\",",
                "+      \"type\" : \"defaultAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"hostnameAlias\",",
                "+      \"type\" : \"hostnameAlias\",",
                "+      \"durable\" : true",
                "+    }, {",
                "+      \"name\" : \"nameAlias\",",
                "+      \"type\" : \"nameAlias\",",
                "+      \"durable\" : true",
                "+    } ]",
                "+  } ],",
                "+  \"virtualhostnodes\" : []",
                "+}",
                "diff --git a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "index 68f0ab47a0..f171f4d422 100644",
                "--- a/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "+++ b/systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java",
                "@@ -195,3 +195,3 @@ public class EmbeddedBrokerPerClassAdminImpl implements BrokerAdmin",
                "         }",
                "-        return new InetSocketAddress(port);",
                "+        return InetSocketAddress.createUnresolved(\"localhost\", port);",
                "     }"
            ],
            "changed_files": [
                "systests/qpid-systests-jms_2.0/pom.xml",
                "systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Jms2TestBase.java",
                "systests/qpid-systests-jms_2.0/src/main/java/org/apache/qpid/systests/jms_2_0/Utils.java",
                "systests/qpid-systests-jms_2.0/src/main/resources/config-jms2-tests.json",
                "systests/systests-utils/src/main/java/org/apache/qpid/tests/utils/EmbeddedBrokerPerClassAdminImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cd432bcf6cbebf189f884fbbd6c3e789a50ab7b8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514548834,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Refactor queue overflow policy tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 8fc0e03b36..184207613f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -182,4 +182,2 @@ org.apache.qpid.tests.protocol.v1_0.*",
                "-org.apache.qpid.server.queue.FlowToDiskTest#*",
                "-",
                " # Tests require AMQP management",
                "diff --git a/test-profiles/Java10UninvestigatedTestsExcludes b/test-profiles/Java10UninvestigatedTestsExcludes",
                "index 9dd40a052c..d436d43d23 100644",
                "--- a/test-profiles/Java10UninvestigatedTestsExcludes",
                "+++ b/test-profiles/Java10UninvestigatedTestsExcludes",
                "@@ -22,4 +22,2 @@",
                "-QPID-XXXX: It could be a broker bug. The issue requires further investigation",
                "-org.apache.qpid.test.client.queue.QueuePolicyTest#testRejectPolicyMessageDepth",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 964aefdc94..ec48a4a5dd 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -43,2 +43 @@ org.apache.qpid.server.failover.FailoverMethodTest#testNoFailover",
                "-org.apache.qpid.server.queue.FlowToDiskTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10UninvestigatedTestsExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AMQP",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d663b3b4fac14d887411aa508b3e5ec3efea0b19",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511304618,
            "hunks": 0,
            "message": "QPID-8049 : Strip ICC profiles with copyright from PNG images",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png b/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png",
                "index f766197166..94b032a244 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png and b/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png b/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png",
                "index 5fcf9dd497..ecab94e1b5 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png and b/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-Add-Dialogue.png b/doc/java-broker/src/docbkx/images/Management-Web-Add-Dialogue.png",
                "index b476060daa..293ee261e4 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-Add-Dialogue.png and b/doc/java-broker/src/docbkx/images/Management-Web-Add-Dialogue.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-ContextVar.png b/doc/java-broker/src/docbkx/images/Management-Web-ContextVar.png",
                "index 3c62bc9f6e..e5952b01d2 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-ContextVar.png and b/doc/java-broker/src/docbkx/images/Management-Web-ContextVar.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-Edit-Dialogue.png b/doc/java-broker/src/docbkx/images/Management-Web-Edit-Dialogue.png",
                "index 92626e092e..5ac7e20212 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-Edit-Dialogue.png and b/doc/java-broker/src/docbkx/images/Management-Web-Edit-Dialogue.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-Logging-FileLogger.png b/doc/java-broker/src/docbkx/images/Management-Web-Logging-FileLogger.png",
                "index f1a1729076..b1b69ce752 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-Logging-FileLogger.png and b/doc/java-broker/src/docbkx/images/Management-Web-Logging-FileLogger.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-Logging-InclusionRule.png b/doc/java-broker/src/docbkx/images/Management-Web-Logging-InclusionRule.png",
                "index 848e6c3ccd..af27dad8da 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-Logging-InclusionRule.png and b/doc/java-broker/src/docbkx/images/Management-Web-Logging-InclusionRule.png differ",
                "diff --git a/doc/java-broker/src/docbkx/images/Management-Web-Logging-MemoryLogger.png b/doc/java-broker/src/docbkx/images/Management-Web-Logging-MemoryLogger.png",
                "index 647d2c366b..2d4ecb93c0 100644",
                "Binary files a/doc/java-broker/src/docbkx/images/Management-Web-Logging-MemoryLogger.png and b/doc/java-broker/src/docbkx/images/Management-Web-Logging-MemoryLogger.png differ"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png",
                "doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png",
                "doc/java-broker/src/docbkx/images/Management-Web-Add-Dialogue.png",
                "doc/java-broker/src/docbkx/images/Management-Web-ContextVar.png",
                "doc/java-broker/src/docbkx/images/Management-Web-Edit-Dialogue.png",
                "doc/java-broker/src/docbkx/images/Management-Web-Logging-FileLogger.png",
                "doc/java-broker/src/docbkx/images/Management-Web-Logging-InclusionRule.png",
                "doc/java-broker/src/docbkx/images/Management-Web-Logging-MemoryLogger.png"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8049": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "676d94341744a6c6d67470f05b867d06d44945af"
                ],
                [
                    "no-tag",
                    "612c2cb6c0857f3ca4344bbb47005d10dad156d8"
                ],
                [
                    "no-tag",
                    "852aa0b5fe7a04abfc3d766eea2c671fd8897380"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connect",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8049",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c04fdc9046e58ac5aff43b40288cb1deb141bfb",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515678904,
            "hunks": 31,
            "message": "QPID-8017: [Broker-J] [BDB] Add context variable that allows the JUL logging level of JUL loggers to be overridden. Cherry picked from 835efa5",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "index aa00932e33..ce4790c8fe 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                " import java.io.File;",
                "+import java.lang.reflect.Type;",
                " import java.util.Collection;",
                "@@ -78,5 +79,14 @@ public class BDBPreferenceStore extends AbstractBDBPreferenceStore",
                "                     @Override",
                "-                    public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+                    public <T> T getFacadeParameter(final Class<T> paremeterClass, final String parameterName, final T defaultValue)",
                "                     {",
                "-                        return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                        return BDBUtils.getContextValue(parent, paremeterClass, parameterName, defaultValue);",
                "+                    }",
                "+",
                "+                    @Override",
                "+                    public <T> T getFacadeParameter(final Class<T> paremeterClass,",
                "+                                                    final Type type,",
                "+                                                    final String parameterName,",
                "+                                                    final T defaultValue)",
                "+                    {",
                "+                        return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "                     }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "index 98fc2b3564..4b87636a24 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "@@ -21,2 +21,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Collections;",
                "@@ -28,3 +29,2 @@ import com.sleepycat.je.CacheMode;",
                " import com.sleepycat.je.CheckpointConfig;",
                "-import com.sleepycat.je.Cursor;",
                " import com.sleepycat.je.DatabaseConfig;",
                "@@ -37,3 +37,2 @@ import org.slf4j.LoggerFactory;",
                " import org.apache.qpid.server.model.ConfiguredObject;",
                "-import org.apache.qpid.server.store.StoreException;",
                " import org.apache.qpid.server.virtualhost.berkeleydb.BDBVirtualHost;",
                "@@ -162,3 +161,3 @@ public class BDBUtils",
                "     public static <T> T getContextValue(final ConfiguredObject<?> parent,",
                "-                                        Class<T> paremeterClass,",
                "+                                        final Class<T> paremeterClass,",
                "                                         final String parameterName,",
                "@@ -175,2 +174,18 @@ public class BDBUtils",
                "     }",
                "+",
                "+    public static <T> T getContextValue(final ConfiguredObject<?> parent,",
                "+                                        final Class<T> paremeterClass,",
                "+                                        final Type type,",
                "+                                        final String parameterName,",
                "+                                        final T defaultValue)",
                "+    {",
                "+        if (parent.getContextKeys(false).contains(parameterName))",
                "+        {",
                "+            return parent.getContextValue(paremeterClass, type, parameterName);",
                "+        }",
                "+        else",
                "+        {",
                "+            return defaultValue;",
                "+        }",
                "+    }",
                " }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "index 7a54b8b853..fcf6d78d93 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "@@ -56,2 +56,3 @@ public interface EnvironmentFacade",
                "     int DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT = 10;",
                "+    String JUL_LOGGER_LEVEL_OVERRIDE = \"qpid.bdb.je.jul_logger_level_override\";",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "index 38fe055fc1..c906d41160 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "@@ -21,2 +21,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -32,3 +33,6 @@ public interface StandardEnvironmentConfiguration",
                "-    int getFacadeParameter(String parameterName, int defaultValue);",
                "+    <T> T getFacadeParameter(final Class<T> paremeterClass, String parameterName, T defaultValue);",
                "+",
                "+    <T> T getFacadeParameter(Class<T> paremeterClass, Type type, String parameterName, T defaultValue);",
                "+",
                " }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "index 460d656518..271c54cb36 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "@@ -110,6 +110,3 @@ public class StandardEnvironmentFacade implements EnvironmentFacade",
                "         envConfig.setCacheMode(configuration.getCacheMode());",
                "-        int logHandlerCleanerProtectedFilesLimit = configuration.getFacadeParameter(LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "-                                                                                    DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "-        envConfig.setLoggingHandler(new Slf4jLoggingHandler(\"[\" + configuration.getName() + \"]\",",
                "-                                                            logHandlerCleanerProtectedFilesLimit));",
                "+        envConfig.setLoggingHandler(new Slf4jLoggingHandler(configuration));",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "index 9d8eab9689..08aabe2ff0 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -75,5 +76,11 @@ public class StandardEnvironmentFacadeFactory implements EnvironmentFacadeFactor",
                "             @Override",
                "-            public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+            public <T> T getFacadeParameter(final Class<T> clazz, final String parameterName, final T defaultValue)",
                "             {",
                "-                return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                return BDBUtils.getContextValue(parent, clazz, parameterName, defaultValue);",
                "+            }",
                "+",
                "+            @Override",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass, final Type type, final String parameterName, final T defaultValue)",
                "+            {",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "             }",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "index 4848346a4e..e05dd7dbb4 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "@@ -22,5 +22,12 @@ package org.apache.qpid.server.store.berkeleydb.logging;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.JUL_LOGGER_LEVEL_OVERRIDE;",
                "+import static org.apache.qpid.server.store.berkeleydb.EnvironmentFacade.LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME;",
                "+import static org.apache.qpid.server.util.ParameterizedTypes.MAP_OF_STRING_STRING;",
                "+",
                " import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "@@ -39,2 +46,4 @@ import org.slf4j.LoggerFactory;",
                "+import org.apache.qpid.server.store.berkeleydb.StandardEnvironmentConfiguration;",
                "+",
                "@@ -42,2 +51,4 @@ public class Slf4jLoggingHandler extends Handler",
                " {",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(Slf4jLoggingHandler.class);",
                "+",
                "     private static Pattern NOT_DELETED_DUE_TO_PROTECTION = Pattern.compile(\"Cleaner has ([0-9]+) files not deleted because they are protected.*\");",
                "@@ -46,5 +57,8 @@ public class Slf4jLoggingHandler extends Handler",
                "     private final int _logHandlerCleanerProtectedFilesLimit;",
                "+    private final String _prefix;",
                "+    private final Set<java.util.logging.Logger> _overridedenLoggers = new HashSet<>();",
                "-    public Slf4jLoggingHandler(final String prefix, final int logHandlerCleanerProtectedFilesLimit)",
                "+    public Slf4jLoggingHandler(final StandardEnvironmentConfiguration configuration)",
                "     {",
                "+        _prefix = configuration.getName();",
                "         setFormatter(new Formatter()",
                "@@ -54,6 +68,46 @@ public class Slf4jLoggingHandler extends Handler",
                "             {",
                "-                return prefix + \" \" + formatMessage(record);",
                "+                return _prefix + \" \" + formatMessage(record);",
                "+            }",
                "+        });",
                "+",
                "+        _logHandlerCleanerProtectedFilesLimit = configuration.getFacadeParameter(Integer.class,",
                "+                                                                                 LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "+                                                                                 DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "+",
                "+        final Map<String, String> levelOverrides = configuration.getFacadeParameter(Map.class,",
                "+                                                                                    MAP_OF_STRING_STRING,",
                "+                                                                                    JUL_LOGGER_LEVEL_OVERRIDE,",
                "+                                                                                    Collections.emptyMap());",
                "+        applyJulLoggerLevelOverrides(levelOverrides);",
                "+    }",
                "+",
                "+    private void applyJulLoggerLevelOverrides(final Map<String, String> julLoggerLevelOverrides)",
                "+    {",
                "+        julLoggerLevelOverrides.forEach((julLoggerName, julDesiredLevelString) -> {",
                "+            Level julDesiredLevel;",
                "+            try",
                "+            {",
                "+                julDesiredLevel = Level.parse(julDesiredLevelString);",
                "+            }",
                "+            catch (IllegalArgumentException e)",
                "+            {",
                "+                julDesiredLevel = null;",
                "+                LOGGER.warn(\"Unrecognised JUL level name '{}' in JUL override for logger name '{}'\",",
                "+                            julDesiredLevelString, julLoggerName);",
                "+            }",
                "+",
                "+            if (julDesiredLevel != null)",
                "+            {",
                "+                java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(julLoggerName);",
                "+                if (julLogger.getLevel() == null || !julLogger.isLoggable(julDesiredLevel))",
                "+                {",
                "+                    _overridedenLoggers.add(julLogger);  // Retain reference in case logger is not yet held by the class",
                "+                    julLogger.setLevel(julDesiredLevel);",
                "+",
                "+                    LOGGER.warn(\"JUL logger {} overridden to level {}\",",
                "+                                julLogger.getName(),",
                "+                                julLogger.getLevel());",
                "+                }",
                "             }",
                "         });",
                "-        _logHandlerCleanerProtectedFilesLimit = logHandlerCleanerProtectedFilesLimit;",
                "     }",
                "@@ -269,2 +323,3 @@ public class Slf4jLoggingHandler extends Handler",
                "     {",
                "+        _overridedenLoggers.clear();",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "index 24d2382e50..c5fe0d9250 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "@@ -255,9 +255,18 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "-        _masterTransferTimeout = configuration.getFacadeParameter(MASTER_TRANSFER_TIMEOUT_PROPERTY_NAME, DEFAULT_MASTER_TRANSFER_TIMEOUT);",
                "-        _dbPingSocketTimeout = configuration.getFacadeParameter(DB_PING_SOCKET_TIMEOUT_PROPERTY_NAME, DEFAULT_DB_PING_SOCKET_TIMEOUT);",
                "-        _remoteNodeMonitorInterval = configuration.getFacadeParameter(REMOTE_NODE_MONITOR_INTERVAL_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_INTERVAL);",
                "-        _remoteNodeMonitorTimeout = configuration.getFacadeParameter(REMOTE_NODE_MONITOR_TIMEOUT_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_TIMEOUT);",
                "-        _environmentRestartRetryLimit = configuration.getFacadeParameter(ENVIRONMENT_RESTART_RETRY_LIMIT_PROPERTY_NAME, DEFAULT_ENVIRONMENT_RESTART_RETRY_LIMIT);",
                "-        _executorShutdownTimeout = configuration.getFacadeParameter(EXECUTOR_SHUTDOWN_TIMEOUT_PROPERTY_NAME, DEFAULT_EXECUTOR_SHUTDOWN_TIMEOUT);",
                "-        _logHandlerCleanerProtectedFilesLimit = _configuration.getFacadeParameter(LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "+        _masterTransferTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                  MASTER_TRANSFER_TIMEOUT_PROPERTY_NAME,",
                "+                                                                  DEFAULT_MASTER_TRANSFER_TIMEOUT);",
                "+        _dbPingSocketTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                DB_PING_SOCKET_TIMEOUT_PROPERTY_NAME, DEFAULT_DB_PING_SOCKET_TIMEOUT);",
                "+        _remoteNodeMonitorInterval = configuration.getFacadeParameter(Integer.class,",
                "+                                                                      REMOTE_NODE_MONITOR_INTERVAL_PROPERTY_NAME, DEFAULT_REMOTE_NODE_MONITOR_INTERVAL);",
                "+        _remoteNodeMonitorTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                     REMOTE_NODE_MONITOR_TIMEOUT_PROPERTY_NAME,",
                "+                                                                     DEFAULT_REMOTE_NODE_MONITOR_TIMEOUT);",
                "+        _environmentRestartRetryLimit = configuration.getFacadeParameter(Integer.class,",
                "+                                                                         ENVIRONMENT_RESTART_RETRY_LIMIT_PROPERTY_NAME, DEFAULT_ENVIRONMENT_RESTART_RETRY_LIMIT);",
                "+        _executorShutdownTimeout = configuration.getFacadeParameter(Integer.class,",
                "+                                                                    EXECUTOR_SHUTDOWN_TIMEOUT_PROPERTY_NAME, DEFAULT_EXECUTOR_SHUTDOWN_TIMEOUT);",
                "+        _logHandlerCleanerProtectedFilesLimit = _configuration.getFacadeParameter(Integer.class,",
                "+                                                                                  LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT_PROPERTY_NAME,",
                "                                                                                   DEFAULT_LOG_HANDLER_CLEANER_PROTECTED_FILES_LIMIT);",
                "@@ -1487,3 +1496,3 @@ public class ReplicatedEnvironmentFacade implements EnvironmentFacade, StateChan",
                "-        envConfig.setLoggingHandler(new Slf4jLoggingHandler(\"[\" + _configuration.getName() + \"]\", _logHandlerCleanerProtectedFilesLimit));",
                "+        envConfig.setLoggingHandler(new Slf4jLoggingHandler(_configuration));",
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "index 1e7c6072b1..d6f6ea43b7 100644",
                "--- a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java",
                "@@ -22,2 +22,3 @@ package org.apache.qpid.server.store.berkeleydb.replication;",
                "+import java.lang.reflect.Type;",
                " import java.util.Map;",
                "@@ -114,7 +115,15 @@ public class ReplicatedEnvironmentFacadeFactory implements EnvironmentFacadeFact",
                "             @Override",
                "-            public int getFacadeParameter(final String parameterName, final int defaultValue)",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass, final String parameterName, final T defaultValue)",
                "             {",
                "-                return BDBUtils.getContextValue(parent, Integer.class, parameterName, defaultValue);",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, parameterName, defaultValue);",
                "             }",
                "+            @Override",
                "+            public <T> T getFacadeParameter(final Class<T> paremeterClass,",
                "+                                            final Type type,",
                "+                                            final String parameterName,",
                "+                                            final T defaultValue)",
                "+            {",
                "+                return BDBUtils.getContextValue(parent, paremeterClass, type, parameterName, defaultValue);",
                "+            }",
                "         };"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBPreferenceStore.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/BDBUtils.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/EnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentConfiguration.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/StandardEnvironmentFacadeFactory.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/logging/Slf4jLoggingHandler.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java",
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8017": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "835efa54b82d9780d4f59a2363919d302b68a10d"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8017",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f86ff21d0ed2735b1bbcba6bd71a2c018d14b482",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516569819,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor MessageEncryptionTest as JMS 1.1 extension test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 6e64fd2a81..031eb92c33 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -59,2 +59,7 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setCompress(boolean compress);",
                "+    ConnectionBuilder setEncryptionRemoteTrustStore(String encryptionTrustStore);",
                "+    ConnectionBuilder setEncryptionTrustStore(String encryptionTrustStoreLocation);",
                "+    ConnectionBuilder setEncryptionTrustStorePassword(String password);",
                "+    ConnectionBuilder setEncryptionKeyStore(String encryptionKeyStoreLocation);",
                "+    ConnectionBuilder setEncryptionKeyStorePassword(String password);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index ae56d3f4de..d465cb459f 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -162,3 +162,8 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     {",
                "-        Connection connection = getConnection();",
                "+        return createQueue(getVirtualHostName(), queueName);",
                "+    }",
                "+",
                "+    protected Queue createQueue(final String virtualHostName, final String queueName) throws Exception",
                "+    {",
                "+        Connection connection = getConnectionBuilder().setVirtualHost(virtualHostName).build();",
                "         try",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 2318634c8d..2771f32553 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -247,2 +247,37 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "+    {",
                "+        _options.put(\"encryption_remote_trust_store\", encryptionTrustStore);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "+    {",
                "+        _options.put(\"encryption_trust_store\", encryptionTrustStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "+    {",
                "+        _options.put(\"encryption_trust_store_password\", password);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "+    {",
                "+        _options.put(\"encryption_key_store\", encryptionKeyStoreLocation);",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "+    {",
                "+        _options.put(\"encryption_key_store_password\", password);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 76e3a7656a..5ec1647f50 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -249,2 +249,32 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionRemoteTrustStore(final String encryptionTrustStore)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStore(final String encryptionTrustStoreLocation)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionTrustStorePassword(final String password)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStore(final String encryptionKeyStoreLocation)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ConnectionBuilder setEncryptionKeyStorePassword(final String password)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index cc07920086..b5c908ecf6 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -60,2 +60,9 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.qpid</groupId>",
                "+            <artifactId>qpid-broker-core</artifactId>",
                "+            <classifier>tests</classifier>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+",
                "     </dependencies>",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index aa97f78b27..27ef27c1ad 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -41,5 +41,2 @@ org.apache.qpid.test.client.ProducerFlowControlTest#*",
                "-",
                "-// Message encryption not currently supported by the 1.0 client",
                "-org.apache.qpid.systest.messageencryption.MessageEncryptionTest#*",
                " // Message compression not currently supported by the 1.0 client"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "systests/qpid-systests-jms_1.1/pom.xml",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "37b6c9dbcdc7feb283cb0aba216939d2afeaf852",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511975947,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move ClientAcknowledgeTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/CPPTransientExcludes b/test-profiles/CPPTransientExcludes",
                "index e30e9d6784..969b9272a7 100644",
                "--- a/test-profiles/CPPTransientExcludes",
                "+++ b/test-profiles/CPPTransientExcludes",
                "@@ -19,6 +19 @@",
                "-// those tests require broker recovery",
                "-org.apache.qpid.test.unit.ct.DurableSubscriberTest#*",
                "-",
                "-// test requires a persistent store",
                "-org.apache.qpid.test.unit.ack.ClientAcknowledgeTest#testClientAckWithLargeFlusherPeriod",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 60839e721e..632f63d6d9 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.server.logging.AlertingTest#testAlertingReallyWorksWithRestart",
                " org.apache.qpid.server.logging.AlertingTest#testAlertingReallyWorksWithChanges",
                "-org.apache.qpid.test.unit.ack.ClientAcknowledgeTest#testClientAckWithLargeFlusherPeriod",
                "-",
                "-org.apache.qpid.test.unit.ct.DurableSubscriberTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPTransientExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5b07dbf6bcda6ab306904cfdfb6d92e03c676133",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512408701,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Add MaxDeliveryTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index 6e385b0648..085b7b1b0c 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -48,2 +48,3 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setPopulateJMSXUserID(boolean populateJMSXUserID);",
                "+    ConnectionBuilder setMessageRedelivery(final boolean redelivery);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index b5902eb263..27805c981a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -152,2 +152,16 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setMessageRedelivery(final boolean redelivery)",
                "+    {",
                "+        if (redelivery)",
                "+        {",
                "+            _options.put(\"rejectbehaviour\", \"server\");",
                "+        }",
                "+        else",
                "+        {",
                "+            _options.remove(\"rejectbehaviour\");",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 19179377d2..24cdf457e2 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -174,2 +174,8 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setMessageRedelivery(final boolean redelivery)",
                "+    {",
                "+        return this;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9599ec653fa30b18ea65b7c6d9f9ba4c34b7b798",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516223617,
            "hunks": 9,
            "message": "QPID-6933: [System Tests] Add CompressionTest to JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "index a241ff50c9..6e64fd2a81 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "@@ -58,2 +58,3 @@ public interface ConnectionBuilder",
                "     ConnectionBuilder setSaslMechanisms(String... mechanism);",
                "+    ConnectionBuilder setCompress(boolean compress);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index de74ace35c..ae56d3f4de 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -94,3 +94,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             _managementFacade.createEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "@@ -113,3 +113,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             return _managementFacade.performOperationUsingAmqpManagement(name, operation, session, type, arguments);",
                "@@ -218,4 +218,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "-            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+            updateEntityUsingAmqpManagement(entityName, entityType, attributes, connection);",
                "         }",
                "@@ -227,2 +226,19 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "+    protected void updateEntityUsingAmqpManagement(final String entityName,",
                "+                                                 final String entityType,",
                "+                                                 final Map<String, Object> attributes,",
                "+                                                 final Connection connection)",
                "+            throws JMSException",
                "+    {",
                "+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+        try",
                "+        {",
                "+            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+        }",
                "+        finally",
                "+        {",
                "+            session.close();",
                "+        }",
                "+    }",
                "+",
                "     protected void deleteEntityUsingAmqpManagement(final String entityName,",
                "@@ -235,3 +251,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "             connection.start();",
                "-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "             _managementFacade.deleteEntityUsingAmqpManagement(entityName, session, entityType);",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 6f68569927..2318634c8d 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -25,2 +25,3 @@ import java.net.URLEncoder;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.HashMap;",
                " import java.util.Hashtable;",
                "@@ -239,2 +240,9 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setCompress(final boolean compress)",
                "+    {",
                "+        _options.put(\"compressMessages\", compress);",
                "+        return this;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "index 5b7f2682b5..76e3a7656a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java",
                "@@ -243,2 +243,8 @@ public class QpidJmsClientConnectionBuilder implements ConnectionBuilder",
                "+    @Override",
                "+    public ConnectionBuilder setCompress(final boolean compress)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/ConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "051b2d078786b455cf84464d8cc33fe73ab1fd70",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513931945,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove 0-8 ConsumerFlowControlTest - reimplemented as 0-8 protocol test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index c3e1657f0f..f1f1426bd7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -41,5 +41,2 @@ org.apache.qpid.test.unit.client.MaxDeliveryCountTest#*",
                "-//this test checks explicitly for 0-8 flow control semantics",
                "-org.apache.qpid.test.client.ConsumerFlowControlTest#*",
                "-",
                " // 0-10 c++ broker doesn't implement virtual hosts, or those wackhy exchanges",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index a7d30cf4c4..8772d2d7fb 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -25,5 +25,2 @@ org.apache.qpid.systest.rest.BrokerRestTest#testSetCloseOnNoRoute",
                "-//this test checks explicitly for 0-8 flow control semantics",
                "-org.apache.qpid.test.client.ConsumerFlowControlTest#*",
                "-",
                " // 0-10 protocol doesn't support message bouncing",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 08bed8479b..20930e2f17 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -84,5 +84,2 @@ org.apache.qpid.client.session.QueueDeleteTest#*",
                "-// This test concerns 0-8/0-10 bytes limiting flow control",
                "-org.apache.qpid.test.client.ConsumerFlowControlTest#*",
                "-",
                " // Tests are tests of the 0-x client behaviour"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bdad33cfc464077e205684b27945d58495d8c7a1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516710481,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove client specific MaxDeliveryCountTest from broker-j after moving the test into the client source",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index c0de09cb0c..2ce365d634 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -22,5 +22,2 @@ org.apache.qpid.server.queue.ConflationQueueTest#*",
                "-// the 0-10 c++ broker does not implement DLQ",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#*",
                "-",
                " // InVM Broker tests",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 709399f1c4..56679639e7 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -65,7 +65,2 @@ org.apache.qpid.server.logging.TransientQueueLoggingTest#*",
                "-// Tests call Session#recover() to redeliver messages from broker which is not applicable to new client",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testSynchronousClientAckSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousClientAckSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousDupsOkSession",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testAsynchronousAutoAckSession",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index f397a12b05..d053dc8e02 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -29,4 +29,2 @@ org.apache.qpid.server.virtualhostnode.berkeleydb.*",
                "-org.apache.qpid.test.unit.client.MaxDeliveryCountTest#testWhenBrokerIsRestartedAfterEnqeuingMessages",
                "-",
                " org.apache.qpid.systest.rest.VirtualHostRestTest#testRecoverVirtualHostInDesiredStateStoppedWithDescription"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28130e5eff80be4c171faac92df54a47cf9569f0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516703879,
            "hunks": 7,
            "message": "QPID-6933: [System Tests] Fix MessageEncryptionTest",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "index 2771f32553..a4bf082d53 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java",
                "@@ -25,3 +25,2 @@ import java.net.URLEncoder;",
                " import java.nio.charset.StandardCharsets;",
                "-import java.util.HashMap;",
                " import java.util.Hashtable;",
                "@@ -257,3 +256,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     {",
                "-        _options.put(\"encryption_trust_store\", encryptionTrustStoreLocation);",
                "+        _options.put(\"encryption_trust_store\", encodeConnectionOption(encryptionTrustStoreLocation));",
                "         return this;",
                "@@ -271,3 +270,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "     {",
                "-        _options.put(\"encryption_key_store\", encryptionKeyStoreLocation);",
                "+        _options.put(\"encryption_key_store\", encodeConnectionOption(encryptionKeyStoreLocation));",
                "         return this;",
                "@@ -330,3 +329,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             {",
                "-                cUrlBuilder.append(\"&key_store='\").append(encodePathOption(_keyStoreLocation)).append('\\'');",
                "+                cUrlBuilder.append(\"&key_store='\").append(encodeBrokerOption(_keyStoreLocation)).append('\\'');",
                "             }",
                "@@ -338,3 +337,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "             {",
                "-                cUrlBuilder.append(\"&trust_store='\").append(encodePathOption(_trustStoreLocation)).append('\\'');",
                "+                cUrlBuilder.append(\"&trust_store='\").append(encodeBrokerOption(_trustStoreLocation)).append('\\'');",
                "             }",
                "@@ -413,3 +412,3 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "-    private String encodePathOption(final String canonicalPath)",
                "+    private String encodeBrokerOption(final String canonicalPath)",
                "     {",
                "@@ -417,4 +416,15 @@ public class QpidJmsClient0xConnectionBuilder implements ConnectionBuilder",
                "         {",
                "-            return URLEncoder.encode(URLEncoder.encode(canonicalPath, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\"),",
                "-                                     StandardCharsets.UTF_8.name());",
                "+            return URLEncoder.encode(encodeConnectionOption(canonicalPath), StandardCharsets.UTF_8.name());",
                "+        }",
                "+        catch (UnsupportedEncodingException e)",
                "+        {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                "+",
                "+    private String encodeConnectionOption(final String canonicalPath)",
                "+    {",
                "+        try",
                "+        {",
                "+            return URLEncoder.encode(canonicalPath, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\");",
                "         }"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xConnectionBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "031e00611a8e2a682281ce617266c090d670a1d8",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511716896,
            "hunks": 6,
            "message": "QPID-8054 : [Broker-J] KeyStore type and algorithm defaults should be materialised on creation",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "index 4051ddb7a7..216dbad1ed 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "@@ -22,2 +22,4 @@ package org.apache.qpid.server.security;",
                "+import static org.apache.qpid.server.model.Initialization.materialize;",
                "+",
                " import javax.net.ssl.KeyManagerFactory;",
                "@@ -59,6 +61,6 @@ public interface FileKeyStore<X extends FileKeyStore<X>> extends KeyStore<X>",
                "-    @ManagedAttribute( defaultValue = \"${keyStoreFile.keyManagerFactoryAlgorithm}\" )",
                "+    @ManagedAttribute( defaultValue = \"${keyStoreFile.keyManagerFactoryAlgorithm}\" , initialization = materialize)",
                "     String getKeyManagerFactoryAlgorithm();",
                "-    @ManagedAttribute( defaultValue = \"${keyStoreFile.keyStoreType}\" )",
                "+    @ManagedAttribute( defaultValue = \"${keyStoreFile.keyStoreType}\", initialization = materialize)",
                "     String getKeyStoreType();",
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStore.java b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStore.java",
                "index 40d8eeff11..a8e19751c0 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStore.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStore.java",
                "@@ -22,2 +22,4 @@ package org.apache.qpid.server.security;",
                "+import static org.apache.qpid.server.model.Initialization.materialize;",
                "+",
                " import javax.net.ssl.KeyManagerFactory;",
                "@@ -54,6 +56,6 @@ public interface FileTrustStore<X extends FileTrustStore<X>> extends TrustStore<",
                "-    @ManagedAttribute( defaultValue = \"${trustStoreFile.trustManagerFactoryAlgorithm}\")",
                "+    @ManagedAttribute( defaultValue = \"${trustStoreFile.trustManagerFactoryAlgorithm}\", initialization = materialize )",
                "     String getTrustManagerFactoryAlgorithm();",
                "-    @ManagedAttribute( defaultValue = \"${trustStoreFile.trustStoreType}\")",
                "+    @ManagedAttribute( defaultValue = \"${trustStoreFile.trustStoreType}\", initialization = materialize)",
                "     String getTrustStoreType();"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/security/FileKeyStore.java",
                "broker-core/src/main/java/org/apache/qpid/server/security/FileTrustStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8054": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: type",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8054",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc0fd3e09a403cb5a7ac27e82471f5f4204d7132",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512844611,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove redundant MessageProtocolConversionTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 6cf6646598..c85821b351 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -141,5 +141,2 @@ org.apache.qpid.server.queue.MessageGroupQueueTest#testGroupAssignmentSurvivesEm",
                "-// CPP Broker does not implement message conversion from 0-9-1",
                "-org.apache.qpid.server.message.MessageProtocolConversionTest#*",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index f1f3529e92..cc4e13fd4e 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -128,4 +128,2 @@ org.apache.qpid.test.unit.client.connection.ConnectionFactoryTest#*",
                " org.apache.qpid.test.unit.client.connection.ConnectionTest#*",
                "-// Tests conversion between 0-8/9/9-1 and 0-10",
                "-org.apache.qpid.server.message.MessageProtocolConversionTest#*",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 76bd08c849..7dc8f117eb 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -25,3 +25,2 @@",
                " org.apache.qpid.test.client.message.JMSDestinationTest#testReceiveResend",
                "-org.apache.qpid.server.message.MessageProtocolConversionTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f133f97c80c785704d4dcb21bae2d537956e7c75",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515260994,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor some ConnectionTests as JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 1dcbf1165a..f89b2425ea 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -35,4 +35,3 @@ org.apache.qpid.test.unit.client.MaxDeliveryCountTest#*",
                "-// 0-10 c++ broker doesn't implement virtual hosts, or those wackhy exchanges",
                "-org.apache.qpid.test.unit.client.connection.ConnectionTest#testUnresolvedVirtualHostFailure",
                "+// 0-10 c++ broker doesn't implement  wackhy exchanges",
                " org.apache.qpid.test.unit.client.connection.ConnectionTest#testDefaultExchanges"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: connect, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "40a7fdbe45b505885189199739222e82dc295d72",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514491512,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Remove QueueBindTest - this 0-8..0-91 test is covered by a specific 0-8..0-91 protocol tests and the general JMS 1.1 DurableSubscribtionTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 1b42582327..6b10a13c02 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -153,5 +153,2 @@ org.apache.qpid.client.HeartbeatTest#testHeartbeatsEnabledBrokerSide",
                "-// Exclude Qpid Broker-J specific behavior allowing queue re-bind to topic exchanges on 0.8/0-10 paths",
                "-org.apache.qpid.server.queue.QueueBindTest#testQueueCanBeReboundOnTopicExchange",
                "-",
                " // Tests queue message durability settings which are a Qpid Broker-J specific feature",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 1d6d98e2ed..0911088beb 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -52,5 +52,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowContro",
                "-// JMS 0-10 client does not support re-binding the queue to the same exchange",
                "-org.apache.qpid.server.queue.QueueBindTest#testQueueCanBeReboundOnTopicExchange",
                "-",
                " org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index fe30eded0d..00eb4c89d1 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -77,5 +77,2 @@ org.apache.qpid.test.client.failover.FailoverTest#*",
                "-// Tests explicit binding using the mechanisms of the 0-x client/protocol",
                "-org.apache.qpid.server.queue.QueueBindTest#*",
                "-",
                " // Tests the issue of connection exceptions being generated for unroutable messages in the 0-x client"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "064df4915ec9011b65ceb392892df0902af1d7b1",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511950615,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Prevent rat scanning of modules inside of systests when systests scan is performed",
            "diff": [
                "diff --git a/systests/pom.xml b/systests/pom.xml",
                "index 50e729c172..85041f82df 100644",
                "--- a/systests/pom.xml",
                "+++ b/systests/pom.xml",
                "@@ -160,4 +160,11 @@",
                "             <exclude>src/test/resources/org/apache/qpid/test/unit/message/**</exclude>",
                "+            <exclude>qpid-systests-jms-core/**</exclude>",
                "+            <exclude>qpid-systests-jms_1.1/**</exclude>",
                "             <exclude>qpid-systests-jms_2.0/**</exclude>",
                "+            <exclude>protocol-tests-core/**</exclude>",
                "             <exclude>protocol-tests-amqp-1-0/**</exclude>",
                "+            <exclude>protocol-tests-amqp-0-8/**</exclude>",
                "+            <exclude>protocol-tests-amqp-0-10/**</exclude>",
                "+            <exclude>systests-utils/**</exclude>",
                "+            <exclude>end-to-end-conversion-tests/**</exclude>",
                "           </excludes>"
            ],
            "changed_files": [
                "systests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: perform",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1298c89140edf118ab4bfaf96e71dd411405a4de",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511965333,
            "hunks": 5,
            "message": "QPID-6933: [System Tests] Move StreamMessageTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "index 6686b2ad3f..beece1132a 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "@@ -40,3 +40,3 @@ public interface JmsProvider",
                "-    Queue createTestQueue(Session session, String queueName) throws JMSException;",
                "+    Queue createQueue(Session session, String queueName) throws JMSException;",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index ca3be01e45..44ad555103 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -27,2 +27,3 @@ import javax.jms.Connection;",
                " import javax.jms.JMSException;",
                "+import javax.jms.Queue;",
                " import javax.jms.Session;",
                "@@ -141,2 +142,24 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    protected Queue createQueue(final String queueName) throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+            try",
                "+            {",
                "+                return _jmsProvider.createQueue(session, queueName);",
                "+            }",
                "+            finally",
                "+            {",
                "+                session.close();",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                " }",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "index 82549c041a..89de60a9a1 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "@@ -72,3 +72,3 @@ public class QpidJmsClient0xProvider implements JmsProvider",
                "     @Override",
                "-    public Queue createTestQueue(Session session, String queueName) throws JMSException",
                "+    public Queue createQueue(Session session, String queueName) throws JMSException",
                "     {",
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "index 9a222040de..d8af7f6ee8 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java",
                "@@ -63,3 +63,3 @@ public class QpidJmsClientProvider implements JmsProvider",
                "     @Override",
                "-    public Queue createTestQueue(Session session, String queueName) throws JMSException",
                "+    public Queue createQueue(Session session, String queueName) throws JMSException",
                "     {"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClient0xProvider.java",
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/QpidJmsClientProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, provider",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0b7666ebe869de6cfdc34e13ff9d6c8e18c0cd5e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511533264,
            "hunks": 6,
            "message": "QPID-8055: [Performance Tests] Remove hardcoded reference to legacy jms client context factory from perftests runner",
            "diff": [
                "diff --git a/perftests/src/main/java/org/apache/qpid/disttest/AbstractRunner.java b/perftests/src/main/java/org/apache/qpid/disttest/AbstractRunner.java",
                "index 1c9366ab8a..48f1bc51f1 100644",
                "--- a/perftests/src/main/java/org/apache/qpid/disttest/AbstractRunner.java",
                "+++ b/perftests/src/main/java/org/apache/qpid/disttest/AbstractRunner.java",
                "@@ -22,2 +22,8 @@ package org.apache.qpid.disttest;",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                " import java.util.HashMap;",
                "@@ -25,2 +31,3 @@ import java.util.Hashtable;",
                " import java.util.Map;",
                "+import java.util.Properties;",
                "@@ -43,9 +50,2 @@ public class AbstractRunner",
                "         String jndiConfig = getJndiConfig();",
                "-        Hashtable env = new Hashtable();",
                "-        env.put(Context.PROVIDER_URL, jndiConfig);",
                "-        // Java allows this to be overridden with a system property of the same name",
                "-        if (!System.getProperties().containsKey(InitialContext.INITIAL_CONTEXT_FACTORY))",
                "-        {",
                "-            env.put(InitialContext.INITIAL_CONTEXT_FACTORY, \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\");",
                "-        }",
                "@@ -53,5 +53,12 @@ public class AbstractRunner",
                "         {",
                "-            return  new InitialContext(env);",
                "+            Properties properties = new Properties();",
                "+            properties.put(Context.PROVIDER_URL, jndiConfig);",
                "+            try(InputStream is = getJndiConfigurationInputStream(jndiConfig))",
                "+            {",
                "+                properties.load(is);",
                "+            }",
                "+",
                "+            return  new InitialContext(properties);",
                "         }",
                "-        catch (NamingException e)",
                "+        catch (IOException | NamingException e)",
                "         {",
                "@@ -77,2 +84,15 @@ public class AbstractRunner",
                "     }",
                "+",
                "+    private InputStream getJndiConfigurationInputStream(final String providerUrl) throws IOException",
                "+    {",
                "+        try",
                "+        {",
                "+            URL url = new URL(providerUrl);",
                "+            return url.openStream();",
                "+        }",
                "+        catch (MalformedURLException mue)",
                "+        {",
                "+            return new FileInputStream(new File(providerUrl));",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "perftests/src/main/java/org/apache/qpid/disttest/AbstractRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8055": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, perform",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8055",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9089861a47551cb6caee363c961655e94c7e97fd",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511824885,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Remove compile time dependencies to legacy JMS client classes from JMSProvider implementations and reduce the amount of methods to create connection",
            "diff": [
                "diff --git a/test-profiles/Java10UninvestigatedTestsExcludes b/test-profiles/Java10UninvestigatedTestsExcludes",
                "index 82e8a89a7f..349fb71dad 100644",
                "--- a/test-profiles/Java10UninvestigatedTestsExcludes",
                "+++ b/test-profiles/Java10UninvestigatedTestsExcludes",
                "@@ -24,2 +24,5 @@ org.apache.qpid.client.prefetch.PrefetchBehaviourTest#*",
                "+QPID-XXXX: It could be a broker bug. The issue requires further inevestigation",
                "+org.apache.qpid.systest.AnonymousProducerTest#testPublishIntoNonExistingQueue",
                "+org.apache.qpid.test.client.queue.QueuePolicyTest#testRejectPolicyMessageDepth"
            ],
            "changed_files": [
                "test-profiles/Java10UninvestigatedTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, connect, connection, provider",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a28be4b508c330165a13c46295886260c5f2d471",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513853626,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Move JMS specific parts of PropertyValueTest to new suite.  Protocol specific parts already moved to protocol suites",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index d34a83432c..2860246fdd 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -196,9 +196,2 @@ org.apache.qpid.server.store.derby.*",
                "-// These tests are 0-8..0-91 specific",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_08091_HeadersFillContentHeaderFrame",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testOverlyLargeHeaderRejected_08091",
                "-",
                "-// QPID-6786 Sending headers larger than [first] transfer/frame size (which is outside the spec) isn't supported against the C++ broker",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_010_HeadersFillContentHeaderFrame",
                "-",
                " # QPID-7156: Test requires a Broker with a virtualhost",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index ecd85a8181..a7d30cf4c4 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -69,5 +69,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testConnection",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_08091_HeadersFillContentHeaderFrame",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testOverlyLargeHeaderRejected_08091",
                "-",
                " // There is no way in the 0-10 client to cause a send to fail when the message does not reach any queue",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 81005c2421..08bed8479b 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -84,7 +84,2 @@ org.apache.qpid.client.session.QueueDeleteTest#*",
                "-// The tests are Protocol version specific constraints on total header property size",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testOverlyLargeHeaderRejected_08091",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_08091_HeadersFillContentHeaderFrame",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_010_HeadersFillContentHeaderFrame",
                "-",
                " // This test concerns 0-8/0-10 bytes limiting flow control",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index 17fe64b588..d1883a9527 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -63,5 +63,2 @@ org.apache.qpid.test.unit.client.connection.ConnectionTest#testExceptionWhenUser",
                "-// Testing of large 0-10 headers (QPID-6786)",
                "-org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_010_HeadersFillContentHeaderFrame",
                "-",
                " # Exclude the JMS 2.0 test suite"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: protocol, part",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f3bfcd8284c67547a0064a672483915c01264955",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1504526563,
            "hunks": 2,
            "message": "QPID-7892: [Java Broker] Use Pattern#quote instead of own regexp escaping Cherry picked from 6.1.x b1eecae10f741f1564d1b04982da6be3427481e4",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java b/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "index 0d20a22b0c..2d56156c95 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "@@ -297,3 +297,2 @@ public class RollingPolicyDecorator implements RollingPolicy",
                "     {",
                "-        private static Pattern REGEX_SPECIAL_CHARACTERS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");",
                "         private final Path _baseFolder;",
                "@@ -320,8 +319,3 @@ public class RollingPolicyDecorator implements RollingPolicy",
                "             _baseFolder = new File(path).toPath().toAbsolutePath();",
                "-            _pattern = Pattern.compile(escape(path) + \"/\" + fileNamePattern);",
                "-        }",
                "-",
                "-        private String escape(String string)",
                "-        {",
                "-            return REGEX_SPECIAL_CHARACTERS.matcher(string).replaceAll(\"\\\\\\\\$0\");",
                "+            _pattern = Pattern.compile(Pattern.quote(path) + \"/\" + fileNamePattern);",
                "         }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7892": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b1eecae10f741f1564d1b04982da6be3427481e4"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7892",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "14a53f619628570426466655ef2aa1edac9085a3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516038608,
            "hunks": 1,
            "message": "QPID-8070:[Broker-J][JDBC Store] Instantiate asynchronous commits executor on open of JDBC message store Cherry picked from 17d4b5607f3fe73b9a37c53d38b7db980cf0b245",
            "diff": [
                "diff --git a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "index 5aba1f8ff2..cef4f79499 100644",
                "--- a/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "+++ b/broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java",
                "@@ -45,2 +45,3 @@ public abstract class GenericAbstractJDBCMessageStore extends AbstractJDBCMessag",
                "             super.setTablePrefix(getTablePrefix(parent));",
                "+            initMessageStore(parent);",
                "             doOpen(parent);"
            ],
            "changed_files": [
                "broker-plugins/jdbc-store/src/main/java/org/apache/qpid/server/store/jdbc/GenericAbstractJDBCMessageStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8070": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "17d4b5607f3fe73b9a37c53d38b7db980cf0b245"
                ],
                [
                    "no-tag",
                    "31d81ffe24b7c928bc855186258f74a8cf890a9a"
                ]
            ],
            "tags": [
                "7.0.1",
                "7.0.2",
                "7.0.3",
                "7.0.4",
                "7.0.5",
                "7.0.6",
                "7.0.7",
                "7.0.8",
                "7.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8070",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d9f3515dd58a9fc10bb95cb44f53b964e121be2a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1504183344,
            "hunks": 3,
            "message": "QPID-7892: [Java Broker] Escape regexp special characters in logback file name pattern for rolled log files Cherry picked from 6.1.x b3a65d505a510c1b6ecf55db644d5bab33eba7ab",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java b/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "index 1f8e49a321..0d20a22b0c 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java",
                "@@ -76,4 +76,5 @@ public class RollingPolicyDecorator implements RollingPolicy",
                "         String filePathRegExp = new FileNamePattern(filePathPattern, _decorated.getContext()).toRegex();",
                "-        _rolledFilesBaseFolder = getRolledFilesBaseFolderFromRegExp(filePathRegExp);",
                "-        _rolledFileRegExp = Pattern.compile(filePathRegExp);",
                "+        FilePathBaseFolderAndPatternPair pair = new FilePathBaseFolderAndPatternPair(filePathRegExp);",
                "+        _rolledFilesBaseFolder = pair.getBaseFolder();",
                "+        _rolledFileRegExp = pair.getPattern();",
                "         _currentScanTask = null;",
                "@@ -161,20 +162,2 @@ public class RollingPolicyDecorator implements RollingPolicy",
                "-    private Path getRolledFilesBaseFolderFromRegExp(String fileNamePattern)",
                "-    {",
                "-        int firstDigitPatternPosition= fileNamePattern.indexOf(\"\\\\d\");",
                "-        if (firstDigitPatternPosition == -1)",
                "-        {",
                "-            throw new RuntimeException(\"Rolling policy file pattern does not seem to contain date or integer token\");",
                "-        }",
                "-        int slashBeforeDigitPatternPosition = fileNamePattern.lastIndexOf(\"/\", firstDigitPatternPosition);",
                "-        if (slashBeforeDigitPatternPosition != -1)",
                "-        {",
                "-            return new File(fileNamePattern.substring(0, slashBeforeDigitPatternPosition)).toPath().toAbsolutePath();",
                "-        }",
                "-        else",
                "-        {",
                "-            return new File(System.getProperty(\"user.dir\")).toPath().toAbsolutePath();",
                "-        }",
                "-    }",
                "-",
                "     private class ScanTask implements Runnable",
                "@@ -311,2 +294,46 @@ public class RollingPolicyDecorator implements RollingPolicy",
                "     }",
                "+",
                "+    private static class FilePathBaseFolderAndPatternPair",
                "+    {",
                "+        private static Pattern REGEX_SPECIAL_CHARACTERS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");",
                "+        private final Path _baseFolder;",
                "+        private final Pattern _pattern;",
                "+",
                "+        public FilePathBaseFolderAndPatternPair(String fileNamePattern)",
                "+        {",
                "+            String path;",
                "+            int firstDigitPatternPosition= fileNamePattern.indexOf(\"\\\\d\");",
                "+            if (firstDigitPatternPosition == -1)",
                "+            {",
                "+                throw new RuntimeException(\"Rolling policy file pattern does not seem to contain date or integer token\");",
                "+            }",
                "+            int slashBeforeDigitPatternPosition = fileNamePattern.lastIndexOf(\"/\", firstDigitPatternPosition);",
                "+            if (slashBeforeDigitPatternPosition != -1)",
                "+            {",
                "+                path = fileNamePattern.substring(0, slashBeforeDigitPatternPosition);",
                "+                fileNamePattern = fileNamePattern.substring( slashBeforeDigitPatternPosition + 1);",
                "+            }",
                "+            else",
                "+            {",
                "+                path = System.getProperty(\"user.dir\");",
                "+            }",
                "+            _baseFolder = new File(path).toPath().toAbsolutePath();",
                "+            _pattern = Pattern.compile(escape(path) + \"/\" + fileNamePattern);",
                "+        }",
                "+",
                "+        private String escape(String string)",
                "+        {",
                "+            return REGEX_SPECIAL_CHARACTERS.matcher(string).replaceAll(\"\\\\\\\\$0\");",
                "+        }",
                "+",
                "+        public Path getBaseFolder()",
                "+        {",
                "+            return _baseFolder;",
                "+        }",
                "+",
                "+        public Pattern getPattern()",
                "+        {",
                "+            return _pattern;",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/logging/logback/RollingPolicyDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-7892": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b3a65d505a510c1b6ecf55db644d5bab33eba7ab"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-7892",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f9f5b958c3d4bf0a83a2512ef199b9283d8cc633",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511375825,
            "hunks": 0,
            "message": "NO-JIRA: [Documentation] Remove redundant JMX related screen images",
            "diff": [
                "diff --git a/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png b/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png",
                "deleted file mode 100644",
                "index 94b032a244..0000000000",
                "Binary files a/doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png and /dev/null differ",
                "diff --git a/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png b/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png",
                "deleted file mode 100644",
                "index ecab94e1b5..0000000000",
                "Binary files a/doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png and /dev/null differ"
            ],
            "changed_files": [
                "doc/java-broker/src/docbkx/images/JMX-Connect-MBeans.png",
                "doc/java-broker/src/docbkx/images/JMX-Connect-Remote.png"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connect",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ac3898e3e4bfe071fcc5b4f4392ba0124f274905",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515945202,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Reverted unintentional removal of exclusion for FailoverMethodTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 61a5e8a8cb..821fe48be7 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -121,3 +121,3 @@ org.apache.qpid.server.store.derby.*",
                " # QPID-7156: Test requires a Broker with a virtualhost",
                "-org.apache.qpid.test.unit.client.connection.BrokerClosesClientConnectionTest#testClientCloseOnVirtualHostStop",
                "+org.apache.qpid.systests.jms_1_1.connection.BrokerClosesClientConnectionTest#testClientCloseOnVirtualHostStop",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 6df36fddc4..dace6ea3a8 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -23,2 +23,5 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testUnsubscribeWhenUsing",
                "+// Exclude tests of connection URL failover method property",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+",
                " // 0-10 and 0-9 connections dont generate the exact same logging due to protocol differences",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index efb7b9705d..0fbda7fbf0 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -53,2 +53,5 @@ org.apache.qpid.client.failover.MultipleBrokersFailoverTest#*",
                " org.apache.qpid.test.client.failover.FailoverTest#*",
                "+// QPID-3133: On 0-10, the exception listener is currently not invoked when reconnection fails to occurs.",
                "+org.apache.qpid.server.failover.FailoverMethodTest#*",
                "+"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6f8840aed0466676d86e4c3a78dcdfc929e27a12"
                ]
            ],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "71190b97d7c60ae874b3178ae6ad78f355f8a1a4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516990526,
            "hunks": 2,
            "message": "NO-JIRA: Bump qpid-jms-client (0.26.0 to 0.29.0) and netty (4.1.16.Final to 4.1.19.Final) test dependencies",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index dadc1c6cfc..0998abcc9b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -146,3 +146,3 @@",
                "     <mockito-version>1.9.5</mockito-version>",
                "-    <netty-version>4.1.16.Final</netty-version>",
                "+    <netty-version>4.1.19.Final</netty-version>",
                "     <hamcrest-version>1.3</hamcrest-version>",
                "@@ -151,3 +151,3 @@",
                "     <httpclient-version>4.5.3</httpclient-version>",
                "-    <qpid-jms-client-version>0.26.0</qpid-jms-client-version>",
                "+    <qpid-jms-client-version>0.29.0</qpid-jms-client-version>",
                "     <qpid-jms-client-amqp-0-x-version>6.3.0</qpid-jms-client-amqp-0-x-version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ccf691b2caeb16e2f9421146cfefd3489a6bf5bf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515690237,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor PersistentStoreTest as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2d10c6c8b7..987309938f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -49,3 +49,2 @@ org.apache.qpid.server.AlertingTest#*",
                " // The C++ server has a totally different persistence mechanism",
                "-org.apache.qpid.server.store.PersistentStoreTest#*",
                " org.apache.qpid.server.store.SplitStoreTest#*",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 66cd5e8bb8..d4052deace 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -20,3 +20,2 @@",
                " //These tests require a persistent store",
                "-org.apache.qpid.server.store.PersistentStoreTest#*",
                " org.apache.qpid.server.store.SplitStoreTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "59048193c5df0e74302024b3776c0b84ed13eec0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516226476,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move broker system test MessageCompressionTest into MessageContentCompressionRestTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 78511ee4c7..ba925a17f3 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -108,3 +108,3 @@ org.apache.qpid.transport.ProtocolNegotiationTest#testNoConnectionOpenSent_Broke",
                " // QPID-6000 : Tests Qpid Broker-J specific message compression functionality, and uses the REST API to test it",
                "-org.apache.qpid.systest.MessageCompressionTest#*",
                "+org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 570e0ba63d..d52d70ec41 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -63,3 +63,3 @@ org.apache.qpid.systest.messageencryption.MessageEncryptionTest#*",
                " // Message compression not currently supported by the 1.0 client",
                "-org.apache.qpid.systest.MessageCompressionTest#*",
                "+org.apache.qpid.systest.rest.MessageContentCompressionRestTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a3b816baebf8ce1cb64ca63309565badbe725cf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512089863,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Add TopicSessionTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 03ca98c719..7cec0bfe2c 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -45,5 +45,2 @@ org.apache.qpid.systest.management.amqp.AmqpManagementTest#testGetTypesOnVhostMa",
                " org.apache.qpid.test.unit.client.QueueSessionFactoryTest#testQueueSessionIsNotATopicSession",
                "-// ... and vice versa",
                "-org.apache.qpid.test.unit.client.TopicSessionFactoryTest#testTopicSessionIsNotAQueueSession",
                "-org.apache.qpid.test.unit.client.QueueSessionFactoryTest#testTopicSessionCannotCreateCreateBrowser"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b618667270dcdf2880ff02b0a21aaa6ecab37064",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513877233,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Move MessageGroupTest to new suite",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 1a0d4c5a18..c3e1657f0f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -129,8 +129,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// CPP Broker does not implement non-\"shared group\" message groups",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testSimpleGroupAssignment",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testConsumerCloseGroupAssignment",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testConsumerCloseWithRelease",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testGroupAssignmentSurvivesEmpty",
                "-",
                " // passwd script is a Qpid Broker-J specific command line tool",
                "@@ -233,5 +227 @@ org.apache.qpid.systest.MessageRoutingTest#*",
                " org.apache.qpid.server.routing.ExchangeRoutingTest#*",
                "-",
                "-# For 0-8..0-10 these tests assume that the Broker defaults to use header JMSXGroupID which is not true for the CPP Broker.",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testSharedGroupSimpleGroupAssignmentWithJMSXGroupID",
                "-org.apache.qpid.server.queue.MessageGroupQueueTest#testSimpleGroupAssignmentWithJMSXGroupID",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "377315ba5d272d0c4125b6f8deb88b8e1de4c38e",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512732488,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Move TimeToLiveTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index 9be3f1c8ca..806d35b07f 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -35,2 +35,3 @@ import javax.jms.Session;",
                " import javax.jms.Topic;",
                "+import javax.jms.TopicConnection;",
                " import javax.naming.NamingException;",
                "@@ -196,2 +197,7 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    protected TopicConnection getTopicConnection() throws JMSException, NamingException",
                "+    {",
                "+        return (TopicConnection) getConnection();",
                "+    }",
                " }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 38b909184f..ca9943a215 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -62,6 +62,2 @@ org.apache.qpid.test.unit.client.connection.ExceptionListenerTest#testExceptionL",
                "-// c++ broker expires messages on delivery or when the queue cleaner thread runs.",
                "-org.apache.qpid.server.queue.TimeToLiveTest#testActiveTTL",
                "-org.apache.qpid.server.queue.TimeToLiveTest#testActiveTTLwithDurableSubscription",
                "-",
                " // QPID-1727 , QPID-1726 :c++ broker does not support flow to disk on transient queues. Also it requries a persistent store impl. for Apache"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ad30dd90280ec0c8d32d2ea957336119dba3504",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512147697,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Move TemporaryQueueTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index 44ad555103..9be3f1c8ca 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -22,3 +22,8 @@ package org.apache.qpid.systests;",
                "+import static org.junit.Assert.assertNotNull;",
                "+import static org.junit.Assert.assertTrue;",
                "+",
                " import java.net.InetSocketAddress;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                " import java.util.Map;",
                "@@ -164,2 +169,29 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    protected int getQueueCount() throws Exception",
                "+    {",
                "+        Map<String, Object> statisticsMap = getVirtualHostStatistics(\"queueCount\");",
                "+        return ((Number) statisticsMap.get(\"queueCount\")).intValue();",
                "+    }",
                "+",
                "+    protected long getTotalDepthOfQueuesMessages() throws Exception",
                "+    {",
                "+        Map<String, Object> statisticsMap = getVirtualHostStatistics(\"totalDepthOfQueuesMessages\");",
                "+        return ((Number) statisticsMap.get(\"totalDepthOfQueuesMessages\")).intValue();",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected Map<String, Object> getVirtualHostStatistics(final String... statisticsName) throws Exception",
                "+    {",
                "+        Map<String, Object> arguments = Collections.singletonMap(\"statistics\", Arrays.asList(statisticsName));",
                "+        Object statistics = performOperationUsingAmqpManagement(getVirtualHostName(),",
                "+                                                                \"getStatistics\",",
                "+                                                                \"org.apache.qpid.VirtualHost\",",
                "+                                                                arguments);",
                "+",
                "+        assertNotNull(\"Statistics is null\", statistics);",
                "+        assertTrue(\"Statistics is not map\", statistics instanceof Map);",
                "+",
                "+        return (Map<String, Object>) statistics;",
                "+    }",
                " }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 7bea664b4c..38b909184f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -218,5 +218,2 @@ org.apache.qpid.test.unit.basic.PropertyValueTest#testLargeHeader_010_HeadersFil",
                "-// QPID-6703 Use of Qpid Broker-J specific queue creation arguments to properly fulfill JMS TemporaryQueue contract",
                "-org.apache.qpid.test.unit.client.temporaryqueue.TemporaryQueueTest#testClosingSessionDoesNotDeleteQueue",
                "-",
                " # QPID-7156: Test requires a Broker with a virtualhost"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "557109a04752a3ddb6d6c980d82ff5a04f07ee16",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514463779,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Refactor arrival time filter tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index 8461664cef..09177f5ec2 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -136,2 +136,7 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "+    protected Queue getQueue(String queueName) throws Exception",
                "+    {",
                "+        return _jmsProvider.getTestQueue(queueName);",
                "+    }",
                "+",
                "     protected Topic createTopic(final String topicName) throws Exception",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 0c493d448e..d1637c23a4 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -169,3 +169,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNo",
                "-org.apache.qpid.server.queue.ArrivalTimeFilterTest#*",
                " org.apache.qpid.server.queue.EnsureNondestructiveConsumersTest#*",
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index 08318100fe..33a3cd6cfe 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -46,3 +46 @@ org.apache.qpid.test.unit.topic.DurableSubscriptionTest#*",
                " org.apache.qpid.server.queue.ConsumerPriorityTest#*",
                "-org.apache.qpid.server.queue.ArrivalTimeFilterTest#*",
                "-"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "test-profiles/CPPExcludes",
                "test-profiles/Java10BrokenTestsExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3f8e59addf2eddda0ead475b4df18f87fe269e3",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514490979,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Add durable subscriber test and remove redundant durable subscriber tests",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 6b10a13c02..966aebd6d6 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -65,5 +65,2 @@ org.apache.qpid.test.unit.close.FlowToDiskBackingQueueDeleteTest#*",
                "-//QPID-1818 : 0-10 Client code path does not correctly restore a transacted session after failover.",
                "-org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*",
                "-",
                " // QPID-1730: the C++ server has a totally different logging mechanism. We should split this file differently",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index 632f63d6d9..964aefdc94 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -20,3 +20,2 @@",
                " //These tests require a persistent store",
                "-org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*",
                " org.apache.qpid.server.store.PersistentStoreTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "95d34b9224c8d5aab5bf55cabc721120994e42d6",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513256736,
            "hunks": 1,
            "message": "QPID-8058: [Broker-J] Address review comments",
            "diff": [
                "diff --git a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "index 76d91af1e8..b703ec1144 100644",
                "--- a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "+++ b/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java",
                "@@ -167,2 +167,6 @@ public abstract class AbstractSystemMessageSource implements MessageSource",
                "             }",
                "+            else",
                "+            {",
                "+                _target.noMessagesAvailable();",
                "+            }",
                "             return null;"
            ],
            "changed_files": [
                "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractSystemMessageSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8058": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8058",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2a1c965fdae4f3c49b4c87aa38326462c3c297b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513949410,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor queue browser tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 9089ee9386..6d2673b76c 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -49,6 +49,2 @@ org.apache.qpid.test.unit.ack.RecoverTest#testRecoverSessionAfterCreditExhausted",
                "-// 0-x specific acknowledge modes",
                "-org.apache.qpid.test.client.QueueBrowserNoAckTest#*",
                "-org.apache.qpid.test.client.QueueBrowserPreAckTest#*",
                "-",
                " // The new client does not (and should not) support our custom MD5 HEXED / HASHED mechanisms"
            ],
            "changed_files": [
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fbdb9f9f575917adea1b117c986a4d7b2bbffb55",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514503631,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor sorted queue tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 9a249f2349..cb245cfa4b 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -35,5 +35,2 @@ org.apache.qpid.server.queue.ConflationQueueTest#*",
                "-// the 0-10 c++ broker does not implement sorted queues",
                "-org.apache.qpid.server.queue.SortedQueueTest#*",
                "-",
                " // the 0-10 c++ broker does not implement DLQ",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index d59fab3f6b..7c78ca50e8 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -41,3 +41,2 @@ org.apache.qpid.test.client.destination.AddressBasedDestinationTest#testJMSDesti",
                " org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#*",
                "-org.apache.qpid.server.queue.AddressBasedSortedQueueTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2e57db7cc45ca4f0b8bb12c83f60ba2a6c6c25d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515113954,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor queue message durability tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 09e7152690..26c357343f 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -138,5 +138,2 @@ org.apache.qpid.client.HeartbeatTest#testHeartbeatsEnabledBrokerSide",
                "-// Tests queue message durability settings which are a Qpid Broker-J specific feature",
                "-org.apache.qpid.server.queue.QueueMessageDurabilityTest#*",
                "-",
                " // CPP Broker does not timeout connections with no activity like the Qpid Broker-J",
                "diff --git a/test-profiles/JavaTransientExcludes b/test-profiles/JavaTransientExcludes",
                "index ec48a4a5dd..66cd5e8bb8 100644",
                "--- a/test-profiles/JavaTransientExcludes",
                "+++ b/test-profiles/JavaTransientExcludes",
                "@@ -25,4 +25,2 @@ org.apache.qpid.server.logging.AlertingTest#testAlertingReallyWorksWithChanges",
                "-org.apache.qpid.server.queue.QueueMessageDurabilityTest#*",
                "-",
                " org.apache.qpid.server.store.berkeleydb.*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/JavaTransientExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bd640ffec47e96fef5fcf0eed92edbb44fcaf9b9",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513869158,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move DefaultFiltersTest to extension suite",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2860246fdd..1a0d4c5a18 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -184,3 +184,2 @@ org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testPrefetchWindowExpandsO",
                " org.apache.qpid.server.queue.ArrivalTimeFilterTest#*",
                "-org.apache.qpid.server.queue.DefaultFiltersTest#*",
                " org.apache.qpid.server.queue.EnsureNondestructiveConsumersTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f24f2c74b858d44737d47a328930fbcf61491975",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513953960,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Subsume plethora of acknowledgement tests into a JMS 1.1 test case",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index f1f1426bd7..2d76e4b337 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -214,5 +214,2 @@ org.apache.qpid.server.queue.LastValueQueueTest#testConflatedQueueDepth",
                " org.apache.qpid.server.queue.QueueDepthWithSelectorTest#test",
                "-org.apache.qpid.test.unit.ack.Acknowledge2ConsumersTest#*",
                "-org.apache.qpid.test.unit.ack.AcknowledgeOnMessageTest#*",
                "-org.apache.qpid.test.unit.ack.AcknowledgeTest#*",
                " org.apache.qpid.test.unit.message.UTF8Test#*",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 6d2673b76c..a8cee14bca 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -62,9 +62,2 @@ org.apache.qpid.server.logging.ChannelLoggingTest#testChannelClosedOnExclusiveQu",
                "-",
                "-// These tests test acknowledge modes that are 0-8/9/10 client specific",
                "-org.apache.qpid.test.unit.ack.AcknowledgeTest#testNoAck",
                "-org.apache.qpid.test.unit.ack.AcknowledgeTest#testPreAck",
                "-org.apache.qpid.test.unit.ack.AcknowledgeOnMessageTest#testNoAck",
                "-org.apache.qpid.test.unit.ack.AcknowledgeOnMessageTest#testPreAck",
                "-",
                " // This test is checking features of the 0-x client specific implementation of Session"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "37365f91801ffbf070f0580fa7fda7ec91f66fd0",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514223374,
            "hunks": 6,
            "message": "QPID-6933: [System Tests] Refactor Prefetch tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "index c2dfe75244..01e75f1776 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "@@ -54,3 +54,3 @@ public class Utils",
                "-    public static void sendMessages(final Connection connection, final Destination destination, final int messageNumber)",
                "+    public static void sendMessages(final Connection connection, final Destination destination, final int count)",
                "             throws JMSException",
                "@@ -60,3 +60,3 @@ public class Utils",
                "         {",
                "-            sendMessages(session, destination, messageNumber);",
                "+            sendMessages(session, destination, count);",
                "         }",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 3c1ef4961c..dcfc337f4b 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -169,4 +169,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNo",
                "-org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testPrefetchWindowExpandsOnReceiveTransaction",
                "-",
                " org.apache.qpid.server.queue.ArrivalTimeFilterTest#*",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 4934dd3f47..d0448fa24f 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -57,4 +57,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNo",
                "-org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testPrefetchWindowExpandsOnReceiveTransaction",
                "-",
                " // QPID-6722: Race client side means that session close can end in exception when failover is in progress.",
                "diff --git a/test-profiles/Java10UninvestigatedTestsExcludes b/test-profiles/Java10UninvestigatedTestsExcludes",
                "index 349fb71dad..4402248198 100644",
                "--- a/test-profiles/Java10UninvestigatedTestsExcludes",
                "+++ b/test-profiles/Java10UninvestigatedTestsExcludes",
                "@@ -22,5 +22,3 @@",
                "-org.apache.qpid.client.prefetch.PrefetchBehaviourTest#*",
                "-",
                "-QPID-XXXX: It could be a broker bug. The issue requires further inevestigation",
                "+QPID-XXXX: It could be a broker bug. The issue requires further investigation",
                " org.apache.qpid.systest.AnonymousProducerTest#testPublishIntoNonExistingQueue",
                "diff --git a/test-profiles/JavaPre010Excludes b/test-profiles/JavaPre010Excludes",
                "index d1883a9527..d59fab3f6b 100644",
                "--- a/test-profiles/JavaPre010Excludes",
                "+++ b/test-profiles/JavaPre010Excludes",
                "@@ -57,5 +57,2 @@ org.apache.qpid.test.unit.client.connection.ConnectionTest#testClientIDVerificat",
                "-// QPID-3604 This fix is applied only to the 0-10 code, hence this test does not work for pre 0-10.",
                "-org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testConnectionStop",
                "-",
                " // QPID-3396"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/Utils.java",
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/Java10UninvestigatedTestsExcludes",
                "test-profiles/JavaPre010Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "557fe9c1c8245ad447ae7722d2631586cb358f78",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1516964018,
            "hunks": 1,
            "message": "QPID-8086: [BDB HA] Standalone tool to delete orphan configuration records from a BDB JE database - for exceptional use only",
            "diff": [
                "diff --git a/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java",
                "new file mode 100644",
                "index 0000000000..78774ab5e4",
                "--- /dev/null",
                "+++ b/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java",
                "@@ -0,0 +1,351 @@",
                "+/*",
                "+ *",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ *",
                "+ */",
                "+package org.apache.qpid.server.store.berkeleydb;",
                "+",
                "+import java.io.File;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+import java.util.UUID;",
                "+",
                "+import com.sleepycat.bind.tuple.IntegerBinding;",
                "+import com.sleepycat.bind.tuple.TupleBase;",
                "+import com.sleepycat.bind.tuple.TupleInput;",
                "+import com.sleepycat.bind.tuple.TupleOutput;",
                "+import com.sleepycat.je.Cursor;",
                "+import com.sleepycat.je.Database;",
                "+import com.sleepycat.je.DatabaseConfig;",
                "+import com.sleepycat.je.DatabaseEntry;",
                "+import com.sleepycat.je.Environment;",
                "+import com.sleepycat.je.EnvironmentConfig;",
                "+import com.sleepycat.je.LockMode;",
                "+import com.sleepycat.je.OperationStatus;",
                "+import com.sleepycat.je.Transaction;",
                "+import com.sleepycat.je.TransactionConfig;",
                "+import com.sleepycat.je.rep.ReplicatedEnvironment;",
                "+import com.sleepycat.je.rep.ReplicationConfig;",
                "+",
                "+/**",
                "+ * Standalone tool to remove one or more configuration records from a BDB store.",
                "+ * Intended for exceptional use only.",
                "+ *",
                "+ * If targeting a BDB HA store, then it is important to establish which node was",
                "+ * most recently master and perform the update there.",
                "+ */",
                "+public class OrphanConfigurationRecordPurger",
                "+{",
                "+    private static final String USAGE_STRING =",
                "+            \"usage: \" + (String.format(\"java %s\\n\"",
                "+                                       + \"       -dryRun                  # Dry run mode\\n\"",
                "+                                       + \"       -storePath <dir>         # Store path\\n\"",
                "+                                       + \"       [-ha                     # HA mode\\n\"",
                "+                                       + \"        -nodeName <nodename>    # HA node name\\n\"",
                "+                                       + \"        -nodeHost <nodehost>    # HA node host\\n\"",
                "+                                       + \"        -groupName <groupName>] # HA group name\\n\"",
                "+                                       + \"       -targetUuid <uuid1>      # UUID to delete\\n\"",
                "+                                       + \"       [-targetUuid <uuid2>...] # UUID to delete\\n\",",
                "+                                       OrphanConfigurationRecordPurger.class.getName()));",
                "+",
                "+    private static final String VERSION_DB_NAME = \"DB_VERSION\";",
                "+",
                "+    private static final String CONFIGURED_OBJECTS_DB_NAME = \"CONFIGURED_OBJECTS\";",
                "+    private static final String CONFIGURED_OBJECT_HIERARCHY_DB_NAME = \"CONFIGURED_OBJECT_HIERARCHY\";",
                "+",
                "+    private static final Set<Integer> ALLOWED_VERSIONS = new HashSet<>(Arrays.asList(8, 9));",
                "+    private static final DatabaseConfig READ_ONLY_DB_CONFIG = DatabaseConfig.DEFAULT.setAllowCreate(false).setReadOnly(true).setTransactional(true);",
                "+    private static final DatabaseConfig READ_WRITE_DB_CONFIG = READ_ONLY_DB_CONFIG.setReadOnly(false);",
                "+",
                "+    private String _storePath;",
                "+    private Set<UUID> _uuids = new HashSet<>();",
                "+    private boolean _dryRun;",
                "+    private boolean _ha;",
                "+    private String _nodeName;",
                "+    private String _nodeHost;",
                "+    private String _groupName;",
                "+",
                "+    public static void main(String[] argv) throws Exception",
                "+    {",
                "+        final OrphanConfigurationRecordPurger purger = new OrphanConfigurationRecordPurger();",
                "+        purger.parseArgs(argv);",
                "+        purger.purge();",
                "+    }",
                "+",
                "+    private void purge() throws Exception",
                "+    {",
                "+        EnvironmentConfig config = EnvironmentConfig.DEFAULT;",
                "+        config.setAllowCreate(false);",
                "+        config.setTransactional(true);",
                "+",
                "+        try (Environment env = createEnvironment(config))",
                "+        {",
                "+            final int version = getVersion(env, READ_ONLY_DB_CONFIG);",
                "+            if (!ALLOWED_VERSIONS.contains(version))",
                "+            {",
                "+                throw new IllegalStateException(String.format(\"Store has unexpected version. Found %d expected %s\",",
                "+                                                              version,",
                "+                                                              ALLOWED_VERSIONS));",
                "+            }",
                "+",
                "+            final Transaction tx = env.beginTransaction(null,",
                "+                                                        TransactionConfig.DEFAULT.setReadOnly(_dryRun));",
                "+            boolean success = false;",
                "+            int configChanges = 0;",
                "+            try",
                "+            {",
                "+                for (final UUID uuid : _uuids)",
                "+                {",
                "+                    configChanges += purgeOrphans(env, tx, uuid);",
                "+                }",
                "+",
                "+                success = true;",
                "+            }",
                "+            finally",
                "+            {",
                "+                if (!_dryRun && success && configChanges > 0)",
                "+                {",
                "+                    tx.commit();",
                "+                    System.out.format(\"%d config records(s) and associated hierarchy records purged.\", configChanges);",
                "+                }",
                "+                else",
                "+                {",
                "+                    System.out.println(\"No config or config hierarchy records purged.\");",
                "+                    tx.abort();",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private Environment createEnvironment(final EnvironmentConfig config) throws Exception",
                "+    {",
                "+        final Environment env;",
                "+        if (_ha)",
                "+        {",
                "+            final ReplicationConfig repConfig = (ReplicationConfig) ReplicationConfig.DEFAULT",
                "+                    .setNodeHostPort(_nodeHost)",
                "+                    .setGroupName(_groupName)",
                "+                    .setNodeName(_nodeName)",
                "+                    .setDesignatedPrimary(true)",
                "+                    .setElectableGroupSizeOverride(1);",
                "+",
                "+            env = new ReplicatedEnvironment(new File(_storePath), repConfig, config);",
                "+        }",
                "+        else",
                "+        {",
                "+            env = new Environment(new File(_storePath), config);",
                "+        }",
                "+        return env;",
                "+    }",
                "+",
                "+    private int getVersion(final Environment env, final DatabaseConfig dbConfig)",
                "+    {",
                "+        try (Database versionDb = env.openDatabase(null, VERSION_DB_NAME, dbConfig);",
                "+             Cursor cursor = versionDb.openCursor(null, null))",
                "+        {",
                "+",
                "+            DatabaseEntry key = new DatabaseEntry();",
                "+            DatabaseEntry value = new DatabaseEntry();",
                "+",
                "+            int version = 0;",
                "+",
                "+            while (cursor.getNext(key, value, null) == OperationStatus.SUCCESS)",
                "+            {",
                "+                int ver = IntegerBinding.entryToInt(key);",
                "+                if (ver > version)",
                "+                {",
                "+                    version = ver;",
                "+                }",
                "+            }",
                "+",
                "+            return version;",
                "+        }",
                "+    }",
                "+",
                "+    private int purgeOrphans(Environment env, final Transaction tx, UUID uuid) throws Exception",
                "+    {",
                "+        try(Database configDb = env.openDatabase(tx, CONFIGURED_OBJECTS_DB_NAME, READ_WRITE_DB_CONFIG))",
                "+        {",
                "+            DatabaseEntry key = new DatabaseEntry();",
                "+            DatabaseEntry value = new DatabaseEntry();",
                "+",
                "+            TupleOutput output = new TupleOutput();",
                "+            output.writeLong(uuid.getMostSignificantBits());",
                "+            output.writeLong(uuid.getLeastSignificantBits());",
                "+            TupleBase.outputToEntry(output, key);",
                "+",
                "+            OperationStatus status =",
                "+                    _dryRun ? configDb.get(tx, key, value, LockMode.DEFAULT) : configDb.delete(tx, key);",
                "+",
                "+            if (status == OperationStatus.SUCCESS)",
                "+            {",
                "+                System.out.format(\"Config record for UUID %s found\\n\", uuid);",
                "+",
                "+                try (Database hierarchyDb = env.openDatabase(null, CONFIGURED_OBJECT_HIERARCHY_DB_NAME,",
                "+                                                             READ_WRITE_DB_CONFIG);",
                "+                     Cursor hierarchyCursor = hierarchyDb.openCursor(tx, null))",
                "+                {",
                "+",
                "+                    DatabaseEntry hkey = new DatabaseEntry();",
                "+                    DatabaseEntry hvalue = new DatabaseEntry();",
                "+",
                "+                    int count = 0;",
                "+                    while (hierarchyCursor.getNext(hkey, hvalue, LockMode.DEFAULT) == OperationStatus.SUCCESS)",
                "+                    {",
                "+                        TupleInput dis = new TupleInput(hkey.getData());",
                "+                        final long mostSigBits = dis.readLong();",
                "+                        final long leastSigBits = dis.readLong();",
                "+                        final UUID recId = new UUID(mostSigBits, leastSigBits);",
                "+                        if (recId.equals(uuid))",
                "+                        {",
                "+                            if (!_dryRun)",
                "+                            {",
                "+                                hierarchyCursor.delete();",
                "+                            }",
                "+                            count++;",
                "+                        }",
                "+                    }",
                "+",
                "+                    System.out.format(\"%d config hierarchy record(s) found\\n\", count);",
                "+                    return 1;",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                System.out.format(\"Config object record for UUID %s NOT found\\n\", uuid);",
                "+                return 0;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void parseArgs(final String[] argv)",
                "+    {",
                "+        final int argCount = argv.length;",
                "+",
                "+        if (argCount == 0)",
                "+        {",
                "+            printUsage(null);",
                "+        }",
                "+",
                "+        int argc = 0;",
                "+        while (argc < argCount)",
                "+        {",
                "+            String thisArg = argv[argc++];",
                "+            switch (thisArg)",
                "+            {",
                "+                case \"-storePath\":",
                "+                    if (argc < argCount)",
                "+                    {",
                "+                        _storePath = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-storePath requires an argument\");",
                "+                    }",
                "+                    break;",
                "+                case \"-targetUuid\":",
                "+                    if (argc < argCount)",
                "+                    {",
                "+                        String uuid = argv[argc++];",
                "+                        _uuids.add(UUID.fromString(uuid));",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-targetUuid requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-ha\":",
                "+                    _ha = true;",
                "+                    break;",
                "+                case \"-nodeName\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _nodeName = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-nodeName requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-nodeHost\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _nodeHost = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-nodeHost requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-groupName\":",
                "+                if (argc < argCount)",
                "+                    {",
                "+                        _groupName = argv[argc++];",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        printUsage(\"-groupName requires an argument\");",
                "+                    }",
                "+                break;",
                "+                case \"-dryRun\":",
                "+                _dryRun = true;",
                "+                break;",
                "+                default:",
                "+                    printUsage(thisArg + \" is not a valid argument\");",
                "+                    break;",
                "+            }",
                "+        }",
                "+",
                "+        if (_storePath == null)",
                "+        {",
                "+            printUsage(\"-storePath is a required argument\");",
                "+        }",
                "+        if (_uuids.isEmpty())",
                "+        {",
                "+            printUsage(\"-targetUuid is a required argument\");",
                "+        }",
                "+        if (_ha)",
                "+        {",
                "+            if (_nodeName == null)",
                "+            {",
                "+                printUsage(\"-nodeName is a required argument when in ha mode\");",
                "+            }",
                "+            if (_nodeHost == null)",
                "+            {",
                "+                printUsage(\"-nodeHost is a required argument when in ha mode\");",
                "+            }",
                "+            if (_groupName == null)",
                "+            {",
                "+                printUsage(\"-groupName is a required argument when in ha mode\");",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void printUsage(String msg)",
                "+    {",
                "+        if (msg != null)",
                "+        {",
                "+            System.err.println(msg);",
                "+        }",
                "+",
                "+        System.err.println(USAGE_STRING);",
                "+        System.exit(-1);",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/OrphanConfigurationRecordPurger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-8086": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-8086",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b1127b7b933171aa8bbee4c05ba15e4c32b1dcdf",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512843346,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move test for deletion of temporary queue from SyncPublishTest into JMS 1.1 system test TemporaryQueueTest",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index ca9943a215..6cf6646598 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -192,4 +192,2 @@ org.apache.qpid.client.prefetch.PrefetchBehaviourTest#testPrefetchWindowExpandsO",
                "-org.apache.qpid.client.SyncPublishTest#*",
                "-",
                " org.apache.qpid.server.queue.ArrivalTimeFilterTest#*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4e6fcf55854076fce74360dadbd1f366e5a2b4f",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514492566,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor nondestructive consumer tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 966aebd6d6..054e5c9a23 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -163,3 +163,2 @@ org.apache.qpid.test.unit.client.AMQSessionTest#testQueueDepthForQueueThatDoesNo",
                "-org.apache.qpid.server.queue.EnsureNondestructiveConsumersTest#*",
                " org.apache.qpid.server.protocol.v0_8.*"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "569e7f6a4beb4fed96a946dd03da4a839330c1e5",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512088667,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Add TopicSubscriberTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/Java10BrokenTestsExcludes b/test-profiles/Java10BrokenTestsExcludes",
                "index a47db57b2d..03ca98c719 100644",
                "--- a/test-profiles/Java10BrokenTestsExcludes",
                "+++ b/test-profiles/Java10BrokenTestsExcludes",
                "@@ -29,7 +29,2 @@ org.apache.qpid.test.unit.transacted.TransactionTimeoutDisabledTest#*",
                "-",
                "-// Testing behaviour of changing the topic associated with a durable subscriber",
                "-org.apache.qpid.test.unit.topic.TopicSessionTest#testSubscriptionNameReuseForDifferentTopicSingleConnection",
                "-org.apache.qpid.test.unit.topic.TopicSessionTest#testSubscriptionNameReuseForDifferentTopicTwoConnections",
                "-",
                " // the received message is being treated as an object message (because it lacks the necessary JMS annotation?)",
                "diff --git a/test-profiles/Java10Excludes b/test-profiles/Java10Excludes",
                "index 52e1ba4c11..f1f3529e92 100644",
                "--- a/test-profiles/Java10Excludes",
                "+++ b/test-profiles/Java10Excludes",
                "@@ -35,5 +35,2 @@ org.apache.qpid.server.failover.FailoverMethodTest#*",
                "-// Testing that the 0-x implementation of a durable topic does not cause queue growth when messages are excluded by selectors",
                "-org.apache.qpid.test.unit.topic.TopicSessionTest#testNonMatchingMessagesHandledCorrectly",
                "-",
                " // This test covers the client version specific mechanisms for restricting the types of Object which can be sent via an ObjectMessage"
            ],
            "changed_files": [
                "test-profiles/Java10BrokenTestsExcludes",
                "test-profiles/Java10Excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fbd973fd4f62f9edd1edc76175df63dcfd83f80a",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514575483,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor queue producer flow control overflow policy tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index 09177f5ec2..a5c9553a86 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -203,2 +203,59 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "+    protected void updateEntityUsingAmqpManagement(final String entityName,",
                "+                                                   final String entityType,",
                "+                                                   final Map<String, Object> attributes)",
                "+            throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            _managementFacade.updateEntityUsingAmqpManagement(entityName, session, entityType, attributes);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected void deleteEntityUsingAmqpManagement(final String entityName,",
                "+                                                   final String entityType)",
                "+            throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);",
                "+            _managementFacade.deleteEntityUsingAmqpManagement(entityName, session, entityType);",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+",
                "+    protected Map<String, Object> readEntityUsingAmqpManagement(String type, String name, boolean actuals) throws Exception",
                "+    {",
                "+        Connection connection = getConnection();",
                "+        try",
                "+        {",
                "+            connection.start();",
                "+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "+            try",
                "+            {",
                "+                return _managementFacade.readEntityUsingAmqpManagement(session, type, name, actuals);",
                "+            }",
                "+            finally",
                "+            {",
                "+                session.close();",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            connection.close();",
                "+        }",
                "+    }",
                "+",
                "     protected TopicConnection getTopicConnection() throws JMSException, NamingException",
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 184207613f..c1a59a9b79 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -81,3 +81,2 @@ org.apache.qpid.test.client.message.SelectorTest#testRuntimeSelectorError",
                " //QPID-942 : Implemented Channel.Flow based Producer Side flow control to the Qpid Broker-J (not in CPP Broker)",
                "-org.apache.qpid.server.queue.ProducerFlowControlTest#*",
                " org.apache.qpid.test.client.ProducerFlowControlTest#*"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c405c844b6c7d35c78b5aca6ba97de2961c8e92b",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1513958400,
            "hunks": 4,
            "message": "QPID-6933: [System Tests] Refactor AsynchMessageListenerTest as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 2d76e4b337..3c1ef4961c 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -129,5 +129,2 @@ org.apache.qpid.scripts.QpidPasswdTest#*",
                "-// QPID-3604: Immediate Prefetch no longer supported by 0-10",
                "-org.apache.qpid.client.AsynchMessageListenerTest#testImmediatePrefetchWithMessageListener",
                "-",
                " // Qpid Broker-J has an extenstion to allow it to influence the prefix of temporary queue names",
                "diff --git a/test-profiles/Java010Excludes b/test-profiles/Java010Excludes",
                "index 8772d2d7fb..4934dd3f47 100755",
                "--- a/test-profiles/Java010Excludes",
                "+++ b/test-profiles/Java010Excludes",
                "@@ -52,5 +52,2 @@ org.apache.qpid.client.failover.AddressBasedFailoverBehaviourTest#testFlowContro",
                "-// QPID-3604: Immediate Prefetch no longer supported by 0-10",
                "-org.apache.qpid.client.AsynchMessageListenerTest#testImmediatePrefetchWithMessageListener",
                "-",
                " // JMS 0-10 client does not support re-binding the queue to the same exchange",
                "diff --git a/test-profiles/JavaExcludes b/test-profiles/JavaExcludes",
                "index c236ad5100..ba4eaf1408 100644",
                "--- a/test-profiles/JavaExcludes",
                "+++ b/test-profiles/JavaExcludes",
                "@@ -19,5 +19,2 @@",
                "-// QPID-1823: this takes ages to run",
                "-org.apache.qpid.client.SessionCreateTest#*",
                "-",
                " // Test runs for 2 minutes testing that subtraction works",
                "diff --git a/test-profiles/cpp.ssl.excludes b/test-profiles/cpp.ssl.excludes",
                "index 3d7b929831..c2e8cfe7ac 100644",
                "--- a/test-profiles/cpp.ssl.excludes",
                "+++ b/test-profiles/cpp.ssl.excludes",
                "@@ -23,3 +23 @@ org.apache.qpid.client.ssl.SSLTest#testCreateSSLConnectionUsingConnectionURLPara",
                "-//QPID-3431: excluding because this takes 30+ mins to run on the C++ SSL profile for some reason",
                "-org.apache.qpid.client.SessionCreateTest#testSessionCreationLimit"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes",
                "test-profiles/Java010Excludes",
                "test-profiles/JavaExcludes",
                "test-profiles/cpp.ssl.excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b52830d5a6bf387a359a91aa00b360ac9b17aae4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515149044,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Switch to sync publishing in ConsumerPriorityTest",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index c94ed67b8b..a37f66dc68 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -42,2 +42,4 @@ import org.junit.Rule;",
                " import org.junit.rules.TestName;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -49,2 +51,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                " {",
                "+    private static final Logger LOGGER = LoggerFactory.getLogger(JmsTestBase.class);",
                "     private static JmsProvider _jmsProvider;",
                "@@ -68,2 +71,3 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "         }",
                "+        LOGGER.debug(\"Test receive timeout is {} milliseconds\", getReceiveTimeout());",
                "     }"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ac36ca5e7169c19f5c39943d563d5253fbfe545",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512854112,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move JMSReplyToTest and some tests from JMSDestinationTest into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/cpp.excludes b/test-profiles/cpp.excludes",
                "index b8cbd4b6c7..d41d8fe59e 100644",
                "--- a/test-profiles/cpp.excludes",
                "+++ b/test-profiles/cpp.excludes",
                "@@ -23,5 +23,2 @@",
                "-// This test requires a management interface to move messages",
                "-org.apache.qpid.test.client.message.JMSDestinationTest#testMovedToQueue",
                "-",
                " // This test requires a broker capable of 0-8/9 and 0-10"
            ],
            "changed_files": [
                "test-profiles/cpp.excludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b1a7aacc4c61ff07a9da6d6c2ea4db3ee41e016d",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1514497431,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor last value queue tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 054e5c9a23..9a249f2349 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -192,3 +192,2 @@ org.apache.qpid.server.queue.FlowToDiskTest#*",
                " org.apache.qpid.server.routing.AlternateBindingRoutingTest#*",
                "-org.apache.qpid.server.queue.LastValueQueueTest#testConflatedQueueDepth",
                " org.apache.qpid.server.queue.QueueDepthWithSelectorTest#test"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2344478db6c9895a0e0974eabfa818bbf3da8ca2",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1511965310,
            "hunks": 3,
            "message": "QPID-6933: [System Tests] Fix profile activation for JMS 1.1 system tests",
            "diff": [
                "diff --git a/systests/qpid-systests-jms_1.1/pom.xml b/systests/qpid-systests-jms_1.1/pom.xml",
                "index 6dbb47f9f6..b853c1f3ac 100644",
                "--- a/systests/qpid-systests-jms_1.1/pom.xml",
                "+++ b/systests/qpid-systests-jms_1.1/pom.xml",
                "@@ -79,3 +79,3 @@",
                "         <profile>",
                "-            <id>excludesTestsIfNotAmqp1-0</id>",
                "+            <id>addJms11IfNecessary</id>",
                "             <activation>",
                "@@ -85,17 +85,9 @@",
                "             </activation>",
                "-            <build>",
                "-                <plugins>",
                "-                    <plugin>",
                "-                        <groupId>org.apache.maven.plugins</groupId>",
                "-                        <artifactId>maven-surefire-plugin</artifactId>",
                "-                        <configuration>",
                "-                            <excludes>",
                "-                                <exclude>**/*</exclude>",
                "-                            </excludes>",
                "-                        </configuration>",
                "-                    </plugin>",
                "-                </plugins>",
                "-            </build>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.qpid</groupId>",
                "+                    <artifactId>qpid-client</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "         </profile>",
                "-",
                "     </profiles>"
            ],
            "changed_files": [
                "systests/qpid-systests-jms_1.1/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7624590186189c6d4a801178c4f74636fa72aa39",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515116165,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Refactor temporary queue prefix tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/test-profiles/CPPExcludes b/test-profiles/CPPExcludes",
                "index 26c357343f..1dcbf1165a 100755",
                "--- a/test-profiles/CPPExcludes",
                "+++ b/test-profiles/CPPExcludes",
                "@@ -119,5 +119,2 @@ org.apache.qpid.scripts.QpidPasswdTest#*",
                "-// Qpid Broker-J has an extenstion to allow it to influence the prefix of temporary queue names",
                "-org.apache.qpid.client.TemporaryQueuePrefixTest#*",
                "-",
                " // QPID-3936: Exclude Performance Test Framework tests"
            ],
            "changed_files": [
                "test-profiles/CPPExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "208b5ae5938eb20ff04a1dd59d4e2c887e8197a4",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1515249980,
            "hunks": 2,
            "message": "QPID-6933: [System Tests] Refactor queue receiver tests as JMS 1.1 system test",
            "diff": [
                "diff --git a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "index a37f66dc68..de74ace35c 100644",
                "--- a/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "+++ b/systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java",
                "@@ -34,2 +34,3 @@ import javax.jms.JMSException;",
                " import javax.jms.Queue;",
                "+import javax.jms.QueueConnection;",
                " import javax.jms.Session;",
                "@@ -316,2 +317,7 @@ public abstract class JmsTestBase extends BrokerAdminUsingTestBase",
                "     }",
                "+",
                "+    public QueueConnection getQueueConnection() throws JMSException, NamingException",
                "+    {",
                "+        return (QueueConnection)getConnection();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "systests/qpid-systests-jms-core/src/main/java/org/apache/qpid/systests/JmsTestBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e6e56eb9cff5fc6eecc43553abff66c65300764",
            "repository": "https://github.com/apache/qpid-broker-j",
            "timestamp": 1512060880,
            "hunks": 1,
            "message": "QPID-6933: [System Tests] Move more transaction tests into JMS 1.1 system tests",
            "diff": [
                "diff --git a/test-profiles/CPPNoPrefetchExcludes b/test-profiles/CPPNoPrefetchExcludes",
                "index 35a57690af..ddfba4d8a6 100644",
                "--- a/test-profiles/CPPNoPrefetchExcludes",
                "+++ b/test-profiles/CPPNoPrefetchExcludes",
                "@@ -19,4 +19,2 @@",
                "-org.apache.qpid.test.unit.transacted.TransactedTest#testRollback",
                "-",
                " org.apache.qpid.test.unit.topic.DurableSubscriptionTest#testDurabilityNOACK"
            ],
            "changed_files": [
                "test-profiles/CPPNoPrefetchExcludes"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "QPID-6933": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "7.1.0",
                "7.1.1",
                "7.1.10",
                "7.1.11",
                "7.1.12",
                "7.1.2",
                "7.1.3",
                "7.1.4",
                "7.1.5",
                "7.1.6",
                "7.1.7",
                "7.1.8",
                "7.1.9",
                "8.0.0",
                "8.0.1",
                "8.0.2",
                "8.0.3",
                "8.0.4",
                "8.0.5",
                "8.0.6",
                "9.0.0",
                "9.1.0",
                "9.2.0"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: QPID-6933",
                    "relevance": 2
                }
            ]
        }
    ]
}
